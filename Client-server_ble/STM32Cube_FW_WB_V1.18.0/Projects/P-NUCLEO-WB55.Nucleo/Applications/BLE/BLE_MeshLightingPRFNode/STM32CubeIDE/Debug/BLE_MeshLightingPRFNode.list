
BLE_MeshLightingPRFNode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002cd14  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .RamFunc      0000007c  0802ce54  0802ce54  0003ce54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00007330  0802ced0  0802ced0  0003ced0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          00000008  08034200  08034200  00044200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .init_array   00000004  08034208  08034208  00044208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .fini_array   00000004  0803420c  0803420c  0004420c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .data         000002a0  20000008  08034210  00050008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  8 BLE_DRIVER_CONTEXT 00000049  200002a8  080344b0  000502a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 SYSTEM_DRIVER_CONTEXT 00000011  200002f4  080344f9  000502f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00007dfc  20000308  0803450a  00050308  2**2
                  ALLOC
 11 ._user_heap_stack 00001404  20008104  0803450a  00058104  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00050305  2**0
                  CONTENTS, READONLY
 13 MAPPING_TABLE 00000028  20030000  20030000  00060000  2**2
                  ALLOC
 14 MB_MEM1       000001bc  20030028  20030028  00060028  2**2
                  ALLOC
 15 MB_MEM2       00000883  200301e4  200301e4  00060028  2**2
                  ALLOC
 16 .comment      00000093  00000000  00000000  00050335  2**0
                  CONTENTS, READONLY
 17 .debug_info   00045374  00000000  00000000  000503c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 00009c7d  00000000  00000000  0009573c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003ce8  00000000  00000000  0009f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_rnglists 00002f09  00000000  00000000  000a30a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  00037e35  00000000  00000000  000a5fb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   00050b99  00000000  00000000  000ddde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    0011ceaa  00000000  00000000  0012e97f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_frame  00011724  00000000  00000000  0024b82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_line_str 000000c2  00000000  00000000  0025cf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000308 	.word	0x20000308
 800015c:	00000000 	.word	0x00000000
 8000160:	0802ce3c 	.word	0x0802ce3c

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000030c 	.word	0x2000030c
 800017c:	0802ce3c 	.word	0x0802ce3c

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b970 	b.w	8000ef0 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9e08      	ldr	r6, [sp, #32]
 8000c2e:	460d      	mov	r5, r1
 8000c30:	4604      	mov	r4, r0
 8000c32:	460f      	mov	r7, r1
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d14a      	bne.n	8000cce <__udivmoddi4+0xa6>
 8000c38:	428a      	cmp	r2, r1
 8000c3a:	4694      	mov	ip, r2
 8000c3c:	d965      	bls.n	8000d0a <__udivmoddi4+0xe2>
 8000c3e:	fab2 f382 	clz	r3, r2
 8000c42:	b143      	cbz	r3, 8000c56 <__udivmoddi4+0x2e>
 8000c44:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c48:	f1c3 0220 	rsb	r2, r3, #32
 8000c4c:	409f      	lsls	r7, r3
 8000c4e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c52:	4317      	orrs	r7, r2
 8000c54:	409c      	lsls	r4, r3
 8000c56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c5a:	fa1f f58c 	uxth.w	r5, ip
 8000c5e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c62:	0c22      	lsrs	r2, r4, #16
 8000c64:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c68:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c6c:	fb01 f005 	mul.w	r0, r1, r5
 8000c70:	4290      	cmp	r0, r2
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x62>
 8000c74:	eb1c 0202 	adds.w	r2, ip, r2
 8000c78:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c7c:	f080 811c 	bcs.w	8000eb8 <__udivmoddi4+0x290>
 8000c80:	4290      	cmp	r0, r2
 8000c82:	f240 8119 	bls.w	8000eb8 <__udivmoddi4+0x290>
 8000c86:	3902      	subs	r1, #2
 8000c88:	4462      	add	r2, ip
 8000c8a:	1a12      	subs	r2, r2, r0
 8000c8c:	b2a4      	uxth	r4, r4
 8000c8e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c92:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c96:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c9a:	fb00 f505 	mul.w	r5, r0, r5
 8000c9e:	42a5      	cmp	r5, r4
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x90>
 8000ca2:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x294>
 8000cae:	42a5      	cmp	r5, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x294>
 8000cb4:	4464      	add	r4, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11e      	cbz	r6, 8000cca <__udivmoddi4+0xa2>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0xbc>
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f000 80ed 	beq.w	8000eb2 <__udivmoddi4+0x28a>
 8000cd8:	2100      	movs	r1, #0
 8000cda:	e9c6 0500 	strd	r0, r5, [r6]
 8000cde:	4608      	mov	r0, r1
 8000ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce4:	fab3 f183 	clz	r1, r3
 8000ce8:	2900      	cmp	r1, #0
 8000cea:	d149      	bne.n	8000d80 <__udivmoddi4+0x158>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d302      	bcc.n	8000cf6 <__udivmoddi4+0xce>
 8000cf0:	4282      	cmp	r2, r0
 8000cf2:	f200 80f8 	bhi.w	8000ee6 <__udivmoddi4+0x2be>
 8000cf6:	1a84      	subs	r4, r0, r2
 8000cf8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cfc:	2001      	movs	r0, #1
 8000cfe:	4617      	mov	r7, r2
 8000d00:	2e00      	cmp	r6, #0
 8000d02:	d0e2      	beq.n	8000cca <__udivmoddi4+0xa2>
 8000d04:	e9c6 4700 	strd	r4, r7, [r6]
 8000d08:	e7df      	b.n	8000cca <__udivmoddi4+0xa2>
 8000d0a:	b902      	cbnz	r2, 8000d0e <__udivmoddi4+0xe6>
 8000d0c:	deff      	udf	#255	; 0xff
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f040 8090 	bne.w	8000e38 <__udivmoddi4+0x210>
 8000d18:	1a8a      	subs	r2, r1, r2
 8000d1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1e:	fa1f fe8c 	uxth.w	lr, ip
 8000d22:	2101      	movs	r1, #1
 8000d24:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d28:	fb07 2015 	mls	r0, r7, r5, r2
 8000d2c:	0c22      	lsrs	r2, r4, #16
 8000d2e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d32:	fb0e f005 	mul.w	r0, lr, r5
 8000d36:	4290      	cmp	r0, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x124>
 8000d3a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d3e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x122>
 8000d44:	4290      	cmp	r0, r2
 8000d46:	f200 80cb 	bhi.w	8000ee0 <__udivmoddi4+0x2b8>
 8000d4a:	4645      	mov	r5, r8
 8000d4c:	1a12      	subs	r2, r2, r0
 8000d4e:	b2a4      	uxth	r4, r4
 8000d50:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d54:	fb07 2210 	mls	r2, r7, r0, r2
 8000d58:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x14e>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6c:	d202      	bcs.n	8000d74 <__udivmoddi4+0x14c>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f200 80bb 	bhi.w	8000eea <__udivmoddi4+0x2c2>
 8000d74:	4610      	mov	r0, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d7e:	e79f      	b.n	8000cc0 <__udivmoddi4+0x98>
 8000d80:	f1c1 0720 	rsb	r7, r1, #32
 8000d84:	408b      	lsls	r3, r1
 8000d86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d92:	fa20 f307 	lsr.w	r3, r0, r7
 8000d96:	40fd      	lsrs	r5, r7
 8000d98:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9c:	4323      	orrs	r3, r4
 8000d9e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000da2:	fa1f fe8c 	uxth.w	lr, ip
 8000da6:	fb09 5518 	mls	r5, r9, r8, r5
 8000daa:	0c1c      	lsrs	r4, r3, #16
 8000dac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000db0:	fb08 f50e 	mul.w	r5, r8, lr
 8000db4:	42a5      	cmp	r5, r4
 8000db6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dba:	fa00 f001 	lsl.w	r0, r0, r1
 8000dbe:	d90b      	bls.n	8000dd8 <__udivmoddi4+0x1b0>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc8:	f080 8088 	bcs.w	8000edc <__udivmoddi4+0x2b4>
 8000dcc:	42a5      	cmp	r5, r4
 8000dce:	f240 8085 	bls.w	8000edc <__udivmoddi4+0x2b4>
 8000dd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd6:	4464      	add	r4, ip
 8000dd8:	1b64      	subs	r4, r4, r5
 8000dda:	b29d      	uxth	r5, r3
 8000ddc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000de0:	fb09 4413 	mls	r4, r9, r3, r4
 8000de4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dec:	45a6      	cmp	lr, r4
 8000dee:	d908      	bls.n	8000e02 <__udivmoddi4+0x1da>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000df8:	d26c      	bcs.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfa:	45a6      	cmp	lr, r4
 8000dfc:	d96a      	bls.n	8000ed4 <__udivmoddi4+0x2ac>
 8000dfe:	3b02      	subs	r3, #2
 8000e00:	4464      	add	r4, ip
 8000e02:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e06:	fba3 9502 	umull	r9, r5, r3, r2
 8000e0a:	eba4 040e 	sub.w	r4, r4, lr
 8000e0e:	42ac      	cmp	r4, r5
 8000e10:	46c8      	mov	r8, r9
 8000e12:	46ae      	mov	lr, r5
 8000e14:	d356      	bcc.n	8000ec4 <__udivmoddi4+0x29c>
 8000e16:	d053      	beq.n	8000ec0 <__udivmoddi4+0x298>
 8000e18:	b156      	cbz	r6, 8000e30 <__udivmoddi4+0x208>
 8000e1a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e1e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e22:	fa04 f707 	lsl.w	r7, r4, r7
 8000e26:	40ca      	lsrs	r2, r1
 8000e28:	40cc      	lsrs	r4, r1
 8000e2a:	4317      	orrs	r7, r2
 8000e2c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e30:	4618      	mov	r0, r3
 8000e32:	2100      	movs	r1, #0
 8000e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e38:	f1c3 0120 	rsb	r1, r3, #32
 8000e3c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e40:	fa20 f201 	lsr.w	r2, r0, r1
 8000e44:	fa25 f101 	lsr.w	r1, r5, r1
 8000e48:	409d      	lsls	r5, r3
 8000e4a:	432a      	orrs	r2, r5
 8000e4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e50:	fa1f fe8c 	uxth.w	lr, ip
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1510 	mls	r5, r7, r0, r1
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e62:	fb00 f50e 	mul.w	r5, r0, lr
 8000e66:	428d      	cmp	r5, r1
 8000e68:	fa04 f403 	lsl.w	r4, r4, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x258>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e76:	d22f      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e78:	428d      	cmp	r5, r1
 8000e7a:	d92d      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	4461      	add	r1, ip
 8000e80:	1b49      	subs	r1, r1, r5
 8000e82:	b292      	uxth	r2, r2
 8000e84:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e88:	fb07 1115 	mls	r1, r7, r5, r1
 8000e8c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e90:	fb05 f10e 	mul.w	r1, r5, lr
 8000e94:	4291      	cmp	r1, r2
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x282>
 8000e98:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ea0:	d216      	bcs.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea2:	4291      	cmp	r1, r2
 8000ea4:	d914      	bls.n	8000ed0 <__udivmoddi4+0x2a8>
 8000ea6:	3d02      	subs	r5, #2
 8000ea8:	4462      	add	r2, ip
 8000eaa:	1a52      	subs	r2, r2, r1
 8000eac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000eb0:	e738      	b.n	8000d24 <__udivmoddi4+0xfc>
 8000eb2:	4631      	mov	r1, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xa2>
 8000eb8:	4639      	mov	r1, r7
 8000eba:	e6e6      	b.n	8000c8a <__udivmoddi4+0x62>
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x90>
 8000ec0:	4548      	cmp	r0, r9
 8000ec2:	d2a9      	bcs.n	8000e18 <__udivmoddi4+0x1f0>
 8000ec4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	e7a3      	b.n	8000e18 <__udivmoddi4+0x1f0>
 8000ed0:	4645      	mov	r5, r8
 8000ed2:	e7ea      	b.n	8000eaa <__udivmoddi4+0x282>
 8000ed4:	462b      	mov	r3, r5
 8000ed6:	e794      	b.n	8000e02 <__udivmoddi4+0x1da>
 8000ed8:	4640      	mov	r0, r8
 8000eda:	e7d1      	b.n	8000e80 <__udivmoddi4+0x258>
 8000edc:	46d0      	mov	r8, sl
 8000ede:	e77b      	b.n	8000dd8 <__udivmoddi4+0x1b0>
 8000ee0:	3d02      	subs	r5, #2
 8000ee2:	4462      	add	r2, ip
 8000ee4:	e732      	b.n	8000d4c <__udivmoddi4+0x124>
 8000ee6:	4608      	mov	r0, r1
 8000ee8:	e70a      	b.n	8000d00 <__udivmoddi4+0xd8>
 8000eea:	4464      	add	r4, ip
 8000eec:	3802      	subs	r0, #2
 8000eee:	e742      	b.n	8000d76 <__udivmoddi4+0x14e>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <LL_EXTI_EnableIT_32_63+0x24>)
 8000efe:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000f02:	4905      	ldr	r1, [pc, #20]	; (8000f18 <LL_EXTI_EnableIT_32_63+0x24>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr
 8000f18:	58000800 	.word	0x58000800

08000f1c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f2a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f40:	68fb      	ldr	r3, [r7, #12]
}
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b085      	sub	sp, #20
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000f56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f5a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4013      	ands	r3, r2
 8000f76:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f78:	68fb      	ldr	r3, [r7, #12]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f8a:	f006 ff8f 	bl	8007eac <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f8e:	f006 ff93 	bl	8007eb8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f92:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f96:	f7ff ffad 	bl	8000ef4 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f9a:	f015 fc15 	bl	80167c8 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f9e:	f000 f821 	bl	8000fe4 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000fa2:	f000 f8c1 	bl	8001128 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000fa6:	bf00      	nop
}
 8000fa8:	bd80      	pop	{r7, pc}
	...

08000fac <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000fac:	b5b0      	push	{r4, r5, r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	; (8000fe0 <APPD_EnableCPU2+0x34>)
 8000fb4:	1d3c      	adds	r4, r7, #4
 8000fb6:	461d      	mov	r5, r3
 8000fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fbc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000fc0:	c403      	stmia	r4!, {r0, r1}
 8000fc2:	8022      	strh	r2, [r4, #0]
 8000fc4:	3402      	adds	r4, #2
 8000fc6:	0c13      	lsrs	r3, r2, #16
 8000fc8:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000fca:	f015 fb39 	bl	8016640 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000fce:	1d3b      	adds	r3, r7, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f014 fdb1 	bl	8015b38 <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000fd6:	bf00      	nop
}
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bdb0      	pop	{r4, r5, r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	0802ced0 	.word	0x0802ced0

08000fe4 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000fea:	1d3b      	adds	r3, r7, #4
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001004:	2300      	movs	r3, #0
 8001006:	77fb      	strb	r3, [r7, #31]
 8001008:	e036      	b.n	8001078 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 800100a:	7ffb      	ldrb	r3, [r7, #31]
 800100c:	4a43      	ldr	r2, [pc, #268]	; (800111c <APPD_SetCPU2GpioConfig+0x138>)
 800100e:	00db      	lsls	r3, r3, #3
 8001010:	4413      	add	r3, r2
 8001012:	799b      	ldrb	r3, [r3, #6]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d02c      	beq.n	8001072 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8001018:	7ffb      	ldrb	r3, [r7, #31]
 800101a:	4a40      	ldr	r2, [pc, #256]	; (800111c <APPD_SetCPU2GpioConfig+0x138>)
 800101c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001020:	4a3f      	ldr	r2, [pc, #252]	; (8001120 <APPD_SetCPU2GpioConfig+0x13c>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d01b      	beq.n	800105e <APPD_SetCPU2GpioConfig+0x7a>
 8001026:	4a3e      	ldr	r2, [pc, #248]	; (8001120 <APPD_SetCPU2GpioConfig+0x13c>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d821      	bhi.n	8001070 <APPD_SetCPU2GpioConfig+0x8c>
 800102c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001030:	d003      	beq.n	800103a <APPD_SetCPU2GpioConfig+0x56>
 8001032:	4a3c      	ldr	r2, [pc, #240]	; (8001124 <APPD_SetCPU2GpioConfig+0x140>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d009      	beq.n	800104c <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8001038:	e01a      	b.n	8001070 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 800103a:	7ffb      	ldrb	r3, [r7, #31]
 800103c:	4a37      	ldr	r2, [pc, #220]	; (800111c <APPD_SetCPU2GpioConfig+0x138>)
 800103e:	00db      	lsls	r3, r3, #3
 8001040:	4413      	add	r3, r2
 8001042:	889a      	ldrh	r2, [r3, #4]
 8001044:	8bbb      	ldrh	r3, [r7, #28]
 8001046:	4313      	orrs	r3, r2
 8001048:	83bb      	strh	r3, [r7, #28]
          break;
 800104a:	e012      	b.n	8001072 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 800104c:	7ffb      	ldrb	r3, [r7, #31]
 800104e:	4a33      	ldr	r2, [pc, #204]	; (800111c <APPD_SetCPU2GpioConfig+0x138>)
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	4413      	add	r3, r2
 8001054:	889a      	ldrh	r2, [r3, #4]
 8001056:	8b7b      	ldrh	r3, [r7, #26]
 8001058:	4313      	orrs	r3, r2
 800105a:	837b      	strh	r3, [r7, #26]
          break;
 800105c:	e009      	b.n	8001072 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 800105e:	7ffb      	ldrb	r3, [r7, #31]
 8001060:	4a2e      	ldr	r2, [pc, #184]	; (800111c <APPD_SetCPU2GpioConfig+0x138>)
 8001062:	00db      	lsls	r3, r3, #3
 8001064:	4413      	add	r3, r2
 8001066:	889a      	ldrh	r2, [r3, #4]
 8001068:	8b3b      	ldrh	r3, [r7, #24]
 800106a:	4313      	orrs	r3, r2
 800106c:	833b      	strh	r3, [r7, #24]
          break;
 800106e:	e000      	b.n	8001072 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8001070:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8001072:	7ffb      	ldrb	r3, [r7, #31]
 8001074:	3301      	adds	r3, #1
 8001076:	77fb      	strb	r3, [r7, #31]
 8001078:	7ffb      	ldrb	r3, [r7, #31]
 800107a:	2b25      	cmp	r3, #37	; 0x25
 800107c:	d9c5      	bls.n	800100a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	2301      	movs	r3, #1
 8001084:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001086:	2303      	movs	r3, #3
 8001088:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800108a:	8bbb      	ldrh	r3, [r7, #28]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d014      	beq.n	80010ba <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001090:	8bbb      	ldrh	r3, [r7, #28]
 8001092:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001094:	2001      	movs	r0, #1
 8001096:	f7ff ff41 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800109a:	2001      	movs	r0, #1
 800109c:	f7ff ff57 	bl	8000f4e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a8:	f007 fe14 	bl	8008cd4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 80010ac:	8bbb      	ldrh	r3, [r7, #28]
 80010ae:	2200      	movs	r2, #0
 80010b0:	4619      	mov	r1, r3
 80010b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b6:	f007 ff95 	bl	8008fe4 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 80010ba:	8b7b      	ldrh	r3, [r7, #26]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d012      	beq.n	80010e6 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 80010c0:	8b7b      	ldrh	r3, [r7, #26]
 80010c2:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c4:	2002      	movs	r0, #2
 80010c6:	f7ff ff29 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 80010ca:	2002      	movs	r0, #2
 80010cc:	f7ff ff3f 	bl	8000f4e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4813      	ldr	r0, [pc, #76]	; (8001124 <APPD_SetCPU2GpioConfig+0x140>)
 80010d6:	f007 fdfd 	bl	8008cd4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 80010da:	8b7b      	ldrh	r3, [r7, #26]
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	4810      	ldr	r0, [pc, #64]	; (8001124 <APPD_SetCPU2GpioConfig+0x140>)
 80010e2:	f007 ff7f 	bl	8008fe4 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 80010e6:	8b3b      	ldrh	r3, [r7, #24]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d013      	beq.n	8001114 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 80010ec:	8b3b      	ldrh	r3, [r7, #24]
 80010ee:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010f0:	2004      	movs	r0, #4
 80010f2:	f7ff ff13 	bl	8000f1c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 80010f6:	2004      	movs	r0, #4
 80010f8:	f7ff ff29 	bl	8000f4e <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4807      	ldr	r0, [pc, #28]	; (8001120 <APPD_SetCPU2GpioConfig+0x13c>)
 8001102:	f007 fde7 	bl	8008cd4 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001106:	8b3b      	ldrh	r3, [r7, #24]
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	4804      	ldr	r0, [pc, #16]	; (8001120 <APPD_SetCPU2GpioConfig+0x13c>)
 800110e:	f007 ff69 	bl	8008fe4 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001112:	bf00      	nop
 8001114:	bf00      	nop
}
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0803255c 	.word	0x0803255c
 8001120:	48000800 	.word	0x48000800
 8001124:	48000400 	.word	0x48000400

08001128 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 800112c:	bf00      	nop
}
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 8001136:	b580      	push	{r7, lr}
 8001138:	af00      	add	r7, sp, #0
/* USER CODE BEGIN DbgOutputInit */
	HW_UART_Init(CFG_DEBUG_TRACE_UART);
 800113a:	2000      	movs	r0, #0
 800113c:	f001 fc75 	bl	8002a2a <HW_UART_Init>
/* USER CODE END DbgOutputInit */
  return;
 8001140:	bf00      	nop
}
 8001142:	bd80      	pop	{r7, pc}

08001144 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	460b      	mov	r3, r1
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 8001152:	897a      	ldrh	r2, [r7, #10]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	68f9      	ldr	r1, [r7, #12]
 8001158:	2000      	movs	r0, #0
 800115a:	f001 fc9b 	bl	8002a94 <HW_UART_Transmit_DMA>
/* USER CODE END DbgOutputTraces */
  return;
 800115e:	bf00      	nop
}
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <LL_EXTI_EnableIT_32_63>:
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <LL_EXTI_EnableIT_32_63+0x24>)
 8001172:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001176:	4905      	ldr	r1, [pc, #20]	; (800118c <LL_EXTI_EnableIT_32_63+0x24>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4313      	orrs	r3, r2
 800117c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001180:	bf00      	nop
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	58000800 	.word	0x58000800

08001190 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 8001198:	4b07      	ldr	r3, [pc, #28]	; (80011b8 <LL_C2_PWR_SetPowerMode+0x28>)
 800119a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800119e:	f023 0207 	bic.w	r2, r3, #7
 80011a2:	4905      	ldr	r1, [pc, #20]	; (80011b8 <LL_C2_PWR_SetPowerMode+0x28>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	58000400 	.word	0x58000400

080011bc <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 80011c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c8:	4a0a      	ldr	r2, [pc, #40]	; (80011f4 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 80011ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 80011ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e2:	4313      	orrs	r3, r2
 80011e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	cafecafe 	.word	0xcafecafe

080011f8 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001200:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800120a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	608b      	str	r3, [r1, #8]
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001224:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800122c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001230:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr

08001242 <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8001246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800124e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 8001268:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800126c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001270:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001278:	d101      	bne.n	800127e <LL_RCC_IsActiveFlag_PINRST+0x1a>
 800127a:	2301      	movs	r3, #1
 800127c:	e000      	b.n	8001280 <LL_RCC_IsActiveFlag_PINRST+0x1c>
 800127e:	2300      	movs	r3, #0
}
 8001280:	4618      	mov	r0, r3
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr

0800128a <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800128e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800129e:	d101      	bne.n	80012a4 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 80012a0:	2301      	movs	r3, #1
 80012a2:	e000      	b.n	80012a6 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <LL_AHB3_GRP1_EnableClock>:
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80012b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4013      	ands	r3, r2
 80012d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012d4:	68fb      	ldr	r3, [r7, #12]
}
 80012d6:	bf00      	nop
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 80012e8:	4b04      	ldr	r3, [pc, #16]	; (80012fc <LL_DBGMCU_GetDeviceID+0x18>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e0042000 	.word	0xe0042000

08001300 <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001304:	4b04      	ldr	r3, [pc, #16]	; (8001318 <LL_DBGMCU_GetRevisionID+0x18>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	0c1b      	lsrs	r3, r3, #16
 800130a:	b29b      	uxth	r3, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e0042000 	.word	0xe0042000

0800131c <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685a      	ldr	r2, [r3, #4]
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	041b      	lsls	r3, r3, #16
 800132e:	431a      	orrs	r2, r3
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	605a      	str	r2, [r3, #4]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685a      	ldr	r2, [r3, #4]
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	431a      	orrs	r2, r3
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	605a      	str	r2, [r3, #4]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	041b      	lsls	r3, r3, #16
 8001374:	431a      	orrs	r2, r3
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	615a      	str	r2, [r3, #20]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	695a      	ldr	r2, [r3, #20]
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	431a      	orrs	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	615a      	str	r2, [r3, #20]
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	683a      	ldr	r2, [r7, #0]
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	683a      	ldr	r2, [r7, #0]
 80013d2:	619a      	str	r2, [r3, #24]
}
 80013d4:	bf00      	nop
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80013e4:	4b05      	ldr	r3, [pc, #20]	; (80013fc <LL_LPM_EnableSleep+0x1c>)
 80013e6:	691b      	ldr	r3, [r3, #16]
 80013e8:	4a04      	ldr	r2, [pc, #16]	; (80013fc <LL_LPM_EnableSleep+0x1c>)
 80013ea:	f023 0304 	bic.w	r3, r3, #4
 80013ee:	6113      	str	r3, [r2, #16]
}
 80013f0:	bf00      	nop
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	22ff      	movs	r2, #255	; 0xff
 800140c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr

0800141a <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 800141a:	b480      	push	{r7}
 800141c:	b083      	sub	sp, #12
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	22ca      	movs	r2, #202	; 0xca
 8001426:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2253      	movs	r2, #83	; 0x53
 800142c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800142e:	bf00      	nop
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 0207 	bic.w	r2, r3, #7
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	609a      	str	r2, [r3, #8]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <MX_APPE_Config>:

uint8_t Mesh_Stop_Mode;

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config( void )
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_OPTVERR );
 8001464:	4b04      	ldr	r3, [pc, #16]	; (8001478 <MX_APPE_Config+0x18>)
 8001466:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800146a:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device( );
 800146c:	f000 f854 	bl	8001518 <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 8001470:	f000 f894 	bl	800159c <Config_HSE>

  return;
 8001474:	bf00      	nop
}
 8001476:	bd80      	pop	{r7, pc}
 8001478:	58004000 	.word	0x58004000

0800147c <MX_APPE_Init>:

void MX_APPE_Init( void )
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
#ifdef STM32WB15xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 11) + FLASH_BASE;
#endif
#ifdef STM32WB55xx
  MOBLEUINT32 last_user_flash_address = ((READ_BIT(FLASH->SFR, FLASH_SFR_SFSA) >> FLASH_SFR_SFSA_Pos) << 12) + FLASH_BASE;
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <MX_APPE_Init+0x6c>)
 8001484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001488:	031b      	lsls	r3, r3, #12
 800148a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800148e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001492:	607b      	str	r3, [r7, #4]
#endif
  
  System_Init( );       /**< System initialization */
 8001494:	f000 f896 	bl	80015c4 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001498:	f000 f8ae 	bl	80015f8 <SystemPower_Config>
  
  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 800149c:	4913      	ldr	r1, [pc, #76]	; (80014ec <MX_APPE_Init+0x70>)
 800149e:	2000      	movs	r0, #0
 80014a0:	f001 f858 	bl	8002554 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init( );
 80014a4:	f7ff fd6f 	bl	8000f86 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 80014a8:	2101      	movs	r1, #1
 80014aa:	2001      	movs	r0, #1
 80014ac:	f015 fa74 	bl	8016998 <UTIL_LPM_SetOffMode>

  Led_Init();
 80014b0:	f000 fa04 	bl	80018bc <Led_Init>

  Button_Init();
 80014b4:	f000 fa0f 	bl	80018d6 <Button_Init>
  
  mobleNvmBase = (const void *)(last_user_flash_address - NVM_SIZE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 80014be:	461a      	mov	r2, r3
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <MX_APPE_Init+0x74>)
 80014c2:	601a      	str	r2, [r3, #0]
  appNvmBase   = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f5a3 5340 	sub.w	r3, r3, #12288	; 0x3000
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b09      	ldr	r3, [pc, #36]	; (80014f4 <MX_APPE_Init+0x78>)
 80014ce:	601a      	str	r2, [r3, #0]
  prvsnr_data  = (const void *)(last_user_flash_address - NVM_SIZE - APP_NVM_SIZE - PRVN_NVM_PAGE_SIZE);    
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80014d6:	461a      	mov	r2, r3
 80014d8:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <MX_APPE_Init+0x7c>)
 80014da:	601a      	str	r2, [r3, #0]

  /* For MESH done in serial_if.c */
//  RxUART_Init();

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/*  Initialize all transport layers */
 80014dc:	f000 f89a 	bl	8001614 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
  return;
 80014e0:	bf00      	nop
}
 80014e2:	3708      	adds	r7, #8
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	58004000 	.word	0x58004000
 80014ec:	200043dc 	.word	0x200043dc
 80014f0:	20004454 	.word	0x20004454
 80014f4:	20004458 	.word	0x20004458
 80014f8:	2000445c 	.word	0x2000445c

080014fc <Init_Smps>:

void Init_Smps( void )
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001500:	bf00      	nop
}
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <Init_Exti>:

void Init_Exti( void )
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 800150e:	2050      	movs	r0, #80	; 0x50
 8001510:	f7ff fe2a 	bl	8001168 <LL_EXTI_EnableIT_32_63>


  return;
 8001514:	bf00      	nop
}
 8001516:	bd80      	pop	{r7, pc}

08001518 <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device( void )
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
#if ( CFG_HW_RESET_BY_FW == 1 )
  Reset_BackupDomain();
 800151c:	f000 f804 	bl	8001528 <Reset_BackupDomain>

  Reset_IPCC();
 8001520:	f000 f81a 	bl	8001558 <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001524:	bf00      	nop
}
 8001526:	bd80      	pop	{r7, pc}

08001528 <Reset_BackupDomain>:

#if ( CFG_HW_RESET_BY_FW == 1 )
static void Reset_BackupDomain( void )
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 800152c:	f7ff fe9a 	bl	8001264 <LL_RCC_IsActiveFlag_PINRST>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00d      	beq.n	8001552 <Reset_BackupDomain+0x2a>
 8001536:	f7ff fea8 	bl	800128a <LL_RCC_IsActiveFlag_SFTRST>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d108      	bne.n	8001552 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001540:	f007 fe2a 	bl	8009198 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001544:	f007 fe28 	bl	8009198 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 8001548:	f7ff fe6a 	bl	8001220 <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800154c:	f7ff fe79 	bl	8001242 <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001550:	bf00      	nop
 8001552:	bf00      	nop
}
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <Reset_IPCC>:

static void Reset_IPCC( void )
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 800155c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001560:	f7ff fea6 	bl	80012b0 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001564:	213f      	movs	r1, #63	; 0x3f
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <Reset_IPCC+0x40>)
 8001568:	f7ff ff1e 	bl	80013a8 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 800156c:	213f      	movs	r1, #63	; 0x3f
 800156e:	480a      	ldr	r0, [pc, #40]	; (8001598 <Reset_IPCC+0x40>)
 8001570:	f7ff ff28 	bl	80013c4 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 8001574:	213f      	movs	r1, #63	; 0x3f
 8001576:	4808      	ldr	r0, [pc, #32]	; (8001598 <Reset_IPCC+0x40>)
 8001578:	f7ff fed0 	bl	800131c <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 800157c:	213f      	movs	r1, #63	; 0x3f
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <Reset_IPCC+0x40>)
 8001580:	f7ff feef 	bl	8001362 <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 8001584:	213f      	movs	r1, #63	; 0x3f
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <Reset_IPCC+0x40>)
 8001588:	f7ff feda 	bl	8001340 <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 800158c:	213f      	movs	r1, #63	; 0x3f
 800158e:	4802      	ldr	r0, [pc, #8]	; (8001598 <Reset_IPCC+0x40>)
 8001590:	f7ff fef9 	bl	8001386 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 8001594:	bf00      	nop
}
 8001596:	bd80      	pop	{r7, pc}
 8001598:	58000c00 	.word	0x58000c00

0800159c <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80015a2:	2000      	movs	r0, #0
 80015a4:	f015 f98e 	bl	80168c4 <OTP_Read>
 80015a8:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	799b      	ldrb	r3, [r3, #6]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff fe01 	bl	80011bc <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80015ba:	bf00      	nop
 80015bc:	bf00      	nop
}
 80015be:	3708      	adds	r7, #8
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <System_Init>:

static void System_Init( void )
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  Init_Smps( );
 80015c8:	f7ff ff98 	bl	80014fc <Init_Smps>

  Init_Exti( );
 80015cc:	f7ff ff9d 	bl	800150a <Init_Exti>

  Init_Rtc( );
 80015d0:	f000 f802 	bl	80015d8 <Init_Rtc>

  return;
 80015d4:	bf00      	nop
}
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <Init_Rtc>:

static void Init_Rtc( void )
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 80015dc:	4805      	ldr	r0, [pc, #20]	; (80015f4 <Init_Rtc+0x1c>)
 80015de:	f7ff ff1c 	bl	800141a <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 80015e2:	2100      	movs	r1, #0
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <Init_Rtc+0x1c>)
 80015e6:	f7ff ff28 	bl	800143a <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 80015ea:	4802      	ldr	r0, [pc, #8]	; (80015f4 <Init_Rtc+0x1c>)
 80015ec:	f7ff ff08 	bl	8001400 <LL_RTC_EnableWriteProtection>

  return;
 80015f0:	bf00      	nop
}
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40002800 	.word	0x40002800

080015f8 <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config( void )
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 80015fc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001600:	f7ff fdfa 	bl	80011f8 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init( );
 8001604:	f015 f986 	bl	8016914 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 8001608:	2004      	movs	r0, #4
 800160a:	f7ff fdc1 	bl	8001190 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 800160e:	bf00      	nop
}
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <appe_Tl_Init>:

static void appe_Tl_Init( void )
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800161a:	f014 fe5b 	bl	80162d4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc );
 800161e:	4a11      	ldr	r2, [pc, #68]	; (8001664 <appe_Tl_Init+0x50>)
 8001620:	2100      	movs	r1, #0
 8001622:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001626:	f015 fae3 	bl	8016bf0 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800162a:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <appe_Tl_Init+0x54>)
 800162c:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 800162e:	4b0f      	ldr	r3, [pc, #60]	; (800166c <appe_Tl_Init+0x58>)
 8001630:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001632:	463b      	mov	r3, r7
 8001634:	4619      	mov	r1, r3
 8001636:	480e      	ldr	r0, [pc, #56]	; (8001670 <appe_Tl_Init+0x5c>)
 8001638:	f014 fd0e 	bl	8016058 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <appe_Tl_Init+0x60>)
 800163e:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <appe_Tl_Init+0x64>)
 8001642:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <appe_Tl_Init+0x68>)
 8001646:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 8001648:	f240 533c 	movw	r3, #1340	; 0x53c
 800164c:	617b      	str	r3, [r7, #20]
  TL_MM_Init( &tl_mm_config );
 800164e:	f107 0308 	add.w	r3, r7, #8
 8001652:	4618      	mov	r0, r3
 8001654:	f014 ff80 	bl	8016558 <TL_MM_Init>

  TL_Enable();
 8001658:	f014 fe36 	bl	80162c8 <TL_Enable>

  return;
 800165c:	bf00      	nop
}
 800165e:	3720      	adds	r7, #32
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	08016091 	.word	0x08016091
 8001668:	20030734 	.word	0x20030734
 800166c:	08001681 	.word	0x08001681
 8001670:	08001699 	.word	0x08001699
 8001674:	2003094c 	.word	0x2003094c
 8001678:	20030840 	.word	0x20030840
 800167c:	200301f8 	.word	0x200301f8

08001680 <APPE_SysStatusNot>:

static void APPE_SysStatusNot( SHCI_TL_CmdStatus_t status )
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 800168a:	bf00      	nop
}
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <APPE_SysUserEvtRx>:
* The buffer shall not be released
* ( eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable )
* When the status is not filled, the buffer is released by default
*/
static void APPE_SysUserEvtRx( void * pPayload )
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	330b      	adds	r3, #11
 80016a6:	61fb      	str	r3, [r7, #28]
  
  switch(p_sys_event->subevtcode)
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	881b      	ldrh	r3, [r3, #0]
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80016b2:	2b07      	cmp	r3, #7
 80016b4:	d860      	bhi.n	8001778 <APPE_SysUserEvtRx+0xe0>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <APPE_SysUserEvtRx+0x24>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016dd 	.word	0x080016dd
 80016c0:	0800171f 	.word	0x0800171f
 80016c4:	0800172d 	.word	0x0800172d
 80016c8:	08001779 	.word	0x08001779
 80016cc:	08001749 	.word	0x08001749
 80016d0:	08001759 	.word	0x08001759
 80016d4:	08001761 	.word	0x08001761
 80016d8:	08001771 	.word	0x08001771
  {
  case SHCI_SUB_EVT_CODE_READY:
  /* Read the firmware version of both the wireless firmware and the FUS */
  SHCI_GetWirelessFwInfo( &WirelessInfo );
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4618      	mov	r0, r3
 80016e2:	f014 fa6f 	bl	8015bc4 <SHCI_GetWirelessFwInfo>
  APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 80016e6:	7b3b      	ldrb	r3, [r7, #12]
 80016e8:	4619      	mov	r1, r3
 80016ea:	7b7b      	ldrb	r3, [r7, #13]
 80016ec:	461a      	mov	r2, r3
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	4824      	ldr	r0, [pc, #144]	; (8001784 <APPE_SysUserEvtRx+0xec>)
 80016f2:	f027 ff41 	bl	8029578 <iprintf>
  APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 80016f6:	7c3b      	ldrb	r3, [r7, #16]
 80016f8:	4619      	mov	r1, r3
 80016fa:	4823      	ldr	r0, [pc, #140]	; (8001788 <APPE_SysUserEvtRx+0xf0>)
 80016fc:	f027 ff3c 	bl	8029578 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001700:	7dbb      	ldrb	r3, [r7, #22]
 8001702:	4619      	mov	r1, r3
 8001704:	7dfb      	ldrb	r3, [r7, #23]
 8001706:	461a      	mov	r2, r3
 8001708:	7e3b      	ldrb	r3, [r7, #24]
 800170a:	4820      	ldr	r0, [pc, #128]	; (800178c <APPE_SysUserEvtRx+0xf4>)
 800170c:	f027 ff34 	bl	8029578 <iprintf>
  
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001710:	481f      	ldr	r0, [pc, #124]	; (8001790 <APPE_SysUserEvtRx+0xf8>)
 8001712:	f027 ff31 	bl	8029578 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f870 	bl	80017fc <APPE_SysEvtReadyProcessing>
    break;
 800171c:	e02d      	b.n	800177a <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 800171e:	481d      	ldr	r0, [pc, #116]	; (8001794 <APPE_SysUserEvtRx+0xfc>)
 8001720:	f027 ff2a 	bl	8029578 <iprintf>
    APPE_SysEvtError(pPayload);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f000 f843 	bl	80017b0 <APPE_SysEvtError>
    break;
 800172a:	e026      	b.n	800177a <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CMO+ \n");
 800172c:	481a      	ldr	r0, [pc, #104]	; (8001798 <APPE_SysUserEvtRx+0x100>)
 800172e:	f027 ff89 	bl	8029644 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001736:	6819      	ldr	r1, [r3, #0]
        ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	4816      	ldr	r0, [pc, #88]	; (800179c <APPE_SysUserEvtRx+0x104>)
 8001742:	f027 ff19 	bl	8029578 <iprintf>
    break;
 8001746:	e018      	b.n	800177a <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4619      	mov	r1, r3
 8001750:	4813      	ldr	r0, [pc, #76]	; (80017a0 <APPE_SysUserEvtRx+0x108>)
 8001752:	f027 ff11 	bl	8029578 <iprintf>
    break;
 8001756:	e010      	b.n	800177a <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 8001758:	4812      	ldr	r0, [pc, #72]	; (80017a4 <APPE_SysUserEvtRx+0x10c>)
 800175a:	f027 ff0d 	bl	8029578 <iprintf>
    break;
 800175e:	e00c      	b.n	800177a <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4619      	mov	r1, r3
 8001768:	480f      	ldr	r0, [pc, #60]	; (80017a8 <APPE_SysUserEvtRx+0x110>)
 800176a:	f027 ff05 	bl	8029578 <iprintf>
    break;
 800176e:	e004      	b.n	800177a <APPE_SysUserEvtRx+0xe2>
    
  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 8001770:	480e      	ldr	r0, [pc, #56]	; (80017ac <APPE_SysUserEvtRx+0x114>)
 8001772:	f027 ff01 	bl	8029578 <iprintf>
    break;
 8001776:	e000      	b.n	800177a <APPE_SysUserEvtRx+0xe2>
    
  default:
    break;
 8001778:	bf00      	nop
  }
  
  return;
 800177a:	bf00      	nop
}
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	0802ceec 	.word	0x0802ceec
 8001788:	0802cf10 	.word	0x0802cf10
 800178c:	0802cf2c 	.word	0x0802cf2c
 8001790:	0802cf44 	.word	0x0802cf44
 8001794:	0802cf64 	.word	0x0802cf64
 8001798:	0802cf88 	.word	0x0802cf88
 800179c:	0802cfd8 	.word	0x0802cfd8
 80017a0:	0802d000 	.word	0x0802d000
 80017a4:	0802d03c 	.word	0x0802d03c
 80017a8:	0802d060 	.word	0x0802d060
 80017ac:	0802d09c 	.word	0x0802d09c

080017b0 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
*/
static void APPE_SysEvtError(void * pPayload)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	330b      	adds	r3, #11
 80017be:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	3302      	adds	r3, #2
 80017c4:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4619      	mov	r1, r3
 80017cc:	4808      	ldr	r0, [pc, #32]	; (80017f0 <APPE_SysEvtError+0x40>)
 80017ce:	f027 fed3 	bl	8029578 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d103      	bne.n	80017e2 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 80017da:	4806      	ldr	r0, [pc, #24]	; (80017f4 <APPE_SysEvtError+0x44>)
 80017dc:	f027 ff32 	bl	8029644 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 80017e0:	e003      	b.n	80017ea <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <APPE_SysEvtError+0x48>)
 80017e4:	f027 ff2e 	bl	8029644 <puts>
  return;
 80017e8:	bf00      	nop
}
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	0802d0c0 	.word	0x0802d0c0
 80017f4:	0802d0f0 	.word	0x0802d0f0
 80017f8:	0802d12c 	.word	0x0802d12c

080017fc <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing( void * pPayload )
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;
  
  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001804:	f107 0308 	add.w	r3, r7, #8
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001812:	2300      	movs	r3, #0
 8001814:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 8001816:	2300      	movs	r3, #0
 8001818:	623b      	str	r3, [r7, #32]
  
  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	330b      	adds	r3, #11
 8001820:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	3302      	adds	r3, #2
 8001826:	61bb      	str	r3, [r7, #24]
  
  if(p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d128      	bne.n	8001882 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001830:	481d      	ldr	r0, [pc, #116]	; (80018a8 <APPE_SysEvtReadyProcessing+0xac>)
 8001832:	f027 ff07 	bl	8029644 <puts>
    
    /* Traces channel initialization */
    APPD_EnableCPU2( );
 8001836:	f7ff fbb9 	bl	8000fac <APPD_EnableCPU2>
    
    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800183a:	230f      	movs	r3, #15
 800183c:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE  
 800183e:	237f      	movs	r3, #127	; 0x7f
 8001840:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001842:	f7ff fd5d 	bl	8001300 <LL_DBGMCU_GetRevisionID>
 8001846:	6278      	str	r0, [r7, #36]	; 0x24
    
    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 8001848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800184a:	4818      	ldr	r0, [pc, #96]	; (80018ac <APPE_SysEvtReadyProcessing+0xb0>)
 800184c:	f027 fe94 	bl	8029578 <iprintf>
    
    config_param.RevisionID = (uint16_t)RevisionID;
 8001850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001852:	b29b      	uxth	r3, r3
 8001854:	82bb      	strh	r3, [r7, #20]
    
    DeviceID = LL_DBGMCU_GetDeviceID();
 8001856:	f7ff fd45 	bl	80012e4 <LL_DBGMCU_GetDeviceID>
 800185a:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 800185c:	6a39      	ldr	r1, [r7, #32]
 800185e:	4814      	ldr	r0, [pc, #80]	; (80018b0 <APPE_SysEvtReadyProcessing+0xb4>)
 8001860:	f027 fe8a 	bl	8029578 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	b29b      	uxth	r3, r3
 8001868:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	4618      	mov	r0, r3
 8001870:	f014 f992 	bl	8015b98 <SHCI_C2_Config>
    
    APP_BLE_Init( );
 8001874:	f001 feca 	bl	800360c <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 8001878:	2100      	movs	r1, #0
 800187a:	2001      	movs	r0, #1
 800187c:	f015 f88c 	bl	8016998 <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
}

  return;
 8001880:	e00e      	b.n	80018a0 <APPE_SysEvtReadyProcessing+0xa4>
  else  if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING) 
 8001882:	69bb      	ldr	r3, [r7, #24]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d106      	bne.n	8001898 <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 800188a:	480a      	ldr	r0, [pc, #40]	; (80018b4 <APPE_SysEvtReadyProcessing+0xb8>)
 800188c:	f027 fe74 	bl	8029578 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	701a      	strb	r2, [r3, #0]
  return;
 8001896:	e003      	b.n	80018a0 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 8001898:	4807      	ldr	r0, [pc, #28]	; (80018b8 <APPE_SysEvtReadyProcessing+0xbc>)
 800189a:	f027 fe6d 	bl	8029578 <iprintf>
  return;
 800189e:	bf00      	nop
}
 80018a0:	3728      	adds	r7, #40	; 0x28
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	0802d164 	.word	0x0802d164
 80018ac:	0802d180 	.word	0x0802d180
 80018b0:	0802d1a4 	.word	0x0802d1a4
 80018b4:	0802d1c4 	.word	0x0802d1c4
 80018b8:	0802d1f8 	.word	0x0802d1f8

080018bc <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */
  BSP_LED_Init(LED_BLUE);
 80018c0:	2000      	movs	r0, #0
 80018c2:	f006 f8f3 	bl	8007aac <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f006 f8f0 	bl	8007aac <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 80018cc:	2002      	movs	r0, #2
 80018ce:	f006 f8ed 	bl	8007aac <BSP_LED_Init>
#endif

    return;
 80018d2:	bf00      	nop
}
 80018d4:	bd80      	pop	{r7, pc}

080018d6 <Button_Init>:

static void Button_Init( void )
{
 80018d6:	b580      	push	{r7, lr}
 80018d8:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */
  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 80018da:	2101      	movs	r1, #1
 80018dc:	2000      	movs	r0, #0
 80018de:	f006 f953 	bl	8007b88 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 80018e2:	2101      	movs	r1, #1
 80018e4:	2001      	movs	r0, #1
 80018e6:	f006 f94f 	bl	8007b88 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 80018ea:	2101      	movs	r1, #1
 80018ec:	2002      	movs	r0, #2
 80018ee:	f006 f94b 	bl	8007b88 <BSP_PB_Init>
#endif

  return;
 80018f2:	bf00      	nop
}
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b084      	sub	sp, #16
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018fe:	f006 fab1 	bl	8007e64 <HAL_GetTick>
 8001902:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800190e:	d00a      	beq.n	8001926 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 8001910:	f006 fac0 	bl	8007e94 <HAL_GetTickFreq>
 8001914:	4603      	mov	r3, r0
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800191e:	e002      	b.n	8001926 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep( ); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 8001920:	f7ff fd5e 	bl	80013e0 <LL_LPM_EnableSleep>
     */
  #if defined ( __CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI( );
 8001924:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001926:	f006 fa9d 	bl	8007e64 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	429a      	cmp	r2, r3
 8001934:	d8f4      	bhi.n	8001920 <HAL_Delay+0x2a>
  }
}
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001944:	f04f 30ff 	mov.w	r0, #4294967295
 8001948:	f015 f856 	bl	80169f8 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}

08001950 <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle( void )
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  {
    UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
  }
#endif
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 8001954:	bf00      	nop
}
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle( UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm )
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b082      	sub	sp, #8
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	6039      	str	r1, [r7, #0]
#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_Run( 0 );
#else
  UTIL_SEQ_Run( UTIL_SEQ_DEFAULT );
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f015 f844 	bl	80169f8 <UTIL_SEQ_Run>
#endif

  return;
 8001970:	bf00      	nop
}
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 8001980:	2100      	movs	r1, #0
 8001982:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001986:	f015 f955 	bl	8016c34 <UTIL_SEQ_SetTask>
  return;
 800198a:	bf00      	nop
}
 800198c:	3708      	adds	r7, #8
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}

08001992 <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b082      	sub	sp, #8
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 800199a:	2002      	movs	r0, #2
 800199c:	f015 f9b6 	bl	8016d0c <UTIL_SEQ_SetEvt>
  return;
 80019a0:	bf00      	nop
}
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt( 1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID );
 80019b0:	2002      	movs	r0, #2
 80019b2:	f015 f9cb 	bl	8016d4c <UTIL_SEQ_WaitEvt>
  return;
 80019b6:	bf00      	nop
}
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80019be:	b580      	push	{r7, lr}
 80019c0:	b082      	sub	sp, #8
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	4603      	mov	r3, r0
 80019c6:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d104      	bne.n	80019d8 <HAL_GPIO_EXTI_Callback+0x1a>
      break;
#endif

    case BUTTON_SW1_PIN:
      {
        UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SW1_REQ_ID, CFG_SCH_PRIO_0);
 80019ce:	2100      	movs	r1, #0
 80019d0:	2040      	movs	r0, #64	; 0x40
 80019d2:	f015 f92f 	bl	8016c34 <UTIL_SEQ_SetTask>
      }
      break;
 80019d6:	e000      	b.n	80019da <HAL_GPIO_EXTI_Callback+0x1c>
      break;
#endif

      
  default:
      break;
 80019d8:	bf00      	nop

  }
  return;
 80019da:	bf00      	nop
}
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
	...

080019e4 <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019f0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80019f4:	d101      	bne.n	80019fa <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	58004000 	.word	0x58004000

08001a0c <LL_HSEM_1StepLock>:
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 1 lock fail, 0 lock successful or already locked by same core
  */
__STATIC_INLINE uint32_t LL_HSEM_1StepLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	6039      	str	r1, [r7, #0]
  return ((HSEMx->RLR[Semaphore] != (HSEM_R_LOCK | LL_HSEM_COREID)) ? 1UL : 0UL);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	3220      	adds	r2, #32
 8001a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <LL_HSEM_1StepLock+0x2c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d001      	beq.n	8001a2a <LL_HSEM_1StepLock+0x1e>
 8001a26:	2301      	movs	r3, #1
 8001a28:	e000      	b.n	8001a2c <LL_HSEM_1StepLock+0x20>
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	80000400 	.word	0x80000400

08001a3c <LL_HSEM_ReleaseLock>:
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @param  process Process number. Value between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_HSEM_ReleaseLock(HSEM_TypeDef *HSEMx, uint32_t Semaphore, uint32_t process)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	60f8      	str	r0, [r7, #12]
 8001a44:	60b9      	str	r1, [r7, #8]
 8001a46:	607a      	str	r2, [r7, #4]
  WRITE_REG(HSEMx->R[Semaphore], (LL_HSEM_COREID | process));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f443 6180 	orr.w	r1, r3, #1024	; 0x400
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	68ba      	ldr	r2, [r7, #8]
 8001a52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001a56:	bf00      	nop
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <LL_HSEM_GetStatus>:
  * @rmtoll R            LOCK          LL_HSEM_GetStatus
  * @param  HSEMx HSEM Instance.
  * @param  Semaphore Semaphore number. Value between Min_Data=0 and Max_Data=31
  * @retval 0 semaphore is free, 1 semaphore is locked  */
__STATIC_INLINE uint32_t LL_HSEM_GetStatus(HSEM_TypeDef *HSEMx, uint32_t Semaphore)
{
 8001a62:	b480      	push	{r7}
 8001a64:	b083      	sub	sp, #12
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	6078      	str	r0, [r7, #4]
 8001a6a:	6039      	str	r1, [r7, #0]
  return ((HSEMx->R[Semaphore] != 0U) ? 1UL : 0UL);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	683a      	ldr	r2, [r7, #0]
 8001a70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <LL_HSEM_GetStatus+0x1a>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <LL_HSEM_GetStatus+0x1c>
 8001a7c:	2300      	movs	r3, #0
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	370c      	adds	r7, #12
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
	...

08001a8c <FD_EraseSectors>:
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data);
/* Public functions ----------------------------------------------------------*/
uint32_t FD_EraseSectors(uint32_t FirstSector, uint32_t NbrOfSectors)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b086      	sub	sp, #24
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
 8001a94:	6039      	str	r1, [r7, #0]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	73fb      	strb	r3, [r7, #15]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001a9a:	bf00      	nop
 8001a9c:	2102      	movs	r1, #2
 8001a9e:	481d      	ldr	r0, [pc, #116]	; (8001b14 <FD_EraseSectors+0x88>)
 8001aa0:	f7ff ffb4 	bl	8001a0c <LL_HSEM_1StepLock>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f8      	bne.n	8001a9c <FD_EraseSectors+0x10>

  HAL_FLASH_Unlock();
 8001aaa:	f006 ff7d 	bl	80089a8 <HAL_FLASH_Unlock>
   *  Notify the CPU2 that some flash erase activity may be executed
   *  On reception of this command, the CPU2 enables the BLE timing protection versus flash erase processing
   *  The Erase flash activity will be executed only when the BLE RF is idle for at least 25ms
   *  The CPU2 will prevent all flash activity (write or erase) in all cases when the BL RF Idle is shorter than 25ms.
   */
  SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_ON);
 8001aae:	2001      	movs	r0, #1
 8001ab0:	f014 f859 	bl	8015b66 <SHCI_C2_FLASH_EraseActivity>

  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <FD_EraseSectors+0x44>
  {
    single_flash_operation_status = FD_EraseSingleSector(FirstSector+loop_flash);
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	4413      	add	r3, r2
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f000 f871 	bl	8001ba8 <FD_EraseSingleSector>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	73fb      	strb	r3, [r7, #15]
  for(loop_flash = 0; (loop_flash < NbrOfSectors) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d202      	bcs.n	8001ade <FD_EraseSectors+0x52>
 8001ad8:	7bfb      	ldrb	r3, [r7, #15]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d0ed      	beq.n	8001aba <FD_EraseSectors+0x2e>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001ade:	7bfb      	ldrb	r3, [r7, #15]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d005      	beq.n	8001af0 <FD_EraseSectors+0x64>
  {
    return_value = NbrOfSectors - loop_flash + 1;
 8001ae4:	683a      	ldr	r2, [r7, #0]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	3301      	adds	r3, #1
 8001aec:	613b      	str	r3, [r7, #16]
 8001aee:	e00b      	b.n	8001b08 <FD_EraseSectors+0x7c>
    /**
     *  Notify the CPU2 there will be no request anymore to erase the flash
     *  On reception of this command, the CPU2 will disables the BLE timing protection versus flash erase processing
     *  The protection is active until next end of radio event.
     */
    SHCI_C2_FLASH_EraseActivity(ERASE_ACTIVITY_OFF);
 8001af0:	2000      	movs	r0, #0
 8001af2:	f014 f838 	bl	8015b66 <SHCI_C2_FLASH_EraseActivity>

    HAL_FLASH_Lock();
 8001af6:	f006 ff79 	bl	80089ec <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001afa:	2200      	movs	r2, #0
 8001afc:	2102      	movs	r1, #2
 8001afe:	4805      	ldr	r0, [pc, #20]	; (8001b14 <FD_EraseSectors+0x88>)
 8001b00:	f7ff ff9c 	bl	8001a3c <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  }

  return return_value;
 8001b08:	693b      	ldr	r3, [r7, #16]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	58001400 	.word	0x58001400

08001b18 <FD_WriteData>:

uint32_t FD_WriteData(uint32_t DestAddress, uint64_t * pSrcBuffer, uint32_t NbrOfData)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
  uint32_t loop_flash;
  uint32_t return_value;
  SingleFlashOperationStatus_t single_flash_operation_status;

  single_flash_operation_status = SINGLE_FLASH_OPERATION_DONE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	75fb      	strb	r3, [r7, #23]

  /**
   *  Take the semaphore to take ownership of the Flash IP
   */
  while(LL_HSEM_1StepLock(HSEM, CFG_HW_FLASH_SEMID));
 8001b28:	bf00      	nop
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	481d      	ldr	r0, [pc, #116]	; (8001ba4 <FD_WriteData+0x8c>)
 8001b2e:	f7ff ff6d 	bl	8001a0c <LL_HSEM_1StepLock>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d1f8      	bne.n	8001b2a <FD_WriteData+0x12>

  HAL_FLASH_Unlock();
 8001b38:	f006 ff36 	bl	80089a8 <HAL_FLASH_Unlock>

  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
 8001b40:	e011      	b.n	8001b66 <FD_WriteData+0x4e>
  {
    single_flash_operation_status = FD_WriteSingleData(DestAddress+(8*loop_flash), *(pSrcBuffer+loop_flash));
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	00da      	lsls	r2, r3, #3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	18d1      	adds	r1, r2, r3
 8001b4a:	69fb      	ldr	r3, [r7, #28]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	4413      	add	r3, r2
 8001b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b56:	4608      	mov	r0, r1
 8001b58:	f000 f839 	bl	8001bce <FD_WriteSingleData>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	75fb      	strb	r3, [r7, #23]
  for(loop_flash = 0; (loop_flash < NbrOfData) && (single_flash_operation_status ==  SINGLE_FLASH_OPERATION_DONE) ; loop_flash++)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	3301      	adds	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	69fa      	ldr	r2, [r7, #28]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d202      	bcs.n	8001b74 <FD_WriteData+0x5c>
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0e6      	beq.n	8001b42 <FD_WriteData+0x2a>
  }

  if(single_flash_operation_status != SINGLE_FLASH_OPERATION_DONE)
 8001b74:	7dfb      	ldrb	r3, [r7, #23]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d005      	beq.n	8001b86 <FD_WriteData+0x6e>
  {
    return_value = NbrOfData - loop_flash + 1;
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	3301      	adds	r3, #1
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	e008      	b.n	8001b98 <FD_WriteData+0x80>
  }
  else
  {
    HAL_FLASH_Lock();
 8001b86:	f006 ff31 	bl	80089ec <HAL_FLASH_Lock>

    /**
     *  Release the ownership of the Flash IP
     */
    LL_HSEM_ReleaseLock(HSEM, CFG_HW_FLASH_SEMID, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <FD_WriteData+0x8c>)
 8001b90:	f7ff ff54 	bl	8001a3c <LL_HSEM_ReleaseLock>

    return_value = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	61bb      	str	r3, [r7, #24]
  }

  return return_value;
 8001b98:	69bb      	ldr	r3, [r7, #24]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3720      	adds	r7, #32
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	58001400 	.word	0x58001400

08001ba8 <FD_EraseSingleSector>:

SingleFlashOperationStatus_t FD_EraseSingleSector(uint32_t SectorNumber)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  SingleFlashOperationStatus_t return_value;

  /* The last parameter is unused in that case and set to 0 */
  return_value =  ProcessSingleFlashOperation(FLASH_ERASE, SectorNumber, 0);
 8001bb0:	f04f 0200 	mov.w	r2, #0
 8001bb4:	f04f 0300 	mov.w	r3, #0
 8001bb8:	6879      	ldr	r1, [r7, #4]
 8001bba:	2000      	movs	r0, #0
 8001bbc:	f000 f81a 	bl	8001bf4 <ProcessSingleFlashOperation>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	73fb      	strb	r3, [r7, #15]

  return return_value;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <FD_WriteSingleData>:

SingleFlashOperationStatus_t FD_WriteSingleData(uint32_t DestAddress, uint64_t Data)
{
 8001bce:	b580      	push	{r7, lr}
 8001bd0:	b086      	sub	sp, #24
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	60f8      	str	r0, [r7, #12]
 8001bd6:	e9c7 2300 	strd	r2, r3, [r7]
  SingleFlashOperationStatus_t return_value;

  return_value =  ProcessSingleFlashOperation(FLASH_WRITE, DestAddress, Data);
 8001bda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001bde:	68f9      	ldr	r1, [r7, #12]
 8001be0:	2001      	movs	r0, #1
 8001be2:	f000 f807 	bl	8001bf4 <ProcessSingleFlashOperation>
 8001be6:	4603      	mov	r3, r0
 8001be8:	75fb      	strb	r3, [r7, #23]

  return return_value;
 8001bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3718      	adds	r7, #24
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <ProcessSingleFlashOperation>:
 *
 *************************************************************/
static SingleFlashOperationStatus_t ProcessSingleFlashOperation(FlashOperationType_t FlashOperationType,
                                                                uint32_t SectorNumberOrDestAddress,
                                                                uint64_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08e      	sub	sp, #56	; 0x38
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	60b9      	str	r1, [r7, #8]
 8001bfc:	e9c7 2300 	strd	r2, r3, [r7]
 8001c00:	4603      	mov	r3, r0
 8001c02:	73fb      	strb	r3, [r7, #15]
  SingleFlashOperationStatus_t return_status;

  uint32_t page_error;
  FLASH_EraseInitTypeDef p_erase_init;

  waited_sem_status = WAITED_SEM_FREE;
 8001c04:	2301      	movs	r3, #1
 8001c06:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

  p_erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	617b      	str	r3, [r7, #20]
  p_erase_init.NbPages = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
  p_erase_init.Page = SectorNumberOrDestAddress;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	61bb      	str	r3, [r7, #24]
     * the flash processing has been requested but suspended due to the PESD bit.
     *
     * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
     * However, keeping that code make it compatible with the two mechanisms.
     */
    while(LL_FLASH_IsActiveFlag_OperationSuspended());
 8001c16:	bf00      	nop
 8001c18:	f7ff fee4 	bl	80019e4 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1fa      	bne.n	8001c18 <ProcessSingleFlashOperation+0x24>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001c22:	f3ef 8310 	mrs	r3, PRIMASK
 8001c26:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8001c28:	6abb      	ldr	r3, [r7, #40]	; 0x28

    UTILS_ENTER_CRITICAL_SECTION();
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
     *  some latency in critical code execution
     *  When flash processing is ongoing, the CPU cannot access the flash anymore.
     *  Trying to access the flash during that time stalls the CPU.
     *  The only way for CPU1 to disallow flash processing is to take CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID.
     */
    cpu1_sem_status = (SemStatus_t)LL_HSEM_GetStatus(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID);
 8001c30:	2106      	movs	r1, #6
 8001c32:	4836      	ldr	r0, [pc, #216]	; (8001d0c <ProcessSingleFlashOperation+0x118>)
 8001c34:	f7ff ff15 	bl	8001a62 <LL_HSEM_GetStatus>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(cpu1_sem_status == SEM_LOCK_SUCCESSFUL)
 8001c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d121      	bne.n	8001c8a <ProcessSingleFlashOperation+0x96>
       *
       *  However, keeping that code make it compatible with the two mechanisms.
       *  The protection by semaphore is enabled on CPU2 side with the command SHCI_C2_SetFlashActivityControl()
       *
       */
      cpu2_sem_status = (SemStatus_t)LL_HSEM_1StepLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID);
 8001c46:	2107      	movs	r1, #7
 8001c48:	4830      	ldr	r0, [pc, #192]	; (8001d0c <ProcessSingleFlashOperation+0x118>)
 8001c4a:	f7ff fedf 	bl	8001a0c <LL_HSEM_1StepLock>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if(cpu2_sem_status == SEM_LOCK_SUCCESSFUL)
 8001c54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d116      	bne.n	8001c8a <ProcessSingleFlashOperation+0x96>
         * When CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is taken, it is allowed to only erase one sector or
         * write one single 64bits data
         * When either several sectors need to be erased or several 64bits data need to be written,
         * the application shall first exit from the critical section and try again.
         */
        if(FlashOperationType == FLASH_ERASE)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d108      	bne.n	8001c74 <ProcessSingleFlashOperation+0x80>
        {
          HAL_FLASHEx_Erase(&p_erase_init, &page_error);
 8001c62:	f107 0220 	add.w	r2, r7, #32
 8001c66:	f107 0314 	add.w	r3, r7, #20
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f006 ff6d 	bl	8008b4c <HAL_FLASHEx_Erase>
 8001c72:	e005      	b.n	8001c80 <ProcessSingleFlashOperation+0x8c>
        }
        else
        {
          HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, SectorNumberOrDestAddress, Data);
 8001c74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c78:	68b9      	ldr	r1, [r7, #8]
 8001c7a:	2001      	movs	r0, #1
 8001c7c:	f006 fe50 	bl	8008920 <HAL_FLASH_Program>
         *  Release the semaphore to give the opportunity to CPU2 to protect its timing versus the next flash operation
         *  by taking this semaphore.
         *  Note that the CPU2 is polling on this semaphore so CPU1 shall release it as fast as possible.
         *  This is why this code is protected by a critical section.
         */
        LL_HSEM_ReleaseLock(HSEM, CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID, 0);
 8001c80:	2200      	movs	r2, #0
 8001c82:	2107      	movs	r1, #7
 8001c84:	4821      	ldr	r0, [pc, #132]	; (8001d0c <ProcessSingleFlashOperation+0x118>)
 8001c86:	f7ff fed9 	bl	8001a3c <LL_HSEM_ReleaseLock>
 8001c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f383 8810 	msr	PRIMASK, r3
}
 8001c94:	bf00      	nop
      }
    }

    UTILS_EXIT_CRITICAL_SECTION();

    if(cpu1_sem_status != SEM_LOCK_SUCCESSFUL)
 8001c96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <ProcessSingleFlashOperation+0xb8>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU1_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU1);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f000 f838 	bl	8001d14 <FD_WaitForSemAvailable>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001caa:	e009      	b.n	8001cc0 <ProcessSingleFlashOperation+0xcc>
    }
    else if(cpu2_sem_status != SEM_LOCK_SUCCESSFUL)
 8001cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d005      	beq.n	8001cc0 <ProcessSingleFlashOperation+0xcc>
    {
      /**
       * To avoid looping in ProcessSingleFlashOperation(), FD_WaitForSemAvailable() should implement a mechanism to
       * continue only when CFG_HW_BLOCK_FLASH_REQ_BY_CPU2_SEMID is free
       */
      waited_sem_status = FD_WaitForSemAvailable(WAIT_FOR_SEM_BLOCK_FLASH_REQ_BY_CPU2);
 8001cb4:	2001      	movs	r0, #1
 8001cb6:	f000 f82d 	bl	8001d14 <FD_WaitForSemAvailable>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }
  }
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001cc0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d103      	bne.n	8001cd0 <ProcessSingleFlashOperation+0xdc>
  while( ((cpu2_sem_status != SEM_LOCK_SUCCESSFUL) || (cpu1_sem_status != SEM_LOCK_SUCCESSFUL))
 8001cc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <ProcessSingleFlashOperation+0xe4>
      && (waited_sem_status != WAITED_SEM_BUSY) );
 8001cd0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d19e      	bne.n	8001c16 <ProcessSingleFlashOperation+0x22>
   * way to recover than applying a device reset.
   *
   * Note: This code is required only when the PESD mechanism is used to protect the CPU2 timing.
   * However, keeping that code make it compatible with the two mechanisms.
   */
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY));
 8001cd8:	bf00      	nop
 8001cda:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <ProcessSingleFlashOperation+0x11c>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001ce6:	d0f8      	beq.n	8001cda <ProcessSingleFlashOperation+0xe6>

  if(waited_sem_status != WAITED_SEM_BUSY)
 8001ce8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <ProcessSingleFlashOperation+0x104>
  {
    /**
     * The flash processing has been done. It has not been checked whether it has been successful or not.
     * The only commitment is that it is possible to request a new flash processing
     */
    return_status = SINGLE_FLASH_OPERATION_DONE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001cf6:	e002      	b.n	8001cfe <ProcessSingleFlashOperation+0x10a>
    /**
     * The flash processing has not been executed due to timing protection from either the CPU1 or the CPU2.
     * This status is reported up to the user that should retry after checking that each CPU do not
     * protect its timing anymore.
     */
    return_status = SINGLE_FLASH_OPERATION_NOT_EXECUTED;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  }

  return return_status;
 8001cfe:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3738      	adds	r7, #56	; 0x38
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	58001400 	.word	0x58001400
 8001d10:	58004000 	.word	0x58004000

08001d14 <FD_WaitForSemAvailable>:
 *
 * WEAK FUNCTIONS
 *
 *************************************************************/
__WEAK WaitedSemStatus_t FD_WaitForSemAvailable(WaitedSemId_t WaitedSemId)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
   * WAITED_SEM_FREE keep looping in the driver until the action is executed. This will result in the current stack looping
   * until this is done. In a bare metal implementation, only the code within interrupt handler can be executed. With an OS,
   * only task with higher priority can be processed
   *
   */
  return WAITED_SEM_BUSY;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <LL_EXTI_EnableIT_0_31>:
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d36:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001d3a:	4905      	ldr	r1, [pc, #20]	; (8001d50 <LL_EXTI_EnableIT_0_31+0x24>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001d44:	bf00      	nop
 8001d46:	370c      	adds	r7, #12
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	58000800 	.word	0x58000800

08001d54 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	4904      	ldr	r1, [pc, #16]	; (8001d74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]

}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	58000800 	.word	0x58000800

08001d78 <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <ReadRtcSsrValue+0x3c>)
 8001d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <ReadRtcSsrValue+0x3c>)
 8001d88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8a:	b29b      	uxth	r3, r3
 8001d8c:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001d8e:	e005      	b.n	8001d9c <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001d94:	4b07      	ldr	r3, [pc, #28]	; (8001db4 <ReadRtcSsrValue+0x3c>)
 8001d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d1f5      	bne.n	8001d90 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001da4:	683b      	ldr	r3, [r7, #0]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	40002800 	.word	0x40002800

08001db8 <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	460a      	mov	r2, r1
 8001dc2:	71fb      	strb	r3, [r7, #7]
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001dc8:	79ba      	ldrb	r2, [r7, #6]
 8001dca:	491d      	ldr	r1, [pc, #116]	; (8001e40 <LinkTimerAfter+0x88>)
 8001dcc:	4613      	mov	r3, r2
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	4413      	add	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3315      	adds	r3, #21
 8001dd8:	781b      	ldrb	r3, [r3, #0]
 8001dda:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b06      	cmp	r3, #6
 8001de0:	d009      	beq.n	8001df6 <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001de2:	7bfa      	ldrb	r2, [r7, #15]
 8001de4:	4916      	ldr	r1, [pc, #88]	; (8001e40 <LinkTimerAfter+0x88>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	4413      	add	r3, r2
 8001dec:	00db      	lsls	r3, r3, #3
 8001dee:	440b      	add	r3, r1
 8001df0:	3314      	adds	r3, #20
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001df6:	79fa      	ldrb	r2, [r7, #7]
 8001df8:	4911      	ldr	r1, [pc, #68]	; (8001e40 <LinkTimerAfter+0x88>)
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	4413      	add	r3, r2
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	440b      	add	r3, r1
 8001e04:	3315      	adds	r3, #21
 8001e06:	7bfa      	ldrb	r2, [r7, #15]
 8001e08:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001e0a:	79fa      	ldrb	r2, [r7, #7]
 8001e0c:	490c      	ldr	r1, [pc, #48]	; (8001e40 <LinkTimerAfter+0x88>)
 8001e0e:	4613      	mov	r3, r2
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	4413      	add	r3, r2
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	440b      	add	r3, r1
 8001e18:	3314      	adds	r3, #20
 8001e1a:	79ba      	ldrb	r2, [r7, #6]
 8001e1c:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001e1e:	79ba      	ldrb	r2, [r7, #6]
 8001e20:	4907      	ldr	r1, [pc, #28]	; (8001e40 <LinkTimerAfter+0x88>)
 8001e22:	4613      	mov	r3, r2
 8001e24:	005b      	lsls	r3, r3, #1
 8001e26:	4413      	add	r3, r2
 8001e28:	00db      	lsls	r3, r3, #3
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3315      	adds	r3, #21
 8001e2e:	79fa      	ldrb	r2, [r7, #7]
 8001e30:	701a      	strb	r2, [r3, #0]

  return;
 8001e32:	bf00      	nop
}
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200040fc 	.word	0x200040fc

08001e44 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460a      	mov	r2, r1
 8001e4e:	71fb      	strb	r3, [r7, #7]
 8001e50:	4613      	mov	r3, r2
 8001e52:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001e54:	4b29      	ldr	r3, [pc, #164]	; (8001efc <LinkTimerBefore+0xb8>)
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	79ba      	ldrb	r2, [r7, #6]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d032      	beq.n	8001ec6 <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001e60:	79ba      	ldrb	r2, [r7, #6]
 8001e62:	4927      	ldr	r1, [pc, #156]	; (8001f00 <LinkTimerBefore+0xbc>)
 8001e64:	4613      	mov	r3, r2
 8001e66:	005b      	lsls	r3, r3, #1
 8001e68:	4413      	add	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	440b      	add	r3, r1
 8001e6e:	3314      	adds	r3, #20
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001e74:	7bfa      	ldrb	r2, [r7, #15]
 8001e76:	4922      	ldr	r1, [pc, #136]	; (8001f00 <LinkTimerBefore+0xbc>)
 8001e78:	4613      	mov	r3, r2
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	4413      	add	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	440b      	add	r3, r1
 8001e82:	3315      	adds	r3, #21
 8001e84:	79fa      	ldrb	r2, [r7, #7]
 8001e86:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	491d      	ldr	r1, [pc, #116]	; (8001f00 <LinkTimerBefore+0xbc>)
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	4413      	add	r3, r2
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	440b      	add	r3, r1
 8001e96:	3315      	adds	r3, #21
 8001e98:	79ba      	ldrb	r2, [r7, #6]
 8001e9a:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001e9c:	79fa      	ldrb	r2, [r7, #7]
 8001e9e:	4918      	ldr	r1, [pc, #96]	; (8001f00 <LinkTimerBefore+0xbc>)
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4413      	add	r3, r2
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3314      	adds	r3, #20
 8001eac:	7bfa      	ldrb	r2, [r7, #15]
 8001eae:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001eb0:	79ba      	ldrb	r2, [r7, #6]
 8001eb2:	4913      	ldr	r1, [pc, #76]	; (8001f00 <LinkTimerBefore+0xbc>)
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	440b      	add	r3, r1
 8001ebe:	3314      	adds	r3, #20
 8001ec0:	79fa      	ldrb	r2, [r7, #7]
 8001ec2:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001ec4:	e014      	b.n	8001ef0 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001ec6:	79fa      	ldrb	r2, [r7, #7]
 8001ec8:	490d      	ldr	r1, [pc, #52]	; (8001f00 <LinkTimerBefore+0xbc>)
 8001eca:	4613      	mov	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	4413      	add	r3, r2
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	440b      	add	r3, r1
 8001ed4:	3315      	adds	r3, #21
 8001ed6:	79ba      	ldrb	r2, [r7, #6]
 8001ed8:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001eda:	79ba      	ldrb	r2, [r7, #6]
 8001edc:	4908      	ldr	r1, [pc, #32]	; (8001f00 <LinkTimerBefore+0xbc>)
 8001ede:	4613      	mov	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	4413      	add	r3, r2
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	3314      	adds	r3, #20
 8001eea:	79fa      	ldrb	r2, [r7, #7]
 8001eec:	701a      	strb	r2, [r3, #0]
  return;
 8001eee:	bf00      	nop
}
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	2000418c 	.word	0x2000418c
 8001f00:	200040fc 	.word	0x200040fc

08001f04 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001f0e:	4b4e      	ldr	r3, [pc, #312]	; (8002048 <linkTimer+0x144>)
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b06      	cmp	r3, #6
 8001f16:	d118      	bne.n	8001f4a <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001f18:	4b4b      	ldr	r3, [pc, #300]	; (8002048 <linkTimer+0x144>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b2da      	uxtb	r2, r3
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	; (800204c <linkTimer+0x148>)
 8001f20:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001f22:	4a49      	ldr	r2, [pc, #292]	; (8002048 <linkTimer+0x144>)
 8001f24:	79fb      	ldrb	r3, [r7, #7]
 8001f26:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001f28:	79fa      	ldrb	r2, [r7, #7]
 8001f2a:	4949      	ldr	r1, [pc, #292]	; (8002050 <linkTimer+0x14c>)
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	005b      	lsls	r3, r3, #1
 8001f30:	4413      	add	r3, r2
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	3315      	adds	r3, #21
 8001f38:	2206      	movs	r2, #6
 8001f3a:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001f3c:	4b45      	ldr	r3, [pc, #276]	; (8002054 <linkTimer+0x150>)
 8001f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001f42:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001f44:	2300      	movs	r3, #0
 8001f46:	81fb      	strh	r3, [r7, #14]
 8001f48:	e078      	b.n	800203c <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001f4a:	f000 f909 	bl	8002160 <ReturnTimeElapsed>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001f52:	79fa      	ldrb	r2, [r7, #7]
 8001f54:	493e      	ldr	r1, [pc, #248]	; (8002050 <linkTimer+0x14c>)
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	440b      	add	r3, r1
 8001f60:	3308      	adds	r3, #8
 8001f62:	6819      	ldr	r1, [r3, #0]
 8001f64:	89fb      	ldrh	r3, [r7, #14]
 8001f66:	79fa      	ldrb	r2, [r7, #7]
 8001f68:	4419      	add	r1, r3
 8001f6a:	4839      	ldr	r0, [pc, #228]	; (8002050 <linkTimer+0x14c>)
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4403      	add	r3, r0
 8001f76:	3308      	adds	r3, #8
 8001f78:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001f7a:	79fa      	ldrb	r2, [r7, #7]
 8001f7c:	4934      	ldr	r1, [pc, #208]	; (8002050 <linkTimer+0x14c>)
 8001f7e:	4613      	mov	r3, r2
 8001f80:	005b      	lsls	r3, r3, #1
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	440b      	add	r3, r1
 8001f88:	3308      	adds	r3, #8
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001f8e:	4b2e      	ldr	r3, [pc, #184]	; (8002048 <linkTimer+0x144>)
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	4a2e      	ldr	r2, [pc, #184]	; (8002050 <linkTimer+0x14c>)
 8001f98:	460b      	mov	r3, r1
 8001f9a:	005b      	lsls	r3, r3, #1
 8001f9c:	440b      	add	r3, r1
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3308      	adds	r3, #8
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d337      	bcc.n	800201c <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <linkTimer+0x144>)
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001fb2:	7b7a      	ldrb	r2, [r7, #13]
 8001fb4:	4926      	ldr	r1, [pc, #152]	; (8002050 <linkTimer+0x14c>)
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	4413      	add	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3315      	adds	r3, #21
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001fc6:	e013      	b.n	8001ff0 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001fc8:	7b7a      	ldrb	r2, [r7, #13]
 8001fca:	4921      	ldr	r1, [pc, #132]	; (8002050 <linkTimer+0x14c>)
 8001fcc:	4613      	mov	r3, r2
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4413      	add	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	440b      	add	r3, r1
 8001fd6:	3315      	adds	r3, #21
 8001fd8:	781b      	ldrb	r3, [r3, #0]
 8001fda:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001fdc:	7b7a      	ldrb	r2, [r7, #13]
 8001fde:	491c      	ldr	r1, [pc, #112]	; (8002050 <linkTimer+0x14c>)
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	005b      	lsls	r3, r3, #1
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	440b      	add	r3, r1
 8001fea:	3315      	adds	r3, #21
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001ff0:	7b3b      	ldrb	r3, [r7, #12]
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d00b      	beq.n	800200e <linkTimer+0x10a>
 8001ff6:	7b3a      	ldrb	r2, [r7, #12]
 8001ff8:	4915      	ldr	r1, [pc, #84]	; (8002050 <linkTimer+0x14c>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	00db      	lsls	r3, r3, #3
 8002002:	440b      	add	r3, r1
 8002004:	3308      	adds	r3, #8
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	d2dc      	bcs.n	8001fc8 <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 800200e:	7b7a      	ldrb	r2, [r7, #13]
 8002010:	79fb      	ldrb	r3, [r7, #7]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fecf 	bl	8001db8 <LinkTimerAfter>
 800201a:	e00f      	b.n	800203c <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 800201c:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <linkTimer+0x144>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2da      	uxtb	r2, r3
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	4611      	mov	r1, r2
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff ff0c 	bl	8001e44 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 800202c:	4b06      	ldr	r3, [pc, #24]	; (8002048 <linkTimer+0x144>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	4b06      	ldr	r3, [pc, #24]	; (800204c <linkTimer+0x148>)
 8002034:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8002036:	4a04      	ldr	r2, [pc, #16]	; (8002048 <linkTimer+0x144>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 800203c:	89fb      	ldrh	r3, [r7, #14]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	2000418c 	.word	0x2000418c
 800204c:	2000418d 	.word	0x2000418d
 8002050:	200040fc 	.word	0x200040fc
 8002054:	20004190 	.word	0x20004190

08002058 <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8002058:	b480      	push	{r7}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	460a      	mov	r2, r1
 8002062:	71fb      	strb	r3, [r7, #7]
 8002064:	4613      	mov	r3, r2
 8002066:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8002068:	4b39      	ldr	r3, [pc, #228]	; (8002150 <UnlinkTimer+0xf8>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	b2db      	uxtb	r3, r3
 800206e:	79fa      	ldrb	r2, [r7, #7]
 8002070:	429a      	cmp	r2, r3
 8002072:	d111      	bne.n	8002098 <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8002074:	4b36      	ldr	r3, [pc, #216]	; (8002150 <UnlinkTimer+0xf8>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4b36      	ldr	r3, [pc, #216]	; (8002154 <UnlinkTimer+0xfc>)
 800207c:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 800207e:	79fa      	ldrb	r2, [r7, #7]
 8002080:	4935      	ldr	r1, [pc, #212]	; (8002158 <UnlinkTimer+0x100>)
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	00db      	lsls	r3, r3, #3
 800208a:	440b      	add	r3, r1
 800208c:	3315      	adds	r3, #21
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	b2da      	uxtb	r2, r3
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <UnlinkTimer+0xf8>)
 8002094:	701a      	strb	r2, [r3, #0]
 8002096:	e03e      	b.n	8002116 <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8002098:	79fa      	ldrb	r2, [r7, #7]
 800209a:	492f      	ldr	r1, [pc, #188]	; (8002158 <UnlinkTimer+0x100>)
 800209c:	4613      	mov	r3, r2
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4413      	add	r3, r2
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	440b      	add	r3, r1
 80020a6:	3314      	adds	r3, #20
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 80020ac:	79fa      	ldrb	r2, [r7, #7]
 80020ae:	492a      	ldr	r1, [pc, #168]	; (8002158 <UnlinkTimer+0x100>)
 80020b0:	4613      	mov	r3, r2
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	4413      	add	r3, r2
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	440b      	add	r3, r1
 80020ba:	3315      	adds	r3, #21
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 80020c0:	79f9      	ldrb	r1, [r7, #7]
 80020c2:	7bfa      	ldrb	r2, [r7, #15]
 80020c4:	4824      	ldr	r0, [pc, #144]	; (8002158 <UnlinkTimer+0x100>)
 80020c6:	460b      	mov	r3, r1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	440b      	add	r3, r1
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4403      	add	r3, r0
 80020d0:	3315      	adds	r3, #21
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	b2d8      	uxtb	r0, r3
 80020d6:	4920      	ldr	r1, [pc, #128]	; (8002158 <UnlinkTimer+0x100>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3315      	adds	r3, #21
 80020e4:	4602      	mov	r2, r0
 80020e6:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020e8:	7bbb      	ldrb	r3, [r7, #14]
 80020ea:	2b06      	cmp	r3, #6
 80020ec:	d013      	beq.n	8002116 <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 80020ee:	79f9      	ldrb	r1, [r7, #7]
 80020f0:	7bba      	ldrb	r2, [r7, #14]
 80020f2:	4819      	ldr	r0, [pc, #100]	; (8002158 <UnlinkTimer+0x100>)
 80020f4:	460b      	mov	r3, r1
 80020f6:	005b      	lsls	r3, r3, #1
 80020f8:	440b      	add	r3, r1
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4403      	add	r3, r0
 80020fe:	3314      	adds	r3, #20
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	b2d8      	uxtb	r0, r3
 8002104:	4914      	ldr	r1, [pc, #80]	; (8002158 <UnlinkTimer+0x100>)
 8002106:	4613      	mov	r3, r2
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4413      	add	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	440b      	add	r3, r1
 8002110:	3314      	adds	r3, #20
 8002112:	4602      	mov	r2, r0
 8002114:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8002116:	79fa      	ldrb	r2, [r7, #7]
 8002118:	490f      	ldr	r1, [pc, #60]	; (8002158 <UnlinkTimer+0x100>)
 800211a:	4613      	mov	r3, r2
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	4413      	add	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	440b      	add	r3, r1
 8002124:	330c      	adds	r3, #12
 8002126:	2201      	movs	r2, #1
 8002128:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <UnlinkTimer+0xf8>)
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b06      	cmp	r3, #6
 8002132:	d107      	bne.n	8002144 <UnlinkTimer+0xec>
 8002134:	79bb      	ldrb	r3, [r7, #6]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d104      	bne.n	8002144 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <UnlinkTimer+0x104>)
 800213c:	f04f 32ff 	mov.w	r2, #4294967295
 8002140:	601a      	str	r2, [r3, #0]
  }

  return;
 8002142:	bf00      	nop
 8002144:	bf00      	nop
}
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	2000418c 	.word	0x2000418c
 8002154:	2000418d 	.word	0x2000418d
 8002158:	200040fc 	.word	0x200040fc
 800215c:	20004190 	.word	0x20004190

08002160 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8002166:	4b1a      	ldr	r3, [pc, #104]	; (80021d0 <ReturnTimeElapsed+0x70>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216e:	d026      	beq.n	80021be <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8002170:	f7ff fe02 	bl	8001d78 <ReadRtcSsrValue>
 8002174:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8002176:	4b16      	ldr	r3, [pc, #88]	; (80021d0 <ReturnTimeElapsed+0x70>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	d805      	bhi.n	800218c <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8002180:	4b13      	ldr	r3, [pc, #76]	; (80021d0 <ReturnTimeElapsed+0x70>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	607b      	str	r3, [r7, #4]
 800218a:	e00a      	b.n	80021a2 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <ReturnTimeElapsed+0x74>)
 800218e:	881b      	ldrh	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <ReturnTimeElapsed+0x70>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	4413      	add	r3, r2
 80021a0:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 80021a2:	4b0d      	ldr	r3, [pc, #52]	; (80021d8 <ReturnTimeElapsed+0x78>)
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	461a      	mov	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 80021b0:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <ReturnTimeElapsed+0x7c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	461a      	mov	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	40d3      	lsrs	r3, r2
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	e001      	b.n	80021c2 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	b29b      	uxth	r3, r3
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	20004190 	.word	0x20004190
 80021d4:	20004198 	.word	0x20004198
 80021d8:	20004196 	.word	0x20004196
 80021dc:	20004195 	.word	0x20004195

080021e0 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	4603      	mov	r3, r0
 80021e8:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 80021ea:	88fb      	ldrh	r3, [r7, #6]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d108      	bne.n	8002202 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 80021f0:	f7ff fdc2 	bl	8001d78 <ReadRtcSsrValue>
 80021f4:	4603      	mov	r3, r0
 80021f6:	4a21      	ldr	r2, [pc, #132]	; (800227c <RestartWakeupCounter+0x9c>)
 80021f8:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80021fa:	2003      	movs	r0, #3
 80021fc:	f005 ffdf 	bl	80081be <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8002200:	e039      	b.n	8002276 <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d803      	bhi.n	8002210 <RestartWakeupCounter+0x30>
 8002208:	4b1d      	ldr	r3, [pc, #116]	; (8002280 <RestartWakeupCounter+0xa0>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d002      	beq.n	8002216 <RestartWakeupCounter+0x36>
      Value -= 1;
 8002210:	88fb      	ldrh	r3, [r7, #6]
 8002212:	3b01      	subs	r3, #1
 8002214:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002216:	bf00      	nop
 8002218:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <RestartWakeupCounter+0xa4>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	68db      	ldr	r3, [r3, #12]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0f8      	beq.n	8002218 <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002226:	4b17      	ldr	r3, [pc, #92]	; (8002284 <RestartWakeupCounter+0xa4>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <RestartWakeupCounter+0xa4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002236:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8002238:	4b13      	ldr	r3, [pc, #76]	; (8002288 <RestartWakeupCounter+0xa8>)
 800223a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800223e:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8002240:	2003      	movs	r0, #3
 8002242:	f005 ffca 	bl	80081da <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8002246:	4b11      	ldr	r3, [pc, #68]	; (800228c <RestartWakeupCounter+0xac>)
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	0c1b      	lsrs	r3, r3, #16
 800224c:	041b      	lsls	r3, r3, #16
 800224e:	88fa      	ldrh	r2, [r7, #6]
 8002250:	490e      	ldr	r1, [pc, #56]	; (800228c <RestartWakeupCounter+0xac>)
 8002252:	4313      	orrs	r3, r2
 8002254:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8002256:	f7ff fd8f 	bl	8001d78 <ReadRtcSsrValue>
 800225a:	4603      	mov	r3, r0
 800225c:	4a07      	ldr	r2, [pc, #28]	; (800227c <RestartWakeupCounter+0x9c>)
 800225e:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <RestartWakeupCounter+0xa4>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	689a      	ldr	r2, [r3, #8]
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <RestartWakeupCounter+0xa4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800226e:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8002270:	f3af 8000 	nop.w
  return ;
 8002274:	bf00      	nop
}
 8002276:	3708      	adds	r7, #8
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	20004190 	.word	0x20004190
 8002280:	20004195 	.word	0x20004195
 8002284:	200043dc 	.word	0x200043dc
 8002288:	58000800 	.word	0x58000800
 800228c:	40002800 	.word	0x40002800

08002290 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002296:	4b45      	ldr	r3, [pc, #276]	; (80023ac <RescheduleTimerList+0x11c>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800229e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022a2:	d107      	bne.n	80022b4 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 80022a4:	bf00      	nop
 80022a6:	4b42      	ldr	r3, [pc, #264]	; (80023b0 <RescheduleTimerList+0x120>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d1f8      	bne.n	80022a6 <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80022b4:	4b3e      	ldr	r3, [pc, #248]	; (80023b0 <RescheduleTimerList+0x120>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	689a      	ldr	r2, [r3, #8]
 80022ba:	4b3d      	ldr	r3, [pc, #244]	; (80023b0 <RescheduleTimerList+0x120>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80022c2:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 80022c4:	4b3b      	ldr	r3, [pc, #236]	; (80023b4 <RescheduleTimerList+0x124>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 80022ca:	7bfa      	ldrb	r2, [r7, #15]
 80022cc:	493a      	ldr	r1, [pc, #232]	; (80023b8 <RescheduleTimerList+0x128>)
 80022ce:	4613      	mov	r3, r2
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	4413      	add	r3, r2
 80022d4:	00db      	lsls	r3, r3, #3
 80022d6:	440b      	add	r3, r1
 80022d8:	3308      	adds	r3, #8
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 80022de:	f7ff ff3f 	bl	8002160 <ReturnTimeElapsed>
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d205      	bcs.n	80022fa <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 80022f2:	4b32      	ldr	r3, [pc, #200]	; (80023bc <RescheduleTimerList+0x12c>)
 80022f4:	2201      	movs	r2, #1
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e04d      	b.n	8002396 <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 80022fa:	88fb      	ldrh	r3, [r7, #6]
 80022fc:	4a30      	ldr	r2, [pc, #192]	; (80023c0 <RescheduleTimerList+0x130>)
 80022fe:	8812      	ldrh	r2, [r2, #0]
 8002300:	b292      	uxth	r2, r2
 8002302:	4413      	add	r3, r2
 8002304:	461a      	mov	r2, r3
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	4293      	cmp	r3, r2
 800230a:	d906      	bls.n	800231a <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <RescheduleTimerList+0x130>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <RescheduleTimerList+0x12c>)
 8002314:	2200      	movs	r2, #0
 8002316:	701a      	strb	r2, [r3, #0]
 8002318:	e03d      	b.n	8002396 <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	b29a      	uxth	r2, r3
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002324:	4b25      	ldr	r3, [pc, #148]	; (80023bc <RescheduleTimerList+0x12c>)
 8002326:	2201      	movs	r2, #1
 8002328:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800232a:	e034      	b.n	8002396 <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 800232c:	7bfa      	ldrb	r2, [r7, #15]
 800232e:	4922      	ldr	r1, [pc, #136]	; (80023b8 <RescheduleTimerList+0x128>)
 8002330:	4613      	mov	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	4413      	add	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	440b      	add	r3, r1
 800233a:	3308      	adds	r3, #8
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	88fb      	ldrh	r3, [r7, #6]
 8002340:	429a      	cmp	r2, r3
 8002342:	d20a      	bcs.n	800235a <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002344:	7bfa      	ldrb	r2, [r7, #15]
 8002346:	491c      	ldr	r1, [pc, #112]	; (80023b8 <RescheduleTimerList+0x128>)
 8002348:	4613      	mov	r3, r2
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	4413      	add	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	440b      	add	r3, r1
 8002352:	3308      	adds	r3, #8
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e013      	b.n	8002382 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800235a:	7bfa      	ldrb	r2, [r7, #15]
 800235c:	4916      	ldr	r1, [pc, #88]	; (80023b8 <RescheduleTimerList+0x128>)
 800235e:	4613      	mov	r3, r2
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	4413      	add	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	440b      	add	r3, r1
 8002368:	3308      	adds	r3, #8
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	88fb      	ldrh	r3, [r7, #6]
 800236e:	7bfa      	ldrb	r2, [r7, #15]
 8002370:	1ac9      	subs	r1, r1, r3
 8002372:	4811      	ldr	r0, [pc, #68]	; (80023b8 <RescheduleTimerList+0x128>)
 8002374:	4613      	mov	r3, r2
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	4413      	add	r3, r2
 800237a:	00db      	lsls	r3, r3, #3
 800237c:	4403      	add	r3, r0
 800237e:	3308      	adds	r3, #8
 8002380:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 8002382:	7bfa      	ldrb	r2, [r7, #15]
 8002384:	490c      	ldr	r1, [pc, #48]	; (80023b8 <RescheduleTimerList+0x128>)
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	440b      	add	r3, r1
 8002390:	3315      	adds	r3, #21
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b06      	cmp	r3, #6
 800239a:	d1c7      	bne.n	800232c <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 800239c:	89bb      	ldrh	r3, [r7, #12]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7ff ff1e 	bl	80021e0 <RestartWakeupCounter>

  return ;
 80023a4:	bf00      	nop
}
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40002800 	.word	0x40002800
 80023b0:	200043dc 	.word	0x200043dc
 80023b4:	2000418c 	.word	0x2000418c
 80023b8:	200040fc 	.word	0x200040fc
 80023bc:	20004194 	.word	0x20004194
 80023c0:	2000419a 	.word	0x2000419a

080023c4 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b08a      	sub	sp, #40	; 0x28
 80023c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023ca:	f3ef 8310 	mrs	r3, PRIMASK
 80023ce:	617b      	str	r3, [r7, #20]
  return(result);
 80023d0:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 80023d4:	b672      	cpsid	i
}
 80023d6:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80023d8:	4b59      	ldr	r3, [pc, #356]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	22ca      	movs	r2, #202	; 0xca
 80023de:	625a      	str	r2, [r3, #36]	; 0x24
 80023e0:	4b57      	ldr	r3, [pc, #348]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2253      	movs	r2, #83	; 0x53
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 80023e8:	4b55      	ldr	r3, [pc, #340]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689a      	ldr	r2, [r3, #8]
 80023ee:	4b54      	ldr	r3, [pc, #336]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023f6:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 80023f8:	4b52      	ldr	r3, [pc, #328]	; (8002544 <HW_TS_RTC_Wakeup_Handler+0x180>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002400:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002404:	4950      	ldr	r1, [pc, #320]	; (8002548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	440b      	add	r3, r1
 8002410:	330c      	adds	r3, #12
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d16e      	bne.n	80024f8 <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800241a:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800241e:	494a      	ldr	r1, [pc, #296]	; (8002548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	00db      	lsls	r3, r3, #3
 8002428:	440b      	add	r3, r1
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 800242e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002432:	4945      	ldr	r1, [pc, #276]	; (8002548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	00db      	lsls	r3, r3, #3
 800243c:	440b      	add	r3, r1
 800243e:	3310      	adds	r3, #16
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002444:	4b41      	ldr	r3, [pc, #260]	; (800254c <HW_TS_RTC_Wakeup_Handler+0x188>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	2b00      	cmp	r3, #0
 800244c:	d04c      	beq.n	80024e8 <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 800244e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002452:	493d      	ldr	r1, [pc, #244]	; (8002548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	440b      	add	r3, r1
 800245e:	330d      	adds	r3, #13
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b01      	cmp	r3, #1
 8002466:	d124      	bne.n	80024b2 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 8002468:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800246c:	2101      	movs	r1, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fdf2 	bl	8002058 <UnlinkTimer>
 8002474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002476:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f383 8810 	msr	PRIMASK, r3
}
 800247e:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 8002480:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002484:	4930      	ldr	r1, [pc, #192]	; (8002548 <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002486:	4613      	mov	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4413      	add	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	440b      	add	r3, r1
 8002490:	3304      	adds	r3, #4
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002498:	4611      	mov	r1, r2
 800249a:	4618      	mov	r0, r3
 800249c:	f000 fa32 	bl	8002904 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024a0:	4b27      	ldr	r3, [pc, #156]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	22ca      	movs	r2, #202	; 0xca
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
 80024a8:	4b25      	ldr	r3, [pc, #148]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2253      	movs	r2, #83	; 0x53
 80024ae:	625a      	str	r2, [r3, #36]	; 0x24
 80024b0:	e012      	b.n	80024d8 <HW_TS_RTC_Wakeup_Handler+0x114>
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f383 8810 	msr	PRIMASK, r3
}
 80024bc:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80024be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f99a 	bl	80027fc <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80024c8:	4b1d      	ldr	r3, [pc, #116]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	22ca      	movs	r2, #202	; 0xca
 80024ce:	625a      	str	r2, [r3, #36]	; 0x24
 80024d0:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2253      	movs	r2, #83	; 0x53
 80024d6:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 80024d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80024dc:	69fa      	ldr	r2, [r7, #28]
 80024de:	4619      	mov	r1, r3
 80024e0:	69b8      	ldr	r0, [r7, #24]
 80024e2:	f000 fa95 	bl	8002a10 <HW_TS_RTC_Int_AppNot>
 80024e6:	e022      	b.n	800252e <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 80024e8:	f7ff fed2 	bl	8002290 <RescheduleTimerList>
 80024ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	f383 8810 	msr	PRIMASK, r3
}
 80024f6:	e01a      	b.n	800252e <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80024f8:	bf00      	nop
 80024fa:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0f8      	beq.n	80024fa <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	4b0b      	ldr	r3, [pc, #44]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002518:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 800251c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	f383 8810 	msr	PRIMASK, r3
}
 800252c:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 800252e:	4b04      	ldr	r3, [pc, #16]	; (8002540 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	22ff      	movs	r2, #255	; 0xff
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 8002536:	bf00      	nop
}
 8002538:	3728      	adds	r7, #40	; 0x28
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	200043dc 	.word	0x200043dc
 8002544:	2000418c 	.word	0x2000418c
 8002548:	200040fc 	.word	0x200040fc
 800254c:	20004194 	.word	0x20004194
 8002550:	58000800 	.word	0x58000800

08002554 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b088      	sub	sp, #32
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	6039      	str	r1, [r7, #0]
 800255e:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002560:	4b5e      	ldr	r3, [pc, #376]	; (80026dc <HW_TS_Init+0x188>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	22ca      	movs	r2, #202	; 0xca
 8002566:	625a      	str	r2, [r3, #36]	; 0x24
 8002568:	4b5c      	ldr	r3, [pc, #368]	; (80026dc <HW_TS_Init+0x188>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2253      	movs	r2, #83	; 0x53
 800256e:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002570:	4b5b      	ldr	r3, [pc, #364]	; (80026e0 <HW_TS_Init+0x18c>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	4a5a      	ldr	r2, [pc, #360]	; (80026e0 <HW_TS_Init+0x18c>)
 8002576:	f043 0320 	orr.w	r3, r3, #32
 800257a:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 800257c:	4b58      	ldr	r3, [pc, #352]	; (80026e0 <HW_TS_Init+0x18c>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	b2db      	uxtb	r3, r3
 8002588:	f1c3 0304 	rsb	r3, r3, #4
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <HW_TS_Init+0x190>)
 8002590:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 8002592:	4b53      	ldr	r3, [pc, #332]	; (80026e0 <HW_TS_Init+0x18c>)
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800259a:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 800259e:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	fa92 f2a2 	rbit	r2, r2
 80025a6:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80025ac:	697a      	ldr	r2, [r7, #20]
 80025ae:	2a00      	cmp	r2, #0
 80025b0:	d101      	bne.n	80025b6 <HW_TS_Init+0x62>
  {
    return 32U;
 80025b2:	2220      	movs	r2, #32
 80025b4:	e003      	b.n	80025be <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	fab2 f282 	clz	r2, r2
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	40d3      	lsrs	r3, r2
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	3301      	adds	r3, #1
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4b48      	ldr	r3, [pc, #288]	; (80026e8 <HW_TS_Init+0x194>)
 80025c8:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80025ca:	4b45      	ldr	r3, [pc, #276]	; (80026e0 <HW_TS_Init+0x18c>)
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b44      	ldr	r3, [pc, #272]	; (80026ec <HW_TS_Init+0x198>)
 80025dc:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 80025de:	4b43      	ldr	r3, [pc, #268]	; (80026ec <HW_TS_Init+0x198>)
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	4a40      	ldr	r2, [pc, #256]	; (80026e8 <HW_TS_Init+0x194>)
 80025e6:	7812      	ldrb	r2, [r2, #0]
 80025e8:	fb02 f303 	mul.w	r3, r2, r3
 80025ec:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80025f0:	4a3c      	ldr	r2, [pc, #240]	; (80026e4 <HW_TS_Init+0x190>)
 80025f2:	7812      	ldrb	r2, [r2, #0]
 80025f4:	40d3      	lsrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80025fe:	4293      	cmp	r3, r2
 8002600:	d904      	bls.n	800260c <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002602:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HW_TS_Init+0x19c>)
 8002604:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002608:	801a      	strh	r2, [r3, #0]
 800260a:	e003      	b.n	8002614 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	b29a      	uxth	r2, r3
 8002610:	4b37      	ldr	r3, [pc, #220]	; (80026f0 <HW_TS_Init+0x19c>)
 8002612:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002614:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002618:	f7ff fb9c 	bl	8001d54 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800261c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002620:	f7ff fb84 	bl	8001d2c <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002624:	79fb      	ldrb	r3, [r7, #7]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d13d      	bne.n	80026a6 <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800262a:	4b32      	ldr	r3, [pc, #200]	; (80026f4 <HW_TS_Init+0x1a0>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002630:	4b31      	ldr	r3, [pc, #196]	; (80026f8 <HW_TS_Init+0x1a4>)
 8002632:	f04f 32ff 	mov.w	r2, #4294967295
 8002636:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002638:	2300      	movs	r3, #0
 800263a:	77fb      	strb	r3, [r7, #31]
 800263c:	e00c      	b.n	8002658 <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 800263e:	7ffa      	ldrb	r2, [r7, #31]
 8002640:	492e      	ldr	r1, [pc, #184]	; (80026fc <HW_TS_Init+0x1a8>)
 8002642:	4613      	mov	r3, r2
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	4413      	add	r3, r2
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	440b      	add	r3, r1
 800264c:	330c      	adds	r3, #12
 800264e:	2200      	movs	r2, #0
 8002650:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002652:	7ffb      	ldrb	r3, [r7, #31]
 8002654:	3301      	adds	r3, #1
 8002656:	77fb      	strb	r3, [r7, #31]
 8002658:	7ffb      	ldrb	r3, [r7, #31]
 800265a:	2b05      	cmp	r3, #5
 800265c:	d9ef      	bls.n	800263e <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 800265e:	4b28      	ldr	r3, [pc, #160]	; (8002700 <HW_TS_Init+0x1ac>)
 8002660:	2206      	movs	r2, #6
 8002662:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002664:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <HW_TS_Init+0x188>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HW_TS_Init+0x188>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002672:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 8002674:	4b19      	ldr	r3, [pc, #100]	; (80026dc <HW_TS_Init+0x188>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	4b17      	ldr	r3, [pc, #92]	; (80026dc <HW_TS_Init+0x188>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8002684:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 8002686:	4b1f      	ldr	r3, [pc, #124]	; (8002704 <HW_TS_Init+0x1b0>)
 8002688:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800268c:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 800268e:	2003      	movs	r0, #3
 8002690:	f005 fda3 	bl	80081da <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <HW_TS_Init+0x188>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689a      	ldr	r2, [r3, #8]
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HW_TS_Init+0x188>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026a2:	609a      	str	r2, [r3, #8]
 80026a4:	e009      	b.n	80026ba <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HW_TS_Init+0x188>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d002      	beq.n	80026ba <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f005 fd82 	bl	80081be <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <HW_TS_Init+0x188>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	22ff      	movs	r2, #255	; 0xff
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80026c2:	2200      	movs	r2, #0
 80026c4:	2103      	movs	r1, #3
 80026c6:	2003      	movs	r0, #3
 80026c8:	f005 fd37 	bl	800813a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80026cc:	2003      	movs	r0, #3
 80026ce:	f005 fd4e 	bl	800816e <HAL_NVIC_EnableIRQ>

  return;
 80026d2:	bf00      	nop
}
 80026d4:	3720      	adds	r7, #32
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200043dc 	.word	0x200043dc
 80026e0:	40002800 	.word	0x40002800
 80026e4:	20004195 	.word	0x20004195
 80026e8:	20004196 	.word	0x20004196
 80026ec:	20004198 	.word	0x20004198
 80026f0:	2000419a 	.word	0x2000419a
 80026f4:	20004194 	.word	0x20004194
 80026f8:	20004190 	.word	0x20004190
 80026fc:	200040fc 	.word	0x200040fc
 8002700:	2000418c 	.word	0x2000418c
 8002704:	58000800 	.word	0x58000800

08002708 <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 8002708:	b480      	push	{r7}
 800270a:	b08b      	sub	sp, #44	; 0x2c
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	603b      	str	r3, [r7, #0]
 8002714:	4613      	mov	r3, r2
 8002716:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 8002718:	2300      	movs	r3, #0
 800271a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800271e:	f3ef 8310 	mrs	r3, PRIMASK
 8002722:	61fb      	str	r3, [r7, #28]
  return(result);
 8002724:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002726:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i
}
 800272a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800272c:	e004      	b.n	8002738 <HW_TS_Create+0x30>
  {
    loop++;
 800272e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002732:	3301      	adds	r3, #1
 8002734:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002738:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800273c:	2b05      	cmp	r3, #5
 800273e:	d80c      	bhi.n	800275a <HW_TS_Create+0x52>
 8002740:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002744:	492c      	ldr	r1, [pc, #176]	; (80027f8 <HW_TS_Create+0xf0>)
 8002746:	4613      	mov	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	4413      	add	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	440b      	add	r3, r1
 8002750:	330c      	adds	r3, #12
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e9      	bne.n	800272e <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800275a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800275e:	2b06      	cmp	r3, #6
 8002760:	d038      	beq.n	80027d4 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002762:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002766:	4924      	ldr	r1, [pc, #144]	; (80027f8 <HW_TS_Create+0xf0>)
 8002768:	4613      	mov	r3, r2
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	4413      	add	r3, r2
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	440b      	add	r3, r1
 8002772:	330c      	adds	r3, #12
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f383 8810 	msr	PRIMASK, r3
}
 8002782:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 8002784:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002788:	491b      	ldr	r1, [pc, #108]	; (80027f8 <HW_TS_Create+0xf0>)
 800278a:	4613      	mov	r3, r2
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	3310      	adds	r3, #16
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 800279a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800279e:	4916      	ldr	r1, [pc, #88]	; (80027f8 <HW_TS_Create+0xf0>)
 80027a0:	4613      	mov	r3, r2
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	4413      	add	r3, r2
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	440b      	add	r3, r1
 80027aa:	330d      	adds	r3, #13
 80027ac:	79fa      	ldrb	r2, [r7, #7]
 80027ae:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80027b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80027b4:	4910      	ldr	r1, [pc, #64]	; (80027f8 <HW_TS_Create+0xf0>)
 80027b6:	4613      	mov	r3, r2
 80027b8:	005b      	lsls	r3, r3, #1
 80027ba:	4413      	add	r3, r2
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	440b      	add	r3, r1
 80027c0:	683a      	ldr	r2, [r7, #0]
 80027c2:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80027ca:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 80027cc:	2300      	movs	r3, #0
 80027ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80027d2:	e008      	b.n	80027e6 <HW_TS_Create+0xde>
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f383 8810 	msr	PRIMASK, r3
}
 80027de:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 80027e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	372c      	adds	r7, #44	; 0x2c
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	200040fc 	.word	0x200040fc

080027fc <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002806:	f3ef 8310 	mrs	r3, PRIMASK
 800280a:	60fb      	str	r3, [r7, #12]
  return(result);
 800280c:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800280e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002810:	b672      	cpsid	i
}
 8002812:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002814:	2003      	movs	r0, #3
 8002816:	f005 fcb8 	bl	800818a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800281a:	4b34      	ldr	r3, [pc, #208]	; (80028ec <HW_TS_Stop+0xf0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	22ca      	movs	r2, #202	; 0xca
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HW_TS_Stop+0xf0>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2253      	movs	r2, #83	; 0x53
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800282a:	79fa      	ldrb	r2, [r7, #7]
 800282c:	4930      	ldr	r1, [pc, #192]	; (80028f0 <HW_TS_Stop+0xf4>)
 800282e:	4613      	mov	r3, r2
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	4413      	add	r3, r2
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	440b      	add	r3, r1
 8002838:	330c      	adds	r3, #12
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d142      	bne.n	80028c8 <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	2100      	movs	r1, #0
 8002846:	4618      	mov	r0, r3
 8002848:	f7ff fc06 	bl	8002058 <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 800284c:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HW_TS_Stop+0xf8>)
 800284e:	781b      	ldrb	r3, [r3, #0]
 8002850:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b06      	cmp	r3, #6
 8002856:	d12f      	bne.n	80028b8 <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8002858:	4b27      	ldr	r3, [pc, #156]	; (80028f8 <HW_TS_Stop+0xfc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002864:	d107      	bne.n	8002876 <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8002866:	bf00      	nop
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HW_TS_Stop+0xf0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f8      	bne.n	8002868 <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8002876:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HW_TS_Stop+0xf0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HW_TS_Stop+0xf0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002884:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8002886:	bf00      	nop
 8002888:	4b18      	ldr	r3, [pc, #96]	; (80028ec <HW_TS_Stop+0xf0>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f8      	beq.n	8002888 <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8002896:	4b15      	ldr	r3, [pc, #84]	; (80028ec <HW_TS_Stop+0xf0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	4b13      	ldr	r3, [pc, #76]	; (80028ec <HW_TS_Stop+0xf0>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80028a6:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80028a8:	4b14      	ldr	r3, [pc, #80]	; (80028fc <HW_TS_Stop+0x100>)
 80028aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80028ae:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80028b0:	2003      	movs	r0, #3
 80028b2:	f005 fc92 	bl	80081da <HAL_NVIC_ClearPendingIRQ>
 80028b6:	e007      	b.n	80028c8 <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80028b8:	4b11      	ldr	r3, [pc, #68]	; (8002900 <HW_TS_Stop+0x104>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	7cfa      	ldrb	r2, [r7, #19]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80028c4:	f7ff fce4 	bl	8002290 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HW_TS_Stop+0xf0>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	22ff      	movs	r2, #255	; 0xff
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80028d0:	2003      	movs	r0, #3
 80028d2:	f005 fc4c 	bl	800816e <HAL_NVIC_EnableIRQ>
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	f383 8810 	msr	PRIMASK, r3
}
 80028e0:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80028e2:	bf00      	nop
}
 80028e4:	3718      	adds	r7, #24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	200043dc 	.word	0x200043dc
 80028f0:	200040fc 	.word	0x200040fc
 80028f4:	2000418c 	.word	0x2000418c
 80028f8:	40002800 	.word	0x40002800
 80028fc:	58000800 	.word	0x58000800
 8002900:	2000418d 	.word	0x2000418d

08002904 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b086      	sub	sp, #24
 8002908:	af00      	add	r7, sp, #0
 800290a:	4603      	mov	r3, r0
 800290c:	6039      	str	r1, [r7, #0]
 800290e:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002910:	79fa      	ldrb	r2, [r7, #7]
 8002912:	493b      	ldr	r1, [pc, #236]	; (8002a00 <HW_TS_Start+0xfc>)
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	440b      	add	r3, r1
 800291e:	330c      	adds	r3, #12
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	b2db      	uxtb	r3, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d103      	bne.n	8002930 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff66 	bl	80027fc <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002930:	f3ef 8310 	mrs	r3, PRIMASK
 8002934:	60fb      	str	r3, [r7, #12]
  return(result);
 8002936:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002938:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800293a:	b672      	cpsid	i
}
 800293c:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 800293e:	2003      	movs	r0, #3
 8002940:	f005 fc23 	bl	800818a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002944:	4b2f      	ldr	r3, [pc, #188]	; (8002a04 <HW_TS_Start+0x100>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	22ca      	movs	r2, #202	; 0xca
 800294a:	625a      	str	r2, [r3, #36]	; 0x24
 800294c:	4b2d      	ldr	r3, [pc, #180]	; (8002a04 <HW_TS_Start+0x100>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2253      	movs	r2, #83	; 0x53
 8002952:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002954:	79fa      	ldrb	r2, [r7, #7]
 8002956:	492a      	ldr	r1, [pc, #168]	; (8002a00 <HW_TS_Start+0xfc>)
 8002958:	4613      	mov	r3, r2
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	4413      	add	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	440b      	add	r3, r1
 8002962:	330c      	adds	r3, #12
 8002964:	2202      	movs	r2, #2
 8002966:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 8002968:	79fa      	ldrb	r2, [r7, #7]
 800296a:	4925      	ldr	r1, [pc, #148]	; (8002a00 <HW_TS_Start+0xfc>)
 800296c:	4613      	mov	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	4413      	add	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	440b      	add	r3, r1
 8002976:	3308      	adds	r3, #8
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 800297c:	79fa      	ldrb	r2, [r7, #7]
 800297e:	4920      	ldr	r1, [pc, #128]	; (8002a00 <HW_TS_Start+0xfc>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	00db      	lsls	r3, r3, #3
 8002988:	440b      	add	r3, r1
 800298a:	3304      	adds	r3, #4
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fab6 	bl	8001f04 <linkTimer>
 8002998:	4603      	mov	r3, r0
 800299a:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 800299c:	4b1a      	ldr	r3, [pc, #104]	; (8002a08 <HW_TS_Start+0x104>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80029a2:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <HW_TS_Start+0x108>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	7c7a      	ldrb	r2, [r7, #17]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d002      	beq.n	80029b4 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80029ae:	f7ff fc6f 	bl	8002290 <RescheduleTimerList>
 80029b2:	e013      	b.n	80029dc <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80029b4:	79fa      	ldrb	r2, [r7, #7]
 80029b6:	4912      	ldr	r1, [pc, #72]	; (8002a00 <HW_TS_Start+0xfc>)
 80029b8:	4613      	mov	r3, r2
 80029ba:	005b      	lsls	r3, r3, #1
 80029bc:	4413      	add	r3, r2
 80029be:	00db      	lsls	r3, r3, #3
 80029c0:	440b      	add	r3, r1
 80029c2:	3308      	adds	r3, #8
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	8a7b      	ldrh	r3, [r7, #18]
 80029c8:	79fa      	ldrb	r2, [r7, #7]
 80029ca:	1ac9      	subs	r1, r1, r3
 80029cc:	480c      	ldr	r0, [pc, #48]	; (8002a00 <HW_TS_Start+0xfc>)
 80029ce:	4613      	mov	r3, r2
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	4413      	add	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4403      	add	r3, r0
 80029d8:	3308      	adds	r3, #8
 80029da:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80029dc:	4b09      	ldr	r3, [pc, #36]	; (8002a04 <HW_TS_Start+0x100>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	22ff      	movs	r2, #255	; 0xff
 80029e2:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 80029e4:	2003      	movs	r0, #3
 80029e6:	f005 fbc2 	bl	800816e <HAL_NVIC_EnableIRQ>
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f383 8810 	msr	PRIMASK, r3
}
 80029f4:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 80029f6:	bf00      	nop
}
 80029f8:	3718      	adds	r7, #24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	200040fc 	.word	0x200040fc
 8002a04:	200043dc 	.word	0x200043dc
 8002a08:	2000418c 	.word	0x2000418c
 8002a0c:	2000418d 	.word	0x2000418d

08002a10 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	460b      	mov	r3, r1
 8002a1a:	607a      	str	r2, [r7, #4]
 8002a1c:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4798      	blx	r3

  return;
 8002a22:	bf00      	nop
}
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}

08002a2a <HW_UART_Init>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Init(hw_uart_id_t hw_uart_id)
{
 8002a2a:	b580      	push	{r7, lr}
 8002a2c:	b082      	sub	sp, #8
 8002a2e:	af00      	add	r7, sp, #0
 8002a30:	4603      	mov	r3, r0
 8002a32:	71fb      	strb	r3, [r7, #7]
	switch (hw_uart_id)
 8002a34:	79fb      	ldrb	r3, [r7, #7]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d102      	bne.n	8002a40 <HW_UART_Init+0x16>
	{
#if (CFG_HW_USART1_ENABLED == 1)
		case hw_uart1:
			MX_USART1_UART_Init();
 8002a3a:	f000 f9a7 	bl	8002d8c <MX_USART1_UART_Init>
			break;
 8002a3e:	e000      	b.n	8002a42 <HW_UART_Init+0x18>
			MX_LPUART1_UART_Init();
			break;
#endif

		default:
			break;
 8002a40:	bf00      	nop
		}
	return;
 8002a42:	bf00      	nop
}
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
	...

08002a4c <HW_UART_Receive_IT>:

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4603      	mov	r3, r0
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002a5e:	7bfb      	ldrb	r3, [r7, #15]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d10c      	bne.n	8002a7e <HW_UART_Receive_IT+0x32>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_UART_RX_IT(huart1, USART1);
 8002a64:	4a08      	ldr	r2, [pc, #32]	; (8002a88 <HW_UART_Receive_IT+0x3c>)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6013      	str	r3, [r2, #0]
 8002a6a:	4b08      	ldr	r3, [pc, #32]	; (8002a8c <HW_UART_Receive_IT+0x40>)
 8002a6c:	4a08      	ldr	r2, [pc, #32]	; (8002a90 <HW_UART_Receive_IT+0x44>)
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	89bb      	ldrh	r3, [r7, #12]
 8002a72:	461a      	mov	r2, r3
 8002a74:	68b9      	ldr	r1, [r7, #8]
 8002a76:	4805      	ldr	r0, [pc, #20]	; (8002a8c <HW_UART_Receive_IT+0x40>)
 8002a78:	f008 fbbc 	bl	800b1f4 <HAL_UART_Receive_IT>
            break;
 8002a7c:	e000      	b.n	8002a80 <HW_UART_Receive_IT+0x34>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 8002a7e:	bf00      	nop
    }

    return;
 8002a80:	bf00      	nop
}
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	2000419c 	.word	0x2000419c
 8002a8c:	20004274 	.word	0x20004274
 8002a90:	40013800 	.word	0x40013800

08002a94 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b086      	sub	sp, #24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 8002aae:	7bfb      	ldrb	r3, [r7, #15]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10e      	bne.n	8002ad2 <HW_UART_Transmit_DMA+0x3e>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case hw_uart1:
            HW_huart1TxCb = cb;
 8002ab4:	4a17      	ldr	r2, [pc, #92]	; (8002b14 <HW_UART_Transmit_DMA+0x80>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002aba:	4b17      	ldr	r3, [pc, #92]	; (8002b18 <HW_UART_Transmit_DMA+0x84>)
 8002abc:	4a17      	ldr	r2, [pc, #92]	; (8002b1c <HW_UART_Transmit_DMA+0x88>)
 8002abe:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002ac0:	89bb      	ldrh	r3, [r7, #12]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	4814      	ldr	r0, [pc, #80]	; (8002b18 <HW_UART_Transmit_DMA+0x84>)
 8002ac8:	f008 fbe0 	bl	800b28c <HAL_UART_Transmit_DMA>
 8002acc:	4603      	mov	r3, r0
 8002ace:	75fb      	strb	r3, [r7, #23]
            break;
 8002ad0:	e000      	b.n	8002ad4 <HW_UART_Transmit_DMA+0x40>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 8002ad2:	bf00      	nop
    }

    switch (hal_status)
 8002ad4:	7dfb      	ldrb	r3, [r7, #23]
 8002ad6:	2b03      	cmp	r3, #3
 8002ad8:	d816      	bhi.n	8002b08 <HW_UART_Transmit_DMA+0x74>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <HW_UART_Transmit_DMA+0x4c>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002af1 	.word	0x08002af1
 8002ae4:	08002af7 	.word	0x08002af7
 8002ae8:	08002afd 	.word	0x08002afd
 8002aec:	08002b03 	.word	0x08002b03
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002af0:	2300      	movs	r3, #0
 8002af2:	75bb      	strb	r3, [r7, #22]
            break;
 8002af4:	e009      	b.n	8002b0a <HW_UART_Transmit_DMA+0x76>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75bb      	strb	r3, [r7, #22]
            break;
 8002afa:	e006      	b.n	8002b0a <HW_UART_Transmit_DMA+0x76>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002afc:	2302      	movs	r3, #2
 8002afe:	75bb      	strb	r3, [r7, #22]
            break;
 8002b00:	e003      	b.n	8002b0a <HW_UART_Transmit_DMA+0x76>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002b02:	2303      	movs	r3, #3
 8002b04:	75bb      	strb	r3, [r7, #22]
            break;
 8002b06:	e000      	b.n	8002b0a <HW_UART_Transmit_DMA+0x76>

        default:
            break;
 8002b08:	bf00      	nop
    }

    return hw_status;
 8002b0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3718      	adds	r7, #24
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	200041a0 	.word	0x200041a0
 8002b18:	20004274 	.word	0x20004274
 8002b1c:	40013800 	.word	0x40013800

08002b20 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b09      	ldr	r3, [pc, #36]	; (8002b54 <HAL_UART_RxCpltCallback+0x34>)
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d107      	bne.n	8002b44 <HAL_UART_RxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_UART_RxCpltCallback+0x38>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_UART_RxCpltCallback+0x28>
            {
                HW_huart1RxCb();
 8002b3c:	4b06      	ldr	r3, [pc, #24]	; (8002b58 <HAL_UART_RxCpltCallback+0x38>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4798      	blx	r3
            }
            break;
 8002b42:	e001      	b.n	8002b48 <HAL_UART_RxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002b44:	bf00      	nop
 8002b46:	e000      	b.n	8002b4a <HAL_UART_RxCpltCallback+0x2a>
            break;
 8002b48:	bf00      	nop
    }

    return;
 8002b4a:	bf00      	nop
}
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40013800 	.word	0x40013800
 8002b58:	2000419c 	.word	0x2000419c

08002b5c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_UART_TxCpltCallback+0x34>)
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d107      	bne.n	8002b80 <HAL_UART_TxCpltCallback+0x24>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002b70:	4b08      	ldr	r3, [pc, #32]	; (8002b94 <HAL_UART_TxCpltCallback+0x38>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d005      	beq.n	8002b84 <HAL_UART_TxCpltCallback+0x28>
            {
                HW_huart1TxCb();
 8002b78:	4b06      	ldr	r3, [pc, #24]	; (8002b94 <HAL_UART_TxCpltCallback+0x38>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4798      	blx	r3
            }
            break;
 8002b7e:	e001      	b.n	8002b84 <HAL_UART_TxCpltCallback+0x28>
            }
            break;
#endif

        default:
            break;
 8002b80:	bf00      	nop
 8002b82:	e000      	b.n	8002b86 <HAL_UART_TxCpltCallback+0x2a>
            break;
 8002b84:	bf00      	nop
    }

    return;
 8002b86:	bf00      	nop
}
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	40013800 	.word	0x40013800
 8002b94:	200041a0 	.word	0x200041a0

08002b98 <LL_RCC_LSE_SetDriveCapability>:
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002ba0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ba8:	f023 0218 	bic.w	r2, r3, #24
 8002bac:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002bb8:	bf00      	nop
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <LL_AHB1_GRP1_EnableClock>:
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002bcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bd0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002bdc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002be8:	68fb      	ldr	r3, [r7, #12]
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <LL_AHB2_GRP1_EnableClock>:
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002bfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c04:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4013      	ands	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
}
 8002c1c:	bf00      	nop
 8002c1e:	3714      	adds	r7, #20
 8002c20:	46bd      	mov	sp, r7
 8002c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c26:	4770      	bx	lr

08002c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c2c:	f005 f8ac 	bl	8007d88 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 8002c30:	f7fe fc16 	bl	8001460 <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c34:	f000 f818 	bl	8002c68 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8002c38:	f000 f874 	bl	8002d24 <PeriphCommonClock_Config>

  /* IPCC initialisation */
   MX_IPCC_Init();
 8002c3c:	f000 f892 	bl	8002d64 <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c40:	f000 f961 	bl	8002f06 <MX_GPIO_Init>
  MX_DMA_Init();
 8002c44:	f000 f942 	bl	8002ecc <MX_DMA_Init>
  MX_RF_Init();
 8002c48:	f000 f8ee 	bl	8002e28 <MX_RF_Init>
  MX_RTC_Init();
 8002c4c:	f000 f90a 	bl	8002e64 <MX_RTC_Init>
  MX_RNG_Init();
 8002c50:	f000 f8f2 	bl	8002e38 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  /* Enable CRC clock */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002c54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002c58:	f7ff ffb4 	bl	8002bc4 <LL_AHB1_GRP1_EnableClock>
  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002c5c:	f7fe fc0e 	bl	800147c <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002c60:	f7fe fe6e 	bl	8001940 <MX_APPE_Process>
 8002c64:	e7fc      	b.n	8002c60 <main+0x38>
	...

08002c68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b09a      	sub	sp, #104	; 0x68
 8002c6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c6e:	f107 0320 	add.w	r3, r7, #32
 8002c72:	2248      	movs	r2, #72	; 0x48
 8002c74:	2100      	movs	r1, #0
 8002c76:	4618      	mov	r0, r3
 8002c78:	f026 fe1c 	bl	80298b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c7c:	1d3b      	adds	r3, r7, #4
 8002c7e:	2200      	movs	r2, #0
 8002c80:	601a      	str	r2, [r3, #0]
 8002c82:	605a      	str	r2, [r3, #4]
 8002c84:	609a      	str	r2, [r3, #8]
 8002c86:	60da      	str	r2, [r3, #12]
 8002c88:	611a      	str	r2, [r3, #16]
 8002c8a:	615a      	str	r2, [r3, #20]
 8002c8c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002c8e:	f006 fa83 	bl	8009198 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f7ff ff80 	bl	8002b98 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <SystemClock_Config+0xb8>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca0:	4a1f      	ldr	r2, [pc, #124]	; (8002d20 <SystemClock_Config+0xb8>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <SystemClock_Config+0xb8>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002cb0:	603b      	str	r3, [r7, #0]
 8002cb2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002cb4:	2347      	movs	r3, #71	; 0x47
 8002cb6:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002cb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002cbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ccc:	2340      	movs	r3, #64	; 0x40
 8002cce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002cd4:	f107 0320 	add.w	r3, r7, #32
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f006 fdf1 	bl	80098c0 <HAL_RCC_OscConfig>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002ce4:	f000 f91c 	bl	8002f20 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002ce8:	236f      	movs	r3, #111	; 0x6f
 8002cea:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002cec:	2302      	movs	r3, #2
 8002cee:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002d00:	2300      	movs	r3, #0
 8002d02:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002d04:	1d3b      	adds	r3, r7, #4
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f007 f94d 	bl	8009fa8 <HAL_RCC_ClockConfig>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d001      	beq.n	8002d18 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002d14:	f000 f904 	bl	8002f20 <Error_Handler>
  }
}
 8002d18:	bf00      	nop
 8002d1a:	3768      	adds	r7, #104	; 0x68
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	58000400 	.word	0x58000400

08002d24 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b094      	sub	sp, #80	; 0x50
 8002d28:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d2a:	463b      	mov	r3, r7
 8002d2c:	2250      	movs	r2, #80	; 0x50
 8002d2e:	2100      	movs	r1, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	f026 fdbf 	bl	80298b4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002d36:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d3a:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002d42:	2302      	movs	r3, #2
 8002d44:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002d46:	2310      	movs	r3, #16
 8002d48:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d4a:	463b      	mov	r3, r7
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f007 fd68 	bl	800a822 <HAL_RCCEx_PeriphCLKConfig>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002d58:	f000 f8e2 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002d5c:	bf00      	nop
 8002d5e:	3750      	adds	r7, #80	; 0x50
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002d68:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <MX_IPCC_Init+0x20>)
 8002d6a:	4a07      	ldr	r2, [pc, #28]	; (8002d88 <MX_IPCC_Init+0x24>)
 8002d6c:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002d6e:	4805      	ldr	r0, [pc, #20]	; (8002d84 <MX_IPCC_Init+0x20>)
 8002d70:	f006 f98c 	bl	800908c <HAL_IPCC_Init>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002d7a:	f000 f8d1 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	200041a4 	.word	0x200041a4
 8002d88:	58000c00 	.word	0x58000c00

08002d8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d90:	4b23      	ldr	r3, [pc, #140]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002d92:	4a24      	ldr	r2, [pc, #144]	; (8002e24 <MX_USART1_UART_Init+0x98>)
 8002d94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002d96:	4b22      	ldr	r3, [pc, #136]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002d98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d9e:	4b20      	ldr	r3, [pc, #128]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002da4:	4b1e      	ldr	r3, [pc, #120]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002daa:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002db0:	4b1b      	ldr	r3, [pc, #108]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002db2:	220c      	movs	r2, #12
 8002db4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002db6:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002dbc:	4b18      	ldr	r3, [pc, #96]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dbe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002dc2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002dca:	4b15      	ldr	r3, [pc, #84]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002dd0:	4b13      	ldr	r3, [pc, #76]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002dd6:	4812      	ldr	r0, [pc, #72]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dd8:	f008 f9bc 	bl	800b154 <HAL_UART_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002de2:	f000 f89d 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002de6:	2100      	movs	r1, #0
 8002de8:	480d      	ldr	r0, [pc, #52]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dea:	f00a fa10 	bl	800d20e <HAL_UARTEx_SetTxFifoThreshold>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002df4:	f000 f894 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8002df8:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8002dfc:	4808      	ldr	r0, [pc, #32]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002dfe:	f00a fa44 	bl	800d28a <HAL_UARTEx_SetRxFifoThreshold>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d001      	beq.n	8002e0c <MX_USART1_UART_Init+0x80>
  {
    Error_Handler();
 8002e08:	f000 f88a 	bl	8002f20 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8002e0c:	4804      	ldr	r0, [pc, #16]	; (8002e20 <MX_USART1_UART_Init+0x94>)
 8002e0e:	f00a f9c3 	bl	800d198 <HAL_UARTEx_EnableFifoMode>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d001      	beq.n	8002e1c <MX_USART1_UART_Init+0x90>
  {
    Error_Handler();
 8002e18:	f000 f882 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002e1c:	bf00      	nop
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	20004274 	.word	0x20004274
 8002e24:	40013800 	.word	0x40013800

08002e28 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002e2c:	bf00      	nop
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002e3c:	4b07      	ldr	r3, [pc, #28]	; (8002e5c <MX_RNG_Init+0x24>)
 8002e3e:	4a08      	ldr	r2, [pc, #32]	; (8002e60 <MX_RNG_Init+0x28>)
 8002e40:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002e42:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <MX_RNG_Init+0x24>)
 8002e44:	2200      	movs	r2, #0
 8002e46:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002e48:	4804      	ldr	r0, [pc, #16]	; (8002e5c <MX_RNG_Init+0x24>)
 8002e4a:	f007 ff71 	bl	800ad30 <HAL_RNG_Init>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002e54:	f000 f864 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002e58:	bf00      	nop
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	200043c8 	.word	0x200043c8
 8002e60:	58001000 	.word	0x58001000

08002e64 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e68:	4b16      	ldr	r3, [pc, #88]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e6a:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <MX_RTC_Init+0x64>)
 8002e6c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002e74:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e76:	220f      	movs	r2, #15
 8002e78:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002e7a:	4b12      	ldr	r3, [pc, #72]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e7c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002e80:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e82:	4b10      	ldr	r3, [pc, #64]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e88:	4b0e      	ldr	r3, [pc, #56]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e94:	4b0b      	ldr	r3, [pc, #44]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e9a:	480a      	ldr	r0, [pc, #40]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002e9c:	f007 ff7e 	bl	800ad9c <HAL_RTC_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002ea6:	f000 f83b 	bl	8002f20 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	4805      	ldr	r0, [pc, #20]	; (8002ec4 <MX_RTC_Init+0x60>)
 8002eb0:	f008 f874 	bl	800af9c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d001      	beq.n	8002ebe <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002eba:	f000 f831 	bl	8002f20 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002ebe:	bf00      	nop
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	200043dc 	.word	0x200043dc
 8002ec8:	40002800 	.word	0x40002800

08002ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002ed0:	2004      	movs	r0, #4
 8002ed2:	f7ff fe77 	bl	8002bc4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002ed6:	2001      	movs	r0, #1
 8002ed8:	f7ff fe74 	bl	8002bc4 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002edc:	2002      	movs	r0, #2
 8002ede:	f7ff fe71 	bl	8002bc4 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	210f      	movs	r1, #15
 8002ee6:	200e      	movs	r0, #14
 8002ee8:	f005 f927 	bl	800813a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002eec:	200e      	movs	r0, #14
 8002eee:	f005 f93e 	bl	800816e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	210f      	movs	r1, #15
 8002ef6:	203a      	movs	r0, #58	; 0x3a
 8002ef8:	f005 f91f 	bl	800813a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002efc:	203a      	movs	r0, #58	; 0x3a
 8002efe:	f005 f936 	bl	800816e <HAL_NVIC_EnableIRQ>

}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f0a:	2004      	movs	r0, #4
 8002f0c:	f7ff fe73 	bl	8002bf6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f10:	2001      	movs	r0, #1
 8002f12:	f7ff fe70 	bl	8002bf6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f16:	2002      	movs	r0, #2
 8002f18:	f7ff fe6d 	bl	8002bf6 <LL_AHB2_GRP1_EnableClock>

}
 8002f1c:	bf00      	nop
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002f24:	bf00      	nop
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <LL_RCC_EnableRTC>:
{
 8002f2e:	b480      	push	{r7}
 8002f30:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002f32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002f46:	bf00      	nop
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <LL_AHB2_GRP1_EnableClock>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f5c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f5e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4313      	orrs	r3, r2
 8002f66:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f68:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4013      	ands	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f74:	68fb      	ldr	r3, [r7, #12]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr

08002f82 <LL_AHB3_GRP1_EnableClock>:
{
 8002f82:	b480      	push	{r7}
 8002f84:	b085      	sub	sp, #20
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f8e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002f90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002f9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
}
 8002fa8:	bf00      	nop
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <LL_APB1_GRP1_EnableClock>:
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002fbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fc0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fc2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002fcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
}
 8002fda:	bf00      	nop
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <LL_APB1_GRP2_EnableClock>:
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002fee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002ff4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002ffe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003002:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4013      	ands	r3, r2
 8003008:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800300a:	68fb      	ldr	r3, [r7, #12]
}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <LL_APB2_GRP1_EnableClock>:
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8003020:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003024:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003026:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4313      	orrs	r3, r2
 800302e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003030:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003034:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4013      	ands	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800303c:	68fb      	ldr	r3, [r7, #12]
}
 800303e:	bf00      	nop
 8003040:	3714      	adds	r7, #20
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 800304e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003052:	f7ff ff96 	bl	8002f82 <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8003056:	2200      	movs	r2, #0
 8003058:	2100      	movs	r1, #0
 800305a:	202e      	movs	r0, #46	; 0x2e
 800305c:	f005 f86d 	bl	800813a <HAL_NVIC_SetPriority>
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8003060:	202e      	movs	r0, #46	; 0x2e
 8003062:	f005 f884 	bl	800816e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003066:	bf00      	nop
 8003068:	bd80      	pop	{r7, pc}
	...

0800306c <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b082      	sub	sp, #8
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a0d      	ldr	r2, [pc, #52]	; (80030b0 <HAL_IPCC_MspInit+0x44>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d113      	bne.n	80030a6 <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 800307e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003082:	f7ff ff7e 	bl	8002f82 <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2100      	movs	r1, #0
 800308a:	202c      	movs	r0, #44	; 0x2c
 800308c:	f005 f855 	bl	800813a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8003090:	202c      	movs	r0, #44	; 0x2c
 8003092:	f005 f86c 	bl	800816e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8003096:	2200      	movs	r2, #0
 8003098:	2100      	movs	r1, #0
 800309a:	202d      	movs	r0, #45	; 0x2d
 800309c:	f005 f84d 	bl	800813a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80030a0:	202d      	movs	r0, #45	; 0x2d
 80030a2:	f005 f864 	bl	800816e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 80030a6:	bf00      	nop
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	58000c00 	.word	0x58000c00

080030b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0a0      	sub	sp, #128	; 0x80
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]
 80030c4:	605a      	str	r2, [r3, #4]
 80030c6:	609a      	str	r2, [r3, #8]
 80030c8:	60da      	str	r2, [r3, #12]
 80030ca:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030cc:	f107 030c 	add.w	r3, r7, #12
 80030d0:	2250      	movs	r2, #80	; 0x50
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f026 fbed 	bl	80298b4 <memset>
  if(huart->Instance==LPUART1)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a68      	ldr	r2, [pc, #416]	; (8003280 <HAL_UART_MspInit+0x1cc>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d16e      	bne.n	80031c2 <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80030e4:	2302      	movs	r3, #2
 80030e6:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80030e8:	2300      	movs	r3, #0
 80030ea:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030ec:	f107 030c 	add.w	r3, r7, #12
 80030f0:	4618      	mov	r0, r3
 80030f2:	f007 fb96 	bl	800a822 <HAL_RCCEx_PeriphCLKConfig>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80030fc:	f7ff ff10 	bl	8002f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8003100:	2001      	movs	r0, #1
 8003102:	f7ff ff70 	bl	8002fe6 <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003106:	2001      	movs	r0, #1
 8003108:	f7ff ff22 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800310c:	230c      	movs	r3, #12
 800310e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003110:	2302      	movs	r3, #2
 8003112:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003118:	2303      	movs	r3, #3
 800311a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 800311c:	2308      	movs	r3, #8
 800311e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003120:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003124:	4619      	mov	r1, r3
 8003126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800312a:	f005 fdd3 	bl	8008cd4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 800312e:	4b55      	ldr	r3, [pc, #340]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003130:	4a55      	ldr	r2, [pc, #340]	; (8003288 <HAL_UART_MspInit+0x1d4>)
 8003132:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8003134:	4b53      	ldr	r3, [pc, #332]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003136:	2211      	movs	r2, #17
 8003138:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800313a:	4b52      	ldr	r3, [pc, #328]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 800313c:	2210      	movs	r2, #16
 800313e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003140:	4b50      	ldr	r3, [pc, #320]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003142:	2200      	movs	r2, #0
 8003144:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003146:	4b4f      	ldr	r3, [pc, #316]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003148:	2280      	movs	r2, #128	; 0x80
 800314a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800314c:	4b4d      	ldr	r3, [pc, #308]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003152:	4b4c      	ldr	r3, [pc, #304]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8003158:	4b4a      	ldr	r3, [pc, #296]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 800315a:	2200      	movs	r2, #0
 800315c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800315e:	4b49      	ldr	r3, [pc, #292]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003160:	2200      	movs	r2, #0
 8003162:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8003164:	4847      	ldr	r0, [pc, #284]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003166:	f005 f847 	bl	80081f8 <HAL_DMA_Init>
 800316a:	4603      	mov	r3, r0
 800316c:	2b00      	cmp	r3, #0
 800316e:	d001      	beq.n	8003174 <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8003170:	f7ff fed6 	bl	8002f20 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8003174:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8003178:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 800317a:	2300      	movs	r3, #0
 800317c:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 800317e:	2300      	movs	r3, #0
 8003180:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 800318a:	2301      	movs	r3, #1
 800318c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 800318e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8003192:	4619      	mov	r1, r3
 8003194:	483b      	ldr	r0, [pc, #236]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 8003196:	f005 fb61 	bl	800885c <HAL_DMAEx_ConfigMuxSync>
 800319a:	4603      	mov	r3, r0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d001      	beq.n	80031a4 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 80031a0:	f7ff febe 	bl	8002f20 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a37      	ldr	r2, [pc, #220]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 80031a8:	67da      	str	r2, [r3, #124]	; 0x7c
 80031aa:	4a36      	ldr	r2, [pc, #216]	; (8003284 <HAL_UART_MspInit+0x1d0>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80031b0:	2200      	movs	r2, #0
 80031b2:	2100      	movs	r1, #0
 80031b4:	2025      	movs	r0, #37	; 0x25
 80031b6:	f004 ffc0 	bl	800813a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80031ba:	2025      	movs	r0, #37	; 0x25
 80031bc:	f004 ffd7 	bl	800816e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80031c0:	e05a      	b.n	8003278 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a31      	ldr	r2, [pc, #196]	; (800328c <HAL_UART_MspInit+0x1d8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d155      	bne.n	8003278 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80031cc:	2301      	movs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80031d0:	2300      	movs	r3, #0
 80031d2:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031d4:	f107 030c 	add.w	r3, r7, #12
 80031d8:	4618      	mov	r0, r3
 80031da:	f007 fb22 	bl	800a822 <HAL_RCCEx_PeriphCLKConfig>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <HAL_UART_MspInit+0x134>
      Error_Handler();
 80031e4:	f7ff fe9c 	bl	8002f20 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031e8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80031ec:	f7ff ff14 	bl	8003018 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80031f0:	2002      	movs	r0, #2
 80031f2:	f7ff fead 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80031f6:	23c0      	movs	r3, #192	; 0xc0
 80031f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003206:	2307      	movs	r3, #7
 8003208:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800320a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800320e:	4619      	mov	r1, r3
 8003210:	481f      	ldr	r0, [pc, #124]	; (8003290 <HAL_UART_MspInit+0x1dc>)
 8003212:	f005 fd5f 	bl	8008cd4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8003216:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003218:	4a1f      	ldr	r2, [pc, #124]	; (8003298 <HAL_UART_MspInit+0x1e4>)
 800321a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 800321c:	4b1d      	ldr	r3, [pc, #116]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 800321e:	220f      	movs	r2, #15
 8003220:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003222:	4b1c      	ldr	r3, [pc, #112]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003224:	2210      	movs	r2, #16
 8003226:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003228:	4b1a      	ldr	r3, [pc, #104]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 800322a:	2200      	movs	r2, #0
 800322c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800322e:	4b19      	ldr	r3, [pc, #100]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003230:	2280      	movs	r2, #128	; 0x80
 8003232:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003234:	4b17      	ldr	r3, [pc, #92]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003236:	2200      	movs	r2, #0
 8003238:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800323a:	4b16      	ldr	r3, [pc, #88]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 800323c:	2200      	movs	r2, #0
 800323e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003242:	2200      	movs	r2, #0
 8003244:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003246:	4b13      	ldr	r3, [pc, #76]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003248:	2200      	movs	r2, #0
 800324a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800324c:	4811      	ldr	r0, [pc, #68]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 800324e:	f004 ffd3 	bl	80081f8 <HAL_DMA_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003258:	f7ff fe62 	bl	8002f20 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	4a0d      	ldr	r2, [pc, #52]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003260:	67da      	str	r2, [r3, #124]	; 0x7c
 8003262:	4a0c      	ldr	r2, [pc, #48]	; (8003294 <HAL_UART_MspInit+0x1e0>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003268:	2200      	movs	r2, #0
 800326a:	2100      	movs	r1, #0
 800326c:	2024      	movs	r0, #36	; 0x24
 800326e:	f004 ff64 	bl	800813a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003272:	2024      	movs	r0, #36	; 0x24
 8003274:	f004 ff7b 	bl	800816e <HAL_NVIC_EnableIRQ>
}
 8003278:	bf00      	nop
 800327a:	3780      	adds	r7, #128	; 0x80
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40008000 	.word	0x40008000
 8003284:	20004308 	.word	0x20004308
 8003288:	40020044 	.word	0x40020044
 800328c:	40013800 	.word	0x40013800
 8003290:	48000400 	.word	0x48000400
 8003294:	20004368 	.word	0x20004368
 8003298:	40020444 	.word	0x40020444

0800329c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b096      	sub	sp, #88	; 0x58
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032a4:	f107 0308 	add.w	r3, r7, #8
 80032a8:	2250      	movs	r2, #80	; 0x50
 80032aa:	2100      	movs	r1, #0
 80032ac:	4618      	mov	r0, r3
 80032ae:	f026 fb01 	bl	80298b4 <memset>
  if(hrng->Instance==RNG)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <HAL_RNG_MspInit+0x50>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d113      	bne.n	80032e4 <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80032bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032c0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80032c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80032c6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032c8:	f107 0308 	add.w	r3, r7, #8
 80032cc:	4618      	mov	r0, r3
 80032ce:	f007 faa8 	bl	800a822 <HAL_RCCEx_PeriphCLKConfig>
 80032d2:	4603      	mov	r3, r0
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d001      	beq.n	80032dc <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80032d8:	f7ff fe22 	bl	8002f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80032dc:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80032e0:	f7ff fe4f 	bl	8002f82 <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80032e4:	bf00      	nop
 80032e6:	3758      	adds	r7, #88	; 0x58
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	58001000 	.word	0x58001000

080032f0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b096      	sub	sp, #88	; 0x58
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032f8:	f107 0308 	add.w	r3, r7, #8
 80032fc:	2250      	movs	r2, #80	; 0x50
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f026 fad7 	bl	80298b4 <memset>
  if(hrtc->Instance==RTC)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a12      	ldr	r2, [pc, #72]	; (8003354 <HAL_RTC_MspInit+0x64>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d11d      	bne.n	800334c <HAL_RTC_MspInit+0x5c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003314:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003316:	f44f 7380 	mov.w	r3, #256	; 0x100
 800331a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800331c:	f107 0308 	add.w	r3, r7, #8
 8003320:	4618      	mov	r0, r3
 8003322:	f007 fa7e 	bl	800a822 <HAL_RCCEx_PeriphCLKConfig>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d001      	beq.n	8003330 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 800332c:	f7ff fdf8 	bl	8002f20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003330:	f7ff fdfd 	bl	8002f2e <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8003334:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003338:	f7ff fe3c 	bl	8002fb4 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 800333c:	2200      	movs	r2, #0
 800333e:	2100      	movs	r1, #0
 8003340:	2003      	movs	r0, #3
 8003342:	f004 fefa 	bl	800813a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 8003346:	2003      	movs	r0, #3
 8003348:	f004 ff11 	bl	800816e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800334c:	bf00      	nop
 800334e:	3758      	adds	r7, #88	; 0x58
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40002800 	.word	0x40002800

08003358 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800335c:	bf00      	nop
 800335e:	46bd      	mov	sp, r7
 8003360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003364:	4770      	bx	lr
	...

08003368 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  BSP_LED_On(LED_RED);
 800336c:	2002      	movs	r0, #2
 800336e:	f004 fbd7 	bl	8007b20 <BSP_LED_On>
#ifndef DISABLE_TRACES
  printf("HARDFAULT !\r\n");
 8003372:	4802      	ldr	r0, [pc, #8]	; (800337c <HardFault_Handler+0x14>)
 8003374:	f026 f966 	bl	8029644 <puts>
#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003378:	e7fe      	b.n	8003378 <HardFault_Handler+0x10>
 800337a:	bf00      	nop
 800337c:	0802d22c 	.word	0x0802d22c

08003380 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003380:	b480      	push	{r7}
 8003382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003384:	e7fe      	b.n	8003384 <MemManage_Handler+0x4>

08003386 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800338a:	e7fe      	b.n	800338a <BusFault_Handler+0x4>

0800338c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003390:	e7fe      	b.n	8003390 <UsageFault_Handler+0x4>

08003392 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003392:	b480      	push	{r7}
 8003394:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003396:	bf00      	nop
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033c0:	f004 fd3c 	bl	8007e3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033c4:	bf00      	nop
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 80033cc:	f7fe fffa 	bl	80023c4 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 80033d0:	bf00      	nop
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <DMA1_Channel4_IRQHandler+0x10>)
 80033da:	f005 f8ee 	bl	80085ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80033de:	bf00      	nop
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20004308 	.word	0x20004308

080033e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80033ec:	4802      	ldr	r0, [pc, #8]	; (80033f8 <USART1_IRQHandler+0x10>)
 80033ee:	f007 ffcd 	bl	800b38c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80033f2:	bf00      	nop
 80033f4:	bd80      	pop	{r7, pc}
 80033f6:	bf00      	nop
 80033f8:	20004274 	.word	0x20004274

080033fc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8003400:	4802      	ldr	r0, [pc, #8]	; (800340c <LPUART1_IRQHandler+0x10>)
 8003402:	f007 ffc3 	bl	800b38c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	200041e0 	.word	0x200041e0

08003410 <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 8003414:	f004 f9bc 	bl	8007790 <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 8003420:	f004 f9ec 	bl	80077fc <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 8003424:	bf00      	nop
 8003426:	bd80      	pop	{r7, pc}

08003428 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 800342c:	f005 fe0a 	bl	8009044 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	bd80      	pop	{r7, pc}

08003434 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003438:	4802      	ldr	r0, [pc, #8]	; (8003444 <DMA2_Channel4_IRQHandler+0x10>)
 800343a:	f005 f8be 	bl	80085ba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 800343e:	bf00      	nop
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	20004368 	.word	0x20004368

08003448 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 800344c:	2010      	movs	r0, #16
 800344e:	f005 fde1 	bl	8009014 <HAL_GPIO_EXTI_IRQHandler>
}
 8003452:	bf00      	nop
 8003454:	bd80      	pop	{r7, pc}

08003456 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 800345a:	2001      	movs	r0, #1
 800345c:	f005 fdda 	bl	8009014 <HAL_GPIO_EXTI_IRQHandler>
}
 8003460:	bf00      	nop
 8003462:	bd80      	pop	{r7, pc}

08003464 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8003468:	2002      	movs	r0, #2
 800346a:	f005 fdd3 	bl	8009014 <HAL_GPIO_EXTI_IRQHandler>
}
 800346e:	bf00      	nop
 8003470:	bd80      	pop	{r7, pc}

08003472 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003472:	b480      	push	{r7}
 8003474:	af00      	add	r7, sp, #0
  return 1;
 8003476:	2301      	movs	r3, #1
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <_kill>:

int _kill(int pid, int sig)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800348c:	f026 fa76 	bl	802997c <__errno>
 8003490:	4603      	mov	r3, r0
 8003492:	2216      	movs	r2, #22
 8003494:	601a      	str	r2, [r3, #0]
  return -1;
 8003496:	f04f 33ff 	mov.w	r3, #4294967295
}
 800349a:	4618      	mov	r0, r3
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <_exit>:

void _exit (int status)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b082      	sub	sp, #8
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80034aa:	f04f 31ff 	mov.w	r1, #4294967295
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7ff ffe7 	bl	8003482 <_kill>
  while (1) {}    /* Make sure we hang here */
 80034b4:	e7fe      	b.n	80034b4 <_exit+0x12>

080034b6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b086      	sub	sp, #24
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034c2:	2300      	movs	r3, #0
 80034c4:	617b      	str	r3, [r7, #20]
 80034c6:	e00a      	b.n	80034de <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034c8:	f3af 8000 	nop.w
 80034cc:	4601      	mov	r1, r0
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	1c5a      	adds	r2, r3, #1
 80034d2:	60ba      	str	r2, [r7, #8]
 80034d4:	b2ca      	uxtb	r2, r1
 80034d6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	3301      	adds	r3, #1
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	697a      	ldr	r2, [r7, #20]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dbf0      	blt.n	80034c8 <_read+0x12>
  }

  return len;
 80034e6:	687b      	ldr	r3, [r7, #4]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3718      	adds	r7, #24
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
 8003510:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003518:	605a      	str	r2, [r3, #4]
  return 0;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <_isatty>:

int _isatty(int file)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003530:	2301      	movs	r3, #1
}
 8003532:	4618      	mov	r0, r3
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003560:	4a14      	ldr	r2, [pc, #80]	; (80035b4 <_sbrk+0x5c>)
 8003562:	4b15      	ldr	r3, [pc, #84]	; (80035b8 <_sbrk+0x60>)
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800356c:	4b13      	ldr	r3, [pc, #76]	; (80035bc <_sbrk+0x64>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d102      	bne.n	800357a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003574:	4b11      	ldr	r3, [pc, #68]	; (80035bc <_sbrk+0x64>)
 8003576:	4a12      	ldr	r2, [pc, #72]	; (80035c0 <_sbrk+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800357a:	4b10      	ldr	r3, [pc, #64]	; (80035bc <_sbrk+0x64>)
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	429a      	cmp	r2, r3
 8003586:	d207      	bcs.n	8003598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003588:	f026 f9f8 	bl	802997c <__errno>
 800358c:	4603      	mov	r3, r0
 800358e:	220c      	movs	r2, #12
 8003590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003592:	f04f 33ff 	mov.w	r3, #4294967295
 8003596:	e009      	b.n	80035ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003598:	4b08      	ldr	r3, [pc, #32]	; (80035bc <_sbrk+0x64>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800359e:	4b07      	ldr	r3, [pc, #28]	; (80035bc <_sbrk+0x64>)
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	4a05      	ldr	r2, [pc, #20]	; (80035bc <_sbrk+0x64>)
 80035a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80035aa:	68fb      	ldr	r3, [r7, #12]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3718      	adds	r7, #24
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	20030000 	.word	0x20030000
 80035b8:	00001000 	.word	0x00001000
 80035bc:	20004400 	.word	0x20004400
 80035c0:	20008108 	.word	0x20008108

080035c4 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 80035c8:	4b03      	ldr	r3, [pc, #12]	; (80035d8 <LL_FLASH_GetUDN+0x14>)
 80035ca:	681b      	ldr	r3, [r3, #0]
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	1fff7580 	.word	0x1fff7580

080035dc <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80035dc:	b480      	push	{r7}
 80035de:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <LL_FLASH_GetDeviceID+0x14>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	1fff7584 	.word	0x1fff7584

080035f4 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 80035f4:	b480      	push	{r7}
 80035f6:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 80035f8:	4b03      	ldr	r3, [pc, #12]	; (8003608 <LL_FLASH_GetSTCompanyID+0x14>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	0a1b      	lsrs	r3, r3, #8
}
 80035fe:	4618      	mov	r0, r3
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr
 8003608:	1fff7584 	.word	0x1fff7584

0800360c <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init( void )
{
 800360c:	b5b0      	push	{r4, r5, r7, lr}
 800360e:	b096      	sub	sp, #88	; 0x58
 8003610:	af04      	add	r7, sp, #16
  SHCI_CmdStatus_t status;
/* USER CODE BEGIN APP_BLE_Init_1 */

/* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 8003612:	4b3a      	ldr	r3, [pc, #232]	; (80036fc <APP_BLE_Init+0xf0>)
 8003614:	1d3c      	adds	r4, r7, #4
 8003616:	461d      	mov	r5, r3
 8003618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800361a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800361c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800361e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003628:	c403      	stmia	r4!, {r0, r1}
 800362a:	8022      	strh	r2, [r4, #0]
  };

  /**
     * Initialize Ble Transport Layer
   */
  Ble_Tl_Init( );
 800362c:	f000 f880 	bl	8003730 <Ble_Tl_Init>

#if (CFG_LPM_STANDBY_SUPPORTED == 0)
  UTIL_LPM_SetOffMode(1U << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8003630:	2101      	movs	r1, #1
 8003632:	2002      	movs	r0, #2
 8003634:	f013 f9b0 	bl	8016998 <UTIL_LPM_SetOffMode>

  /**
   * Do not allow stop mode in the application
   */
#if (LOW_POWER_FEATURE == 0)
  UTIL_LPM_SetStopMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 8003638:	2101      	movs	r1, #1
 800363a:	2002      	movs	r0, #2
 800363c:	f013 f97c 	bl	8016938 <UTIL_LPM_SetStopMode>
#endif

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 8003640:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <APP_BLE_Init+0xf4>)
 8003642:	2100      	movs	r1, #0
 8003644:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003648:	f013 fad2 	bl	8016bf0 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	4618      	mov	r0, r3
 8003650:	f012 fa5b 	bl	8015b0a <SHCI_C2_BLE_Init>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  if (status != SHCI_Success)
 800365a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800365e:	2b00      	cmp	r3, #0
 8003660:	d008      	beq.n	8003674 <APP_BLE_Init+0x68>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 8003662:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003666:	4619      	mov	r1, r3
 8003668:	4826      	ldr	r0, [pc, #152]	; (8003704 <APP_BLE_Init+0xf8>)
 800366a:	f025 ff85 	bl	8029578 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 800366e:	f7ff fc57 	bl	8002f20 <Error_Handler>
 8003672:	e002      	b.n	800367a <APP_BLE_Init+0x6e>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 8003674:	4824      	ldr	r0, [pc, #144]	; (8003708 <APP_BLE_Init+0xfc>)
 8003676:	f025 ff7f 	bl	8029578 <iprintf>
  /**
   * Initialization of HCI & GATT & GAP layer
   */
  {
    const uint8_t *p_bd_addr;
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800367a:	2392      	movs	r3, #146	; 0x92
 800367c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    /**
     * Write the BD Address
     */
    p_bd_addr = BleGetBdAddress();
 8003680:	f000 f86c 	bl	800375c <BleGetBdAddress>
 8003684:	6438      	str	r0, [r7, #64]	; 0x40
    ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8003686:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003688:	2106      	movs	r1, #6
 800368a:	2000      	movs	r0, #0
 800368c:	f011 fe0d 	bl	80152aa <aci_hal_write_config_data>
 8003690:	4603      	mov	r3, r0
 8003692:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    if (ret != BLE_STATUS_SUCCESS)
 8003696:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800369a:	2b00      	cmp	r3, #0
 800369c:	d006      	beq.n	80036ac <APP_BLE_Init+0xa0>
    {
      APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 800369e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80036a2:	4619      	mov	r1, r3
 80036a4:	4819      	ldr	r0, [pc, #100]	; (800370c <APP_BLE_Init+0x100>)
 80036a6:	f025 ff67 	bl	8029578 <iprintf>
 80036aa:	e021      	b.n	80036f0 <APP_BLE_Init+0xe4>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 80036ac:	4818      	ldr	r0, [pc, #96]	; (8003710 <APP_BLE_Init+0x104>)
 80036ae:	f025 ffc9 	bl	8029644 <puts>
      APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 80036b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036b4:	3305      	adds	r3, #5
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4618      	mov	r0, r3
 80036ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036bc:	3304      	adds	r3, #4
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	461c      	mov	r4, r3
 80036c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036c4:	3303      	adds	r3, #3
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	461d      	mov	r5, r3
 80036ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036cc:	3302      	adds	r3, #2
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036d4:	3301      	adds	r3, #1
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	4619      	mov	r1, r3
 80036da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	9302      	str	r3, [sp, #8]
 80036e0:	9101      	str	r1, [sp, #4]
 80036e2:	9200      	str	r2, [sp, #0]
 80036e4:	462b      	mov	r3, r5
 80036e6:	4622      	mov	r2, r4
 80036e8:	4601      	mov	r1, r0
 80036ea:	480a      	ldr	r0, [pc, #40]	; (8003714 <APP_BLE_Init+0x108>)
 80036ec:	f025 ff44 	bl	8029578 <iprintf>
    }
  }
  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 80036f0:	f010 f9d6 	bl	8013aa0 <SVCCTL_Init>

/* USER CODE BEGIN APP_BLE_Init_2 */

/* USER CODE END APP_BLE_Init_2 */

  return;
 80036f4:	bf00      	nop
}
 80036f6:	3748      	adds	r7, #72	; 0x48
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bdb0      	pop	{r4, r5, r7, pc}
 80036fc:	0802d380 	.word	0x0802d380
 8003700:	08015d59 	.word	0x08015d59
 8003704:	0802d23c 	.word	0x0802d23c
 8003708:	0802d274 	.word	0x0802d274
 800370c:	0802d29c 	.word	0x0802d29c
 8003710:	0802d2f8 	.word	0x0802d2f8
 8003714:	0802d344 	.word	0x0802d344

08003718 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification( void *p_Pckt )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* callback of mesh Library to receive all GAP/GATT events*/  
  HCI_Event_CB(p_Pckt);
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	f01b ff7b 	bl	801f61c <HCI_Event_CB>

#if (LOW_POWER_FEATURE == 1)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
#endif

  return (SVCCTL_UserEvtFlowEnable);
 8003726:	2301      	movs	r3, #1
}
 8003728:	4618      	mov	r0, r3
 800372a:	3708      	adds	r7, #8
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}

08003730 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init( void )
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003736:	4b06      	ldr	r3, [pc, #24]	; (8003750 <Ble_Tl_Init+0x20>)
 8003738:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <Ble_Tl_Init+0x24>)
 800373c:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 800373e:	463b      	mov	r3, r7
 8003740:	4619      	mov	r1, r3
 8003742:	4805      	ldr	r0, [pc, #20]	; (8003758 <Ble_Tl_Init+0x28>)
 8003744:	f012 faec 	bl	8015d20 <hci_init>

  return;
 8003748:	bf00      	nop
}
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	20030028 	.word	0x20030028
 8003754:	08003863 	.word	0x08003863
 8003758:	0800382b 	.word	0x0800382b

0800375c <BleGetBdAddress>:

const uint8_t* BleGetBdAddress( void )
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 8003762:	f7ff ff2f 	bl	80035c4 <LL_FLASH_GetUDN>
 8003766:	6138      	str	r0, [r7, #16]

  if(udn != 0xFFFFFFFF)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d023      	beq.n	80037b8 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 8003770:	f7ff ff40 	bl	80035f4 <LL_FLASH_GetSTCompanyID>
 8003774:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 8003776:	f7ff ff31 	bl	80035dc <LL_FLASH_GetDeviceID>
 800377a:	6078      	str	r0, [r7, #4]
 * bit[23:16] : Device ID.
 * bit[15:0] : The last 16bits from the UDN
 * Note: In order to use the Public Address in a final product, a dedicated
 * 24bits company ID (OUI) shall be bought.
 */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	b2da      	uxtb	r2, r3
 8003780:	4b16      	ldr	r3, [pc, #88]	; (80037dc <BleGetBdAddress+0x80>)
 8003782:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)( (udn & 0x0000FF00) >> 8 );
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	0a1b      	lsrs	r3, r3, #8
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b14      	ldr	r3, [pc, #80]	; (80037dc <BleGetBdAddress+0x80>)
 800378c:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	b2da      	uxtb	r2, r3
 8003792:	4b12      	ldr	r3, [pc, #72]	; (80037dc <BleGetBdAddress+0x80>)
 8003794:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	b2da      	uxtb	r2, r3
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <BleGetBdAddress+0x80>)
 800379c:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)( (company_id & 0x0000FF00) >> 8 );
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	b2da      	uxtb	r2, r3
 80037a4:	4b0d      	ldr	r3, [pc, #52]	; (80037dc <BleGetBdAddress+0x80>)
 80037a6:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)( (company_id & 0x00FF0000) >> 16 );
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <BleGetBdAddress+0x80>)
 80037b0:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 80037b2:	4b0a      	ldr	r3, [pc, #40]	; (80037dc <BleGetBdAddress+0x80>)
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	e00b      	b.n	80037d0 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 80037b8:	2000      	movs	r0, #0
 80037ba:	f013 f883 	bl	80168c4 <OTP_Read>
 80037be:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	617b      	str	r3, [r7, #20]
 80037ca:	e001      	b.n	80037d0 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <BleGetBdAddress+0x84>)
 80037ce:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 80037d0:	697b      	ldr	r3, [r7, #20]
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	20004404 	.word	0x20004404
 80037e0:	0803268c 	.word	0x0803268c

080037e4 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b082      	sub	sp, #8
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask( 1<<CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80037ec:	2100      	movs	r1, #0
 80037ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80037f2:	f013 fa1f 	bl	8016c34 <UTIL_SEQ_SetTask>

  return;
 80037f6:	bf00      	nop
}
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <hci_cmd_resp_release>:
#if (LOW_POWER_FEATURE == 1)
static volatile uint8_t HciResponse = 0;
#endif

void hci_cmd_resp_release(uint32_t Flag)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 8003806:	2001      	movs	r0, #1
 8003808:	f013 fa80 	bl	8016d0c <UTIL_SEQ_SetEvt>
#else
  HciResponse = 1;
#endif
  return;
 800380c:	bf00      	nop
}
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b082      	sub	sp, #8
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 800381c:	2001      	movs	r0, #1
 800381e:	f013 fa95 	bl	8016d4c <UTIL_SEQ_WaitEvt>
#else
  while(HciResponse == 0);
  HciResponse = 0;
#endif  
  return;
 8003822:	bf00      	nop
}
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <BLE_UserEvtRx>:

static void BLE_UserEvtRx( void * p_Payload )
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b084      	sub	sp, #16
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	60fb      	str	r3, [r7, #12]
  
  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	3308      	adds	r3, #8
 800383c:	4618      	mov	r0, r3
 800383e:	f010 f967 	bl	8013b10 <SVCCTL_UserEvtRx>
 8003842:	4603      	mov	r3, r0
 8003844:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8003846:	7afb      	ldrb	r3, [r7, #11]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2201      	movs	r2, #1
 8003850:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8003852:	e003      	b.n	800385c <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2200      	movs	r2, #0
 8003858:	701a      	strb	r2, [r3, #0]
  return;
 800385a:	bf00      	nop
}
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}

08003862 <BLE_StatusNot>:

static void BLE_StatusNot( HCI_TL_CmdStatus_t Status )
{
 8003862:	b580      	push	{r7, lr}
 8003864:	b084      	sub	sp, #16
 8003866:	af00      	add	r7, sp, #0
 8003868:	4603      	mov	r3, r0
 800386a:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800386c:	79fb      	ldrb	r3, [r7, #7]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d002      	beq.n	8003878 <BLE_StatusNot+0x16>
 8003872:	2b01      	cmp	r3, #1
 8003874:	d007      	beq.n	8003886 <BLE_StatusNot+0x24>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8003876:	e00d      	b.n	8003894 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003878:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800387c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f013 fa04 	bl	8016c8c <UTIL_SEQ_PauseTask>
      break;
 8003884:	e006      	b.n	8003894 <BLE_StatusNot+0x32>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8003886:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800388a:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800388c:	68f8      	ldr	r0, [r7, #12]
 800388e:	f013 fa1d 	bl	8016ccc <UTIL_SEQ_ResumeTask>
      break;
 8003892:	bf00      	nop
  }

  return;
 8003894:	bf00      	nop
}
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <Appli_GetAppKeyAddParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyAddParamsCb(model_securityKeyParams_t* appKeyAddParams)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey Add received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	4619      	mov	r1, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	885b      	ldrh	r3, [r3, #2]
 80038ae:	461a      	mov	r2, r3
 80038b0:	4816      	ldr	r0, [pc, #88]	; (800390c <Appli_GetAppKeyAddParamsCb+0x70>)
 80038b2:	f025 fe61 	bl	8029578 <iprintf>
          appKeyAddParams->netKeyIndex, appKeyAddParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyAddParams->status);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	7b5b      	ldrb	r3, [r3, #13]
 80038ba:	4619      	mov	r1, r3
 80038bc:	4814      	ldr	r0, [pc, #80]	; (8003910 <Appli_GetAppKeyAddParamsCb+0x74>)
 80038be:	f025 fe5b 	bl	8029578 <iprintf>
  /*Success Command*/
  if(appKeyAddParams->status == 0x00)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	7b5b      	ldrb	r3, [r3, #13]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11c      	bne.n	8003904 <Appli_GetAppKeyAddParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey is: ");
 80038ca:	4812      	ldr	r0, [pc, #72]	; (8003914 <Appli_GetAppKeyAddParamsCb+0x78>)
 80038cc:	f025 fe54 	bl	8029578 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 80038d0:	2300      	movs	r3, #0
 80038d2:	73fb      	strb	r3, [r7, #15]
 80038d4:	e00e      	b.n	80038f4 <Appli_GetAppKeyAddParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyAddParams->appKey));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	4619      	mov	r1, r3
 80038de:	480e      	ldr	r0, [pc, #56]	; (8003918 <Appli_GetAppKeyAddParamsCb+0x7c>)
 80038e0:	f025 fe4a 	bl	8029578 <iprintf>
      appKeyAddParams->appKey++;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	1c5a      	adds	r2, r3, #1
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyAddParams->keySize; count++)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	3301      	adds	r3, #1
 80038f2:	73fb      	strb	r3, [r7, #15]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	7b1b      	ldrb	r3, [r3, #12]
 80038f8:	7bfa      	ldrb	r2, [r7, #15]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d3eb      	bcc.n	80038d6 <Appli_GetAppKeyAddParamsCb+0x3a>
    }  
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 80038fe:	4807      	ldr	r0, [pc, #28]	; (800391c <Appli_GetAppKeyAddParamsCb+0x80>)
 8003900:	f025 fea0 	bl	8029644 <puts>
  }
}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	0802d3bc 	.word	0x0802d3bc
 8003910:	0802d3fc 	.word	0x0802d3fc
 8003914:	0802d410 	.word	0x0802d410
 8003918:	0802d41c 	.word	0x0802d41c
 800391c:	0802d424 	.word	0x0802d424

08003920 <Appli_GetAppKeyDeleteParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyDeleteParamsCb(model_securityKeyParams_t* appKeyDeleteParams)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Delete received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	881b      	ldrh	r3, [r3, #0]
 800392c:	4619      	mov	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	885b      	ldrh	r3, [r3, #2]
 8003932:	461a      	mov	r2, r3
 8003934:	4806      	ldr	r0, [pc, #24]	; (8003950 <Appli_GetAppKeyDeleteParamsCb+0x30>)
 8003936:	f025 fe1f 	bl	8029578 <iprintf>
          appKeyDeleteParams->netKeyIndex, appKeyDeleteParams->appKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyDeleteParams->status);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	7b5b      	ldrb	r3, [r3, #13]
 800393e:	4619      	mov	r1, r3
 8003940:	4804      	ldr	r0, [pc, #16]	; (8003954 <Appli_GetAppKeyDeleteParamsCb+0x34>)
 8003942:	f025 fe19 	bl	8029578 <iprintf>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	0802d428 	.word	0x0802d428
 8003954:	0802d3fc 	.word	0x0802d3fc

08003958 <Appli_GetAppKeyListParamsCb>:
* @brief  Callback from Config Model to receive the AppKey List
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndexes & appKeyListParams Size
* @retval none
*/ 
void Appli_GetAppKeyListParamsCb(model_appKeyListParams_t* appKeyListParams)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b084      	sub	sp, #16
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key List for netKeyIndex %.2x is \r\n", appKeyListParams->netKeyIndex);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	881b      	ldrh	r3, [r3, #0]
 8003964:	4619      	mov	r1, r3
 8003966:	4817      	ldr	r0, [pc, #92]	; (80039c4 <Appli_GetAppKeyListParamsCb+0x6c>)
 8003968:	f025 fe06 	bl	8029578 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyListParams->status);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	7a9b      	ldrb	r3, [r3, #10]
 8003970:	4619      	mov	r1, r3
 8003972:	4815      	ldr	r0, [pc, #84]	; (80039c8 <Appli_GetAppKeyListParamsCb+0x70>)
 8003974:	f025 fe00 	bl	8029578 <iprintf>
  /*Success*/
  if(appKeyListParams->status == 0x00)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	7a9b      	ldrb	r3, [r3, #10]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d11d      	bne.n	80039bc <Appli_GetAppKeyListParamsCb+0x64>
  {
    TRACE_I(TF_CONFIG_SERVER,"AppKey Indexes are: \r\n");
 8003980:	4812      	ldr	r0, [pc, #72]	; (80039cc <Appli_GetAppKeyListParamsCb+0x74>)
 8003982:	f025 fe5f 	bl	8029644 <puts>
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 8003986:	2300      	movs	r3, #0
 8003988:	73fb      	strb	r3, [r7, #15]
 800398a:	e00e      	b.n	80039aa <Appli_GetAppKeyListParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyListParams->appKeyIndexList));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	881b      	ldrh	r3, [r3, #0]
 8003992:	4619      	mov	r1, r3
 8003994:	480e      	ldr	r0, [pc, #56]	; (80039d0 <Appli_GetAppKeyListParamsCb+0x78>)
 8003996:	f025 fdef 	bl	8029578 <iprintf>
      appKeyListParams->appKeyIndexList++;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	1c9a      	adds	r2, r3, #2
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count< appKeyListParams->appKeyIndexList_size; count++)
 80039a4:	7bfb      	ldrb	r3, [r7, #15]
 80039a6:	3301      	adds	r3, #1
 80039a8:	73fb      	strb	r3, [r7, #15]
 80039aa:	7bfb      	ldrb	r3, [r7, #15]
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	891b      	ldrh	r3, [r3, #8]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d3ea      	bcc.n	800398c <Appli_GetAppKeyListParamsCb+0x34>
    }  
   TRACE_I(TF_CONFIG_SERVER," \r\n");
 80039b6:	4807      	ldr	r0, [pc, #28]	; (80039d4 <Appli_GetAppKeyListParamsCb+0x7c>)
 80039b8:	f025 fe44 	bl	8029644 <puts>
  }
}
 80039bc:	bf00      	nop
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	0802d46c 	.word	0x0802d46c
 80039c8:	0802d3fc 	.word	0x0802d3fc
 80039cc:	0802d494 	.word	0x0802d494
 80039d0:	0802d41c 	.word	0x0802d41c
 80039d4:	0802d424 	.word	0x0802d424

080039d8 <Appli_GetAppKeyUpdateParamsCb>:
* @param  Structure Pointer having parameters - netKeyIndex, appKeyIndex
*                                               appKey, keySize & status
* @retval none
*/ 
void Appli_GetAppKeyUpdateParamsCb(model_securityKeyParams_t* appKeyUpdatedParams)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"App Key Update received for netKeyIndex %.2x, appKeyIndex %.2x \r\n",\
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	881b      	ldrh	r3, [r3, #0]
 80039e4:	4619      	mov	r1, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	885b      	ldrh	r3, [r3, #2]
 80039ea:	461a      	mov	r2, r3
 80039ec:	4818      	ldr	r0, [pc, #96]	; (8003a50 <Appli_GetAppKeyUpdateParamsCb+0x78>)
 80039ee:	f025 fdc3 	bl	8029578 <iprintf>
          appKeyUpdatedParams->netKeyIndex, appKeyUpdatedParams->appKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", appKeyUpdatedParams->status);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	7b5b      	ldrb	r3, [r3, #13]
 80039f6:	4619      	mov	r1, r3
 80039f8:	4816      	ldr	r0, [pc, #88]	; (8003a54 <Appli_GetAppKeyUpdateParamsCb+0x7c>)
 80039fa:	f025 fdbd 	bl	8029578 <iprintf>
  
  /*Success Command*/
  if(appKeyUpdatedParams->status == 0x00)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	7b5b      	ldrb	r3, [r3, #13]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d11f      	bne.n	8003a46 <Appli_GetAppKeyUpdateParamsCb+0x6e>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated AppKey is: ");
 8003a06:	4814      	ldr	r0, [pc, #80]	; (8003a58 <Appli_GetAppKeyUpdateParamsCb+0x80>)
 8003a08:	f025 fdb6 	bl	8029578 <iprintf>
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
 8003a10:	e00e      	b.n	8003a30 <Appli_GetAppKeyUpdateParamsCb+0x58>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(appKeyUpdatedParams->appKey));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4810      	ldr	r0, [pc, #64]	; (8003a5c <Appli_GetAppKeyUpdateParamsCb+0x84>)
 8003a1c:	f025 fdac 	bl	8029578 <iprintf>
      appKeyUpdatedParams->appKey++;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	609a      	str	r2, [r3, #8]
    for (MOBLEUINT8 count=0 ; count<appKeyUpdatedParams->keySize; count++)
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7b1b      	ldrb	r3, [r3, #12]
 8003a34:	7bfa      	ldrb	r2, [r7, #15]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d3eb      	bcc.n	8003a12 <Appli_GetAppKeyUpdateParamsCb+0x3a>
    }
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003a3a:	4809      	ldr	r0, [pc, #36]	; (8003a60 <Appli_GetAppKeyUpdateParamsCb+0x88>)
 8003a3c:	f025 fe02 	bl	8029644 <puts>
    TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old appKey after Key Refresh \r\n");
 8003a40:	4808      	ldr	r0, [pc, #32]	; (8003a64 <Appli_GetAppKeyUpdateParamsCb+0x8c>)
 8003a42:	f025 fdff 	bl	8029644 <puts>
  }
  
}
 8003a46:	bf00      	nop
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	0802d4ac 	.word	0x0802d4ac
 8003a54:	0802d3fc 	.word	0x0802d3fc
 8003a58:	0802d4f0 	.word	0x0802d4f0
 8003a5c:	0802d41c 	.word	0x0802d41c
 8003a60:	0802d424 	.word	0x0802d424
 8003a64:	0802d504 	.word	0x0802d504

08003a68 <Appli_GetNetKeyAddParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Add Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyAddParamsCb(model_securityKeyParams_t* netKeyAddParams)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Add received for netKeyIndex %.2x \r\n",\
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	4619      	mov	r1, r3
 8003a76:	4817      	ldr	r0, [pc, #92]	; (8003ad4 <Appli_GetNetKeyAddParamsCb+0x6c>)
 8003a78:	f025 fd7e 	bl	8029578 <iprintf>
                                               netKeyAddParams->netKeyIndex);

  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyAddParams->status);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	7b5b      	ldrb	r3, [r3, #13]
 8003a80:	4619      	mov	r1, r3
 8003a82:	4815      	ldr	r0, [pc, #84]	; (8003ad8 <Appli_GetNetKeyAddParamsCb+0x70>)
 8003a84:	f025 fd78 	bl	8029578 <iprintf>

  /*Success Command*/
  if(netKeyAddParams->status == 0x00)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	7b5b      	ldrb	r3, [r3, #13]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11c      	bne.n	8003aca <Appli_GetNetKeyAddParamsCb+0x62>
  {
    TRACE_I(TF_CONFIG_SERVER,"NetKey is: ");
 8003a90:	4812      	ldr	r0, [pc, #72]	; (8003adc <Appli_GetNetKeyAddParamsCb+0x74>)
 8003a92:	f025 fd71 	bl	8029578 <iprintf>
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	73fb      	strb	r3, [r7, #15]
 8003a9a:	e00e      	b.n	8003aba <Appli_GetNetKeyAddParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyAddParams->netKey));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	480e      	ldr	r0, [pc, #56]	; (8003ae0 <Appli_GetNetKeyAddParamsCb+0x78>)
 8003aa6:	f025 fd67 	bl	8029578 <iprintf>
      netKeyAddParams->netKey++;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0 ; count < netKeyAddParams->keySize; count++)
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	73fb      	strb	r3, [r7, #15]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	7b1b      	ldrb	r3, [r3, #12]
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d3eb      	bcc.n	8003a9c <Appli_GetNetKeyAddParamsCb+0x34>
    } 
    TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003ac4:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <Appli_GetNetKeyAddParamsCb+0x7c>)
 8003ac6:	f025 fdbd 	bl	8029644 <puts>
  }
}
 8003aca:	bf00      	nop
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	0802d53c 	.word	0x0802d53c
 8003ad8:	0802d3fc 	.word	0x0802d3fc
 8003adc:	0802d56c 	.word	0x0802d56c
 8003ae0:	0802d41c 	.word	0x0802d41c
 8003ae4:	0802d424 	.word	0x0802d424

08003ae8 <Appli_GetNetKeyDeleteParamsCb>:
* @brief  Callback from Config Model to receive the NetKey Delete Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyDeleteParamsCb(model_securityKeyParams_t* netKeyDeleteParams)
{ 
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
   TRACE_I(TF_CONFIG_SERVER,"Net Key Delete received for netKeyIndex %d \r\n",\
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	4619      	mov	r1, r3
 8003af6:	4806      	ldr	r0, [pc, #24]	; (8003b10 <Appli_GetNetKeyDeleteParamsCb+0x28>)
 8003af8:	f025 fd3e 	bl	8029578 <iprintf>
                                               netKeyDeleteParams->netKeyIndex);
   TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyDeleteParams->status);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7b5b      	ldrb	r3, [r3, #13]
 8003b00:	4619      	mov	r1, r3
 8003b02:	4804      	ldr	r0, [pc, #16]	; (8003b14 <Appli_GetNetKeyDeleteParamsCb+0x2c>)
 8003b04:	f025 fd38 	bl	8029578 <iprintf>
}
 8003b08:	bf00      	nop
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	0802d578 	.word	0x0802d578
 8003b14:	0802d3fc 	.word	0x0802d3fc

08003b18 <Appli_GetNetKeyListParamsCb>:
* @brief  Callback from Config Model to receive the NetKey List
* @param  Structure Pointer having parameters - netKeyIndexes & netKeyListParams Size
* @retval none
*/ 
void Appli_GetNetKeyListParamsCb(model_netKeyListParams_t* netKeyListParams)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyListParams->status);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	799b      	ldrb	r3, [r3, #6]
 8003b24:	4619      	mov	r1, r3
 8003b26:	4812      	ldr	r0, [pc, #72]	; (8003b70 <Appli_GetNetKeyListParamsCb+0x58>)
 8003b28:	f025 fd26 	bl	8029578 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"NetKey Indexes are: \r\n");
 8003b2c:	4811      	ldr	r0, [pc, #68]	; (8003b74 <Appli_GetNetKeyListParamsCb+0x5c>)
 8003b2e:	f025 fd89 	bl	8029644 <puts>
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003b32:	2300      	movs	r3, #0
 8003b34:	73fb      	strb	r3, [r7, #15]
 8003b36:	e00e      	b.n	8003b56 <Appli_GetNetKeyListParamsCb+0x3e>
  {
    TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyListParams->netKeyIndexList));
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	4619      	mov	r1, r3
 8003b40:	480d      	ldr	r0, [pc, #52]	; (8003b78 <Appli_GetNetKeyListParamsCb+0x60>)
 8003b42:	f025 fd19 	bl	8029578 <iprintf>
    netKeyListParams->netKeyIndexList++;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	1c9a      	adds	r2, r3, #2
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	601a      	str	r2, [r3, #0]
  for (MOBLEUINT8 count=0 ; count< netKeyListParams->netKeyIndexList_size; count++)
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	3301      	adds	r3, #1
 8003b54:	73fb      	strb	r3, [r7, #15]
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	889b      	ldrh	r3, [r3, #4]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d3ea      	bcc.n	8003b38 <Appli_GetNetKeyListParamsCb+0x20>
  }
  TRACE_I(TF_CONFIG_SERVER," \r\n");  
 8003b62:	4806      	ldr	r0, [pc, #24]	; (8003b7c <Appli_GetNetKeyListParamsCb+0x64>)
 8003b64:	f025 fd6e 	bl	8029644 <puts>
}
 8003b68:	bf00      	nop
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	0802d3fc 	.word	0x0802d3fc
 8003b74:	0802d5a8 	.word	0x0802d5a8
 8003b78:	0802d41c 	.word	0x0802d41c
 8003b7c:	0802d424 	.word	0x0802d424

08003b80 <Appli_GetNetKeyUpdateParamsCb>:
* @brief  Callback from Config Model to receive the Updated NetKey Command
* @param  Structure Pointer having parameters - netKeyIndex & netKey
* @retval none
*/ 
void Appli_GetNetKeyUpdateParamsCb(model_securityKeyParams_t* netKeyUpdatedParams)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Net Key Update received for netKeyIndex %d \r\n",\
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	881b      	ldrh	r3, [r3, #0]
 8003b8c:	4619      	mov	r1, r3
 8003b8e:	4818      	ldr	r0, [pc, #96]	; (8003bf0 <Appli_GetNetKeyUpdateParamsCb+0x70>)
 8003b90:	f025 fcf2 	bl	8029578 <iprintf>
                                     netKeyUpdatedParams->netKeyIndex);
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", netKeyUpdatedParams->status);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	7b5b      	ldrb	r3, [r3, #13]
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4816      	ldr	r0, [pc, #88]	; (8003bf4 <Appli_GetNetKeyUpdateParamsCb+0x74>)
 8003b9c:	f025 fcec 	bl	8029578 <iprintf>
  if(netKeyUpdatedParams->status == 0)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	7b5b      	ldrb	r3, [r3, #13]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11f      	bne.n	8003be8 <Appli_GetNetKeyUpdateParamsCb+0x68>
  {
    TRACE_I(TF_CONFIG_SERVER,"Updated NetKey is:");
 8003ba8:	4813      	ldr	r0, [pc, #76]	; (8003bf8 <Appli_GetNetKeyUpdateParamsCb+0x78>)
 8003baa:	f025 fce5 	bl	8029578 <iprintf>
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	73fb      	strb	r3, [r7, #15]
 8003bb2:	e00e      	b.n	8003bd2 <Appli_GetNetKeyUpdateParamsCb+0x52>
    {
      TRACE_I(TF_CONFIG_SERVER,"%.2x", *(netKeyUpdatedParams->netKey));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	480f      	ldr	r0, [pc, #60]	; (8003bfc <Appli_GetNetKeyUpdateParamsCb+0x7c>)
 8003bbe:	f025 fcdb 	bl	8029578 <iprintf>
      netKeyUpdatedParams->netKey++;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	605a      	str	r2, [r3, #4]
    for (MOBLEUINT8 count=0; count<netKeyUpdatedParams->keySize; count++)
 8003bcc:	7bfb      	ldrb	r3, [r7, #15]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	7b1b      	ldrb	r3, [r3, #12]
 8003bd6:	7bfa      	ldrb	r2, [r7, #15]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d3eb      	bcc.n	8003bb4 <Appli_GetNetKeyUpdateParamsCb+0x34>
    }
  TRACE_I(TF_CONFIG_SERVER," \r\n");
 8003bdc:	4808      	ldr	r0, [pc, #32]	; (8003c00 <Appli_GetNetKeyUpdateParamsCb+0x80>)
 8003bde:	f025 fd31 	bl	8029644 <puts>
  TRACE_I(TF_CONFIG_SERVER,"It will be replaced by old netKey after Key Refresh \r\n");
 8003be2:	4808      	ldr	r0, [pc, #32]	; (8003c04 <Appli_GetNetKeyUpdateParamsCb+0x84>)
 8003be4:	f025 fd2e 	bl	8029644 <puts>
  }
}
 8003be8:	bf00      	nop
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	0802d5c0 	.word	0x0802d5c0
 8003bf4:	0802d3fc 	.word	0x0802d3fc
 8003bf8:	0802d5f0 	.word	0x0802d5f0
 8003bfc:	0802d41c 	.word	0x0802d41c
 8003c00:	0802d424 	.word	0x0802d424
 8003c04:	0802d604 	.word	0x0802d604

08003c08 <Appli_GetAppKeyBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey binding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyBindingParamsCb(model_appKeyBindingParams_t* appKeyBindParams)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af02      	add	r7, sp, #8
 8003c0e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey binding received for elementIndex %d, modelID %.2lx,\
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4619      	mov	r1, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	685a      	ldr	r2, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	885b      	ldrh	r3, [r3, #2]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	7a1b      	ldrb	r3, [r3, #8]
 8003c24:	9300      	str	r3, [sp, #0]
 8003c26:	4603      	mov	r3, r0
 8003c28:	4803      	ldr	r0, [pc, #12]	; (8003c38 <Appli_GetAppKeyBindingParamsCb+0x30>)
 8003c2a:	f025 fca5 	bl	8029578 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n", appKeyBindParams->elementIndex,\
          appKeyBindParams->modelID, appKeyBindParams->appKeyIndex, appKeyBindParams->status);
}
 8003c2e:	bf00      	nop
 8003c30:	3708      	adds	r7, #8
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	0802d63c 	.word	0x0802d63c

08003c3c <Appli_GetAppKeyUnBindingParamsCb>:
* @brief  Callback from Config Model to receive the AppKey Unbinding params
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex & modelID
* @retval none
*/ 
void Appli_GetAppKeyUnBindingParamsCb(model_appKeyBindingParams_t* appKeyUnbindParams)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af02      	add	r7, sp, #8
 8003c42:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"AppKey unbinding received for elementIndex %d, modelID %.2lx,\
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	4619      	mov	r1, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685a      	ldr	r2, [r3, #4]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	885b      	ldrh	r3, [r3, #2]
 8003c52:	4618      	mov	r0, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	7a1b      	ldrb	r3, [r3, #8]
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	4803      	ldr	r0, [pc, #12]	; (8003c6c <Appli_GetAppKeyUnBindingParamsCb+0x30>)
 8003c5e:	f025 fc8b 	bl	8029578 <iprintf>
          appKeyIndex %.2x & status %.2x \r\n",appKeyUnbindParams->elementIndex,\
          appKeyUnbindParams->modelID, appKeyUnbindParams->appKeyIndex,\
          appKeyUnbindParams->status);  
}
 8003c62:	bf00      	nop
 8003c64:	3708      	adds	r7, #8
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	0802d6a4 	.word	0x0802d6a4

08003c70 <Appli_GetSubAddParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubAddParamsCb(model_subParams_t* subAddParams)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subAddParams->status); 
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	7a9b      	ldrb	r3, [r3, #10]
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	4810      	ldr	r0, [pc, #64]	; (8003cc0 <Appli_GetSubAddParamsCb+0x50>)
 8003c80:	f025 fc7a 	bl	8029578 <iprintf>
  if(subAddParams->isVirtual)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	7adb      	ldrb	r3, [r3, #11]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <Appli_GetSubAddParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	685a      	ldr	r2, [r3, #4]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	891b      	ldrh	r3, [r3, #8]
 8003c9a:	480a      	ldr	r0, [pc, #40]	; (8003cc4 <Appli_GetSubAddParamsCb+0x54>)
 8003c9c:	f025 fc6c 	bl	8029578 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subAddParams->elementIndex, subAddParams->modelID,\
                                                 subAddParams->subAddress); 
  }
}
 8003ca0:	e009      	b.n	8003cb6 <Appli_GetSubAddParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Add received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	4619      	mov	r1, r3
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	685a      	ldr	r2, [r3, #4]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	891b      	ldrh	r3, [r3, #8]
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <Appli_GetSubAddParamsCb+0x58>)
 8003cb2:	f025 fc61 	bl	8029578 <iprintf>
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	0802d3fc 	.word	0x0802d3fc
 8003cc4:	0802d710 	.word	0x0802d710
 8003cc8:	0802d76c 	.word	0x0802d76c

08003ccc <Appli_GetSubDeleteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubDeleteParamsCb(model_subParams_t* subDeleteParams)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subDeleteParams->status); 
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	7a9b      	ldrb	r3, [r3, #10]
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4817      	ldr	r0, [pc, #92]	; (8003d38 <Appli_GetSubDeleteParamsCb+0x6c>)
 8003cdc:	f025 fc4c 	bl	8029578 <iprintf>
  if(subDeleteParams->isVirtual)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7adb      	ldrb	r3, [r3, #11]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <Appli_GetSubDeleteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Add Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	4619      	mov	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	891b      	ldrh	r3, [r3, #8]
 8003cf6:	4811      	ldr	r0, [pc, #68]	; (8003d3c <Appli_GetSubDeleteParamsCb+0x70>)
 8003cf8:	f025 fc3e 	bl	8029578 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                              subDeleteParams->elementIndex, subDeleteParams->modelID,\
                                                 subDeleteParams->subAddress); 
  }  
}
 8003cfc:	e017      	b.n	8003d2e <Appli_GetSubDeleteParamsCb+0x62>
  else if(subDeleteParams->allSubDeleted)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	7b1b      	ldrb	r3, [r3, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d009      	beq.n	8003d1a <Appli_GetSubDeleteParamsCb+0x4e>
     TRACE_I(TF_CONFIG_SERVER,"Delete All Subscription received for elementIndex %d, modelID %.2lx \r\n",\
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	461a      	mov	r2, r3
 8003d12:	480b      	ldr	r0, [pc, #44]	; (8003d40 <Appli_GetSubDeleteParamsCb+0x74>)
 8003d14:	f025 fc30 	bl	8029578 <iprintf>
}
 8003d18:	e009      	b.n	8003d2e <Appli_GetSubDeleteParamsCb+0x62>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Delete received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	4619      	mov	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	891b      	ldrh	r3, [r3, #8]
 8003d28:	4806      	ldr	r0, [pc, #24]	; (8003d44 <Appli_GetSubDeleteParamsCb+0x78>)
 8003d2a:	f025 fc25 	bl	8029578 <iprintf>
}
 8003d2e:	bf00      	nop
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	0802d3fc 	.word	0x0802d3fc
 8003d3c:	0802d7c0 	.word	0x0802d7c0
 8003d40:	0802d824 	.word	0x0802d824
 8003d44:	0802d86c 	.word	0x0802d86c

08003d48 <Appli_GetSubOverwriteParamsCb>:
* @param  Structure Pointer having parameters - elementIndex, appKeyIndex, modelID
*            subAddress, isVirtual & allSubDeleted
* @retval none
*/ 
void Appli_GetSubOverwriteParamsCb(model_subParams_t* subOverwriteParams)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b082      	sub	sp, #8
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", subOverwriteParams->status); 
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	7a9b      	ldrb	r3, [r3, #10]
 8003d54:	4619      	mov	r1, r3
 8003d56:	4810      	ldr	r0, [pc, #64]	; (8003d98 <Appli_GetSubOverwriteParamsCb+0x50>)
 8003d58:	f025 fc0e 	bl	8029578 <iprintf>
  if(subOverwriteParams->isVirtual)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	7adb      	ldrb	r3, [r3, #11]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <Appli_GetSubOverwriteParamsCb+0x32>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Virtual Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	4619      	mov	r1, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	891b      	ldrh	r3, [r3, #8]
 8003d72:	480a      	ldr	r0, [pc, #40]	; (8003d9c <Appli_GetSubOverwriteParamsCb+0x54>)
 8003d74:	f025 fc00 	bl	8029578 <iprintf>
  {
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
                     subOverwriteParams->elementIndex, subOverwriteParams->modelID,\
                                                 subOverwriteParams->subAddress); 
  }  
}
 8003d78:	e009      	b.n	8003d8e <Appli_GetSubOverwriteParamsCb+0x46>
    TRACE_I(TF_CONFIG_SERVER,"Subscription Overwrite received for elementIndex %d, modelID %.2lx & subAddress %.2x \r\n",\
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	781b      	ldrb	r3, [r3, #0]
 8003d7e:	4619      	mov	r1, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	891b      	ldrh	r3, [r3, #8]
 8003d88:	4805      	ldr	r0, [pc, #20]	; (8003da0 <Appli_GetSubOverwriteParamsCb+0x58>)
 8003d8a:	f025 fbf5 	bl	8029578 <iprintf>
}
 8003d8e:	bf00      	nop
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	bf00      	nop
 8003d98:	0802d3fc 	.word	0x0802d3fc
 8003d9c:	0802d8c4 	.word	0x0802d8c4
 8003da0:	0802d924 	.word	0x0802d924

08003da4 <Appli_GetPublicationSetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationSetParamsCb(model_publicationparams_t* pPubParameters)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  if(pPubParameters->modelID == SENSOR_SERVER_MODEL_ID)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 8003db4:	d102      	bne.n	8003dbc <Appli_GetPublicationSetParamsCb+0x18>
  {
    Sensor_ModelPublishSet(pPubParameters);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f00f fd72 	bl	80138a0 <Sensor_ModelPublishSet>
  }
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <Appli_GetPublicationGetParamsCb>:
*         Publish Address, PublishPeriod, PublishTTL, Credential Flag, 
*         Publish AppKeyIndex, Retransmit Count, Restransmit Interval Steps & status
* @retval none
*/ 
void Appli_GetPublicationGetParamsCb(model_publicationparams_t* pPubParameters)
{
 8003dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dc6:	b089      	sub	sp, #36	; 0x24
 8003dc8:	af06      	add	r7, sp, #24
 8003dca:	6078      	str	r0, [r7, #4]
  TRACE_I(TF_CONFIG_SERVER,"Status is : %.2x \r\n", pPubParameters->status); 
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	7c5b      	ldrb	r3, [r3, #17]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	4814      	ldr	r0, [pc, #80]	; (8003e24 <Appli_GetPublicationGetParamsCb+0x60>)
 8003dd4:	f025 fbd0 	bl	8029578 <iprintf>
  TRACE_I(TF_CONFIG_SERVER,"Received Publication parameters:  credentialFlag = %.2x,\
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	7b1b      	ldrb	r3, [r3, #12]
 8003ddc:	461e      	mov	r6, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	469c      	mov	ip, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	895b      	ldrh	r3, [r3, #10]
 8003dec:	4619      	mov	r1, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	7b9b      	ldrb	r3, [r3, #14]
 8003df2:	4618      	mov	r0, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	7bdb      	ldrb	r3, [r3, #15]
 8003df8:	461c      	mov	r4, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	7c1b      	ldrb	r3, [r3, #16]
 8003dfe:	461d      	mov	r5, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	7b5b      	ldrb	r3, [r3, #13]
 8003e04:	9304      	str	r3, [sp, #16]
 8003e06:	9503      	str	r5, [sp, #12]
 8003e08:	9402      	str	r4, [sp, #8]
 8003e0a:	9001      	str	r0, [sp, #4]
 8003e0c:	9100      	str	r1, [sp, #0]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	4662      	mov	r2, ip
 8003e12:	4631      	mov	r1, r6
 8003e14:	4804      	ldr	r0, [pc, #16]	; (8003e28 <Appli_GetPublicationGetParamsCb+0x64>)
 8003e16:	f025 fbaf 	bl	8029578 <iprintf>
          elementAddress = %.2x, modelID = %.2lx, appKeyIndex = %.2x,\
          publishPeriod = %.2x, publishRetransmitCount = %.2x, publishRetransmitIntervalSteps = %.2x,\
          publishTTL = %.2x \r\n", pPubParameters->credentialFlag, pPubParameters->elementAddress, pPubParameters->modelID,\
          pPubParameters->publishAppKeyIndex, pPubParameters->publishPeriod, pPubParameters->publishRetransmitCount,\
          pPubParameters->publishRetransmitIntervalSteps, pPubParameters->publishTTL);
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e22:	bf00      	nop
 8003e24:	0802d3fc 	.word	0x0802d3fc
 8003e28:	0802d97c 	.word	0x0802d97c

08003e2c <Appli_Generic_OnOff_Set>:
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Set(Generic_OnOffStatus_t* pGeneric_OnOffParam, 
                                     MOBLEUINT8 OptionalValid,
                                     MOBLEUINT16 dstPeer,
                                     MOBLEUINT8 elementIndex)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b082      	sub	sp, #8
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	4608      	mov	r0, r1
 8003e36:	4611      	mov	r1, r2
 8003e38:	461a      	mov	r2, r3
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	70fb      	strb	r3, [r7, #3]
 8003e3e:	460b      	mov	r3, r1
 8003e40:	803b      	strh	r3, [r7, #0]
 8003e42:	4613      	mov	r3, r2
 8003e44:	70bb      	strb	r3, [r7, #2]
  /* LED control only for main element */
  if(elementIndex == GENERIC_SERVER_MAIN_ELEMENT_INDEX)
 8003e46:	78bb      	ldrb	r3, [r7, #2]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f040 809d 	bne.w	8003f88 <Appli_Generic_OnOff_Set+0x15c>
  {
    /*User need to modify the parameters as per the number of elements per node*/
    AppliOnOffSet[elementIndex].Present_OnOff = pGeneric_OnOffParam->Present_OnOff_State;
 8003e4e:	78ba      	ldrb	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	7818      	ldrb	r0, [r3, #0]
 8003e54:	495a      	ldr	r1, [pc, #360]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003e56:	4613      	mov	r3, r2
 8003e58:	009b      	lsls	r3, r3, #2
 8003e5a:	4413      	add	r3, r2
 8003e5c:	440b      	add	r3, r1
 8003e5e:	4602      	mov	r2, r0
 8003e60:	701a      	strb	r2, [r3, #0]
    AppliOnOffSet[elementIndex].Present_OnOffValue = pGeneric_OnOffParam->Present_OnOff_Value; 
 8003e62:	78ba      	ldrb	r2, [r7, #2]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e6a:	b298      	uxth	r0, r3
 8003e6c:	4954      	ldr	r1, [pc, #336]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003e6e:	4613      	mov	r3, r2
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	4413      	add	r3, r2
 8003e74:	440b      	add	r3, r1
 8003e76:	4602      	mov	r2, r0
 8003e78:	f8a3 2001 	strh.w	r2, [r3, #1]

    /* This condition is applicable when user want to on off the light with some 
      default transition value, or optionalValid =IN_TRANSITION ,
      transition is in progress.
    */
    if((OptionalValid == DEFAULT_TRANSITION) || (OptionalValid == IN_TRANSITION))
 8003e7c:	78fb      	ldrb	r3, [r7, #3]
 8003e7e:	2b03      	cmp	r3, #3
 8003e80:	d002      	beq.n	8003e88 <Appli_Generic_OnOff_Set+0x5c>
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d148      	bne.n	8003f1a <Appli_Generic_OnOff_Set+0xee>
    {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
      Appli_LightPwmValue.IntensityValue = AppliOnOffSet[elementIndex].Present_OnOffValue;
 8003e88:	78ba      	ldrb	r2, [r7, #2]
 8003e8a:	494d      	ldr	r1, [pc, #308]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003e8c:	4613      	mov	r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4413      	add	r3, r2
 8003e92:	440b      	add	r3, r1
 8003e94:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	4b4a      	ldr	r3, [pc, #296]	; (8003fc4 <Appli_Generic_OnOff_Set+0x198>)
 8003e9c:	801a      	strh	r2, [r3, #0]
      Light_UpdateLedValue(LOAD_STATE ,Appli_LightPwmValue);
 8003e9e:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <Appli_Generic_OnOff_Set+0x198>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	6858      	ldr	r0, [r3, #4]
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	6898      	ldr	r0, [r3, #8]
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2004      	movs	r0, #4
 8003eae:	f000 ff0d 	bl	8004ccc <Light_UpdateLedValue>
      else
      {
        AppliOnOffSet[elementIndex].TargetValue = APPLI_LED_OFF;
      }
  #else
      AppliOnOffSet[elementIndex].TargetValue = pGeneric_OnOffParam->Target_OnOff; 
 8003eb2:	78ba      	ldrb	r2, [r7, #2]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003eba:	b298      	uxth	r0, r3
 8003ebc:	4940      	ldr	r1, [pc, #256]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	f8a3 2003 	strh.w	r2, [r3, #3]
  #endif /* EME */

      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003ecc:	78ba      	ldrb	r2, [r7, #2]
 8003ece:	493c      	ldr	r1, [pc, #240]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003edc:	b299      	uxth	r1, r3
 8003ede:	78ba      	ldrb	r2, [r7, #2]
 8003ee0:	4837      	ldr	r0, [pc, #220]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	4403      	add	r3, r0
 8003eea:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4299      	cmp	r1, r3
 8003ef2:	d149      	bne.n	8003f88 <Appli_Generic_OnOff_Set+0x15c>
      {
        if(AppliOnOffSet[elementIndex].Present_OnOffValue > 0)
 8003ef4:	78ba      	ldrb	r2, [r7, #2]
 8003ef6:	4932      	ldr	r1, [pc, #200]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	440b      	add	r3, r1
 8003f00:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <Appli_Generic_OnOff_Set+0xe6>
        {
          BSP_LED_On(LED_BLUE);
 8003f0a:	2000      	movs	r0, #0
 8003f0c:	f003 fe08 	bl	8007b20 <BSP_LED_On>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003f10:	e03a      	b.n	8003f88 <Appli_Generic_OnOff_Set+0x15c>
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
 8003f12:	2000      	movs	r0, #0
 8003f14:	f003 fe1e 	bl	8007b54 <BSP_LED_Off>
      if(AppliOnOffSet[elementIndex].Present_OnOffValue == AppliOnOffSet[elementIndex].TargetValue)
 8003f18:	e036      	b.n	8003f88 <Appli_Generic_OnOff_Set+0x15c>
        }
      }
    }  
    else
    {
      if((AppliOnOffSet[elementIndex].Present_OnOff == APPLI_LED_ON) && (OptionalValid == NO_TRANSITION))
 8003f1a:	78ba      	ldrb	r2, [r7, #2]
 8003f1c:	4928      	ldr	r1, [pc, #160]	; (8003fc0 <Appli_Generic_OnOff_Set+0x194>)
 8003f1e:	4613      	mov	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	440b      	add	r3, r1
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d119      	bne.n	8003f60 <Appli_Generic_OnOff_Set+0x134>
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d116      	bne.n	8003f60 <Appli_Generic_OnOff_Set+0x134>
      { 
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <Appli_Generic_OnOff_Set+0x198>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	f062 0209 	orn	r2, r2, #9
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8003f42:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8003f44:	4b1f      	ldr	r3, [pc, #124]	; (8003fc4 <Appli_Generic_OnOff_Set+0x198>)
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	6858      	ldr	r0, [r3, #4]
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	6898      	ldr	r0, [r3, #8]
 8003f50:	4603      	mov	r3, r0
 8003f52:	2004      	movs	r0, #4
 8003f54:	f000 feba 	bl	8004ccc <Light_UpdateLedValue>
#endif
        BSP_LED_On(LED_BLUE);
 8003f58:	2000      	movs	r0, #0
 8003f5a:	f003 fde1 	bl	8007b20 <BSP_LED_On>
 8003f5e:	e013      	b.n	8003f88 <Appli_Generic_OnOff_Set+0x15c>
      }
      else
      {  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
        Appli_LightPwmValue.IntensityValue = PWM_VALUE_OFF;
 8003f60:	4b18      	ldr	r3, [pc, #96]	; (8003fc4 <Appli_Generic_OnOff_Set+0x198>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	f042 0201 	orr.w	r2, r2, #1
 8003f68:	701a      	strb	r2, [r3, #0]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
 8003f6e:	4b15      	ldr	r3, [pc, #84]	; (8003fc4 <Appli_Generic_OnOff_Set+0x198>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4611      	mov	r1, r2
 8003f74:	6858      	ldr	r0, [r3, #4]
 8003f76:	4602      	mov	r2, r0
 8003f78:	6898      	ldr	r0, [r3, #8]
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2002      	movs	r0, #2
 8003f7e:	f000 fea5 	bl	8004ccc <Light_UpdateLedValue>
#endif
        BSP_LED_Off(LED_BLUE);
 8003f82:	2000      	movs	r0, #0
 8003f84:	f003 fde6 	bl	8007b54 <BSP_LED_Off>
      }
    } 
  }
  
  TRACE_M(TF_GENERIC, "Appli_Generic_OnOff_Set callback received for elementIndex %d \r\n", elementIndex);           
 8003f88:	2100      	movs	r1, #0
 8003f8a:	480f      	ldr	r0, [pc, #60]	; (8003fc8 <Appli_Generic_OnOff_Set+0x19c>)
 8003f8c:	f009 faf0 	bl	800d570 <TraceHeader>
 8003f90:	78bb      	ldrb	r3, [r7, #2]
 8003f92:	4619      	mov	r1, r3
 8003f94:	480d      	ldr	r0, [pc, #52]	; (8003fcc <Appli_Generic_OnOff_Set+0x1a0>)
 8003f96:	f025 faef 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL, "#8202!for elementIndex %d \r\n", elementIndex);
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	480a      	ldr	r0, [pc, #40]	; (8003fc8 <Appli_Generic_OnOff_Set+0x19c>)
 8003f9e:	f009 fae7 	bl	800d570 <TraceHeader>
 8003fa2:	78bb      	ldrb	r3, [r7, #2]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	480a      	ldr	r0, [pc, #40]	; (8003fd0 <Appli_Generic_OnOff_Set+0x1a4>)
 8003fa8:	f025 fae6 	bl	8029578 <iprintf>

  NvmStatePowerFlag_Set(GENERIC_ON_OFF_NVM_FLAG, elementIndex);
 8003fac:	78bb      	ldrb	r3, [r7, #2]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	f009 fd21 	bl	800d9f8 <NvmStatePowerFlag_Set>

  return MOBLE_RESULT_SUCCESS;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3708      	adds	r7, #8
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	2000440c 	.word	0x2000440c
 8003fc4:	2000442c 	.word	0x2000442c
 8003fc8:	08032694 	.word	0x08032694
 8003fcc:	0802da80 	.word	0x0802da80
 8003fd0:	0802dac4 	.word	0x0802dac4

08003fd4 <Appli_Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Level_Set(Generic_LevelStatus_t* plevelParam, 
                                     MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	4608      	mov	r0, r1
 8003fde:	4611      	mov	r1, r2
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	70fb      	strb	r3, [r7, #3]
 8003fe6:	460b      	mov	r3, r1
 8003fe8:	803b      	strh	r3, [r7, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	70bb      	strb	r3, [r7, #2]
  MOBLEUINT16 duty;
  static MOBLEUINT16 previousIntensity = 0;
   
  AppliLevelSet[elementIndex].Present_Level16= plevelParam->Present_Level16;
 8003fee:	78ba      	ldrb	r2, [r7, #2]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ff6:	b218      	sxth	r0, r3
 8003ff8:	4948      	ldr	r1, [pc, #288]	; (800411c <Appli_Generic_Level_Set+0x148>)
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	4602      	mov	r2, r0
 8004006:	801a      	strh	r2, [r3, #0]
  if(AppliLevelSet[elementIndex].Present_Level16 <= 0)
 8004008:	78ba      	ldrb	r2, [r7, #2]
 800400a:	4944      	ldr	r1, [pc, #272]	; (800411c <Appli_Generic_Level_Set+0x148>)
 800400c:	4613      	mov	r3, r2
 800400e:	005b      	lsls	r3, r3, #1
 8004010:	4413      	add	r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	f9b3 3000 	ldrsh.w	r3, [r3]
 800401a:	2b00      	cmp	r3, #0
 800401c:	dc08      	bgt.n	8004030 <Appli_Generic_Level_Set+0x5c>
  {
    AppliLevelSet[elementIndex].Present_Level16 = 0;
 800401e:	78ba      	ldrb	r2, [r7, #2]
 8004020:	493e      	ldr	r1, [pc, #248]	; (800411c <Appli_Generic_Level_Set+0x148>)
 8004022:	4613      	mov	r3, r2
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	2200      	movs	r2, #0
 800402e:	801a      	strh	r2, [r3, #0]
  }
  
  IntensityValue =  AppliLevelSet[elementIndex].Present_Level16;
 8004030:	78ba      	ldrb	r2, [r7, #2]
 8004032:	493a      	ldr	r1, [pc, #232]	; (800411c <Appli_Generic_Level_Set+0x148>)
 8004034:	4613      	mov	r3, r2
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004042:	b29a      	uxth	r2, r3
 8004044:	4b36      	ldr	r3, [pc, #216]	; (8004120 <Appli_Generic_Level_Set+0x14c>)
 8004046:	801a      	strh	r2, [r3, #0]
  
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 8004048:	4b35      	ldr	r3, [pc, #212]	; (8004120 <Appli_Generic_Level_Set+0x14c>)
 800404a:	881a      	ldrh	r2, [r3, #0]
 800404c:	4b35      	ldr	r3, [pc, #212]	; (8004124 <Appli_Generic_Level_Set+0x150>)
 800404e:	881b      	ldrh	r3, [r3, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d905      	bls.n	8004060 <Appli_Generic_Level_Set+0x8c>
 8004054:	4b32      	ldr	r3, [pc, #200]	; (8004120 <Appli_Generic_Level_Set+0x14c>)
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	f647 42f5 	movw	r2, #31989	; 0x7cf5
 800405c:	4293      	cmp	r3, r2
 800405e:	d903      	bls.n	8004068 <Appli_Generic_Level_Set+0x94>
     IntensityValue == INTENSITY_LEVEL_ZERO)
 8004060:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <Appli_Generic_Level_Set+0x14c>)
 8004062:	881b      	ldrh	r3, [r3, #0]
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <Appli_Generic_Level_Set+0x9c>
  {
    IntensityFlag = MOBLE_FALSE;
 8004068:	4b2f      	ldr	r3, [pc, #188]	; (8004128 <Appli_Generic_Level_Set+0x154>)
 800406a:	2200      	movs	r2, #0
 800406c:	701a      	strb	r2, [r3, #0]
 800406e:	e002      	b.n	8004076 <Appli_Generic_Level_Set+0xa2>
  }
  else
  {
    IntensityFlag = MOBLE_TRUE;
 8004070:	4b2d      	ldr	r3, [pc, #180]	; (8004128 <Appli_Generic_Level_Set+0x154>)
 8004072:	2201      	movs	r2, #1
 8004074:	701a      	strb	r2, [r3, #0]
  }
  previousIntensity = IntensityValue;     
 8004076:	4b2a      	ldr	r3, [pc, #168]	; (8004120 <Appli_Generic_Level_Set+0x14c>)
 8004078:	881a      	ldrh	r2, [r3, #0]
 800407a:	4b2a      	ldr	r3, [pc, #168]	; (8004124 <Appli_Generic_Level_Set+0x150>)
 800407c:	801a      	strh	r2, [r3, #0]
  
  if(AppliLevelSet[elementIndex].Present_Level16 < 0x00)
 800407e:	78ba      	ldrb	r2, [r7, #2]
 8004080:	4926      	ldr	r1, [pc, #152]	; (800411c <Appli_Generic_Level_Set+0x148>)
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004090:	2b00      	cmp	r3, #0
 8004092:	da08      	bge.n	80040a6 <Appli_Generic_Level_Set+0xd2>
  {
     AppliLevelSet[elementIndex].Present_Level16 = 0;
 8004094:	78ba      	ldrb	r2, [r7, #2]
 8004096:	4921      	ldr	r1, [pc, #132]	; (800411c <Appli_Generic_Level_Set+0x148>)
 8004098:	4613      	mov	r3, r2
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	2200      	movs	r2, #0
 80040a4:	801a      	strh	r2, [r3, #0]
  }
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  duty = PwmValueMapping(AppliLevelSet[elementIndex].Present_Level16 , 0x7FFF ,0x0000); 
 80040a6:	78ba      	ldrb	r2, [r7, #2]
 80040a8:	491c      	ldr	r1, [pc, #112]	; (800411c <Appli_Generic_Level_Set+0x148>)
 80040aa:	4613      	mov	r3, r2
 80040ac:	005b      	lsls	r3, r3, #1
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2200      	movs	r2, #0
 80040bc:	f647 71ff 	movw	r1, #32767	; 0x7fff
 80040c0:	4618      	mov	r0, r3
 80040c2:	f002 fb83 	bl	80067cc <PwmValueMapping>
 80040c6:	4603      	mov	r3, r0
 80040c8:	81fb      	strh	r3, [r7, #14]
  Appli_LightPwmValue.IntensityValue = duty;
 80040ca:	4b18      	ldr	r3, [pc, #96]	; (800412c <Appli_Generic_Level_Set+0x158>)
 80040cc:	89fa      	ldrh	r2, [r7, #14]
 80040ce:	801a      	strh	r2, [r3, #0]
  Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 80040d0:	4b16      	ldr	r3, [pc, #88]	; (800412c <Appli_Generic_Level_Set+0x158>)
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	4611      	mov	r1, r2
 80040d6:	6858      	ldr	r0, [r3, #4]
 80040d8:	4602      	mov	r2, r0
 80040da:	6898      	ldr	r0, [r3, #8]
 80040dc:	4603      	mov	r3, r0
 80040de:	2004      	movs	r0, #4
 80040e0:	f000 fdf4 	bl	8004ccc <Light_UpdateLedValue>
#endif
  
  TRACE_M(TF_GENERIC,"Appli_Generic_Level_Set callback received for elementIndex %d \r\n", elementIndex);
 80040e4:	2100      	movs	r1, #0
 80040e6:	4812      	ldr	r0, [pc, #72]	; (8004130 <Appli_Generic_Level_Set+0x15c>)
 80040e8:	f009 fa42 	bl	800d570 <TraceHeader>
 80040ec:	78bb      	ldrb	r3, [r7, #2]
 80040ee:	4619      	mov	r1, r3
 80040f0:	4810      	ldr	r0, [pc, #64]	; (8004134 <Appli_Generic_Level_Set+0x160>)
 80040f2:	f025 fa41 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8206!for elementIndex %d \r\n", elementIndex);
 80040f6:	2100      	movs	r1, #0
 80040f8:	480d      	ldr	r0, [pc, #52]	; (8004130 <Appli_Generic_Level_Set+0x15c>)
 80040fa:	f009 fa39 	bl	800d570 <TraceHeader>
 80040fe:	78bb      	ldrb	r3, [r7, #2]
 8004100:	4619      	mov	r1, r3
 8004102:	480d      	ldr	r0, [pc, #52]	; (8004138 <Appli_Generic_Level_Set+0x164>)
 8004104:	f025 fa38 	bl	8029578 <iprintf>
  
  NvmStatePowerFlag_Set(GENERIC_LEVEL_NVM_FLAG, elementIndex);
 8004108:	78bb      	ldrb	r3, [r7, #2]
 800410a:	4619      	mov	r1, r3
 800410c:	2002      	movs	r0, #2
 800410e:	f009 fc73 	bl	800d9f8 <NvmStatePowerFlag_Set>
    
  return MOBLE_RESULT_SUCCESS;
 8004112:	2300      	movs	r3, #0
}
 8004114:	4618      	mov	r0, r3
 8004116:	3710      	adds	r7, #16
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	20004414 	.word	0x20004414
 8004120:	2000443c 	.word	0x2000443c
 8004124:	20004426 	.word	0x20004426
 8004128:	2000443e 	.word	0x2000443e
 800412c:	2000442c 	.word	0x2000442c
 8004130:	080326ac 	.word	0x080326ac
 8004134:	0802dae4 	.word	0x0802dae4
 8004138:	0802db28 	.word	0x0802db28

0800413c <Appli_Generic_Delta_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Delta_Set(Generic_LevelStatus_t* pdeltalevelParam, 
                                          MOBLEUINT8 OptionalValid,MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b082      	sub	sp, #8
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	4608      	mov	r0, r1
 8004146:	4611      	mov	r1, r2
 8004148:	461a      	mov	r2, r3
 800414a:	4603      	mov	r3, r0
 800414c:	70fb      	strb	r3, [r7, #3]
 800414e:	460b      	mov	r3, r1
 8004150:	803b      	strh	r3, [r7, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	70bb      	strb	r3, [r7, #2]
  AppliLevelSet[elementIndex].Present_Level16 = pdeltalevelParam->Present_Level16;
 8004156:	78ba      	ldrb	r2, [r7, #2]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800415e:	b218      	sxth	r0, r3
 8004160:	4925      	ldr	r1, [pc, #148]	; (80041f8 <Appli_Generic_Delta_Set+0xbc>)
 8004162:	4613      	mov	r3, r2
 8004164:	005b      	lsls	r3, r3, #1
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	440b      	add	r3, r1
 800416c:	4602      	mov	r2, r0
 800416e:	801a      	strh	r2, [r3, #0]
  
  /* For demo, if Level is more than 50, switch ON the LED */
  if (AppliLevelSet[elementIndex].Present_Level16 >= 50)
 8004170:	78ba      	ldrb	r2, [r7, #2]
 8004172:	4921      	ldr	r1, [pc, #132]	; (80041f8 <Appli_Generic_Delta_Set+0xbc>)
 8004174:	4613      	mov	r3, r2
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	4413      	add	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	440b      	add	r3, r1
 800417e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004182:	2b31      	cmp	r3, #49	; 0x31
 8004184:	dd16      	ble.n	80041b4 <Appli_Generic_Delta_Set+0x78>
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <Appli_Generic_Delta_Set+0xc0>)
 8004188:	2200      	movs	r2, #0
 800418a:	f062 0209 	orn	r2, r2, #9
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	2200      	movs	r2, #0
 8004192:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8004196:	705a      	strb	r2, [r3, #1]
    Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8004198:	4b18      	ldr	r3, [pc, #96]	; (80041fc <Appli_Generic_Delta_Set+0xc0>)
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	4611      	mov	r1, r2
 800419e:	6858      	ldr	r0, [r3, #4]
 80041a0:	4602      	mov	r2, r0
 80041a2:	6898      	ldr	r0, [r3, #8]
 80041a4:	4603      	mov	r3, r0
 80041a6:	2004      	movs	r0, #4
 80041a8:	f000 fd90 	bl	8004ccc <Light_UpdateLedValue>
#endif
    BSP_LED_On(LED_BLUE);
 80041ac:	2000      	movs	r0, #0
 80041ae:	f003 fcb7 	bl	8007b20 <BSP_LED_On>
 80041b2:	e00c      	b.n	80041ce <Appli_Generic_Delta_Set+0x92>
  }
  else
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <Appli_Generic_Delta_Set+0xc0>)
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	4611      	mov	r1, r2
 80041ba:	6858      	ldr	r0, [r3, #4]
 80041bc:	4602      	mov	r2, r0
 80041be:	6898      	ldr	r0, [r3, #8]
 80041c0:	4603      	mov	r3, r0
 80041c2:	2002      	movs	r0, #2
 80041c4:	f000 fd82 	bl	8004ccc <Light_UpdateLedValue>
#endif
    BSP_LED_Off(LED_BLUE);
 80041c8:	2000      	movs	r0, #0
 80041ca:	f003 fcc3 	bl	8007b54 <BSP_LED_Off>
  }
  
  TRACE_M(TF_GENERIC,"Generic_LevelDelta_Set callback received for element %d \r\n", elementIndex);
 80041ce:	2100      	movs	r1, #0
 80041d0:	480b      	ldr	r0, [pc, #44]	; (8004200 <Appli_Generic_Delta_Set+0xc4>)
 80041d2:	f009 f9cd 	bl	800d570 <TraceHeader>
 80041d6:	78bb      	ldrb	r3, [r7, #2]
 80041d8:	4619      	mov	r1, r3
 80041da:	480a      	ldr	r0, [pc, #40]	; (8004204 <Appli_Generic_Delta_Set+0xc8>)
 80041dc:	f025 f9cc 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8209!\r\n");
 80041e0:	2100      	movs	r1, #0
 80041e2:	4807      	ldr	r0, [pc, #28]	; (8004200 <Appli_Generic_Delta_Set+0xc4>)
 80041e4:	f009 f9c4 	bl	800d570 <TraceHeader>
 80041e8:	4807      	ldr	r0, [pc, #28]	; (8004208 <Appli_Generic_Delta_Set+0xcc>)
 80041ea:	f025 fa2b 	bl	8029644 <puts>

  
  return MOBLE_RESULT_SUCCESS;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3708      	adds	r7, #8
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	20004414 	.word	0x20004414
 80041fc:	2000442c 	.word	0x2000442c
 8004200:	080326c4 	.word	0x080326c4
 8004204:	0802db48 	.word	0x0802db48
 8004208:	0802db84 	.word	0x0802db84

0800420c <Appli_Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_Move_Set(Generic_LevelStatus_t* pdeltaMoveParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                         MOBLEUINT8 elementIndex)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	4608      	mov	r0, r1
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	4603      	mov	r3, r0
 800421c:	70fb      	strb	r3, [r7, #3]
 800421e:	460b      	mov	r3, r1
 8004220:	803b      	strh	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	70bb      	strb	r3, [r7, #2]
//  if(OptionalValid == 1)
//  {
    AppliLevelSet[elementIndex].Last_delta_level     = pdeltaMoveParam->Last_delta_level;
 8004226:	78ba      	ldrb	r2, [r7, #2]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6899      	ldr	r1, [r3, #8]
 800422c:	482e      	ldr	r0, [pc, #184]	; (80042e8 <Appli_Generic_Move_Set+0xdc>)
 800422e:	4613      	mov	r3, r2
 8004230:	005b      	lsls	r3, r3, #1
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4403      	add	r3, r0
 8004238:	3308      	adds	r3, #8
 800423a:	6019      	str	r1, [r3, #0]
    AppliLevelSet[elementIndex].Last_Level_TID       = pdeltaMoveParam->Last_Level_TID;
 800423c:	78ba      	ldrb	r2, [r7, #2]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	7958      	ldrb	r0, [r3, #5]
 8004242:	4929      	ldr	r1, [pc, #164]	; (80042e8 <Appli_Generic_Move_Set+0xdc>)
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	440b      	add	r3, r1
 800424e:	3305      	adds	r3, #5
 8004250:	4602      	mov	r2, r0
 8004252:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Last_Present_Level16 = pdeltaMoveParam->Last_Present_Level16;
 8004254:	78ba      	ldrb	r2, [r7, #2]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800425c:	b218      	sxth	r0, r3
 800425e:	4922      	ldr	r1, [pc, #136]	; (80042e8 <Appli_Generic_Move_Set+0xdc>)
 8004260:	4613      	mov	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4413      	add	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	440b      	add	r3, r1
 800426a:	3306      	adds	r3, #6
 800426c:	4602      	mov	r2, r0
 800426e:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].Present_Level16      = pdeltaMoveParam->Present_Level16;   
 8004270:	78ba      	ldrb	r2, [r7, #2]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004278:	b218      	sxth	r0, r3
 800427a:	491b      	ldr	r1, [pc, #108]	; (80042e8 <Appli_Generic_Move_Set+0xdc>)
 800427c:	4613      	mov	r3, r2
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	4413      	add	r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	4602      	mov	r2, r0
 8004288:	801a      	strh	r2, [r3, #0]
    AppliLevelSet[elementIndex].RemainingTime        = pdeltaMoveParam->RemainingTime;
 800428a:	78ba      	ldrb	r2, [r7, #2]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	7918      	ldrb	r0, [r3, #4]
 8004290:	4915      	ldr	r1, [pc, #84]	; (80042e8 <Appli_Generic_Move_Set+0xdc>)
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	440b      	add	r3, r1
 800429c:	3304      	adds	r3, #4
 800429e:	4602      	mov	r2, r0
 80042a0:	701a      	strb	r2, [r3, #0]
    AppliLevelSet[elementIndex].Target_Level16       = pdeltaMoveParam->Target_Level16;
 80042a2:	78ba      	ldrb	r2, [r7, #2]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80042aa:	b218      	sxth	r0, r3
 80042ac:	490e      	ldr	r1, [pc, #56]	; (80042e8 <Appli_Generic_Move_Set+0xdc>)
 80042ae:	4613      	mov	r3, r2
 80042b0:	005b      	lsls	r3, r3, #1
 80042b2:	4413      	add	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	440b      	add	r3, r1
 80042b8:	3302      	adds	r3, #2
 80042ba:	4602      	mov	r2, r0
 80042bc:	801a      	strh	r2, [r3, #0]
//  }
  
    TRACE_M(TF_GENERIC,"Generic_LevelMove_Set callback received for element %d \r\n", elementIndex);
 80042be:	2100      	movs	r1, #0
 80042c0:	480a      	ldr	r0, [pc, #40]	; (80042ec <Appli_Generic_Move_Set+0xe0>)
 80042c2:	f009 f955 	bl	800d570 <TraceHeader>
 80042c6:	78bb      	ldrb	r3, [r7, #2]
 80042c8:	4619      	mov	r1, r3
 80042ca:	4809      	ldr	r0, [pc, #36]	; (80042f0 <Appli_Generic_Move_Set+0xe4>)
 80042cc:	f025 f954 	bl	8029578 <iprintf>
    TRACE_M(TF_SERIAL_CTRL,"#820B! \r\n");
 80042d0:	2100      	movs	r1, #0
 80042d2:	4806      	ldr	r0, [pc, #24]	; (80042ec <Appli_Generic_Move_Set+0xe0>)
 80042d4:	f009 f94c 	bl	800d570 <TraceHeader>
 80042d8:	4806      	ldr	r0, [pc, #24]	; (80042f4 <Appli_Generic_Move_Set+0xe8>)
 80042da:	f025 f9b3 	bl	8029644 <puts>
    return MOBLE_RESULT_SUCCESS;
 80042de:	2300      	movs	r3, #0
  
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3708      	adds	r7, #8
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20004414 	.word	0x20004414
 80042ec:	080326dc 	.word	0x080326dc
 80042f0:	0802db8c 	.word	0x0802db8c
 80042f4:	0802dbc8 	.word	0x0802dbc8

080042f8 <Appli_Generic_PowerOnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Set(Generic_PowerOnOffParam_t* pPowerOnOffParam, 
                                         MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{ 
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b082      	sub	sp, #8
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
 8004300:	4608      	mov	r0, r1
 8004302:	4611      	mov	r1, r2
 8004304:	461a      	mov	r2, r3
 8004306:	4603      	mov	r3, r0
 8004308:	70fb      	strb	r3, [r7, #3]
 800430a:	460b      	mov	r3, r1
 800430c:	803b      	strh	r3, [r7, #0]
 800430e:	4613      	mov	r3, r2
 8004310:	70bb      	strb	r3, [r7, #2]
  
  AppliPowerOnSet[elementIndex].PowerOnState = pPowerOnOffParam->PowerOnOffState;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	781a      	ldrb	r2, [r3, #0]
 8004316:	78bb      	ldrb	r3, [r7, #2]
 8004318:	b211      	sxth	r1, r2
 800431a:	4a12      	ldr	r2, [pc, #72]	; (8004364 <Appli_Generic_PowerOnOff_Set+0x6c>)
 800431c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  TRACE_M(TF_SERIAL_CTRL,"#8213! for elementIndex %d \r\n", elementIndex);
 8004320:	2100      	movs	r1, #0
 8004322:	4811      	ldr	r0, [pc, #68]	; (8004368 <Appli_Generic_PowerOnOff_Set+0x70>)
 8004324:	f009 f924 	bl	800d570 <TraceHeader>
 8004328:	78bb      	ldrb	r3, [r7, #2]
 800432a:	4619      	mov	r1, r3
 800432c:	480f      	ldr	r0, [pc, #60]	; (800436c <Appli_Generic_PowerOnOff_Set+0x74>)
 800432e:	f025 f923 	bl	8029578 <iprintf>
  TRACE_M(TF_GENERIC,"Appli_Generic_PowerOnOff_Set callback received for elementIndex %d \r\n", elementIndex);
 8004332:	2100      	movs	r1, #0
 8004334:	480c      	ldr	r0, [pc, #48]	; (8004368 <Appli_Generic_PowerOnOff_Set+0x70>)
 8004336:	f009 f91b 	bl	800d570 <TraceHeader>
 800433a:	78bb      	ldrb	r3, [r7, #2]
 800433c:	4619      	mov	r1, r3
 800433e:	480c      	ldr	r0, [pc, #48]	; (8004370 <Appli_Generic_PowerOnOff_Set+0x78>)
 8004340:	f025 f91a 	bl	8029578 <iprintf>

  if(AppliPowerOnSet[elementIndex].PowerOnState == GENERIC_POWER_ON_STATE)
 8004344:	78bb      	ldrb	r3, [r7, #2]
 8004346:	4a07      	ldr	r2, [pc, #28]	; (8004364 <Appli_Generic_PowerOnOff_Set+0x6c>)
 8004348:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d102      	bne.n	8004356 <Appli_Generic_PowerOnOff_Set+0x5e>
  {
    /* set the flag value for NVM store */
    RestoreFlag = GENERIC_ON_OFF_NVM_FLAG;
 8004350:	4b08      	ldr	r3, [pc, #32]	; (8004374 <Appli_Generic_PowerOnOff_Set+0x7c>)
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
  }

  AppliNvm_SaveMessageParam();
 8004356:	f002 fa9b 	bl	8006890 <AppliNvm_SaveMessageParam>
    
  return MOBLE_RESULT_SUCCESS;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3708      	adds	r7, #8
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	20004420 	.word	0x20004420
 8004368:	080326f4 	.word	0x080326f4
 800436c:	0802dbd4 	.word	0x0802dbd4
 8004370:	0802dbf4 	.word	0x0802dbf4
 8004374:	20004550 	.word	0x20004550

08004378 <Appli_Generic_GetOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffStatus(MOBLEUINT8* pOnOff_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
 8004384:	4613      	mov	r3, r2
 8004386:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Status = AppliOnOffSet[elementIndex].Present_OnOff;
 8004388:	787a      	ldrb	r2, [r7, #1]
 800438a:	4907      	ldr	r1, [pc, #28]	; (80043a8 <Appli_Generic_GetOnOffStatus+0x30>)
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	440b      	add	r3, r1
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	370c      	adds	r7, #12
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr
 80043a8:	2000440c 	.word	0x2000440c

080043ac <Appli_Generic_GetOnOffValue>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetOnOffValue(MOBLEUINT8* pOnOff_Value, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)                                        
{
 80043ac:	b480      	push	{r7}
 80043ae:	b083      	sub	sp, #12
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	807b      	strh	r3, [r7, #2]
 80043b8:	4613      	mov	r3, r2
 80043ba:	707b      	strb	r3, [r7, #1]
  
  *pOnOff_Value = AppliOnOffSet[elementIndex].Present_OnOffValue;
 80043bc:	787a      	ldrb	r2, [r7, #1]
 80043be:	491e      	ldr	r1, [pc, #120]	; (8004438 <Appli_Generic_GetOnOffValue+0x8c>)
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	440b      	add	r3, r1
 80043c8:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+1) = AppliOnOffSet[elementIndex].Present_OnOffValue >> 8;
 80043d4:	787a      	ldrb	r2, [r7, #1]
 80043d6:	4918      	ldr	r1, [pc, #96]	; (8004438 <Appli_Generic_GetOnOffValue+0x8c>)
 80043d8:	4613      	mov	r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	4413      	add	r3, r2
 80043de:	440b      	add	r3, r1
 80043e0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	b29a      	uxth	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3301      	adds	r3, #1
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+2) = AppliOnOffSet[elementIndex].TargetValue;
 80043f2:	787a      	ldrb	r2, [r7, #1]
 80043f4:	4910      	ldr	r1, [pc, #64]	; (8004438 <Appli_Generic_GetOnOffValue+0x8c>)
 80043f6:	4613      	mov	r3, r2
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	4413      	add	r3, r2
 80043fc:	440b      	add	r3, r1
 80043fe:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8004402:	b29a      	uxth	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3302      	adds	r3, #2
 8004408:	b2d2      	uxtb	r2, r2
 800440a:	701a      	strb	r2, [r3, #0]
  *(pOnOff_Value+3) = AppliOnOffSet[elementIndex].TargetValue >> 8;
 800440c:	787a      	ldrb	r2, [r7, #1]
 800440e:	490a      	ldr	r1, [pc, #40]	; (8004438 <Appli_Generic_GetOnOffValue+0x8c>)
 8004410:	4613      	mov	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	4413      	add	r3, r2
 8004416:	440b      	add	r3, r1
 8004418:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800441c:	b29b      	uxth	r3, r3
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	b29a      	uxth	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	3303      	adds	r3, #3
 8004426:	b2d2      	uxtb	r2, r2
 8004428:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	2000440c 	.word	0x2000440c

0800443c <Appli_Generic_GetLevelStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetLevelStatus(MOBLEUINT8* pLevel_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	460b      	mov	r3, r1
 8004446:	807b      	strh	r3, [r7, #2]
 8004448:	4613      	mov	r3, r2
 800444a:	707b      	strb	r3, [r7, #1]

   *pLevel_Status = AppliLevelSet[elementIndex].Present_Level16;
 800444c:	787a      	ldrb	r2, [r7, #1]
 800444e:	491f      	ldr	r1, [pc, #124]	; (80044cc <Appli_Generic_GetLevelStatus+0x90>)
 8004450:	4613      	mov	r3, r2
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	4413      	add	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	440b      	add	r3, r1
 800445a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800445e:	b2da      	uxtb	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+1) = AppliLevelSet[elementIndex].Present_Level16 >> 8;
 8004464:	787a      	ldrb	r2, [r7, #1]
 8004466:	4919      	ldr	r1, [pc, #100]	; (80044cc <Appli_Generic_GetLevelStatus+0x90>)
 8004468:	4613      	mov	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004476:	121b      	asrs	r3, r3, #8
 8004478:	b21a      	sxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	3301      	adds	r3, #1
 800447e:	b2d2      	uxtb	r2, r2
 8004480:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+2) = AppliLevelSet[elementIndex].Target_Level16;
 8004482:	787a      	ldrb	r2, [r7, #1]
 8004484:	4911      	ldr	r1, [pc, #68]	; (80044cc <Appli_Generic_GetLevelStatus+0x90>)
 8004486:	4613      	mov	r3, r2
 8004488:	005b      	lsls	r3, r3, #1
 800448a:	4413      	add	r3, r2
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	440b      	add	r3, r1
 8004490:	3302      	adds	r3, #2
 8004492:	f9b3 2000 	ldrsh.w	r2, [r3]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	3302      	adds	r3, #2
 800449a:	b2d2      	uxtb	r2, r2
 800449c:	701a      	strb	r2, [r3, #0]
   *(pLevel_Status+3) = AppliLevelSet[elementIndex].Target_Level16 >> 8;
 800449e:	787a      	ldrb	r2, [r7, #1]
 80044a0:	490a      	ldr	r1, [pc, #40]	; (80044cc <Appli_Generic_GetLevelStatus+0x90>)
 80044a2:	4613      	mov	r3, r2
 80044a4:	005b      	lsls	r3, r3, #1
 80044a6:	4413      	add	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	3302      	adds	r3, #2
 80044ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80044b2:	121b      	asrs	r3, r3, #8
 80044b4:	b21a      	sxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3303      	adds	r3, #3
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS; 
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr
 80044cc:	20004414 	.word	0x20004414

080044d0 <Appli_Generic_GetPowerOnOffStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetPowerOnOffStatus(MOBLEUINT8* pPower_Status, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	460b      	mov	r3, r1
 80044da:	807b      	strh	r3, [r7, #2]
 80044dc:	4613      	mov	r3, r2
 80044de:	707b      	strb	r3, [r7, #1]

  *pPower_Status = AppliPowerOnSet[elementIndex].PowerOnState;
 80044e0:	787b      	ldrb	r3, [r7, #1]
 80044e2:	4a06      	ldr	r2, [pc, #24]	; (80044fc <Appli_Generic_GetPowerOnOffStatus+0x2c>)
 80044e4:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80044e8:	b2da      	uxtb	r2, r3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 80044ee:	2300      	movs	r3, #0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr
 80044fc:	20004420 	.word	0x20004420

08004500 <Appli_Generic_GetDefaultTransitionStatus>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_GetDefaultTransitionStatus(MOBLEUINT8* pTransition_Status,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{ 
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
 8004508:	460b      	mov	r3, r1
 800450a:	807b      	strh	r3, [r7, #2]
 800450c:	4613      	mov	r3, r2
 800450e:	707b      	strb	r3, [r7, #1]

  *pTransition_Status = AppliDefaultTransitionSet[elementIndex].DefaultTransitionTime;
 8004510:	787b      	ldrb	r3, [r7, #1]
 8004512:	4a05      	ldr	r2, [pc, #20]	; (8004528 <Appli_Generic_GetDefaultTransitionStatus+0x28>)
 8004514:	5cd2      	ldrb	r2, [r2, r3]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS; 
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	20004424 	.word	0x20004424

0800452c <Appli_Generic_OnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_OnOff_Status(MOBLEUINT8 const *pOnOff_status, MOBLEUINT32 plength, 
                                        MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	4611      	mov	r1, r2
 8004538:	461a      	mov	r2, r3
 800453a:	460b      	mov	r3, r1
 800453c:	80fb      	strh	r3, [r7, #6]
 800453e:	4613      	mov	r3, r2
 8004540:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;
  
  TRACE_M(TF_GENERIC,"Generic_OnOff_Status callback received for element %d \r\n", elementIndex);
 8004542:	2100      	movs	r1, #0
 8004544:	4826      	ldr	r0, [pc, #152]	; (80045e0 <Appli_Generic_OnOff_Status+0xb4>)
 8004546:	f009 f813 	bl	800d570 <TraceHeader>
 800454a:	797b      	ldrb	r3, [r7, #5]
 800454c:	4619      	mov	r1, r3
 800454e:	4825      	ldr	r0, [pc, #148]	; (80045e4 <Appli_Generic_OnOff_Status+0xb8>)
 8004550:	f025 f812 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8204!\r\n");
 8004554:	2100      	movs	r1, #0
 8004556:	4822      	ldr	r0, [pc, #136]	; (80045e0 <Appli_Generic_OnOff_Status+0xb4>)
 8004558:	f009 f80a 	bl	800d570 <TraceHeader>
 800455c:	4822      	ldr	r0, [pc, #136]	; (80045e8 <Appli_Generic_OnOff_Status+0xbc>)
 800455e:	f025 f871 	bl	8029644 <puts>
  
  for(i = 0; i < plength; i++)
 8004562:	2300      	movs	r3, #0
 8004564:	75fb      	strb	r3, [r7, #23]
 8004566:	e031      	b.n	80045cc <Appli_Generic_OnOff_Status+0xa0>
  {
    if(i == 0)
 8004568:	7dfb      	ldrb	r3, [r7, #23]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10c      	bne.n	8004588 <Appli_Generic_OnOff_Status+0x5c>
      TRACE_M(TF_SERIAL_CTRL,"Present OnOff value: %d\n\r", pOnOff_status[i]);
 800456e:	2100      	movs	r1, #0
 8004570:	481b      	ldr	r0, [pc, #108]	; (80045e0 <Appli_Generic_OnOff_Status+0xb4>)
 8004572:	f008 fffd 	bl	800d570 <TraceHeader>
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	4413      	add	r3, r2
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	4619      	mov	r1, r3
 8004580:	481a      	ldr	r0, [pc, #104]	; (80045ec <Appli_Generic_OnOff_Status+0xc0>)
 8004582:	f024 fff9 	bl	8029578 <iprintf>
 8004586:	e01e      	b.n	80045c6 <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 1)
 8004588:	7dfb      	ldrb	r3, [r7, #23]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d10c      	bne.n	80045a8 <Appli_Generic_OnOff_Status+0x7c>
      TRACE_M(TF_SERIAL_CTRL,"Target OnOff value: %d\n\r", pOnOff_status[i]);
 800458e:	2100      	movs	r1, #0
 8004590:	4813      	ldr	r0, [pc, #76]	; (80045e0 <Appli_Generic_OnOff_Status+0xb4>)
 8004592:	f008 ffed 	bl	800d570 <TraceHeader>
 8004596:	7dfb      	ldrb	r3, [r7, #23]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	4413      	add	r3, r2
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	4619      	mov	r1, r3
 80045a0:	4813      	ldr	r0, [pc, #76]	; (80045f0 <Appli_Generic_OnOff_Status+0xc4>)
 80045a2:	f024 ffe9 	bl	8029578 <iprintf>
 80045a6:	e00e      	b.n	80045c6 <Appli_Generic_OnOff_Status+0x9a>
    else if(i == 2)
 80045a8:	7dfb      	ldrb	r3, [r7, #23]
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d10b      	bne.n	80045c6 <Appli_Generic_OnOff_Status+0x9a>
      TRACE_M(TF_SERIAL_CTRL,"Remaining Time value: %d\n\r", pOnOff_status[i]);
 80045ae:	2100      	movs	r1, #0
 80045b0:	480b      	ldr	r0, [pc, #44]	; (80045e0 <Appli_Generic_OnOff_Status+0xb4>)
 80045b2:	f008 ffdd 	bl	800d570 <TraceHeader>
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	68fa      	ldr	r2, [r7, #12]
 80045ba:	4413      	add	r3, r2
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	4619      	mov	r1, r3
 80045c0:	480c      	ldr	r0, [pc, #48]	; (80045f4 <Appli_Generic_OnOff_Status+0xc8>)
 80045c2:	f024 ffd9 	bl	8029578 <iprintf>
  for(i = 0; i < plength; i++)
 80045c6:	7dfb      	ldrb	r3, [r7, #23]
 80045c8:	3301      	adds	r3, #1
 80045ca:	75fb      	strb	r3, [r7, #23]
 80045cc:	7dfb      	ldrb	r3, [r7, #23]
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d8c9      	bhi.n	8004568 <Appli_Generic_OnOff_Status+0x3c>
  }
  
  return MOBLE_RESULT_SUCCESS;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	08032714 	.word	0x08032714
 80045e4:	0802dc3c 	.word	0x0802dc3c
 80045e8:	0802dc78 	.word	0x0802dc78
 80045ec:	0802dc80 	.word	0x0802dc80
 80045f0:	0802dc9c 	.word	0x0802dc9c
 80045f4:	0802dcb8 	.word	0x0802dcb8

080045f8 <Appli_Generic_DefaultTransitionTime_Status>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Status(MOBLEUINT8 const *pTransition_status , MOBLEUINT32 plength,MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	460b      	mov	r3, r1
 8004608:	80fb      	strh	r3, [r7, #6]
 800460a:	4613      	mov	r3, r2
 800460c:	717b      	strb	r3, [r7, #5]

  TRACE_M(TF_GENERIC,"Generic_DefaultTransitionTime_Status callback received for element %d \r\n", elementIndex);
 800460e:	2100      	movs	r1, #0
 8004610:	4809      	ldr	r0, [pc, #36]	; (8004638 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 8004612:	f008 ffad 	bl	800d570 <TraceHeader>
 8004616:	797b      	ldrb	r3, [r7, #5]
 8004618:	4619      	mov	r1, r3
 800461a:	4808      	ldr	r0, [pc, #32]	; (800463c <Appli_Generic_DefaultTransitionTime_Status+0x44>)
 800461c:	f024 ffac 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8210!\r\n");
 8004620:	2100      	movs	r1, #0
 8004622:	4805      	ldr	r0, [pc, #20]	; (8004638 <Appli_Generic_DefaultTransitionTime_Status+0x40>)
 8004624:	f008 ffa4 	bl	800d570 <TraceHeader>
 8004628:	4805      	ldr	r0, [pc, #20]	; (8004640 <Appli_Generic_DefaultTransitionTime_Status+0x48>)
 800462a:	f025 f80b 	bl	8029644 <puts>
  
  return MOBLE_RESULT_SUCCESS;
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}
 8004638:	08032730 	.word	0x08032730
 800463c:	0802dcd4 	.word	0x0802dcd4
 8004640:	0802dd20 	.word	0x0802dd20

08004644 <Appli_Generic_PowerOnOff_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Generic_PowerOnOff_Status(MOBLEUINT8 const *powerOnOff_status,\
                 MOBLEUINT32 plength, MOBLEUINT16 dstPeer, MOBLEUINT8 elementIndex) 
{  
 8004644:	b580      	push	{r7, lr}
 8004646:	b086      	sub	sp, #24
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	4611      	mov	r1, r2
 8004650:	461a      	mov	r2, r3
 8004652:	460b      	mov	r3, r1
 8004654:	80fb      	strh	r3, [r7, #6]
 8004656:	4613      	mov	r3, r2
 8004658:	717b      	strb	r3, [r7, #5]
  MOBLEUINT8 i;

  TRACE_M(TF_GENERIC,"Generic_PowerOnOff_Status callback received for element %d \r\n", elementIndex);
 800465a:	2100      	movs	r1, #0
 800465c:	4816      	ldr	r0, [pc, #88]	; (80046b8 <Appli_Generic_PowerOnOff_Status+0x74>)
 800465e:	f008 ff87 	bl	800d570 <TraceHeader>
 8004662:	797b      	ldrb	r3, [r7, #5]
 8004664:	4619      	mov	r1, r3
 8004666:	4815      	ldr	r0, [pc, #84]	; (80046bc <Appli_Generic_PowerOnOff_Status+0x78>)
 8004668:	f024 ff86 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8212!\r\n");
 800466c:	2100      	movs	r1, #0
 800466e:	4812      	ldr	r0, [pc, #72]	; (80046b8 <Appli_Generic_PowerOnOff_Status+0x74>)
 8004670:	f008 ff7e 	bl	800d570 <TraceHeader>
 8004674:	4812      	ldr	r0, [pc, #72]	; (80046c0 <Appli_Generic_PowerOnOff_Status+0x7c>)
 8004676:	f024 ffe5 	bl	8029644 <puts>
  
  for(i = 0; i < plength; i++)
 800467a:	2300      	movs	r3, #0
 800467c:	75fb      	strb	r3, [r7, #23]
 800467e:	e011      	b.n	80046a4 <Appli_Generic_PowerOnOff_Status+0x60>
  {
    if(i == 0)
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10b      	bne.n	800469e <Appli_Generic_PowerOnOff_Status+0x5a>
      TRACE_M(TF_SERIAL_CTRL,"On Power up value: %d\n\r", 
 8004686:	2100      	movs	r1, #0
 8004688:	480b      	ldr	r0, [pc, #44]	; (80046b8 <Appli_Generic_PowerOnOff_Status+0x74>)
 800468a:	f008 ff71 	bl	800d570 <TraceHeader>
 800468e:	7dfb      	ldrb	r3, [r7, #23]
 8004690:	68fa      	ldr	r2, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	4619      	mov	r1, r3
 8004698:	480a      	ldr	r0, [pc, #40]	; (80046c4 <Appli_Generic_PowerOnOff_Status+0x80>)
 800469a:	f024 ff6d 	bl	8029578 <iprintf>
  for(i = 0; i < plength; i++)
 800469e:	7dfb      	ldrb	r3, [r7, #23]
 80046a0:	3301      	adds	r3, #1
 80046a2:	75fb      	strb	r3, [r7, #23]
 80046a4:	7dfb      	ldrb	r3, [r7, #23]
 80046a6:	68ba      	ldr	r2, [r7, #8]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d8e9      	bhi.n	8004680 <Appli_Generic_PowerOnOff_Status+0x3c>
              powerOnOff_status[i]);
  }

  return MOBLE_RESULT_SUCCESS;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3718      	adds	r7, #24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
 80046b6:	bf00      	nop
 80046b8:	0803275c 	.word	0x0803275c
 80046bc:	0802dd28 	.word	0x0802dd28
 80046c0:	0802dd68 	.word	0x0802dd68
 80046c4:	0802dd70 	.word	0x0802dd70

080046c8 <Appli_Light_Lightness_Set>:
*/ 
MOBLE_RESULT Appli_Light_Lightness_Set(Light_LightnessStatus_t* pLight_LightnessParam,
                                       MOBLEUINT8 OptionalValid,
                                       MOBLEUINT16 dstPeer,
                                       MOBLEUINT8 elementIndex)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	4608      	mov	r0, r1
 80046d2:	4611      	mov	r1, r2
 80046d4:	461a      	mov	r2, r3
 80046d6:	4603      	mov	r3, r0
 80046d8:	70fb      	strb	r3, [r7, #3]
 80046da:	460b      	mov	r3, r1
 80046dc:	803b      	strh	r3, [r7, #0]
 80046de:	4613      	mov	r3, r2
 80046e0:	70bb      	strb	r3, [r7, #2]
  MOBLEUINT16 duty;
  static MOBLEUINT16 previousIntensity = 0;
  
  TRACE_M(TF_SERIAL_CTRL, "#824C!\n\r");
 80046e2:	2100      	movs	r1, #0
 80046e4:	4841      	ldr	r0, [pc, #260]	; (80047ec <Appli_Light_Lightness_Set+0x124>)
 80046e6:	f008 ff43 	bl	800d570 <TraceHeader>
 80046ea:	4841      	ldr	r0, [pc, #260]	; (80047f0 <Appli_Light_Lightness_Set+0x128>)
 80046ec:	f024 ff44 	bl	8029578 <iprintf>
  TRACE_M(TF_LIGHT, "Element index %d present 0x%.2x last 0x%.2x\r\n", 
 80046f0:	2100      	movs	r1, #0
 80046f2:	483e      	ldr	r0, [pc, #248]	; (80047ec <Appli_Light_Lightness_Set+0x124>)
 80046f4:	f008 ff3c 	bl	800d570 <TraceHeader>
 80046f8:	78b9      	ldrb	r1, [r7, #2]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	881b      	ldrh	r3, [r3, #0]
 80046fe:	b29b      	uxth	r3, r3
 8004700:	461a      	mov	r2, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004708:	b29b      	uxth	r3, r3
 800470a:	483a      	ldr	r0, [pc, #232]	; (80047f4 <Appli_Light_Lightness_Set+0x12c>)
 800470c:	f024 ff34 	bl	8029578 <iprintf>
          elementIndex,
          pLight_LightnessParam->LightnessPresentValue16,
          pLight_LightnessParam->LightnessLastStatus);  
  
  ApplilightnessSet[elementIndex].PresentState16 = pLight_LightnessParam->LightnessPresentValue16;
 8004710:	78ba      	ldrb	r2, [r7, #2]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	881b      	ldrh	r3, [r3, #0]
 8004716:	b298      	uxth	r0, r3
 8004718:	4937      	ldr	r1, [pc, #220]	; (80047f8 <Appli_Light_Lightness_Set+0x130>)
 800471a:	4613      	mov	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	4413      	add	r3, r2
 8004724:	440b      	add	r3, r1
 8004726:	4602      	mov	r2, r0
 8004728:	801a      	strh	r2, [r3, #0]
  ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessLastStatus;
 800472a:	78ba      	ldrb	r2, [r7, #2]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004732:	b298      	uxth	r0, r3
 8004734:	4930      	ldr	r1, [pc, #192]	; (80047f8 <Appli_Light_Lightness_Set+0x130>)
 8004736:	4613      	mov	r3, r2
 8004738:	009b      	lsls	r3, r3, #2
 800473a:	4413      	add	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	440b      	add	r3, r1
 8004742:	3302      	adds	r3, #2
 8004744:	4602      	mov	r2, r0
 8004746:	801a      	strh	r2, [r3, #0]

  if(pLight_LightnessParam->LightnessPresentValue16 != 0x00)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	881b      	ldrh	r3, [r3, #0]
 800474c:	b29b      	uxth	r3, r3
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <Appli_Light_Lightness_Set+0xa6>
  {
    ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessPresentValue16;
 8004752:	78ba      	ldrb	r2, [r7, #2]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b298      	uxth	r0, r3
 800475a:	4927      	ldr	r1, [pc, #156]	; (80047f8 <Appli_Light_Lightness_Set+0x130>)
 800475c:	4613      	mov	r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	4413      	add	r3, r2
 8004766:	440b      	add	r3, r1
 8004768:	3302      	adds	r3, #2
 800476a:	4602      	mov	r2, r0
 800476c:	801a      	strh	r2, [r3, #0]
  }

  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 800476e:	4b23      	ldr	r3, [pc, #140]	; (80047fc <Appli_Light_Lightness_Set+0x134>)
 8004770:	881a      	ldrh	r2, [r3, #0]
 8004772:	4b23      	ldr	r3, [pc, #140]	; (8004800 <Appli_Light_Lightness_Set+0x138>)
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d905      	bls.n	8004786 <Appli_Light_Lightness_Set+0xbe>
 800477a:	4b20      	ldr	r3, [pc, #128]	; (80047fc <Appli_Light_Lightness_Set+0x134>)
 800477c:	881b      	ldrh	r3, [r3, #0]
 800477e:	f647 42f5 	movw	r2, #31989	; 0x7cf5
 8004782:	4293      	cmp	r3, r2
 8004784:	d903      	bls.n	800478e <Appli_Light_Lightness_Set+0xc6>
     IntensityValue == INTENSITY_LEVEL_ZERO)
 8004786:	4b1d      	ldr	r3, [pc, #116]	; (80047fc <Appli_Light_Lightness_Set+0x134>)
 8004788:	881b      	ldrh	r3, [r3, #0]
  if(((IntensityValue > previousIntensity) && (IntensityValue <PWM_TIME_PERIOD)) ||
 800478a:	2b00      	cmp	r3, #0
 800478c:	d103      	bne.n	8004796 <Appli_Light_Lightness_Set+0xce>
  {
    IntensityFlag = MOBLE_FALSE;
 800478e:	4b1d      	ldr	r3, [pc, #116]	; (8004804 <Appli_Light_Lightness_Set+0x13c>)
 8004790:	2200      	movs	r2, #0
 8004792:	701a      	strb	r2, [r3, #0]
 8004794:	e002      	b.n	800479c <Appli_Light_Lightness_Set+0xd4>
  }
  else
  {
    IntensityFlag = MOBLE_TRUE;
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <Appli_Light_Lightness_Set+0x13c>)
 8004798:	2201      	movs	r2, #1
 800479a:	701a      	strb	r2, [r3, #0]
  }
  previousIntensity = IntensityValue; 
 800479c:	4b17      	ldr	r3, [pc, #92]	; (80047fc <Appli_Light_Lightness_Set+0x134>)
 800479e:	881a      	ldrh	r2, [r3, #0]
 80047a0:	4b17      	ldr	r3, [pc, #92]	; (8004800 <Appli_Light_Lightness_Set+0x138>)
 80047a2:	801a      	strh	r2, [r3, #0]
  {
    BSP_LED_Off(LED_BLUE);
  }
#endif

  duty = PwmValueMapping(ApplilightnessSet[elementIndex].PresentState16 , 0xfFFF ,0); 
 80047a4:	78ba      	ldrb	r2, [r7, #2]
 80047a6:	4914      	ldr	r1, [pc, #80]	; (80047f8 <Appli_Light_Lightness_Set+0x130>)
 80047a8:	4613      	mov	r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	005b      	lsls	r3, r3, #1
 80047b0:	4413      	add	r3, r2
 80047b2:	440b      	add	r3, r1
 80047b4:	881b      	ldrh	r3, [r3, #0]
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2200      	movs	r2, #0
 80047ba:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80047be:	4618      	mov	r0, r3
 80047c0:	f002 f804 	bl	80067cc <PwmValueMapping>
 80047c4:	4603      	mov	r3, r0
 80047c6:	81fb      	strh	r3, [r7, #14]
  Appli_LightPwmValue.IntensityValue = duty;
 80047c8:	4a0f      	ldr	r2, [pc, #60]	; (8004808 <Appli_Light_Lightness_Set+0x140>)
 80047ca:	89fb      	ldrh	r3, [r7, #14]
 80047cc:	8013      	strh	r3, [r2, #0]
  Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 80047ce:	4b0e      	ldr	r3, [pc, #56]	; (8004808 <Appli_Light_Lightness_Set+0x140>)
 80047d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047d2:	2004      	movs	r0, #4
 80047d4:	f000 fa7a 	bl	8004ccc <Light_UpdateLedValue>

  /* set the flag value for NVM store */
  NvmStatePowerFlag_Set(LIGHT_LIGHTNESS_NVM_FLAG, elementIndex);
 80047d8:	78bb      	ldrb	r3, [r7, #2]
 80047da:	4619      	mov	r1, r3
 80047dc:	2003      	movs	r0, #3
 80047de:	f009 f90b 	bl	800d9f8 <NvmStatePowerFlag_Set>
  
  return MOBLE_RESULT_SUCCESS;
 80047e2:	2300      	movs	r3, #0
  
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3710      	adds	r7, #16
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	0803277c 	.word	0x0803277c
 80047f0:	0802dda4 	.word	0x0802dda4
 80047f4:	0802ddb0 	.word	0x0802ddb0
 80047f8:	20000074 	.word	0x20000074
 80047fc:	2000443c 	.word	0x2000443c
 8004800:	20004438 	.word	0x20004438
 8004804:	2000443e 	.word	0x2000443e
 8004808:	2000442c 	.word	0x2000442c

0800480c <Appli_Light_Lightness_Linear_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Linear_Set(Light_LightnessStatus_t* pLight_LightnessLinearParam,
                                              MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	4608      	mov	r0, r1
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	4603      	mov	r3, r0
 800481c:	70fb      	strb	r3, [r7, #3]
 800481e:	460b      	mov	r3, r1
 8004820:	803b      	strh	r3, [r7, #0]
 8004822:	4613      	mov	r3, r2
 8004824:	70bb      	strb	r3, [r7, #2]
  ApplilightnessLinearSet[elementIndex].PresentState16 = pLight_LightnessLinearParam->LinearPresentValue16; 
 8004826:	78bb      	ldrb	r3, [r7, #2]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	8852      	ldrh	r2, [r2, #2]
 800482c:	b291      	uxth	r1, r2
 800482e:	4a0c      	ldr	r2, [pc, #48]	; (8004860 <Appli_Light_Lightness_Linear_Set+0x54>)
 8004830:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  
  TRACE_M(TF_LIGHT,"Light_LightnessLinear_Set callback received for elementIndex %d \r\n", elementIndex);
 8004834:	2100      	movs	r1, #0
 8004836:	480b      	ldr	r0, [pc, #44]	; (8004864 <Appli_Light_Lightness_Linear_Set+0x58>)
 8004838:	f008 fe9a 	bl	800d570 <TraceHeader>
 800483c:	78bb      	ldrb	r3, [r7, #2]
 800483e:	4619      	mov	r1, r3
 8004840:	4809      	ldr	r0, [pc, #36]	; (8004868 <Appli_Light_Lightness_Linear_Set+0x5c>)
 8004842:	f024 fe99 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8250!\n\r");
 8004846:	2100      	movs	r1, #0
 8004848:	4806      	ldr	r0, [pc, #24]	; (8004864 <Appli_Light_Lightness_Linear_Set+0x58>)
 800484a:	f008 fe91 	bl	800d570 <TraceHeader>
 800484e:	4807      	ldr	r0, [pc, #28]	; (800486c <Appli_Light_Lightness_Linear_Set+0x60>)
 8004850:	f024 fe92 	bl	8029578 <iprintf>
  
  return MOBLE_RESULT_SUCCESS;
 8004854:	2300      	movs	r3, #0
}
 8004856:	4618      	mov	r0, r3
 8004858:	3708      	adds	r7, #8
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	20004428 	.word	0x20004428
 8004864:	08032798 	.word	0x08032798
 8004868:	0802dde0 	.word	0x0802dde0
 800486c:	0802de24 	.word	0x0802de24

08004870 <Appli_Light_Lightness_Default_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Default_Set(Light_LightnessDefaultParam_t* pLight_LightnessDefaultParam,
                                               MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b082      	sub	sp, #8
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	4608      	mov	r0, r1
 800487a:	4611      	mov	r1, r2
 800487c:	461a      	mov	r2, r3
 800487e:	4603      	mov	r3, r0
 8004880:	70fb      	strb	r3, [r7, #3]
 8004882:	460b      	mov	r3, r1
 8004884:	803b      	strh	r3, [r7, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	70bb      	strb	r3, [r7, #2]
  if(pLight_LightnessDefaultParam->LightnessDefaultStatus > 0)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	881b      	ldrh	r3, [r3, #0]
 800488e:	b29b      	uxth	r3, r3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <Appli_Light_Lightness_Default_Set+0x2c>
  {
    BSP_LED_On(LED_BLUE);
 8004894:	2000      	movs	r0, #0
 8004896:	f003 f943 	bl	8007b20 <BSP_LED_On>
 800489a:	e002      	b.n	80048a2 <Appli_Light_Lightness_Default_Set+0x32>
  }
  else
  {
    BSP_LED_Off(LED_BLUE);
 800489c:	2000      	movs	r0, #0
 800489e:	f003 f959 	bl	8007b54 <BSP_LED_Off>
  }
  
  ApplilightnessSet[elementIndex].LightnessDefault = 
 80048a2:	78ba      	ldrb	r2, [r7, #2]
    pLight_LightnessDefaultParam->LightnessDefaultStatus;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	881b      	ldrh	r3, [r3, #0]
 80048a8:	b298      	uxth	r0, r3
  ApplilightnessSet[elementIndex].LightnessDefault = 
 80048aa:	4912      	ldr	r1, [pc, #72]	; (80048f4 <Appli_Light_Lightness_Default_Set+0x84>)
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	440b      	add	r3, r1
 80048b8:	3304      	adds	r3, #4
 80048ba:	4602      	mov	r2, r0
 80048bc:	801a      	strh	r2, [r3, #0]
  
  TRACE_M(TF_SERIAL_CTRL,"#8259! \r\n");
 80048be:	2100      	movs	r1, #0
 80048c0:	480d      	ldr	r0, [pc, #52]	; (80048f8 <Appli_Light_Lightness_Default_Set+0x88>)
 80048c2:	f008 fe55 	bl	800d570 <TraceHeader>
 80048c6:	480d      	ldr	r0, [pc, #52]	; (80048fc <Appli_Light_Lightness_Default_Set+0x8c>)
 80048c8:	f024 febc 	bl	8029644 <puts>
  TRACE_M(TF_LIGHT,"Appli_Light_Lightness_Default_Set callback received for elementIndex %d \r\n", elementIndex);
 80048cc:	2100      	movs	r1, #0
 80048ce:	480a      	ldr	r0, [pc, #40]	; (80048f8 <Appli_Light_Lightness_Default_Set+0x88>)
 80048d0:	f008 fe4e 	bl	800d570 <TraceHeader>
 80048d4:	78bb      	ldrb	r3, [r7, #2]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4809      	ldr	r0, [pc, #36]	; (8004900 <Appli_Light_Lightness_Default_Set+0x90>)
 80048da:	f024 fe4d 	bl	8029578 <iprintf>
	
  NvmStatePowerFlag_Set(LIGHT_LIGHTNESS_NVM_FLAG,elementIndex);
 80048de:	78bb      	ldrb	r3, [r7, #2]
 80048e0:	4619      	mov	r1, r3
 80048e2:	2003      	movs	r0, #3
 80048e4:	f009 f888 	bl	800d9f8 <NvmStatePowerFlag_Set>
   
  return MOBLE_RESULT_SUCCESS;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000074 	.word	0x20000074
 80048f8:	080327bc 	.word	0x080327bc
 80048fc:	0802de30 	.word	0x0802de30
 8004900:	0802de3c 	.word	0x0802de3c

08004904 <Appli_Light_Lightness_Last_Set>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Last_Set(Light_LightnessStatus_t* pLight_LightnessParam,                                             
                                              MOBLEUINT8 elementIndex)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  ApplilightnessSet[elementIndex].LastLightness16 = pLight_LightnessParam->LightnessLastStatus;
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004918:	b298      	uxth	r0, r3
 800491a:	4914      	ldr	r1, [pc, #80]	; (800496c <Appli_Light_Lightness_Last_Set+0x68>)
 800491c:	4613      	mov	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4413      	add	r3, r2
 8004922:	005b      	lsls	r3, r3, #1
 8004924:	4413      	add	r3, r2
 8004926:	440b      	add	r3, r1
 8004928:	3302      	adds	r3, #2
 800492a:	4602      	mov	r2, r0
 800492c:	801a      	strh	r2, [r3, #0]
  
  TRACE_M(TF_SERIAL_CTRL,"#8259!\n\r");
 800492e:	2100      	movs	r1, #0
 8004930:	480f      	ldr	r0, [pc, #60]	; (8004970 <Appli_Light_Lightness_Last_Set+0x6c>)
 8004932:	f008 fe1d 	bl	800d570 <TraceHeader>
 8004936:	480f      	ldr	r0, [pc, #60]	; (8004974 <Appli_Light_Lightness_Last_Set+0x70>)
 8004938:	f024 fe1e 	bl	8029578 <iprintf>
  TRACE_M(TF_LIGHT,
 800493c:	2100      	movs	r1, #0
 800493e:	480c      	ldr	r0, [pc, #48]	; (8004970 <Appli_Light_Lightness_Last_Set+0x6c>)
 8004940:	f008 fe16 	bl	800d570 <TraceHeader>
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	4909      	ldr	r1, [pc, #36]	; (800496c <Appli_Light_Lightness_Last_Set+0x68>)
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4413      	add	r3, r2
 8004952:	440b      	add	r3, r1
 8004954:	3302      	adds	r3, #2
 8004956:	881b      	ldrh	r3, [r3, #0]
 8004958:	b29b      	uxth	r3, r3
 800495a:	4619      	mov	r1, r3
 800495c:	4806      	ldr	r0, [pc, #24]	; (8004978 <Appli_Light_Lightness_Last_Set+0x74>)
 800495e:	f024 fe0b 	bl	8029578 <iprintf>
          "Appli_Light_Lightness_Last_Set Light Last Value 0x%.2x \r\n", 
          ApplilightnessSet[elementIndex].LastLightness16);
   
  return MOBLE_RESULT_SUCCESS;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3708      	adds	r7, #8
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	20000074 	.word	0x20000074
 8004970:	080327e0 	.word	0x080327e0
 8004974:	0802de88 	.word	0x0802de88
 8004978:	0802de94 	.word	0x0802de94

0800497c <Appli_Light_Lightness_Range_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Range_Set(Light_LightnessRangeParam_t* pLight_LightnessRangeParam,
                                             MOBLEUINT8 OptionalValid, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	461a      	mov	r2, r3
 800498a:	4603      	mov	r3, r0
 800498c:	70fb      	strb	r3, [r7, #3]
 800498e:	460b      	mov	r3, r1
 8004990:	803b      	strh	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	70bb      	strb	r3, [r7, #2]
  ApplilightnessSet[elementIndex].StatusCode = pLight_LightnessRangeParam->StatusCode;
 8004996:	78ba      	ldrb	r2, [r7, #2]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	7818      	ldrb	r0, [r3, #0]
 800499c:	491e      	ldr	r1, [pc, #120]	; (8004a18 <Appli_Light_Lightness_Range_Set+0x9c>)
 800499e:	4613      	mov	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	4413      	add	r3, r2
 80049a4:	005b      	lsls	r3, r3, #1
 80049a6:	4413      	add	r3, r2
 80049a8:	440b      	add	r3, r1
 80049aa:	3306      	adds	r3, #6
 80049ac:	4602      	mov	r2, r0
 80049ae:	701a      	strb	r2, [r3, #0]
  ApplilightnessSet[elementIndex].RangeMin = pLight_LightnessRangeParam->MinRangeStatus; 
 80049b0:	78ba      	ldrb	r2, [r7, #2]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80049b8:	b298      	uxth	r0, r3
 80049ba:	4917      	ldr	r1, [pc, #92]	; (8004a18 <Appli_Light_Lightness_Range_Set+0x9c>)
 80049bc:	4613      	mov	r3, r2
 80049be:	009b      	lsls	r3, r3, #2
 80049c0:	4413      	add	r3, r2
 80049c2:	005b      	lsls	r3, r3, #1
 80049c4:	4413      	add	r3, r2
 80049c6:	440b      	add	r3, r1
 80049c8:	4602      	mov	r2, r0
 80049ca:	f8a3 2007 	strh.w	r2, [r3, #7]
  ApplilightnessSet[elementIndex].RangeMax = pLight_LightnessRangeParam->MaxRangeStatus;
 80049ce:	78ba      	ldrb	r2, [r7, #2]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80049d6:	b298      	uxth	r0, r3
 80049d8:	490f      	ldr	r1, [pc, #60]	; (8004a18 <Appli_Light_Lightness_Range_Set+0x9c>)
 80049da:	4613      	mov	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	4413      	add	r3, r2
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	4413      	add	r3, r2
 80049e4:	440b      	add	r3, r1
 80049e6:	3308      	adds	r3, #8
 80049e8:	4602      	mov	r2, r0
 80049ea:	f8a3 2001 	strh.w	r2, [r3, #1]
  
  TRACE_M(TF_SERIAL_CTRL,"#825B! \n\r");
 80049ee:	2100      	movs	r1, #0
 80049f0:	480a      	ldr	r0, [pc, #40]	; (8004a1c <Appli_Light_Lightness_Range_Set+0xa0>)
 80049f2:	f008 fdbd 	bl	800d570 <TraceHeader>
 80049f6:	480a      	ldr	r0, [pc, #40]	; (8004a20 <Appli_Light_Lightness_Range_Set+0xa4>)
 80049f8:	f024 fdbe 	bl	8029578 <iprintf>
  TRACE_M(TF_LIGHT,"Appli_Light_Lightness_Range_Set callback received for elementIndex %d \r\n", elementIndex);
 80049fc:	2100      	movs	r1, #0
 80049fe:	4807      	ldr	r0, [pc, #28]	; (8004a1c <Appli_Light_Lightness_Range_Set+0xa0>)
 8004a00:	f008 fdb6 	bl	800d570 <TraceHeader>
 8004a04:	78bb      	ldrb	r3, [r7, #2]
 8004a06:	4619      	mov	r1, r3
 8004a08:	4806      	ldr	r0, [pc, #24]	; (8004a24 <Appli_Light_Lightness_Range_Set+0xa8>)
 8004a0a:	f024 fdb5 	bl	8029578 <iprintf>
  
  return MOBLE_RESULT_SUCCESS;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	20000074 	.word	0x20000074
 8004a1c:	08032800 	.word	0x08032800
 8004a20:	0802ded0 	.word	0x0802ded0
 8004a24:	0802dedc 	.word	0x0802dedc

08004a28 <Appli_Light_GetLightnessStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/  
MOBLE_RESULT Appli_Light_GetLightnessStatus(MOBLEUINT8* lLightnessState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	807b      	strh	r3, [r7, #2]
 8004a34:	4613      	mov	r3, r2
 8004a36:	707b      	strb	r3, [r7, #1]
  *(lLightnessState) = ApplilightnessSet[elementIndex].PresentState16;
 8004a38:	787a      	ldrb	r2, [r7, #1]
 8004a3a:	4921      	ldr	r1, [pc, #132]	; (8004ac0 <Appli_Light_GetLightnessStatus+0x98>)
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	4413      	add	r3, r2
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	4413      	add	r3, r2
 8004a46:	440b      	add	r3, r1
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+1) = ApplilightnessSet[elementIndex].PresentState16 >> 8;
 8004a52:	787a      	ldrb	r2, [r7, #1]
 8004a54:	491a      	ldr	r1, [pc, #104]	; (8004ac0 <Appli_Light_GetLightnessStatus+0x98>)
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	4413      	add	r3, r2
 8004a60:	440b      	add	r3, r1
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	b29b      	uxth	r3, r3
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+2) = ApplilightnessSet[elementIndex].LastLightness16 ;
 8004a72:	787a      	ldrb	r2, [r7, #1]
 8004a74:	4912      	ldr	r1, [pc, #72]	; (8004ac0 <Appli_Light_GetLightnessStatus+0x98>)
 8004a76:	4613      	mov	r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	4413      	add	r3, r2
 8004a7c:	005b      	lsls	r3, r3, #1
 8004a7e:	4413      	add	r3, r2
 8004a80:	440b      	add	r3, r1
 8004a82:	3302      	adds	r3, #2
 8004a84:	881b      	ldrh	r3, [r3, #0]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3302      	adds	r3, #2
 8004a8c:	b2d2      	uxtb	r2, r2
 8004a8e:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+3) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004a90:	787a      	ldrb	r2, [r7, #1]
 8004a92:	490b      	ldr	r1, [pc, #44]	; (8004ac0 <Appli_Light_GetLightnessStatus+0x98>)
 8004a94:	4613      	mov	r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	4413      	add	r3, r2
 8004a9a:	005b      	lsls	r3, r3, #1
 8004a9c:	4413      	add	r3, r2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	3302      	adds	r3, #2
 8004aa2:	881b      	ldrh	r3, [r3, #0]
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	0a1b      	lsrs	r3, r3, #8
 8004aa8:	b29a      	uxth	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3303      	adds	r3, #3
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]
    
  return MOBLE_RESULT_SUCCESS;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr
 8004ac0:	20000074 	.word	0x20000074

08004ac4 <Appli_Light_GetLightnessLinearStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessLinearStatus(MOBLEUINT8* lLightnessState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	460b      	mov	r3, r1
 8004ace:	807b      	strh	r3, [r7, #2]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	707b      	strb	r3, [r7, #1]
  *(lLightnessState) = ApplilightnessLinearSet[elementIndex].PresentState16;
 8004ad4:	787b      	ldrb	r3, [r7, #1]
 8004ad6:	4a1b      	ldr	r2, [pc, #108]	; (8004b44 <Appli_Light_GetLightnessLinearStatus+0x80>)
 8004ad8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004adc:	b2da      	uxtb	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+1) = ApplilightnessLinearSet[elementIndex].PresentState16 >> 8;
 8004ae2:	787b      	ldrb	r3, [r7, #1]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	; (8004b44 <Appli_Light_GetLightnessLinearStatus+0x80>)
 8004ae6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aea:	0a1b      	lsrs	r3, r3, #8
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3301      	adds	r3, #1
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+2) = ApplilightnessSet[elementIndex].LastLightness16 ;
 8004af6:	787a      	ldrb	r2, [r7, #1]
 8004af8:	4913      	ldr	r1, [pc, #76]	; (8004b48 <Appli_Light_GetLightnessLinearStatus+0x84>)
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	005b      	lsls	r3, r3, #1
 8004b02:	4413      	add	r3, r2
 8004b04:	440b      	add	r3, r1
 8004b06:	3302      	adds	r3, #2
 8004b08:	881b      	ldrh	r3, [r3, #0]
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3302      	adds	r3, #2
 8004b10:	b2d2      	uxtb	r2, r2
 8004b12:	701a      	strb	r2, [r3, #0]
  *(lLightnessState+3) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004b14:	787a      	ldrb	r2, [r7, #1]
 8004b16:	490c      	ldr	r1, [pc, #48]	; (8004b48 <Appli_Light_GetLightnessLinearStatus+0x84>)
 8004b18:	4613      	mov	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	4413      	add	r3, r2
 8004b1e:	005b      	lsls	r3, r3, #1
 8004b20:	4413      	add	r3, r2
 8004b22:	440b      	add	r3, r1
 8004b24:	3302      	adds	r3, #2
 8004b26:	881b      	ldrh	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	0a1b      	lsrs	r3, r3, #8
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	3303      	adds	r3, #3
 8004b32:	b2d2      	uxtb	r2, r2
 8004b34:	701a      	strb	r2, [r3, #0]
    
  return MOBLE_RESULT_SUCCESS;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20004428 	.word	0x20004428
 8004b48:	20000074 	.word	0x20000074

08004b4c <Appli_Light_GetLightnessDefaultStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessDefaultStatus(MOBLEUINT8* lDefaultState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	707b      	strb	r3, [r7, #1]
  *(lDefaultState) = ApplilightnessSet[elementIndex].LightnessDefault;
 8004b5c:	787a      	ldrb	r2, [r7, #1]
 8004b5e:	4912      	ldr	r1, [pc, #72]	; (8004ba8 <Appli_Light_GetLightnessDefaultStatus+0x5c>)
 8004b60:	4613      	mov	r3, r2
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4413      	add	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	440b      	add	r3, r1
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	881b      	ldrh	r3, [r3, #0]
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	b2da      	uxtb	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	701a      	strb	r2, [r3, #0]
  *(lDefaultState+1) = ApplilightnessSet[elementIndex].LightnessDefault >> 8;
 8004b78:	787a      	ldrb	r2, [r7, #1]
 8004b7a:	490b      	ldr	r1, [pc, #44]	; (8004ba8 <Appli_Light_GetLightnessDefaultStatus+0x5c>)
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	440b      	add	r3, r1
 8004b88:	3304      	adds	r3, #4
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	0a1b      	lsrs	r3, r3, #8
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b2d2      	uxtb	r2, r2
 8004b98:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8004b9a:	2300      	movs	r3, #0
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr
 8004ba8:	20000074 	.word	0x20000074

08004bac <Appli_Light_GetLightnessLastStatus>:
* @param  lLastState: Pointer to the status message
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessLastStatus(MOBLEUINT8* lLastState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	460b      	mov	r3, r1
 8004bb6:	807b      	strh	r3, [r7, #2]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	707b      	strb	r3, [r7, #1]
  *(lLastState) = ApplilightnessSet[elementIndex].LastLightness16;
 8004bbc:	787a      	ldrb	r2, [r7, #1]
 8004bbe:	4912      	ldr	r1, [pc, #72]	; (8004c08 <Appli_Light_GetLightnessLastStatus+0x5c>)
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4413      	add	r3, r2
 8004bc6:	005b      	lsls	r3, r3, #1
 8004bc8:	4413      	add	r3, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	3302      	adds	r3, #2
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	b2da      	uxtb	r2, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	701a      	strb	r2, [r3, #0]
  *(lLastState+1) = ApplilightnessSet[elementIndex].LastLightness16 >> 8;
 8004bd8:	787a      	ldrb	r2, [r7, #1]
 8004bda:	490b      	ldr	r1, [pc, #44]	; (8004c08 <Appli_Light_GetLightnessLastStatus+0x5c>)
 8004bdc:	4613      	mov	r3, r2
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	005b      	lsls	r3, r3, #1
 8004be4:	4413      	add	r3, r2
 8004be6:	440b      	add	r3, r1
 8004be8:	3302      	adds	r3, #2
 8004bea:	881b      	ldrh	r3, [r3, #0]
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	b29a      	uxth	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	701a      	strb	r2, [r3, #0]

  return MOBLE_RESULT_SUCCESS;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	370c      	adds	r7, #12
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr
 8004c08:	20000074 	.word	0x20000074

08004c0c <Appli_Light_GetLightnessRangeStatus>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_GetLightnessRangeStatus(MOBLEUINT8* lRangeState, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	807b      	strh	r3, [r7, #2]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	707b      	strb	r3, [r7, #1]
  *(lRangeState) = ApplilightnessSet[elementIndex].StatusCode;
 8004c1c:	787a      	ldrb	r2, [r7, #1]
 8004c1e:	492a      	ldr	r1, [pc, #168]	; (8004cc8 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c20:	4613      	mov	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	4413      	add	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3306      	adds	r3, #6
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	701a      	strb	r2, [r3, #0]
  *(lRangeState+1) = ApplilightnessSet[elementIndex].RangeMin;
 8004c34:	787a      	ldrb	r2, [r7, #1]
 8004c36:	4924      	ldr	r1, [pc, #144]	; (8004cc8 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	4413      	add	r3, r2
 8004c42:	440b      	add	r3, r1
 8004c44:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3301      	adds	r3, #1
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
  *(lRangeState+2) = ApplilightnessSet[elementIndex].RangeMin >> 8;
 8004c52:	787a      	ldrb	r2, [r7, #1]
 8004c54:	491c      	ldr	r1, [pc, #112]	; (8004cc8 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	440b      	add	r3, r1
 8004c62:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	3302      	adds	r3, #2
 8004c70:	b2d2      	uxtb	r2, r2
 8004c72:	701a      	strb	r2, [r3, #0]
  *(lRangeState+3) = ApplilightnessSet[elementIndex].RangeMax;
 8004c74:	787a      	ldrb	r2, [r7, #1]
 8004c76:	4914      	ldr	r1, [pc, #80]	; (8004cc8 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c78:	4613      	mov	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	4413      	add	r3, r2
 8004c7e:	005b      	lsls	r3, r3, #1
 8004c80:	4413      	add	r3, r2
 8004c82:	440b      	add	r3, r1
 8004c84:	3308      	adds	r3, #8
 8004c86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3303      	adds	r3, #3
 8004c90:	b2d2      	uxtb	r2, r2
 8004c92:	701a      	strb	r2, [r3, #0]
  *(lRangeState+4) = ApplilightnessSet[elementIndex].RangeMax >> 8;
 8004c94:	787a      	ldrb	r2, [r7, #1]
 8004c96:	490c      	ldr	r1, [pc, #48]	; (8004cc8 <Appli_Light_GetLightnessRangeStatus+0xbc>)
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4413      	add	r3, r2
 8004ca2:	440b      	add	r3, r1
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	0a1b      	lsrs	r3, r3, #8
 8004cae:	b29a      	uxth	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	3304      	adds	r3, #4
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	370c      	adds	r7, #12
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	20000074 	.word	0x20000074

08004ccc <Light_UpdateLedValue>:
* @brief  Function to set the values for PWM for RGB board.
* @param  state: decided the state of PWM according to the condition.
* @retval void
*/
void Light_UpdateLedValue(MOBLEUINT8 state ,Appli_LightPwmValue_t light_state)
{
 8004ccc:	b490      	push	{r4, r7}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8004cda:	4623      	mov	r3, r4
 8004cdc:	73fb      	strb	r3, [r7, #15]
    Modify_PWM(RED_LED, light_state.PwmRedValue); 
    Modify_PWM(GREEN_LED, light_state.PwmGreenValue); 
    Modify_PWM(BLUE_LED, light_state.PwmBlueValue); 
#endif    
  } 
}
 8004cde:	bf00      	nop
 8004ce0:	3710      	adds	r7, #16
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bc90      	pop	{r4, r7}
 8004ce6:	4770      	bx	lr

08004ce8 <Appli_Light_Lightness_Status>:
* @param  pLength: length of data 
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Lightness_Status(MOBLEUINT8 const *pLightness_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	80fb      	strh	r3, [r7, #6]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Status callback received for element %d \r\n", elementIndex);
 8004d02:	2100      	movs	r1, #0
 8004d04:	483a      	ldr	r0, [pc, #232]	; (8004df0 <Appli_Light_Lightness_Status+0x108>)
 8004d06:	f008 fc33 	bl	800d570 <TraceHeader>
 8004d0a:	797b      	ldrb	r3, [r7, #5]
 8004d0c:	4619      	mov	r1, r3
 8004d0e:	4839      	ldr	r0, [pc, #228]	; (8004df4 <Appli_Light_Lightness_Status+0x10c>)
 8004d10:	f024 fc32 	bl	8029578 <iprintf>
    TRACE_M(TF_SERIAL_CTRL,"#824E!\r\n");
 8004d14:	2100      	movs	r1, #0
 8004d16:	4836      	ldr	r0, [pc, #216]	; (8004df0 <Appli_Light_Lightness_Status+0x108>)
 8004d18:	f008 fc2a 	bl	800d570 <TraceHeader>
 8004d1c:	4836      	ldr	r0, [pc, #216]	; (8004df8 <Appli_Light_Lightness_Status+0x110>)
 8004d1e:	f024 fc91 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	617b      	str	r3, [r7, #20]
 8004d26:	e05a      	b.n	8004dde <Appli_Light_Lightness_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d002      	beq.n	8004d34 <Appli_Light_Lightness_Status+0x4c>
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b02      	cmp	r3, #2
 8004d32:	d105      	bne.n	8004d40 <Appli_Light_Lightness_Status+0x58>
    {
      value = pLightness_status[i];
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	4413      	add	r3, r2
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	827b      	strh	r3, [r7, #18]
 8004d3e:	e04b      	b.n	8004dd8 <Appli_Light_Lightness_Status+0xf0>
    }
    else if(i == 1)
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d118      	bne.n	8004d78 <Appli_Light_Lightness_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Lightness: 0x%x (%d)\r\n",
 8004d46:	2100      	movs	r1, #0
 8004d48:	4829      	ldr	r0, [pc, #164]	; (8004df0 <Appli_Light_Lightness_Status+0x108>)
 8004d4a:	f008 fc11 	bl	800d570 <TraceHeader>
 8004d4e:	8a7a      	ldrh	r2, [r7, #18]
 8004d50:	68f9      	ldr	r1, [r7, #12]
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	440b      	add	r3, r1
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	021b      	lsls	r3, r3, #8
 8004d5a:	ea42 0003 	orr.w	r0, r2, r3
 8004d5e:	8a7a      	ldrh	r2, [r7, #18]
 8004d60:	68f9      	ldr	r1, [r7, #12]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	440b      	add	r3, r1
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	021b      	lsls	r3, r3, #8
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	4601      	mov	r1, r0
 8004d70:	4822      	ldr	r0, [pc, #136]	; (8004dfc <Appli_Light_Lightness_Status+0x114>)
 8004d72:	f024 fc01 	bl	8029578 <iprintf>
 8004d76:	e02f      	b.n	8004dd8 <Appli_Light_Lightness_Status+0xf0>
              value | pLightness_status[i] << 8,
              value | pLightness_status[i] << 8);
    }
    else if(i == 3)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2b03      	cmp	r3, #3
 8004d7c:	d118      	bne.n	8004db0 <Appli_Light_Lightness_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Lightness: 0x%x (%d)\r\n",
 8004d7e:	2100      	movs	r1, #0
 8004d80:	481b      	ldr	r0, [pc, #108]	; (8004df0 <Appli_Light_Lightness_Status+0x108>)
 8004d82:	f008 fbf5 	bl	800d570 <TraceHeader>
 8004d86:	8a7a      	ldrh	r2, [r7, #18]
 8004d88:	68f9      	ldr	r1, [r7, #12]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	440b      	add	r3, r1
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	ea42 0003 	orr.w	r0, r2, r3
 8004d96:	8a7a      	ldrh	r2, [r7, #18]
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	440b      	add	r3, r1
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	4313      	orrs	r3, r2
 8004da4:	461a      	mov	r2, r3
 8004da6:	4601      	mov	r1, r0
 8004da8:	4815      	ldr	r0, [pc, #84]	; (8004e00 <Appli_Light_Lightness_Status+0x118>)
 8004daa:	f024 fbe5 	bl	8029578 <iprintf>
 8004dae:	e013      	b.n	8004dd8 <Appli_Light_Lightness_Status+0xf0>
              value | pLightness_status[i] << 8,
              value | pLightness_status[i] << 8);
    }
    else if(i == 4)
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	2b04      	cmp	r3, #4
 8004db4:	d110      	bne.n	8004dd8 <Appli_Light_Lightness_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 8004db6:	2100      	movs	r1, #0
 8004db8:	480d      	ldr	r0, [pc, #52]	; (8004df0 <Appli_Light_Lightness_Status+0x108>)
 8004dba:	f008 fbd9 	bl	800d570 <TraceHeader>
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	4413      	add	r3, r2
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	480c      	ldr	r0, [pc, #48]	; (8004e04 <Appli_Light_Lightness_Status+0x11c>)
 8004dd4:	f024 fbd0 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d3a0      	bcc.n	8004d28 <Appli_Light_Lightness_Status+0x40>
              pLightness_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004de6:	2300      	movs	r3, #0
}
 8004de8:	4618      	mov	r0, r3
 8004dea:	3718      	adds	r7, #24
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	08032820 	.word	0x08032820
 8004df4:	0802df44 	.word	0x0802df44
 8004df8:	0802df80 	.word	0x0802df80
 8004dfc:	0802df88 	.word	0x0802df88
 8004e00:	0802dfa8 	.word	0x0802dfa8
 8004e04:	0802dfc8 	.word	0x0802dfc8

08004e08 <Appli_Light_Lightness_Linear_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Linear_Status(MOBLEUINT8 const *pLightnessLinear_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	4611      	mov	r1, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	460b      	mov	r3, r1
 8004e18:	80fb      	strh	r3, [r7, #6]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8004e1e:	2300      	movs	r3, #0
 8004e20:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Linear_Status callback received for element %d \r\n", elementIndex);
 8004e22:	2100      	movs	r1, #0
 8004e24:	483a      	ldr	r0, [pc, #232]	; (8004f10 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004e26:	f008 fba3 	bl	800d570 <TraceHeader>
 8004e2a:	797b      	ldrb	r3, [r7, #5]
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	4839      	ldr	r0, [pc, #228]	; (8004f14 <Appli_Light_Lightness_Linear_Status+0x10c>)
 8004e30:	f024 fba2 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8252!\r\n");
 8004e34:	2100      	movs	r1, #0
 8004e36:	4836      	ldr	r0, [pc, #216]	; (8004f10 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004e38:	f008 fb9a 	bl	800d570 <TraceHeader>
 8004e3c:	4836      	ldr	r0, [pc, #216]	; (8004f18 <Appli_Light_Lightness_Linear_Status+0x110>)
 8004e3e:	f024 fc01 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	e05a      	b.n	8004efe <Appli_Light_Lightness_Linear_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <Appli_Light_Lightness_Linear_Status+0x4c>
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b02      	cmp	r3, #2
 8004e52:	d105      	bne.n	8004e60 <Appli_Light_Lightness_Linear_Status+0x58>
    {
      value = pLightnessLinear_status[i];
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	4413      	add	r3, r2
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	827b      	strh	r3, [r7, #18]
 8004e5e:	e04b      	b.n	8004ef8 <Appli_Light_Lightness_Linear_Status+0xf0>
    }
    else if(i == 1)
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d118      	bne.n	8004e98 <Appli_Light_Lightness_Linear_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Lightness: 0x%x (%d)\r\n",
 8004e66:	2100      	movs	r1, #0
 8004e68:	4829      	ldr	r0, [pc, #164]	; (8004f10 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004e6a:	f008 fb81 	bl	800d570 <TraceHeader>
 8004e6e:	8a7a      	ldrh	r2, [r7, #18]
 8004e70:	68f9      	ldr	r1, [r7, #12]
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	440b      	add	r3, r1
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	ea42 0003 	orr.w	r0, r2, r3
 8004e7e:	8a7a      	ldrh	r2, [r7, #18]
 8004e80:	68f9      	ldr	r1, [r7, #12]
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	440b      	add	r3, r1
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	021b      	lsls	r3, r3, #8
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	4601      	mov	r1, r0
 8004e90:	4822      	ldr	r0, [pc, #136]	; (8004f1c <Appli_Light_Lightness_Linear_Status+0x114>)
 8004e92:	f024 fb71 	bl	8029578 <iprintf>
 8004e96:	e02f      	b.n	8004ef8 <Appli_Light_Lightness_Linear_Status+0xf0>
              value | pLightnessLinear_status[i] << 8,
              value | pLightnessLinear_status[i] << 8);
    }
    else if(i == 3)
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	2b03      	cmp	r3, #3
 8004e9c:	d118      	bne.n	8004ed0 <Appli_Light_Lightness_Linear_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Lightness: 0x%x (%d)\r\n",
 8004e9e:	2100      	movs	r1, #0
 8004ea0:	481b      	ldr	r0, [pc, #108]	; (8004f10 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004ea2:	f008 fb65 	bl	800d570 <TraceHeader>
 8004ea6:	8a7a      	ldrh	r2, [r7, #18]
 8004ea8:	68f9      	ldr	r1, [r7, #12]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	440b      	add	r3, r1
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	ea42 0003 	orr.w	r0, r2, r3
 8004eb6:	8a7a      	ldrh	r2, [r7, #18]
 8004eb8:	68f9      	ldr	r1, [r7, #12]
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	440b      	add	r3, r1
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	021b      	lsls	r3, r3, #8
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	461a      	mov	r2, r3
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	4815      	ldr	r0, [pc, #84]	; (8004f20 <Appli_Light_Lightness_Linear_Status+0x118>)
 8004eca:	f024 fb55 	bl	8029578 <iprintf>
 8004ece:	e013      	b.n	8004ef8 <Appli_Light_Lightness_Linear_Status+0xf0>
              value | pLightnessLinear_status[i] << 8,
              value | pLightnessLinear_status[i] << 8);
    }
    else if(i == 4)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	2b04      	cmp	r3, #4
 8004ed4:	d110      	bne.n	8004ef8 <Appli_Light_Lightness_Linear_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	480d      	ldr	r0, [pc, #52]	; (8004f10 <Appli_Light_Lightness_Linear_Status+0x108>)
 8004eda:	f008 fb49 	bl	800d570 <TraceHeader>
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	4413      	add	r3, r2
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	480c      	ldr	r0, [pc, #48]	; (8004f24 <Appli_Light_Lightness_Linear_Status+0x11c>)
 8004ef4:	f024 fb40 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	3301      	adds	r3, #1
 8004efc:	617b      	str	r3, [r7, #20]
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	429a      	cmp	r2, r3
 8004f04:	d3a0      	bcc.n	8004e48 <Appli_Light_Lightness_Linear_Status+0x40>
              pLightnessLinear_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	08032840 	.word	0x08032840
 8004f14:	0802dfe4 	.word	0x0802dfe4
 8004f18:	0802e028 	.word	0x0802e028
 8004f1c:	0802df88 	.word	0x0802df88
 8004f20:	0802dfa8 	.word	0x0802dfa8
 8004f24:	0802dfc8 	.word	0x0802dfc8

08004f28 <Appli_Light_Lightness_Last_Status>:
*/
MOBLE_RESULT Appli_Light_Lightness_Last_Status(MOBLEUINT8 const *pLightnessLast_status, 
                                               MOBLEUINT32 pLength, 
                                               MOBLEUINT16 dstPeer, 
                                               MOBLEUINT8 elementIndex)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b086      	sub	sp, #24
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	4611      	mov	r1, r2
 8004f34:	461a      	mov	r2, r3
 8004f36:	460b      	mov	r3, r1
 8004f38:	80fb      	strh	r3, [r7, #6]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
 
  TRACE_M(TF_LIGHT,"Light_Lightness_Last_Status callback received for element %d \r\n", elementIndex);
 8004f3e:	2100      	movs	r1, #0
 8004f40:	4820      	ldr	r0, [pc, #128]	; (8004fc4 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004f42:	f008 fb15 	bl	800d570 <TraceHeader>
 8004f46:	797b      	ldrb	r3, [r7, #5]
 8004f48:	4619      	mov	r1, r3
 8004f4a:	481f      	ldr	r0, [pc, #124]	; (8004fc8 <Appli_Light_Lightness_Last_Status+0xa0>)
 8004f4c:	f024 fb14 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8256!\r\n");
 8004f50:	2100      	movs	r1, #0
 8004f52:	481c      	ldr	r0, [pc, #112]	; (8004fc4 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004f54:	f008 fb0c 	bl	800d570 <TraceHeader>
 8004f58:	481c      	ldr	r0, [pc, #112]	; (8004fcc <Appli_Light_Lightness_Last_Status+0xa4>)
 8004f5a:	f024 fb73 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8004f5e:	2300      	movs	r3, #0
 8004f60:	617b      	str	r3, [r7, #20]
 8004f62:	e026      	b.n	8004fb2 <Appli_Light_Lightness_Last_Status+0x8a>
  {
    if(i == 0)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d105      	bne.n	8004f76 <Appli_Light_Lightness_Last_Status+0x4e>
    {
      value = pLightnessLast_status[i];
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	827b      	strh	r3, [r7, #18]
 8004f74:	e01a      	b.n	8004fac <Appli_Light_Lightness_Last_Status+0x84>
    }
    else if(i == 1)
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d117      	bne.n	8004fac <Appli_Light_Lightness_Last_Status+0x84>
    {
      TRACE_M(TF_LIGHT,"Lightness Last: 0x%x (%d)\r\n",
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4811      	ldr	r0, [pc, #68]	; (8004fc4 <Appli_Light_Lightness_Last_Status+0x9c>)
 8004f80:	f008 faf6 	bl	800d570 <TraceHeader>
 8004f84:	8a7a      	ldrh	r2, [r7, #18]
 8004f86:	68f9      	ldr	r1, [r7, #12]
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	440b      	add	r3, r1
 8004f8c:	781b      	ldrb	r3, [r3, #0]
 8004f8e:	021b      	lsls	r3, r3, #8
 8004f90:	ea42 0003 	orr.w	r0, r2, r3
 8004f94:	8a7a      	ldrh	r2, [r7, #18]
 8004f96:	68f9      	ldr	r1, [r7, #12]
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	440b      	add	r3, r1
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	4601      	mov	r1, r0
 8004fa6:	480a      	ldr	r0, [pc, #40]	; (8004fd0 <Appli_Light_Lightness_Last_Status+0xa8>)
 8004fa8:	f024 fae6 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	697a      	ldr	r2, [r7, #20]
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d3d4      	bcc.n	8004f64 <Appli_Light_Lightness_Last_Status+0x3c>
              value | pLightnessLast_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3718      	adds	r7, #24
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	08032864 	.word	0x08032864
 8004fc8:	0802e030 	.word	0x0802e030
 8004fcc:	0802e070 	.word	0x0802e070
 8004fd0:	0802e078 	.word	0x0802e078

08004fd4 <Appli_Light_Lightness_Default_Status>:
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Default_Status(MOBLEUINT8 const *pLightnessDefault_status, MOBLEUINT32 pLength
                                                  , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	4611      	mov	r1, r2
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	80fb      	strh	r3, [r7, #6]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Default_Status callback received for element %d \r\n", elementIndex);
 8004fea:	2100      	movs	r1, #0
 8004fec:	4820      	ldr	r0, [pc, #128]	; (8005070 <Appli_Light_Lightness_Default_Status+0x9c>)
 8004fee:	f008 fabf 	bl	800d570 <TraceHeader>
 8004ff2:	797b      	ldrb	r3, [r7, #5]
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	481f      	ldr	r0, [pc, #124]	; (8005074 <Appli_Light_Lightness_Default_Status+0xa0>)
 8004ff8:	f024 fabe 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8256!\r\n");
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	481c      	ldr	r0, [pc, #112]	; (8005070 <Appli_Light_Lightness_Default_Status+0x9c>)
 8005000:	f008 fab6 	bl	800d570 <TraceHeader>
 8005004:	481c      	ldr	r0, [pc, #112]	; (8005078 <Appli_Light_Lightness_Default_Status+0xa4>)
 8005006:	f024 fb1d 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 800500a:	2300      	movs	r3, #0
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e026      	b.n	800505e <Appli_Light_Lightness_Default_Status+0x8a>
  {
    if(i == 0)
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d105      	bne.n	8005022 <Appli_Light_Lightness_Default_Status+0x4e>
    {
      value = pLightnessDefault_status[i];
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	4413      	add	r3, r2
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	827b      	strh	r3, [r7, #18]
 8005020:	e01a      	b.n	8005058 <Appli_Light_Lightness_Default_Status+0x84>
    }
    else if(i == 1)
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d117      	bne.n	8005058 <Appli_Light_Lightness_Default_Status+0x84>
    {
      TRACE_M(TF_LIGHT,"Lightness Default: 0x%x (%d)\r\n",
 8005028:	2100      	movs	r1, #0
 800502a:	4811      	ldr	r0, [pc, #68]	; (8005070 <Appli_Light_Lightness_Default_Status+0x9c>)
 800502c:	f008 faa0 	bl	800d570 <TraceHeader>
 8005030:	8a7a      	ldrh	r2, [r7, #18]
 8005032:	68f9      	ldr	r1, [r7, #12]
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	440b      	add	r3, r1
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	ea42 0003 	orr.w	r0, r2, r3
 8005040:	8a7a      	ldrh	r2, [r7, #18]
 8005042:	68f9      	ldr	r1, [r7, #12]
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	440b      	add	r3, r1
 8005048:	781b      	ldrb	r3, [r3, #0]
 800504a:	021b      	lsls	r3, r3, #8
 800504c:	4313      	orrs	r3, r2
 800504e:	461a      	mov	r2, r3
 8005050:	4601      	mov	r1, r0
 8005052:	480a      	ldr	r0, [pc, #40]	; (800507c <Appli_Light_Lightness_Default_Status+0xa8>)
 8005054:	f024 fa90 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	3301      	adds	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	429a      	cmp	r2, r3
 8005064:	d3d4      	bcc.n	8005010 <Appli_Light_Lightness_Default_Status+0x3c>
              value | pLightnessDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3718      	adds	r7, #24
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	08032888 	.word	0x08032888
 8005074:	0802e094 	.word	0x0802e094
 8005078:	0802e070 	.word	0x0802e070
 800507c:	0802e0d8 	.word	0x0802e0d8

08005080 <Appli_Light_Lightness_Range_Status>:
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Lightness_Range_Status(MOBLEUINT8 const *pLightnessRange_status, MOBLEUINT32 pLength
                                                , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	60f8      	str	r0, [r7, #12]
 8005088:	60b9      	str	r1, [r7, #8]
 800508a:	4611      	mov	r1, r2
 800508c:	461a      	mov	r2, r3
 800508e:	460b      	mov	r3, r1
 8005090:	80fb      	strh	r3, [r7, #6]
 8005092:	4613      	mov	r3, r2
 8005094:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_Lightness_Range_Status callback received for element %d \r\n", elementIndex);
 8005096:	2100      	movs	r1, #0
 8005098:	483a      	ldr	r0, [pc, #232]	; (8005184 <Appli_Light_Lightness_Range_Status+0x104>)
 800509a:	f008 fa69 	bl	800d570 <TraceHeader>
 800509e:	797b      	ldrb	r3, [r7, #5]
 80050a0:	4619      	mov	r1, r3
 80050a2:	4839      	ldr	r0, [pc, #228]	; (8005188 <Appli_Light_Lightness_Range_Status+0x108>)
 80050a4:	f024 fa68 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8258!\r\n");
 80050a8:	2100      	movs	r1, #0
 80050aa:	4836      	ldr	r0, [pc, #216]	; (8005184 <Appli_Light_Lightness_Range_Status+0x104>)
 80050ac:	f008 fa60 	bl	800d570 <TraceHeader>
 80050b0:	4836      	ldr	r0, [pc, #216]	; (800518c <Appli_Light_Lightness_Range_Status+0x10c>)
 80050b2:	f024 fac7 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80050b6:	2300      	movs	r3, #0
 80050b8:	617b      	str	r3, [r7, #20]
 80050ba:	e05a      	b.n	8005172 <Appli_Light_Lightness_Range_Status+0xf2>
  {
    if(i == 0)
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d111      	bne.n	80050e6 <Appli_Light_Lightness_Range_Status+0x66>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\r\n",
 80050c2:	2100      	movs	r1, #0
 80050c4:	482f      	ldr	r0, [pc, #188]	; (8005184 <Appli_Light_Lightness_Range_Status+0x104>)
 80050c6:	f008 fa53 	bl	800d570 <TraceHeader>
 80050ca:	68fa      	ldr	r2, [r7, #12]
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4413      	add	r3, r2
 80050d0:	781b      	ldrb	r3, [r3, #0]
 80050d2:	4619      	mov	r1, r3
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	4413      	add	r3, r2
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	461a      	mov	r2, r3
 80050de:	482c      	ldr	r0, [pc, #176]	; (8005190 <Appli_Light_Lightness_Range_Status+0x110>)
 80050e0:	f024 fa4a 	bl	8029578 <iprintf>
 80050e4:	e042      	b.n	800516c <Appli_Light_Lightness_Range_Status+0xec>
              pLightnessRange_status[i],
              pLightnessRange_status[i]);
    }
    else if((i == 1) || (i == 3))
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d002      	beq.n	80050f2 <Appli_Light_Lightness_Range_Status+0x72>
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d105      	bne.n	80050fe <Appli_Light_Lightness_Range_Status+0x7e>
    {
      value = pLightnessRange_status[i];
 80050f2:	68fa      	ldr	r2, [r7, #12]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	4413      	add	r3, r2
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	827b      	strh	r3, [r7, #18]
 80050fc:	e036      	b.n	800516c <Appli_Light_Lightness_Range_Status+0xec>
    }
    else if(i == 2)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d118      	bne.n	8005136 <Appli_Light_Lightness_Range_Status+0xb6>
    {
      TRACE_M(TF_LIGHT,"Range Min: 0x%x (%d)\r\n",
 8005104:	2100      	movs	r1, #0
 8005106:	481f      	ldr	r0, [pc, #124]	; (8005184 <Appli_Light_Lightness_Range_Status+0x104>)
 8005108:	f008 fa32 	bl	800d570 <TraceHeader>
 800510c:	8a7a      	ldrh	r2, [r7, #18]
 800510e:	68f9      	ldr	r1, [r7, #12]
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	440b      	add	r3, r1
 8005114:	781b      	ldrb	r3, [r3, #0]
 8005116:	021b      	lsls	r3, r3, #8
 8005118:	ea42 0003 	orr.w	r0, r2, r3
 800511c:	8a7a      	ldrh	r2, [r7, #18]
 800511e:	68f9      	ldr	r1, [r7, #12]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	440b      	add	r3, r1
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	021b      	lsls	r3, r3, #8
 8005128:	4313      	orrs	r3, r2
 800512a:	461a      	mov	r2, r3
 800512c:	4601      	mov	r1, r0
 800512e:	4819      	ldr	r0, [pc, #100]	; (8005194 <Appli_Light_Lightness_Range_Status+0x114>)
 8005130:	f024 fa22 	bl	8029578 <iprintf>
 8005134:	e01a      	b.n	800516c <Appli_Light_Lightness_Range_Status+0xec>
              value | pLightnessRange_status[i] << 8,
              value | pLightnessRange_status[i] << 8);
    }
    else if(i == 4)
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2b04      	cmp	r3, #4
 800513a:	d117      	bne.n	800516c <Appli_Light_Lightness_Range_Status+0xec>
    {
      TRACE_M(TF_LIGHT,"Range Max: 0x%x (%d)\r\n",
 800513c:	2100      	movs	r1, #0
 800513e:	4811      	ldr	r0, [pc, #68]	; (8005184 <Appli_Light_Lightness_Range_Status+0x104>)
 8005140:	f008 fa16 	bl	800d570 <TraceHeader>
 8005144:	8a7a      	ldrh	r2, [r7, #18]
 8005146:	68f9      	ldr	r1, [r7, #12]
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	440b      	add	r3, r1
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	021b      	lsls	r3, r3, #8
 8005150:	ea42 0003 	orr.w	r0, r2, r3
 8005154:	8a7a      	ldrh	r2, [r7, #18]
 8005156:	68f9      	ldr	r1, [r7, #12]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	440b      	add	r3, r1
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	021b      	lsls	r3, r3, #8
 8005160:	4313      	orrs	r3, r2
 8005162:	461a      	mov	r2, r3
 8005164:	4601      	mov	r1, r0
 8005166:	480c      	ldr	r0, [pc, #48]	; (8005198 <Appli_Light_Lightness_Range_Status+0x118>)
 8005168:	f024 fa06 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3301      	adds	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	697a      	ldr	r2, [r7, #20]
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	429a      	cmp	r2, r3
 8005178:	d3a0      	bcc.n	80050bc <Appli_Light_Lightness_Range_Status+0x3c>
              value | pLightnessRange_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	080328b0 	.word	0x080328b0
 8005188:	0802e0f8 	.word	0x0802e0f8
 800518c:	0802e13c 	.word	0x0802e13c
 8005190:	0802e144 	.word	0x0802e144
 8005194:	0802e160 	.word	0x0802e160
 8005198:	0802e178 	.word	0x0802e178

0800519c <Appli_Light_Ctl_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_Ctl_Status(MOBLEUINT8 const *pLightCtl_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b086      	sub	sp, #24
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	60f8      	str	r0, [r7, #12]
 80051a4:	60b9      	str	r1, [r7, #8]
 80051a6:	4611      	mov	r1, r2
 80051a8:	461a      	mov	r2, r3
 80051aa:	460b      	mov	r3, r1
 80051ac:	80fb      	strh	r3, [r7, #6]
 80051ae:	4613      	mov	r3, r2
 80051b0:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	827b      	strh	r3, [r7, #18]
#endif

  TRACE_M(TF_LIGHT,"Light_Ctl_Status callback received for element %d \r\n", elementIndex);
 80051b6:	2100      	movs	r1, #0
 80051b8:	485a      	ldr	r0, [pc, #360]	; (8005324 <Appli_Light_Ctl_Status+0x188>)
 80051ba:	f008 f9d9 	bl	800d570 <TraceHeader>
 80051be:	797b      	ldrb	r3, [r7, #5]
 80051c0:	4619      	mov	r1, r3
 80051c2:	4859      	ldr	r0, [pc, #356]	; (8005328 <Appli_Light_Ctl_Status+0x18c>)
 80051c4:	f024 f9d8 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8260!\r\n");
 80051c8:	2100      	movs	r1, #0
 80051ca:	4856      	ldr	r0, [pc, #344]	; (8005324 <Appli_Light_Ctl_Status+0x188>)
 80051cc:	f008 f9d0 	bl	800d570 <TraceHeader>
 80051d0:	4856      	ldr	r0, [pc, #344]	; (800532c <Appli_Light_Ctl_Status+0x190>)
 80051d2:	f024 fa37 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80051d6:	2300      	movs	r3, #0
 80051d8:	617b      	str	r3, [r7, #20]
 80051da:	e098      	b.n	800530e <Appli_Light_Ctl_Status+0x172>
  {
    if((i == 0) || (i == 2) || (i == 4) || (i == 6))
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <Appli_Light_Ctl_Status+0x58>
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d005      	beq.n	80051f4 <Appli_Light_Ctl_Status+0x58>
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b04      	cmp	r3, #4
 80051ec:	d002      	beq.n	80051f4 <Appli_Light_Ctl_Status+0x58>
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b06      	cmp	r3, #6
 80051f2:	d105      	bne.n	8005200 <Appli_Light_Ctl_Status+0x64>
    {
      value = pLightCtl_status[i];
 80051f4:	68fa      	ldr	r2, [r7, #12]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	4413      	add	r3, r2
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	827b      	strh	r3, [r7, #18]
 80051fe:	e083      	b.n	8005308 <Appli_Light_Ctl_Status+0x16c>
    }
    else if(i == 1)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b01      	cmp	r3, #1
 8005204:	d118      	bne.n	8005238 <Appli_Light_Ctl_Status+0x9c>
    {
      TRACE_M(TF_LIGHT,"Present CTL Lightness: 0x%x (%d)\r\n",
 8005206:	2100      	movs	r1, #0
 8005208:	4846      	ldr	r0, [pc, #280]	; (8005324 <Appli_Light_Ctl_Status+0x188>)
 800520a:	f008 f9b1 	bl	800d570 <TraceHeader>
 800520e:	8a7a      	ldrh	r2, [r7, #18]
 8005210:	68f9      	ldr	r1, [r7, #12]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	440b      	add	r3, r1
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	ea42 0003 	orr.w	r0, r2, r3
 800521e:	8a7a      	ldrh	r2, [r7, #18]
 8005220:	68f9      	ldr	r1, [r7, #12]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	440b      	add	r3, r1
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	021b      	lsls	r3, r3, #8
 800522a:	4313      	orrs	r3, r2
 800522c:	461a      	mov	r2, r3
 800522e:	4601      	mov	r1, r0
 8005230:	483f      	ldr	r0, [pc, #252]	; (8005330 <Appli_Light_Ctl_Status+0x194>)
 8005232:	f024 f9a1 	bl	8029578 <iprintf>
 8005236:	e067      	b.n	8005308 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 3)
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	2b03      	cmp	r3, #3
 800523c:	d118      	bne.n	8005270 <Appli_Light_Ctl_Status+0xd4>
    {
      TRACE_M(TF_LIGHT,"Present CTL Temperature: 0x%x (%d)\r\n",
 800523e:	2100      	movs	r1, #0
 8005240:	4838      	ldr	r0, [pc, #224]	; (8005324 <Appli_Light_Ctl_Status+0x188>)
 8005242:	f008 f995 	bl	800d570 <TraceHeader>
 8005246:	8a7a      	ldrh	r2, [r7, #18]
 8005248:	68f9      	ldr	r1, [r7, #12]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	440b      	add	r3, r1
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	021b      	lsls	r3, r3, #8
 8005252:	ea42 0003 	orr.w	r0, r2, r3
 8005256:	8a7a      	ldrh	r2, [r7, #18]
 8005258:	68f9      	ldr	r1, [r7, #12]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	440b      	add	r3, r1
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	021b      	lsls	r3, r3, #8
 8005262:	4313      	orrs	r3, r2
 8005264:	461a      	mov	r2, r3
 8005266:	4601      	mov	r1, r0
 8005268:	4832      	ldr	r0, [pc, #200]	; (8005334 <Appli_Light_Ctl_Status+0x198>)
 800526a:	f024 f985 	bl	8029578 <iprintf>
 800526e:	e04b      	b.n	8005308 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 5)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	2b05      	cmp	r3, #5
 8005274:	d118      	bne.n	80052a8 <Appli_Light_Ctl_Status+0x10c>
    {
      TRACE_M(TF_LIGHT,"Target CTL Lightness: 0x%x (%d)\r\n",
 8005276:	2100      	movs	r1, #0
 8005278:	482a      	ldr	r0, [pc, #168]	; (8005324 <Appli_Light_Ctl_Status+0x188>)
 800527a:	f008 f979 	bl	800d570 <TraceHeader>
 800527e:	8a7a      	ldrh	r2, [r7, #18]
 8005280:	68f9      	ldr	r1, [r7, #12]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	440b      	add	r3, r1
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	021b      	lsls	r3, r3, #8
 800528a:	ea42 0003 	orr.w	r0, r2, r3
 800528e:	8a7a      	ldrh	r2, [r7, #18]
 8005290:	68f9      	ldr	r1, [r7, #12]
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	440b      	add	r3, r1
 8005296:	781b      	ldrb	r3, [r3, #0]
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	4313      	orrs	r3, r2
 800529c:	461a      	mov	r2, r3
 800529e:	4601      	mov	r1, r0
 80052a0:	4825      	ldr	r0, [pc, #148]	; (8005338 <Appli_Light_Ctl_Status+0x19c>)
 80052a2:	f024 f969 	bl	8029578 <iprintf>
 80052a6:	e02f      	b.n	8005308 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 7)
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	2b07      	cmp	r3, #7
 80052ac:	d118      	bne.n	80052e0 <Appli_Light_Ctl_Status+0x144>
    {
      TRACE_M(TF_LIGHT,"Target CTL Temperature: 0x%x (%d)\r\n",
 80052ae:	2100      	movs	r1, #0
 80052b0:	481c      	ldr	r0, [pc, #112]	; (8005324 <Appli_Light_Ctl_Status+0x188>)
 80052b2:	f008 f95d 	bl	800d570 <TraceHeader>
 80052b6:	8a7a      	ldrh	r2, [r7, #18]
 80052b8:	68f9      	ldr	r1, [r7, #12]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	440b      	add	r3, r1
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	021b      	lsls	r3, r3, #8
 80052c2:	ea42 0003 	orr.w	r0, r2, r3
 80052c6:	8a7a      	ldrh	r2, [r7, #18]
 80052c8:	68f9      	ldr	r1, [r7, #12]
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	440b      	add	r3, r1
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	021b      	lsls	r3, r3, #8
 80052d2:	4313      	orrs	r3, r2
 80052d4:	461a      	mov	r2, r3
 80052d6:	4601      	mov	r1, r0
 80052d8:	4818      	ldr	r0, [pc, #96]	; (800533c <Appli_Light_Ctl_Status+0x1a0>)
 80052da:	f024 f94d 	bl	8029578 <iprintf>
 80052de:	e013      	b.n	8005308 <Appli_Light_Ctl_Status+0x16c>
              value | pLightCtl_status[i] << 8,
              value | pLightCtl_status[i] << 8);
    }
    else if(i == 8)
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	2b08      	cmp	r3, #8
 80052e4:	d110      	bne.n	8005308 <Appli_Light_Ctl_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Remaining Time:0x%x (%d)\r\n",
 80052e6:	2100      	movs	r1, #0
 80052e8:	480e      	ldr	r0, [pc, #56]	; (8005324 <Appli_Light_Ctl_Status+0x188>)
 80052ea:	f008 f941 	bl	800d570 <TraceHeader>
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	781b      	ldrb	r3, [r3, #0]
 80052f6:	4619      	mov	r1, r3
 80052f8:	68fa      	ldr	r2, [r7, #12]
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	4413      	add	r3, r2
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	461a      	mov	r2, r3
 8005302:	480f      	ldr	r0, [pc, #60]	; (8005340 <Appli_Light_Ctl_Status+0x1a4>)
 8005304:	f024 f938 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3301      	adds	r3, #1
 800530c:	617b      	str	r3, [r7, #20]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	429a      	cmp	r2, r3
 8005314:	f4ff af62 	bcc.w	80051dc <Appli_Light_Ctl_Status+0x40>
              pLightCtl_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	080328d4 	.word	0x080328d4
 8005328:	0802e190 	.word	0x0802e190
 800532c:	0802e1c8 	.word	0x0802e1c8
 8005330:	0802e1d0 	.word	0x0802e1d0
 8005334:	0802e1f4 	.word	0x0802e1f4
 8005338:	0802e21c 	.word	0x0802e21c
 800533c:	0802e240 	.word	0x0802e240
 8005340:	0802e264 	.word	0x0802e264

08005344 <Appli_Light_CtlTemperature_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_CtlTemperature_Status(MOBLEUINT8 const *pLightCtlTemp_status, MOBLEUINT32 pLength
                                               , MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	4611      	mov	r1, r2
 8005350:	461a      	mov	r2, r3
 8005352:	460b      	mov	r3, r1
 8005354:	80fb      	strh	r3, [r7, #6]
 8005356:	4613      	mov	r3, r2
 8005358:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_CtlTemperature_Status callback received for element %d \r\n", elementIndex);
 800535e:	2100      	movs	r1, #0
 8005360:	485a      	ldr	r0, [pc, #360]	; (80054cc <Appli_Light_CtlTemperature_Status+0x188>)
 8005362:	f008 f905 	bl	800d570 <TraceHeader>
 8005366:	797b      	ldrb	r3, [r7, #5]
 8005368:	4619      	mov	r1, r3
 800536a:	4859      	ldr	r0, [pc, #356]	; (80054d0 <Appli_Light_CtlTemperature_Status+0x18c>)
 800536c:	f024 f904 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8266!\r\n");
 8005370:	2100      	movs	r1, #0
 8005372:	4856      	ldr	r0, [pc, #344]	; (80054cc <Appli_Light_CtlTemperature_Status+0x188>)
 8005374:	f008 f8fc 	bl	800d570 <TraceHeader>
 8005378:	4856      	ldr	r0, [pc, #344]	; (80054d4 <Appli_Light_CtlTemperature_Status+0x190>)
 800537a:	f024 f963 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e098      	b.n	80054b6 <Appli_Light_CtlTemperature_Status+0x172>
  {
    if((i == 0) || (i == 2) || (i == 4) || (i == 6))
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d008      	beq.n	800539c <Appli_Light_CtlTemperature_Status+0x58>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d005      	beq.n	800539c <Appli_Light_CtlTemperature_Status+0x58>
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d002      	beq.n	800539c <Appli_Light_CtlTemperature_Status+0x58>
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	2b06      	cmp	r3, #6
 800539a:	d105      	bne.n	80053a8 <Appli_Light_CtlTemperature_Status+0x64>
    {
      value = pLightCtlTemp_status[i];
 800539c:	68fa      	ldr	r2, [r7, #12]
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	4413      	add	r3, r2
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	827b      	strh	r3, [r7, #18]
 80053a6:	e083      	b.n	80054b0 <Appli_Light_CtlTemperature_Status+0x16c>
    }
    else if(i == 1)
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	2b01      	cmp	r3, #1
 80053ac:	d118      	bne.n	80053e0 <Appli_Light_CtlTemperature_Status+0x9c>
    {
      TRACE_M(TF_LIGHT,"Present CTL Temperature: 0x%x (%d)\r\n",
 80053ae:	2100      	movs	r1, #0
 80053b0:	4846      	ldr	r0, [pc, #280]	; (80054cc <Appli_Light_CtlTemperature_Status+0x188>)
 80053b2:	f008 f8dd 	bl	800d570 <TraceHeader>
 80053b6:	8a7a      	ldrh	r2, [r7, #18]
 80053b8:	68f9      	ldr	r1, [r7, #12]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	440b      	add	r3, r1
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	021b      	lsls	r3, r3, #8
 80053c2:	ea42 0003 	orr.w	r0, r2, r3
 80053c6:	8a7a      	ldrh	r2, [r7, #18]
 80053c8:	68f9      	ldr	r1, [r7, #12]
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	440b      	add	r3, r1
 80053ce:	781b      	ldrb	r3, [r3, #0]
 80053d0:	021b      	lsls	r3, r3, #8
 80053d2:	4313      	orrs	r3, r2
 80053d4:	461a      	mov	r2, r3
 80053d6:	4601      	mov	r1, r0
 80053d8:	483f      	ldr	r0, [pc, #252]	; (80054d8 <Appli_Light_CtlTemperature_Status+0x194>)
 80053da:	f024 f8cd 	bl	8029578 <iprintf>
 80053de:	e067      	b.n	80054b0 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 3)
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d118      	bne.n	8005418 <Appli_Light_CtlTemperature_Status+0xd4>
    {
      TRACE_M(TF_LIGHT,"Present CTL Delta UV: 0x%x (%d)\r\n",
 80053e6:	2100      	movs	r1, #0
 80053e8:	4838      	ldr	r0, [pc, #224]	; (80054cc <Appli_Light_CtlTemperature_Status+0x188>)
 80053ea:	f008 f8c1 	bl	800d570 <TraceHeader>
 80053ee:	8a7a      	ldrh	r2, [r7, #18]
 80053f0:	68f9      	ldr	r1, [r7, #12]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	440b      	add	r3, r1
 80053f6:	781b      	ldrb	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	ea42 0003 	orr.w	r0, r2, r3
 80053fe:	8a7a      	ldrh	r2, [r7, #18]
 8005400:	68f9      	ldr	r1, [r7, #12]
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	440b      	add	r3, r1
 8005406:	781b      	ldrb	r3, [r3, #0]
 8005408:	021b      	lsls	r3, r3, #8
 800540a:	4313      	orrs	r3, r2
 800540c:	461a      	mov	r2, r3
 800540e:	4601      	mov	r1, r0
 8005410:	4832      	ldr	r0, [pc, #200]	; (80054dc <Appli_Light_CtlTemperature_Status+0x198>)
 8005412:	f024 f8b1 	bl	8029578 <iprintf>
 8005416:	e04b      	b.n	80054b0 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 5)
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	2b05      	cmp	r3, #5
 800541c:	d118      	bne.n	8005450 <Appli_Light_CtlTemperature_Status+0x10c>
    {
      TRACE_M(TF_LIGHT,"Target CTL Temperature: 0x%x (%d)\r\n",
 800541e:	2100      	movs	r1, #0
 8005420:	482a      	ldr	r0, [pc, #168]	; (80054cc <Appli_Light_CtlTemperature_Status+0x188>)
 8005422:	f008 f8a5 	bl	800d570 <TraceHeader>
 8005426:	8a7a      	ldrh	r2, [r7, #18]
 8005428:	68f9      	ldr	r1, [r7, #12]
 800542a:	697b      	ldr	r3, [r7, #20]
 800542c:	440b      	add	r3, r1
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	021b      	lsls	r3, r3, #8
 8005432:	ea42 0003 	orr.w	r0, r2, r3
 8005436:	8a7a      	ldrh	r2, [r7, #18]
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	440b      	add	r3, r1
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	021b      	lsls	r3, r3, #8
 8005442:	4313      	orrs	r3, r2
 8005444:	461a      	mov	r2, r3
 8005446:	4601      	mov	r1, r0
 8005448:	4825      	ldr	r0, [pc, #148]	; (80054e0 <Appli_Light_CtlTemperature_Status+0x19c>)
 800544a:	f024 f895 	bl	8029578 <iprintf>
 800544e:	e02f      	b.n	80054b0 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 7)
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	2b07      	cmp	r3, #7
 8005454:	d118      	bne.n	8005488 <Appli_Light_CtlTemperature_Status+0x144>
    {
      TRACE_M(TF_LIGHT,"Target CTL Delta UV: 0x%x (%d)\r\n",
 8005456:	2100      	movs	r1, #0
 8005458:	481c      	ldr	r0, [pc, #112]	; (80054cc <Appli_Light_CtlTemperature_Status+0x188>)
 800545a:	f008 f889 	bl	800d570 <TraceHeader>
 800545e:	8a7a      	ldrh	r2, [r7, #18]
 8005460:	68f9      	ldr	r1, [r7, #12]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	440b      	add	r3, r1
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	021b      	lsls	r3, r3, #8
 800546a:	ea42 0003 	orr.w	r0, r2, r3
 800546e:	8a7a      	ldrh	r2, [r7, #18]
 8005470:	68f9      	ldr	r1, [r7, #12]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	440b      	add	r3, r1
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	4313      	orrs	r3, r2
 800547c:	461a      	mov	r2, r3
 800547e:	4601      	mov	r1, r0
 8005480:	4818      	ldr	r0, [pc, #96]	; (80054e4 <Appli_Light_CtlTemperature_Status+0x1a0>)
 8005482:	f024 f879 	bl	8029578 <iprintf>
 8005486:	e013      	b.n	80054b0 <Appli_Light_CtlTemperature_Status+0x16c>
              value | pLightCtlTemp_status[i] << 8,
              value | pLightCtlTemp_status[i] << 8);
    }
    else if(i == 8)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b08      	cmp	r3, #8
 800548c:	d110      	bne.n	80054b0 <Appli_Light_CtlTemperature_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\r\n",
 800548e:	2100      	movs	r1, #0
 8005490:	480e      	ldr	r0, [pc, #56]	; (80054cc <Appli_Light_CtlTemperature_Status+0x188>)
 8005492:	f008 f86d 	bl	800d570 <TraceHeader>
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	4413      	add	r3, r2
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	4619      	mov	r1, r3
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	4413      	add	r3, r2
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	480f      	ldr	r0, [pc, #60]	; (80054e8 <Appli_Light_CtlTemperature_Status+0x1a4>)
 80054ac:	f024 f864 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	3301      	adds	r3, #1
 80054b4:	617b      	str	r3, [r7, #20]
 80054b6:	697a      	ldr	r2, [r7, #20]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	f4ff af62 	bcc.w	8005384 <Appli_Light_CtlTemperature_Status+0x40>
              pLightCtlTemp_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd80      	pop	{r7, pc}
 80054ca:	bf00      	nop
 80054cc:	080328ec 	.word	0x080328ec
 80054d0:	0802e280 	.word	0x0802e280
 80054d4:	0802e2c0 	.word	0x0802e2c0
 80054d8:	0802e1f4 	.word	0x0802e1f4
 80054dc:	0802e2c8 	.word	0x0802e2c8
 80054e0:	0802e240 	.word	0x0802e240
 80054e4:	0802e2ec 	.word	0x0802e2ec
 80054e8:	0802dfc8 	.word	0x0802dfc8

080054ec <Appli_Light_CtlTemperature_Range_Status>:
*/ 
MOBLE_RESULT Appli_Light_CtlTemperature_Range_Status(MOBLEUINT8 const *pCtlTempRange_status, 
                                                     MOBLEUINT32 pLength, 
                                                     MOBLEUINT16 dstPeer, 
                                                     MOBLEUINT8 elementIndex)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b086      	sub	sp, #24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	4611      	mov	r1, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	460b      	mov	r3, r1
 80054fc:	80fb      	strh	r3, [r7, #6]
 80054fe:	4613      	mov	r3, r2
 8005500:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value;
#endif
  
  TRACE_M(TF_LIGHT,"Light_CtlTemperature_Range_Status callback received for element %d \r\n", elementIndex);
 8005502:	2100      	movs	r1, #0
 8005504:	483a      	ldr	r0, [pc, #232]	; (80055f0 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005506:	f008 f833 	bl	800d570 <TraceHeader>
 800550a:	797b      	ldrb	r3, [r7, #5]
 800550c:	4619      	mov	r1, r3
 800550e:	4839      	ldr	r0, [pc, #228]	; (80055f4 <Appli_Light_CtlTemperature_Range_Status+0x108>)
 8005510:	f024 f832 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8263!\r\n");
 8005514:	2100      	movs	r1, #0
 8005516:	4836      	ldr	r0, [pc, #216]	; (80055f0 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005518:	f008 f82a 	bl	800d570 <TraceHeader>
 800551c:	4836      	ldr	r0, [pc, #216]	; (80055f8 <Appli_Light_CtlTemperature_Range_Status+0x10c>)
 800551e:	f024 f891 	bl	8029644 <puts>
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	617b      	str	r3, [r7, #20]
 8005526:	e05a      	b.n	80055de <Appli_Light_CtlTemperature_Range_Status+0xf2>
  {
    if(i == 0)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d111      	bne.n	8005552 <Appli_Light_CtlTemperature_Range_Status+0x66>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\r\n",
 800552e:	2100      	movs	r1, #0
 8005530:	482f      	ldr	r0, [pc, #188]	; (80055f0 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005532:	f008 f81d 	bl	800d570 <TraceHeader>
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	4413      	add	r3, r2
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	4619      	mov	r1, r3
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	4413      	add	r3, r2
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	461a      	mov	r2, r3
 800554a:	482c      	ldr	r0, [pc, #176]	; (80055fc <Appli_Light_CtlTemperature_Range_Status+0x110>)
 800554c:	f024 f814 	bl	8029578 <iprintf>
 8005550:	e042      	b.n	80055d8 <Appli_Light_CtlTemperature_Range_Status+0xec>
              pCtlTempRange_status[i],
              pCtlTempRange_status[i]);
    }
    else if((i == 1) || (i == 3))
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d002      	beq.n	800555e <Appli_Light_CtlTemperature_Range_Status+0x72>
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	2b03      	cmp	r3, #3
 800555c:	d105      	bne.n	800556a <Appli_Light_CtlTemperature_Range_Status+0x7e>
    {
      value = pCtlTempRange_status[i];
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	4413      	add	r3, r2
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	827b      	strh	r3, [r7, #18]
 8005568:	e036      	b.n	80055d8 <Appli_Light_CtlTemperature_Range_Status+0xec>
    }
    else if(i == 2)
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	2b02      	cmp	r3, #2
 800556e:	d118      	bne.n	80055a2 <Appli_Light_CtlTemperature_Range_Status+0xb6>
    {
      TRACE_M(TF_LIGHT,"Range Min: 0x%x (%d)\r\n",
 8005570:	2100      	movs	r1, #0
 8005572:	481f      	ldr	r0, [pc, #124]	; (80055f0 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 8005574:	f007 fffc 	bl	800d570 <TraceHeader>
 8005578:	8a7a      	ldrh	r2, [r7, #18]
 800557a:	68f9      	ldr	r1, [r7, #12]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	440b      	add	r3, r1
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	021b      	lsls	r3, r3, #8
 8005584:	ea42 0003 	orr.w	r0, r2, r3
 8005588:	8a7a      	ldrh	r2, [r7, #18]
 800558a:	68f9      	ldr	r1, [r7, #12]
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	440b      	add	r3, r1
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	021b      	lsls	r3, r3, #8
 8005594:	4313      	orrs	r3, r2
 8005596:	461a      	mov	r2, r3
 8005598:	4601      	mov	r1, r0
 800559a:	4819      	ldr	r0, [pc, #100]	; (8005600 <Appli_Light_CtlTemperature_Range_Status+0x114>)
 800559c:	f023 ffec 	bl	8029578 <iprintf>
 80055a0:	e01a      	b.n	80055d8 <Appli_Light_CtlTemperature_Range_Status+0xec>
              value | pCtlTempRange_status[i] << 8,
              value | pCtlTempRange_status[i] << 8 );
    }
    else if(i == 4)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	2b04      	cmp	r3, #4
 80055a6:	d117      	bne.n	80055d8 <Appli_Light_CtlTemperature_Range_Status+0xec>
    {
      TRACE_M(TF_LIGHT,"Range Max: 0x%x (%d)\r\n",
 80055a8:	2100      	movs	r1, #0
 80055aa:	4811      	ldr	r0, [pc, #68]	; (80055f0 <Appli_Light_CtlTemperature_Range_Status+0x104>)
 80055ac:	f007 ffe0 	bl	800d570 <TraceHeader>
 80055b0:	8a7a      	ldrh	r2, [r7, #18]
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	440b      	add	r3, r1
 80055b8:	781b      	ldrb	r3, [r3, #0]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	ea42 0003 	orr.w	r0, r2, r3
 80055c0:	8a7a      	ldrh	r2, [r7, #18]
 80055c2:	68f9      	ldr	r1, [r7, #12]
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	440b      	add	r3, r1
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	021b      	lsls	r3, r3, #8
 80055cc:	4313      	orrs	r3, r2
 80055ce:	461a      	mov	r2, r3
 80055d0:	4601      	mov	r1, r0
 80055d2:	480c      	ldr	r0, [pc, #48]	; (8005604 <Appli_Light_CtlTemperature_Range_Status+0x118>)
 80055d4:	f023 ffd0 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	3301      	adds	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d3a0      	bcc.n	8005528 <Appli_Light_CtlTemperature_Range_Status+0x3c>
              value | pCtlTempRange_status[i] << 8 );
    }
  }
#endif

  return MOBLE_RESULT_SUCCESS;
 80055e6:	2300      	movs	r3, #0
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3718      	adds	r7, #24
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	08032910 	.word	0x08032910
 80055f4:	0802e310 	.word	0x0802e310
 80055f8:	0802e358 	.word	0x0802e358
 80055fc:	0802e144 	.word	0x0802e144
 8005600:	0802e160 	.word	0x0802e160
 8005604:	0802e178 	.word	0x0802e178

08005608 <Appli_Light_CtlDefault_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Appli_Light_CtlDefault_Status(MOBLEUINT8 const *pCtlDefault_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	4611      	mov	r1, r2
 8005614:	461a      	mov	r2, r3
 8005616:	460b      	mov	r3, r1
 8005618:	80fb      	strh	r3, [r7, #6]
 800561a:	4613      	mov	r3, r2
 800561c:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 800561e:	2300      	movs	r3, #0
 8005620:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_Ctl_DefaultStatus callback received for element %d \r\n", elementIndex);
 8005622:	2100      	movs	r1, #0
 8005624:	483f      	ldr	r0, [pc, #252]	; (8005724 <Appli_Light_CtlDefault_Status+0x11c>)
 8005626:	f007 ffa3 	bl	800d570 <TraceHeader>
 800562a:	797b      	ldrb	r3, [r7, #5]
 800562c:	4619      	mov	r1, r3
 800562e:	483e      	ldr	r0, [pc, #248]	; (8005728 <Appli_Light_CtlDefault_Status+0x120>)
 8005630:	f023 ffa2 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8268!\r\n");
 8005634:	2100      	movs	r1, #0
 8005636:	483b      	ldr	r0, [pc, #236]	; (8005724 <Appli_Light_CtlDefault_Status+0x11c>)
 8005638:	f007 ff9a 	bl	800d570 <TraceHeader>
 800563c:	483b      	ldr	r0, [pc, #236]	; (800572c <Appli_Light_CtlDefault_Status+0x124>)
 800563e:	f024 f801 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e064      	b.n	8005712 <Appli_Light_CtlDefault_Status+0x10a>
  {
    if((i == 0) || (i == 2) || (i == 4))
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d005      	beq.n	800565a <Appli_Light_CtlDefault_Status+0x52>
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b02      	cmp	r3, #2
 8005652:	d002      	beq.n	800565a <Appli_Light_CtlDefault_Status+0x52>
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2b04      	cmp	r3, #4
 8005658:	d105      	bne.n	8005666 <Appli_Light_CtlDefault_Status+0x5e>
    {
      value = pCtlDefault_status[i];
 800565a:	68fa      	ldr	r2, [r7, #12]
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	4413      	add	r3, r2
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	827b      	strh	r3, [r7, #18]
 8005664:	e052      	b.n	800570c <Appli_Light_CtlDefault_Status+0x104>
    }
    else if(i == 1)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d118      	bne.n	800569e <Appli_Light_CtlDefault_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"Lightness: 0x%x (%d)\n\r",
 800566c:	2100      	movs	r1, #0
 800566e:	482d      	ldr	r0, [pc, #180]	; (8005724 <Appli_Light_CtlDefault_Status+0x11c>)
 8005670:	f007 ff7e 	bl	800d570 <TraceHeader>
 8005674:	8a7a      	ldrh	r2, [r7, #18]
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	440b      	add	r3, r1
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	021b      	lsls	r3, r3, #8
 8005680:	ea42 0003 	orr.w	r0, r2, r3
 8005684:	8a7a      	ldrh	r2, [r7, #18]
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	440b      	add	r3, r1
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	021b      	lsls	r3, r3, #8
 8005690:	4313      	orrs	r3, r2
 8005692:	461a      	mov	r2, r3
 8005694:	4601      	mov	r1, r0
 8005696:	4826      	ldr	r0, [pc, #152]	; (8005730 <Appli_Light_CtlDefault_Status+0x128>)
 8005698:	f023 ff6e 	bl	8029578 <iprintf>
 800569c:	e036      	b.n	800570c <Appli_Light_CtlDefault_Status+0x104>
              value | pCtlDefault_status[i] << 8,
              value | pCtlDefault_status[i] << 8);
    }
    else if(i == 3)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d118      	bne.n	80056d6 <Appli_Light_CtlDefault_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"Temperature: 0x%x (%d)\n\r",
 80056a4:	2100      	movs	r1, #0
 80056a6:	481f      	ldr	r0, [pc, #124]	; (8005724 <Appli_Light_CtlDefault_Status+0x11c>)
 80056a8:	f007 ff62 	bl	800d570 <TraceHeader>
 80056ac:	8a7a      	ldrh	r2, [r7, #18]
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	697b      	ldr	r3, [r7, #20]
 80056b2:	440b      	add	r3, r1
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	021b      	lsls	r3, r3, #8
 80056b8:	ea42 0003 	orr.w	r0, r2, r3
 80056bc:	8a7a      	ldrh	r2, [r7, #18]
 80056be:	68f9      	ldr	r1, [r7, #12]
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	440b      	add	r3, r1
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	021b      	lsls	r3, r3, #8
 80056c8:	4313      	orrs	r3, r2
 80056ca:	461a      	mov	r2, r3
 80056cc:	4601      	mov	r1, r0
 80056ce:	4819      	ldr	r0, [pc, #100]	; (8005734 <Appli_Light_CtlDefault_Status+0x12c>)
 80056d0:	f023 ff52 	bl	8029578 <iprintf>
 80056d4:	e01a      	b.n	800570c <Appli_Light_CtlDefault_Status+0x104>
              value | pCtlDefault_status[i] << 8,
              value | pCtlDefault_status[i] << 8);
    }
    else if(i == 5)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2b05      	cmp	r3, #5
 80056da:	d117      	bne.n	800570c <Appli_Light_CtlDefault_Status+0x104>
    {
      TRACE_M(TF_LIGHT,"Delta UV: 0x%x (%d)\n\r",
 80056dc:	2100      	movs	r1, #0
 80056de:	4811      	ldr	r0, [pc, #68]	; (8005724 <Appli_Light_CtlDefault_Status+0x11c>)
 80056e0:	f007 ff46 	bl	800d570 <TraceHeader>
 80056e4:	8a7a      	ldrh	r2, [r7, #18]
 80056e6:	68f9      	ldr	r1, [r7, #12]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	440b      	add	r3, r1
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	ea42 0003 	orr.w	r0, r2, r3
 80056f4:	8a7a      	ldrh	r2, [r7, #18]
 80056f6:	68f9      	ldr	r1, [r7, #12]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	440b      	add	r3, r1
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	021b      	lsls	r3, r3, #8
 8005700:	4313      	orrs	r3, r2
 8005702:	461a      	mov	r2, r3
 8005704:	4601      	mov	r1, r0
 8005706:	480c      	ldr	r0, [pc, #48]	; (8005738 <Appli_Light_CtlDefault_Status+0x130>)
 8005708:	f023 ff36 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	3301      	adds	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	429a      	cmp	r2, r3
 8005718:	d396      	bcc.n	8005648 <Appli_Light_CtlDefault_Status+0x40>
              value | pCtlDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800571a:	2300      	movs	r3, #0
} 
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	08032938 	.word	0x08032938
 8005728:	0802e360 	.word	0x0802e360
 800572c:	0802e39c 	.word	0x0802e39c
 8005730:	0802e3a4 	.word	0x0802e3a4
 8005734:	0802e3bc 	.word	0x0802e3bc
 8005738:	0802e3d8 	.word	0x0802e3d8

0800573c <Appli_Light_Hsl_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_Hsl_Status(MOBLEUINT8 const *pHsl_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b086      	sub	sp, #24
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	4611      	mov	r1, r2
 8005748:	461a      	mov	r2, r3
 800574a:	460b      	mov	r3, r1
 800574c:	80fb      	strh	r3, [r7, #6]
 800574e:	4613      	mov	r3, r2
 8005750:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005752:	2300      	movs	r3, #0
 8005754:	827b      	strh	r3, [r7, #18]
#endif

  TRACE_M(TF_LIGHT,"Light_Hsl_Status callback received for element %d \r\n", elementIndex);
 8005756:	2100      	movs	r1, #0
 8005758:	484a      	ldr	r0, [pc, #296]	; (8005884 <Appli_Light_Hsl_Status+0x148>)
 800575a:	f007 ff09 	bl	800d570 <TraceHeader>
 800575e:	797b      	ldrb	r3, [r7, #5]
 8005760:	4619      	mov	r1, r3
 8005762:	4849      	ldr	r0, [pc, #292]	; (8005888 <Appli_Light_Hsl_Status+0x14c>)
 8005764:	f023 ff08 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8278!\r\n");
 8005768:	2100      	movs	r1, #0
 800576a:	4846      	ldr	r0, [pc, #280]	; (8005884 <Appli_Light_Hsl_Status+0x148>)
 800576c:	f007 ff00 	bl	800d570 <TraceHeader>
 8005770:	4846      	ldr	r0, [pc, #280]	; (800588c <Appli_Light_Hsl_Status+0x150>)
 8005772:	f023 ff67 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005776:	2300      	movs	r3, #0
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	e079      	b.n	8005870 <Appli_Light_Hsl_Status+0x134>
  {
    if((i == 0) || (i == 2) || (i == 4))
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d005      	beq.n	800578e <Appli_Light_Hsl_Status+0x52>
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d002      	beq.n	800578e <Appli_Light_Hsl_Status+0x52>
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	2b04      	cmp	r3, #4
 800578c:	d105      	bne.n	800579a <Appli_Light_Hsl_Status+0x5e>
    {
      value = pHsl_status[i];
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	4413      	add	r3, r2
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	827b      	strh	r3, [r7, #18]
 8005798:	e067      	b.n	800586a <Appli_Light_Hsl_Status+0x12e>
    }
    else if(i == 1)
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	2b01      	cmp	r3, #1
 800579e:	d118      	bne.n	80057d2 <Appli_Light_Hsl_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"HSL Lightness: 0x%x (%d)\n\r",
 80057a0:	2100      	movs	r1, #0
 80057a2:	4838      	ldr	r0, [pc, #224]	; (8005884 <Appli_Light_Hsl_Status+0x148>)
 80057a4:	f007 fee4 	bl	800d570 <TraceHeader>
 80057a8:	8a7a      	ldrh	r2, [r7, #18]
 80057aa:	68f9      	ldr	r1, [r7, #12]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	440b      	add	r3, r1
 80057b0:	781b      	ldrb	r3, [r3, #0]
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	ea42 0003 	orr.w	r0, r2, r3
 80057b8:	8a7a      	ldrh	r2, [r7, #18]
 80057ba:	68f9      	ldr	r1, [r7, #12]
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	440b      	add	r3, r1
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	021b      	lsls	r3, r3, #8
 80057c4:	4313      	orrs	r3, r2
 80057c6:	461a      	mov	r2, r3
 80057c8:	4601      	mov	r1, r0
 80057ca:	4831      	ldr	r0, [pc, #196]	; (8005890 <Appli_Light_Hsl_Status+0x154>)
 80057cc:	f023 fed4 	bl	8029578 <iprintf>
 80057d0:	e04b      	b.n	800586a <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 3)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	2b03      	cmp	r3, #3
 80057d6:	d118      	bne.n	800580a <Appli_Light_Hsl_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"HSL Hue: 0x%x (%d)\n\r",
 80057d8:	2100      	movs	r1, #0
 80057da:	482a      	ldr	r0, [pc, #168]	; (8005884 <Appli_Light_Hsl_Status+0x148>)
 80057dc:	f007 fec8 	bl	800d570 <TraceHeader>
 80057e0:	8a7a      	ldrh	r2, [r7, #18]
 80057e2:	68f9      	ldr	r1, [r7, #12]
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	440b      	add	r3, r1
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	ea42 0003 	orr.w	r0, r2, r3
 80057f0:	8a7a      	ldrh	r2, [r7, #18]
 80057f2:	68f9      	ldr	r1, [r7, #12]
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	440b      	add	r3, r1
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	021b      	lsls	r3, r3, #8
 80057fc:	4313      	orrs	r3, r2
 80057fe:	461a      	mov	r2, r3
 8005800:	4601      	mov	r1, r0
 8005802:	4824      	ldr	r0, [pc, #144]	; (8005894 <Appli_Light_Hsl_Status+0x158>)
 8005804:	f023 feb8 	bl	8029578 <iprintf>
 8005808:	e02f      	b.n	800586a <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 5)
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	2b05      	cmp	r3, #5
 800580e:	d118      	bne.n	8005842 <Appli_Light_Hsl_Status+0x106>
    {
      TRACE_M(TF_LIGHT,"HSL Saturation: 0x%x (%d)\n\r",
 8005810:	2100      	movs	r1, #0
 8005812:	481c      	ldr	r0, [pc, #112]	; (8005884 <Appli_Light_Hsl_Status+0x148>)
 8005814:	f007 feac 	bl	800d570 <TraceHeader>
 8005818:	8a7a      	ldrh	r2, [r7, #18]
 800581a:	68f9      	ldr	r1, [r7, #12]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	440b      	add	r3, r1
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	021b      	lsls	r3, r3, #8
 8005824:	ea42 0003 	orr.w	r0, r2, r3
 8005828:	8a7a      	ldrh	r2, [r7, #18]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	440b      	add	r3, r1
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4313      	orrs	r3, r2
 8005836:	461a      	mov	r2, r3
 8005838:	4601      	mov	r1, r0
 800583a:	4817      	ldr	r0, [pc, #92]	; (8005898 <Appli_Light_Hsl_Status+0x15c>)
 800583c:	f023 fe9c 	bl	8029578 <iprintf>
 8005840:	e013      	b.n	800586a <Appli_Light_Hsl_Status+0x12e>
              value | pHsl_status[i] << 8,
              value | pHsl_status[i] << 8);
    }
    else if(i == 6)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b06      	cmp	r3, #6
 8005846:	d110      	bne.n	800586a <Appli_Light_Hsl_Status+0x12e>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 8005848:	2100      	movs	r1, #0
 800584a:	480e      	ldr	r0, [pc, #56]	; (8005884 <Appli_Light_Hsl_Status+0x148>)
 800584c:	f007 fe90 	bl	800d570 <TraceHeader>
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	4413      	add	r3, r2
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	4619      	mov	r1, r3
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	4413      	add	r3, r2
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	480d      	ldr	r0, [pc, #52]	; (800589c <Appli_Light_Hsl_Status+0x160>)
 8005866:	f023 fe87 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	3301      	adds	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	429a      	cmp	r2, r3
 8005876:	d381      	bcc.n	800577c <Appli_Light_Hsl_Status+0x40>
              pHsl_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3718      	adds	r7, #24
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	08032958 	.word	0x08032958
 8005888:	0802e3f0 	.word	0x0802e3f0
 800588c:	0802e428 	.word	0x0802e428
 8005890:	0802e430 	.word	0x0802e430
 8005894:	0802e44c 	.word	0x0802e44c
 8005898:	0802e464 	.word	0x0802e464
 800589c:	0802e480 	.word	0x0802e480

080058a0 <Appli_Light_HslHue_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslHue_Status(MOBLEUINT8 const *pHslHue_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	4611      	mov	r1, r2
 80058ac:	461a      	mov	r2, r3
 80058ae:	460b      	mov	r3, r1
 80058b0:	80fb      	strh	r3, [r7, #6]
 80058b2:	4613      	mov	r3, r2
 80058b4:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80058b6:	2300      	movs	r3, #0
 80058b8:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslHue_Status callback received for element %d \r\n", elementIndex);
 80058ba:	2100      	movs	r1, #0
 80058bc:	483a      	ldr	r0, [pc, #232]	; (80059a8 <Appli_Light_HslHue_Status+0x108>)
 80058be:	f007 fe57 	bl	800d570 <TraceHeader>
 80058c2:	797b      	ldrb	r3, [r7, #5]
 80058c4:	4619      	mov	r1, r3
 80058c6:	4839      	ldr	r0, [pc, #228]	; (80059ac <Appli_Light_HslHue_Status+0x10c>)
 80058c8:	f023 fe56 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8271!\r\n");
 80058cc:	2100      	movs	r1, #0
 80058ce:	4836      	ldr	r0, [pc, #216]	; (80059a8 <Appli_Light_HslHue_Status+0x108>)
 80058d0:	f007 fe4e 	bl	800d570 <TraceHeader>
 80058d4:	4836      	ldr	r0, [pc, #216]	; (80059b0 <Appli_Light_HslHue_Status+0x110>)
 80058d6:	f023 feb5 	bl	8029644 <puts>
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80058da:	2300      	movs	r3, #0
 80058dc:	617b      	str	r3, [r7, #20]
 80058de:	e05a      	b.n	8005996 <Appli_Light_HslHue_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <Appli_Light_HslHue_Status+0x4c>
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d105      	bne.n	80058f8 <Appli_Light_HslHue_Status+0x58>
    {
      value = pHslHue_status[i];
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	4413      	add	r3, r2
 80058f2:	781b      	ldrb	r3, [r3, #0]
 80058f4:	827b      	strh	r3, [r7, #18]
 80058f6:	e04b      	b.n	8005990 <Appli_Light_HslHue_Status+0xf0>
    }
    else if(i == 1)
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d118      	bne.n	8005930 <Appli_Light_HslHue_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Hue: 0x%x (%d)\n\r",
 80058fe:	2100      	movs	r1, #0
 8005900:	4829      	ldr	r0, [pc, #164]	; (80059a8 <Appli_Light_HslHue_Status+0x108>)
 8005902:	f007 fe35 	bl	800d570 <TraceHeader>
 8005906:	8a7a      	ldrh	r2, [r7, #18]
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	440b      	add	r3, r1
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	021b      	lsls	r3, r3, #8
 8005912:	ea42 0003 	orr.w	r0, r2, r3
 8005916:	8a7a      	ldrh	r2, [r7, #18]
 8005918:	68f9      	ldr	r1, [r7, #12]
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	440b      	add	r3, r1
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	4313      	orrs	r3, r2
 8005924:	461a      	mov	r2, r3
 8005926:	4601      	mov	r1, r0
 8005928:	4822      	ldr	r0, [pc, #136]	; (80059b4 <Appli_Light_HslHue_Status+0x114>)
 800592a:	f023 fe25 	bl	8029578 <iprintf>
 800592e:	e02f      	b.n	8005990 <Appli_Light_HslHue_Status+0xf0>
              value | pHslHue_status[i] << 8,
              value | pHslHue_status[i] << 8);
    }
    else if(i == 3)
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	2b03      	cmp	r3, #3
 8005934:	d118      	bne.n	8005968 <Appli_Light_HslHue_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Hue: 0x%x (%d)\n\r",
 8005936:	2100      	movs	r1, #0
 8005938:	481b      	ldr	r0, [pc, #108]	; (80059a8 <Appli_Light_HslHue_Status+0x108>)
 800593a:	f007 fe19 	bl	800d570 <TraceHeader>
 800593e:	8a7a      	ldrh	r2, [r7, #18]
 8005940:	68f9      	ldr	r1, [r7, #12]
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	440b      	add	r3, r1
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	021b      	lsls	r3, r3, #8
 800594a:	ea42 0003 	orr.w	r0, r2, r3
 800594e:	8a7a      	ldrh	r2, [r7, #18]
 8005950:	68f9      	ldr	r1, [r7, #12]
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	440b      	add	r3, r1
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	4313      	orrs	r3, r2
 800595c:	461a      	mov	r2, r3
 800595e:	4601      	mov	r1, r0
 8005960:	4815      	ldr	r0, [pc, #84]	; (80059b8 <Appli_Light_HslHue_Status+0x118>)
 8005962:	f023 fe09 	bl	8029578 <iprintf>
 8005966:	e013      	b.n	8005990 <Appli_Light_HslHue_Status+0xf0>
              value | pHslHue_status[i] << 8,
              value | pHslHue_status[i] << 8);
    }
    else if(i == 4)
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	2b04      	cmp	r3, #4
 800596c:	d110      	bne.n	8005990 <Appli_Light_HslHue_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 800596e:	2100      	movs	r1, #0
 8005970:	480d      	ldr	r0, [pc, #52]	; (80059a8 <Appli_Light_HslHue_Status+0x108>)
 8005972:	f007 fdfd 	bl	800d570 <TraceHeader>
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	4413      	add	r3, r2
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	4619      	mov	r1, r3
 8005980:	68fa      	ldr	r2, [r7, #12]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	4413      	add	r3, r2
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	461a      	mov	r2, r3
 800598a:	480c      	ldr	r0, [pc, #48]	; (80059bc <Appli_Light_HslHue_Status+0x11c>)
 800598c:	f023 fdf4 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	3301      	adds	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	697a      	ldr	r2, [r7, #20]
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	429a      	cmp	r2, r3
 800599c:	d3a0      	bcc.n	80058e0 <Appli_Light_HslHue_Status+0x40>
              pHslHue_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800599e:	2300      	movs	r3, #0
} 
 80059a0:	4618      	mov	r0, r3
 80059a2:	3718      	adds	r7, #24
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	08032970 	.word	0x08032970
 80059ac:	0802e49c 	.word	0x0802e49c
 80059b0:	0802e4d4 	.word	0x0802e4d4
 80059b4:	0802e4dc 	.word	0x0802e4dc
 80059b8:	0802e4f8 	.word	0x0802e4f8
 80059bc:	0802e480 	.word	0x0802e480

080059c0 <Appli_Light_HslSaturation_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslSaturation_Status(MOBLEUINT8 const *pHslSaturation_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4611      	mov	r1, r2
 80059cc:	461a      	mov	r2, r3
 80059ce:	460b      	mov	r3, r1
 80059d0:	80fb      	strh	r3, [r7, #6]
 80059d2:	4613      	mov	r3, r2
 80059d4:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 80059d6:	2300      	movs	r3, #0
 80059d8:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslSaturation_Status callback received for element %d \r\n", elementIndex);
 80059da:	2100      	movs	r1, #0
 80059dc:	483a      	ldr	r0, [pc, #232]	; (8005ac8 <Appli_Light_HslSaturation_Status+0x108>)
 80059de:	f007 fdc7 	bl	800d570 <TraceHeader>
 80059e2:	797b      	ldrb	r3, [r7, #5]
 80059e4:	4619      	mov	r1, r3
 80059e6:	4839      	ldr	r0, [pc, #228]	; (8005acc <Appli_Light_HslSaturation_Status+0x10c>)
 80059e8:	f023 fdc6 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#8275!\r\n");
 80059ec:	2100      	movs	r1, #0
 80059ee:	4836      	ldr	r0, [pc, #216]	; (8005ac8 <Appli_Light_HslSaturation_Status+0x108>)
 80059f0:	f007 fdbe 	bl	800d570 <TraceHeader>
 80059f4:	4836      	ldr	r0, [pc, #216]	; (8005ad0 <Appli_Light_HslSaturation_Status+0x110>)
 80059f6:	f023 fe25 	bl	8029644 <puts>
  
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 80059fa:	2300      	movs	r3, #0
 80059fc:	617b      	str	r3, [r7, #20]
 80059fe:	e05a      	b.n	8005ab6 <Appli_Light_HslSaturation_Status+0xf6>
  {
    if((i == 0) || (i == 2))
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d002      	beq.n	8005a0c <Appli_Light_HslSaturation_Status+0x4c>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d105      	bne.n	8005a18 <Appli_Light_HslSaturation_Status+0x58>
    {
      value = pHslSaturation_status[i];
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	4413      	add	r3, r2
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	827b      	strh	r3, [r7, #18]
 8005a16:	e04b      	b.n	8005ab0 <Appli_Light_HslSaturation_Status+0xf0>
    }
    else if(i == 1)
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d118      	bne.n	8005a50 <Appli_Light_HslSaturation_Status+0x90>
    {
      TRACE_M(TF_LIGHT,"Present Saturation: 0x%x (%d)\n\r",
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4829      	ldr	r0, [pc, #164]	; (8005ac8 <Appli_Light_HslSaturation_Status+0x108>)
 8005a22:	f007 fda5 	bl	800d570 <TraceHeader>
 8005a26:	8a7a      	ldrh	r2, [r7, #18]
 8005a28:	68f9      	ldr	r1, [r7, #12]
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	440b      	add	r3, r1
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	021b      	lsls	r3, r3, #8
 8005a32:	ea42 0003 	orr.w	r0, r2, r3
 8005a36:	8a7a      	ldrh	r2, [r7, #18]
 8005a38:	68f9      	ldr	r1, [r7, #12]
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	440b      	add	r3, r1
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	021b      	lsls	r3, r3, #8
 8005a42:	4313      	orrs	r3, r2
 8005a44:	461a      	mov	r2, r3
 8005a46:	4601      	mov	r1, r0
 8005a48:	4822      	ldr	r0, [pc, #136]	; (8005ad4 <Appli_Light_HslSaturation_Status+0x114>)
 8005a4a:	f023 fd95 	bl	8029578 <iprintf>
 8005a4e:	e02f      	b.n	8005ab0 <Appli_Light_HslSaturation_Status+0xf0>
              value | pHslSaturation_status[i] << 8,
              value | pHslSaturation_status[i] << 8);
    }
    else if(i == 3)
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d118      	bne.n	8005a88 <Appli_Light_HslSaturation_Status+0xc8>
    {
      TRACE_M(TF_LIGHT,"Target Saturation: 0x%x (%d)\n\r",
 8005a56:	2100      	movs	r1, #0
 8005a58:	481b      	ldr	r0, [pc, #108]	; (8005ac8 <Appli_Light_HslSaturation_Status+0x108>)
 8005a5a:	f007 fd89 	bl	800d570 <TraceHeader>
 8005a5e:	8a7a      	ldrh	r2, [r7, #18]
 8005a60:	68f9      	ldr	r1, [r7, #12]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	440b      	add	r3, r1
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	ea42 0003 	orr.w	r0, r2, r3
 8005a6e:	8a7a      	ldrh	r2, [r7, #18]
 8005a70:	68f9      	ldr	r1, [r7, #12]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	440b      	add	r3, r1
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	4601      	mov	r1, r0
 8005a80:	4815      	ldr	r0, [pc, #84]	; (8005ad8 <Appli_Light_HslSaturation_Status+0x118>)
 8005a82:	f023 fd79 	bl	8029578 <iprintf>
 8005a86:	e013      	b.n	8005ab0 <Appli_Light_HslSaturation_Status+0xf0>
              value | pHslSaturation_status[i] << 8,
              value | pHslSaturation_status[i] << 8);
    }
    else if(i == 4)
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	2b04      	cmp	r3, #4
 8005a8c:	d110      	bne.n	8005ab0 <Appli_Light_HslSaturation_Status+0xf0>
    {
      TRACE_M(TF_LIGHT,"Remaining Time: 0x%x (%d)\n\r",
 8005a8e:	2100      	movs	r1, #0
 8005a90:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <Appli_Light_HslSaturation_Status+0x108>)
 8005a92:	f007 fd6d 	bl	800d570 <TraceHeader>
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4413      	add	r3, r2
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4413      	add	r3, r2
 8005aa6:	781b      	ldrb	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	480c      	ldr	r0, [pc, #48]	; (8005adc <Appli_Light_HslSaturation_Status+0x11c>)
 8005aac:	f023 fd64 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d3a0      	bcc.n	8005a00 <Appli_Light_HslSaturation_Status+0x40>
              pHslSaturation_status[i]);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005abe:	2300      	movs	r3, #0
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3718      	adds	r7, #24
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	0803298c 	.word	0x0803298c
 8005acc:	0802e510 	.word	0x0802e510
 8005ad0:	0802e550 	.word	0x0802e550
 8005ad4:	0802e558 	.word	0x0802e558
 8005ad8:	0802e578 	.word	0x0802e578
 8005adc:	0802e480 	.word	0x0802e480

08005ae0 <Appli_Light_HslDefault_Status>:
* @param  pLength: length of data
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslDefault_Status(MOBLEUINT8 const *pHslDefault_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b086      	sub	sp, #24
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	60f8      	str	r0, [r7, #12]
 8005ae8:	60b9      	str	r1, [r7, #8]
 8005aea:	4611      	mov	r1, r2
 8005aec:	461a      	mov	r2, r3
 8005aee:	460b      	mov	r3, r1
 8005af0:	80fb      	strh	r3, [r7, #6]
 8005af2:	4613      	mov	r3, r2
 8005af4:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005af6:	2300      	movs	r3, #0
 8005af8:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslDefault_Status callback received for element %d \r\n", elementIndex);  
 8005afa:	2100      	movs	r1, #0
 8005afc:	483f      	ldr	r0, [pc, #252]	; (8005bfc <Appli_Light_HslDefault_Status+0x11c>)
 8005afe:	f007 fd37 	bl	800d570 <TraceHeader>
 8005b02:	797b      	ldrb	r3, [r7, #5]
 8005b04:	4619      	mov	r1, r3
 8005b06:	483e      	ldr	r0, [pc, #248]	; (8005c00 <Appli_Light_HslDefault_Status+0x120>)
 8005b08:	f023 fd36 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#827C!\r\n");
 8005b0c:	2100      	movs	r1, #0
 8005b0e:	483b      	ldr	r0, [pc, #236]	; (8005bfc <Appli_Light_HslDefault_Status+0x11c>)
 8005b10:	f007 fd2e 	bl	800d570 <TraceHeader>
 8005b14:	483b      	ldr	r0, [pc, #236]	; (8005c04 <Appli_Light_HslDefault_Status+0x124>)
 8005b16:	f023 fd95 	bl	8029644 <puts>

#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
 8005b1e:	e064      	b.n	8005bea <Appli_Light_HslDefault_Status+0x10a>
  {
    if((i == 0) || (i == 2) || (i == 4))
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d005      	beq.n	8005b32 <Appli_Light_HslDefault_Status+0x52>
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d002      	beq.n	8005b32 <Appli_Light_HslDefault_Status+0x52>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d105      	bne.n	8005b3e <Appli_Light_HslDefault_Status+0x5e>
    {
      value = pHslDefault_status[i];
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	4413      	add	r3, r2
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	827b      	strh	r3, [r7, #18]
 8005b3c:	e052      	b.n	8005be4 <Appli_Light_HslDefault_Status+0x104>
    }
    else if(i == 1)
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d118      	bne.n	8005b76 <Appli_Light_HslDefault_Status+0x96>
    {
      TRACE_M(TF_LIGHT,"Lightness: 0x%x (%d)\n\r",
 8005b44:	2100      	movs	r1, #0
 8005b46:	482d      	ldr	r0, [pc, #180]	; (8005bfc <Appli_Light_HslDefault_Status+0x11c>)
 8005b48:	f007 fd12 	bl	800d570 <TraceHeader>
 8005b4c:	8a7a      	ldrh	r2, [r7, #18]
 8005b4e:	68f9      	ldr	r1, [r7, #12]
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	440b      	add	r3, r1
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	ea42 0003 	orr.w	r0, r2, r3
 8005b5c:	8a7a      	ldrh	r2, [r7, #18]
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	440b      	add	r3, r1
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	021b      	lsls	r3, r3, #8
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	4826      	ldr	r0, [pc, #152]	; (8005c08 <Appli_Light_HslDefault_Status+0x128>)
 8005b70:	f023 fd02 	bl	8029578 <iprintf>
 8005b74:	e036      	b.n	8005be4 <Appli_Light_HslDefault_Status+0x104>
              value | pHslDefault_status[i] << 8,
              value | pHslDefault_status[i] << 8);
    }
    else if(i == 3)
 8005b76:	697b      	ldr	r3, [r7, #20]
 8005b78:	2b03      	cmp	r3, #3
 8005b7a:	d118      	bne.n	8005bae <Appli_Light_HslDefault_Status+0xce>
    {
      TRACE_M(TF_LIGHT,"Hue: 0x%x (%d)\n\r",
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	481f      	ldr	r0, [pc, #124]	; (8005bfc <Appli_Light_HslDefault_Status+0x11c>)
 8005b80:	f007 fcf6 	bl	800d570 <TraceHeader>
 8005b84:	8a7a      	ldrh	r2, [r7, #18]
 8005b86:	68f9      	ldr	r1, [r7, #12]
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	440b      	add	r3, r1
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	ea42 0003 	orr.w	r0, r2, r3
 8005b94:	8a7a      	ldrh	r2, [r7, #18]
 8005b96:	68f9      	ldr	r1, [r7, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	440b      	add	r3, r1
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	021b      	lsls	r3, r3, #8
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	4601      	mov	r1, r0
 8005ba6:	4819      	ldr	r0, [pc, #100]	; (8005c0c <Appli_Light_HslDefault_Status+0x12c>)
 8005ba8:	f023 fce6 	bl	8029578 <iprintf>
 8005bac:	e01a      	b.n	8005be4 <Appli_Light_HslDefault_Status+0x104>
              value | pHslDefault_status[i] << 8,
              value | pHslDefault_status[i] << 8);
    }
    else if(i == 5)
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b05      	cmp	r3, #5
 8005bb2:	d117      	bne.n	8005be4 <Appli_Light_HslDefault_Status+0x104>
    {
      TRACE_M(TF_LIGHT,"Saturation: 0x%x (%d)\n\r",
 8005bb4:	2100      	movs	r1, #0
 8005bb6:	4811      	ldr	r0, [pc, #68]	; (8005bfc <Appli_Light_HslDefault_Status+0x11c>)
 8005bb8:	f007 fcda 	bl	800d570 <TraceHeader>
 8005bbc:	8a7a      	ldrh	r2, [r7, #18]
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	440b      	add	r3, r1
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	021b      	lsls	r3, r3, #8
 8005bc8:	ea42 0003 	orr.w	r0, r2, r3
 8005bcc:	8a7a      	ldrh	r2, [r7, #18]
 8005bce:	68f9      	ldr	r1, [r7, #12]
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	440b      	add	r3, r1
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	461a      	mov	r2, r3
 8005bdc:	4601      	mov	r1, r0
 8005bde:	480c      	ldr	r0, [pc, #48]	; (8005c10 <Appli_Light_HslDefault_Status+0x130>)
 8005be0:	f023 fcca 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	3301      	adds	r3, #1
 8005be8:	617b      	str	r3, [r7, #20]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	429a      	cmp	r2, r3
 8005bf0:	d396      	bcc.n	8005b20 <Appli_Light_HslDefault_Status+0x40>
              value | pHslDefault_status[i] << 8);
    }
  }
#endif
  
  return MOBLE_RESULT_SUCCESS;
 8005bf2:	2300      	movs	r3, #0
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3718      	adds	r7, #24
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	080329b0 	.word	0x080329b0
 8005c00:	0802e598 	.word	0x0802e598
 8005c04:	0802e5d4 	.word	0x0802e5d4
 8005c08:	0802e3a4 	.word	0x0802e3a4
 8005c0c:	0802e5dc 	.word	0x0802e5dc
 8005c10:	0802e5f0 	.word	0x0802e5f0

08005c14 <Appli_Light_HslRange_Status>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Appli_Light_HslRange_Status(MOBLEUINT8 const *pHslRange_status, MOBLEUINT32 pLength, MOBLEUINT16 dstPeer, 
                                              MOBLEUINT8 elementIndex)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b086      	sub	sp, #24
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	4611      	mov	r1, r2
 8005c20:	461a      	mov	r2, r3
 8005c22:	460b      	mov	r3, r1
 8005c24:	80fb      	strh	r3, [r7, #6]
 8005c26:	4613      	mov	r3, r2
 8005c28:	717b      	strb	r3, [r7, #5]
#if ( CFG_DEBUG_TRACE != 0 )
  MOBLEUINT32 i;
  MOBLEUINT16 value = 0;
 8005c2a:	2300      	movs	r3, #0
 8005c2c:	827b      	strh	r3, [r7, #18]
#endif
  
  TRACE_M(TF_LIGHT,"Light_HslRange_Status callback received for element %d \r\n", elementIndex); 
 8005c2e:	2100      	movs	r1, #0
 8005c30:	485a      	ldr	r0, [pc, #360]	; (8005d9c <Appli_Light_HslRange_Status+0x188>)
 8005c32:	f007 fc9d 	bl	800d570 <TraceHeader>
 8005c36:	797b      	ldrb	r3, [r7, #5]
 8005c38:	4619      	mov	r1, r3
 8005c3a:	4859      	ldr	r0, [pc, #356]	; (8005da0 <Appli_Light_HslRange_Status+0x18c>)
 8005c3c:	f023 fc9c 	bl	8029578 <iprintf>
  TRACE_M(TF_SERIAL_CTRL,"#827E!\r\n");
 8005c40:	2100      	movs	r1, #0
 8005c42:	4856      	ldr	r0, [pc, #344]	; (8005d9c <Appli_Light_HslRange_Status+0x188>)
 8005c44:	f007 fc94 	bl	800d570 <TraceHeader>
 8005c48:	4856      	ldr	r0, [pc, #344]	; (8005da4 <Appli_Light_HslRange_Status+0x190>)
 8005c4a:	f023 fcfb 	bl	8029644 <puts>
  
    
#if ( CFG_DEBUG_TRACE != 0 )
  for(i = 0; i < pLength; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	617b      	str	r3, [r7, #20]
 8005c52:	e098      	b.n	8005d86 <Appli_Light_HslRange_Status+0x172>
  {
    if(i == 0)
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d111      	bne.n	8005c7e <Appli_Light_HslRange_Status+0x6a>
    {
      TRACE_M(TF_LIGHT,"Status Code: 0x%x (%d)\n\r",
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	484f      	ldr	r0, [pc, #316]	; (8005d9c <Appli_Light_HslRange_Status+0x188>)
 8005c5e:	f007 fc87 	bl	800d570 <TraceHeader>
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	4413      	add	r3, r2
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	68fa      	ldr	r2, [r7, #12]
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	4413      	add	r3, r2
 8005c72:	781b      	ldrb	r3, [r3, #0]
 8005c74:	461a      	mov	r2, r3
 8005c76:	484c      	ldr	r0, [pc, #304]	; (8005da8 <Appli_Light_HslRange_Status+0x194>)
 8005c78:	f023 fc7e 	bl	8029578 <iprintf>
 8005c7c:	e080      	b.n	8005d80 <Appli_Light_HslRange_Status+0x16c>
              pHslRange_status[i],
              pHslRange_status[i]);
    }
    else if((i == 1) || (i == 3) || (i == 5) || (i == 7))
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d008      	beq.n	8005c96 <Appli_Light_HslRange_Status+0x82>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d005      	beq.n	8005c96 <Appli_Light_HslRange_Status+0x82>
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d002      	beq.n	8005c96 <Appli_Light_HslRange_Status+0x82>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b07      	cmp	r3, #7
 8005c94:	d105      	bne.n	8005ca2 <Appli_Light_HslRange_Status+0x8e>
    {
      value = pHslRange_status[i];
 8005c96:	68fa      	ldr	r2, [r7, #12]
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	827b      	strh	r3, [r7, #18]
 8005ca0:	e06e      	b.n	8005d80 <Appli_Light_HslRange_Status+0x16c>
    }
    else if(i == 2)
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d118      	bne.n	8005cda <Appli_Light_HslRange_Status+0xc6>
    {
      TRACE_M(TF_LIGHT,"Hue Range Min: 0x%x (%d)\n\r",
 8005ca8:	2100      	movs	r1, #0
 8005caa:	483c      	ldr	r0, [pc, #240]	; (8005d9c <Appli_Light_HslRange_Status+0x188>)
 8005cac:	f007 fc60 	bl	800d570 <TraceHeader>
 8005cb0:	8a7a      	ldrh	r2, [r7, #18]
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	440b      	add	r3, r1
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	ea42 0003 	orr.w	r0, r2, r3
 8005cc0:	8a7a      	ldrh	r2, [r7, #18]
 8005cc2:	68f9      	ldr	r1, [r7, #12]
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	440b      	add	r3, r1
 8005cc8:	781b      	ldrb	r3, [r3, #0]
 8005cca:	021b      	lsls	r3, r3, #8
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	461a      	mov	r2, r3
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	4836      	ldr	r0, [pc, #216]	; (8005dac <Appli_Light_HslRange_Status+0x198>)
 8005cd4:	f023 fc50 	bl	8029578 <iprintf>
 8005cd8:	e052      	b.n	8005d80 <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 4)
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d118      	bne.n	8005d12 <Appli_Light_HslRange_Status+0xfe>
    {
      TRACE_M(TF_LIGHT,"Hue Range Max: 0x%x (%d)\n\r",
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	482e      	ldr	r0, [pc, #184]	; (8005d9c <Appli_Light_HslRange_Status+0x188>)
 8005ce4:	f007 fc44 	bl	800d570 <TraceHeader>
 8005ce8:	8a7a      	ldrh	r2, [r7, #18]
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	440b      	add	r3, r1
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	ea42 0003 	orr.w	r0, r2, r3
 8005cf8:	8a7a      	ldrh	r2, [r7, #18]
 8005cfa:	68f9      	ldr	r1, [r7, #12]
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	440b      	add	r3, r1
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	021b      	lsls	r3, r3, #8
 8005d04:	4313      	orrs	r3, r2
 8005d06:	461a      	mov	r2, r3
 8005d08:	4601      	mov	r1, r0
 8005d0a:	4829      	ldr	r0, [pc, #164]	; (8005db0 <Appli_Light_HslRange_Status+0x19c>)
 8005d0c:	f023 fc34 	bl	8029578 <iprintf>
 8005d10:	e036      	b.n	8005d80 <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 6)
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b06      	cmp	r3, #6
 8005d16:	d118      	bne.n	8005d4a <Appli_Light_HslRange_Status+0x136>
    {
      TRACE_M(TF_LIGHT,"Saturation Range Min: 0x%x (%d)\n\r",
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4820      	ldr	r0, [pc, #128]	; (8005d9c <Appli_Light_HslRange_Status+0x188>)
 8005d1c:	f007 fc28 	bl	800d570 <TraceHeader>
 8005d20:	8a7a      	ldrh	r2, [r7, #18]
 8005d22:	68f9      	ldr	r1, [r7, #12]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	440b      	add	r3, r1
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	021b      	lsls	r3, r3, #8
 8005d2c:	ea42 0003 	orr.w	r0, r2, r3
 8005d30:	8a7a      	ldrh	r2, [r7, #18]
 8005d32:	68f9      	ldr	r1, [r7, #12]
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	440b      	add	r3, r1
 8005d38:	781b      	ldrb	r3, [r3, #0]
 8005d3a:	021b      	lsls	r3, r3, #8
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	461a      	mov	r2, r3
 8005d40:	4601      	mov	r1, r0
 8005d42:	481c      	ldr	r0, [pc, #112]	; (8005db4 <Appli_Light_HslRange_Status+0x1a0>)
 8005d44:	f023 fc18 	bl	8029578 <iprintf>
 8005d48:	e01a      	b.n	8005d80 <Appli_Light_HslRange_Status+0x16c>
              value | pHslRange_status[i] << 8,
              value | pHslRange_status[i] << 8);
    }
    else if(i == 8)
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	2b08      	cmp	r3, #8
 8005d4e:	d117      	bne.n	8005d80 <Appli_Light_HslRange_Status+0x16c>
    {
      TRACE_M(TF_LIGHT,"Saturation Range Max: 0x%x (%d)\n\r",
 8005d50:	2100      	movs	r1, #0
 8005d52:	4812      	ldr	r0, [pc, #72]	; (8005d9c <Appli_Light_HslRange_Status+0x188>)
 8005d54:	f007 fc0c 	bl	800d570 <TraceHeader>
 8005d58:	8a7a      	ldrh	r2, [r7, #18]
 8005d5a:	68f9      	ldr	r1, [r7, #12]
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	440b      	add	r3, r1
 8005d60:	781b      	ldrb	r3, [r3, #0]
 8005d62:	021b      	lsls	r3, r3, #8
 8005d64:	ea42 0003 	orr.w	r0, r2, r3
 8005d68:	8a7a      	ldrh	r2, [r7, #18]
 8005d6a:	68f9      	ldr	r1, [r7, #12]
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	440b      	add	r3, r1
 8005d70:	781b      	ldrb	r3, [r3, #0]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	4313      	orrs	r3, r2
 8005d76:	461a      	mov	r2, r3
 8005d78:	4601      	mov	r1, r0
 8005d7a:	480f      	ldr	r0, [pc, #60]	; (8005db8 <Appli_Light_HslRange_Status+0x1a4>)
 8005d7c:	f023 fbfc 	bl	8029578 <iprintf>
  for(i = 0; i < pLength; i++)
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	3301      	adds	r3, #1
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	f4ff af62 	bcc.w	8005c54 <Appli_Light_HslRange_Status+0x40>
              value | pHslRange_status[i] << 8);
    }
  }
#endif

  return MOBLE_RESULT_SUCCESS;
 8005d90:	2300      	movs	r3, #0
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3718      	adds	r7, #24
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	080329d0 	.word	0x080329d0
 8005da0:	0802e608 	.word	0x0802e608
 8005da4:	0802e644 	.word	0x0802e644
 8005da8:	0802e64c 	.word	0x0802e64c
 8005dac:	0802e668 	.word	0x0802e668
 8005db0:	0802e684 	.word	0x0802e684
 8005db4:	0802e6a0 	.word	0x0802e6a0
 8005db8:	0802e6c4 	.word	0x0802e6c4

08005dbc <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8005dc0:	f3bf 8f4f 	dsb	sy
}
 8005dc4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8005dc6:	4b06      	ldr	r3, [pc, #24]	; (8005de0 <__NVIC_SystemReset+0x24>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8005dce:	4904      	ldr	r1, [pc, #16]	; (8005de0 <__NVIC_SystemReset+0x24>)
 8005dd0:	4b04      	ldr	r3, [pc, #16]	; (8005de4 <__NVIC_SystemReset+0x28>)
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005dd6:	f3bf 8f4f 	dsb	sy
}
 8005dda:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8005ddc:	bf00      	nop
 8005dde:	e7fd      	b.n	8005ddc <__NVIC_SystemReset+0x20>
 8005de0:	e000ed00 	.word	0xe000ed00
 8005de4:	05fa0004 	.word	0x05fa0004

08005de8 <LL_FLASH_IsActiveFlag_OperationSuspended>:
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8005dec:	4b07      	ldr	r3, [pc, #28]	; (8005e0c <LL_FLASH_IsActiveFlag_OperationSuspended+0x24>)
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005df4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005df8:	d101      	bne.n	8005dfe <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e000      	b.n	8005e00 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	46bd      	mov	sp, r7
 8005e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e08:	4770      	bx	lr
 8005e0a:	bf00      	nop
 8005e0c:	58004000 	.word	0x58004000

08005e10 <Appli_ShortButtonPress>:
* @brief  Function calls when a button is pressed for short duration  
* @param  void
* @retval void
*/ 
static void Appli_ShortButtonPress(void)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
  BLEMesh_ModelsCommand();
 8005e14:	f001 f91a 	bl	800704c <BLEMesh_ModelsCommand>
}
 8005e18:	bf00      	nop
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <Appli_LongButtonPress>:
* @brief  Function calls when a button is pressed for Long duration  
* @param  void
* @retval void
*/ 
static void Appli_LongButtonPress(void)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	af00      	add	r7, sp, #0
//  TRACE_M(TF_LIGHT_CLIENT_M, "----------- API LIGHT LC ON OFF GET ------------- \r\n");
//  Appli_LightClient_API(0, LIGHT_LC_ON_OFF_GET, NULL);
  
  /** LIGHT LC PROPERTY **/
//LIGHT_CONTROL_AMBIENT_LUXLEVEL_ON_PID  : 0x002B
  pPropertyId[0]= 0x2B;           // Property ID byte 0 : Property ID identifying a Light LC Property.
 8005e20:	4b0a      	ldr	r3, [pc, #40]	; (8005e4c <Appli_LongButtonPress+0x30>)
 8005e22:	222b      	movs	r2, #43	; 0x2b
 8005e24:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID identifying a Light LC Property.
 8005e26:	4b09      	ldr	r3, [pc, #36]	; (8005e4c <Appli_LongButtonPress+0x30>)
 8005e28:	2200      	movs	r2, #0
 8005e2a:	705a      	strb	r2, [r3, #1]
//  Appli_LightClient_API(0, LIGHT_LC_PROPERTY_GET, pPropertyId);
  

  /* SENSOR APIs */
  //PRESENT_AMBIENT_TEMPERATURE_PID : 0x004F
  pPropertyId[0]= 0x4F;           // Property ID byte 0 : Property ID for the sensor
 8005e2c:	4b07      	ldr	r3, [pc, #28]	; (8005e4c <Appli_LongButtonPress+0x30>)
 8005e2e:	224f      	movs	r2, #79	; 0x4f
 8005e30:	701a      	strb	r2, [r3, #0]
  pPropertyId[1]= 0x00;           // Property ID byte 1 : Property ID for the sensor
 8005e32:	4b06      	ldr	r3, [pc, #24]	; (8005e4c <Appli_LongButtonPress+0x30>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	705a      	strb	r2, [r3, #1]
    /** SENSOR SETTINGS **/
//  TRACE_M(TF_SENSOR_CLIENT_M, "----------- API SENSOR SETTINGS GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SETTINGS_GET, pPropertyId);
  
    /** SENSOR SETTING **/
  pPropertyId[2]= 0xAD;           // Sensor Setting Property ID byte 0 : Property ID for the sensor setting
 8005e38:	4b04      	ldr	r3, [pc, #16]	; (8005e4c <Appli_LongButtonPress+0x30>)
 8005e3a:	22ad      	movs	r2, #173	; 0xad
 8005e3c:	709a      	strb	r2, [r3, #2]
  pPropertyId[3]= 0x00;           // Sensor Setting Property ID byte 1 : Property ID for the sensor setting
 8005e3e:	4b03      	ldr	r3, [pc, #12]	; (8005e4c <Appli_LongButtonPress+0x30>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	70da      	strb	r2, [r3, #3]
//  pPropertyId[2]= 0x01;           // Raw Value X1 byte 0 : Raw value identifying a starting column.
//  pPropertyId[3]= 0x02;           // Raw Value X2 byte 0 : Raw value identifying an ending column.
//  TRACE_M(TF_SENSOR_CLIENT_M, "----------- API SENSOR SERIES GET ------------- \r\n");
//  Appli_SensorsClient_API(0, SENSOR_SERIES_GET, pPropertyId);
  
  IntensityPublish();
 8005e44:	f000 fc5e 	bl	8006704 <IntensityPublish>
  
}
 8005e48:	bf00      	nop
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20004448 	.word	0x20004448

08005e50 <Appli_UpdateButtonState>:
* @brief  Updates the button status  
* @param  int isPressed
* @retval void
*/ 
static void Appli_UpdateButtonState(int isPressed)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t t0 = 0,t1 = 1;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	60bb      	str	r3, [r7, #8]

  t0 = Clock_Time(); /* SW1 press timing */
 8005e60:	f002 f800 	bl	8007e64 <HAL_GetTick>
 8005e64:	60f8      	str	r0, [r7, #12]
  
  while(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 8005e66:	bf00      	nop
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f001 fefd 	bl	8007c68 <BSP_PB_GetState>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0f9      	beq.n	8005e68 <Appli_UpdateButtonState+0x18>
  t1 = Clock_Time(); /* SW1 release timing */
 8005e74:	f001 fff6 	bl	8007e64 <HAL_GetTick>
 8005e78:	60b8      	str	r0, [r7, #8]
  
  if((t1 - t0) > LONG_PRESS_THRESHOLD)
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	1ad3      	subs	r3, r2, r3
 8005e80:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e84:	d902      	bls.n	8005e8c <Appli_UpdateButtonState+0x3c>
  {
    Appli_LongButtonPress();
 8005e86:	f7ff ffc9 	bl	8005e1c <Appli_LongButtonPress>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
  {
    /* Button 1 short press action */
    Appli_ShortButtonPress();
  }
}
 8005e8a:	e006      	b.n	8005e9a <Appli_UpdateButtonState+0x4a>
  else if((t1 - t0) > BOUNCE_THRESHOLD)
 8005e8c:	68ba      	ldr	r2, [r7, #8]
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	1ad3      	subs	r3, r2, r3
 8005e92:	2b14      	cmp	r3, #20
 8005e94:	d901      	bls.n	8005e9a <Appli_UpdateButtonState+0x4a>
    Appli_ShortButtonPress();
 8005e96:	f7ff ffbb 	bl	8005e10 <Appli_ShortButtonPress>
}
 8005e9a:	bf00      	nop
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <Mesh_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Mesh_Task()
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  BLEMesh_Process();
 8005ea8:	f020 fb52 	bl	8026550 <BLEMesh_Process>
  BLEMesh_ModelsProcess(); /* Models Processing */
 8005eac:	f001 f8c4 	bl	8007038 <BLEMesh_ModelsProcess>
  
  if((UnprovisionInProgress > 0) &&
 8005eb0:	4b13      	ldr	r3, [pc, #76]	; (8005f00 <Mesh_Task+0x5c>)
 8005eb2:	781b      	ldrb	r3, [r3, #0]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d01d      	beq.n	8005ef4 <Mesh_Task+0x50>
     (!LL_FLASH_IsActiveFlag_OperationSuspended()))
 8005eb8:	f7ff ff96 	bl	8005de8 <LL_FLASH_IsActiveFlag_OperationSuspended>
 8005ebc:	4603      	mov	r3, r0
  if((UnprovisionInProgress > 0) &&
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d118      	bne.n	8005ef4 <Mesh_Task+0x50>
  {
    UnprovisionInProgress = 0;
 8005ec2:	4b0f      	ldr	r3, [pc, #60]	; (8005f00 <Mesh_Task+0x5c>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
    AppliNvm_ClearModelState();
 8005ec8:	f000 fcc7 	bl	800685a <AppliNvm_ClearModelState>
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 8005ecc:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <Mesh_Task+0x60>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2104      	movs	r1, #4
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 fad8 	bl	8007488 <PalNvmErase>
    TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 8005ed8:	2100      	movs	r1, #0
 8005eda:	480b      	ldr	r0, [pc, #44]	; (8005f08 <Mesh_Task+0x64>)
 8005edc:	f007 fb48 	bl	800d570 <TraceHeader>
 8005ee0:	480a      	ldr	r0, [pc, #40]	; (8005f0c <Mesh_Task+0x68>)
 8005ee2:	f023 fbaf 	bl	8029644 <puts>
    TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	4807      	ldr	r0, [pc, #28]	; (8005f08 <Mesh_Task+0x64>)
 8005eea:	f007 fb41 	bl	800d570 <TraceHeader>
 8005eee:	4808      	ldr	r0, [pc, #32]	; (8005f10 <Mesh_Task+0x6c>)
 8005ef0:	f023 fba8 	bl	8029644 <puts>
  }
    
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	2002      	movs	r0, #2
 8005ef8:	f010 fe9c 	bl	8016c34 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8005efc:	bf00      	nop
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20004441 	.word	0x20004441
 8005f04:	2000445c 	.word	0x2000445c
 8005f08:	08032a50 	.word	0x08032a50
 8005f0c:	0802e6e8 	.word	0x0802e6e8
 8005f10:	0802e6f4 	.word	0x0802e6f4

08005f14 <Appli_Task>:
* @brief  task for the BLE MESH, the MESH Models and the Appli processes  
* @param  void
* @retval void
*/ 
static void Appli_Task()
{
 8005f14:	b580      	push	{r7, lr}
 8005f16:	af00      	add	r7, sp, #0
  Appli_Process();
 8005f18:	f000 fbfb 	bl	8006712 <Appli_Process>
  
#if (APPLI_OPTIM == 0)
  /* Set the task in the scheduler for the next execution */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 8005f1c:	2100      	movs	r1, #0
 8005f1e:	2020      	movs	r0, #32
 8005f20:	f010 fe88 	bl	8016c34 <UTIL_SEQ_SetTask>
#endif
#endif
}
 8005f24:	bf00      	nop
 8005f26:	bd80      	pop	{r7, pc}

08005f28 <Appli_LedCtrl>:
* @brief  Controls the state of on board LED
* @param  void
* @retval void
*/ 
void Appli_LedCtrl(void)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
  if(Appli_LedState)
 8005f2c:	4b06      	ldr	r3, [pc, #24]	; (8005f48 <Appli_LedCtrl+0x20>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <Appli_LedCtrl+0x14>
  {
    BSP_LED_On(LED_BLUE);
 8005f34:	2000      	movs	r0, #0
 8005f36:	f001 fdf3 	bl	8007b20 <BSP_LED_On>
  else
  {
    BSP_LED_Off(LED_BLUE);

  }
}
 8005f3a:	e002      	b.n	8005f42 <Appli_LedCtrl+0x1a>
    BSP_LED_Off(LED_BLUE);
 8005f3c:	2000      	movs	r0, #0
 8005f3e:	f001 fe09 	bl	8007b54 <BSP_LED_Off>
}
 8005f42:	bf00      	nop
 8005f44:	bd80      	pop	{r7, pc}
 8005f46:	bf00      	nop
 8005f48:	2000443a 	.word	0x2000443a

08005f4c <Appli_LedBlink>:
* @brief  Blinks the on board LED  
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_LedBlink(void)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	af00      	add	r7, sp, #0
  /* Switch On the LED */
  Appli_LedState = 1;
 8005f50:	4b0a      	ldr	r3, [pc, #40]	; (8005f7c <Appli_LedBlink+0x30>)
 8005f52:	2201      	movs	r2, #1
 8005f54:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8005f56:	f7ff ffe7 	bl	8005f28 <Appli_LedCtrl>
  Clock_Wait(500);
 8005f5a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f5e:	f7fb fcca 	bl	80018f6 <HAL_Delay>
  
  /* Switch Off the LED */
  Appli_LedState = 0;
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <Appli_LedBlink+0x30>)
 8005f64:	2200      	movs	r2, #0
 8005f66:	701a      	strb	r2, [r3, #0]
  Appli_LedCtrl();
 8005f68:	f7ff ffde 	bl	8005f28 <Appli_LedCtrl>
  Clock_Wait(500);
 8005f6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f70:	f7fb fcc1 	bl	80018f6 <HAL_Delay>
  
  return MOBLE_RESULT_SUCCESS;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	2000443a 	.word	0x2000443a

08005f80 <Appli_BleStackInitCb>:
* @brief  initializes BLE Stack    
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleStackInitCb()
{
 8005f80:	b480      	push	{r7}
 8005f82:	af00      	add	r7, sp, #0
  /* BLE Stack initialization */
  /* Not Required in BLE */
  return MOBLE_RESULT_SUCCESS;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <Appli_BleSetTxPowerCb>:
* @brief  Sets transmission power of RF 
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetTxPowerCb(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b082      	sub	sp, #8
 8005f94:	af00      	add	r7, sp, #0
  /* API to change the Transmission power of BLE Device */
  /* uint8_t en_high_power, uint8_t pa_level
  en_high_power Can be only 0 or 1. Set high power bit on or off.
  pa_level Can be from 0 to 7. Set the PA level value
  */ 
  status = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8005f96:	2118      	movs	r1, #24
 8005f98:	2001      	movs	r0, #1
 8005f9a:	f00f fa90 	bl	80154be <aci_hal_set_tx_power_level>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	71fb      	strb	r3, [r7, #7]
  if (status)
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <Appli_BleSetTxPowerCb+0x1c>
    return MOBLE_RESULT_FAIL;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e000      	b.n	8005fae <Appli_BleSetTxPowerCb+0x1e>
  else
    return MOBLE_RESULT_SUCCESS;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3708      	adds	r7, #8
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <Appli_BleSetUUIDCb>:
* @brief  SET UUID value 
* @param  uuid_prefix_data : Pointer of UUID buffer data
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleSetUUIDCb(MOBLEUINT8 *uuid_prefix_data)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b086      	sub	sp, #24
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
      Y = 4 i.e. Conforming to the current spec 
    For UUID information refer RFC4122
  */
  
  /* copy UUID prefix data*/
  uint8_t uuid_buff[10] = {0xF8,0x1D,0x4F,0xAE,0x7D,0xEC};/*random value by user */
 8005fc0:	4a16      	ldr	r2, [pc, #88]	; (800601c <Appli_BleSetUUIDCb+0x64>)
 8005fc2:	f107 030c 	add.w	r3, r7, #12
 8005fc6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fca:	6018      	str	r0, [r3, #0]
 8005fcc:	3304      	adds	r3, #4
 8005fce:	8019      	strh	r1, [r3, #0]
 8005fd0:	3302      	adds	r3, #2
 8005fd2:	0c0a      	lsrs	r2, r1, #16
 8005fd4:	701a      	strb	r2, [r3, #0]
 8005fd6:	f107 0313 	add.w	r3, r7, #19
 8005fda:	2200      	movs	r2, #0
 8005fdc:	801a      	strh	r2, [r3, #0]
 8005fde:	709a      	strb	r2, [r3, #2]

   uuid_buff[6] = 0x4B;  /* 0x4B => 4 : Random */
 8005fe0:	234b      	movs	r3, #75	; 0x4b
 8005fe2:	74bb      	strb	r3, [r7, #18]
   uuid_buff[7] = 'S' ;  /* User define value */
 8005fe4:	2353      	movs	r3, #83	; 0x53
 8005fe6:	74fb      	strb	r3, [r7, #19]
   uuid_buff[8] = 0xA1;  /* 0xA1 => A : Conforming to the current Spec */
 8005fe8:	23a1      	movs	r3, #161	; 0xa1
 8005fea:	753b      	strb	r3, [r7, #20]
   uuid_buff[9] = 'T' ;  /* User define value */  
 8005fec:	2354      	movs	r3, #84	; 0x54
 8005fee:	757b      	strb	r3, [r7, #21]

   memcpy(uuid_prefix_data,uuid_buff,sizeof(uuid_buff));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	f107 030c 	add.w	r3, r7, #12
 8005ff8:	cb03      	ldmia	r3!, {r0, r1}
 8005ffa:	6010      	str	r0, [r2, #0]
 8005ffc:	6051      	str	r1, [r2, #4]
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	8113      	strh	r3, [r2, #8]
   memcpy(&uuid_prefix_data[10],bdaddr,6);  /* Copy bdaddr to last 6 bytes of UUID */
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	330a      	adds	r3, #10
 8006006:	2206      	movs	r2, #6
 8006008:	4905      	ldr	r1, [pc, #20]	; (8006020 <Appli_BleSetUUIDCb+0x68>)
 800600a:	4618      	mov	r0, r3
 800600c:	f023 fce3 	bl	80299d6 <memcpy>
   
   return MOBLE_RESULT_SUCCESS;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	0802e720 	.word	0x0802e720
 8006020:	2000444c 	.word	0x2000444c

08006024 <Appli_BleSetProductInfoCB>:
* @brief  SET CID , PID and VID values 
* @param  company_product_info : vendor fill product information in this buffer
* @retval MOBLE_RESULT status of result
*/
MOBLE_RESULT Appli_BleSetProductInfoCB(MOBLEUINT8 *company_product_info)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  /* CID : provide 16-bit company identifier assigned by the Bluetooth SIG */
  uint16_t company_id                   = COMPANY_ID;
 800602c:	2330      	movs	r3, #48	; 0x30
 800602e:	81fb      	strh	r3, [r7, #14]
  
  /* PID : Provide 16-bit vendor-assigned product identifier */
  uint16_t product_id                   = PRODUCT_ID;
 8006030:	2302      	movs	r3, #2
 8006032:	81bb      	strh	r3, [r7, #12]
  
  /* VID : Provide 16-bit vendor-assigned product version identifier*/
  uint16_t product_version_id           = PRODUCT_VERSION_ID;
 8006034:	f44f 7385 	mov.w	r3, #266	; 0x10a
 8006038:	817b      	strh	r3, [r7, #10]
 800603a:	89fa      	ldrh	r2, [r7, #14]
  
  memcpy(company_product_info + 0,(void *)&company_id,sizeof(company_id));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 2 ,(void *)&product_id,sizeof(product_id));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	3302      	adds	r3, #2
 8006044:	89ba      	ldrh	r2, [r7, #12]
 8006046:	801a      	strh	r2, [r3, #0]
  memcpy(company_product_info + 4 ,(void *)&product_version_id,sizeof(product_version_id));
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3304      	adds	r3, #4
 800604c:	897a      	ldrh	r2, [r7, #10]
 800604e:	801a      	strh	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <Appli_BleGattConnectionCompleteCb>:
* @brief  Call back function called when GATT Connection Created  
* @param  none
* @retval none
*/ 
void Appli_BleGattConnectionCompleteCb(void)
{ 
 8006060:	b580      	push	{r7, lr}
 8006062:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 8006064:	4b05      	ldr	r3, [pc, #20]	; (800607c <Appli_BleGattConnectionCompleteCb+0x1c>)
 8006066:	2201      	movs	r2, #1
 8006068:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt connection is established */
  /* Turn ON Red LED*/
  ProxyFlag = 1;
 800606a:	4b05      	ldr	r3, [pc, #20]	; (8006080 <Appli_BleGattConnectionCompleteCb+0x20>)
 800606c:	2201      	movs	r2, #1
 800606e:	701a      	strb	r2, [r3, #0]
  BSP_LED_On(LED_GREEN);
 8006070:	2001      	movs	r0, #1
 8006072:	f001 fd55 	bl	8007b20 <BSP_LED_On>
}
 8006076:	bf00      	nop
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	20004440 	.word	0x20004440
 8006080:	2000443f 	.word	0x2000443f

08006084 <Appli_BleGattDisconnectionCompleteCb>:
* @brief  Call back function called when GATT Disconnection Complete  
* @param  none
* @retval none
*/ 
void Appli_BleGattDisconnectionCompleteCb(void)
{ 
 8006084:	b580      	push	{r7, lr}
 8006086:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <Appli_BleGattDisconnectionCompleteCb+0x1c>)
 800608a:	2200      	movs	r2, #0
 800608c:	701a      	strb	r2, [r3, #0]
  /* Proxy Node, will be called whenever Gatt disconnected */
  /* Turn Off Red LED*/
  ProxyFlag = 0;
 800608e:	4b05      	ldr	r3, [pc, #20]	; (80060a4 <Appli_BleGattDisconnectionCompleteCb+0x20>)
 8006090:	2200      	movs	r2, #0
 8006092:	701a      	strb	r2, [r3, #0]
  BSP_LED_Off(LED_GREEN);
 8006094:	2001      	movs	r0, #1
 8006096:	f001 fd5d 	bl	8007b54 <BSP_LED_Off>
}
 800609a:	bf00      	nop
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	20004440 	.word	0x20004440
 80060a4:	2000443f 	.word	0x2000443f

080060a8 <Appli_BleUnprovisionedIdentifyCb>:
* @brief Unprovisioned Node Identification
* @param MOBLEUINT8 data 
* @retval none
*/
void Appli_BleUnprovisionedIdentifyCb(MOBLEUINT8 data)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	4603      	mov	r3, r0
 80060b0:	71fb      	strb	r3, [r7, #7]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 1;  
#endif   
  TRACE_M(TF_PROVISION,"Unprovisioned Node Identifier received: %02x\n\r", data);    
 80060b2:	2100      	movs	r1, #0
 80060b4:	4805      	ldr	r0, [pc, #20]	; (80060cc <Appli_BleUnprovisionedIdentifyCb+0x24>)
 80060b6:	f007 fa5b 	bl	800d570 <TraceHeader>
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	4619      	mov	r1, r3
 80060be:	4804      	ldr	r0, [pc, #16]	; (80060d0 <Appli_BleUnprovisionedIdentifyCb+0x28>)
 80060c0:	f023 fa5a 	bl	8029578 <iprintf>
}
 80060c4:	bf00      	nop
 80060c6:	3708      	adds	r7, #8
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	08032a5c 	.word	0x08032a5c
 80060d0:	0802e72c 	.word	0x0802e72c

080060d4 <Appli_BleSetNumberOfElementsCb>:
* @brief  Set Number of Elements in a Node
* @param  none
* @retval Sending the value to BLE Mesh Library
*/ 
MOBLEUINT8 Appli_BleSetNumberOfElementsCb(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  if(NumberOfElements > BLEMesh_GetNumberOfElements())
 80060d8:	f017 f81c 	bl	801d114 <BLEMesh_GetNumberOfElements>
 80060dc:	4603      	mov	r3, r0
 80060de:	461a      	mov	r2, r3
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <Appli_BleSetNumberOfElementsCb+0x4c>)
 80060e2:	781b      	ldrb	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d20a      	bcs.n	80060fe <Appli_BleSetNumberOfElementsCb+0x2a>
  {
    TRACE_M(TF_MISC, "Number of Elements enabled in application exceeding from Library Capability!\r\n"); 
 80060e8:	2100      	movs	r1, #0
 80060ea:	480e      	ldr	r0, [pc, #56]	; (8006124 <Appli_BleSetNumberOfElementsCb+0x50>)
 80060ec:	f007 fa40 	bl	800d570 <TraceHeader>
 80060f0:	480d      	ldr	r0, [pc, #52]	; (8006128 <Appli_BleSetNumberOfElementsCb+0x54>)
 80060f2:	f023 faa7 	bl	8029644 <puts>
    return BLEMesh_GetNumberOfElements();
 80060f6:	f017 f80d 	bl	801d114 <BLEMesh_GetNumberOfElements>
 80060fa:	4603      	mov	r3, r0
 80060fc:	e00e      	b.n	800611c <Appli_BleSetNumberOfElementsCb+0x48>
  }
  
  else if(NumberOfElements == 0)
 80060fe:	4b08      	ldr	r3, [pc, #32]	; (8006120 <Appli_BleSetNumberOfElementsCb+0x4c>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d108      	bne.n	8006118 <Appli_BleSetNumberOfElementsCb+0x44>
  {
    TRACE_M(TF_MISC,"Number Of Elements must be 1 or greater than 1!\r\n"); 
 8006106:	2100      	movs	r1, #0
 8006108:	4806      	ldr	r0, [pc, #24]	; (8006124 <Appli_BleSetNumberOfElementsCb+0x50>)
 800610a:	f007 fa31 	bl	800d570 <TraceHeader>
 800610e:	4807      	ldr	r0, [pc, #28]	; (800612c <Appli_BleSetNumberOfElementsCb+0x58>)
 8006110:	f023 fa98 	bl	8029644 <puts>
    return 1;
 8006114:	2301      	movs	r3, #1
 8006116:	e001      	b.n	800611c <Appli_BleSetNumberOfElementsCb+0x48>
  }
  
  else
  {
    return NumberOfElements;
 8006118:	4b01      	ldr	r3, [pc, #4]	; (8006120 <Appli_BleSetNumberOfElementsCb+0x4c>)
 800611a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800611c:	4618      	mov	r0, r3
 800611e:	bd80      	pop	{r7, pc}
 8006120:	2000007f 	.word	0x2000007f
 8006124:	08032a80 	.word	0x08032a80
 8006128:	0802e75c 	.word	0x0802e75c
 800612c:	0802e7ac 	.word	0x0802e7ac

08006130 <Appli_BleAttentionTimerCb>:
* @brief  Sets the Attention Timer Callback function
* @param  none
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_BleAttentionTimerCb(void)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	af00      	add	r7, sp, #0
/* avoid printf, if low power feature is supported */  
#if (LOW_POWER_FEATURE == 0)
  TRACE_M(TF_MISC, " \r\n");
 8006134:	2100      	movs	r1, #0
 8006136:	4804      	ldr	r0, [pc, #16]	; (8006148 <Appli_BleAttentionTimerCb+0x18>)
 8006138:	f007 fa1a 	bl	800d570 <TraceHeader>
 800613c:	4803      	ldr	r0, [pc, #12]	; (800614c <Appli_BleAttentionTimerCb+0x1c>)
 800613e:	f023 fa81 	bl	8029644 <puts>
#endif /* LOW_POWER_FEATURE == 0 */
  return MOBLE_RESULT_SUCCESS;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	bd80      	pop	{r7, pc}
 8006148:	08032aa0 	.word	0x08032aa0
 800614c:	0802e7e0 	.word	0x0802e7e0

08006150 <Appli_BleOutputOOBAuthCb>:
* @param  MOBLEUINT8* output_oob
* @param  MOBLEUINT8 size
* @retval void
*/ 
void Appli_BleOutputOOBAuthCb(MOBLEUINT8* output_oob, MOBLEUINT8 size)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
 8006158:	460b      	mov	r3, r1
 800615a:	70fb      	strb	r3, [r7, #3]
        ooBData |= (output_oob[i] << 8*i);
    }
    OutputOobData = ooBData;
    TRACE_M(TF_PROVISION,"Output OOB information for provisioner: %ld\n\r", ooBData);
  #endif
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <Appli_BleInputOOBAuthCb>:
* @brief  Call back function to provide Input OOB information
* @param  MOBLEUINT8 size
* @retval MOBLEUINT8*  
*/ 
MOBLEUINT8* Appli_BleInputOOBAuthCb(MOBLEUINT8 size)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	4603      	mov	r3, r0
 8006170:	71fb      	strb	r3, [r7, #7]
  
  inputOOBDataReady = 0;
  return InputOobData; 
#endif
#else
  return NULL;
 8006172:	2300      	movs	r3, #0
#endif
}
 8006174:	4618      	mov	r0, r3
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <Appli_BleDisableFilterCb>:
* @brief  Application BLE Disable Filter 
* @param  none
* @retval Status is replied
*/
MOBLEUINT8 Appli_BleDisableFilterCb(void)
{
 8006180:	b480      	push	{r7}
 8006182:	af00      	add	r7, sp, #0
    return DisableFilter;
 8006184:	4b03      	ldr	r3, [pc, #12]	; (8006194 <Appli_BleDisableFilterCb+0x14>)
 8006186:	781b      	ldrb	r3, [r3, #0]
}
 8006188:	4618      	mov	r0, r3
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	20004442 	.word	0x20004442

08006198 <Appli_CheckForUnprovision>:
* @brief  Checks and do Manual Unprovision of board  
* @param  void
* @retval void
*/ 
void Appli_CheckForUnprovision(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b082      	sub	sp, #8
 800619c:	af00      	add	r7, sp, #0
  /* Checks if the User button is pressed or not at the startup */
  if (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 800619e:	2000      	movs	r0, #0
 80061a0:	f001 fd62 	bl	8007c68 <BSP_PB_GetState>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d153      	bne.n	8006252 <Appli_CheckForUnprovision+0xba>
  {
    BSP_LED_On(LED_BLUE);
 80061aa:	2000      	movs	r0, #0
 80061ac:	f001 fcb8 	bl	8007b20 <BSP_LED_On>
    tClockTime t = Clock_Time();
 80061b0:	f001 fe58 	bl	8007e64 <HAL_GetTick>
 80061b4:	6038      	str	r0, [r7, #0]
    int interrupted = 0;
 80061b6:	2300      	movs	r3, #0
 80061b8:	607b      	str	r3, [r7, #4]
    
    /*Wait to check if user is pressing the button persistently*/
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 80061ba:	e008      	b.n	80061ce <Appli_CheckForUnprovision+0x36>
    {
      if (BSP_PB_GetState(BUTTON_SW1) != BUTTON_PRESSED)
 80061bc:	2000      	movs	r0, #0
 80061be:	f001 fd53 	bl	8007c68 <BSP_PB_GetState>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d002      	beq.n	80061ce <Appli_CheckForUnprovision+0x36>
      {
        interrupted = 1;
 80061c8:	2301      	movs	r3, #1
 80061ca:	607b      	str	r3, [r7, #4]
        break;
 80061cc:	e008      	b.n	80061e0 <Appli_CheckForUnprovision+0x48>
    while ((Clock_Time() - t) < MANUAL_UNPROVISION_TIMER)
 80061ce:	f001 fe49 	bl	8007e64 <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80061dc:	4293      	cmp	r3, r2
 80061de:	d9ed      	bls.n	80061bc <Appli_CheckForUnprovision+0x24>
      }
    }
    /* Unprovision, show that unprovisioning is completed, and 
    wait until user releases button*/
    if (!interrupted)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d132      	bne.n	800624c <Appli_CheckForUnprovision+0xb4>
    {
      /* No GATT connection */
      BLEMesh_StopAdvScan();
 80061e6:	f019 f9de 	bl	801f5a6 <BLEMesh_StopAdvScan>
      HAL_Delay(10);
 80061ea:	200a      	movs	r0, #10
 80061ec:	f7fb fb83 	bl	80018f6 <HAL_Delay>

      PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 80061f0:	4b23      	ldr	r3, [pc, #140]	; (8006280 <Appli_CheckForUnprovision+0xe8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2104      	movs	r1, #4
 80061f6:	4618      	mov	r0, r3
 80061f8:	f001 f946 	bl	8007488 <PalNvmErase>
      TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 80061fc:	2100      	movs	r1, #0
 80061fe:	4821      	ldr	r0, [pc, #132]	; (8006284 <Appli_CheckForUnprovision+0xec>)
 8006200:	f007 f9b6 	bl	800d570 <TraceHeader>
 8006204:	4820      	ldr	r0, [pc, #128]	; (8006288 <Appli_CheckForUnprovision+0xf0>)
 8006206:	f023 fa1d 	bl	8029644 <puts>
      
      BLEMesh_Unprovision();
 800620a:	f01a ff0d 	bl	8021028 <BLEMesh_Unprovision>
      AppliNvm_ClearModelState();     
 800620e:	f000 fb24 	bl	800685a <AppliNvm_ClearModelState>
      TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8006212:	2100      	movs	r1, #0
 8006214:	481b      	ldr	r0, [pc, #108]	; (8006284 <Appli_CheckForUnprovision+0xec>)
 8006216:	f007 f9ab 	bl	800d570 <TraceHeader>
 800621a:	481c      	ldr	r0, [pc, #112]	; (800628c <Appli_CheckForUnprovision+0xf4>)
 800621c:	f023 fa12 	bl	8029644 <puts>
      t = Clock_Time();
 8006220:	f001 fe20 	bl	8007e64 <HAL_GetTick>
 8006224:	6038      	str	r0, [r7, #0]
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 8006226:	e001      	b.n	800622c <Appli_CheckForUnprovision+0x94>
      {
        BLEMesh_Process();
 8006228:	f020 f992 	bl	8026550 <BLEMesh_Process>
      while ((Clock_Time() - t) < FLASH_ERASE_TIME)
 800622c:	f001 fe1a 	bl	8007e64 <HAL_GetTick>
 8006230:	4602      	mov	r2, r0
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	1ad3      	subs	r3, r2, r3
 8006236:	2b63      	cmp	r3, #99	; 0x63
 8006238:	d9f6      	bls.n	8006228 <Appli_CheckForUnprovision+0x90>
      }
      
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 800623a:	e001      	b.n	8006240 <Appli_CheckForUnprovision+0xa8>
      {
        Appli_LedBlink();
 800623c:	f7ff fe86 	bl	8005f4c <Appli_LedBlink>
      while (BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED)
 8006240:	2000      	movs	r0, #0
 8006242:	f001 fd11 	bl	8007c68 <BSP_PB_GetState>
 8006246:	4603      	mov	r3, r0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d0f7      	beq.n	800623c <Appli_CheckForUnprovision+0xa4>
      }
    }
    BSP_LED_Off(LED_BLUE);
 800624c:	2000      	movs	r0, #0
 800624e:	f001 fc81 	bl	8007b54 <BSP_LED_Off>
  }
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_REQ_ID, UTIL_SEQ_RFU, Mesh_Task );
 8006252:	4a0f      	ldr	r2, [pc, #60]	; (8006290 <Appli_CheckForUnprovision+0xf8>)
 8006254:	2100      	movs	r1, #0
 8006256:	2002      	movs	r0, #2
 8006258:	f010 fcca 	bl	8016bf0 <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_REQ_ID, CFG_SCH_PRIO_0);  
 800625c:	2100      	movs	r1, #0
 800625e:	2002      	movs	r0, #2
 8006260:	f010 fce8 	bl	8016c34 <UTIL_SEQ_SetTask>
#else
  BleProcessInit = 1;
#endif
  
  /* Register the task for all MESH dedicated processes */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_APPLI_REQ_ID, UTIL_SEQ_RFU, Appli_Task );
 8006264:	4a0b      	ldr	r2, [pc, #44]	; (8006294 <Appli_CheckForUnprovision+0xfc>)
 8006266:	2100      	movs	r1, #0
 8006268:	2020      	movs	r0, #32
 800626a:	f010 fcc1 	bl	8016bf0 <UTIL_SEQ_RegTask>
  /* Set the task in the scheduler for the next scheduling */
#if (LOW_POWER_FEATURE == 0)
  UTIL_SEQ_SetTask( 1<<CFG_TASK_APPLI_REQ_ID, CFG_SCH_PRIO_0);
 800626e:	2100      	movs	r1, #0
 8006270:	2020      	movs	r0, #32
 8006272:	f010 fcdf 	bl	8016c34 <UTIL_SEQ_SetTask>
#if (APPLI_OPTIM == 1)
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &appliTaskTimer_Id, hw_ts_Repeated, AppliMeshTask);
  
  HW_TS_Start(appliTaskTimer_Id, APPLI_MESH_TIMER_INTERVAL);
#endif
}
 8006276:	bf00      	nop
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop
 8006280:	2000445c 	.word	0x2000445c
 8006284:	08032abc 	.word	0x08032abc
 8006288:	0802e6e8 	.word	0x0802e6e8
 800628c:	0802e6f4 	.word	0x0802e6f4
 8006290:	08005ea5 	.word	0x08005ea5
 8006294:	08005f15 	.word	0x08005f15

08006298 <Appli_Unprovision>:

void Appli_Unprovision(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  if(!ProxyFlag)
 800629c:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <Appli_Unprovision+0x4c>)
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d11c      	bne.n	80062de <Appli_Unprovision+0x46>
  {
    /* No GATT connection */
    BLEMesh_StopAdvScan();
 80062a4:	f019 f97f 	bl	801f5a6 <BLEMesh_StopAdvScan>
    HAL_Delay(10);
 80062a8:	200a      	movs	r0, #10
 80062aa:	f7fb fb24 	bl	80018f6 <HAL_Delay>
      
    PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 80062ae:	4b0e      	ldr	r3, [pc, #56]	; (80062e8 <Appli_Unprovision+0x50>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2104      	movs	r1, #4
 80062b4:	4618      	mov	r0, r3
 80062b6:	f001 f8e7 	bl	8007488 <PalNvmErase>
    TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 80062ba:	2100      	movs	r1, #0
 80062bc:	480b      	ldr	r0, [pc, #44]	; (80062ec <Appli_Unprovision+0x54>)
 80062be:	f007 f957 	bl	800d570 <TraceHeader>
 80062c2:	480b      	ldr	r0, [pc, #44]	; (80062f0 <Appli_Unprovision+0x58>)
 80062c4:	f023 f9be 	bl	8029644 <puts>
  
    TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 80062c8:	2100      	movs	r1, #0
 80062ca:	4808      	ldr	r0, [pc, #32]	; (80062ec <Appli_Unprovision+0x54>)
 80062cc:	f007 f950 	bl	800d570 <TraceHeader>
 80062d0:	4808      	ldr	r0, [pc, #32]	; (80062f4 <Appli_Unprovision+0x5c>)
 80062d2:	f023 f9b7 	bl	8029644 <puts>

    BLEMesh_Process();
 80062d6:	f020 f93b 	bl	8026550 <BLEMesh_Process>
    NVIC_SystemReset();
 80062da:	f7ff fd6f 	bl	8005dbc <__NVIC_SystemReset>
  }
}
 80062de:	bf00      	nop
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	2000443f 	.word	0x2000443f
 80062e8:	2000445c 	.word	0x2000445c
 80062ec:	08032ad8 	.word	0x08032ad8
 80062f0:	0802e6e8 	.word	0x0802e6e8
 80062f4:	0802e6f4 	.word	0x0802e6f4

080062f8 <Appli_CheckBdMacAddr>:
* @brief  Checks and updates Mac address to generate MAC Address
* @param  void
* @retval MOBLEUINT8 sum return the sum calculated mac
*/ 
int Appli_CheckBdMacAddr(void)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
  MOBLEUINT8 sum = 239;
 80062fe:	23ef      	movs	r3, #239	; 0xef
 8006300:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 result = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	73bb      	strb	r3, [r7, #14]
  tBleStatus status = BLE_STATUS_SUCCESS;
 8006306:	2300      	movs	r3, #0
 8006308:	71fb      	strb	r3, [r7, #7]
  memcpy(bdaddr, (MOBLEUINT8 *)CFG_ADV_BD_ADDRESS, 7);
  bdaddr[7] = (EXTERNAL_MAC_ADDR_MGMT | EXTERNAL_MAC_TYPE);
#endif
  
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
  status = aci_hal_read_config_data(CONFIG_DATA_PUBADDR_OFFSET, 
 800630a:	4a1e      	ldr	r2, [pc, #120]	; (8006384 <Appli_CheckBdMacAddr+0x8c>)
 800630c:	491e      	ldr	r1, [pc, #120]	; (8006388 <Appli_CheckBdMacAddr+0x90>)
 800630e:	2000      	movs	r0, #0
 8006310:	f00f f850 	bl	80153b4 <aci_hal_read_config_data>
 8006314:	4603      	mov	r3, r0
 8006316:	71fb      	strb	r3, [r7, #7]
                                    &bdaddr[7],
                                    bdaddr); 
  if(status != BLE_STATUS_SUCCESS) 
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d008      	beq.n	8006330 <Appli_CheckBdMacAddr+0x38>
  {
    TRACE_M(TF_PROVISION, "Failed to read Public Address %d", status);
 800631e:	2100      	movs	r1, #0
 8006320:	481a      	ldr	r0, [pc, #104]	; (800638c <Appli_CheckBdMacAddr+0x94>)
 8006322:	f007 f925 	bl	800d570 <TraceHeader>
 8006326:	79fb      	ldrb	r3, [r7, #7]
 8006328:	4619      	mov	r1, r3
 800632a:	4819      	ldr	r0, [pc, #100]	; (8006390 <Appli_CheckBdMacAddr+0x98>)
 800632c:	f023 f924 	bl	8029578 <iprintf>
  }

  Appli_GetMACfromUniqueNumber();
 8006330:	f000 f830 	bl	8006394 <Appli_GetMACfromUniqueNumber>
  bdaddr[7] = INTERNAL_UNIQUE_NUMBER_MAC;
 8006334:	4b13      	ldr	r3, [pc, #76]	; (8006384 <Appli_CheckBdMacAddr+0x8c>)
 8006336:	2203      	movs	r2, #3
 8006338:	71da      	strb	r2, [r3, #7]
#endif

  for (int i = 0; i < 6; ++i)
 800633a:	2300      	movs	r3, #0
 800633c:	60bb      	str	r3, [r7, #8]
 800633e:	e00b      	b.n	8006358 <Appli_CheckBdMacAddr+0x60>
  {
    sum = (sum << 1) + bdaddr[i];
 8006340:	7bfb      	ldrb	r3, [r7, #15]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	b2da      	uxtb	r2, r3
 8006346:	490f      	ldr	r1, [pc, #60]	; (8006384 <Appli_CheckBdMacAddr+0x8c>)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	440b      	add	r3, r1
 800634c:	781b      	ldrb	r3, [r3, #0]
 800634e:	4413      	add	r3, r2
 8006350:	73fb      	strb	r3, [r7, #15]
  for (int i = 0; i < 6; ++i)
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	3301      	adds	r3, #1
 8006356:	60bb      	str	r3, [r7, #8]
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	2b05      	cmp	r3, #5
 800635c:	ddf0      	ble.n	8006340 <Appli_CheckBdMacAddr+0x48>
  }

  if (sum == bdaddr[6])
 800635e:	4b09      	ldr	r3, [pc, #36]	; (8006384 <Appli_CheckBdMacAddr+0x8c>)
 8006360:	799b      	ldrb	r3, [r3, #6]
 8006362:	7bfa      	ldrb	r2, [r7, #15]
 8006364:	429a      	cmp	r2, r3
 8006366:	d101      	bne.n	800636c <Appli_CheckBdMacAddr+0x74>
  {
    result = 1;
 8006368:	2301      	movs	r3, #1
 800636a:	73bb      	strb	r3, [r7, #14]
  }
  
#if defined(EXTERNAL_MAC_ADDR_MGMT) && defined(EXTERNAL_MAC_IS_PUBLIC_ADDR)
   /* Do nothing for modification of 2 MSb */
#else
  bdaddr[5] |= 0xC0;    /* 2 Msb bits shall be 11b for Static Random Address */
 800636c:	4b05      	ldr	r3, [pc, #20]	; (8006384 <Appli_CheckBdMacAddr+0x8c>)
 800636e:	795b      	ldrb	r3, [r3, #5]
 8006370:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8006374:	b2da      	uxtb	r2, r3
 8006376:	4b03      	ldr	r3, [pc, #12]	; (8006384 <Appli_CheckBdMacAddr+0x8c>)
 8006378:	715a      	strb	r2, [r3, #5]
                      /* Do nothing for bdaddr, just pass the identification */
  result = 1;         /* This will overwrite the above for loop result, 
                          which is redundant for this case */
#endif  
  
  return result;
 800637a:	7bbb      	ldrb	r3, [r7, #14]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	2000444c 	.word	0x2000444c
 8006388:	20004453 	.word	0x20004453
 800638c:	08032aec 	.word	0x08032aec
 8006390:	0802e7e4 	.word	0x0802e7e4

08006394 <Appli_GetMACfromUniqueNumber>:
* @param  void
* @retval void
*/
#ifdef INTERNAL_UNIQUE_NUMBER_MAC
static void Appli_GetMACfromUniqueNumber(void)
{
 8006394:	b480      	push	{r7}
 8006396:	b083      	sub	sp, #12
 8006398:	af00      	add	r7, sp, #0
  DEVICE_ID_REG1 could be identical for same batch samples, 
  4 bytes have been taken from DEVICE_ID_REG2
  */
  
  uint8_t i;
  uint8_t sum = 239;
 800639a:	23ef      	movs	r3, #239	; 0xef
 800639c:	71bb      	strb	r3, [r7, #6]
  /* Static Device Address: 
  The two most significant bits 
  of the address shall be equal to 1, 
  hence ORed with 0xC0)*/
  
  for (i = 0; i < 6; ++i)
 800639e:	2300      	movs	r3, #0
 80063a0:	71fb      	strb	r3, [r7, #7]
 80063a2:	e00a      	b.n	80063ba <Appli_GetMACfromUniqueNumber+0x26>
  {
    sum = (sum << 1) + bdaddr[i];
 80063a4:	79bb      	ldrb	r3, [r7, #6]
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	b2da      	uxtb	r2, r3
 80063aa:	79fb      	ldrb	r3, [r7, #7]
 80063ac:	4909      	ldr	r1, [pc, #36]	; (80063d4 <Appli_GetMACfromUniqueNumber+0x40>)
 80063ae:	5ccb      	ldrb	r3, [r1, r3]
 80063b0:	4413      	add	r3, r2
 80063b2:	71bb      	strb	r3, [r7, #6]
  for (i = 0; i < 6; ++i)
 80063b4:	79fb      	ldrb	r3, [r7, #7]
 80063b6:	3301      	adds	r3, #1
 80063b8:	71fb      	strb	r3, [r7, #7]
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	2b05      	cmp	r3, #5
 80063be:	d9f1      	bls.n	80063a4 <Appli_GetMACfromUniqueNumber+0x10>
  }
  bdaddr[6] = sum;
 80063c0:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <Appli_GetMACfromUniqueNumber+0x40>)
 80063c2:	79bb      	ldrb	r3, [r7, #6]
 80063c4:	7193      	strb	r3, [r2, #6]
}
 80063c6:	bf00      	nop
 80063c8:	370c      	adds	r7, #12
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	2000444c 	.word	0x2000444c

080063d8 <BLEMesh_UnprovisionCallback>:
* @brief  callback for unprovision the node by provisioner.
* @param  status reserved for future 
* @retval void
*/
void BLEMesh_UnprovisionCallback(MOBLEUINT8 reason)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b082      	sub	sp, #8
 80063dc:	af00      	add	r7, sp, #0
 80063de:	4603      	mov	r3, r0
 80063e0:	71fb      	strb	r3, [r7, #7]
  ProvisionFlag = 0; 
 80063e2:	4b12      	ldr	r3, [pc, #72]	; (800642c <BLEMesh_UnprovisionCallback+0x54>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
  
  TRACE_I(TF_PROVISION,"Device is unprovisioned by provisioner \n\r");
 80063e8:	4811      	ldr	r0, [pc, #68]	; (8006430 <BLEMesh_UnprovisionCallback+0x58>)
 80063ea:	f023 f8c5 	bl	8029578 <iprintf>
#if PB_ADV_SUPPORTED
  BLEMesh_SetUnprovisionedDevBeaconInterval(PBADV_UNPROV_DEV_BEACON_INTERVAL);
 80063ee:	2064      	movs	r0, #100	; 0x64
 80063f0:	f016 fecc 	bl	801d18c <BLEMesh_SetUnprovisionedDevBeaconInterval>
#endif
  BLEMesh_StopAdvScan();
 80063f4:	f019 f8d7 	bl	801f5a6 <BLEMesh_StopAdvScan>
  HAL_Delay(10);
 80063f8:	200a      	movs	r0, #10
 80063fa:	f7fb fa7c 	bl	80018f6 <HAL_Delay>
    
  PalNvmErase(PRVN_NVM_BASE_OFFSET, 4);
 80063fe:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <BLEMesh_UnprovisionCallback+0x5c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2104      	movs	r1, #4
 8006404:	4618      	mov	r0, r3
 8006406:	f001 f83f 	bl	8007488 <PalNvmErase>
  TRACE_M(TF_PROVISION,"NVM erased\r\n");      
 800640a:	2100      	movs	r1, #0
 800640c:	480a      	ldr	r0, [pc, #40]	; (8006438 <BLEMesh_UnprovisionCallback+0x60>)
 800640e:	f007 f8af 	bl	800d570 <TraceHeader>
 8006412:	480a      	ldr	r0, [pc, #40]	; (800643c <BLEMesh_UnprovisionCallback+0x64>)
 8006414:	f023 f916 	bl	8029644 <puts>
  
  TRACE_M(TF_PROVISION,"Device is unprovisioned by application \r\n");      
 8006418:	2100      	movs	r1, #0
 800641a:	4807      	ldr	r0, [pc, #28]	; (8006438 <BLEMesh_UnprovisionCallback+0x60>)
 800641c:	f007 f8a8 	bl	800d570 <TraceHeader>
 8006420:	4807      	ldr	r0, [pc, #28]	; (8006440 <BLEMesh_UnprovisionCallback+0x68>)
 8006422:	f023 f90f 	bl	8029644 <puts>

  NVIC_SystemReset();
 8006426:	f7ff fcc9 	bl	8005dbc <__NVIC_SystemReset>
 800642a:	bf00      	nop
 800642c:	20004440 	.word	0x20004440
 8006430:	0802e808 	.word	0x0802e808
 8006434:	2000445c 	.word	0x2000445c
 8006438:	08032b04 	.word	0x08032b04
 800643c:	0802e6e8 	.word	0x0802e6e8
 8006440:	0802e6f4 	.word	0x0802e6f4

08006444 <BLEMesh_PbAdvLinkOpenCb>:
* @brief  Call back function called when PB-ADV link Opened  
* @param  none
* @retval none
*/ 
void BLEMesh_PbAdvLinkOpenCb(void)
{ 
 8006444:	b580      	push	{r7, lr}
 8006446:	af00      	add	r7, sp, #0
  ProvisionFlag = 0;
 8006448:	4b07      	ldr	r3, [pc, #28]	; (8006468 <BLEMesh_PbAdvLinkOpenCb+0x24>)
 800644a:	2200      	movs	r2, #0
 800644c:	701a      	strb	r2, [r3, #0]
  TRACE_M(TF_PROVISION,"PB-ADV Link opened successfully \n\r");    
 800644e:	2100      	movs	r1, #0
 8006450:	4806      	ldr	r0, [pc, #24]	; (800646c <BLEMesh_PbAdvLinkOpenCb+0x28>)
 8006452:	f007 f88d 	bl	800d570 <TraceHeader>
 8006456:	4806      	ldr	r0, [pc, #24]	; (8006470 <BLEMesh_PbAdvLinkOpenCb+0x2c>)
 8006458:	f023 f88e 	bl	8029578 <iprintf>
  /* Turn ON Red LED*/
#if LOW_POWER_FEATURE
  /* do nothing */
#else
  BSP_LED_On(LED_RED);
 800645c:	2002      	movs	r0, #2
 800645e:	f001 fb5f 	bl	8007b20 <BSP_LED_On>
#endif
}
 8006462:	bf00      	nop
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20004440 	.word	0x20004440
 800646c:	08032b20 	.word	0x08032b20
 8006470:	0802e868 	.word	0x0802e868

08006474 <BLEMesh_ProvisionCallback>:
* @brief  callback for provision the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ProvisionCallback(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	af00      	add	r7, sp, #0
  ProvisionFlag = 1;
 8006478:	4b03      	ldr	r3, [pc, #12]	; (8006488 <BLEMesh_ProvisionCallback+0x14>)
 800647a:	2201      	movs	r2, #1
 800647c:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_AUTH_TYPE_OUTPUT_OOB
  PrvngInProcess = 0;
#endif
  TRACE_I(TF_PROVISION,"Device is provisioned by provisioner \r\n");
 800647e:	4803      	ldr	r0, [pc, #12]	; (800648c <BLEMesh_ProvisionCallback+0x18>)
 8006480:	f023 f8e0 	bl	8029644 <puts>
  
#if (LOW_POWER_FEATURE == 1)
  /* Call API LPN_API_TIMER_INTERVAL after LPN provisioning */
//  HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
#endif
}
 8006484:	bf00      	nop
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20004440 	.word	0x20004440
 800648c:	0802e8b0 	.word	0x0802e8b0

08006490 <BLEMesh_ConfigurationCallback>:
* @brief  callback for configuration the node by provisioner.
* @param  void
* @retval void
*/
void BLEMesh_ConfigurationCallback(void)
{
 8006490:	b480      	push	{r7}
 8006492:	af00      	add	r7, sp, #0
  {
    HW_TS_Start(lowPowerNodeApiTimer_Id, LPN_API_TIMER_INTERVAL);
    LPN_scan_enabled = MOBLE_TRUE;
  }
#endif
}
 8006494:	bf00      	nop
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
	...

080064a0 <BLEMesh_FnFriendshipEstablishedCallback>:
void BLEMesh_FnFriendshipEstablishedCallback(MOBLE_ADDRESS lpnAddress,
                                             MOBLEUINT8 lpnReceiveDelay,
                                             MOBLEUINT32 lpnPollTimeout,
                                             MOBLEUINT8 lpnNumElements,
                                             MOBLE_ADDRESS lpnPrevFriendAddress)
{ 
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	603a      	str	r2, [r7, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	4603      	mov	r3, r0
 80064ac:	80fb      	strh	r3, [r7, #6]
 80064ae:	460b      	mov	r3, r1
 80064b0:	717b      	strb	r3, [r7, #5]
 80064b2:	4613      	mov	r3, r2
 80064b4:	713b      	strb	r3, [r7, #4]
  TRACE_M(TF_LPN_FRND,"Friendship established. Low power node address 0x%.4X \r\n", lpnAddress);
 80064b6:	2100      	movs	r1, #0
 80064b8:	481a      	ldr	r0, [pc, #104]	; (8006524 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 80064ba:	f007 f859 	bl	800d570 <TraceHeader>
 80064be:	88fb      	ldrh	r3, [r7, #6]
 80064c0:	4619      	mov	r1, r3
 80064c2:	4819      	ldr	r0, [pc, #100]	; (8006528 <BLEMesh_FnFriendshipEstablishedCallback+0x88>)
 80064c4:	f023 f858 	bl	8029578 <iprintf>
  TRACE_M(TF_LPN_FRND,"Low power node receive delay %dms \r\n", lpnReceiveDelay);
 80064c8:	2100      	movs	r1, #0
 80064ca:	4816      	ldr	r0, [pc, #88]	; (8006524 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 80064cc:	f007 f850 	bl	800d570 <TraceHeader>
 80064d0:	797b      	ldrb	r3, [r7, #5]
 80064d2:	4619      	mov	r1, r3
 80064d4:	4815      	ldr	r0, [pc, #84]	; (800652c <BLEMesh_FnFriendshipEstablishedCallback+0x8c>)
 80064d6:	f023 f84f 	bl	8029578 <iprintf>
  TRACE_M(TF_LPN_FRND,"Low power node poll timeout %ldms \r\n", lpnPollTimeout*100);
 80064da:	2100      	movs	r1, #0
 80064dc:	4811      	ldr	r0, [pc, #68]	; (8006524 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 80064de:	f007 f847 	bl	800d570 <TraceHeader>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2264      	movs	r2, #100	; 0x64
 80064e6:	fb02 f303 	mul.w	r3, r2, r3
 80064ea:	4619      	mov	r1, r3
 80064ec:	4810      	ldr	r0, [pc, #64]	; (8006530 <BLEMesh_FnFriendshipEstablishedCallback+0x90>)
 80064ee:	f023 f843 	bl	8029578 <iprintf>
  TRACE_M(TF_LPN_FRND,"Low power node number of elements %d \r\n", lpnNumElements);
 80064f2:	2100      	movs	r1, #0
 80064f4:	480b      	ldr	r0, [pc, #44]	; (8006524 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 80064f6:	f007 f83b 	bl	800d570 <TraceHeader>
 80064fa:	793b      	ldrb	r3, [r7, #4]
 80064fc:	4619      	mov	r1, r3
 80064fe:	480d      	ldr	r0, [pc, #52]	; (8006534 <BLEMesh_FnFriendshipEstablishedCallback+0x94>)
 8006500:	f023 f83a 	bl	8029578 <iprintf>
  if (lpnPrevFriendAddress != MOBLE_ADDRESS_UNASSIGNED)
 8006504:	8a3b      	ldrh	r3, [r7, #16]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d008      	beq.n	800651c <BLEMesh_FnFriendshipEstablishedCallback+0x7c>
  {
    TRACE_M(TF_LPN_FRND,"Low power node previous friend address 0x%.4X \r\n", lpnPrevFriendAddress);
 800650a:	2100      	movs	r1, #0
 800650c:	4805      	ldr	r0, [pc, #20]	; (8006524 <BLEMesh_FnFriendshipEstablishedCallback+0x84>)
 800650e:	f007 f82f 	bl	800d570 <TraceHeader>
 8006512:	8a3b      	ldrh	r3, [r7, #16]
 8006514:	4619      	mov	r1, r3
 8006516:	4808      	ldr	r0, [pc, #32]	; (8006538 <BLEMesh_FnFriendshipEstablishedCallback+0x98>)
 8006518:	f023 f82e 	bl	8029578 <iprintf>
  }
}
 800651c:	bf00      	nop
 800651e:	3708      	adds	r7, #8
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	08032b38 	.word	0x08032b38
 8006528:	0802e8d8 	.word	0x0802e8d8
 800652c:	0802e914 	.word	0x0802e914
 8006530:	0802e93c 	.word	0x0802e93c
 8006534:	0802e964 	.word	0x0802e964
 8006538:	0802e98c 	.word	0x0802e98c

0800653c <BLEMesh_FnFriendshipClearedCallback>:
*         3: friend clear received
* @param  previous friend address of low power node (can be invalid address)
* @retval void
*/
void BLEMesh_FnFriendshipClearedCallback(MOBLEUINT8 reason, MOBLE_ADDRESS lpnAddress)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b082      	sub	sp, #8
 8006540:	af00      	add	r7, sp, #0
 8006542:	4603      	mov	r3, r0
 8006544:	460a      	mov	r2, r1
 8006546:	71fb      	strb	r3, [r7, #7]
 8006548:	4613      	mov	r3, r2
 800654a:	80bb      	strh	r3, [r7, #4]
  TRACE_M(TF_LPN_FRND,"Friendship cleared. Low power node address 0x%.4X \r\n", lpnAddress);
 800654c:	2100      	movs	r1, #0
 800654e:	481b      	ldr	r0, [pc, #108]	; (80065bc <BLEMesh_FnFriendshipClearedCallback+0x80>)
 8006550:	f007 f80e 	bl	800d570 <TraceHeader>
 8006554:	88bb      	ldrh	r3, [r7, #4]
 8006556:	4619      	mov	r1, r3
 8006558:	4819      	ldr	r0, [pc, #100]	; (80065c0 <BLEMesh_FnFriendshipClearedCallback+0x84>)
 800655a:	f023 f80d 	bl	8029578 <iprintf>
  
  switch(reason)
 800655e:	79fb      	ldrb	r3, [r7, #7]
 8006560:	2b03      	cmp	r3, #3
 8006562:	d016      	beq.n	8006592 <BLEMesh_FnFriendshipClearedCallback+0x56>
 8006564:	2b03      	cmp	r3, #3
 8006566:	dc1c      	bgt.n	80065a2 <BLEMesh_FnFriendshipClearedCallback+0x66>
 8006568:	2b01      	cmp	r3, #1
 800656a:	d002      	beq.n	8006572 <BLEMesh_FnFriendshipClearedCallback+0x36>
 800656c:	2b02      	cmp	r3, #2
 800656e:	d008      	beq.n	8006582 <BLEMesh_FnFriendshipClearedCallback+0x46>
 8006570:	e017      	b.n	80065a2 <BLEMesh_FnFriendshipClearedCallback+0x66>
  {
  case FN_CLEARED_REPEAT_REQUEST: 
    TRACE_M(TF_LPN_FRND,"Reason: New friend request received from existing low power node \r\n");
 8006572:	2100      	movs	r1, #0
 8006574:	4811      	ldr	r0, [pc, #68]	; (80065bc <BLEMesh_FnFriendshipClearedCallback+0x80>)
 8006576:	f006 fffb 	bl	800d570 <TraceHeader>
 800657a:	4812      	ldr	r0, [pc, #72]	; (80065c4 <BLEMesh_FnFriendshipClearedCallback+0x88>)
 800657c:	f023 f862 	bl	8029644 <puts>
    break;
 8006580:	e017      	b.n	80065b2 <BLEMesh_FnFriendshipClearedCallback+0x76>
  case FN_CLEARED_POLL_TIMEOUT:
    TRACE_M(TF_LPN_FRND,"Reason: Low power node poll timeout occurred \r\n");
 8006582:	2100      	movs	r1, #0
 8006584:	480d      	ldr	r0, [pc, #52]	; (80065bc <BLEMesh_FnFriendshipClearedCallback+0x80>)
 8006586:	f006 fff3 	bl	800d570 <TraceHeader>
 800658a:	480f      	ldr	r0, [pc, #60]	; (80065c8 <BLEMesh_FnFriendshipClearedCallback+0x8c>)
 800658c:	f023 f85a 	bl	8029644 <puts>
    break;
 8006590:	e00f      	b.n	80065b2 <BLEMesh_FnFriendshipClearedCallback+0x76>
  case FN_CLEARED_FRIEND_CLEAR:
    TRACE_M(TF_LPN_FRND,"Reason: Friend clear received \r\n");
 8006592:	2100      	movs	r1, #0
 8006594:	4809      	ldr	r0, [pc, #36]	; (80065bc <BLEMesh_FnFriendshipClearedCallback+0x80>)
 8006596:	f006 ffeb 	bl	800d570 <TraceHeader>
 800659a:	480c      	ldr	r0, [pc, #48]	; (80065cc <BLEMesh_FnFriendshipClearedCallback+0x90>)
 800659c:	f023 f852 	bl	8029644 <puts>
    break;
 80065a0:	e007      	b.n	80065b2 <BLEMesh_FnFriendshipClearedCallback+0x76>
  default:
    TRACE_M(TF_LPN_FRND,"Reason: Invalid \r\n");
 80065a2:	2100      	movs	r1, #0
 80065a4:	4805      	ldr	r0, [pc, #20]	; (80065bc <BLEMesh_FnFriendshipClearedCallback+0x80>)
 80065a6:	f006 ffe3 	bl	800d570 <TraceHeader>
 80065aa:	4809      	ldr	r0, [pc, #36]	; (80065d0 <BLEMesh_FnFriendshipClearedCallback+0x94>)
 80065ac:	f023 f84a 	bl	8029644 <puts>
    break;
 80065b0:	bf00      	nop
  }
}
 80065b2:	bf00      	nop
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	08032b60 	.word	0x08032b60
 80065c0:	0802e9c0 	.word	0x0802e9c0
 80065c4:	0802e9f8 	.word	0x0802e9f8
 80065c8:	0802ea3c 	.word	0x0802ea3c
 80065cc:	0802ea6c 	.word	0x0802ea6c
 80065d0:	0802ea8c 	.word	0x0802ea8c

080065d4 <BLEMesh_NeighborAppearedCallback>:
void BLEMesh_NeighborAppearedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b087      	sub	sp, #28
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	607a      	str	r2, [r7, #4]
 80065de:	461a      	mov	r2, r3
 80065e0:	460b      	mov	r3, r1
 80065e2:	72fb      	strb	r3, [r7, #11]
 80065e4:	4613      	mov	r3, r2
 80065e6:	813b      	strh	r3, [r7, #8]
  TRACE_M(TF_NEIGHBOUR,"New neighbor appeared. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	75fb      	strb	r3, [r7, #23]
 80065ec:	e002      	b.n	80065f4 <BLEMesh_NeighborAppearedCallback+0x20>
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	3301      	adds	r3, #1
 80065f2:	75fb      	strb	r3, [r7, #23]
 80065f4:	7dfb      	ldrb	r3, [r7, #23]
 80065f6:	2b05      	cmp	r3, #5
 80065f8:	d9f9      	bls.n	80065ee <BLEMesh_NeighborAppearedCallback+0x1a>
  else
  {
    TRACE_M(TF_NEIGHBOUR,"Network address not available\n\r");
  }

  for (MOBLEUINT8 i=0; i<16; i++)
 80065fa:	2300      	movs	r3, #0
 80065fc:	75bb      	strb	r3, [r7, #22]
 80065fe:	e013      	b.n	8006628 <BLEMesh_NeighborAppearedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 8006600:	7dbb      	ldrb	r3, [r7, #22]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	4413      	add	r3, r2
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	2b00      	cmp	r3, #0
 800660a:	d009      	beq.n	8006620 <BLEMesh_NeighborAppearedCallback+0x4c>
    }
    else
    {
      TRACE_M(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 800660c:	2300      	movs	r3, #0
 800660e:	757b      	strb	r3, [r7, #21]
 8006610:	e002      	b.n	8006618 <BLEMesh_NeighborAppearedCallback+0x44>
 8006612:	7d7b      	ldrb	r3, [r7, #21]
 8006614:	3301      	adds	r3, #1
 8006616:	757b      	strb	r3, [r7, #21]
 8006618:	7d7b      	ldrb	r3, [r7, #21]
 800661a:	2b0f      	cmp	r3, #15
 800661c:	d9f9      	bls.n	8006612 <BLEMesh_NeighborAppearedCallback+0x3e>
      {
        TRACE_M(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 800661e:	e007      	b.n	8006630 <BLEMesh_NeighborAppearedCallback+0x5c>
      continue;
 8006620:	bf00      	nop
  for (MOBLEUINT8 i=0; i<16; i++)
 8006622:	7dbb      	ldrb	r3, [r7, #22]
 8006624:	3301      	adds	r3, #1
 8006626:	75bb      	strb	r3, [r7, #22]
 8006628:	7dbb      	ldrb	r3, [r7, #22]
 800662a:	2b0f      	cmp	r3, #15
 800662c:	d9e8      	bls.n	8006600 <BLEMesh_NeighborAppearedCallback+0x2c>
    }
  }
  
  TRACE_M(TF_NEIGHBOUR,"\n\r");
}
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	371c      	adds	r7, #28
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <BLEMesh_NeighborRefreshedCallback>:
void BLEMesh_NeighborRefreshedCallback(const MOBLEUINT8* bdAddr,
                                          MOBLEBOOL provisioned,
                                          const MOBLEUINT8* uuid,
                                          MOBLE_ADDRESS networkAddress,
                                          MOBLEINT8 rssi)
{
 800663c:	b480      	push	{r7}
 800663e:	b087      	sub	sp, #28
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	607a      	str	r2, [r7, #4]
 8006646:	461a      	mov	r2, r3
 8006648:	460b      	mov	r3, r1
 800664a:	72fb      	strb	r3, [r7, #11]
 800664c:	4613      	mov	r3, r2
 800664e:	813b      	strh	r3, [r7, #8]
  TRACE_M(TF_NEIGHBOUR,"Existing neighbor refreshed. Neighbor MAC address:");
  
  for (MOBLEUINT8 count=0 ; count<6; count++)
 8006650:	2300      	movs	r3, #0
 8006652:	75fb      	strb	r3, [r7, #23]
 8006654:	e002      	b.n	800665c <BLEMesh_NeighborRefreshedCallback+0x20>
 8006656:	7dfb      	ldrb	r3, [r7, #23]
 8006658:	3301      	adds	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b05      	cmp	r3, #5
 8006660:	d9f9      	bls.n	8006656 <BLEMesh_NeighborRefreshedCallback+0x1a>
  else
  {
    TRACE_M(TF_NEIGHBOUR,"Network address not available\n\r");
  }
  
  for (MOBLEUINT8 i=0; i<16; i++)
 8006662:	2300      	movs	r3, #0
 8006664:	75bb      	strb	r3, [r7, #22]
 8006666:	e013      	b.n	8006690 <BLEMesh_NeighborRefreshedCallback+0x54>
  {
    if (uuid[i] == 0x00)
 8006668:	7dbb      	ldrb	r3, [r7, #22]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4413      	add	r3, r2
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d009      	beq.n	8006688 <BLEMesh_NeighborRefreshedCallback+0x4c>
    }
    else
    {
      TRACE_M(TF_NEIGHBOUR,"UUID: ");
      
      for (MOBLEUINT8 count=0 ; count<16; count++)
 8006674:	2300      	movs	r3, #0
 8006676:	757b      	strb	r3, [r7, #21]
 8006678:	e002      	b.n	8006680 <BLEMesh_NeighborRefreshedCallback+0x44>
 800667a:	7d7b      	ldrb	r3, [r7, #21]
 800667c:	3301      	adds	r3, #1
 800667e:	757b      	strb	r3, [r7, #21]
 8006680:	7d7b      	ldrb	r3, [r7, #21]
 8006682:	2b0f      	cmp	r3, #15
 8006684:	d9f9      	bls.n	800667a <BLEMesh_NeighborRefreshedCallback+0x3e>
      {
        TRACE_M(TF_NEIGHBOUR,"%.2x ", uuid[count]);
      }
      
      break;
 8006686:	e007      	b.n	8006698 <BLEMesh_NeighborRefreshedCallback+0x5c>
      continue;
 8006688:	bf00      	nop
  for (MOBLEUINT8 i=0; i<16; i++)
 800668a:	7dbb      	ldrb	r3, [r7, #22]
 800668c:	3301      	adds	r3, #1
 800668e:	75bb      	strb	r3, [r7, #22]
 8006690:	7dbb      	ldrb	r3, [r7, #22]
 8006692:	2b0f      	cmp	r3, #15
 8006694:	d9e8      	bls.n	8006668 <BLEMesh_NeighborRefreshedCallback+0x2c>
    }
  }
  
  TRACE_M(TF_NEIGHBOUR,"\n\r");
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	371c      	adds	r7, #28
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <BLEMesh_CustomBeaconGeneratorCallback>:
* @param  beacon data buffer. It includes length and AD type fields
*         buffer size
* @retval void
*/
void BLEMesh_CustomBeaconGeneratorCallback(void* buffer, MOBLEUINT8* size)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 adType = CUSTOM_BEACON_AD_TYPE;
 80066ae:	2300      	movs	r3, #0
 80066b0:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 dataLength = 5;
 80066b2:	2305      	movs	r3, #5
 80066b4:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 data[5] = {0x00,0x01,0x02,0x03,0x04};
 80066b6:	4a12      	ldr	r2, [pc, #72]	; (8006700 <BLEMesh_CustomBeaconGeneratorCallback+0x5c>)
 80066b8:	f107 0308 	add.w	r3, r7, #8
 80066bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80066c0:	6018      	str	r0, [r3, #0]
 80066c2:	3304      	adds	r3, #4
 80066c4:	7019      	strb	r1, [r3, #0]
  MOBLEUINT8* buf = (MOBLEUINT8*)buffer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	613b      	str	r3, [r7, #16]
  
  buf[0] = dataLength+1;
 80066ca:	7dbb      	ldrb	r3, [r7, #22]
 80066cc:	3301      	adds	r3, #1
 80066ce:	b2da      	uxtb	r2, r3
 80066d0:	693b      	ldr	r3, [r7, #16]
 80066d2:	701a      	strb	r2, [r3, #0]
  buf[1] = adType;
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	3301      	adds	r3, #1
 80066d8:	7dfa      	ldrb	r2, [r7, #23]
 80066da:	701a      	strb	r2, [r3, #0]
  memcpy(buf+2, data, dataLength);
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	3302      	adds	r3, #2
 80066e0:	7dba      	ldrb	r2, [r7, #22]
 80066e2:	f107 0108 	add.w	r1, r7, #8
 80066e6:	4618      	mov	r0, r3
 80066e8:	f023 f975 	bl	80299d6 <memcpy>
  
  *size = dataLength+2;  
 80066ec:	7dbb      	ldrb	r3, [r7, #22]
 80066ee:	3302      	adds	r3, #2
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
}
 80066f6:	bf00      	nop
 80066f8:	3718      	adds	r7, #24
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	0802eb30 	.word	0x0802eb30

08006704 <IntensityPublish>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void IntensityPublish(void)
{  
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  
  Appli_IntensityControlPublishing(pGeneric_LevelParam);
  Appli_GenericClient_API(elementIndex, GENERIC_LEVEL_SET_ACK, pGeneric_LevelParam); 
#endif  
#endif
}
 8006708:	bf00      	nop
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <Appli_Process>:
*         This function should be called in main loop
* @param  void
* @retval void
*/
void Appli_Process(void)
{
 8006712:	b480      	push	{r7}
 8006714:	af00      	add	r7, sp, #0
  else
  {
    //SdkEvalLedOff(LED1);
  }
#endif      
}
 8006716:	bf00      	nop
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <UnprovisionedDeviceBeaconApp>:

#if PB_ADV_SUPPORTED
static void UnprovisionedDeviceBeaconApp(void)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	af00      	add	r7, sp, #0
  BLEMesh_SetUnprovisionedDevBeaconInterval(0);
 8006724:	2000      	movs	r0, #0
 8006726:	f016 fd31 	bl	801d18c <BLEMesh_SetUnprovisionedDevBeaconInterval>
}
 800672a:	bf00      	nop
 800672c:	bd80      	pop	{r7, pc}

0800672e <UnprovisionedDeviceBeaconTask>:

static void UnprovisionedDeviceBeaconTask(void)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	af00      	add	r7, sp, #0
  /**
   * The code shall be executed in the background as aci command may be sent
   * The background is the only place where the application can make sure a new aci command
   * is not sent if there is a pending one
   */
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_BEACON_REQ_ID, CFG_SCH_PRIO_0);
 8006732:	2100      	movs	r1, #0
 8006734:	2004      	movs	r0, #4
 8006736:	f010 fa7d 	bl	8016c34 <UTIL_SEQ_SetTask>

  return;
 800673a:	bf00      	nop
}
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <AppliMeshSW1Task>:
  return;
}
#endif

static void AppliMeshSW1Task(void)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	af00      	add	r7, sp, #0
  /* Check if button action is emulated with SW1 command on USART1 */
#if ENABLE_SERIAL_INTERFACE
  if(!button_emulation)
 8006744:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <AppliMeshSW1Task+0x34>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d10c      	bne.n	8006766 <AppliMeshSW1Task+0x26>
  {
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
 800674c:	2000      	movs	r0, #0
 800674e:	f001 fa8b 	bl	8007c68 <BSP_PB_GetState>
 8006752:	4603      	mov	r3, r0
 8006754:	2b00      	cmp	r3, #0
 8006756:	bf0c      	ite	eq
 8006758:	2301      	moveq	r3, #1
 800675a:	2300      	movne	r3, #0
 800675c:	b2db      	uxtb	r3, r3
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fb76 	bl	8005e50 <Appli_UpdateButtonState>
    button_emulation = 0;
  }
#else
  Appli_UpdateButtonState(BSP_PB_GetState(BUTTON_SW1) == BUTTON_PRESSED);
#endif  
  return;
 8006764:	e005      	b.n	8006772 <AppliMeshSW1Task+0x32>
    Appli_ShortButtonPress();
 8006766:	f7ff fb53 	bl	8005e10 <Appli_ShortButtonPress>
    button_emulation = 0;
 800676a:	4b02      	ldr	r3, [pc, #8]	; (8006774 <AppliMeshSW1Task+0x34>)
 800676c:	2200      	movs	r2, #0
 800676e:	701a      	strb	r2, [r3, #0]
  return;
 8006770:	bf00      	nop
}
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20004660 	.word	0x20004660

08006778 <Appli_Init>:
* @brief  Initializes the Application  
* @param  void
* @retval void
*/
void Appli_Init(MOBLEUINT8 *flag)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  AppliNvm_FactorySettingReset();
#endif
#endif
  
#if PB_ADV_SUPPORTED
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_BEACON_REQ_ID, UTIL_SEQ_RFU, UnprovisionedDeviceBeaconApp );
 8006780:	4a0d      	ldr	r2, [pc, #52]	; (80067b8 <Appli_Init+0x40>)
 8006782:	2100      	movs	r1, #0
 8006784:	2004      	movs	r0, #4
 8006786:	f010 fa33 	bl	8016bf0 <UTIL_SEQ_RegTask>
  /**
   * Create Timer to control unprovisioned device beacons
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &discoverTimer_Id, hw_ts_SingleShot, UnprovisionedDeviceBeaconTask);
 800678a:	4b0c      	ldr	r3, [pc, #48]	; (80067bc <Appli_Init+0x44>)
 800678c:	2200      	movs	r2, #0
 800678e:	490c      	ldr	r1, [pc, #48]	; (80067c0 <Appli_Init+0x48>)
 8006790:	2000      	movs	r0, #0
 8006792:	f7fb ffb9 	bl	8002708 <HW_TS_Create>
  
  HW_TS_Start(discoverTimer_Id, DISCOVER_TIMER_INTERVAL);
 8006796:	4b0a      	ldr	r3, [pc, #40]	; (80067c0 <Appli_Init+0x48>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	490a      	ldr	r1, [pc, #40]	; (80067c4 <Appli_Init+0x4c>)
 800679c:	4618      	mov	r0, r3
 800679e:	f7fc f8b1 	bl	8002904 <HW_TS_Start>
#endif
  
#if ENABLE_SERIAL_INTERFACE
  Serial_Init();
 80067a2:	f00b ff41 	bl	8012628 <Serial_Init>
  Modify_PWM(BLUE_LED, 1);
#endif
#endif
#endif
  
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SW1_REQ_ID, UTIL_SEQ_RFU, AppliMeshSW1Task );
 80067a6:	4a08      	ldr	r2, [pc, #32]	; (80067c8 <Appli_Init+0x50>)
 80067a8:	2100      	movs	r1, #0
 80067aa:	2040      	movs	r0, #64	; 0x40
 80067ac:	f010 fa20 	bl	8016bf0 <UTIL_SEQ_RegTask>
  * Create Timer to control Input OOB information
  */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &InputOOBTimeOut_Id, hw_ts_SingleShot, InputOOBTimeOutTask);
#endif

}
 80067b0:	bf00      	nop
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	08006721 	.word	0x08006721
 80067bc:	0800672f 	.word	0x0800672f
 80067c0:	20004446 	.word	0x20004446
 80067c4:	0012c258 	.word	0x0012c258
 80067c8:	08006741 	.word	0x08006741

080067cc <PwmValueMapping>:
* @param  maxRange: Max range of the parameter
* @param  minRange: Min range of the parameter
* @retval MOBLEUINT8
*/
MOBLEUINT16 PwmValueMapping(MOBLEUINT16 setValue , MOBLEUINT16 maxRange , MOBLEINT16 minRange)
{
 80067cc:	b480      	push	{r7}
 80067ce:	b085      	sub	sp, #20
 80067d0:	af00      	add	r7, sp, #0
 80067d2:	4603      	mov	r3, r0
 80067d4:	80fb      	strh	r3, [r7, #6]
 80067d6:	460b      	mov	r3, r1
 80067d8:	80bb      	strh	r3, [r7, #4]
 80067da:	4613      	mov	r3, r2
 80067dc:	807b      	strh	r3, [r7, #2]
   else if(percentValue > 90)
   {
     duty = 10;
   }
#else
   if(minRange > 0x00)
 80067de:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd15      	ble.n	8006812 <PwmValueMapping+0x46>
   {
     percentValue =  (setValue - 800)/ (maxRange - minRange);
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	f5a3 7248 	sub.w	r2, r3, #800	; 0x320
 80067ec:	88b9      	ldrh	r1, [r7, #4]
 80067ee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80067f2:	1acb      	subs	r3, r1, r3
 80067f4:	fb92 f3f3 	sdiv	r3, r2, r3
 80067f8:	81fb      	strh	r3, [r7, #14]
     percentValue = (percentValue*100);
 80067fa:	89fb      	ldrh	r3, [r7, #14]
 80067fc:	461a      	mov	r2, r3
 80067fe:	0092      	lsls	r2, r2, #2
 8006800:	4413      	add	r3, r2
 8006802:	461a      	mov	r2, r3
 8006804:	0091      	lsls	r1, r2, #2
 8006806:	461a      	mov	r2, r3
 8006808:	460b      	mov	r3, r1
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	81fb      	strh	r3, [r7, #14]
 8006810:	e00a      	b.n	8006828 <PwmValueMapping+0x5c>
   }
   else
   {
     percentValue =  (setValue * 100)/ (maxRange - minRange);
 8006812:	88fb      	ldrh	r3, [r7, #6]
 8006814:	2264      	movs	r2, #100	; 0x64
 8006816:	fb03 f202 	mul.w	r2, r3, r2
 800681a:	88b9      	ldrh	r1, [r7, #4]
 800681c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8006820:	1acb      	subs	r3, r1, r3
 8006822:	fb92 f3f3 	sdiv	r3, r2, r3
 8006826:	81fb      	strh	r3, [r7, #14]
   }
   
   duty = percentValue*320 ;
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	461a      	mov	r2, r3
 800682c:	0092      	lsls	r2, r2, #2
 800682e:	4413      	add	r3, r2
 8006830:	019b      	lsls	r3, r3, #6
 8006832:	81bb      	strh	r3, [r7, #12]
   
   if(duty >= 32000)
 8006834:	89bb      	ldrh	r3, [r7, #12]
 8006836:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800683a:	d302      	bcc.n	8006842 <PwmValueMapping+0x76>
   {
     duty = 31999;
 800683c:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8006840:	81bb      	strh	r3, [r7, #12]
   }
   if(duty == 0)
 8006842:	89bb      	ldrh	r3, [r7, #12]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <PwmValueMapping+0x80>
   {
     duty = 1;
 8006848:	2301      	movs	r3, #1
 800684a:	81bb      	strh	r3, [r7, #12]
   }
#endif
     
   return duty;
 800684c:	89bb      	ldrh	r3, [r7, #12]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3714      	adds	r7, #20
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <AppliNvm_ClearModelState>:
* @brief  Clear model states in nvm
* @param  none
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_ClearModelState(void)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
  MOBLE_RESULT result = MOBLE_RESULT_FAIL; /* if save model state not defined, return MOBLE_RESULT_FAIL */
 8006860:	2302      	movs	r3, #2
 8006862:	71fb      	strb	r3, [r7, #7]
                                     (uint32_t*)&subPageTemp, 
                                     APP_NVM_SUBPAGE_SIZE);
    }
  }
#endif /* SAVE_MODEL_STATE_NVM */  
  return result;
 8006864:	79fb      	ldrb	r3, [r7, #7]
}
 8006866:	4618      	mov	r0, r3
 8006868:	370c      	adds	r7, #12
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <AppliNvm_LoadModelState>:
* @param  model state buff size
* @retval MOBLE_RESULT_SUCCESS on success
*/
MOBLE_RESULT AppliNvm_LoadModelState(uint8_t state[], 
                                     uint16_t* size)
{  
 8006872:	b480      	push	{r7}
 8006874:	b083      	sub	sp, #12
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
      *size = APP_NVM_MODEL_SIZE;
    }
  }
  return result;  
#else /* SAVE_MODEL_STATE_NVM */  
  *size = 0;
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2200      	movs	r2, #0
 8006880:	801a      	strh	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 8006882:	2300      	movs	r3, #0
#endif /* SAVE_MODEL_STATE_NVM */
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <AppliNvm_SaveMessageParam>:
  states in flash.
* @param  void
* @retval void
*/
void AppliNvm_SaveMessageParam (void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
#endif 
} 
 8006894:	bf00      	nop
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <Appli_Vendor_DeviceInfo>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_DeviceInfo(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 80068a0:	b590      	push	{r4, r7, lr}
 80068a2:	b089      	sub	sp, #36	; 0x24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
 80068a8:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 tempBuffer[10];
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 80068aa:	2300      	movs	r3, #0
 80068ac:	77fb      	strb	r3, [r7, #31]
  
  MOBLEUINT8 subCmd = data[0];
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	74bb      	strb	r3, [r7, #18]
  char *libVersion;
  char *subLibVersion;
  MOBLEUINT8 inc = 0;
 80068b4:	2300      	movs	r3, #0
 80068b6:	74fb      	strb	r3, [r7, #19]
        /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0] = subCmd;
 80068b8:	4a78      	ldr	r2, [pc, #480]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 80068ba:	7cbb      	ldrb	r3, [r7, #18]
 80068bc:	7013      	strb	r3, [r2, #0]
        TRACE_M(TF_VENDOR,"#02-%02hx! \n\r",data[0]);
 80068be:	2100      	movs	r1, #0
 80068c0:	4877      	ldr	r0, [pc, #476]	; (8006aa0 <Appli_Vendor_DeviceInfo+0x200>)
 80068c2:	f006 fe55 	bl	800d570 <TraceHeader>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	4619      	mov	r1, r3
 80068cc:	4875      	ldr	r0, [pc, #468]	; (8006aa4 <Appli_Vendor_DeviceInfo+0x204>)
 80068ce:	f022 fe53 	bl	8029578 <iprintf>
  
  switch(subCmd)
 80068d2:	7cbb      	ldrb	r3, [r7, #18]
 80068d4:	3b01      	subs	r3, #1
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	f200 80d7 	bhi.w	8006a8a <Appli_Vendor_DeviceInfo+0x1ea>
 80068dc:	a201      	add	r2, pc, #4	; (adr r2, 80068e4 <Appli_Vendor_DeviceInfo+0x44>)
 80068de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068e2:	bf00      	nop
 80068e4:	080068f5 	.word	0x080068f5
 80068e8:	08006903 	.word	0x08006903
 80068ec:	080069c3 	.word	0x080069c3
 80068f0:	08006a91 	.word	0x08006a91
#ifdef BLUENRG_MS    
      ResponseBuffer[1] = BLUENRG_MS_BRD;               
#endif
      
#ifdef STM32WB55xx
      ResponseBuffer[1] = STM32WB55XX_BRD;               
 80068f4:	4b69      	ldr	r3, [pc, #420]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 80068f6:	2204      	movs	r2, #4
 80068f8:	705a      	strb	r2, [r3, #1]
#endif      

      BuffLength = 2;
 80068fa:	4b6b      	ldr	r3, [pc, #428]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x208>)
 80068fc:	2202      	movs	r2, #2
 80068fe:	801a      	strh	r2, [r3, #0]
      break;
 8006900:	e0c7      	b.n	8006a92 <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_VER:
    {
      libVersion = BLEMesh_GetLibraryVersion();
 8006902:	f016 fe27 	bl	801d554 <BLEMesh_GetLibraryVersion>
 8006906:	61b8      	str	r0, [r7, #24]
      while(*libVersion != '\0')
 8006908:	e03e      	b.n	8006988 <Appli_Vendor_DeviceInfo+0xe8>
      {
        tempBuffer[inc] = *libVersion;
 800690a:	7cfb      	ldrb	r3, [r7, #19]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	7812      	ldrb	r2, [r2, #0]
 8006910:	3320      	adds	r3, #32
 8006912:	443b      	add	r3, r7
 8006914:	f803 2c18 	strb.w	r2, [r3, #-24]
        if(tempBuffer[inc] != 0x2E)
 8006918:	7cfb      	ldrb	r3, [r7, #19]
 800691a:	3320      	adds	r3, #32
 800691c:	443b      	add	r3, r7
 800691e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006922:	2b2e      	cmp	r3, #46	; 0x2e
 8006924:	d01d      	beq.n	8006962 <Appli_Vendor_DeviceInfo+0xc2>
        {
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 8006926:	7cfb      	ldrb	r3, [r7, #19]
 8006928:	3320      	adds	r3, #32
 800692a:	443b      	add	r3, r7
 800692c:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006930:	7cfc      	ldrb	r4, [r7, #19]
 8006932:	4618      	mov	r0, r3
 8006934:	f000 fcc0 	bl	80072b8 <BLEMesh_ModelsASCII_To_Char>
 8006938:	4603      	mov	r3, r0
 800693a:	461a      	mov	r2, r3
 800693c:	f104 0320 	add.w	r3, r4, #32
 8006940:	443b      	add	r3, r7
 8006942:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 8006946:	2100      	movs	r1, #0
 8006948:	4855      	ldr	r0, [pc, #340]	; (8006aa0 <Appli_Vendor_DeviceInfo+0x200>)
 800694a:	f006 fe11 	bl	800d570 <TraceHeader>
 800694e:	7cfb      	ldrb	r3, [r7, #19]
 8006950:	3320      	adds	r3, #32
 8006952:	443b      	add	r3, r7
 8006954:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006958:	4619      	mov	r1, r3
 800695a:	4854      	ldr	r0, [pc, #336]	; (8006aac <Appli_Vendor_DeviceInfo+0x20c>)
 800695c:	f022 fe0c 	bl	8029578 <iprintf>
 8006960:	e00c      	b.n	800697c <Appli_Vendor_DeviceInfo+0xdc>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 8006962:	2100      	movs	r1, #0
 8006964:	484e      	ldr	r0, [pc, #312]	; (8006aa0 <Appli_Vendor_DeviceInfo+0x200>)
 8006966:	f006 fe03 	bl	800d570 <TraceHeader>
 800696a:	7cfb      	ldrb	r3, [r7, #19]
 800696c:	3320      	adds	r3, #32
 800696e:	443b      	add	r3, r7
 8006970:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006974:	4619      	mov	r1, r3
 8006976:	484e      	ldr	r0, [pc, #312]	; (8006ab0 <Appli_Vendor_DeviceInfo+0x210>)
 8006978:	f022 fdfe 	bl	8029578 <iprintf>
        }             
        libVersion++;  
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	3301      	adds	r3, #1
 8006980:	61bb      	str	r3, [r7, #24]
             
        inc++;
 8006982:	7cfb      	ldrb	r3, [r7, #19]
 8006984:	3301      	adds	r3, #1
 8006986:	74fb      	strb	r3, [r7, #19]
      while(*libVersion != '\0')
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	781b      	ldrb	r3, [r3, #0]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d1bc      	bne.n	800690a <Appli_Vendor_DeviceInfo+0x6a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 8006990:	7a3a      	ldrb	r2, [r7, #8]
 8006992:	4b42      	ldr	r3, [pc, #264]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006994:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 8006996:	7a7a      	ldrb	r2, [r7, #9]
 8006998:	4b40      	ldr	r3, [pc, #256]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 800699a:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 800699c:	7afa      	ldrb	r2, [r7, #11]
 800699e:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 80069a0:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[4];
 80069a2:	7b3a      	ldrb	r2, [r7, #12]
 80069a4:	4b3d      	ldr	r3, [pc, #244]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 80069a6:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[6];
 80069a8:	7bba      	ldrb	r2, [r7, #14]
 80069aa:	4b3c      	ldr	r3, [pc, #240]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 80069ac:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[7];
 80069ae:	7bfa      	ldrb	r2, [r7, #15]
 80069b0:	4b3a      	ldr	r3, [pc, #232]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 80069b2:	719a      	strb	r2, [r3, #6]
      ResponseBuffer[7]= tempBuffer[8];
 80069b4:	7c3a      	ldrb	r2, [r7, #16]
 80069b6:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 80069b8:	71da      	strb	r2, [r3, #7]
      BuffLength = 8;      
 80069ba:	4b3b      	ldr	r3, [pc, #236]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x208>)
 80069bc:	2208      	movs	r2, #8
 80069be:	801a      	strh	r2, [r3, #0]
      break;
 80069c0:	e067      	b.n	8006a92 <Appli_Vendor_DeviceInfo+0x1f2>
    }
  case LIB_SUB_VER:
    {
      subLibVersion = BLEMesh_GetLibrarySubVersion();
 80069c2:	f016 fdcb 	bl	801d55c <BLEMesh_GetLibrarySubVersion>
 80069c6:	6178      	str	r0, [r7, #20]
      while(*subLibVersion != '\0')
 80069c8:	e045      	b.n	8006a56 <Appli_Vendor_DeviceInfo+0x1b6>
      {
        tempBuffer[inc] = * subLibVersion;
 80069ca:	7cfb      	ldrb	r3, [r7, #19]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	7812      	ldrb	r2, [r2, #0]
 80069d0:	3320      	adds	r3, #32
 80069d2:	443b      	add	r3, r7
 80069d4:	f803 2c18 	strb.w	r2, [r3, #-24]
        if((tempBuffer[inc] != 0x2E) && (tempBuffer[inc] != 0x52))
 80069d8:	7cfb      	ldrb	r3, [r7, #19]
 80069da:	3320      	adds	r3, #32
 80069dc:	443b      	add	r3, r7
 80069de:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069e2:	2b2e      	cmp	r3, #46	; 0x2e
 80069e4:	d024      	beq.n	8006a30 <Appli_Vendor_DeviceInfo+0x190>
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	3320      	adds	r3, #32
 80069ea:	443b      	add	r3, r7
 80069ec:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069f0:	2b52      	cmp	r3, #82	; 0x52
 80069f2:	d01d      	beq.n	8006a30 <Appli_Vendor_DeviceInfo+0x190>
        {               
          tempBuffer[inc] = BLEMesh_ModelsASCII_To_Char(tempBuffer[inc]);
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	3320      	adds	r3, #32
 80069f8:	443b      	add	r3, r7
 80069fa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80069fe:	7cfc      	ldrb	r4, [r7, #19]
 8006a00:	4618      	mov	r0, r3
 8006a02:	f000 fc59 	bl	80072b8 <BLEMesh_ModelsASCII_To_Char>
 8006a06:	4603      	mov	r3, r0
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f104 0320 	add.w	r3, r4, #32
 8006a0e:	443b      	add	r3, r7
 8006a10:	f803 2c18 	strb.w	r2, [r3, #-24]
          TRACE_M(TF_VENDOR,"Sub Lib version is %x\n\r" ,(unsigned char)tempBuffer[inc]);
 8006a14:	2100      	movs	r1, #0
 8006a16:	4822      	ldr	r0, [pc, #136]	; (8006aa0 <Appli_Vendor_DeviceInfo+0x200>)
 8006a18:	f006 fdaa 	bl	800d570 <TraceHeader>
 8006a1c:	7cfb      	ldrb	r3, [r7, #19]
 8006a1e:	3320      	adds	r3, #32
 8006a20:	443b      	add	r3, r7
 8006a22:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006a26:	4619      	mov	r1, r3
 8006a28:	4822      	ldr	r0, [pc, #136]	; (8006ab4 <Appli_Vendor_DeviceInfo+0x214>)
 8006a2a:	f022 fda5 	bl	8029578 <iprintf>
 8006a2e:	e00c      	b.n	8006a4a <Appli_Vendor_DeviceInfo+0x1aa>
        }
        else
        {
          TRACE_M(TF_VENDOR,"Sub Lib version is %c\n\r" ,(unsigned char)tempBuffer[inc]);
 8006a30:	2100      	movs	r1, #0
 8006a32:	481b      	ldr	r0, [pc, #108]	; (8006aa0 <Appli_Vendor_DeviceInfo+0x200>)
 8006a34:	f006 fd9c 	bl	800d570 <TraceHeader>
 8006a38:	7cfb      	ldrb	r3, [r7, #19]
 8006a3a:	3320      	adds	r3, #32
 8006a3c:	443b      	add	r3, r7
 8006a3e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8006a42:	4619      	mov	r1, r3
 8006a44:	481c      	ldr	r0, [pc, #112]	; (8006ab8 <Appli_Vendor_DeviceInfo+0x218>)
 8006a46:	f022 fd97 	bl	8029578 <iprintf>
        } 
        subLibVersion++;  
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
        inc++;
 8006a50:	7cfb      	ldrb	r3, [r7, #19]
 8006a52:	3301      	adds	r3, #1
 8006a54:	74fb      	strb	r3, [r7, #19]
      while(*subLibVersion != '\0')
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1b5      	bne.n	80069ca <Appli_Vendor_DeviceInfo+0x12a>
      } 
      ResponseBuffer[1]= tempBuffer[0];
 8006a5e:	7a3a      	ldrb	r2, [r7, #8]
 8006a60:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a62:	705a      	strb	r2, [r3, #1]
      ResponseBuffer[2]= tempBuffer[1];
 8006a64:	7a7a      	ldrb	r2, [r7, #9]
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a68:	709a      	strb	r2, [r3, #2]
      ResponseBuffer[3]= tempBuffer[3];
 8006a6a:	7afa      	ldrb	r2, [r7, #11]
 8006a6c:	4b0b      	ldr	r3, [pc, #44]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a6e:	70da      	strb	r2, [r3, #3]
      ResponseBuffer[4]= tempBuffer[5];
 8006a70:	7b7a      	ldrb	r2, [r7, #13]
 8006a72:	4b0a      	ldr	r3, [pc, #40]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a74:	711a      	strb	r2, [r3, #4]
      ResponseBuffer[5]= tempBuffer[7];
 8006a76:	7bfa      	ldrb	r2, [r7, #15]
 8006a78:	4b08      	ldr	r3, [pc, #32]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a7a:	715a      	strb	r2, [r3, #5]
      ResponseBuffer[6]= tempBuffer[9];
 8006a7c:	7c7a      	ldrb	r2, [r7, #17]
 8006a7e:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <Appli_Vendor_DeviceInfo+0x1fc>)
 8006a80:	719a      	strb	r2, [r3, #6]
      
      BuffLength = 7;
 8006a82:	4b09      	ldr	r3, [pc, #36]	; (8006aa8 <Appli_Vendor_DeviceInfo+0x208>)
 8006a84:	2207      	movs	r2, #7
 8006a86:	801a      	strh	r2, [r3, #0]
      
      break;
 8006a88:	e003      	b.n	8006a92 <Appli_Vendor_DeviceInfo+0x1f2>
      break;
    }
    
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	77fb      	strb	r3, [r7, #31]
      break;
 8006a8e:	e000      	b.n	8006a92 <Appli_Vendor_DeviceInfo+0x1f2>
      break;
 8006a90:	bf00      	nop
    }
    
  }
  
  return status;
 8006a92:	7ffb      	ldrb	r3, [r7, #31]
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	3724      	adds	r7, #36	; 0x24
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	bd90      	pop	{r4, r7, pc}
 8006a9c:	20004460 	.word	0x20004460
 8006aa0:	08032b84 	.word	0x08032b84
 8006aa4:	0802eb38 	.word	0x0802eb38
 8006aa8:	2000449c 	.word	0x2000449c
 8006aac:	0802eb48 	.word	0x0802eb48
 8006ab0:	0802eb5c 	.word	0x0802eb5c
 8006ab4:	0802eb70 	.word	0x0802eb70
 8006ab8:	0802eb88 	.word	0x0802eb88

08006abc <Appli_Vendor_Test>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Test(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	781b      	ldrb	r3, [r3, #0]
 8006ace:	737b      	strb	r3, [r7, #13]
       /*First Byte is sending the Sub Command*/      
       ResponseBuffer[0]=subCmd;
 8006ad0:	4a2b      	ldr	r2, [pc, #172]	; (8006b80 <Appli_Vendor_Test+0xc4>)
 8006ad2:	7b7b      	ldrb	r3, [r7, #13]
 8006ad4:	7013      	strb	r3, [r2, #0]
       TRACE_M(TF_VENDOR,"#01-%02hx! \n\r",data[0]);
 8006ad6:	2100      	movs	r1, #0
 8006ad8:	482a      	ldr	r0, [pc, #168]	; (8006b84 <Appli_Vendor_Test+0xc8>)
 8006ada:	f006 fd49 	bl	800d570 <TraceHeader>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4828      	ldr	r0, [pc, #160]	; (8006b88 <Appli_Vendor_Test+0xcc>)
 8006ae6:	f022 fd47 	bl	8029578 <iprintf>
  switch(subCmd)
 8006aea:	7b7b      	ldrb	r3, [r7, #13]
 8006aec:	3b02      	subs	r3, #2
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d83c      	bhi.n	8006b6c <Appli_Vendor_Test+0xb0>
 8006af2:	a201      	add	r2, pc, #4	; (adr r2, 8006af8 <Appli_Vendor_Test+0x3c>)
 8006af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af8:	08006b0d 	.word	0x08006b0d
 8006afc:	08006b73 	.word	0x08006b73
 8006b00:	08006b73 	.word	0x08006b73
 8006b04:	08006b73 	.word	0x08006b73
 8006b08:	08006b3f 	.word	0x08006b3f
  {             
  case APPLI_TEST_ECHO: 
    {
      if(length > sizeof(ResponseBuffer))
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b3c      	cmp	r3, #60	; 0x3c
 8006b10:	d908      	bls.n	8006b24 <Appli_Vendor_Test+0x68>
      {
        length = sizeof(ResponseBuffer);
 8006b12:	233c      	movs	r3, #60	; 0x3c
 8006b14:	603b      	str	r3, [r7, #0]
        TRACE_M(TF_VENDOR,"Length received greater than size of response buffer \r\n");
 8006b16:	2100      	movs	r1, #0
 8006b18:	481a      	ldr	r0, [pc, #104]	; (8006b84 <Appli_Vendor_Test+0xc8>)
 8006b1a:	f006 fd29 	bl	800d570 <TraceHeader>
 8006b1e:	481b      	ldr	r0, [pc, #108]	; (8006b8c <Appli_Vendor_Test+0xd0>)
 8006b20:	f022 fd90 	bl	8029644 <puts>
      }
      memcpy (&(ResponseBuffer[1]),&(data[1]),(length-1));
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4818      	ldr	r0, [pc, #96]	; (8006b90 <Appli_Vendor_Test+0xd4>)
 8006b30:	f022 ff51 	bl	80299d6 <memcpy>
      BuffLength = length;
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	4b16      	ldr	r3, [pc, #88]	; (8006b94 <Appli_Vendor_Test+0xd8>)
 8006b3a:	801a      	strh	r2, [r3, #0]
      break;
 8006b3c:	e01a      	b.n	8006b74 <Appli_Vendor_Test+0xb8>
      /*Insert Test related Commands here*/
      break;
    }
  case APPLI_MODEL_PUBLISH_SELECT:
    {
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 8006b3e:	2300      	movs	r3, #0
 8006b40:	73bb      	strb	r3, [r7, #14]
 8006b42:	e00e      	b.n	8006b62 <Appli_Vendor_Test+0xa6>
       {
         TRACE_I(TF_VENDOR,"data[%d]= %d",idx,data[idx]);  
 8006b44:	7bb9      	ldrb	r1, [r7, #14]
 8006b46:	7bbb      	ldrb	r3, [r7, #14]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	4811      	ldr	r0, [pc, #68]	; (8006b98 <Appli_Vendor_Test+0xdc>)
 8006b52:	f022 fd11 	bl	8029578 <iprintf>
         TRACE_I(TF_VENDOR,"\n\r");
 8006b56:	4811      	ldr	r0, [pc, #68]	; (8006b9c <Appli_Vendor_Test+0xe0>)
 8006b58:	f022 fd0e 	bl	8029578 <iprintf>
       for (MOBLEUINT8 idx=0; idx<length; idx++)
 8006b5c:	7bbb      	ldrb	r3, [r7, #14]
 8006b5e:	3301      	adds	r3, #1
 8006b60:	73bb      	strb	r3, [r7, #14]
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d8ec      	bhi.n	8006b44 <Appli_Vendor_Test+0x88>
       } 
       break;
 8006b6a:	e003      	b.n	8006b74 <Appli_Vendor_Test+0xb8>
     }
             
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b70:	e000      	b.n	8006b74 <Appli_Vendor_Test+0xb8>
      break;
 8006b72:	bf00      	nop
    }
  }
       
  return status;
 8006b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20004460 	.word	0x20004460
 8006b84:	08032b9c 	.word	0x08032b9c
 8006b88:	0802eba0 	.word	0x0802eba0
 8006b8c:	0802ebb0 	.word	0x0802ebb0
 8006b90:	20004461 	.word	0x20004461
 8006b94:	2000449c 	.word	0x2000449c
 8006b98:	0802ebe8 	.word	0x0802ebe8
 8006b9c:	0802ebf8 	.word	0x0802ebf8

08006ba0 <Appli_Vendor_LEDControl>:
* @param  elementIndex : selected element where '0' is first element       
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_LEDControl( MOBLEUINT8 const *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	60b9      	str	r1, [r7, #8]
 8006baa:	4611      	mov	r1, r2
 8006bac:	461a      	mov	r2, r3
 8006bae:	460b      	mov	r3, r1
 8006bb0:	71fb      	strb	r3, [r7, #7]
 8006bb2:	4613      	mov	r3, r2
 8006bb4:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 subCommand; 
  subCommand = data[0];
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	74fb      	strb	r3, [r7, #19]
  MOBLEUINT16 duty;
  MOBLEUINT16 intensityValue = 0;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	82bb      	strh	r3, [r7, #20]
      
  TRACE_M(TF_VENDOR,"#03-%02hx!\n\r",data[0]);
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	488a      	ldr	r0, [pc, #552]	; (8006df0 <Appli_Vendor_LEDControl+0x250>)
 8006bc8:	f006 fcd2 	bl	800d570 <TraceHeader>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	781b      	ldrb	r3, [r3, #0]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4888      	ldr	r0, [pc, #544]	; (8006df4 <Appli_Vendor_LEDControl+0x254>)
 8006bd4:	f022 fcd0 	bl	8029578 <iprintf>
  switch(subCommand)
 8006bd8:	7cfb      	ldrb	r3, [r7, #19]
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	2b05      	cmp	r3, #5
 8006bde:	f200 80e4 	bhi.w	8006daa <Appli_Vendor_LEDControl+0x20a>
 8006be2:	a201      	add	r2, pc, #4	; (adr r2, 8006be8 <Appli_Vendor_LEDControl+0x48>)
 8006be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be8:	08006cb3 	.word	0x08006cb3
 8006bec:	08006cf9 	.word	0x08006cf9
 8006bf0:	08006c35 	.word	0x08006c35
 8006bf4:	08006dab 	.word	0x08006dab
 8006bf8:	08006c01 	.word	0x08006c01
 8006bfc:	08006d3b 	.word	0x08006d3b
    */
  case APPLI_CMD_LED_BULB:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Control callback received for elementIndex %d \r\n", elementIndex);
 8006c00:	2100      	movs	r1, #0
 8006c02:	487b      	ldr	r0, [pc, #492]	; (8006df0 <Appli_Vendor_LEDControl+0x250>)
 8006c04:	f006 fcb4 	bl	800d570 <TraceHeader>
 8006c08:	79fb      	ldrb	r3, [r7, #7]
 8006c0a:	4619      	mov	r1, r3
 8006c0c:	487a      	ldr	r0, [pc, #488]	; (8006df8 <Appli_Vendor_LEDControl+0x258>)
 8006c0e:	f022 fcb3 	bl	8029578 <iprintf>
      Appli_LedState = *(data+1); /* Toggle the state of the Blue LED */
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	3301      	adds	r3, #1
 8006c16:	781a      	ldrb	r2, [r3, #0]
 8006c18:	4b78      	ldr	r3, [pc, #480]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006c1a:	701a      	strb	r2, [r3, #0]
      if( Appli_LedState == 1)
 8006c1c:	4b77      	ldr	r3, [pc, #476]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d103      	bne.n	8006c2c <Appli_Vendor_LEDControl+0x8c>
      {
        BSP_LED_On(LED_BLUE);
 8006c24:	2000      	movs	r0, #0
 8006c26:	f000 ff7b 	bl	8007b20 <BSP_LED_On>
      }
      else
      {
        BSP_LED_Off(LED_BLUE);
      }  
      break;
 8006c2a:	e0c1      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
        BSP_LED_Off(LED_BLUE);
 8006c2c:	2000      	movs	r0, #0
 8006c2e:	f000 ff91 	bl	8007b54 <BSP_LED_Off>
      break;
 8006c32:	e0bd      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
    /* Toggle Command */  
  case APPLI_CMD_TOGGLE:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_Toggle callback received for elementIndex %d \r\n", elementIndex);
 8006c34:	2100      	movs	r1, #0
 8006c36:	486e      	ldr	r0, [pc, #440]	; (8006df0 <Appli_Vendor_LEDControl+0x250>)
 8006c38:	f006 fc9a 	bl	800d570 <TraceHeader>
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	486f      	ldr	r0, [pc, #444]	; (8006e00 <Appli_Vendor_LEDControl+0x260>)
 8006c42:	f022 fc99 	bl	8029578 <iprintf>
      if(Appli_LedState == 1)
 8006c46:	4b6d      	ldr	r3, [pc, #436]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d117      	bne.n	8006c7e <Appli_Vendor_LEDControl+0xde>
      {
        Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 8006c4e:	4b6d      	ldr	r3, [pc, #436]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	f042 0201 	orr.w	r2, r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	705a      	strb	r2, [r3, #1]
                                    
#ifndef CUSTOM_BOARD_PWM_SELECTION            
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006c5c:	4b69      	ldr	r3, [pc, #420]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	4611      	mov	r1, r2
 8006c62:	6858      	ldr	r0, [r3, #4]
 8006c64:	4602      	mov	r2, r0
 8006c66:	6898      	ldr	r0, [r3, #8]
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2004      	movs	r0, #4
 8006c6c:	f7fe f82e 	bl	8004ccc <Light_UpdateLedValue>
#else
        Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
        Appli_LedState = 0;
 8006c70:	4b62      	ldr	r3, [pc, #392]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006c72:	2200      	movs	r2, #0
 8006c74:	701a      	strb	r2, [r3, #0]
        BSP_LED_Off(LED_BLUE);
 8006c76:	2000      	movs	r0, #0
 8006c78:	f000 ff6c 	bl	8007b54 <BSP_LED_Off>
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
        Appli_LedState = 1;
        BSP_LED_On(LED_BLUE);
      }
              
      break;
 8006c7c:	e098      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
        Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8006c7e:	4b61      	ldr	r3, [pc, #388]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	f062 0209 	orn	r2, r2, #9
 8006c86:	701a      	strb	r2, [r3, #0]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8006c8e:	705a      	strb	r2, [r3, #1]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);
 8006c90:	4b5c      	ldr	r3, [pc, #368]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	4611      	mov	r1, r2
 8006c96:	6858      	ldr	r0, [r3, #4]
 8006c98:	4602      	mov	r2, r0
 8006c9a:	6898      	ldr	r0, [r3, #8]
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2004      	movs	r0, #4
 8006ca0:	f7fe f814 	bl	8004ccc <Light_UpdateLedValue>
        Appli_LedState = 1;
 8006ca4:	4b55      	ldr	r3, [pc, #340]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	701a      	strb	r2, [r3, #0]
        BSP_LED_On(LED_BLUE);
 8006caa:	2000      	movs	r0, #0
 8006cac:	f000 ff38 	bl	8007b20 <BSP_LED_On>
      break;
 8006cb0:	e07e      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
    /* On Command */  
  case APPLI_CMD_ON:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_ON callback received for elementIndex %d \r\n", elementIndex);     
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	484e      	ldr	r0, [pc, #312]	; (8006df0 <Appli_Vendor_LEDControl+0x250>)
 8006cb6:	f006 fc5b 	bl	800d570 <TraceHeader>
 8006cba:	79fb      	ldrb	r3, [r7, #7]
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	4852      	ldr	r0, [pc, #328]	; (8006e08 <Appli_Vendor_LEDControl+0x268>)
 8006cc0:	f022 fc5a 	bl	8029578 <iprintf>
      Appli_LightPwmValue.IntensityValue = PWM_TIME_PERIOD;
 8006cc4:	4b4f      	ldr	r3, [pc, #316]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f062 0209 	orn	r2, r2, #9
 8006ccc:	701a      	strb	r2, [r3, #0]
 8006cce:	2200      	movs	r2, #0
 8006cd0:	f042 027c 	orr.w	r2, r2, #124	; 0x7c
 8006cd4:	705a      	strb	r2, [r3, #1]
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006cd6:	4b4b      	ldr	r3, [pc, #300]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006cd8:	681a      	ldr	r2, [r3, #0]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	6858      	ldr	r0, [r3, #4]
 8006cde:	4602      	mov	r2, r0
 8006ce0:	6898      	ldr	r0, [r3, #8]
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2004      	movs	r0, #4
 8006ce6:	f7fd fff1 	bl	8004ccc <Light_UpdateLedValue>
      BSP_LED_On(LED_BLUE);
 8006cea:	2000      	movs	r0, #0
 8006cec:	f000 ff18 	bl	8007b20 <BSP_LED_On>
      Appli_LedState = 1;
 8006cf0:	4b42      	ldr	r3, [pc, #264]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	701a      	strb	r2, [r3, #0]
          
      break;
 8006cf6:	e05b      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
    /* Off Command */  
  case APPLI_CMD_OFF:
    {
      /*User Need to write the commands as per the element selected*/
          
      TRACE_M(TF_VENDOR,"Appli_LED_OFF callback received for elementIndex %d \r\n", elementIndex);                   
 8006cf8:	2100      	movs	r1, #0
 8006cfa:	483d      	ldr	r0, [pc, #244]	; (8006df0 <Appli_Vendor_LEDControl+0x250>)
 8006cfc:	f006 fc38 	bl	800d570 <TraceHeader>
 8006d00:	79fb      	ldrb	r3, [r7, #7]
 8006d02:	4619      	mov	r1, r3
 8006d04:	4841      	ldr	r0, [pc, #260]	; (8006e0c <Appli_Vendor_LEDControl+0x26c>)
 8006d06:	f022 fc37 	bl	8029578 <iprintf>
      Appli_LightPwmValue.IntensityValue = LED_OFF_VALUE;
 8006d0a:	4b3e      	ldr	r3, [pc, #248]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f042 0201 	orr.w	r2, r2, #1
 8006d12:	701a      	strb	r2, [r3, #0]
 8006d14:	2200      	movs	r2, #0
 8006d16:	705a      	strb	r2, [r3, #1]
            
#ifndef CUSTOM_BOARD_PWM_SELECTION            
      Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
 8006d18:	4b3a      	ldr	r3, [pc, #232]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	4611      	mov	r1, r2
 8006d1e:	6858      	ldr	r0, [r3, #4]
 8006d20:	4602      	mov	r2, r0
 8006d22:	6898      	ldr	r0, [r3, #8]
 8006d24:	4603      	mov	r3, r0
 8006d26:	2004      	movs	r0, #4
 8006d28:	f7fd ffd0 	bl	8004ccc <Light_UpdateLedValue>
#else
      Light_UpdateLedValue(RESET_STATE , Appli_LightPwmValue);   /* PWM_ID = PWM4, mapped on PWM4_PIN (GPIO_14 in mapping) */
#endif            
      Appli_LedState = 0;
 8006d2c:	4b33      	ldr	r3, [pc, #204]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006d2e:	2200      	movs	r2, #0
 8006d30:	701a      	strb	r2, [r3, #0]
      BSP_LED_Off(LED_BLUE);
 8006d32:	2000      	movs	r0, #0
 8006d34:	f000 ff0e 	bl	8007b54 <BSP_LED_Off>
          
      break;
 8006d38:	e03a      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
        /* intensity command */
    case APPLI_CMD_LED_INTENSITY:
      {
        /*User Need to write the commands as per the element selected*/
          
        TRACE_M(TF_VENDOR,"Appli_LED_Intensity callback received for elementIndex %d \r\n", elementIndex);    
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	482c      	ldr	r0, [pc, #176]	; (8006df0 <Appli_Vendor_LEDControl+0x250>)
 8006d3e:	f006 fc17 	bl	800d570 <TraceHeader>
 8006d42:	79fb      	ldrb	r3, [r7, #7]
 8006d44:	4619      	mov	r1, r3
 8006d46:	4832      	ldr	r0, [pc, #200]	; (8006e10 <Appli_Vendor_LEDControl+0x270>)
 8006d48:	f022 fc16 	bl	8029578 <iprintf>
        intensityValue = data[2] << 8;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	3302      	adds	r3, #2
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	b29b      	uxth	r3, r3
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	82bb      	strh	r3, [r7, #20]
        intensityValue |= data[1];
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	b29a      	uxth	r2, r3
 8006d60:	8abb      	ldrh	r3, [r7, #20]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	82bb      	strh	r3, [r7, #20]
                    
        duty = PwmValueMapping(intensityValue , 0x7FFF ,0);                         
 8006d66:	8abb      	ldrh	r3, [r7, #20]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff fd2c 	bl	80067cc <PwmValueMapping>
 8006d74:	4603      	mov	r3, r0
 8006d76:	823b      	strh	r3, [r7, #16]
        Appli_LightPwmValue.IntensityValue = duty;
 8006d78:	4b22      	ldr	r3, [pc, #136]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006d7a:	8a3a      	ldrh	r2, [r7, #16]
 8006d7c:	801a      	strh	r2, [r3, #0]
        Light_UpdateLedValue(LOAD_STATE , Appli_LightPwmValue);             
 8006d7e:	4b21      	ldr	r3, [pc, #132]	; (8006e04 <Appli_Vendor_LEDControl+0x264>)
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	4611      	mov	r1, r2
 8006d84:	6858      	ldr	r0, [r3, #4]
 8006d86:	4602      	mov	r2, r0
 8006d88:	6898      	ldr	r0, [r3, #8]
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2004      	movs	r0, #4
 8006d8e:	f7fd ff9d 	bl	8004ccc <Light_UpdateLedValue>
        if(duty > 16000)
 8006d92:	8a3b      	ldrh	r3, [r7, #16]
 8006d94:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8006d98:	d903      	bls.n	8006da2 <Appli_Vendor_LEDControl+0x202>
        {
          BSP_LED_On(LED_BLUE);
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	f000 fec0 	bl	8007b20 <BSP_LED_On>
        }
        else
        {
          BSP_LED_Off(LED_BLUE);
        }
        break;
 8006da0:	e006      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
          BSP_LED_Off(LED_BLUE);
 8006da2:	2000      	movs	r0, #0
 8006da4:	f000 fed6 	bl	8007b54 <BSP_LED_Off>
        break;
 8006da8:	e002      	b.n	8006db0 <Appli_Vendor_LEDControl+0x210>
      }
    /* Default case - Not valid command */
  default:
    {
      status = MOBLE_RESULT_FALSE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	75fb      	strb	r3, [r7, #23]
      break;
 8006dae:	bf00      	nop
    }
  }
  /*Buffer will be sent for Reliable Response*/
  /*First Byte is Sub Command and 2nd Byte is LED Status*/
  ResponseBuffer[0] = subCommand;
 8006db0:	4a18      	ldr	r2, [pc, #96]	; (8006e14 <Appli_Vendor_LEDControl+0x274>)
 8006db2:	7cfb      	ldrb	r3, [r7, #19]
 8006db4:	7013      	strb	r3, [r2, #0]
  if(subCommand == APPLI_CMD_LED_INTENSITY)
 8006db6:	7cfb      	ldrb	r3, [r7, #19]
 8006db8:	2b06      	cmp	r3, #6
 8006dba:	d10d      	bne.n	8006dd8 <Appli_Vendor_LEDControl+0x238>
  {
    ResponseBuffer[1] = intensityValue >> 8 ;
 8006dbc:	8abb      	ldrh	r3, [r7, #20]
 8006dbe:	0a1b      	lsrs	r3, r3, #8
 8006dc0:	b29b      	uxth	r3, r3
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	4b13      	ldr	r3, [pc, #76]	; (8006e14 <Appli_Vendor_LEDControl+0x274>)
 8006dc6:	705a      	strb	r2, [r3, #1]
    ResponseBuffer[2] = intensityValue ;
 8006dc8:	8abb      	ldrh	r3, [r7, #20]
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	4b11      	ldr	r3, [pc, #68]	; (8006e14 <Appli_Vendor_LEDControl+0x274>)
 8006dce:	709a      	strb	r2, [r3, #2]
    BuffLength = 3;
 8006dd0:	4b11      	ldr	r3, [pc, #68]	; (8006e18 <Appli_Vendor_LEDControl+0x278>)
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	801a      	strh	r2, [r3, #0]
 8006dd6:	e006      	b.n	8006de6 <Appli_Vendor_LEDControl+0x246>
  }
  else
  {
    ResponseBuffer[1] = Appli_LedState ;
 8006dd8:	4b08      	ldr	r3, [pc, #32]	; (8006dfc <Appli_Vendor_LEDControl+0x25c>)
 8006dda:	781a      	ldrb	r2, [r3, #0]
 8006ddc:	4b0d      	ldr	r3, [pc, #52]	; (8006e14 <Appli_Vendor_LEDControl+0x274>)
 8006dde:	705a      	strb	r2, [r3, #1]
    BuffLength = 2; 
 8006de0:	4b0d      	ldr	r3, [pc, #52]	; (8006e18 <Appli_Vendor_LEDControl+0x278>)
 8006de2:	2202      	movs	r2, #2
 8006de4:	801a      	strh	r2, [r3, #0]
  }
      
  return status;
 8006de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006de8:	4618      	mov	r0, r3
 8006dea:	3718      	adds	r7, #24
 8006dec:	46bd      	mov	sp, r7
 8006dee:	bd80      	pop	{r7, pc}
 8006df0:	08032bb0 	.word	0x08032bb0
 8006df4:	0802ebfc 	.word	0x0802ebfc
 8006df8:	0802ec0c 	.word	0x0802ec0c
 8006dfc:	2000443a 	.word	0x2000443a
 8006e00:	0802ec48 	.word	0x0802ec48
 8006e04:	2000442c 	.word	0x2000442c
 8006e08:	0802ec84 	.word	0x0802ec84
 8006e0c:	0802ecbc 	.word	0x0802ecbc
 8006e10:	0802ecf4 	.word	0x0802ecf4
 8006e14:	20004460 	.word	0x20004460
 8006e18:	2000449c 	.word	0x2000449c

08006e1c <Appli_Vendor_Data_write>:
* @param  data: Pointer to the data received from peer_addr
* @param  length: Length of the data
* @retval MOBLE_RESULT status of result
*/          
MOBLE_RESULT Appli_Vendor_Data_write(MOBLEUINT8 const *data, MOBLEUINT32 length)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b084      	sub	sp, #16
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;  
 8006e26:	2300      	movs	r3, #0
 8006e28:	73fb      	strb	r3, [r7, #15]
  MOBLEUINT8 subCmd = data[0];
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	781b      	ldrb	r3, [r3, #0]
 8006e2e:	72fb      	strb	r3, [r7, #11]
  /*First Byte is sending the Sub Command*/      
  ResponseBuffer[0]=subCmd;
 8006e30:	4a1b      	ldr	r2, [pc, #108]	; (8006ea0 <Appli_Vendor_Data_write+0x84>)
 8006e32:	7afb      	ldrb	r3, [r7, #11]
 8006e34:	7013      	strb	r3, [r2, #0]
       
  TRACE_M(TF_VENDOR, "#0E-%02hx %02lx! \n\r",data[0], length);
 8006e36:	2100      	movs	r1, #0
 8006e38:	481a      	ldr	r0, [pc, #104]	; (8006ea4 <Appli_Vendor_Data_write+0x88>)
 8006e3a:	f006 fb99 	bl	800d570 <TraceHeader>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	4619      	mov	r1, r3
 8006e46:	4818      	ldr	r0, [pc, #96]	; (8006ea8 <Appli_Vendor_Data_write+0x8c>)
 8006e48:	f022 fb96 	bl	8029578 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	81bb      	strh	r3, [r7, #12]
 8006e50:	e00a      	b.n	8006e68 <Appli_Vendor_Data_write+0x4c>
  {
    TRACE_I(TF_VENDOR,"%02hx ",data[i]);
 8006e52:	89bb      	ldrh	r3, [r7, #12]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	4413      	add	r3, r2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	4619      	mov	r1, r3
 8006e5c:	4813      	ldr	r0, [pc, #76]	; (8006eac <Appli_Vendor_Data_write+0x90>)
 8006e5e:	f022 fb8b 	bl	8029578 <iprintf>
  for(MOBLEUINT16 i=0; i<length; i++)
 8006e62:	89bb      	ldrh	r3, [r7, #12]
 8006e64:	3301      	adds	r3, #1
 8006e66:	81bb      	strh	r3, [r7, #12]
 8006e68:	89bb      	ldrh	r3, [r7, #12]
 8006e6a:	683a      	ldr	r2, [r7, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d8f0      	bhi.n	8006e52 <Appli_Vendor_Data_write+0x36>
  }
  TRACE_I(TF_VENDOR,"\n\r");
 8006e70:	480f      	ldr	r0, [pc, #60]	; (8006eb0 <Appli_Vendor_Data_write+0x94>)
 8006e72:	f022 fb81 	bl	8029578 <iprintf>
  switch(subCmd)
 8006e76:	7afb      	ldrb	r3, [r7, #11]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d109      	bne.n	8006e90 <Appli_Vendor_Data_write+0x74>
  {     
    case APPLI_STRING_WRITE:
    {            
      memcpy(&ResponseBuffer,data,length);
 8006e7c:	683a      	ldr	r2, [r7, #0]
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4807      	ldr	r0, [pc, #28]	; (8006ea0 <Appli_Vendor_Data_write+0x84>)
 8006e82:	f022 fda8 	bl	80299d6 <memcpy>
      BuffLength = length;
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	4b0a      	ldr	r3, [pc, #40]	; (8006eb4 <Appli_Vendor_Data_write+0x98>)
 8006e8c:	801a      	strh	r2, [r3, #0]
      break;
 8006e8e:	e002      	b.n	8006e96 <Appli_Vendor_Data_write+0x7a>
    }
    default:
    {
      status = MOBLE_RESULT_FALSE;
 8006e90:	2301      	movs	r3, #1
 8006e92:	73fb      	strb	r3, [r7, #15]
      break;
 8006e94:	bf00      	nop
    }
  }
  return status;        
 8006e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	20004460 	.word	0x20004460
 8006ea4:	08032bc8 	.word	0x08032bc8
 8006ea8:	0802ed34 	.word	0x0802ed34
 8006eac:	0802ed48 	.word	0x0802ed48
 8006eb0:	0802ebf8 	.word	0x0802ebf8
 8006eb4:	2000449c 	.word	0x2000449c

08006eb8 <Appli_GetTestValue>:
*          when Vensor application test command received then status message is to be provided
* @param  responseValue: Pointer to the status message
* @retval void
*/ 
void Appli_GetTestValue (MOBLEUINT8 *responseValue)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b083      	sub	sp, #12
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  *responseValue = TestHitCounter;
 8006ec0:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <Appli_GetTestValue+0x50>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	701a      	strb	r2, [r3, #0]
  *(responseValue+1)  = TestHitCounter >> 8;
 8006eca:	4b0f      	ldr	r3, [pc, #60]	; (8006f08 <Appli_GetTestValue+0x50>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	0a1a      	lsrs	r2, r3, #8
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	b2d2      	uxtb	r2, r2
 8006ed6:	701a      	strb	r2, [r3, #0]
  *(responseValue+2)  = TestHitCounter >> 16;
 8006ed8:	4b0b      	ldr	r3, [pc, #44]	; (8006f08 <Appli_GetTestValue+0x50>)
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	0c1a      	lsrs	r2, r3, #16
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	3302      	adds	r3, #2
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
  *(responseValue+3)  = TestHitCounter >> 24;
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <Appli_GetTestValue+0x50>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	0e1a      	lsrs	r2, r3, #24
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	3303      	adds	r3, #3
 8006ef0:	b2d2      	uxtb	r2, r2
 8006ef2:	701a      	strb	r2, [r3, #0]
  TestHitCounter = 0;
 8006ef4:	4b04      	ldr	r3, [pc, #16]	; (8006f08 <Appli_GetTestValue+0x50>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	370c      	adds	r7, #12
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	200044e8 	.word	0x200044e8

08006f0c <Appli_Vendor_SetBigDataPacket>:
* @param  dst_peer : Destination address
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SetBigDataPacket(MOBLEUINT8 *data, MOBLEUINT32 length,
                                       MOBLEUINT8 elementIndex , MOBLE_ADDRESS dst_peer)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	4611      	mov	r1, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	460b      	mov	r3, r1
 8006f1c:	71fb      	strb	r3, [r7, #7]
 8006f1e:	4613      	mov	r3, r2
 8006f20:	80bb      	strh	r3, [r7, #4]
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006f22:	2300      	movs	r3, #0
 8006f24:	75fb      	strb	r3, [r7, #23]
  
  if (length > VENDOR_DATA_BUFFER_SIZE)
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	2b3c      	cmp	r3, #60	; 0x3c
 8006f2a:	d901      	bls.n	8006f30 <Appli_Vendor_SetBigDataPacket+0x24>
  {
    status = MOBLE_RESULT_INVALIDARG;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	75fb      	strb	r3, [r7, #23]
  }
  memmove(Appli_VendorBigData.data, data, length);
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	4808      	ldr	r0, [pc, #32]	; (8006f58 <Appli_Vendor_SetBigDataPacket+0x4c>)
 8006f36:	f022 fca3 	bl	8029880 <memmove>
  Appli_VendorBigData.dst = dst_peer;
 8006f3a:	4a08      	ldr	r2, [pc, #32]	; (8006f5c <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f3c:	88bb      	ldrh	r3, [r7, #4]
 8006f3e:	8013      	strh	r3, [r2, #0]
  Appli_VendorBigData.length = length;
 8006f40:	4a06      	ldr	r2, [pc, #24]	; (8006f5c <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	6413      	str	r3, [r2, #64]	; 0x40
  Appli_VendorBigData.elementIndex = elementIndex;
 8006f46:	4a05      	ldr	r2, [pc, #20]	; (8006f5c <Appli_Vendor_SetBigDataPacket+0x50>)
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	f882 3044 	strb.w	r3, [r2, #68]	; 0x44
  return status;
 8006f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	200044a2 	.word	0x200044a2
 8006f5c:	200044a0 	.word	0x200044a0

08006f60 <Appli_Vendor_SendBigDataPacket>:
* @brief  Send Vendor big data packet
* @param  void      
* @retval MOBLE_RESULT status of result
*/ 
MOBLE_RESULT Appli_Vendor_SendBigDataPacket(void)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af04      	add	r7, sp, #16
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8006f66:	2300      	movs	r3, #0
 8006f68:	71fb      	strb	r3, [r7, #7]
  
  if(BLEMesh_TrsptIsBusyState())
 8006f6a:	f016 f943 	bl	801d1f4 <BLEMesh_TrsptIsBusyState>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d005      	beq.n	8006f80 <Appli_Vendor_SendBigDataPacket+0x20>
  {
    BSP_LED_On(LED_BLUE);
 8006f74:	2000      	movs	r0, #0
 8006f76:	f000 fdd3 	bl	8007b20 <BSP_LED_On>
    status = MOBLE_RESULT_FALSE;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	71fb      	strb	r3, [r7, #7]
 8006f7e:	e014      	b.n	8006faa <Appli_Vendor_SendBigDataPacket+0x4a>
  }
  else
  {
    BSP_LED_Off(LED_BLUE);
 8006f80:	2000      	movs	r0, #0
 8006f82:	f000 fde7 	bl	8007b54 <BSP_LED_Off>
    status = BLEMesh_SetRemoteData(Appli_VendorBigData.dst,
 8006f86:	4b0b      	ldr	r3, [pc, #44]	; (8006fb4 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f88:	8818      	ldrh	r0, [r3, #0]
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	; (8006fb4 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f8c:	f893 1044 	ldrb.w	r1, [r3, #68]	; 0x44
 8006f90:	4b08      	ldr	r3, [pc, #32]	; (8006fb4 <Appli_Vendor_SendBigDataPacket+0x54>)
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	2201      	movs	r2, #1
 8006f96:	9202      	str	r2, [sp, #8]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	9201      	str	r2, [sp, #4]
 8006f9c:	9300      	str	r3, [sp, #0]
 8006f9e:	4b06      	ldr	r3, [pc, #24]	; (8006fb8 <Appli_Vendor_SendBigDataPacket+0x58>)
 8006fa0:	220e      	movs	r2, #14
 8006fa2:	f021 fadf 	bl	8028564 <BLEMesh_SetRemoteData>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	71fb      	strb	r3, [r7, #7]
                                       Appli_VendorBigData.length,
                                       MOBLE_FALSE, 
                                       MOBLE_TRUE);

  }
  return status;
 8006faa:	79fb      	ldrb	r3, [r7, #7]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	200044a0 	.word	0x200044a0
 8006fb8:	200044a2 	.word	0x200044a2

08006fbc <GetApplicationVendorModels>:

/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

void GetApplicationVendorModels(const MODEL_Vendor_cb_t** pModelsTable, MOBLEUINT32* VendorModelscount)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
#ifdef ENABLE_VENDOR_MODEL_SERVER
  *pModelsTable = Model_Vendor_cb       ;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a07      	ldr	r2, [pc, #28]	; (8006fe8 <GetApplicationVendorModels+0x2c>)
 8006fca:	601a      	str	r2, [r3, #0]
  *VendorModelscount = MODEL_VENDOR_COUNT;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
  
   TRACE_M(TF_VENDOR_M, "GetApplicationVendorModels \r\n");
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4805      	ldr	r0, [pc, #20]	; (8006fec <GetApplicationVendorModels+0x30>)
 8006fd6:	f006 facb 	bl	800d570 <TraceHeader>
 8006fda:	4805      	ldr	r0, [pc, #20]	; (8006ff0 <GetApplicationVendorModels+0x34>)
 8006fdc:	f022 fb32 	bl	8029644 <puts>
#endif
}
 8006fe0:	bf00      	nop
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	08032d0c 	.word	0x08032d0c
 8006fec:	08032d24 	.word	0x08032d24
 8006ff0:	0802ed64 	.word	0x0802ed64

08006ff4 <BLEMesh_ModelsInit>:
* @brief  Initialization Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsInit(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b092      	sub	sp, #72	; 0x48
 8006ff8:	af00      	add	r7, sp, #0
#endif	
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  /* Inintialise the light model range states with default values */
  Light_ModelRangeInit();
 8006ffa:	f009 fea3 	bl	8010d44 <Light_ModelRangeInit>
#endif
  
  /* Callbacks used by BlueNRG-Mesh Models */
  BLEMesh_SetSIGModelsCbMap(Model_SIG_cb, MODEL_SIG_COUNT);
 8006ffe:	2102      	movs	r1, #2
 8007000:	480c      	ldr	r0, [pc, #48]	; (8007034 <BLEMesh_ModelsInit+0x40>)
 8007002:	f021 f9bb 	bl	802837c <BLEMesh_SetSIGModelsCbMap>
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC
  Appli_Light_LCs_Init();
#endif
  
  /* Load generic model states from nvm */
  AppliNvm_LoadModelState(modelStateLoadBuff, &modelStateLoad_Size);
 8007006:	f107 0246 	add.w	r2, r7, #70	; 0x46
 800700a:	1d3b      	adds	r3, r7, #4
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7ff fc2f 	bl	8006872 <AppliNvm_LoadModelState>
  if (modelStateLoad_Size != 0)
 8007014:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007018:	2b00      	cmp	r3, #0
 800701a:	d007      	beq.n	800702c <BLEMesh_ModelsInit+0x38>
  {
    /* update states of generic model */
    Model_RestoreStates(modelStateLoadBuff, modelStateLoad_Size);
 800701c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007020:	b2da      	uxtb	r2, r3
 8007022:	1d3b      	adds	r3, r7, #4
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f006 fac4 	bl	800d5b4 <Model_RestoreStates>
  }
}
 800702c:	bf00      	nop
 800702e:	3748      	adds	r7, #72	; 0x48
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}
 8007034:	08032ce8 	.word	0x08032ce8

08007038 <BLEMesh_ModelsProcess>:
* @brief  Process Commands for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsProcess(void)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	af00      	add	r7, sp, #0
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  Generic_Process();
 800703c:	f008 f85c 	bl	800f0f8 <Generic_Process>
#endif

#ifdef ENABLE_LIGHT_MODEL_SERVER  
  Lighting_Process();
 8007040:	f009 fcec 	bl	8010a1c <Lighting_Process>
#endif

#ifdef ENABLE_VENDOR_MODEL_SERVER  
  Vendor_Process();
 8007044:	f00d f8b8 	bl	80141b8 <Vendor_Process>
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LC   
  Light_LC_Process();
#endif
}
 8007048:	bf00      	nop
 800704a:	bd80      	pop	{r7, pc}

0800704c <BLEMesh_ModelsCommand>:
* @brief  Publish Command for Models
* @param  void
* @retval void
*/    
void BLEMesh_ModelsCommand(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  
      
/* if CLIENT and SERVER => Publish is already done in CLIENT */
#ifdef GENERIC_SERVER_MODEL_PUBLISH 
#ifndef GENERIC_CLIENT_MODEL_PUBLISH  
  Generic_Publish(BLEMesh_GetAddress());
 8007050:	f016 f82a 	bl	801d0a8 <BLEMesh_GetAddress>
 8007054:	4603      	mov	r3, r0
 8007056:	4618      	mov	r0, r3
 8007058:	f008 f9e6 	bl	800f428 <Generic_Publish>
#endif
#endif
}
 800705c:	bf00      	nop
 800705e:	bd80      	pop	{r7, pc}

08007060 <BLEMesh_ModelsDelayPacket>:
*/ 
void BLEMesh_ModelsDelayPacket(MODEL_MessageHeader_t *pmsgParams,
                               MOBLEUINT8 command, 
                               MOBLEUINT8 const * data, 
                               MOBLEUINT32 length)
{
 8007060:	b590      	push	{r4, r7, lr}
 8007062:	b089      	sub	sp, #36	; 0x24
 8007064:	af00      	add	r7, sp, #0
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	460b      	mov	r3, r1
 800706e:	72fb      	strb	r3, [r7, #11]
  MOBLEUINT8 random_time[8];
  
  if (Appli_PendingPackets.packet_count == 0)
 8007070:	4b55      	ldr	r3, [pc, #340]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d136      	bne.n	80070e6 <BLEMesh_ModelsDelayPacket+0x86>
  {
    Appli_PendingPackets.packet_count = 1;
 8007078:	4b53      	ldr	r3, [pc, #332]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 800707a:	2201      	movs	r2, #1
 800707c:	701a      	strb	r2, [r3, #0]
    hci_le_rand(random_time);
 800707e:	f107 0314 	add.w	r3, r7, #20
 8007082:	4618      	mov	r0, r3
 8007084:	f00e fc4a 	bl	801591c <hci_le_rand>
    Appli_PendingPackets.send_time = Clock_Time() + 
 8007088:	f000 feec 	bl	8007e64 <HAL_GetTick>
 800708c:	4601      	mov	r1, r0
      DEFAULT_DELAY_PACKET_FROM + 
        (random_time[0] + random_time[1]*256)\
 800708e:	7d3b      	ldrb	r3, [r7, #20]
 8007090:	461a      	mov	r2, r3
 8007092:	7d7b      	ldrb	r3, [r7, #21]
 8007094:	021b      	lsls	r3, r3, #8
 8007096:	4413      	add	r3, r2
 8007098:	461a      	mov	r2, r3
          %DEFAULT_DELAY_PACKET_RANDOM_TIME;    
 800709a:	4b4c      	ldr	r3, [pc, #304]	; (80071cc <BLEMesh_ModelsDelayPacket+0x16c>)
 800709c:	fba3 0302 	umull	r0, r3, r3, r2
 80070a0:	095b      	lsrs	r3, r3, #5
 80070a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80070a6:	fb00 f303 	mul.w	r3, r0, r3
 80070aa:	1ad3      	subs	r3, r2, r3
      DEFAULT_DELAY_PACKET_FROM + 
 80070ac:	440b      	add	r3, r1
 80070ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
    Appli_PendingPackets.send_time = Clock_Time() + 
 80070b2:	4a45      	ldr	r2, [pc, #276]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80070b4:	f8c2 3001 	str.w	r3, [r2, #1]
    Appli_PendingPackets.head = Appli_PendingPackets.packet;
 80070b8:	4b43      	ldr	r3, [pc, #268]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80070ba:	4a45      	ldr	r2, [pc, #276]	; (80071d0 <BLEMesh_ModelsDelayPacket+0x170>)
 80070bc:	f8c3 2005 	str.w	r2, [r3, #5]
    Appli_PendingPackets.head_index = 0;
 80070c0:	4b41      	ldr	r3, [pc, #260]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80070c2:	2200      	movs	r2, #0
 80070c4:	725a      	strb	r2, [r3, #9]
    TRACE_M(TF_MISC, "Randomized time: %ld\n\r", Appli_PendingPackets.send_time - Clock_Time());
 80070c6:	2100      	movs	r1, #0
 80070c8:	4842      	ldr	r0, [pc, #264]	; (80071d4 <BLEMesh_ModelsDelayPacket+0x174>)
 80070ca:	f006 fa51 	bl	800d570 <TraceHeader>
 80070ce:	4b3e      	ldr	r3, [pc, #248]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80070d0:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80070d4:	f000 fec6 	bl	8007e64 <HAL_GetTick>
 80070d8:	4603      	mov	r3, r0
 80070da:	1ae3      	subs	r3, r4, r3
 80070dc:	4619      	mov	r1, r3
 80070de:	483e      	ldr	r0, [pc, #248]	; (80071d8 <BLEMesh_ModelsDelayPacket+0x178>)
 80070e0:	f022 fa4a 	bl	8029578 <iprintf>
 80070e4:	e02d      	b.n	8007142 <BLEMesh_ModelsDelayPacket+0xe2>
  }
  else 
  {
    Appli_PendingPackets.packet_count += 1;
 80070e6:	4b38      	ldr	r3, [pc, #224]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	3301      	adds	r3, #1
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	4b36      	ldr	r3, [pc, #216]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80070f0:	701a      	strb	r2, [r3, #0]
    Appli_PendingPackets.packet_count = (Appli_PendingPackets.packet_count)%\
 80070f2:	4b35      	ldr	r3, [pc, #212]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80070f4:	781a      	ldrb	r2, [r3, #0]
 80070f6:	4b39      	ldr	r3, [pc, #228]	; (80071dc <BLEMesh_ModelsDelayPacket+0x17c>)
 80070f8:	fba3 1302 	umull	r1, r3, r3, r2
 80070fc:	0859      	lsrs	r1, r3, #1
 80070fe:	460b      	mov	r3, r1
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	440b      	add	r3, r1
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	b2da      	uxtb	r2, r3
 8007108:	4b2f      	ldr	r3, [pc, #188]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 800710a:	701a      	strb	r2, [r3, #0]
      (MAX_PENDING_PACKETS_QUE_SIZE+1);
    
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 800710c:	4b2e      	ldr	r3, [pc, #184]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 800710e:	f8d3 3005 	ldr.w	r3, [r3, #5]
      MAX_PENDING_PACKETS_QUE_SIZE - 1))
 8007112:	4a33      	ldr	r2, [pc, #204]	; (80071e0 <BLEMesh_ModelsDelayPacket+0x180>)
    if (Appli_PendingPackets.head != (Appli_PendingPackets.packet + \
 8007114:	4293      	cmp	r3, r2
 8007116:	d00d      	beq.n	8007134 <BLEMesh_ModelsDelayPacket+0xd4>
    {
      Appli_PendingPackets.head = Appli_PendingPackets.head +1;
 8007118:	4b2b      	ldr	r3, [pc, #172]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 800711a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800711e:	331c      	adds	r3, #28
 8007120:	4a29      	ldr	r2, [pc, #164]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007122:	f8c2 3005 	str.w	r3, [r2, #5]
      Appli_PendingPackets.head_index = Appli_PendingPackets.head_index+1;
 8007126:	4b28      	ldr	r3, [pc, #160]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007128:	7a5b      	ldrb	r3, [r3, #9]
 800712a:	3301      	adds	r3, #1
 800712c:	b2da      	uxtb	r2, r3
 800712e:	4b26      	ldr	r3, [pc, #152]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007130:	725a      	strb	r2, [r3, #9]
 8007132:	e006      	b.n	8007142 <BLEMesh_ModelsDelayPacket+0xe2>
    }
    else
    {
      Appli_PendingPackets.head = Appli_PendingPackets.packet;
 8007134:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007136:	4a26      	ldr	r2, [pc, #152]	; (80071d0 <BLEMesh_ModelsDelayPacket+0x170>)
 8007138:	f8c3 2005 	str.w	r2, [r3, #5]
      Appli_PendingPackets.head_index = 0;
 800713c:	4b22      	ldr	r3, [pc, #136]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 800713e:	2200      	movs	r2, #0
 8007140:	725a      	strb	r2, [r3, #9]
    }
  }  
  
  Appli_PendingPackets.head->peer = pmsgParams->peer_addr;
 8007142:	4b21      	ldr	r3, [pc, #132]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007144:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	8892      	ldrh	r2, [r2, #4]
 800714c:	801a      	strh	r2, [r3, #0]
  Appli_PendingPackets.head->dst = pmsgParams->dst_peer;
 800714e:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007150:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	88d2      	ldrh	r2, [r2, #6]
 8007158:	805a      	strh	r2, [r3, #2]
  Appli_PendingPackets.head->elementIndex = pmsgParams->elementIndex;
 800715a:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 800715c:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007160:	68fa      	ldr	r2, [r7, #12]
 8007162:	7812      	ldrb	r2, [r2, #0]
 8007164:	715a      	strb	r2, [r3, #5]
  Appli_PendingPackets.head->appKeyOffset = pmsgParams->rcvdAppKeyOffset;
 8007166:	4b18      	ldr	r3, [pc, #96]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007168:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	7a92      	ldrb	r2, [r2, #10]
 8007170:	719a      	strb	r2, [r3, #6]
  Appli_PendingPackets.head->netKeyOffset = pmsgParams->rcvdNetKeyOffset;
 8007172:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007174:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	7ad2      	ldrb	r2, [r2, #11]
 800717c:	71da      	strb	r2, [r3, #7]
  Appli_PendingPackets.head->command = command;
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 8007180:	f8d3 3005 	ldr.w	r3, [r3, #5]
 8007184:	7afa      	ldrb	r2, [r7, #11]
 8007186:	711a      	strb	r2, [r3, #4]
  Appli_PendingPackets.head->length = length;
 8007188:	4b0f      	ldr	r3, [pc, #60]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 800718a:	f8d3 3005 	ldr.w	r3, [r3, #5]
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	619a      	str	r2, [r3, #24]
  for (MOBLEUINT8 count=0; count<length; count++)
 8007192:	2300      	movs	r3, #0
 8007194:	77fb      	strb	r3, [r7, #31]
 8007196:	e00d      	b.n	80071b4 <BLEMesh_ModelsDelayPacket+0x154>
    Appli_PendingPackets.head->data[count] = data[count];
 8007198:	7ffb      	ldrb	r3, [r7, #31]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	18d1      	adds	r1, r2, r3
 800719e:	4b0a      	ldr	r3, [pc, #40]	; (80071c8 <BLEMesh_ModelsDelayPacket+0x168>)
 80071a0:	f8d3 2005 	ldr.w	r2, [r3, #5]
 80071a4:	7ffb      	ldrb	r3, [r7, #31]
 80071a6:	7809      	ldrb	r1, [r1, #0]
 80071a8:	4413      	add	r3, r2
 80071aa:	460a      	mov	r2, r1
 80071ac:	721a      	strb	r2, [r3, #8]
  for (MOBLEUINT8 count=0; count<length; count++)
 80071ae:	7ffb      	ldrb	r3, [r7, #31]
 80071b0:	3301      	adds	r3, #1
 80071b2:	77fb      	strb	r3, [r7, #31]
 80071b4:	7ffb      	ldrb	r3, [r7, #31]
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d8ed      	bhi.n	8007198 <BLEMesh_ModelsDelayPacket+0x138>
}   
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	3724      	adds	r7, #36	; 0x24
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd90      	pop	{r4, r7, pc}
 80071c6:	bf00      	nop
 80071c8:	200044ec 	.word	0x200044ec
 80071cc:	10624dd3 	.word	0x10624dd3
 80071d0:	200044f6 	.word	0x200044f6
 80071d4:	08032d40 	.word	0x08032d40
 80071d8:	0802ed84 	.word	0x0802ed84
 80071dc:	aaaaaaab 	.word	0xaaaaaaab
 80071e0:	20004512 	.word	0x20004512

080071e4 <BLEMesh_ModelsSendDelayedPacket>:
* @brief  If send timestamp is reached and que is not empty, send all packets
* @param  None
* @retval None
*/
void BLEMesh_ModelsSendDelayedPacket(void)
{
 80071e4:	b590      	push	{r4, r7, lr}
 80071e6:	b089      	sub	sp, #36	; 0x24
 80071e8:	af02      	add	r7, sp, #8
  APPLI_SEND_RESPONSE_MODULE* ptr;
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT8 temp_index;
  
  if ((Appli_PendingPackets.packet_count != 0) && 
 80071ea:	4b2f      	ldr	r3, [pc, #188]	; (80072a8 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d055      	beq.n	800729e <BLEMesh_ModelsSendDelayedPacket+0xba>
      (Appli_PendingPackets.send_time <= Clock_Time()))
 80071f2:	4b2d      	ldr	r3, [pc, #180]	; (80072a8 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 80071f4:	f8d3 4001 	ldr.w	r4, [r3, #1]
 80071f8:	f000 fe34 	bl	8007e64 <HAL_GetTick>
 80071fc:	4603      	mov	r3, r0
  if ((Appli_PendingPackets.packet_count != 0) && 
 80071fe:	429c      	cmp	r4, r3
 8007200:	d84d      	bhi.n	800729e <BLEMesh_ModelsSendDelayedPacket+0xba>
  {
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 8007202:	4b29      	ldr	r3, [pc, #164]	; (80072a8 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	75fb      	strb	r3, [r7, #23]
 8007208:	e043      	b.n	8007292 <BLEMesh_ModelsSendDelayedPacket+0xae>
    {
    TRACE_M(TF_MISC, "Sending randomized packets. Packet count: %d \n\r",\
 800720a:	2100      	movs	r1, #0
 800720c:	4827      	ldr	r0, [pc, #156]	; (80072ac <BLEMesh_ModelsSendDelayedPacket+0xc8>)
 800720e:	f006 f9af 	bl	800d570 <TraceHeader>
 8007212:	4b25      	ldr	r3, [pc, #148]	; (80072a8 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	461a      	mov	r2, r3
 8007218:	7dfb      	ldrb	r3, [r7, #23]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	3301      	adds	r3, #1
 800721e:	4619      	mov	r1, r3
 8007220:	4823      	ldr	r0, [pc, #140]	; (80072b0 <BLEMesh_ModelsSendDelayedPacket+0xcc>)
 8007222:	f022 f9a9 	bl	8029578 <iprintf>
        Appli_PendingPackets.packet_count - count + 1);
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 8007226:	4b20      	ldr	r3, [pc, #128]	; (80072a8 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 8007228:	7a5b      	ldrb	r3, [r3, #9]
 800722a:	1cda      	adds	r2, r3, #3
        -count)%MAX_PENDING_PACKETS_QUE_SIZE;
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b00      	cmp	r3, #0
 8007232:	f003 0301 	and.w	r3, r3, #1
 8007236:	bfb8      	it	lt
 8007238:	425b      	neglt	r3, r3
      temp_index = ((Appli_PendingPackets.head_index+MAX_PENDING_PACKETS_QUE_SIZE+1)\
 800723a:	75bb      	strb	r3, [r7, #22]
      ptr = Appli_PendingPackets.packet + temp_index;
 800723c:	7dba      	ldrb	r2, [r7, #22]
 800723e:	4613      	mov	r3, r2
 8007240:	00db      	lsls	r3, r3, #3
 8007242:	1a9b      	subs	r3, r3, r2
 8007244:	009b      	lsls	r3, r3, #2
 8007246:	461a      	mov	r2, r3
 8007248:	4b1a      	ldr	r3, [pc, #104]	; (80072b4 <BLEMesh_ModelsSendDelayedPacket+0xd0>)
 800724a:	4413      	add	r3, r2
 800724c:	613b      	str	r3, [r7, #16]
      
      /* Initialize the messageParam*/
      msgParam.dst_peer = ptr->dst;
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	885b      	ldrh	r3, [r3, #2]
 8007252:	b29b      	uxth	r3, r3
 8007254:	817b      	strh	r3, [r7, #10]
      msgParam.peer_addr = ptr->peer;
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	881b      	ldrh	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	813b      	strh	r3, [r7, #8]
      msgParam.elementIndex = 0;
 800725e:	2300      	movs	r3, #0
 8007260:	713b      	strb	r3, [r7, #4]
      msgParam.rcvdAppKeyOffset = 0;
 8007262:	2300      	movs	r3, #0
 8007264:	73bb      	strb	r3, [r7, #14]
      msgParam.rcvdNetKeyOffset = 0;
 8007266:	2300      	movs	r3, #0
 8007268:	73fb      	strb	r3, [r7, #15]
      msgParam.rssi = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	737b      	strb	r3, [r7, #13]
      msgParam.ttl = 0;
 800726e:	2300      	movs	r3, #0
 8007270:	733b      	strb	r3, [r7, #12]
      
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	791a      	ldrb	r2, [r3, #4]
                               &msgParam,
                               ptr->command,
                               ptr->data,
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	f103 0008 	add.w	r0, r3, #8
      VendorModel_SendResponse(VENDOR_STMICRO_CID, 
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	1d39      	adds	r1, r7, #4
 8007282:	9300      	str	r3, [sp, #0]
 8007284:	4603      	mov	r3, r0
 8007286:	2030      	movs	r0, #48	; 0x30
 8007288:	f01e fb9c 	bl	80259c4 <VendorModel_SendResponse>
    for (MOBLEUINT8 count=Appli_PendingPackets.packet_count; count!=0; count--)
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	3b01      	subs	r3, #1
 8007290:	75fb      	strb	r3, [r7, #23]
 8007292:	7dfb      	ldrb	r3, [r7, #23]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1b8      	bne.n	800720a <BLEMesh_ModelsSendDelayedPacket+0x26>
                               ptr->length);
    }
    
    Appli_PendingPackets.packet_count = 0;
 8007298:	4b03      	ldr	r3, [pc, #12]	; (80072a8 <BLEMesh_ModelsSendDelayedPacket+0xc4>)
 800729a:	2200      	movs	r2, #0
 800729c:	701a      	strb	r2, [r3, #0]
  }
}
 800729e:	bf00      	nop
 80072a0:	371c      	adds	r7, #28
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd90      	pop	{r4, r7, pc}
 80072a6:	bf00      	nop
 80072a8:	200044ec 	.word	0x200044ec
 80072ac:	08032d5c 	.word	0x08032d5c
 80072b0:	0802ed9c 	.word	0x0802ed9c
 80072b4:	200044f6 	.word	0x200044f6

080072b8 <BLEMesh_ModelsASCII_To_Char>:
* @brief  Convert ASCII value into Character
* @param  tempValue : 8bit value for conversion
* @retval MOBLEUINT8 
*/         
MOBLEUINT8 BLEMesh_ModelsASCII_To_Char(MOBLEUINT8 tempValue)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b083      	sub	sp, #12
 80072bc:	af00      	add	r7, sp, #0
 80072be:	4603      	mov	r3, r0
 80072c0:	71fb      	strb	r3, [r7, #7]
  tempValue = tempValue - 0x30;
 80072c2:	79fb      	ldrb	r3, [r7, #7]
 80072c4:	3b30      	subs	r3, #48	; 0x30
 80072c6:	71fb      	strb	r3, [r7, #7]
  return tempValue;
 80072c8:	79fb      	ldrb	r3, [r7, #7]
} 
 80072ca:	4618      	mov	r0, r3
 80072cc:	370c      	adds	r7, #12
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Addr: Address of the FLASH Memory
  * @retval The page of a given address
  */
static MOBLEUINT32 GetPage(MOBLEUINT32 Addr)
{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  MOBLEUINT32 page = 0;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]

  if (Addr < (FLASH_BASE + FLASH_BANK_SIZE))
 80072e4:	4b10      	ldr	r3, [pc, #64]	; (8007328 <GetPage+0x50>)
 80072e6:	881b      	ldrh	r3, [r3, #0]
 80072e8:	029a      	lsls	r2, r3, #10
 80072ea:	4b10      	ldr	r3, [pc, #64]	; (800732c <GetPage+0x54>)
 80072ec:	4013      	ands	r3, r2
 80072ee:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d205      	bcs.n	8007304 <GetPage+0x2c>
  {
    /* Bank 1 */
    page = (Addr - FLASH_BASE) / FLASH_PAGE_SIZE;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 80072fe:	0b1b      	lsrs	r3, r3, #12
 8007300:	60fb      	str	r3, [r7, #12]
 8007302:	e00a      	b.n	800731a <GetPage+0x42>
  }
  else
  {
    /* Bank 2 */
    page = (Addr - (FLASH_BASE + FLASH_BANK_SIZE)) / FLASH_PAGE_SIZE;
 8007304:	4b08      	ldr	r3, [pc, #32]	; (8007328 <GetPage+0x50>)
 8007306:	881b      	ldrh	r3, [r3, #0]
 8007308:	029a      	lsls	r2, r3, #10
 800730a:	4b08      	ldr	r3, [pc, #32]	; (800732c <GetPage+0x54>)
 800730c:	4013      	ands	r3, r2
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8007316:	0b1b      	lsrs	r3, r3, #12
 8007318:	60fb      	str	r3, [r7, #12]
  }

  return page;
 800731a:	68fb      	ldr	r3, [r7, #12]
}
 800731c:	4618      	mov	r0, r3
 800731e:	3714      	adds	r7, #20
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr
 8007328:	1fff75e0 	.word	0x1fff75e0
 800732c:	001ffc00 	.word	0x001ffc00

08007330 <PalNvmIsWriteProtected>:
* @brief  returns NVM write protect status
* @param  None
* @retval TRUE if flash is write protected
*/
MOBLEBOOL PalNvmIsWriteProtected(void)
{
 8007330:	b480      	push	{r7}
 8007332:	af00      	add	r7, sp, #0
    /* All flash is writable */
    return MOBLE_FALSE;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <PalNvmRead>:
*/
MOBLE_RESULT PalNvmRead(MOBLEUINT32 address,
                        void *buf, 
                        MOBLEUINT32 size, 
                        MOBLEBOOL backup)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b086      	sub	sp, #24
 8007344:	af00      	add	r7, sp, #0
 8007346:	60f8      	str	r0, [r7, #12]
 8007348:	60b9      	str	r1, [r7, #8]
 800734a:	607a      	str	r2, [r7, #4]
 800734c:	70fb      	strb	r3, [r7, #3]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800734e:	2300      	movs	r3, #0
 8007350:	75fb      	strb	r3, [r7, #23]
  
//  printf("MoblePalNvmRead >>>\r\n");  

  if (address > (NVM_BASE + NVM_SIZE))
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <PalNvmRead+0x60>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	429a      	cmp	r2, r3
 800735e:	d902      	bls.n	8007366 <PalNvmRead+0x26>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007360:	2303      	movs	r3, #3
 8007362:	75fb      	strb	r3, [r7, #23]
 8007364:	e017      	b.n	8007396 <PalNvmRead+0x56>
  }
  else if (size == 0)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d102      	bne.n	8007372 <PalNvmRead+0x32>
  {
    result = MOBLE_RESULT_FALSE;
 800736c:	2301      	movs	r3, #1
 800736e:	75fb      	strb	r3, [r7, #23]
 8007370:	e011      	b.n	8007396 <PalNvmRead+0x56>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	441a      	add	r2, r3
 8007378:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <PalNvmRead+0x60>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8007380:	429a      	cmp	r2, r3
 8007382:	d902      	bls.n	800738a <PalNvmRead+0x4a>
  {
    result = MOBLE_RESULT_INVALIDARG;
 8007384:	2303      	movs	r3, #3
 8007386:	75fb      	strb	r3, [r7, #23]
 8007388:	e005      	b.n	8007396 <PalNvmRead+0x56>
  }
  else
  {
    memcpy(buf, (void *)(address), size);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4619      	mov	r1, r3
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f022 fb20 	bl	80299d6 <memcpy>
  }
  
//  printf("MoblePalNvmRead <<<\r\n");  
  return result;
 8007396:	7dfb      	ldrb	r3, [r7, #23]
}
 8007398:	4618      	mov	r0, r3
 800739a:	3718      	adds	r7, #24
 800739c:	46bd      	mov	sp, r7
 800739e:	bd80      	pop	{r7, pc}
 80073a0:	20004454 	.word	0x20004454

080073a4 <PalNvmCompare>:
*/
MOBLE_RESULT PalNvmCompare(MOBLEUINT32 address,
                           void const *buf, 
                           MOBLEUINT32 size, 
                           MOBLE_NVM_COMPARE* comparison)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b089      	sub	sp, #36	; 0x24
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	60f8      	str	r0, [r7, #12]
 80073ac:	60b9      	str	r1, [r7, #8]
 80073ae:	607a      	str	r2, [r7, #4]
 80073b0:	603b      	str	r3, [r7, #0]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80073b2:	2300      	movs	r3, #0
 80073b4:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT32 i;

//  printf("MoblePalNvmCompare >>>\r\n");
  
  if ((comparison == NULL) || (buf == NULL))
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <PalNvmCompare+0x1e>
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <PalNvmCompare+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073c2:	2303      	movs	r3, #3
 80073c4:	77fb      	strb	r3, [r7, #31]
 80073c6:	e055      	b.n	8007474 <PalNvmCompare+0xd0>
  }
  else if (address > (NVM_BASE + NVM_SIZE))
 80073c8:	4b2e      	ldr	r3, [pc, #184]	; (8007484 <PalNvmCompare+0xe0>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d902      	bls.n	80073dc <PalNvmCompare+0x38>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073d6:	2303      	movs	r3, #3
 80073d8:	77fb      	strb	r3, [r7, #31]
 80073da:	e04b      	b.n	8007474 <PalNvmCompare+0xd0>
  }
  else if (size == 0)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d102      	bne.n	80073e8 <PalNvmCompare+0x44>
  {
    result = MOBLE_RESULT_FALSE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	77fb      	strb	r3, [r7, #31]
 80073e6:	e045      	b.n	8007474 <PalNvmCompare+0xd0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	441a      	add	r2, r3
 80073ee:	4b25      	ldr	r3, [pc, #148]	; (8007484 <PalNvmCompare+0xe0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d902      	bls.n	8007400 <PalNvmCompare+0x5c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80073fa:	2303      	movs	r3, #3
 80073fc:	77fb      	strb	r3, [r7, #31]
 80073fe:	e039      	b.n	8007474 <PalNvmCompare+0xd0>
  }
  else if (address & 3)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 0303 	and.w	r3, r3, #3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <PalNvmCompare+0x6c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800740a:	2303      	movs	r3, #3
 800740c:	77fb      	strb	r3, [r7, #31]
 800740e:	e031      	b.n	8007474 <PalNvmCompare+0xd0>
  }
  else if (size & 3)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b00      	cmp	r3, #0
 8007418:	d002      	beq.n	8007420 <PalNvmCompare+0x7c>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800741a:	2303      	movs	r3, #3
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e029      	b.n	8007474 <PalNvmCompare+0xd0>
  }
  else
  {
    *comparison = MOBLE_NVM_COMPARE_EQUAL;
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	2200      	movs	r2, #0
 8007424:	701a      	strb	r2, [r3, #0]
    size >>= 2;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	089b      	lsrs	r3, r3, #2
 800742a:	607b      	str	r3, [r7, #4]

    MOBLEUINT32 * src = (MOBLEUINT32*)buf;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 * dst = (MOBLEUINT32*)(address);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	613b      	str	r3, [r7, #16]
    
    i = 0;
 8007434:	2300      	movs	r3, #0
 8007436:	61bb      	str	r3, [r7, #24]
    do
    {
      if ((src[i] != dst[i]) && (*comparison == MOBLE_NVM_COMPARE_EQUAL))
 8007438:	69bb      	ldr	r3, [r7, #24]
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	697a      	ldr	r2, [r7, #20]
 800743e:	4413      	add	r3, r2
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	6939      	ldr	r1, [r7, #16]
 8007448:	440b      	add	r3, r1
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d006      	beq.n	800745e <PalNvmCompare+0xba>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d102      	bne.n	800745e <PalNvmCompare+0xba>
      {
        *comparison = MOBLE_NVM_COMPARE_NOT_EQUAL;
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2201      	movs	r2, #1
 800745c:	701a      	strb	r2, [r3, #0]
      }
      i++;
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	3301      	adds	r3, #1
 8007462:	61bb      	str	r3, [r7, #24]
    } while((*comparison != MOBLE_NVM_COMPARE_NOT_EQUAL) && (i < size));
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d003      	beq.n	8007474 <PalNvmCompare+0xd0>
 800746c:	69ba      	ldr	r2, [r7, #24]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d3e1      	bcc.n	8007438 <PalNvmCompare+0x94>
  }
  
//  printf("MoblePalNvmCompare <<<\r\n");
  return result;
 8007474:	7ffb      	ldrb	r3, [r7, #31]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3724      	adds	r7, #36	; 0x24
 800747a:	46bd      	mov	sp, r7
 800747c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007480:	4770      	bx	lr
 8007482:	bf00      	nop
 8007484:	20004454 	.word	0x20004454

08007488 <PalNvmErase>:
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmErase(MOBLEUINT32 address,
                         MOBLEUINT8 nb_pages)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
 8007490:	460b      	mov	r3, r1
 8007492:	70fb      	strb	r3, [r7, #3]
  if(FD_EraseSectors(GetPage(address), nb_pages) != nb_pages)
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff ff1f 	bl	80072d8 <GetPage>
 800749a:	4602      	mov	r2, r0
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	4619      	mov	r1, r3
 80074a0:	4610      	mov	r0, r2
 80074a2:	f7fa faf3 	bl	8001a8c <FD_EraseSectors>
 80074a6:	4602      	mov	r2, r0
 80074a8:	78fb      	ldrb	r3, [r7, #3]
 80074aa:	429a      	cmp	r2, r3
 80074ac:	d001      	beq.n	80074b2 <PalNvmErase+0x2a>
  {
    return MOBLE_RESULT_FAIL;
 80074ae:	2302      	movs	r3, #2
 80074b0:	e000      	b.n	80074b4 <PalNvmErase+0x2c>
  }

  return MOBLE_RESULT_SUCCESS;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3708      	adds	r7, #8
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <PalNvmWrite>:
* @retval Result
*/
MOBLE_RESULT PalNvmWrite(MOBLEUINT32 address,
                          void const *buf, 
                          MOBLEUINT32 size)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	60f8      	str	r0, [r7, #12]
 80074c4:	60b9      	str	r1, [r7, #8]
 80074c6:	607a      	str	r2, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80074c8:	2300      	movs	r3, #0
 80074ca:	77fb      	strb	r3, [r7, #31]

  if (address > (NVM_BASE + NVM_SIZE))
 80074cc:	4b26      	ldr	r3, [pc, #152]	; (8007568 <PalNvmWrite+0xac>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d902      	bls.n	80074e0 <PalNvmWrite+0x24>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80074da:	2303      	movs	r3, #3
 80074dc:	77fb      	strb	r3, [r7, #31]
 80074de:	e03d      	b.n	800755c <PalNvmWrite+0xa0>
  }
  else if (size == 0)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d102      	bne.n	80074ec <PalNvmWrite+0x30>
  {
    result = MOBLE_RESULT_FALSE;
 80074e6:	2301      	movs	r3, #1
 80074e8:	77fb      	strb	r3, [r7, #31]
 80074ea:	e037      	b.n	800755c <PalNvmWrite+0xa0>
  }
  else if ((address + size) > (NVM_BASE + NVM_SIZE))
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	441a      	add	r2, r3
 80074f2:	4b1d      	ldr	r3, [pc, #116]	; (8007568 <PalNvmWrite+0xac>)
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d902      	bls.n	8007504 <PalNvmWrite+0x48>
  {
    result = MOBLE_RESULT_INVALIDARG;
 80074fe:	2303      	movs	r3, #3
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e02b      	b.n	800755c <PalNvmWrite+0xa0>
  }
  else if (address & 3)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f003 0303 	and.w	r3, r3, #3
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <PalNvmWrite+0x58>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800750e:	2303      	movs	r3, #3
 8007510:	77fb      	strb	r3, [r7, #31]
 8007512:	e023      	b.n	800755c <PalNvmWrite+0xa0>
  }
  else if (size & 3)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f003 0303 	and.w	r3, r3, #3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d002      	beq.n	8007524 <PalNvmWrite+0x68>
  {
    result = MOBLE_RESULT_INVALIDARG;
 800751e:	2303      	movs	r3, #3
 8007520:	77fb      	strb	r3, [r7, #31]
 8007522:	e01b      	b.n	800755c <PalNvmWrite+0xa0>
  }
  else
  {
    MOBLEUINT32 remain = 0;
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
    MOBLEUINT32 nb_dword = 0;
 8007528:	2300      	movs	r3, #0
 800752a:	61bb      	str	r3, [r7, #24]
  
    nb_dword = (size >> 3);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	08db      	lsrs	r3, r3, #3
 8007530:	61bb      	str	r3, [r7, #24]
    remain = size - ((nb_dword) << 3);
 8007532:	69bb      	ldr	r3, [r7, #24]
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	617b      	str	r3, [r7, #20]
    if(remain > 0)
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <PalNvmWrite+0x8c>
      nb_dword += 1;
 8007542:	69bb      	ldr	r3, [r7, #24]
 8007544:	3301      	adds	r3, #1
 8007546:	61bb      	str	r3, [r7, #24]
    
  if(FD_WriteData(address, (uint64_t*)buf, nb_dword) != 0)
 8007548:	69ba      	ldr	r2, [r7, #24]
 800754a:	68b9      	ldr	r1, [r7, #8]
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f7fa fae3 	bl	8001b18 <FD_WriteData>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d001      	beq.n	800755c <PalNvmWrite+0xa0>
    result = MOBLE_RESULT_FAIL;
 8007558:	2302      	movs	r3, #2
 800755a:	77fb      	strb	r3, [r7, #31]
  }
  
  return result;
 800755c:	7ffb      	ldrb	r3, [r7, #31]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	20004454 	.word	0x20004454

0800756c <PalNvmProcess>:
* @brief  NVM process
* @param  None
* @retval Result
*/
MOBLE_RESULT PalNvmProcess(void)
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
  /* do nothing */
  return MOBLE_RESULT_SUCCESS;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <LL_C2_EXTI_EnableEvent_32_63>:
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 8007584:	4b06      	ldr	r3, [pc, #24]	; (80075a0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 8007586:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800758a:	4905      	ldr	r1, [pc, #20]	; (80075a0 <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4313      	orrs	r3, r2
 8007590:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	58000800 	.word	0x58000800

080075a4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80075a4:	b480      	push	{r7}
 80075a6:	b083      	sub	sp, #12
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80075ac:	4b05      	ldr	r3, [pc, #20]	; (80075c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075ae:	6a1a      	ldr	r2, [r3, #32]
 80075b0:	4904      	ldr	r1, [pc, #16]	; (80075c4 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	4313      	orrs	r3, r2
 80075b6:	620b      	str	r3, [r1, #32]
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr
 80075c4:	58000800 	.word	0x58000800

080075c8 <LL_PWR_EnableBootC2>:
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80075cc:	4b05      	ldr	r3, [pc, #20]	; (80075e4 <LL_PWR_EnableBootC2+0x1c>)
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	4a04      	ldr	r2, [pc, #16]	; (80075e4 <LL_PWR_EnableBootC2+0x1c>)
 80075d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075d6:	60d3      	str	r3, [r2, #12]
}
 80075d8:	bf00      	nop
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr
 80075e2:	bf00      	nop
 80075e4:	58000400 	.word	0x58000400

080075e8 <LL_AHB3_GRP1_EnableClock>:
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 80075f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8007600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	4013      	ands	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800760c:	68fb      	ldr	r3, [r7, #12]
}
 800760e:	bf00      	nop
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 800761a:	b480      	push	{r7}
 800761c:	b085      	sub	sp, #20
 800761e:	af00      	add	r7, sp, #0
 8007620:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 8007622:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007626:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800762a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4313      	orrs	r3, r2
 8007632:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8007636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800763a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4013      	ands	r3, r2
 8007642:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007644:	68fb      	ldr	r3, [r7, #12]
}
 8007646:	bf00      	nop
 8007648:	3714      	adds	r7, #20
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <LL_C1_IPCC_EnableIT_TXF>:
{
 8007652:	b480      	push	{r7}
 8007654:	b083      	sub	sp, #12
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
}
 8007666:	bf00      	nop
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <LL_C1_IPCC_EnableIT_RXO>:
{
 8007672:	b480      	push	{r7}
 8007674:	b083      	sub	sp, #12
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f043 0201 	orr.w	r2, r3, #1
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
}
 8007686:	bf00      	nop
 8007688:	370c      	adds	r7, #12
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr

08007692 <LL_C1_IPCC_EnableTransmitChannel>:
{
 8007692:	b480      	push	{r7}
 8007694:	b083      	sub	sp, #12
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	43db      	mvns	r3, r3
 80076a6:	401a      	ands	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	605a      	str	r2, [r3, #4]
}
 80076ac:	bf00      	nop
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr

080076b8 <LL_C1_IPCC_DisableTransmitChannel>:
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	041b      	lsls	r3, r3, #16
 80076ca:	431a      	orrs	r2, r3
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	605a      	str	r2, [r3, #4]
}
 80076d0:	bf00      	nop
 80076d2:	370c      	adds	r7, #12
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <LL_C1_IPCC_EnableReceiveChannel>:
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	6078      	str	r0, [r7, #4]
 80076e4:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	685a      	ldr	r2, [r3, #4]
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	43db      	mvns	r3, r3
 80076ee:	401a      	ands	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <LL_C1_IPCC_ClearFlag_CHx>:
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	683a      	ldr	r2, [r7, #0]
 800770e:	609a      	str	r2, [r3, #8]
}
 8007710:	bf00      	nop
 8007712:	370c      	adds	r7, #12
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <LL_C1_IPCC_SetFlag_CHx>:
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
 8007724:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	041a      	lsls	r2, r3, #16
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	609a      	str	r2, [r3, #8]
}
 800772e:	bf00      	nop
 8007730:	370c      	adds	r7, #12
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr

0800773a <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 800773a:	b480      	push	{r7}
 800773c:	b083      	sub	sp, #12
 800773e:	af00      	add	r7, sp, #0
 8007740:	6078      	str	r0, [r7, #4]
 8007742:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68da      	ldr	r2, [r3, #12]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	4013      	ands	r3, r2
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	429a      	cmp	r2, r3
 8007750:	d101      	bne.n	8007756 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 8007752:	2301      	movs	r3, #1
 8007754:	e000      	b.n	8007758 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 8007756:	2300      	movs	r3, #0
}
 8007758:	4618      	mov	r0, r3
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	69da      	ldr	r2, [r3, #28]
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	4013      	ands	r3, r2
 8007776:	683a      	ldr	r2, [r7, #0]
 8007778:	429a      	cmp	r2, r3
 800777a:	d101      	bne.n	8007780 <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 800777c:	2301      	movs	r3, #1
 800777e:	e000      	b.n	8007782 <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	370c      	adds	r7, #12
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
	...

08007790 <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 8007790:	b580      	push	{r7, lr}
 8007792:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 8007794:	2102      	movs	r1, #2
 8007796:	4818      	ldr	r0, [pc, #96]	; (80077f8 <HW_IPCC_Rx_Handler+0x68>)
 8007798:	f7ff ffe4 	bl	8007764 <LL_C2_IPCC_IsActiveFlag_CHx>
 800779c:	4603      	mov	r3, r0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d008      	beq.n	80077b4 <HW_IPCC_Rx_Handler+0x24>
 80077a2:	4b15      	ldr	r3, [pc, #84]	; (80077f8 <HW_IPCC_Rx_Handler+0x68>)
 80077a4:	685b      	ldr	r3, [r3, #4]
 80077a6:	f003 0302 	and.w	r3, r3, #2
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80077ae:	f000 f8d5 	bl	800795c <HW_IPCC_SYS_EvtHandler>
 80077b2:	e01e      	b.n	80077f2 <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 80077b4:	2101      	movs	r1, #1
 80077b6:	4810      	ldr	r0, [pc, #64]	; (80077f8 <HW_IPCC_Rx_Handler+0x68>)
 80077b8:	f7ff ffd4 	bl	8007764 <LL_C2_IPCC_IsActiveFlag_CHx>
 80077bc:	4603      	mov	r3, r0
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d008      	beq.n	80077d4 <HW_IPCC_Rx_Handler+0x44>
 80077c2:	4b0d      	ldr	r3, [pc, #52]	; (80077f8 <HW_IPCC_Rx_Handler+0x68>)
 80077c4:	685b      	ldr	r3, [r3, #4]
 80077c6:	f003 0301 	and.w	r3, r3, #1
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d102      	bne.n	80077d4 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 80077ce:	f000 f889 	bl	80078e4 <HW_IPCC_BLE_EvtHandler>
 80077d2:	e00e      	b.n	80077f2 <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 80077d4:	2108      	movs	r1, #8
 80077d6:	4808      	ldr	r0, [pc, #32]	; (80077f8 <HW_IPCC_Rx_Handler+0x68>)
 80077d8:	f7ff ffc4 	bl	8007764 <LL_C2_IPCC_IsActiveFlag_CHx>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d008      	beq.n	80077f4 <HW_IPCC_Rx_Handler+0x64>
 80077e2:	4b05      	ldr	r3, [pc, #20]	; (80077f8 <HW_IPCC_Rx_Handler+0x68>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f003 0308 	and.w	r3, r3, #8
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d102      	bne.n	80077f4 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 80077ee:	f000 f901 	bl	80079f4 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 80077f2:	bf00      	nop
 80077f4:	bf00      	nop
}
 80077f6:	bd80      	pop	{r7, pc}
 80077f8:	58000c00 	.word	0x58000c00

080077fc <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 8007800:	2102      	movs	r1, #2
 8007802:	4818      	ldr	r0, [pc, #96]	; (8007864 <HW_IPCC_Tx_Handler+0x68>)
 8007804:	f7ff ff99 	bl	800773a <LL_C1_IPCC_IsActiveFlag_CHx>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d108      	bne.n	8007820 <HW_IPCC_Tx_Handler+0x24>
 800780e:	4b15      	ldr	r3, [pc, #84]	; (8007864 <HW_IPCC_Tx_Handler+0x68>)
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d102      	bne.n	8007820 <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 800781a:	f000 f893 	bl	8007944 <HW_IPCC_SYS_CmdEvtHandler>
 800781e:	e01e      	b.n	800785e <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 8007820:	2108      	movs	r1, #8
 8007822:	4810      	ldr	r0, [pc, #64]	; (8007864 <HW_IPCC_Tx_Handler+0x68>)
 8007824:	f7ff ff89 	bl	800773a <LL_C1_IPCC_IsActiveFlag_CHx>
 8007828:	4603      	mov	r3, r0
 800782a:	2b00      	cmp	r3, #0
 800782c:	d108      	bne.n	8007840 <HW_IPCC_Tx_Handler+0x44>
 800782e:	4b0d      	ldr	r3, [pc, #52]	; (8007864 <HW_IPCC_Tx_Handler+0x68>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d102      	bne.n	8007840 <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 800783a:	f000 f8bd 	bl	80079b8 <HW_IPCC_MM_FreeBufHandler>
 800783e:	e00e      	b.n	800785e <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 8007840:	2120      	movs	r1, #32
 8007842:	4808      	ldr	r0, [pc, #32]	; (8007864 <HW_IPCC_Tx_Handler+0x68>)
 8007844:	f7ff ff79 	bl	800773a <LL_C1_IPCC_IsActiveFlag_CHx>
 8007848:	4603      	mov	r3, r0
 800784a:	2b00      	cmp	r3, #0
 800784c:	d108      	bne.n	8007860 <HW_IPCC_Tx_Handler+0x64>
 800784e:	4b05      	ldr	r3, [pc, #20]	; (8007864 <HW_IPCC_Tx_Handler+0x68>)
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d102      	bne.n	8007860 <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 800785a:	f000 f84f 	bl	80078fc <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 800785e:	bf00      	nop
 8007860:	bf00      	nop
}
 8007862:	bd80      	pop	{r7, pc}
 8007864:	58000c00 	.word	0x58000c00

08007868 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 800786c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007870:	f7ff fed3 	bl	800761a <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 8007874:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007878:	f7ff fe94 	bl	80075a4 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 800787c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007880:	f7ff fe7c 	bl	800757c <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 8007884:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 8007886:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 8007888:	f7ff fe9e 	bl	80075c8 <LL_PWR_EnableBootC2>

  return;
 800788c:	bf00      	nop
}
 800788e:	bd80      	pop	{r7, pc}

08007890 <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 8007890:	b580      	push	{r7, lr}
 8007892:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 8007894:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8007898:	f7ff fea6 	bl	80075e8 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 800789c:	4806      	ldr	r0, [pc, #24]	; (80078b8 <HW_IPCC_Init+0x28>)
 800789e:	f7ff fee8 	bl	8007672 <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80078a2:	4805      	ldr	r0, [pc, #20]	; (80078b8 <HW_IPCC_Init+0x28>)
 80078a4:	f7ff fed5 	bl	8007652 <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80078a8:	202c      	movs	r0, #44	; 0x2c
 80078aa:	f000 fc60 	bl	800816e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80078ae:	202d      	movs	r0, #45	; 0x2d
 80078b0:	f000 fc5d 	bl	800816e <HAL_NVIC_EnableIRQ>

  return;
 80078b4:	bf00      	nop
}
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	58000c00 	.word	0x58000c00

080078bc <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80078c0:	2101      	movs	r1, #1
 80078c2:	4802      	ldr	r0, [pc, #8]	; (80078cc <HW_IPCC_BLE_Init+0x10>)
 80078c4:	f7ff ff0a 	bl	80076dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80078c8:	bf00      	nop
}
 80078ca:	bd80      	pop	{r7, pc}
 80078cc:	58000c00 	.word	0x58000c00

080078d0 <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 80078d4:	2101      	movs	r1, #1
 80078d6:	4802      	ldr	r0, [pc, #8]	; (80078e0 <HW_IPCC_BLE_SendCmd+0x10>)
 80078d8:	f7ff ff20 	bl	800771c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80078dc:	bf00      	nop
}
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	58000c00 	.word	0x58000c00

080078e4 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 80078e8:	f00e fd7e 	bl	80163e8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 80078ec:	2101      	movs	r1, #1
 80078ee:	4802      	ldr	r0, [pc, #8]	; (80078f8 <HW_IPCC_BLE_EvtHandler+0x14>)
 80078f0:	f7ff ff06 	bl	8007700 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 80078f4:	bf00      	nop
}
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	58000c00 	.word	0x58000c00

080078fc <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8007900:	2120      	movs	r1, #32
 8007902:	4803      	ldr	r0, [pc, #12]	; (8007910 <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8007904:	f7ff fed8 	bl	80076b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8007908:	f00e fd9e 	bl	8016448 <HW_IPCC_BLE_AclDataAckNot>

  return;
 800790c:	bf00      	nop
}
 800790e:	bd80      	pop	{r7, pc}
 8007910:	58000c00 	.word	0x58000c00

08007914 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8007914:	b580      	push	{r7, lr}
 8007916:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007918:	2102      	movs	r1, #2
 800791a:	4802      	ldr	r0, [pc, #8]	; (8007924 <HW_IPCC_SYS_Init+0x10>)
 800791c:	f7ff fede 	bl	80076dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8007920:	bf00      	nop
}
 8007922:	bd80      	pop	{r7, pc}
 8007924:	58000c00 	.word	0x58000c00

08007928 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8007928:	b580      	push	{r7, lr}
 800792a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 800792c:	2102      	movs	r1, #2
 800792e:	4804      	ldr	r0, [pc, #16]	; (8007940 <HW_IPCC_SYS_SendCmd+0x18>)
 8007930:	f7ff fef4 	bl	800771c <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007934:	2102      	movs	r1, #2
 8007936:	4802      	ldr	r0, [pc, #8]	; (8007940 <HW_IPCC_SYS_SendCmd+0x18>)
 8007938:	f7ff feab 	bl	8007692 <LL_C1_IPCC_EnableTransmitChannel>

  return;
 800793c:	bf00      	nop
}
 800793e:	bd80      	pop	{r7, pc}
 8007940:	58000c00 	.word	0x58000c00

08007944 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8007944:	b580      	push	{r7, lr}
 8007946:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8007948:	2102      	movs	r1, #2
 800794a:	4803      	ldr	r0, [pc, #12]	; (8007958 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 800794c:	f7ff feb4 	bl	80076b8 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8007950:	f00e fdca 	bl	80164e8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8007954:	bf00      	nop
}
 8007956:	bd80      	pop	{r7, pc}
 8007958:	58000c00 	.word	0x58000c00

0800795c <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8007960:	f00e fdd8 	bl	8016514 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8007964:	2102      	movs	r1, #2
 8007966:	4802      	ldr	r0, [pc, #8]	; (8007970 <HW_IPCC_SYS_EvtHandler+0x14>)
 8007968:	f7ff feca 	bl	8007700 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 800796c:	bf00      	nop
}
 800796e:	bd80      	pop	{r7, pc}
 8007970:	58000c00 	.word	0x58000c00

08007974 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b082      	sub	sp, #8
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 800797c:	2108      	movs	r1, #8
 800797e:	480c      	ldr	r0, [pc, #48]	; (80079b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007980:	f7ff fedb 	bl	800773a <LL_C1_IPCC_IsActiveFlag_CHx>
 8007984:	4603      	mov	r3, r0
 8007986:	2b00      	cmp	r3, #0
 8007988:	d007      	beq.n	800799a <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 800798a:	4a0a      	ldr	r2, [pc, #40]	; (80079b4 <HW_IPCC_MM_SendFreeBuf+0x40>)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8007990:	2108      	movs	r1, #8
 8007992:	4807      	ldr	r0, [pc, #28]	; (80079b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8007994:	f7ff fe7d 	bl	8007692 <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8007998:	e006      	b.n	80079a8 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 800799e:	2108      	movs	r1, #8
 80079a0:	4803      	ldr	r0, [pc, #12]	; (80079b0 <HW_IPCC_MM_SendFreeBuf+0x3c>)
 80079a2:	f7ff febb 	bl	800771c <LL_C1_IPCC_SetFlag_CHx>
  return;
 80079a6:	bf00      	nop
}
 80079a8:	3708      	adds	r7, #8
 80079aa:	46bd      	mov	sp, r7
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	bf00      	nop
 80079b0:	58000c00 	.word	0x58000c00
 80079b4:	20004530 	.word	0x20004530

080079b8 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079bc:	2108      	movs	r1, #8
 80079be:	4806      	ldr	r0, [pc, #24]	; (80079d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80079c0:	f7ff fe7a 	bl	80076b8 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 80079c4:	4b05      	ldr	r3, [pc, #20]	; (80079dc <HW_IPCC_MM_FreeBufHandler+0x24>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 80079ca:	2108      	movs	r1, #8
 80079cc:	4802      	ldr	r0, [pc, #8]	; (80079d8 <HW_IPCC_MM_FreeBufHandler+0x20>)
 80079ce:	f7ff fea5 	bl	800771c <LL_C1_IPCC_SetFlag_CHx>

  return;
 80079d2:	bf00      	nop
}
 80079d4:	bd80      	pop	{r7, pc}
 80079d6:	bf00      	nop
 80079d8:	58000c00 	.word	0x58000c00
 80079dc:	20004530 	.word	0x20004530

080079e0 <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 80079e4:	2108      	movs	r1, #8
 80079e6:	4802      	ldr	r0, [pc, #8]	; (80079f0 <HW_IPCC_TRACES_Init+0x10>)
 80079e8:	f7ff fe78 	bl	80076dc <LL_C1_IPCC_EnableReceiveChannel>

  return;
 80079ec:	bf00      	nop
}
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	58000c00 	.word	0x58000c00

080079f4 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 80079f8:	f00e fe34 	bl	8016664 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 80079fc:	2108      	movs	r1, #8
 80079fe:	4802      	ldr	r0, [pc, #8]	; (8007a08 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8007a00:	f7ff fe7e 	bl	8007700 <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8007a04:	bf00      	nop
}
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	58000c00 	.word	0x58000c00

08007a0c <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8007a0c:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007a0e:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007a10:	3304      	adds	r3, #4

08007a12 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007a12:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007a14:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8007a16:	d3f9      	bcc.n	8007a0c <CopyDataInit>
  bx lr
 8007a18:	4770      	bx	lr

08007a1a <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8007a1a:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8007a1c:	3004      	adds	r0, #4

08007a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8007a1e:	4288      	cmp	r0, r1
  bcc FillZerobss
 8007a20:	d3fb      	bcc.n	8007a1a <FillZerobss>
  bx lr
 8007a22:	4770      	bx	lr

08007a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8007a24:	480c      	ldr	r0, [pc, #48]	; (8007a58 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8007a26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8007a28:	f000 f938 	bl	8007c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8007a2c:	480b      	ldr	r0, [pc, #44]	; (8007a5c <LoopForever+0x8>)
 8007a2e:	490c      	ldr	r1, [pc, #48]	; (8007a60 <LoopForever+0xc>)
 8007a30:	4a0c      	ldr	r2, [pc, #48]	; (8007a64 <LoopForever+0x10>)
 8007a32:	2300      	movs	r3, #0
 8007a34:	f7ff ffed 	bl	8007a12 <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8007a38:	480b      	ldr	r0, [pc, #44]	; (8007a68 <LoopForever+0x14>)
 8007a3a:	490c      	ldr	r1, [pc, #48]	; (8007a6c <LoopForever+0x18>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	f7ff ffee 	bl	8007a1e <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8007a42:	480b      	ldr	r0, [pc, #44]	; (8007a70 <LoopForever+0x1c>)
 8007a44:	490b      	ldr	r1, [pc, #44]	; (8007a74 <LoopForever+0x20>)
 8007a46:	2300      	movs	r3, #0
 8007a48:	f7ff ffe9 	bl	8007a1e <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8007a4c:	f021 ff9c 	bl	8029988 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8007a50:	f7fb f8ea 	bl	8002c28 <main>

08007a54 <LoopForever>:

LoopForever:
  b LoopForever
 8007a54:	e7fe      	b.n	8007a54 <LoopForever>
 8007a56:	0000      	.short	0x0000
  ldr   r0, =_estack
 8007a58:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8007a5c:	20000008 	.word	0x20000008
 8007a60:	200002a8 	.word	0x200002a8
 8007a64:	08034210 	.word	0x08034210
  INIT_BSS _sbss, _ebss
 8007a68:	20000308 	.word	0x20000308
 8007a6c:	20008104 	.word	0x20008104
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8007a70:	200301e4 	.word	0x200301e4
 8007a74:	20030a67 	.word	0x20030a67

08007a78 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007a78:	e7fe      	b.n	8007a78 <ADC1_IRQHandler>

08007a7a <LL_AHB2_GRP1_EnableClock>:
{
 8007a7a:	b480      	push	{r7}
 8007a7c:	b085      	sub	sp, #20
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007a82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007a92:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b088      	sub	sp, #32
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8007ab6:	f107 030c 	add.w	r3, r7, #12
 8007aba:	2200      	movs	r2, #0
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	605a      	str	r2, [r3, #4]
 8007ac0:	609a      	str	r2, [r3, #8]
 8007ac2:	60da      	str	r2, [r3, #12]
 8007ac4:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8007ac6:	2002      	movs	r0, #2
 8007ac8:	f7ff ffd7 	bl	8007a7a <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	4a12      	ldr	r2, [pc, #72]	; (8007b18 <BSP_LED_Init+0x6c>)
 8007ad0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ad4:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8007ada:	2300      	movs	r3, #0
 8007adc:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007ade:	2302      	movs	r3, #2
 8007ae0:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8007ae2:	79fb      	ldrb	r3, [r7, #7]
 8007ae4:	4a0d      	ldr	r2, [pc, #52]	; (8007b1c <BSP_LED_Init+0x70>)
 8007ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aea:	f107 020c 	add.w	r2, r7, #12
 8007aee:	4611      	mov	r1, r2
 8007af0:	4618      	mov	r0, r3
 8007af2:	f001 f8ef 	bl	8008cd4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8007af6:	79fb      	ldrb	r3, [r7, #7]
 8007af8:	4a08      	ldr	r2, [pc, #32]	; (8007b1c <BSP_LED_Init+0x70>)
 8007afa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007afe:	79fb      	ldrb	r3, [r7, #7]
 8007b00:	4a05      	ldr	r2, [pc, #20]	; (8007b18 <BSP_LED_Init+0x6c>)
 8007b02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b06:	2200      	movs	r2, #0
 8007b08:	4619      	mov	r1, r3
 8007b0a:	f001 fa6b 	bl	8008fe4 <HAL_GPIO_WritePin>
}
 8007b0e:	bf00      	nop
 8007b10:	3720      	adds	r7, #32
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	08032d7c 	.word	0x08032d7c
 8007b1c:	20000080 	.word	0x20000080

08007b20 <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	4603      	mov	r3, r0
 8007b28:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8007b2a:	79fb      	ldrb	r3, [r7, #7]
 8007b2c:	4a07      	ldr	r2, [pc, #28]	; (8007b4c <BSP_LED_On+0x2c>)
 8007b2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b32:	79fb      	ldrb	r3, [r7, #7]
 8007b34:	4a06      	ldr	r2, [pc, #24]	; (8007b50 <BSP_LED_On+0x30>)
 8007b36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b3a:	2201      	movs	r2, #1
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f001 fa51 	bl	8008fe4 <HAL_GPIO_WritePin>
}
 8007b42:	bf00      	nop
 8007b44:	3708      	adds	r7, #8
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000080 	.word	0x20000080
 8007b50:	08032d7c 	.word	0x08032d7c

08007b54 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8007b5e:	79fb      	ldrb	r3, [r7, #7]
 8007b60:	4a07      	ldr	r2, [pc, #28]	; (8007b80 <BSP_LED_Off+0x2c>)
 8007b62:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007b66:	79fb      	ldrb	r3, [r7, #7]
 8007b68:	4a06      	ldr	r2, [pc, #24]	; (8007b84 <BSP_LED_Off+0x30>)
 8007b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	4619      	mov	r1, r3
 8007b72:	f001 fa37 	bl	8008fe4 <HAL_GPIO_WritePin>
}
 8007b76:	bf00      	nop
 8007b78:	3708      	adds	r7, #8
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	20000080 	.word	0x20000080
 8007b84:	08032d7c 	.word	0x08032d7c

08007b88 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	4603      	mov	r3, r0
 8007b90:	460a      	mov	r2, r1
 8007b92:	71fb      	strb	r3, [r7, #7]
 8007b94:	4613      	mov	r3, r2
 8007b96:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8007b98:	f107 030c 	add.w	r3, r7, #12
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	605a      	str	r2, [r3, #4]
 8007ba2:	609a      	str	r2, [r3, #8]
 8007ba4:	60da      	str	r2, [r3, #12]
 8007ba6:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8007ba8:	79fb      	ldrb	r3, [r7, #7]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <BSP_PB_Init+0x2e>
 8007bae:	2004      	movs	r0, #4
 8007bb0:	f7ff ff63 	bl	8007a7a <LL_AHB2_GRP1_EnableClock>
 8007bb4:	e00c      	b.n	8007bd0 <BSP_PB_Init+0x48>
 8007bb6:	79fb      	ldrb	r3, [r7, #7]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d103      	bne.n	8007bc4 <BSP_PB_Init+0x3c>
 8007bbc:	2008      	movs	r0, #8
 8007bbe:	f7ff ff5c 	bl	8007a7a <LL_AHB2_GRP1_EnableClock>
 8007bc2:	e005      	b.n	8007bd0 <BSP_PB_Init+0x48>
 8007bc4:	79fb      	ldrb	r3, [r7, #7]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d102      	bne.n	8007bd0 <BSP_PB_Init+0x48>
 8007bca:	2008      	movs	r0, #8
 8007bcc:	f7ff ff55 	bl	8007a7a <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8007bd0:	79bb      	ldrb	r3, [r7, #6]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d117      	bne.n	8007c06 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007bd6:	79fb      	ldrb	r3, [r7, #7]
 8007bd8:	4a20      	ldr	r2, [pc, #128]	; (8007c5c <BSP_PB_Init+0xd4>)
 8007bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007bde:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8007be0:	2300      	movs	r3, #0
 8007be2:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007be8:	2302      	movs	r3, #2
 8007bea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007bec:	79fb      	ldrb	r3, [r7, #7]
 8007bee:	4a1c      	ldr	r2, [pc, #112]	; (8007c60 <BSP_PB_Init+0xd8>)
 8007bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bf4:	f107 020c 	add.w	r2, r7, #12
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f001 f86a 	bl	8008cd4 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8007c00:	2001      	movs	r0, #1
 8007c02:	f7f9 fe78 	bl	80018f6 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8007c06:	79bb      	ldrb	r3, [r7, #6]
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d123      	bne.n	8007c54 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8007c0c:	79fb      	ldrb	r3, [r7, #7]
 8007c0e:	4a13      	ldr	r2, [pc, #76]	; (8007c5c <BSP_PB_Init+0xd4>)
 8007c10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007c14:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8007c16:	2301      	movs	r3, #1
 8007c18:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8007c1a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007c1e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	4a0f      	ldr	r2, [pc, #60]	; (8007c60 <BSP_PB_Init+0xd8>)
 8007c24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c28:	f107 020c 	add.w	r2, r7, #12
 8007c2c:	4611      	mov	r1, r2
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f001 f850 	bl	8008cd4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8007c34:	79fb      	ldrb	r3, [r7, #7]
 8007c36:	4a0b      	ldr	r2, [pc, #44]	; (8007c64 <BSP_PB_Init+0xdc>)
 8007c38:	5cd3      	ldrb	r3, [r2, r3]
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	210f      	movs	r1, #15
 8007c40:	4618      	mov	r0, r3
 8007c42:	f000 fa7a 	bl	800813a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	4a06      	ldr	r2, [pc, #24]	; (8007c64 <BSP_PB_Init+0xdc>)
 8007c4a:	5cd3      	ldrb	r3, [r2, r3]
 8007c4c:	b25b      	sxtb	r3, r3
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fa8d 	bl	800816e <HAL_NVIC_EnableIRQ>
  }
}
 8007c54:	bf00      	nop
 8007c56:	3720      	adds	r7, #32
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	08032d84 	.word	0x08032d84
 8007c60:	2000008c 	.word	0x2000008c
 8007c64:	08032d8c 	.word	0x08032d8c

08007c68 <BSP_PB_GetState>:
  *     @arg BUTTON_SW2
  *     @arg BUTTON_SW3
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8007c72:	79fb      	ldrb	r3, [r7, #7]
 8007c74:	4a07      	ldr	r2, [pc, #28]	; (8007c94 <BSP_PB_GetState+0x2c>)
 8007c76:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	4906      	ldr	r1, [pc, #24]	; (8007c98 <BSP_PB_GetState+0x30>)
 8007c7e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8007c82:	4619      	mov	r1, r3
 8007c84:	4610      	mov	r0, r2
 8007c86:	f001 f995 	bl	8008fb4 <HAL_GPIO_ReadPin>
 8007c8a:	4603      	mov	r3, r0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}
 8007c94:	2000008c 	.word	0x2000008c
 8007c98:	08032d84 	.word	0x08032d84

08007c9c <SystemInit>:
 * @brief  Setup the microcontroller system.
 * @param  None
 * @retval None
 */
void SystemInit(void)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8007ca0:	4b26      	ldr	r3, [pc, #152]	; (8007d3c <SystemInit+0xa0>)
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	609a      	str	r2, [r3, #8]
#endif

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8007ca6:	4b25      	ldr	r3, [pc, #148]	; (8007d3c <SystemInit+0xa0>)
 8007ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cac:	4a23      	ldr	r2, [pc, #140]	; (8007d3c <SystemInit+0xa0>)
 8007cae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cb2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007cb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cc0:	f043 0301 	orr.w	r3, r3, #1
 8007cc4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 8007cc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cca:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8007cce:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 8007cd0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cd4:	681a      	ldr	r2, [r3, #0]
 8007cd6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007cda:	4b19      	ldr	r3, [pc, #100]	; (8007d40 <SystemInit+0xa4>)
 8007cdc:	4013      	ands	r3, r2
 8007cde:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 8007ce0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cec:	f023 0305 	bic.w	r3, r3, #5
 8007cf0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8007cf4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007cfc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d00:	f023 0301 	bic.w	r3, r3, #1
 8007d04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 8007d08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d0c:	4a0d      	ldr	r2, [pc, #52]	; (8007d44 <SystemInit+0xa8>)
 8007d0e:	60da      	str	r2, [r3, #12]

#if defined(STM32WB55xx) || defined(STM32WB5Mxx)
  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8007d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d14:	4a0b      	ldr	r2, [pc, #44]	; (8007d44 <SystemInit+0xa8>)
 8007d16:	611a      	str	r2, [r3, #16]
#endif

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007d18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8007d28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	619a      	str	r2, [r3, #24]
}
 8007d30:	bf00      	nop
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop
 8007d3c:	e000ed00 	.word	0xe000ed00
 8007d40:	faf6fefb 	.word	0xfaf6fefb
 8007d44:	22041000 	.word	0x22041000

08007d48 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8007d48:	b480      	push	{r7}
 8007d4a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8007d4c:	4b05      	ldr	r3, [pc, #20]	; (8007d64 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	4a04      	ldr	r2, [pc, #16]	; (8007d64 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8007d52:	f043 0301 	orr.w	r3, r3, #1
 8007d56:	6053      	str	r3, [r2, #4]
}
 8007d58:	bf00      	nop
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	e0042000 	.word	0xe0042000

08007d68 <LL_DBGMCU_EnableDBGStopMode>:
{
 8007d68:	b480      	push	{r7}
 8007d6a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8007d6c:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	4a04      	ldr	r2, [pc, #16]	; (8007d84 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8007d72:	f043 0302 	orr.w	r3, r3, #2
 8007d76:	6053      	str	r3, [r2, #4]
}
 8007d78:	bf00      	nop
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d80:	4770      	bx	lr
 8007d82:	bf00      	nop
 8007d84:	e0042000 	.word	0xe0042000

08007d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b082      	sub	sp, #8
 8007d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d92:	4b0c      	ldr	r3, [pc, #48]	; (8007dc4 <HAL_Init+0x3c>)
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a0b      	ldr	r2, [pc, #44]	; (8007dc4 <HAL_Init+0x3c>)
 8007d98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d9c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d9e:	2003      	movs	r0, #3
 8007da0:	f000 f9c0 	bl	8008124 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007da4:	2000      	movs	r0, #0
 8007da6:	f000 f80f 	bl	8007dc8 <HAL_InitTick>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	71fb      	strb	r3, [r7, #7]
 8007db4:	e001      	b.n	8007dba <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007db6:	f7fb f948 	bl	800304a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007dba:	79fb      	ldrb	r3, [r7, #7]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3708      	adds	r7, #8
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	bd80      	pop	{r7, pc}
 8007dc4:	58004000 	.word	0x58004000

08007dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 8007dd4:	4b17      	ldr	r3, [pc, #92]	; (8007e34 <HAL_InitTick+0x6c>)
 8007dd6:	781b      	ldrb	r3, [r3, #0]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d024      	beq.n	8007e26 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8007ddc:	f002 fa90 	bl	800a300 <HAL_RCC_GetHCLKFreq>
 8007de0:	4602      	mov	r2, r0
 8007de2:	4b14      	ldr	r3, [pc, #80]	; (8007e34 <HAL_InitTick+0x6c>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	4619      	mov	r1, r3
 8007de8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dec:	fbb3 f3f1 	udiv	r3, r3, r1
 8007df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df4:	4618      	mov	r0, r3
 8007df6:	f000 f9d6 	bl	80081a6 <HAL_SYSTICK_Config>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d10f      	bne.n	8007e20 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2b0f      	cmp	r3, #15
 8007e04:	d809      	bhi.n	8007e1a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007e06:	2200      	movs	r2, #0
 8007e08:	6879      	ldr	r1, [r7, #4]
 8007e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0e:	f000 f994 	bl	800813a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007e12:	4a09      	ldr	r2, [pc, #36]	; (8007e38 <HAL_InitTick+0x70>)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6013      	str	r3, [r2, #0]
 8007e18:	e007      	b.n	8007e2a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	73fb      	strb	r3, [r7, #15]
 8007e1e:	e004      	b.n	8007e2a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	73fb      	strb	r3, [r7, #15]
 8007e24:	e001      	b.n	8007e2a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007e26:	2301      	movs	r3, #1
 8007e28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}
 8007e34:	200000a0 	.word	0x200000a0
 8007e38:	2000009c 	.word	0x2000009c

08007e3c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007e40:	4b06      	ldr	r3, [pc, #24]	; (8007e5c <HAL_IncTick+0x20>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	4b06      	ldr	r3, [pc, #24]	; (8007e60 <HAL_IncTick+0x24>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	4413      	add	r3, r2
 8007e4c:	4a04      	ldr	r2, [pc, #16]	; (8007e60 <HAL_IncTick+0x24>)
 8007e4e:	6013      	str	r3, [r2, #0]
}
 8007e50:	bf00      	nop
 8007e52:	46bd      	mov	sp, r7
 8007e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e58:	4770      	bx	lr
 8007e5a:	bf00      	nop
 8007e5c:	200000a0 	.word	0x200000a0
 8007e60:	20004534 	.word	0x20004534

08007e64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e64:	b480      	push	{r7}
 8007e66:	af00      	add	r7, sp, #0
  return uwTick;
 8007e68:	4b03      	ldr	r3, [pc, #12]	; (8007e78 <HAL_GetTick+0x14>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop
 8007e78:	20004534 	.word	0x20004534

08007e7c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8007e80:	4b03      	ldr	r3, [pc, #12]	; (8007e90 <HAL_GetTickPrio+0x14>)
 8007e82:	681b      	ldr	r3, [r3, #0]
}
 8007e84:	4618      	mov	r0, r3
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	2000009c 	.word	0x2000009c

08007e94 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8007e94:	b480      	push	{r7}
 8007e96:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8007e98:	4b03      	ldr	r3, [pc, #12]	; (8007ea8 <HAL_GetTickFreq+0x14>)
 8007e9a:	781b      	ldrb	r3, [r3, #0]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	200000a0 	.word	0x200000a0

08007eac <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8007eb0:	f7ff ff4a 	bl	8007d48 <LL_DBGMCU_EnableDBGSleepMode>
}
 8007eb4:	bf00      	nop
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8007ebc:	f7ff ff54 	bl	8007d68 <LL_DBGMCU_EnableDBGStopMode>
}
 8007ec0:	bf00      	nop
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <__NVIC_SetPriorityGrouping>:
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b085      	sub	sp, #20
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f003 0307 	and.w	r3, r3, #7
 8007ed2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007ed4:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <__NVIC_SetPriorityGrouping+0x44>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ee0:	4013      	ands	r3, r2
 8007ee2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007eec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ef4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007ef6:	4a04      	ldr	r2, [pc, #16]	; (8007f08 <__NVIC_SetPriorityGrouping+0x44>)
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	60d3      	str	r3, [r2, #12]
}
 8007efc:	bf00      	nop
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	e000ed00 	.word	0xe000ed00

08007f0c <__NVIC_GetPriorityGrouping>:
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007f10:	4b04      	ldr	r3, [pc, #16]	; (8007f24 <__NVIC_GetPriorityGrouping+0x18>)
 8007f12:	68db      	ldr	r3, [r3, #12]
 8007f14:	0a1b      	lsrs	r3, r3, #8
 8007f16:	f003 0307 	and.w	r3, r3, #7
}
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	e000ed00 	.word	0xe000ed00

08007f28 <__NVIC_EnableIRQ>:
{
 8007f28:	b480      	push	{r7}
 8007f2a:	b083      	sub	sp, #12
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	4603      	mov	r3, r0
 8007f30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	db0b      	blt.n	8007f52 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f3a:	79fb      	ldrb	r3, [r7, #7]
 8007f3c:	f003 021f 	and.w	r2, r3, #31
 8007f40:	4907      	ldr	r1, [pc, #28]	; (8007f60 <__NVIC_EnableIRQ+0x38>)
 8007f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f46:	095b      	lsrs	r3, r3, #5
 8007f48:	2001      	movs	r0, #1
 8007f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f52:	bf00      	nop
 8007f54:	370c      	adds	r7, #12
 8007f56:	46bd      	mov	sp, r7
 8007f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	e000e100 	.word	0xe000e100

08007f64 <__NVIC_DisableIRQ>:
{
 8007f64:	b480      	push	{r7}
 8007f66:	b083      	sub	sp, #12
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	db12      	blt.n	8007f9c <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f76:	79fb      	ldrb	r3, [r7, #7]
 8007f78:	f003 021f 	and.w	r2, r3, #31
 8007f7c:	490a      	ldr	r1, [pc, #40]	; (8007fa8 <__NVIC_DisableIRQ+0x44>)
 8007f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	2001      	movs	r0, #1
 8007f86:	fa00 f202 	lsl.w	r2, r0, r2
 8007f8a:	3320      	adds	r3, #32
 8007f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007f90:	f3bf 8f4f 	dsb	sy
}
 8007f94:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007f96:	f3bf 8f6f 	isb	sy
}
 8007f9a:	bf00      	nop
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	e000e100 	.word	0xe000e100

08007fac <__NVIC_SetPendingIRQ>:
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	db0c      	blt.n	8007fd8 <__NVIC_SetPendingIRQ+0x2c>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007fbe:	79fb      	ldrb	r3, [r7, #7]
 8007fc0:	f003 021f 	and.w	r2, r3, #31
 8007fc4:	4907      	ldr	r1, [pc, #28]	; (8007fe4 <__NVIC_SetPendingIRQ+0x38>)
 8007fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fca:	095b      	lsrs	r3, r3, #5
 8007fcc:	2001      	movs	r0, #1
 8007fce:	fa00 f202 	lsl.w	r2, r0, r2
 8007fd2:	3340      	adds	r3, #64	; 0x40
 8007fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007fd8:	bf00      	nop
 8007fda:	370c      	adds	r7, #12
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe2:	4770      	bx	lr
 8007fe4:	e000e100 	.word	0xe000e100

08007fe8 <__NVIC_ClearPendingIRQ>:
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	4603      	mov	r3, r0
 8007ff0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	db0c      	blt.n	8008014 <__NVIC_ClearPendingIRQ+0x2c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ffa:	79fb      	ldrb	r3, [r7, #7]
 8007ffc:	f003 021f 	and.w	r2, r3, #31
 8008000:	4907      	ldr	r1, [pc, #28]	; (8008020 <__NVIC_ClearPendingIRQ+0x38>)
 8008002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008006:	095b      	lsrs	r3, r3, #5
 8008008:	2001      	movs	r0, #1
 800800a:	fa00 f202 	lsl.w	r2, r0, r2
 800800e:	3360      	adds	r3, #96	; 0x60
 8008010:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8008014:	bf00      	nop
 8008016:	370c      	adds	r7, #12
 8008018:	46bd      	mov	sp, r7
 800801a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801e:	4770      	bx	lr
 8008020:	e000e100 	.word	0xe000e100

08008024 <__NVIC_SetPriority>:
{
 8008024:	b480      	push	{r7}
 8008026:	b083      	sub	sp, #12
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	6039      	str	r1, [r7, #0]
 800802e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008034:	2b00      	cmp	r3, #0
 8008036:	db0a      	blt.n	800804e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	b2da      	uxtb	r2, r3
 800803c:	490c      	ldr	r1, [pc, #48]	; (8008070 <__NVIC_SetPriority+0x4c>)
 800803e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008042:	0112      	lsls	r2, r2, #4
 8008044:	b2d2      	uxtb	r2, r2
 8008046:	440b      	add	r3, r1
 8008048:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800804c:	e00a      	b.n	8008064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	b2da      	uxtb	r2, r3
 8008052:	4908      	ldr	r1, [pc, #32]	; (8008074 <__NVIC_SetPriority+0x50>)
 8008054:	79fb      	ldrb	r3, [r7, #7]
 8008056:	f003 030f 	and.w	r3, r3, #15
 800805a:	3b04      	subs	r3, #4
 800805c:	0112      	lsls	r2, r2, #4
 800805e:	b2d2      	uxtb	r2, r2
 8008060:	440b      	add	r3, r1
 8008062:	761a      	strb	r2, [r3, #24]
}
 8008064:	bf00      	nop
 8008066:	370c      	adds	r7, #12
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	e000e100 	.word	0xe000e100
 8008074:	e000ed00 	.word	0xe000ed00

08008078 <NVIC_EncodePriority>:
{
 8008078:	b480      	push	{r7}
 800807a:	b089      	sub	sp, #36	; 0x24
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	60b9      	str	r1, [r7, #8]
 8008082:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f1c3 0307 	rsb	r3, r3, #7
 8008092:	2b04      	cmp	r3, #4
 8008094:	bf28      	it	cs
 8008096:	2304      	movcs	r3, #4
 8008098:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	3304      	adds	r3, #4
 800809e:	2b06      	cmp	r3, #6
 80080a0:	d902      	bls.n	80080a8 <NVIC_EncodePriority+0x30>
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	3b03      	subs	r3, #3
 80080a6:	e000      	b.n	80080aa <NVIC_EncodePriority+0x32>
 80080a8:	2300      	movs	r3, #0
 80080aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080ac:	f04f 32ff 	mov.w	r2, #4294967295
 80080b0:	69bb      	ldr	r3, [r7, #24]
 80080b2:	fa02 f303 	lsl.w	r3, r2, r3
 80080b6:	43da      	mvns	r2, r3
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	401a      	ands	r2, r3
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080c0:	f04f 31ff 	mov.w	r1, #4294967295
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	fa01 f303 	lsl.w	r3, r1, r3
 80080ca:	43d9      	mvns	r1, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080d0:	4313      	orrs	r3, r2
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3724      	adds	r7, #36	; 0x24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080dc:	4770      	bx	lr
	...

080080e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b082      	sub	sp, #8
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	3b01      	subs	r3, #1
 80080ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80080f0:	d301      	bcc.n	80080f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80080f2:	2301      	movs	r3, #1
 80080f4:	e00f      	b.n	8008116 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80080f6:	4a0a      	ldr	r2, [pc, #40]	; (8008120 <SysTick_Config+0x40>)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	3b01      	subs	r3, #1
 80080fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80080fe:	210f      	movs	r1, #15
 8008100:	f04f 30ff 	mov.w	r0, #4294967295
 8008104:	f7ff ff8e 	bl	8008024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008108:	4b05      	ldr	r3, [pc, #20]	; (8008120 <SysTick_Config+0x40>)
 800810a:	2200      	movs	r2, #0
 800810c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800810e:	4b04      	ldr	r3, [pc, #16]	; (8008120 <SysTick_Config+0x40>)
 8008110:	2207      	movs	r2, #7
 8008112:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
 800811e:	bf00      	nop
 8008120:	e000e010 	.word	0xe000e010

08008124 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b082      	sub	sp, #8
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f7ff fec9 	bl	8007ec4 <__NVIC_SetPriorityGrouping>
}
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}

0800813a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800813a:	b580      	push	{r7, lr}
 800813c:	b086      	sub	sp, #24
 800813e:	af00      	add	r7, sp, #0
 8008140:	4603      	mov	r3, r0
 8008142:	60b9      	str	r1, [r7, #8]
 8008144:	607a      	str	r2, [r7, #4]
 8008146:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008148:	f7ff fee0 	bl	8007f0c <__NVIC_GetPriorityGrouping>
 800814c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	68b9      	ldr	r1, [r7, #8]
 8008152:	6978      	ldr	r0, [r7, #20]
 8008154:	f7ff ff90 	bl	8008078 <NVIC_EncodePriority>
 8008158:	4602      	mov	r2, r0
 800815a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800815e:	4611      	mov	r1, r2
 8008160:	4618      	mov	r0, r3
 8008162:	f7ff ff5f 	bl	8008024 <__NVIC_SetPriority>
}
 8008166:	bf00      	nop
 8008168:	3718      	adds	r7, #24
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	4603      	mov	r3, r0
 8008176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff fed3 	bl	8007f28 <__NVIC_EnableIRQ>
}
 8008182:	bf00      	nop
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}

0800818a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b082      	sub	sp, #8
 800818e:	af00      	add	r7, sp, #0
 8008190:	4603      	mov	r3, r0
 8008192:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8008194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008198:	4618      	mov	r0, r3
 800819a:	f7ff fee3 	bl	8007f64 <__NVIC_DisableIRQ>
}
 800819e:	bf00      	nop
 80081a0:	3708      	adds	r7, #8
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b082      	sub	sp, #8
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f7ff ff96 	bl	80080e0 <SysTick_Config>
 80081b4:	4603      	mov	r3, r0
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	4603      	mov	r3, r0
 80081c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80081c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f7ff feed 	bl	8007fac <__NVIC_SetPendingIRQ>
}
 80081d2:	bf00      	nop
 80081d4:	3708      	adds	r7, #8
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}

080081da <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 80081da:	b580      	push	{r7, lr}
 80081dc:	b082      	sub	sp, #8
 80081de:	af00      	add	r7, sp, #0
 80081e0:	4603      	mov	r3, r0
 80081e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 80081e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7ff fefd 	bl	8007fe8 <__NVIC_ClearPendingIRQ>
}
 80081ee:	bf00      	nop
 80081f0:	3708      	adds	r7, #8
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}
	...

080081f8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d101      	bne.n	800820a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	e08e      	b.n	8008328 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	461a      	mov	r2, r3
 8008210:	4b47      	ldr	r3, [pc, #284]	; (8008330 <HAL_DMA_Init+0x138>)
 8008212:	429a      	cmp	r2, r3
 8008214:	d80f      	bhi.n	8008236 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	4b45      	ldr	r3, [pc, #276]	; (8008334 <HAL_DMA_Init+0x13c>)
 800821e:	4413      	add	r3, r2
 8008220:	4a45      	ldr	r2, [pc, #276]	; (8008338 <HAL_DMA_Init+0x140>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	091b      	lsrs	r3, r3, #4
 8008228:	009a      	lsls	r2, r3, #2
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a42      	ldr	r2, [pc, #264]	; (800833c <HAL_DMA_Init+0x144>)
 8008232:	641a      	str	r2, [r3, #64]	; 0x40
 8008234:	e00e      	b.n	8008254 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	461a      	mov	r2, r3
 800823c:	4b40      	ldr	r3, [pc, #256]	; (8008340 <HAL_DMA_Init+0x148>)
 800823e:	4413      	add	r3, r2
 8008240:	4a3d      	ldr	r2, [pc, #244]	; (8008338 <HAL_DMA_Init+0x140>)
 8008242:	fba2 2303 	umull	r2, r3, r2, r3
 8008246:	091b      	lsrs	r3, r3, #4
 8008248:	009a      	lsls	r2, r3, #2
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a3c      	ldr	r2, [pc, #240]	; (8008344 <HAL_DMA_Init+0x14c>)
 8008252:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800826a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800826e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008278:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	691b      	ldr	r3, [r3, #16]
 800827e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008284:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008290:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68fa      	ldr	r2, [r7, #12]
 80082a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 fa74 	bl	8008794 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	689b      	ldr	r3, [r3, #8]
 80082b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082b4:	d102      	bne.n	80082bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685a      	ldr	r2, [r3, #4]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80082c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082ce:	687a      	ldr	r2, [r7, #4]
 80082d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80082d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	685b      	ldr	r3, [r3, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d010      	beq.n	80082fe <HAL_DMA_Init+0x106>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	2b04      	cmp	r3, #4
 80082e2:	d80c      	bhi.n	80082fe <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa93 	bl	8008810 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ee:	2200      	movs	r2, #0
 80082f0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082f6:	687a      	ldr	r2, [r7, #4]
 80082f8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80082fa:	605a      	str	r2, [r3, #4]
 80082fc:	e008      	b.n	8008310 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2200      	movs	r2, #0
 8008302:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2200      	movs	r2, #0
 800830e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3710      	adds	r7, #16
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	40020407 	.word	0x40020407
 8008334:	bffdfff8 	.word	0xbffdfff8
 8008338:	cccccccd 	.word	0xcccccccd
 800833c:	40020000 	.word	0x40020000
 8008340:	bffdfbf8 	.word	0xbffdfbf8
 8008344:	40020400 	.word	0x40020400

08008348 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
 8008354:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008360:	2b01      	cmp	r3, #1
 8008362:	d101      	bne.n	8008368 <HAL_DMA_Start_IT+0x20>
 8008364:	2302      	movs	r3, #2
 8008366:	e066      	b.n	8008436 <HAL_DMA_Start_IT+0xee>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b01      	cmp	r3, #1
 800837a:	d155      	bne.n	8008428 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2202      	movs	r2, #2
 8008380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	2200      	movs	r2, #0
 8008388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f022 0201 	bic.w	r2, r2, #1
 8008398:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	f000 f9b9 	bl	8008718 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d008      	beq.n	80083c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	681a      	ldr	r2, [r3, #0]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f042 020e 	orr.w	r2, r2, #14
 80083bc:	601a      	str	r2, [r3, #0]
 80083be:	e00f      	b.n	80083e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0204 	bic.w	r2, r2, #4
 80083ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f042 020a 	orr.w	r2, r2, #10
 80083de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d007      	beq.n	80083fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f2:	681a      	ldr	r2, [r3, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80083fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008402:	2b00      	cmp	r3, #0
 8008404:	d007      	beq.n	8008416 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008414:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681a      	ldr	r2, [r3, #0]
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f042 0201 	orr.w	r2, r2, #1
 8008424:	601a      	str	r2, [r3, #0]
 8008426:	e005      	b.n	8008434 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2200      	movs	r2, #0
 800842c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8008430:	2302      	movs	r3, #2
 8008432:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8008434:	7dfb      	ldrb	r3, [r7, #23]
}
 8008436:	4618      	mov	r0, r3
 8008438:	3718      	adds	r7, #24
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800843e:	b480      	push	{r7}
 8008440:	b083      	sub	sp, #12
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d101      	bne.n	8008450 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800844c:	2301      	movs	r3, #1
 800844e:	e04f      	b.n	80084f0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b02      	cmp	r3, #2
 800845a:	d008      	beq.n	800846e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2204      	movs	r2, #4
 8008460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e040      	b.n	80084f0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f022 020e 	bic.w	r2, r2, #14
 800847c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008488:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800848c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0201 	bic.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084a2:	f003 021c 	and.w	r2, r3, #28
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	2101      	movs	r1, #1
 80084ac:	fa01 f202 	lsl.w	r2, r1, r2
 80084b0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80084ba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00c      	beq.n	80084de <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084d2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80084dc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2201      	movs	r2, #1
 80084e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	4618      	mov	r0, r3
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr

080084fc <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008504:	2300      	movs	r3, #0
 8008506:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800850e:	b2db      	uxtb	r3, r3
 8008510:	2b02      	cmp	r3, #2
 8008512:	d005      	beq.n	8008520 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2204      	movs	r2, #4
 8008518:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800851a:	2301      	movs	r3, #1
 800851c:	73fb      	strb	r3, [r7, #15]
 800851e:	e047      	b.n	80085b0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f022 020e 	bic.w	r2, r2, #14
 800852e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	681a      	ldr	r2, [r3, #0]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f022 0201 	bic.w	r2, r2, #1
 800853e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800854a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800854e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008554:	f003 021c 	and.w	r2, r3, #28
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800855c:	2101      	movs	r1, #1
 800855e:	fa01 f202 	lsl.w	r2, r1, r2
 8008562:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800856c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00c      	beq.n	8008590 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008580:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008584:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800858e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	2201      	movs	r2, #1
 8008594:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d003      	beq.n	80085b0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	4798      	blx	r3
    }
  }
  return status;
 80085b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d6:	f003 031c 	and.w	r3, r3, #28
 80085da:	2204      	movs	r2, #4
 80085dc:	409a      	lsls	r2, r3
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	4013      	ands	r3, r2
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d026      	beq.n	8008634 <HAL_DMA_IRQHandler+0x7a>
 80085e6:	68bb      	ldr	r3, [r7, #8]
 80085e8:	f003 0304 	and.w	r3, r3, #4
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d021      	beq.n	8008634 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f003 0320 	and.w	r3, r3, #32
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d107      	bne.n	800860e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681a      	ldr	r2, [r3, #0]
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f022 0204 	bic.w	r2, r2, #4
 800860c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008612:	f003 021c 	and.w	r2, r3, #28
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800861a:	2104      	movs	r1, #4
 800861c:	fa01 f202 	lsl.w	r2, r1, r2
 8008620:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008626:	2b00      	cmp	r3, #0
 8008628:	d071      	beq.n	800870e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8008632:	e06c      	b.n	800870e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008638:	f003 031c 	and.w	r3, r3, #28
 800863c:	2202      	movs	r2, #2
 800863e:	409a      	lsls	r2, r3
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	4013      	ands	r3, r2
 8008644:	2b00      	cmp	r3, #0
 8008646:	d02e      	beq.n	80086a6 <HAL_DMA_IRQHandler+0xec>
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f003 0302 	and.w	r3, r3, #2
 800864e:	2b00      	cmp	r3, #0
 8008650:	d029      	beq.n	80086a6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f003 0320 	and.w	r3, r3, #32
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10b      	bne.n	8008678 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f022 020a 	bic.w	r2, r2, #10
 800866e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867c:	f003 021c 	and.w	r2, r3, #28
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	2102      	movs	r1, #2
 8008686:	fa01 f202 	lsl.w	r2, r1, r2
 800868a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	2b00      	cmp	r3, #0
 800869a:	d038      	beq.n	800870e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80086a4:	e033      	b.n	800870e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086aa:	f003 031c 	and.w	r3, r3, #28
 80086ae:	2208      	movs	r2, #8
 80086b0:	409a      	lsls	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	4013      	ands	r3, r2
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d02a      	beq.n	8008710 <HAL_DMA_IRQHandler+0x156>
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d025      	beq.n	8008710 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	681a      	ldr	r2, [r3, #0]
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f022 020e 	bic.w	r2, r2, #14
 80086d2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086d8:	f003 021c 	and.w	r2, r3, #28
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	2101      	movs	r1, #1
 80086e2:	fa01 f202 	lsl.w	r2, r1, r2
 80086e6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2201      	movs	r2, #1
 80086f2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008702:	2b00      	cmp	r3, #0
 8008704:	d004      	beq.n	8008710 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800870e:	bf00      	nop
 8008710:	bf00      	nop
}
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008718:	b480      	push	{r7}
 800871a:	b085      	sub	sp, #20
 800871c:	af00      	add	r7, sp, #0
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	60b9      	str	r1, [r7, #8]
 8008722:	607a      	str	r2, [r7, #4]
 8008724:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800872e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008734:	2b00      	cmp	r3, #0
 8008736:	d004      	beq.n	8008742 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800873c:	68fa      	ldr	r2, [r7, #12]
 800873e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008740:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008746:	f003 021c 	and.w	r2, r3, #28
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800874e:	2101      	movs	r1, #1
 8008750:	fa01 f202 	lsl.w	r2, r1, r2
 8008754:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	683a      	ldr	r2, [r7, #0]
 800875c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	2b10      	cmp	r3, #16
 8008764:	d108      	bne.n	8008778 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	687a      	ldr	r2, [r7, #4]
 800876c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008776:	e007      	b.n	8008788 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	68ba      	ldr	r2, [r7, #8]
 800877e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	60da      	str	r2, [r3, #12]
}
 8008788:	bf00      	nop
 800878a:	3714      	adds	r7, #20
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr

08008794 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
 800879a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	461a      	mov	r2, r3
 80087a2:	4b17      	ldr	r3, [pc, #92]	; (8008800 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d80a      	bhi.n	80087be <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ac:	089b      	lsrs	r3, r3, #2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087b4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80087b8:	687a      	ldr	r2, [r7, #4]
 80087ba:	6493      	str	r3, [r2, #72]	; 0x48
 80087bc:	e007      	b.n	80087ce <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087c2:	089b      	lsrs	r3, r3, #2
 80087c4:	009a      	lsls	r2, r3, #2
 80087c6:	4b0f      	ldr	r3, [pc, #60]	; (8008804 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80087c8:	4413      	add	r3, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	3b08      	subs	r3, #8
 80087d6:	4a0c      	ldr	r2, [pc, #48]	; (8008808 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80087d8:	fba2 2303 	umull	r2, r3, r2, r3
 80087dc:	091b      	lsrs	r3, r3, #4
 80087de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a0a      	ldr	r2, [pc, #40]	; (800880c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80087e4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f003 031f 	and.w	r3, r3, #31
 80087ec:	2201      	movs	r2, #1
 80087ee:	409a      	lsls	r2, r3
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80087f4:	bf00      	nop
 80087f6:	3714      	adds	r7, #20
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr
 8008800:	40020407 	.word	0x40020407
 8008804:	4002081c 	.word	0x4002081c
 8008808:	cccccccd 	.word	0xcccccccd
 800880c:	40020880 	.word	0x40020880

08008810 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008810:	b480      	push	{r7}
 8008812:	b085      	sub	sp, #20
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	685b      	ldr	r3, [r3, #4]
 800881c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008820:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	4b0b      	ldr	r3, [pc, #44]	; (8008854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	461a      	mov	r2, r3
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4a09      	ldr	r2, [pc, #36]	; (8008858 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8008834:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3b01      	subs	r3, #1
 800883a:	f003 0303 	and.w	r3, r3, #3
 800883e:	2201      	movs	r2, #1
 8008840:	409a      	lsls	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008846:	bf00      	nop
 8008848:	3714      	adds	r7, #20
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	1000823f 	.word	0x1000823f
 8008858:	40020940 	.word	0x40020940

0800885c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800886c:	b2db      	uxtb	r3, r3
 800886e:	2b01      	cmp	r3, #1
 8008870:	d12b      	bne.n	80088ca <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008878:	2b01      	cmp	r3, #1
 800887a:	d101      	bne.n	8008880 <HAL_DMAEx_ConfigMuxSync+0x24>
 800887c:	2302      	movs	r3, #2
 800887e:	e025      	b.n	80088cc <HAL_DMAEx_ConfigMuxSync+0x70>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800888c:	681a      	ldr	r2, [r3, #0]
 800888e:	4b12      	ldr	r3, [pc, #72]	; (80088d8 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8008890:	4013      	ands	r3, r2
 8008892:	683a      	ldr	r2, [r7, #0]
 8008894:	6811      	ldr	r1, [r2, #0]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	68d2      	ldr	r2, [r2, #12]
 800889a:	3a01      	subs	r2, #1
 800889c:	04d2      	lsls	r2, r2, #19
 800889e:	4311      	orrs	r1, r2
 80088a0:	683a      	ldr	r2, [r7, #0]
 80088a2:	6852      	ldr	r2, [r2, #4]
 80088a4:	4311      	orrs	r1, r2
 80088a6:	683a      	ldr	r2, [r7, #0]
 80088a8:	7a12      	ldrb	r2, [r2, #8]
 80088aa:	0412      	lsls	r2, r2, #16
 80088ac:	4311      	orrs	r1, r2
 80088ae:	683a      	ldr	r2, [r7, #0]
 80088b0:	7a52      	ldrb	r2, [r2, #9]
 80088b2:	0252      	lsls	r2, r2, #9
 80088b4:	4311      	orrs	r1, r2
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80088ba:	430b      	orrs	r3, r1
 80088bc:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	e000      	b.n	80088cc <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
  }
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	370c      	adds	r7, #12
 80088d0:	46bd      	mov	sp, r7
 80088d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d6:	4770      	bx	lr
 80088d8:	e000fdff 	.word	0xe000fdff

080088dc <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80088dc:	b480      	push	{r7}
 80088de:	b087      	sub	sp, #28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	0c1b      	lsrs	r3, r3, #16
 80088ea:	f003 0301 	and.w	r3, r3, #1
 80088ee:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f003 031f 	and.w	r3, r3, #31
 80088f8:	2201      	movs	r2, #1
 80088fa:	fa02 f303 	lsl.w	r3, r2, r3
 80088fe:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	015b      	lsls	r3, r3, #5
 8008904:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 8008908:	f603 0308 	addw	r3, r3, #2056	; 0x808
 800890c:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	601a      	str	r2, [r3, #0]
}
 8008914:	bf00      	nop
 8008916:	371c      	adds	r7, #28
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b086      	sub	sp, #24
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800892e:	4b1c      	ldr	r3, [pc, #112]	; (80089a0 <HAL_FLASH_Program+0x80>)
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	2b01      	cmp	r3, #1
 8008934:	d101      	bne.n	800893a <HAL_FLASH_Program+0x1a>
 8008936:	2302      	movs	r3, #2
 8008938:	e02d      	b.n	8008996 <HAL_FLASH_Program+0x76>
 800893a:	4b19      	ldr	r3, [pc, #100]	; (80089a0 <HAL_FLASH_Program+0x80>)
 800893c:	2201      	movs	r2, #1
 800893e:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008940:	4b17      	ldr	r3, [pc, #92]	; (80089a0 <HAL_FLASH_Program+0x80>)
 8008942:	2200      	movs	r2, #0
 8008944:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008946:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800894a:	f000 f869 	bl	8008a20 <FLASH_WaitForLastOperation>
 800894e:	4603      	mov	r3, r0
 8008950:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d11a      	bne.n	800898e <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d105      	bne.n	800896a <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800895e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008962:	68b8      	ldr	r0, [r7, #8]
 8008964:	f000 f8cc 	bl	8008b00 <FLASH_Program_DoubleWord>
 8008968:	e004      	b.n	8008974 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 64 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	4619      	mov	r1, r3
 800896e:	68b8      	ldr	r0, [r7, #8]
 8008970:	f024 fa70 	bl	802ce54 <_etext>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008978:	f000 f852 	bl	8008a20 <FLASH_WaitForLastOperation>
 800897c:	4603      	mov	r3, r0
 800897e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8008980:	4b08      	ldr	r3, [pc, #32]	; (80089a4 <HAL_FLASH_Program+0x84>)
 8008982:	695a      	ldr	r2, [r3, #20]
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	43db      	mvns	r3, r3
 8008988:	4906      	ldr	r1, [pc, #24]	; (80089a4 <HAL_FLASH_Program+0x84>)
 800898a:	4013      	ands	r3, r2
 800898c:	614b      	str	r3, [r1, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800898e:	4b04      	ldr	r3, [pc, #16]	; (80089a0 <HAL_FLASH_Program+0x80>)
 8008990:	2200      	movs	r2, #0
 8008992:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8008994:	7dfb      	ldrb	r3, [r7, #23]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3718      	adds	r7, #24
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20004538 	.word	0x20004538
 80089a4:	58004000 	.word	0x58004000

080089a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80089ae:	2300      	movs	r3, #0
 80089b0:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80089b2:	4b0b      	ldr	r3, [pc, #44]	; (80089e0 <HAL_FLASH_Unlock+0x38>)
 80089b4:	695b      	ldr	r3, [r3, #20]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	da0b      	bge.n	80089d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80089ba:	4b09      	ldr	r3, [pc, #36]	; (80089e0 <HAL_FLASH_Unlock+0x38>)
 80089bc:	4a09      	ldr	r2, [pc, #36]	; (80089e4 <HAL_FLASH_Unlock+0x3c>)
 80089be:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80089c0:	4b07      	ldr	r3, [pc, #28]	; (80089e0 <HAL_FLASH_Unlock+0x38>)
 80089c2:	4a09      	ldr	r2, [pc, #36]	; (80089e8 <HAL_FLASH_Unlock+0x40>)
 80089c4:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80089c6:	4b06      	ldr	r3, [pc, #24]	; (80089e0 <HAL_FLASH_Unlock+0x38>)
 80089c8:	695b      	ldr	r3, [r3, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	da01      	bge.n	80089d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80089d2:	79fb      	ldrb	r3, [r7, #7]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	370c      	adds	r7, #12
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr
 80089e0:	58004000 	.word	0x58004000
 80089e4:	45670123 	.word	0x45670123
 80089e8:	cdef89ab 	.word	0xcdef89ab

080089ec <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80089f2:	2300      	movs	r3, #0
 80089f4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80089f6:	4b09      	ldr	r3, [pc, #36]	; (8008a1c <HAL_FLASH_Lock+0x30>)
 80089f8:	695b      	ldr	r3, [r3, #20]
 80089fa:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <HAL_FLASH_Lock+0x30>)
 80089fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a00:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8008a02:	4b06      	ldr	r3, [pc, #24]	; (8008a1c <HAL_FLASH_Lock+0x30>)
 8008a04:	695b      	ldr	r3, [r3, #20]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	db01      	blt.n	8008a0e <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8008a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	370c      	adds	r7, #12
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	58004000 	.word	0x58004000

08008a20 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 8008a28:	f7ff fa1c 	bl	8007e64 <HAL_GetTick>
 8008a2c:	60b8      	str	r0, [r7, #8]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008a2e:	e009      	b.n	8008a44 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8008a30:	f7ff fa18 	bl	8007e64 <HAL_GetTick>
 8008a34:	4602      	mov	r2, r0
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	1ad3      	subs	r3, r2, r3
 8008a3a:	687a      	ldr	r2, [r7, #4]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d801      	bhi.n	8008a44 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008a40:	2303      	movs	r3, #3
 8008a42:	e054      	b.n	8008aee <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008a44:	4b2c      	ldr	r3, [pc, #176]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008a46:	691b      	ldr	r3, [r3, #16]
 8008a48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a50:	d0ee      	beq.n	8008a30 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = FLASH->SR;
 8008a52:	4b29      	ldr	r3, [pc, #164]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0301 	and.w	r3, r3, #1
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d002      	beq.n	8008a68 <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008a62:	4b25      	ldr	r3, [pc, #148]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008a64:	2201      	movs	r2, #1
 8008a66:	611a      	str	r2, [r3, #16]

  /* Workaround for BZ 70309 :
     - OPTVERR is always set at power-up due to failure of engi bytes checking
     - FLASH_WaitForLastOperation() is called at the beginning of erase or program
       operations, so the bit will be clear when performing first operation */
  if ((error & FLASH_FLAG_OPTVERR) != 0U)
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d007      	beq.n	8008a82 <FLASH_WaitForLastOperation+0x62>
  {
    /* Clear FLASH OPTVERR bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8008a72:	4b21      	ldr	r3, [pc, #132]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008a74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008a78:	611a      	str	r2, [r3, #16]

    /* Clear OPTVERR bit in "error" variable to not treat it as error */
    error &= ~FLASH_FLAG_OPTVERR;
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008a80:	60fb      	str	r3, [r7, #12]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8008a88:	4013      	ands	r3, r2
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d007      	beq.n	8008aa6 <FLASH_WaitForLastOperation+0x86>
 8008a96:	4b18      	ldr	r3, [pc, #96]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008a98:	699a      	ldr	r2, [r3, #24]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008aa0:	4915      	ldr	r1, [pc, #84]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	618b      	str	r3, [r1, #24]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d004      	beq.n	8008aba <FLASH_WaitForLastOperation+0x9a>
 8008ab0:	4a11      	ldr	r2, [pc, #68]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008ab8:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00e      	beq.n	8008ade <FLASH_WaitForLastOperation+0xbe>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 8008ac0:	4a0e      	ldr	r2, [pc, #56]	; (8008afc <FLASH_WaitForLastOperation+0xdc>)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e011      	b.n	8008aee <FLASH_WaitForLastOperation+0xce>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8008aca:	f7ff f9cb 	bl	8007e64 <HAL_GetTick>
 8008ace:	4602      	mov	r2, r0
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	1ad3      	subs	r3, r2, r3
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d801      	bhi.n	8008ade <FLASH_WaitForLastOperation+0xbe>
    {
      return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e007      	b.n	8008aee <FLASH_WaitForLastOperation+0xce>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8008ade:	4b06      	ldr	r3, [pc, #24]	; (8008af8 <FLASH_WaitForLastOperation+0xd8>)
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ae6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008aea:	d0ee      	beq.n	8008aca <FLASH_WaitForLastOperation+0xaa>
    }
  }

  return HAL_OK;
 8008aec:	2300      	movs	r3, #0
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3710      	adds	r7, #16
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}
 8008af6:	bf00      	nop
 8008af8:	58004000 	.word	0x58004000
 8008afc:	20004538 	.word	0x20004538

08008b00 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b085      	sub	sp, #20
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	e9c7 2300 	strd	r2, r3, [r7]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008b0c:	4b0e      	ldr	r3, [pc, #56]	; (8008b48 <FLASH_Program_DoubleWord+0x48>)
 8008b0e:	695b      	ldr	r3, [r3, #20]
 8008b10:	4a0d      	ldr	r2, [pc, #52]	; (8008b48 <FLASH_Program_DoubleWord+0x48>)
 8008b12:	f043 0301 	orr.w	r3, r3, #1
 8008b16:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	683a      	ldr	r2, [r7, #0]
 8008b1c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8008b1e:	f3bf 8f6f 	isb	sy
}
 8008b22:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8008b24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008b28:	f04f 0200 	mov.w	r2, #0
 8008b2c:	f04f 0300 	mov.w	r3, #0
 8008b30:	000a      	movs	r2, r1
 8008b32:	2300      	movs	r3, #0
 8008b34:	68f9      	ldr	r1, [r7, #12]
 8008b36:	3104      	adds	r1, #4
 8008b38:	4613      	mov	r3, r2
 8008b3a:	600b      	str	r3, [r1, #0]
}
 8008b3c:	bf00      	nop
 8008b3e:	3714      	adds	r7, #20
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr
 8008b48:	58004000 	.word	0x58004000

08008b4c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008b56:	4b24      	ldr	r3, [pc, #144]	; (8008be8 <HAL_FLASHEx_Erase+0x9c>)
 8008b58:	781b      	ldrb	r3, [r3, #0]
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d101      	bne.n	8008b62 <HAL_FLASHEx_Erase+0x16>
 8008b5e:	2302      	movs	r3, #2
 8008b60:	e03d      	b.n	8008bde <HAL_FLASHEx_Erase+0x92>
 8008b62:	4b21      	ldr	r3, [pc, #132]	; (8008be8 <HAL_FLASHEx_Erase+0x9c>)
 8008b64:	2201      	movs	r2, #1
 8008b66:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8008b68:	4b1f      	ldr	r3, [pc, #124]	; (8008be8 <HAL_FLASHEx_Erase+0x9c>)
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008b6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b72:	f7ff ff55 	bl	8008a20 <FLASH_WaitForLastOperation>
 8008b76:	4603      	mov	r3, r0
 8008b78:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008b7a:	7bfb      	ldrb	r3, [r7, #15]
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d12a      	bne.n	8008bd6 <HAL_FLASHEx_Erase+0x8a>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_PAGES)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	2b02      	cmp	r3, #2
 8008b86:	d124      	bne.n	8008bd2 <HAL_FLASHEx_Erase+0x86>
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b8e:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	60bb      	str	r3, [r7, #8]
 8008b96:	e012      	b.n	8008bbe <HAL_FLASHEx_Erase+0x72>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 8008b98:	68b8      	ldr	r0, [r7, #8]
 8008b9a:	f000 f827 	bl	8008bec <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8008b9e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008ba2:	f7ff ff3d 	bl	8008a20 <FLASH_WaitForLastOperation>
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8008baa:	7bfb      	ldrb	r3, [r7, #15]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <HAL_FLASHEx_Erase+0x6c>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	601a      	str	r2, [r3, #0]
          break;
 8008bb6:	e00a      	b.n	8008bce <HAL_FLASHEx_Erase+0x82>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	60bb      	str	r3, [r7, #8]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685a      	ldr	r2, [r3, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	4413      	add	r3, r2
 8008bc8:	68ba      	ldr	r2, [r7, #8]
 8008bca:	429a      	cmp	r2, r3
 8008bcc:	d3e4      	bcc.n	8008b98 <HAL_FLASHEx_Erase+0x4c>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8008bce:	f000 f86f 	bl	8008cb0 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8008bd2:	f000 f825 	bl	8008c20 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008bd6:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <HAL_FLASHEx_Erase+0x9c>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]

  return status;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	20004538 	.word	0x20004538

08008bec <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8008bec:	b480      	push	{r7}
 8008bee:	b083      	sub	sp, #12
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8008bf4:	4b09      	ldr	r3, [pc, #36]	; (8008c1c <FLASH_PageErase+0x30>)
 8008bf6:	695b      	ldr	r3, [r3, #20]
 8008bf8:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	00db      	lsls	r3, r3, #3
 8008c00:	4313      	orrs	r3, r2
 8008c02:	4a06      	ldr	r2, [pc, #24]	; (8008c1c <FLASH_PageErase+0x30>)
 8008c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c08:	f043 0302 	orr.w	r3, r3, #2
 8008c0c:	6153      	str	r3, [r2, #20]
}
 8008c0e:	bf00      	nop
 8008c10:	370c      	adds	r7, #12
 8008c12:	46bd      	mov	sp, r7
 8008c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c18:	4770      	bx	lr
 8008c1a:	bf00      	nop
 8008c1c:	58004000 	.word	0x58004000

08008c20 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
static void FLASH_FlushCaches(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == FLASH_ACR_ICEN)
 8008c24:	4b21      	ldr	r3, [pc, #132]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c30:	d117      	bne.n	8008c62 <FLASH_FlushCaches+0x42>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008c32:	4b1e      	ldr	r3, [pc, #120]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	4a1d      	ldr	r2, [pc, #116]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c3c:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008c3e:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a1a      	ldr	r2, [pc, #104]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4b18      	ldr	r3, [pc, #96]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a17      	ldr	r2, [pc, #92]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c50:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c54:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008c56:	4b15      	ldr	r3, [pc, #84]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a14      	ldr	r2, [pc, #80]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008c60:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == FLASH_ACR_DCEN)
 8008c62:	4b12      	ldr	r3, [pc, #72]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c6e:	d117      	bne.n	8008ca0 <FLASH_FlushCaches+0x80>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008c70:	4b0e      	ldr	r3, [pc, #56]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a0d      	ldr	r2, [pc, #52]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c7a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008c7c:	4b0b      	ldr	r3, [pc, #44]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c82:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	4b08      	ldr	r3, [pc, #32]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a07      	ldr	r2, [pc, #28]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c92:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a04      	ldr	r2, [pc, #16]	; (8008cac <FLASH_FlushCaches+0x8c>)
 8008c9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c9e:	6013      	str	r3, [r2, #0]
  }
}
 8008ca0:	bf00      	nop
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca8:	4770      	bx	lr
 8008caa:	bf00      	nop
 8008cac:	58004000 	.word	0x58004000

08008cb0 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 8008cb0:	b480      	push	{r7}
 8008cb2:	af00      	add	r7, sp, #0
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8008cb4:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <FLASH_AcknowledgePageErase+0x20>)
 8008cb6:	695b      	ldr	r3, [r3, #20]
 8008cb8:	4a05      	ldr	r2, [pc, #20]	; (8008cd0 <FLASH_AcknowledgePageErase+0x20>)
 8008cba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008cbe:	f023 0302 	bic.w	r3, r3, #2
 8008cc2:	6153      	str	r3, [r2, #20]
}
 8008cc4:	bf00      	nop
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr
 8008cce:	bf00      	nop
 8008cd0:	58004000 	.word	0x58004000

08008cd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008ce2:	e14c      	b.n	8008f7e <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	2101      	movs	r1, #1
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f000 813e 	beq.w	8008f78 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	f003 0303 	and.w	r3, r3, #3
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d005      	beq.n	8008d14 <HAL_GPIO_Init+0x40>
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f003 0303 	and.w	r3, r3, #3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d130      	bne.n	8008d76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008d1a:	697b      	ldr	r3, [r7, #20]
 8008d1c:	005b      	lsls	r3, r3, #1
 8008d1e:	2203      	movs	r2, #3
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	43db      	mvns	r3, r3
 8008d26:	693a      	ldr	r2, [r7, #16]
 8008d28:	4013      	ands	r3, r2
 8008d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	68da      	ldr	r2, [r3, #12]
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	005b      	lsls	r3, r3, #1
 8008d34:	fa02 f303 	lsl.w	r3, r2, r3
 8008d38:	693a      	ldr	r2, [r7, #16]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	693a      	ldr	r2, [r7, #16]
 8008d42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	697b      	ldr	r3, [r7, #20]
 8008d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d52:	43db      	mvns	r3, r3
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	4013      	ands	r3, r2
 8008d58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	685b      	ldr	r3, [r3, #4]
 8008d5e:	091b      	lsrs	r3, r3, #4
 8008d60:	f003 0201 	and.w	r2, r3, #1
 8008d64:	697b      	ldr	r3, [r7, #20]
 8008d66:	fa02 f303 	lsl.w	r3, r2, r3
 8008d6a:	693a      	ldr	r2, [r7, #16]
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	693a      	ldr	r2, [r7, #16]
 8008d74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	f003 0303 	and.w	r3, r3, #3
 8008d7e:	2b03      	cmp	r3, #3
 8008d80:	d017      	beq.n	8008db2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	68db      	ldr	r3, [r3, #12]
 8008d86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	005b      	lsls	r3, r3, #1
 8008d8c:	2203      	movs	r2, #3
 8008d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008d92:	43db      	mvns	r3, r3
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	4013      	ands	r3, r2
 8008d98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	689a      	ldr	r2, [r3, #8]
 8008d9e:	697b      	ldr	r3, [r7, #20]
 8008da0:	005b      	lsls	r3, r3, #1
 8008da2:	fa02 f303 	lsl.w	r3, r2, r3
 8008da6:	693a      	ldr	r2, [r7, #16]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	693a      	ldr	r2, [r7, #16]
 8008db0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	f003 0303 	and.w	r3, r3, #3
 8008dba:	2b02      	cmp	r3, #2
 8008dbc:	d123      	bne.n	8008e06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	08da      	lsrs	r2, r3, #3
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	3208      	adds	r2, #8
 8008dc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	f003 0307 	and.w	r3, r3, #7
 8008dd2:	009b      	lsls	r3, r3, #2
 8008dd4:	220f      	movs	r2, #15
 8008dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dda:	43db      	mvns	r3, r3
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	4013      	ands	r3, r2
 8008de0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	691a      	ldr	r2, [r3, #16]
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f003 0307 	and.w	r3, r3, #7
 8008dec:	009b      	lsls	r3, r3, #2
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	693a      	ldr	r2, [r7, #16]
 8008df4:	4313      	orrs	r3, r2
 8008df6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	08da      	lsrs	r2, r3, #3
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3208      	adds	r2, #8
 8008e00:	6939      	ldr	r1, [r7, #16]
 8008e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	005b      	lsls	r3, r3, #1
 8008e10:	2203      	movs	r2, #3
 8008e12:	fa02 f303 	lsl.w	r3, r2, r3
 8008e16:	43db      	mvns	r3, r3
 8008e18:	693a      	ldr	r2, [r7, #16]
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	f003 0203 	and.w	r2, r3, #3
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	005b      	lsls	r3, r3, #1
 8008e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008e2e:	693a      	ldr	r2, [r7, #16]
 8008e30:	4313      	orrs	r3, r2
 8008e32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	693a      	ldr	r2, [r7, #16]
 8008e38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	685b      	ldr	r3, [r3, #4]
 8008e3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 8098 	beq.w	8008f78 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8008e48:	4a54      	ldr	r2, [pc, #336]	; (8008f9c <HAL_GPIO_Init+0x2c8>)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	089b      	lsrs	r3, r3, #2
 8008e4e:	3302      	adds	r3, #2
 8008e50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f003 0303 	and.w	r3, r3, #3
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	220f      	movs	r2, #15
 8008e60:	fa02 f303 	lsl.w	r3, r2, r3
 8008e64:	43db      	mvns	r3, r3
 8008e66:	693a      	ldr	r2, [r7, #16]
 8008e68:	4013      	ands	r3, r2
 8008e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008e72:	d019      	beq.n	8008ea8 <HAL_GPIO_Init+0x1d4>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	4a4a      	ldr	r2, [pc, #296]	; (8008fa0 <HAL_GPIO_Init+0x2cc>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d013      	beq.n	8008ea4 <HAL_GPIO_Init+0x1d0>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	4a49      	ldr	r2, [pc, #292]	; (8008fa4 <HAL_GPIO_Init+0x2d0>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d00d      	beq.n	8008ea0 <HAL_GPIO_Init+0x1cc>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	4a48      	ldr	r2, [pc, #288]	; (8008fa8 <HAL_GPIO_Init+0x2d4>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d007      	beq.n	8008e9c <HAL_GPIO_Init+0x1c8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a47      	ldr	r2, [pc, #284]	; (8008fac <HAL_GPIO_Init+0x2d8>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d101      	bne.n	8008e98 <HAL_GPIO_Init+0x1c4>
 8008e94:	2304      	movs	r3, #4
 8008e96:	e008      	b.n	8008eaa <HAL_GPIO_Init+0x1d6>
 8008e98:	2307      	movs	r3, #7
 8008e9a:	e006      	b.n	8008eaa <HAL_GPIO_Init+0x1d6>
 8008e9c:	2303      	movs	r3, #3
 8008e9e:	e004      	b.n	8008eaa <HAL_GPIO_Init+0x1d6>
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	e002      	b.n	8008eaa <HAL_GPIO_Init+0x1d6>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e000      	b.n	8008eaa <HAL_GPIO_Init+0x1d6>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	697a      	ldr	r2, [r7, #20]
 8008eac:	f002 0203 	and.w	r2, r2, #3
 8008eb0:	0092      	lsls	r2, r2, #2
 8008eb2:	4093      	lsls	r3, r2
 8008eb4:	693a      	ldr	r2, [r7, #16]
 8008eb6:	4313      	orrs	r3, r2
 8008eb8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008eba:	4938      	ldr	r1, [pc, #224]	; (8008f9c <HAL_GPIO_Init+0x2c8>)
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	089b      	lsrs	r3, r3, #2
 8008ec0:	3302      	adds	r3, #2
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008ec8:	4b39      	ldr	r3, [pc, #228]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	43db      	mvns	r3, r3
 8008ed2:	693a      	ldr	r2, [r7, #16]
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d003      	beq.n	8008eec <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008ee4:	693a      	ldr	r2, [r7, #16]
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008eec:	4a30      	ldr	r2, [pc, #192]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008ef2:	4b2f      	ldr	r3, [pc, #188]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	43db      	mvns	r3, r3
 8008efc:	693a      	ldr	r2, [r7, #16]
 8008efe:	4013      	ands	r3, r2
 8008f00:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d003      	beq.n	8008f16 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008f0e:	693a      	ldr	r2, [r7, #16]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4313      	orrs	r3, r2
 8008f14:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008f16:	4a26      	ldr	r2, [pc, #152]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008f1c:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008f22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	43db      	mvns	r3, r3
 8008f28:	693a      	ldr	r2, [r7, #16]
 8008f2a:	4013      	ands	r3, r2
 8008f2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d003      	beq.n	8008f42 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8008f3a:	693a      	ldr	r2, [r7, #16]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4313      	orrs	r3, r2
 8008f40:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008f42:	4a1b      	ldr	r2, [pc, #108]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008f44:	693b      	ldr	r3, [r7, #16]
 8008f46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8008f4a:	4b19      	ldr	r3, [pc, #100]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	43db      	mvns	r3, r3
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	4013      	ands	r3, r2
 8008f5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d003      	beq.n	8008f70 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8008f68:	693a      	ldr	r2, [r7, #16]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008f70:	4a0f      	ldr	r2, [pc, #60]	; (8008fb0 <HAL_GPIO_Init+0x2dc>)
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	fa22 f303 	lsr.w	r3, r2, r3
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f47f aeab 	bne.w	8008ce4 <HAL_GPIO_Init+0x10>
  }
}
 8008f8e:	bf00      	nop
 8008f90:	bf00      	nop
 8008f92:	371c      	adds	r7, #28
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	40010000 	.word	0x40010000
 8008fa0:	48000400 	.word	0x48000400
 8008fa4:	48000800 	.word	0x48000800
 8008fa8:	48000c00 	.word	0x48000c00
 8008fac:	48001000 	.word	0x48001000
 8008fb0:	58000800 	.word	0x58000800

08008fb4 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008fb4:	b480      	push	{r7}
 8008fb6:	b085      	sub	sp, #20
 8008fb8:	af00      	add	r7, sp, #0
 8008fba:	6078      	str	r0, [r7, #4]
 8008fbc:	460b      	mov	r3, r1
 8008fbe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	691a      	ldr	r2, [r3, #16]
 8008fc4:	887b      	ldrh	r3, [r7, #2]
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d002      	beq.n	8008fd2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
 8008fd0:	e001      	b.n	8008fd6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fd8:	4618      	mov	r0, r3
 8008fda:	3714      	adds	r7, #20
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008fe4:	b480      	push	{r7}
 8008fe6:	b083      	sub	sp, #12
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	460b      	mov	r3, r1
 8008fee:	807b      	strh	r3, [r7, #2]
 8008ff0:	4613      	mov	r3, r2
 8008ff2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008ff4:	787b      	ldrb	r3, [r7, #1]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d003      	beq.n	8009002 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008ffa:	887a      	ldrh	r2, [r7, #2]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8009000:	e002      	b.n	8009008 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8009002:	887a      	ldrh	r2, [r7, #2]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	629a      	str	r2, [r3, #40]	; 0x28
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	4603      	mov	r3, r0
 800901c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800901e:	4b08      	ldr	r3, [pc, #32]	; (8009040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8009020:	68da      	ldr	r2, [r3, #12]
 8009022:	88fb      	ldrh	r3, [r7, #6]
 8009024:	4013      	ands	r3, r2
 8009026:	2b00      	cmp	r3, #0
 8009028:	d006      	beq.n	8009038 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800902a:	4a05      	ldr	r2, [pc, #20]	; (8009040 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800902c:	88fb      	ldrh	r3, [r7, #6]
 800902e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8009030:	88fb      	ldrh	r3, [r7, #6]
 8009032:	4618      	mov	r0, r3
 8009034:	f7f8 fcc3 	bl	80019be <HAL_GPIO_EXTI_Callback>
  }
}
 8009038:	bf00      	nop
 800903a:	3708      	adds	r7, #8
 800903c:	46bd      	mov	sp, r7
 800903e:	bd80      	pop	{r7, pc}
 8009040:	58000800 	.word	0x58000800

08009044 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 800904a:	4b0a      	ldr	r3, [pc, #40]	; (8009074 <HAL_HSEM_IRQHandler+0x30>)
 800904c:	68db      	ldr	r3, [r3, #12]
 800904e:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <HAL_HSEM_IRQHandler+0x30>)
 8009052:	681a      	ldr	r2, [r3, #0]
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	43db      	mvns	r3, r3
 8009058:	4906      	ldr	r1, [pc, #24]	; (8009074 <HAL_HSEM_IRQHandler+0x30>)
 800905a:	4013      	ands	r3, r2
 800905c:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800905e:	4a05      	ldr	r2, [pc, #20]	; (8009074 <HAL_HSEM_IRQHandler+0x30>)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f000 f807 	bl	8009078 <HAL_HSEM_FreeCallback>
}
 800906a:	bf00      	nop
 800906c:	3708      	adds	r7, #8
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	58001500 	.word	0x58001500

08009078 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8009078:	b480      	push	{r7}
 800907a:	b083      	sub	sp, #12
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 8009080:	bf00      	nop
 8009082:	370c      	adds	r7, #12
 8009084:	46bd      	mov	sp, r7
 8009086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908a:	4770      	bx	lr

0800908c <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b084      	sub	sp, #16
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8009094:	2300      	movs	r3, #0
 8009096:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d01e      	beq.n	80090dc <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800909e:	4b13      	ldr	r3, [pc, #76]	; (80090ec <HAL_IPCC_Init+0x60>)
 80090a0:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 80090ae:	6878      	ldr	r0, [r7, #4]
 80090b0:	f7f9 ffdc 	bl	800306c <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 80090b4:	68b8      	ldr	r0, [r7, #8]
 80090b6:	f000 f85b 	bl	8009170 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f82c 	bl	8009124 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2200      	movs	r2, #0
 80090d0:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80090da:	e001      	b.n	80090e0 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 80090dc:	2301      	movs	r3, #1
 80090de:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 80090e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	3710      	adds	r7, #16
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	58000c00 	.word	0x58000c00

080090f0 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 80090f0:	b480      	push	{r7}
 80090f2:	b085      	sub	sp, #20
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	4613      	mov	r3, r2
 80090fc:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 80090fe:	bf00      	nop
 8009100:	3714      	adds	r7, #20
 8009102:	46bd      	mov	sp, r7
 8009104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009108:	4770      	bx	lr

0800910a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800910a:	b480      	push	{r7}
 800910c:	b085      	sub	sp, #20
 800910e:	af00      	add	r7, sp, #0
 8009110:	60f8      	str	r0, [r7, #12]
 8009112:	60b9      	str	r1, [r7, #8]
 8009114:	4613      	mov	r3, r2
 8009116:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8009118:	bf00      	nop
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800912c:	2300      	movs	r3, #0
 800912e:	60fb      	str	r3, [r7, #12]
 8009130:	e00f      	b.n	8009152 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	4a0b      	ldr	r2, [pc, #44]	; (8009168 <IPCC_SetDefaultCallbacks+0x44>)
 800913c:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3306      	adds	r3, #6
 8009144:	009b      	lsls	r3, r3, #2
 8009146:	4413      	add	r3, r2
 8009148:	4a08      	ldr	r2, [pc, #32]	; (800916c <IPCC_SetDefaultCallbacks+0x48>)
 800914a:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3301      	adds	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2b05      	cmp	r3, #5
 8009156:	d9ec      	bls.n	8009132 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 8009158:	bf00      	nop
 800915a:	bf00      	nop
 800915c:	3714      	adds	r7, #20
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	080090f1 	.word	0x080090f1
 800916c:	0800910b 	.word	0x0800910b

08009170 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 8009170:	b480      	push	{r7}
 8009172:	b083      	sub	sp, #12
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	2200      	movs	r2, #0
 800917c:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 8009184:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	223f      	movs	r2, #63	; 0x3f
 800918a:	609a      	str	r2, [r3, #8]
}
 800918c:	bf00      	nop
 800918e:	370c      	adds	r7, #12
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a04      	ldr	r2, [pc, #16]	; (80091b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80091a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091a6:	6013      	str	r3, [r2, #0]
}
 80091a8:	bf00      	nop
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr
 80091b2:	bf00      	nop
 80091b4:	58000400 	.word	0x58000400

080091b8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80091b8:	b480      	push	{r7}
 80091ba:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80091bc:	4b04      	ldr	r3, [pc, #16]	; (80091d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	58000400 	.word	0x58000400

080091d4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80091d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80091e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80091e6:	d101      	bne.n	80091ec <LL_RCC_HSE_IsEnabledDiv2+0x18>
 80091e8:	2301      	movs	r3, #1
 80091ea:	e000      	b.n	80091ee <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 80091ec:	2300      	movs	r3, #0
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <LL_RCC_HSE_Enable>:
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80091fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800920a:	6013      	str	r3, [r2, #0]
}
 800920c:	bf00      	nop
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <LL_RCC_HSE_Disable>:
{
 8009216:	b480      	push	{r7}
 8009218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800921a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009228:	6013      	str	r3, [r2, #0]
}
 800922a:	bf00      	nop
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <LL_RCC_HSE_IsReady>:
{
 8009234:	b480      	push	{r7}
 8009236:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8009238:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009246:	d101      	bne.n	800924c <LL_RCC_HSE_IsReady+0x18>
 8009248:	2301      	movs	r3, #1
 800924a:	e000      	b.n	800924e <LL_RCC_HSE_IsReady+0x1a>
 800924c:	2300      	movs	r3, #0
}
 800924e:	4618      	mov	r0, r3
 8009250:	46bd      	mov	sp, r7
 8009252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009256:	4770      	bx	lr

08009258 <LL_RCC_HSI_Enable>:
{
 8009258:	b480      	push	{r7}
 800925a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800925c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800926a:	6013      	str	r3, [r2, #0]
}
 800926c:	bf00      	nop
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <LL_RCC_HSI_Disable>:
{
 8009276:	b480      	push	{r7}
 8009278:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 800927a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009288:	6013      	str	r3, [r2, #0]
}
 800928a:	bf00      	nop
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <LL_RCC_HSI_IsReady>:
{
 8009294:	b480      	push	{r7}
 8009296:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8009298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80092a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092a6:	d101      	bne.n	80092ac <LL_RCC_HSI_IsReady+0x18>
 80092a8:	2301      	movs	r3, #1
 80092aa:	e000      	b.n	80092ae <LL_RCC_HSI_IsReady+0x1a>
 80092ac:	2300      	movs	r3, #0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_RCC_HSI_SetCalibTrimming>:
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80092c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	061b      	lsls	r3, r3, #24
 80092ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80092d2:	4313      	orrs	r3, r2
 80092d4:	604b      	str	r3, [r1, #4]
}
 80092d6:	bf00      	nop
 80092d8:	370c      	adds	r7, #12
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <LL_RCC_HSI48_Enable>:
{
 80092e2:	b480      	push	{r7}
 80092e4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 80092e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092f2:	f043 0301 	orr.w	r3, r3, #1
 80092f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 80092fa:	bf00      	nop
 80092fc:	46bd      	mov	sp, r7
 80092fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009302:	4770      	bx	lr

08009304 <LL_RCC_HSI48_Disable>:
{
 8009304:	b480      	push	{r7}
 8009306:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8009308:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800930c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009310:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009314:	f023 0301 	bic.w	r3, r3, #1
 8009318:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800931c:	bf00      	nop
 800931e:	46bd      	mov	sp, r7
 8009320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009324:	4770      	bx	lr

08009326 <LL_RCC_HSI48_IsReady>:
{
 8009326:	b480      	push	{r7}
 8009328:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800932a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800932e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009332:	f003 0302 	and.w	r3, r3, #2
 8009336:	2b02      	cmp	r3, #2
 8009338:	d101      	bne.n	800933e <LL_RCC_HSI48_IsReady+0x18>
 800933a:	2301      	movs	r3, #1
 800933c:	e000      	b.n	8009340 <LL_RCC_HSI48_IsReady+0x1a>
 800933e:	2300      	movs	r3, #0
}
 8009340:	4618      	mov	r0, r3
 8009342:	46bd      	mov	sp, r7
 8009344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009348:	4770      	bx	lr

0800934a <LL_RCC_LSE_Enable>:
{
 800934a:	b480      	push	{r7}
 800934c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800934e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009356:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800935a:	f043 0301 	orr.w	r3, r3, #1
 800935e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009362:	bf00      	nop
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <LL_RCC_LSE_Disable>:
{
 800936c:	b480      	push	{r7}
 800936e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8009370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009378:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8009384:	bf00      	nop
 8009386:	46bd      	mov	sp, r7
 8009388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938c:	4770      	bx	lr

0800938e <LL_RCC_LSE_EnableBypass>:
{
 800938e:	b480      	push	{r7}
 8009390:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8009392:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800939a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800939e:	f043 0304 	orr.w	r3, r3, #4
 80093a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80093a6:	bf00      	nop
 80093a8:	46bd      	mov	sp, r7
 80093aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ae:	4770      	bx	lr

080093b0 <LL_RCC_LSE_DisableBypass>:
{
 80093b0:	b480      	push	{r7}
 80093b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80093b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80093c0:	f023 0304 	bic.w	r3, r3, #4
 80093c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80093c8:	bf00      	nop
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <LL_RCC_LSE_IsReady>:
{
 80093d2:	b480      	push	{r7}
 80093d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80093d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093de:	f003 0302 	and.w	r3, r3, #2
 80093e2:	2b02      	cmp	r3, #2
 80093e4:	d101      	bne.n	80093ea <LL_RCC_LSE_IsReady+0x18>
 80093e6:	2301      	movs	r3, #1
 80093e8:	e000      	b.n	80093ec <LL_RCC_LSE_IsReady+0x1a>
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr

080093f6 <LL_RCC_LSI1_Enable>:
{
 80093f6:	b480      	push	{r7}
 80093f8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 80093fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80093fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009402:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009406:	f043 0301 	orr.w	r3, r3, #1
 800940a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800940e:	bf00      	nop
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <LL_RCC_LSI1_Disable>:
{
 8009418:	b480      	push	{r7}
 800941a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800941c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009424:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009428:	f023 0301 	bic.w	r3, r3, #1
 800942c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009430:	bf00      	nop
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr

0800943a <LL_RCC_LSI1_IsReady>:
{
 800943a:	b480      	push	{r7}
 800943c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 800943e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009446:	f003 0302 	and.w	r3, r3, #2
 800944a:	2b02      	cmp	r3, #2
 800944c:	d101      	bne.n	8009452 <LL_RCC_LSI1_IsReady+0x18>
 800944e:	2301      	movs	r3, #1
 8009450:	e000      	b.n	8009454 <LL_RCC_LSI1_IsReady+0x1a>
 8009452:	2300      	movs	r3, #0
}
 8009454:	4618      	mov	r0, r3
 8009456:	46bd      	mov	sp, r7
 8009458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945c:	4770      	bx	lr

0800945e <LL_RCC_LSI2_Enable>:
{
 800945e:	b480      	push	{r7}
 8009460:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009466:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800946a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800946e:	f043 0304 	orr.w	r3, r3, #4
 8009472:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009476:	bf00      	nop
 8009478:	46bd      	mov	sp, r7
 800947a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947e:	4770      	bx	lr

08009480 <LL_RCC_LSI2_Disable>:
{
 8009480:	b480      	push	{r7}
 8009482:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 8009484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009488:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800948c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009490:	f023 0304 	bic.w	r3, r3, #4
 8009494:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8009498:	bf00      	nop
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <LL_RCC_LSI2_IsReady>:
{
 80094a2:	b480      	push	{r7}
 80094a4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 80094a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094ae:	f003 0308 	and.w	r3, r3, #8
 80094b2:	2b08      	cmp	r3, #8
 80094b4:	d101      	bne.n	80094ba <LL_RCC_LSI2_IsReady+0x18>
 80094b6:	2301      	movs	r3, #1
 80094b8:	e000      	b.n	80094bc <LL_RCC_LSI2_IsReady+0x1a>
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	46bd      	mov	sp, r7
 80094c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c4:	4770      	bx	lr

080094c6 <LL_RCC_LSI2_SetTrimming>:
{
 80094c6:	b480      	push	{r7}
 80094c8:	b083      	sub	sp, #12
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 80094ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094d6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	021b      	lsls	r3, r3, #8
 80094de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80094e2:	4313      	orrs	r3, r2
 80094e4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <LL_RCC_MSI_Enable>:
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80094f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009502:	f043 0301 	orr.w	r3, r3, #1
 8009506:	6013      	str	r3, [r2, #0]
}
 8009508:	bf00      	nop
 800950a:	46bd      	mov	sp, r7
 800950c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009510:	4770      	bx	lr

08009512 <LL_RCC_MSI_Disable>:
{
 8009512:	b480      	push	{r7}
 8009514:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8009516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009520:	f023 0301 	bic.w	r3, r3, #1
 8009524:	6013      	str	r3, [r2, #0]
}
 8009526:	bf00      	nop
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <LL_RCC_MSI_IsReady>:
{
 8009530:	b480      	push	{r7}
 8009532:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8009534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f003 0302 	and.w	r3, r3, #2
 800953e:	2b02      	cmp	r3, #2
 8009540:	d101      	bne.n	8009546 <LL_RCC_MSI_IsReady+0x16>
 8009542:	2301      	movs	r3, #1
 8009544:	e000      	b.n	8009548 <LL_RCC_MSI_IsReady+0x18>
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <LL_RCC_MSI_SetRange>:
{
 8009552:	b480      	push	{r7}
 8009554:	b083      	sub	sp, #12
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800955a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009564:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4313      	orrs	r3, r2
 800956c:	600b      	str	r3, [r1, #0]
}
 800956e:	bf00      	nop
 8009570:	370c      	adds	r7, #12
 8009572:	46bd      	mov	sp, r7
 8009574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009578:	4770      	bx	lr

0800957a <LL_RCC_MSI_GetRange>:
{
 800957a:	b480      	push	{r7}
 800957c:	b083      	sub	sp, #12
 800957e:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 8009580:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800958a:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2bb0      	cmp	r3, #176	; 0xb0
 8009590:	d901      	bls.n	8009596 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8009592:	23b0      	movs	r3, #176	; 0xb0
 8009594:	607b      	str	r3, [r7, #4]
  return msiRange;
 8009596:	687b      	ldr	r3, [r7, #4]
}
 8009598:	4618      	mov	r0, r3
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <LL_RCC_MSI_SetCalibTrimming>:
{
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80095ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095b0:	685b      	ldr	r3, [r3, #4]
 80095b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	021b      	lsls	r3, r3, #8
 80095ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095be:	4313      	orrs	r3, r2
 80095c0:	604b      	str	r3, [r1, #4]
}
 80095c2:	bf00      	nop
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <LL_RCC_SetSysClkSource>:
{
 80095ce:	b480      	push	{r7}
 80095d0:	b083      	sub	sp, #12
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80095d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095da:	689b      	ldr	r3, [r3, #8]
 80095dc:	f023 0203 	bic.w	r2, r3, #3
 80095e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	608b      	str	r3, [r1, #8]
}
 80095ea:	bf00      	nop
 80095ec:	370c      	adds	r7, #12
 80095ee:	46bd      	mov	sp, r7
 80095f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f4:	4770      	bx	lr

080095f6 <LL_RCC_GetSysClkSource>:
{
 80095f6:	b480      	push	{r7}
 80095f8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80095fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	f003 030c 	and.w	r3, r3, #12
}
 8009604:	4618      	mov	r0, r3
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr

0800960e <LL_RCC_SetAHBPrescaler>:
{
 800960e:	b480      	push	{r7}
 8009610:	b083      	sub	sp, #12
 8009612:	af00      	add	r7, sp, #0
 8009614:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8009616:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800961a:	689b      	ldr	r3, [r3, #8]
 800961c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009620:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	4313      	orrs	r3, r2
 8009628:	608b      	str	r3, [r1, #8]
}
 800962a:	bf00      	nop
 800962c:	370c      	adds	r7, #12
 800962e:	46bd      	mov	sp, r7
 8009630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009634:	4770      	bx	lr

08009636 <LL_C2_RCC_SetAHBPrescaler>:
{
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800963e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009642:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009646:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800964a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4313      	orrs	r3, r2
 8009652:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8009656:	bf00      	nop
 8009658:	370c      	adds	r7, #12
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <LL_RCC_SetAHB4Prescaler>:
{
 8009662:	b480      	push	{r7}
 8009664:	b083      	sub	sp, #12
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 800966a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800966e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009672:	f023 020f 	bic.w	r2, r3, #15
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	091b      	lsrs	r3, r3, #4
 800967a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800967e:	4313      	orrs	r3, r2
 8009680:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8009684:	bf00      	nop
 8009686:	370c      	adds	r7, #12
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <LL_RCC_SetAPB1Prescaler>:
{
 8009690:	b480      	push	{r7}
 8009692:	b083      	sub	sp, #12
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8009698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	608b      	str	r3, [r1, #8]
}
 80096ac:	bf00      	nop
 80096ae:	370c      	adds	r7, #12
 80096b0:	46bd      	mov	sp, r7
 80096b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b6:	4770      	bx	lr

080096b8 <LL_RCC_SetAPB2Prescaler>:
{
 80096b8:	b480      	push	{r7}
 80096ba:	b083      	sub	sp, #12
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80096c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80096ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4313      	orrs	r3, r2
 80096d2:	608b      	str	r3, [r1, #8]
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <LL_RCC_GetAHBPrescaler>:
{
 80096e0:	b480      	push	{r7}
 80096e2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80096e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096e8:	689b      	ldr	r3, [r3, #8]
 80096ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <LL_RCC_GetAHB4Prescaler>:
{
 80096f8:	b480      	push	{r7}
 80096fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80096fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009700:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009704:	011b      	lsls	r3, r3, #4
 8009706:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800970a:	4618      	mov	r0, r3
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <LL_RCC_GetAPB1Prescaler>:
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8009718:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800971c:	689b      	ldr	r3, [r3, #8]
 800971e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8009722:	4618      	mov	r0, r3
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <LL_RCC_GetAPB2Prescaler>:
{
 800972c:	b480      	push	{r7}
 800972e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8009730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009734:	689b      	ldr	r3, [r3, #8]
 8009736:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800973a:	4618      	mov	r0, r3
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <LL_RCC_PLL_Enable>:
{
 8009744:	b480      	push	{r7}
 8009746:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8009748:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009752:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009756:	6013      	str	r3, [r2, #0]
}
 8009758:	bf00      	nop
 800975a:	46bd      	mov	sp, r7
 800975c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009760:	4770      	bx	lr

08009762 <LL_RCC_PLL_Disable>:
{
 8009762:	b480      	push	{r7}
 8009764:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8009766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009774:	6013      	str	r3, [r2, #0]
}
 8009776:	bf00      	nop
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <LL_RCC_PLL_IsReady>:
{
 8009780:	b480      	push	{r7}
 8009782:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8009784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800978e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009792:	d101      	bne.n	8009798 <LL_RCC_PLL_IsReady+0x18>
 8009794:	2301      	movs	r3, #1
 8009796:	e000      	b.n	800979a <LL_RCC_PLL_IsReady+0x1a>
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <LL_RCC_PLL_GetN>:
{
 80097a4:	b480      	push	{r7}
 80097a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80097a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097ac:	68db      	ldr	r3, [r3, #12]
 80097ae:	0a1b      	lsrs	r3, r3, #8
 80097b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr

080097be <LL_RCC_PLL_GetR>:
{
 80097be:	b480      	push	{r7}
 80097c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80097c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80097cc:	4618      	mov	r0, r3
 80097ce:	46bd      	mov	sp, r7
 80097d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d4:	4770      	bx	lr

080097d6 <LL_RCC_PLL_GetDivider>:
{
 80097d6:	b480      	push	{r7}
 80097d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80097da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097de:	68db      	ldr	r3, [r3, #12]
 80097e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <LL_RCC_PLL_GetMainSource>:
{
 80097ee:	b480      	push	{r7}
 80097f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80097f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80097f6:	68db      	ldr	r3, [r3, #12]
 80097f8:	f003 0303 	and.w	r3, r3, #3
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <LL_RCC_IsActiveFlag_HPRE>:
{
 8009806:	b480      	push	{r7}
 8009808:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800980a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800980e:	689b      	ldr	r3, [r3, #8]
 8009810:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009818:	d101      	bne.n	800981e <LL_RCC_IsActiveFlag_HPRE+0x18>
 800981a:	2301      	movs	r3, #1
 800981c:	e000      	b.n	8009820 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 800982a:	b480      	push	{r7}
 800982c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800982e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009832:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8009836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800983a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800983e:	d101      	bne.n	8009844 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8009840:	2301      	movs	r3, #1
 8009842:	e000      	b.n	8009846 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr

08009850 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8009850:	b480      	push	{r7}
 8009852:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8009854:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009858:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800985c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009860:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009864:	d101      	bne.n	800986a <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8009866:	2301      	movs	r3, #1
 8009868:	e000      	b.n	800986c <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8009876:	b480      	push	{r7}
 8009878:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 800987a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009884:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009888:	d101      	bne.n	800988e <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800988e:	2300      	movs	r3, #0
}
 8009890:	4618      	mov	r0, r3
 8009892:	46bd      	mov	sp, r7
 8009894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009898:	4770      	bx	lr

0800989a <LL_RCC_IsActiveFlag_PPRE2>:
{
 800989a:	b480      	push	{r7}
 800989c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800989e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80098a2:	689b      	ldr	r3, [r3, #8]
 80098a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80098a8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80098ac:	d101      	bne.n	80098b2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80098ae:	2301      	movs	r3, #1
 80098b0:	e000      	b.n	80098b4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
	...

080098c0 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80098c0:	b590      	push	{r4, r7, lr}
 80098c2:	b08d      	sub	sp, #52	; 0x34
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d101      	bne.n	80098d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80098ce:	2301      	movs	r3, #1
 80098d0:	e363      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b00      	cmp	r3, #0
 80098dc:	f000 808d 	beq.w	80099fa <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098e0:	f7ff fe89 	bl	80095f6 <LL_RCC_GetSysClkSource>
 80098e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 80098e6:	f7ff ff82 	bl	80097ee <LL_RCC_PLL_GetMainSource>
 80098ea:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d005      	beq.n	80098fe <HAL_RCC_OscConfig+0x3e>
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	2b0c      	cmp	r3, #12
 80098f6:	d147      	bne.n	8009988 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 80098f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fa:	2b01      	cmp	r3, #1
 80098fc:	d144      	bne.n	8009988 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	69db      	ldr	r3, [r3, #28]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e347      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800990e:	f7ff fe34 	bl	800957a <LL_RCC_MSI_GetRange>
 8009912:	4603      	mov	r3, r0
 8009914:	429c      	cmp	r4, r3
 8009916:	d914      	bls.n	8009942 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800991c:	4618      	mov	r0, r3
 800991e:	f000 fd2f 	bl	800a380 <RCC_SetFlashLatencyFromMSIRange>
 8009922:	4603      	mov	r3, r0
 8009924:	2b00      	cmp	r3, #0
 8009926:	d001      	beq.n	800992c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8009928:	2301      	movs	r3, #1
 800992a:	e336      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fe0e 	bl	8009552 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a1b      	ldr	r3, [r3, #32]
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff fe32 	bl	80095a4 <LL_RCC_MSI_SetCalibTrimming>
 8009940:	e013      	b.n	800996a <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fe03 	bl	8009552 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6a1b      	ldr	r3, [r3, #32]
 8009950:	4618      	mov	r0, r3
 8009952:	f7ff fe27 	bl	80095a4 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800995a:	4618      	mov	r0, r3
 800995c:	f000 fd10 	bl	800a380 <RCC_SetFlashLatencyFromMSIRange>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	d001      	beq.n	800996a <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e317      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800996a:	f000 fcc9 	bl	800a300 <HAL_RCC_GetHCLKFreq>
 800996e:	4603      	mov	r3, r0
 8009970:	4aa4      	ldr	r2, [pc, #656]	; (8009c04 <HAL_RCC_OscConfig+0x344>)
 8009972:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009974:	4ba4      	ldr	r3, [pc, #656]	; (8009c08 <HAL_RCC_OscConfig+0x348>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4618      	mov	r0, r3
 800997a:	f7fe fa25 	bl	8007dc8 <HAL_InitTick>
 800997e:	4603      	mov	r3, r0
 8009980:	2b00      	cmp	r3, #0
 8009982:	d039      	beq.n	80099f8 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8009984:	2301      	movs	r3, #1
 8009986:	e308      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	69db      	ldr	r3, [r3, #28]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d01e      	beq.n	80099ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8009990:	f7ff fdb0 	bl	80094f4 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009994:	f7fe fa66 	bl	8007e64 <HAL_GetTick>
 8009998:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800999a:	e008      	b.n	80099ae <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800999c:	f7fe fa62 	bl	8007e64 <HAL_GetTick>
 80099a0:	4602      	mov	r2, r0
 80099a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	2b02      	cmp	r3, #2
 80099a8:	d901      	bls.n	80099ae <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80099aa:	2303      	movs	r3, #3
 80099ac:	e2f5      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 80099ae:	f7ff fdbf 	bl	8009530 <LL_RCC_MSI_IsReady>
 80099b2:	4603      	mov	r3, r0
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0f1      	beq.n	800999c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099bc:	4618      	mov	r0, r3
 80099be:	f7ff fdc8 	bl	8009552 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff fdec 	bl	80095a4 <LL_RCC_MSI_SetCalibTrimming>
 80099cc:	e015      	b.n	80099fa <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80099ce:	f7ff fda0 	bl	8009512 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80099d2:	f7fe fa47 	bl	8007e64 <HAL_GetTick>
 80099d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80099d8:	e008      	b.n	80099ec <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80099da:	f7fe fa43 	bl	8007e64 <HAL_GetTick>
 80099de:	4602      	mov	r2, r0
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	1ad3      	subs	r3, r2, r3
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	d901      	bls.n	80099ec <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e2d6      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 80099ec:	f7ff fda0 	bl	8009530 <LL_RCC_MSI_IsReady>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d1f1      	bne.n	80099da <HAL_RCC_OscConfig+0x11a>
 80099f6:	e000      	b.n	80099fa <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80099f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d047      	beq.n	8009a96 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a06:	f7ff fdf6 	bl	80095f6 <LL_RCC_GetSysClkSource>
 8009a0a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009a0c:	f7ff feef 	bl	80097ee <LL_RCC_PLL_GetMainSource>
 8009a10:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8009a12:	6a3b      	ldr	r3, [r7, #32]
 8009a14:	2b08      	cmp	r3, #8
 8009a16:	d005      	beq.n	8009a24 <HAL_RCC_OscConfig+0x164>
 8009a18:	6a3b      	ldr	r3, [r7, #32]
 8009a1a:	2b0c      	cmp	r3, #12
 8009a1c:	d108      	bne.n	8009a30 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8009a1e:	69fb      	ldr	r3, [r7, #28]
 8009a20:	2b03      	cmp	r3, #3
 8009a22:	d105      	bne.n	8009a30 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d134      	bne.n	8009a96 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e2b4      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a38:	d102      	bne.n	8009a40 <HAL_RCC_OscConfig+0x180>
 8009a3a:	f7ff fbdd 	bl	80091f8 <LL_RCC_HSE_Enable>
 8009a3e:	e001      	b.n	8009a44 <HAL_RCC_OscConfig+0x184>
 8009a40:	f7ff fbe9 	bl	8009216 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d012      	beq.n	8009a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a4c:	f7fe fa0a 	bl	8007e64 <HAL_GetTick>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a52:	e008      	b.n	8009a66 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a54:	f7fe fa06 	bl	8007e64 <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b64      	cmp	r3, #100	; 0x64
 8009a60:	d901      	bls.n	8009a66 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e299      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8009a66:	f7ff fbe5 	bl	8009234 <LL_RCC_HSE_IsReady>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0f1      	beq.n	8009a54 <HAL_RCC_OscConfig+0x194>
 8009a70:	e011      	b.n	8009a96 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a72:	f7fe f9f7 	bl	8007e64 <HAL_GetTick>
 8009a76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8009a78:	e008      	b.n	8009a8c <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a7a:	f7fe f9f3 	bl	8007e64 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b64      	cmp	r3, #100	; 0x64
 8009a86:	d901      	bls.n	8009a8c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e286      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8009a8c:	f7ff fbd2 	bl	8009234 <LL_RCC_HSE_IsReady>
 8009a90:	4603      	mov	r3, r0
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1f1      	bne.n	8009a7a <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	f003 0302 	and.w	r3, r3, #2
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d04c      	beq.n	8009b3c <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009aa2:	f7ff fda8 	bl	80095f6 <LL_RCC_GetSysClkSource>
 8009aa6:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009aa8:	f7ff fea1 	bl	80097ee <LL_RCC_PLL_GetMainSource>
 8009aac:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8009aae:	69bb      	ldr	r3, [r7, #24]
 8009ab0:	2b04      	cmp	r3, #4
 8009ab2:	d005      	beq.n	8009ac0 <HAL_RCC_OscConfig+0x200>
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	2b0c      	cmp	r3, #12
 8009ab8:	d10e      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b02      	cmp	r3, #2
 8009abe:	d10b      	bne.n	8009ad8 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d101      	bne.n	8009acc <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e266      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	691b      	ldr	r3, [r3, #16]
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f7ff fbf1 	bl	80092b8 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8009ad6:	e031      	b.n	8009b3c <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d019      	beq.n	8009b14 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009ae0:	f7ff fbba 	bl	8009258 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ae4:	f7fe f9be 	bl	8007e64 <HAL_GetTick>
 8009ae8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8009aea:	e008      	b.n	8009afe <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009aec:	f7fe f9ba 	bl	8007e64 <HAL_GetTick>
 8009af0:	4602      	mov	r2, r0
 8009af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009af4:	1ad3      	subs	r3, r2, r3
 8009af6:	2b02      	cmp	r3, #2
 8009af8:	d901      	bls.n	8009afe <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e24d      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8009afe:	f7ff fbc9 	bl	8009294 <LL_RCC_HSI_IsReady>
 8009b02:	4603      	mov	r3, r0
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d0f1      	beq.n	8009aec <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	f7ff fbd3 	bl	80092b8 <LL_RCC_HSI_SetCalibTrimming>
 8009b12:	e013      	b.n	8009b3c <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009b14:	f7ff fbaf 	bl	8009276 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b18:	f7fe f9a4 	bl	8007e64 <HAL_GetTick>
 8009b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8009b1e:	e008      	b.n	8009b32 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b20:	f7fe f9a0 	bl	8007e64 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e233      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8009b32:	f7ff fbaf 	bl	8009294 <LL_RCC_HSI_IsReady>
 8009b36:	4603      	mov	r3, r0
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1f1      	bne.n	8009b20 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	f003 0308 	and.w	r3, r3, #8
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d106      	bne.n	8009b56 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 80a3 	beq.w	8009c9c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d076      	beq.n	8009c4c <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	f003 0310 	and.w	r3, r3, #16
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d046      	beq.n	8009bf8 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8009b6a:	f7ff fc66 	bl	800943a <LL_RCC_LSI1_IsReady>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d113      	bne.n	8009b9c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8009b74:	f7ff fc3f 	bl	80093f6 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009b78:	f7fe f974 	bl	8007e64 <HAL_GetTick>
 8009b7c:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009b7e:	e008      	b.n	8009b92 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009b80:	f7fe f970 	bl	8007e64 <HAL_GetTick>
 8009b84:	4602      	mov	r2, r0
 8009b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b88:	1ad3      	subs	r3, r2, r3
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d901      	bls.n	8009b92 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8009b8e:	2303      	movs	r3, #3
 8009b90:	e203      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8009b92:	f7ff fc52 	bl	800943a <LL_RCC_LSI1_IsReady>
 8009b96:	4603      	mov	r3, r0
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d0f1      	beq.n	8009b80 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8009b9c:	f7ff fc5f 	bl	800945e <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ba0:	f7fe f960 	bl	8007e64 <HAL_GetTick>
 8009ba4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009ba6:	e008      	b.n	8009bba <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009ba8:	f7fe f95c 	bl	8007e64 <HAL_GetTick>
 8009bac:	4602      	mov	r2, r0
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	1ad3      	subs	r3, r2, r3
 8009bb2:	2b03      	cmp	r3, #3
 8009bb4:	d901      	bls.n	8009bba <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e1ef      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8009bba:	f7ff fc72 	bl	80094a2 <LL_RCC_LSI2_IsReady>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d0f1      	beq.n	8009ba8 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f7ff fc7c 	bl	80094c6 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8009bce:	f7ff fc23 	bl	8009418 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bd2:	f7fe f947 	bl	8007e64 <HAL_GetTick>
 8009bd6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009bd8:	e008      	b.n	8009bec <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009bda:	f7fe f943 	bl	8007e64 <HAL_GetTick>
 8009bde:	4602      	mov	r2, r0
 8009be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be2:	1ad3      	subs	r3, r2, r3
 8009be4:	2b02      	cmp	r3, #2
 8009be6:	d901      	bls.n	8009bec <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8009be8:	2303      	movs	r3, #3
 8009bea:	e1d6      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8009bec:	f7ff fc25 	bl	800943a <LL_RCC_LSI1_IsReady>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d1f1      	bne.n	8009bda <HAL_RCC_OscConfig+0x31a>
 8009bf6:	e051      	b.n	8009c9c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8009bf8:	f7ff fbfd 	bl	80093f6 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bfc:	f7fe f932 	bl	8007e64 <HAL_GetTick>
 8009c00:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009c02:	e00c      	b.n	8009c1e <HAL_RCC_OscConfig+0x35e>
 8009c04:	20000098 	.word	0x20000098
 8009c08:	2000009c 	.word	0x2000009c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009c0c:	f7fe f92a 	bl	8007e64 <HAL_GetTick>
 8009c10:	4602      	mov	r2, r0
 8009c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c14:	1ad3      	subs	r3, r2, r3
 8009c16:	2b02      	cmp	r3, #2
 8009c18:	d901      	bls.n	8009c1e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	e1bd      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8009c1e:	f7ff fc0c 	bl	800943a <LL_RCC_LSI1_IsReady>
 8009c22:	4603      	mov	r3, r0
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d0f1      	beq.n	8009c0c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8009c28:	f7ff fc2a 	bl	8009480 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009c2c:	e008      	b.n	8009c40 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c2e:	f7fe f919 	bl	8007e64 <HAL_GetTick>
 8009c32:	4602      	mov	r2, r0
 8009c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d901      	bls.n	8009c40 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8009c3c:	2303      	movs	r3, #3
 8009c3e:	e1ac      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8009c40:	f7ff fc2f 	bl	80094a2 <LL_RCC_LSI2_IsReady>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d1f1      	bne.n	8009c2e <HAL_RCC_OscConfig+0x36e>
 8009c4a:	e027      	b.n	8009c9c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8009c4c:	f7ff fc18 	bl	8009480 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c50:	f7fe f908 	bl	8007e64 <HAL_GetTick>
 8009c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c56:	e008      	b.n	8009c6a <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8009c58:	f7fe f904 	bl	8007e64 <HAL_GetTick>
 8009c5c:	4602      	mov	r2, r0
 8009c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c60:	1ad3      	subs	r3, r2, r3
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d901      	bls.n	8009c6a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8009c66:	2303      	movs	r3, #3
 8009c68:	e197      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8009c6a:	f7ff fc1a 	bl	80094a2 <LL_RCC_LSI2_IsReady>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1f1      	bne.n	8009c58 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8009c74:	f7ff fbd0 	bl	8009418 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c78:	f7fe f8f4 	bl	8007e64 <HAL_GetTick>
 8009c7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009c7e:	e008      	b.n	8009c92 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8009c80:	f7fe f8f0 	bl	8007e64 <HAL_GetTick>
 8009c84:	4602      	mov	r2, r0
 8009c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	2b02      	cmp	r3, #2
 8009c8c:	d901      	bls.n	8009c92 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8009c8e:	2303      	movs	r3, #3
 8009c90:	e183      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8009c92:	f7ff fbd2 	bl	800943a <LL_RCC_LSI1_IsReady>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d1f1      	bne.n	8009c80 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 0304 	and.w	r3, r3, #4
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d05b      	beq.n	8009d60 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ca8:	4ba7      	ldr	r3, [pc, #668]	; (8009f48 <HAL_RCC_OscConfig+0x688>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d114      	bne.n	8009cde <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8009cb4:	f7ff fa70 	bl	8009198 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009cb8:	f7fe f8d4 	bl	8007e64 <HAL_GetTick>
 8009cbc:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cbe:	e008      	b.n	8009cd2 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009cc0:	f7fe f8d0 	bl	8007e64 <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d901      	bls.n	8009cd2 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e163      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009cd2:	4b9d      	ldr	r3, [pc, #628]	; (8009f48 <HAL_RCC_OscConfig+0x688>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0f0      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	689b      	ldr	r3, [r3, #8]
 8009ce2:	2b01      	cmp	r3, #1
 8009ce4:	d102      	bne.n	8009cec <HAL_RCC_OscConfig+0x42c>
 8009ce6:	f7ff fb30 	bl	800934a <LL_RCC_LSE_Enable>
 8009cea:	e00c      	b.n	8009d06 <HAL_RCC_OscConfig+0x446>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	689b      	ldr	r3, [r3, #8]
 8009cf0:	2b05      	cmp	r3, #5
 8009cf2:	d104      	bne.n	8009cfe <HAL_RCC_OscConfig+0x43e>
 8009cf4:	f7ff fb4b 	bl	800938e <LL_RCC_LSE_EnableBypass>
 8009cf8:	f7ff fb27 	bl	800934a <LL_RCC_LSE_Enable>
 8009cfc:	e003      	b.n	8009d06 <HAL_RCC_OscConfig+0x446>
 8009cfe:	f7ff fb35 	bl	800936c <LL_RCC_LSE_Disable>
 8009d02:	f7ff fb55 	bl	80093b0 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d014      	beq.n	8009d38 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d0e:	f7fe f8a9 	bl	8007e64 <HAL_GetTick>
 8009d12:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8009d14:	e00a      	b.n	8009d2c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d16:	f7fe f8a5 	bl	8007e64 <HAL_GetTick>
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	1ad3      	subs	r3, r2, r3
 8009d20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d901      	bls.n	8009d2c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8009d28:	2303      	movs	r3, #3
 8009d2a:	e136      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 8009d2c:	f7ff fb51 	bl	80093d2 <LL_RCC_LSE_IsReady>
 8009d30:	4603      	mov	r3, r0
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0ef      	beq.n	8009d16 <HAL_RCC_OscConfig+0x456>
 8009d36:	e013      	b.n	8009d60 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d38:	f7fe f894 	bl	8007e64 <HAL_GetTick>
 8009d3c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8009d3e:	e00a      	b.n	8009d56 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009d40:	f7fe f890 	bl	8007e64 <HAL_GetTick>
 8009d44:	4602      	mov	r2, r0
 8009d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d48:	1ad3      	subs	r3, r2, r3
 8009d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d901      	bls.n	8009d56 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 8009d52:	2303      	movs	r3, #3
 8009d54:	e121      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 8009d56:	f7ff fb3c 	bl	80093d2 <LL_RCC_LSE_IsReady>
 8009d5a:	4603      	mov	r3, r0
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d1ef      	bne.n	8009d40 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d02c      	beq.n	8009dc6 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d014      	beq.n	8009d9e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009d74:	f7ff fab5 	bl	80092e2 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d78:	f7fe f874 	bl	8007e64 <HAL_GetTick>
 8009d7c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009d7e:	e008      	b.n	8009d92 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d80:	f7fe f870 	bl	8007e64 <HAL_GetTick>
 8009d84:	4602      	mov	r2, r0
 8009d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d88:	1ad3      	subs	r3, r2, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d901      	bls.n	8009d92 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e103      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8009d92:	f7ff fac8 	bl	8009326 <LL_RCC_HSI48_IsReady>
 8009d96:	4603      	mov	r3, r0
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d0f1      	beq.n	8009d80 <HAL_RCC_OscConfig+0x4c0>
 8009d9c:	e013      	b.n	8009dc6 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009d9e:	f7ff fab1 	bl	8009304 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009da2:	f7fe f85f 	bl	8007e64 <HAL_GetTick>
 8009da6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009da8:	e008      	b.n	8009dbc <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009daa:	f7fe f85b 	bl	8007e64 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	2b02      	cmp	r3, #2
 8009db6:	d901      	bls.n	8009dbc <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8009db8:	2303      	movs	r3, #3
 8009dba:	e0ee      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 8009dbc:	f7ff fab3 	bl	8009326 <LL_RCC_HSI48_IsReady>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d1f1      	bne.n	8009daa <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80e4 	beq.w	8009f98 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009dd0:	f7ff fc11 	bl	80095f6 <LL_RCC_GetSysClkSource>
 8009dd4:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8009dd6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	f040 80b4 	bne.w	8009f50 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	f003 0203 	and.w	r2, r3, #3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df2:	429a      	cmp	r2, r3
 8009df4:	d123      	bne.n	8009e3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d11c      	bne.n	8009e3e <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	0a1b      	lsrs	r3, r3, #8
 8009e08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d114      	bne.n	8009e3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8009e1e:	429a      	cmp	r2, r3
 8009e20:	d10d      	bne.n	8009e3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d106      	bne.n	8009e3e <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	d05d      	beq.n	8009efa <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2b0c      	cmp	r3, #12
 8009e42:	d058      	beq.n	8009ef6 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009e44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d001      	beq.n	8009e56 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 8009e52:	2301      	movs	r3, #1
 8009e54:	e0a1      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009e56:	f7ff fc84 	bl	8009762 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009e5a:	f7fe f803 	bl	8007e64 <HAL_GetTick>
 8009e5e:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e60:	e008      	b.n	8009e74 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e62:	f7fd ffff 	bl	8007e64 <HAL_GetTick>
 8009e66:	4602      	mov	r2, r0
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	1ad3      	subs	r3, r2, r3
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d901      	bls.n	8009e74 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e092      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d1ef      	bne.n	8009e62 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e86:	68da      	ldr	r2, [r3, #12]
 8009e88:	4b30      	ldr	r3, [pc, #192]	; (8009f4c <HAL_RCC_OscConfig+0x68c>)
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	687a      	ldr	r2, [r7, #4]
 8009e8e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8009e90:	687a      	ldr	r2, [r7, #4]
 8009e92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009e94:	4311      	orrs	r1, r2
 8009e96:	687a      	ldr	r2, [r7, #4]
 8009e98:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009e9a:	0212      	lsls	r2, r2, #8
 8009e9c:	4311      	orrs	r1, r2
 8009e9e:	687a      	ldr	r2, [r7, #4]
 8009ea0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009ea2:	4311      	orrs	r1, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009ea8:	4311      	orrs	r1, r2
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8009eae:	430a      	orrs	r2, r1
 8009eb0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009eb8:	f7ff fc44 	bl	8009744 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009ebc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009ec0:	68db      	ldr	r3, [r3, #12]
 8009ec2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009ec6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009eca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009ecc:	f7fd ffca 	bl	8007e64 <HAL_GetTick>
 8009ed0:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ed2:	e008      	b.n	8009ee6 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed4:	f7fd ffc6 	bl	8007e64 <HAL_GetTick>
 8009ed8:	4602      	mov	r2, r0
 8009eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009edc:	1ad3      	subs	r3, r2, r3
 8009ede:	2b02      	cmp	r3, #2
 8009ee0:	d901      	bls.n	8009ee6 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8009ee2:	2303      	movs	r3, #3
 8009ee4:	e059      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009ee6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d0ef      	beq.n	8009ed4 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009ef4:	e050      	b.n	8009f98 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009ef6:	2301      	movs	r3, #1
 8009ef8:	e04f      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d147      	bne.n	8009f98 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009f08:	f7ff fc1c 	bl	8009744 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009f0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009f1c:	f7fd ffa2 	bl	8007e64 <HAL_GetTick>
 8009f20:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f22:	e008      	b.n	8009f36 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f24:	f7fd ff9e 	bl	8007e64 <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e031      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d0ef      	beq.n	8009f24 <HAL_RCC_OscConfig+0x664>
 8009f44:	e028      	b.n	8009f98 <HAL_RCC_OscConfig+0x6d8>
 8009f46:	bf00      	nop
 8009f48:	58000400 	.word	0x58000400
 8009f4c:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	2b0c      	cmp	r3, #12
 8009f54:	d01e      	beq.n	8009f94 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f56:	f7ff fc04 	bl	8009762 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f5a:	f7fd ff83 	bl	8007e64 <HAL_GetTick>
 8009f5e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f60:	e008      	b.n	8009f74 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009f62:	f7fd ff7f 	bl	8007e64 <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	2b02      	cmp	r3, #2
 8009f6e:	d901      	bls.n	8009f74 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 8009f70:	2303      	movs	r3, #3
 8009f72:	e012      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009f74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1ef      	bne.n	8009f62 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8009f82:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f86:	68da      	ldr	r2, [r3, #12]
 8009f88:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009f8c:	4b05      	ldr	r3, [pc, #20]	; (8009fa4 <HAL_RCC_OscConfig+0x6e4>)
 8009f8e:	4013      	ands	r3, r2
 8009f90:	60cb      	str	r3, [r1, #12]
 8009f92:	e001      	b.n	8009f98 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009f94:	2301      	movs	r3, #1
 8009f96:	e000      	b.n	8009f9a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3734      	adds	r7, #52	; 0x34
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd90      	pop	{r4, r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	eefefffc 	.word	0xeefefffc

08009fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e12d      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009fbc:	4b98      	ldr	r3, [pc, #608]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f003 0307 	and.w	r3, r3, #7
 8009fc4:	683a      	ldr	r2, [r7, #0]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d91b      	bls.n	800a002 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fca:	4b95      	ldr	r3, [pc, #596]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f023 0207 	bic.w	r2, r3, #7
 8009fd2:	4993      	ldr	r1, [pc, #588]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fda:	f7fd ff43 	bl	8007e64 <HAL_GetTick>
 8009fde:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fe0:	e008      	b.n	8009ff4 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8009fe2:	f7fd ff3f 	bl	8007e64 <HAL_GetTick>
 8009fe6:	4602      	mov	r2, r0
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d901      	bls.n	8009ff4 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e111      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ff4:	4b8a      	ldr	r3, [pc, #552]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f003 0307 	and.w	r3, r3, #7
 8009ffc:	683a      	ldr	r2, [r7, #0]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d1ef      	bne.n	8009fe2 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d016      	beq.n	800a03c <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	689b      	ldr	r3, [r3, #8]
 800a012:	4618      	mov	r0, r3
 800a014:	f7ff fafb 	bl	800960e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a018:	f7fd ff24 	bl	8007e64 <HAL_GetTick>
 800a01c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a01e:	e008      	b.n	800a032 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a020:	f7fd ff20 	bl	8007e64 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	1ad3      	subs	r3, r2, r3
 800a02a:	2b02      	cmp	r3, #2
 800a02c:	d901      	bls.n	800a032 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800a02e:	2303      	movs	r3, #3
 800a030:	e0f2      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800a032:	f7ff fbe8 	bl	8009806 <LL_RCC_IsActiveFlag_HPRE>
 800a036:	4603      	mov	r3, r0
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d0f1      	beq.n	800a020 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	f003 0320 	and.w	r3, r3, #32
 800a044:	2b00      	cmp	r3, #0
 800a046:	d016      	beq.n	800a076 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	695b      	ldr	r3, [r3, #20]
 800a04c:	4618      	mov	r0, r3
 800a04e:	f7ff faf2 	bl	8009636 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a052:	f7fd ff07 	bl	8007e64 <HAL_GetTick>
 800a056:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a058:	e008      	b.n	800a06c <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a05a:	f7fd ff03 	bl	8007e64 <HAL_GetTick>
 800a05e:	4602      	mov	r2, r0
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	1ad3      	subs	r3, r2, r3
 800a064:	2b02      	cmp	r3, #2
 800a066:	d901      	bls.n	800a06c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800a068:	2303      	movs	r3, #3
 800a06a:	e0d5      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800a06c:	f7ff fbdd 	bl	800982a <LL_RCC_IsActiveFlag_C2HPRE>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0f1      	beq.n	800a05a <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d016      	beq.n	800a0b0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	4618      	mov	r0, r3
 800a088:	f7ff faeb 	bl	8009662 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a08c:	f7fd feea 	bl	8007e64 <HAL_GetTick>
 800a090:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a094:	f7fd fee6 	bl	8007e64 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b02      	cmp	r3, #2
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e0b8      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800a0a6:	f7ff fbd3 	bl	8009850 <LL_RCC_IsActiveFlag_SHDHPRE>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d0f1      	beq.n	800a094 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0304 	and.w	r3, r3, #4
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d016      	beq.n	800a0ea <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7ff fae5 	bl	8009690 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a0c6:	f7fd fecd 	bl	8007e64 <HAL_GetTick>
 800a0ca:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a0cc:	e008      	b.n	800a0e0 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a0ce:	f7fd fec9 	bl	8007e64 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	2b02      	cmp	r3, #2
 800a0da:	d901      	bls.n	800a0e0 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800a0dc:	2303      	movs	r3, #3
 800a0de:	e09b      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800a0e0:	f7ff fbc9 	bl	8009876 <LL_RCC_IsActiveFlag_PPRE1>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d0f1      	beq.n	800a0ce <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0308 	and.w	r3, r3, #8
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d017      	beq.n	800a126 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	00db      	lsls	r3, r3, #3
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	f7ff fadb 	bl	80096b8 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800a102:	f7fd feaf 	bl	8007e64 <HAL_GetTick>
 800a106:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a108:	e008      	b.n	800a11c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800a10a:	f7fd feab 	bl	8007e64 <HAL_GetTick>
 800a10e:	4602      	mov	r2, r0
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	1ad3      	subs	r3, r2, r3
 800a114:	2b02      	cmp	r3, #2
 800a116:	d901      	bls.n	800a11c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 800a118:	2303      	movs	r3, #3
 800a11a:	e07d      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800a11c:	f7ff fbbd 	bl	800989a <LL_RCC_IsActiveFlag_PPRE2>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0f1      	beq.n	800a10a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d043      	beq.n	800a1ba <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b02      	cmp	r3, #2
 800a138:	d106      	bne.n	800a148 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800a13a:	f7ff f87b 	bl	8009234 <LL_RCC_HSE_IsReady>
 800a13e:	4603      	mov	r3, r0
 800a140:	2b00      	cmp	r3, #0
 800a142:	d11e      	bne.n	800a182 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a144:	2301      	movs	r3, #1
 800a146:	e067      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d106      	bne.n	800a15e <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800a150:	f7ff fb16 	bl	8009780 <LL_RCC_PLL_IsReady>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d113      	bne.n	800a182 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a15a:	2301      	movs	r3, #1
 800a15c:	e05c      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d106      	bne.n	800a174 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800a166:	f7ff f9e3 	bl	8009530 <LL_RCC_MSI_IsReady>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d108      	bne.n	800a182 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e051      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 800a174:	f7ff f88e 	bl	8009294 <LL_RCC_HSI_IsReady>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d101      	bne.n	800a182 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800a17e:	2301      	movs	r3, #1
 800a180:	e04a      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	4618      	mov	r0, r3
 800a188:	f7ff fa21 	bl	80095ce <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a18c:	f7fd fe6a 	bl	8007e64 <HAL_GetTick>
 800a190:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a192:	e00a      	b.n	800a1aa <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a194:	f7fd fe66 	bl	8007e64 <HAL_GetTick>
 800a198:	4602      	mov	r2, r0
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	1ad3      	subs	r3, r2, r3
 800a19e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d901      	bls.n	800a1aa <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800a1a6:	2303      	movs	r3, #3
 800a1a8:	e036      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1aa:	f7ff fa24 	bl	80095f6 <LL_RCC_GetSysClkSource>
 800a1ae:	4602      	mov	r2, r0
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	429a      	cmp	r2, r3
 800a1b8:	d1ec      	bne.n	800a194 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a1ba:	4b19      	ldr	r3, [pc, #100]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0307 	and.w	r3, r3, #7
 800a1c2:	683a      	ldr	r2, [r7, #0]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d21b      	bcs.n	800a200 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a1c8:	4b15      	ldr	r3, [pc, #84]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	f023 0207 	bic.w	r2, r3, #7
 800a1d0:	4913      	ldr	r1, [pc, #76]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a1d8:	f7fd fe44 	bl	8007e64 <HAL_GetTick>
 800a1dc:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1de:	e008      	b.n	800a1f2 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a1e0:	f7fd fe40 	bl	8007e64 <HAL_GetTick>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	1ad3      	subs	r3, r2, r3
 800a1ea:	2b02      	cmp	r3, #2
 800a1ec:	d901      	bls.n	800a1f2 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800a1ee:	2303      	movs	r3, #3
 800a1f0:	e012      	b.n	800a218 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a1f2:	4b0b      	ldr	r3, [pc, #44]	; (800a220 <HAL_RCC_ClockConfig+0x278>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0307 	and.w	r3, r3, #7
 800a1fa:	683a      	ldr	r2, [r7, #0]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d1ef      	bne.n	800a1e0 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800a200:	f000 f87e 	bl	800a300 <HAL_RCC_GetHCLKFreq>
 800a204:	4603      	mov	r3, r0
 800a206:	4a07      	ldr	r2, [pc, #28]	; (800a224 <HAL_RCC_ClockConfig+0x27c>)
 800a208:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800a20a:	f7fd fe37 	bl	8007e7c <HAL_GetTickPrio>
 800a20e:	4603      	mov	r3, r0
 800a210:	4618      	mov	r0, r3
 800a212:	f7fd fdd9 	bl	8007dc8 <HAL_InitTick>
 800a216:	4603      	mov	r3, r0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	58004000 	.word	0x58004000
 800a224:	20000098 	.word	0x20000098

0800a228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a228:	b590      	push	{r4, r7, lr}
 800a22a:	b085      	sub	sp, #20
 800a22c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a22e:	f7ff f9e2 	bl	80095f6 <LL_RCC_GetSysClkSource>
 800a232:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d10a      	bne.n	800a250 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a23a:	f7ff f99e 	bl	800957a <LL_RCC_MSI_GetRange>
 800a23e:	4603      	mov	r3, r0
 800a240:	091b      	lsrs	r3, r3, #4
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	4a2b      	ldr	r2, [pc, #172]	; (800a2f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a248:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a24c:	60fb      	str	r3, [r7, #12]
 800a24e:	e04b      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b04      	cmp	r3, #4
 800a254:	d102      	bne.n	800a25c <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a256:	4b28      	ldr	r3, [pc, #160]	; (800a2f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a258:	60fb      	str	r3, [r7, #12]
 800a25a:	e045      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2b08      	cmp	r3, #8
 800a260:	d10a      	bne.n	800a278 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a262:	f7fe ffb7 	bl	80091d4 <LL_RCC_HSE_IsEnabledDiv2>
 800a266:	4603      	mov	r3, r0
 800a268:	2b01      	cmp	r3, #1
 800a26a:	d102      	bne.n	800a272 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800a26c:	4b22      	ldr	r3, [pc, #136]	; (800a2f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a26e:	60fb      	str	r3, [r7, #12]
 800a270:	e03a      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 800a272:	4b22      	ldr	r3, [pc, #136]	; (800a2fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800a274:	60fb      	str	r3, [r7, #12]
 800a276:	e037      	b.n	800a2e8 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 800a278:	f7ff fab9 	bl	80097ee <LL_RCC_PLL_GetMainSource>
 800a27c:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	2b02      	cmp	r3, #2
 800a282:	d003      	beq.n	800a28c <HAL_RCC_GetSysClockFreq+0x64>
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2b03      	cmp	r3, #3
 800a288:	d003      	beq.n	800a292 <HAL_RCC_GetSysClockFreq+0x6a>
 800a28a:	e00d      	b.n	800a2a8 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 800a28c:	4b1a      	ldr	r3, [pc, #104]	; (800a2f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a28e:	60bb      	str	r3, [r7, #8]
        break;
 800a290:	e015      	b.n	800a2be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800a292:	f7fe ff9f 	bl	80091d4 <LL_RCC_HSE_IsEnabledDiv2>
 800a296:	4603      	mov	r3, r0
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d102      	bne.n	800a2a2 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800a29c:	4b16      	ldr	r3, [pc, #88]	; (800a2f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a29e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800a2a0:	e00d      	b.n	800a2be <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 800a2a2:	4b16      	ldr	r3, [pc, #88]	; (800a2fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800a2a4:	60bb      	str	r3, [r7, #8]
        break;
 800a2a6:	e00a      	b.n	800a2be <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 800a2a8:	f7ff f967 	bl	800957a <LL_RCC_MSI_GetRange>
 800a2ac:	4603      	mov	r3, r0
 800a2ae:	091b      	lsrs	r3, r3, #4
 800a2b0:	f003 030f 	and.w	r3, r3, #15
 800a2b4:	4a0f      	ldr	r2, [pc, #60]	; (800a2f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800a2b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2ba:	60bb      	str	r3, [r7, #8]
        break;
 800a2bc:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800a2be:	f7ff fa71 	bl	80097a4 <LL_RCC_PLL_GetN>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	fb03 f402 	mul.w	r4, r3, r2
 800a2ca:	f7ff fa84 	bl	80097d6 <LL_RCC_PLL_GetDivider>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	091b      	lsrs	r3, r3, #4
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	fbb4 f4f3 	udiv	r4, r4, r3
 800a2d8:	f7ff fa71 	bl	80097be <LL_RCC_PLL_GetR>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	0f5b      	lsrs	r3, r3, #29
 800a2e0:	3301      	adds	r3, #1
 800a2e2:	fbb4 f3f3 	udiv	r3, r4, r3
 800a2e6:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	bd90      	pop	{r4, r7, pc}
 800a2f2:	bf00      	nop
 800a2f4:	08032df0 	.word	0x08032df0
 800a2f8:	00f42400 	.word	0x00f42400
 800a2fc:	01e84800 	.word	0x01e84800

0800a300 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a300:	b598      	push	{r3, r4, r7, lr}
 800a302:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800a304:	f7ff ff90 	bl	800a228 <HAL_RCC_GetSysClockFreq>
 800a308:	4604      	mov	r4, r0
 800a30a:	f7ff f9e9 	bl	80096e0 <LL_RCC_GetAHBPrescaler>
 800a30e:	4603      	mov	r3, r0
 800a310:	091b      	lsrs	r3, r3, #4
 800a312:	f003 030f 	and.w	r3, r3, #15
 800a316:	4a03      	ldr	r2, [pc, #12]	; (800a324 <HAL_RCC_GetHCLKFreq+0x24>)
 800a318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a31c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800a320:	4618      	mov	r0, r3
 800a322:	bd98      	pop	{r3, r4, r7, pc}
 800a324:	08032d90 	.word	0x08032d90

0800a328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a328:	b598      	push	{r3, r4, r7, lr}
 800a32a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800a32c:	f7ff ffe8 	bl	800a300 <HAL_RCC_GetHCLKFreq>
 800a330:	4604      	mov	r4, r0
 800a332:	f7ff f9ef 	bl	8009714 <LL_RCC_GetAPB1Prescaler>
 800a336:	4603      	mov	r3, r0
 800a338:	0a1b      	lsrs	r3, r3, #8
 800a33a:	f003 0307 	and.w	r3, r3, #7
 800a33e:	4a04      	ldr	r2, [pc, #16]	; (800a350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a344:	f003 031f 	and.w	r3, r3, #31
 800a348:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	bd98      	pop	{r3, r4, r7, pc}
 800a350:	08032dd0 	.word	0x08032dd0

0800a354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a354:	b598      	push	{r3, r4, r7, lr}
 800a356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800a358:	f7ff ffd2 	bl	800a300 <HAL_RCC_GetHCLKFreq>
 800a35c:	4604      	mov	r4, r0
 800a35e:	f7ff f9e5 	bl	800972c <LL_RCC_GetAPB2Prescaler>
 800a362:	4603      	mov	r3, r0
 800a364:	0adb      	lsrs	r3, r3, #11
 800a366:	f003 0307 	and.w	r3, r3, #7
 800a36a:	4a04      	ldr	r2, [pc, #16]	; (800a37c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a36c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a370:	f003 031f 	and.w	r3, r3, #31
 800a374:	fa24 f303 	lsr.w	r3, r4, r3
}
 800a378:	4618      	mov	r0, r3
 800a37a:	bd98      	pop	{r3, r4, r7, pc}
 800a37c:	08032dd0 	.word	0x08032dd0

0800a380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800a380:	b590      	push	{r4, r7, lr}
 800a382:	b085      	sub	sp, #20
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2bb0      	cmp	r3, #176	; 0xb0
 800a38c:	d903      	bls.n	800a396 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 800a38e:	4b15      	ldr	r3, [pc, #84]	; (800a3e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a392:	60fb      	str	r3, [r7, #12]
 800a394:	e007      	b.n	800a3a6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	091b      	lsrs	r3, r3, #4
 800a39a:	f003 030f 	and.w	r3, r3, #15
 800a39e:	4a11      	ldr	r2, [pc, #68]	; (800a3e4 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 800a3a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3a4:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 800a3a6:	f7ff f9a7 	bl	80096f8 <LL_RCC_GetAHB4Prescaler>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	091b      	lsrs	r3, r3, #4
 800a3ae:	f003 030f 	and.w	r3, r3, #15
 800a3b2:	4a0d      	ldr	r2, [pc, #52]	; (800a3e8 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 800a3b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a3b8:	68fa      	ldr	r2, [r7, #12]
 800a3ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3be:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800a3c0:	68bb      	ldr	r3, [r7, #8]
 800a3c2:	4a0a      	ldr	r2, [pc, #40]	; (800a3ec <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 800a3c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3c8:	0c9c      	lsrs	r4, r3, #18
 800a3ca:	f7fe fef5 	bl	80091b8 <HAL_PWREx_GetVoltageRange>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	4619      	mov	r1, r3
 800a3d2:	4620      	mov	r0, r4
 800a3d4:	f000 f80c 	bl	800a3f0 <RCC_SetFlashLatency>
 800a3d8:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3714      	adds	r7, #20
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd90      	pop	{r4, r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	08032df0 	.word	0x08032df0
 800a3e8:	08032d90 	.word	0x08032d90
 800a3ec:	431bde83 	.word	0x431bde83

0800a3f0 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 800a3f0:	b590      	push	{r4, r7, lr}
 800a3f2:	b093      	sub	sp, #76	; 0x4c
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800a3fa:	4b37      	ldr	r3, [pc, #220]	; (800a4d8 <RCC_SetFlashLatency+0xe8>)
 800a3fc:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800a400:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a402:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 800a406:	4a35      	ldr	r2, [pc, #212]	; (800a4dc <RCC_SetFlashLatency+0xec>)
 800a408:	f107 031c 	add.w	r3, r7, #28
 800a40c:	ca07      	ldmia	r2, {r0, r1, r2}
 800a40e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 800a412:	4b33      	ldr	r3, [pc, #204]	; (800a4e0 <RCC_SetFlashLatency+0xf0>)
 800a414:	f107 040c 	add.w	r4, r7, #12
 800a418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a41a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800a41e:	2300      	movs	r3, #0
 800a420:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a428:	d11a      	bne.n	800a460 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a42a:	2300      	movs	r3, #0
 800a42c:	643b      	str	r3, [r7, #64]	; 0x40
 800a42e:	e013      	b.n	800a458 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800a430:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	3348      	adds	r3, #72	; 0x48
 800a436:	443b      	add	r3, r7
 800a438:	f853 3c20 	ldr.w	r3, [r3, #-32]
 800a43c:	687a      	ldr	r2, [r7, #4]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d807      	bhi.n	800a452 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a442:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a444:	009b      	lsls	r3, r3, #2
 800a446:	3348      	adds	r3, #72	; 0x48
 800a448:	443b      	add	r3, r7
 800a44a:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a44e:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a450:	e020      	b.n	800a494 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800a452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a454:	3301      	adds	r3, #1
 800a456:	643b      	str	r3, [r7, #64]	; 0x40
 800a458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a45a:	2b03      	cmp	r3, #3
 800a45c:	d9e8      	bls.n	800a430 <RCC_SetFlashLatency+0x40>
 800a45e:	e019      	b.n	800a494 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a460:	2300      	movs	r3, #0
 800a462:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a464:	e013      	b.n	800a48e <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800a466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	3348      	adds	r3, #72	; 0x48
 800a46c:	443b      	add	r3, r7
 800a46e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	429a      	cmp	r2, r3
 800a476:	d807      	bhi.n	800a488 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800a478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	3348      	adds	r3, #72	; 0x48
 800a47e:	443b      	add	r3, r7
 800a480:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 800a484:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 800a486:	e005      	b.n	800a494 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800a488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a48a:	3301      	adds	r3, #1
 800a48c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a48e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a490:	2b02      	cmp	r3, #2
 800a492:	d9e8      	bls.n	800a466 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 800a494:	4b13      	ldr	r3, [pc, #76]	; (800a4e4 <RCC_SetFlashLatency+0xf4>)
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	f023 0207 	bic.w	r2, r3, #7
 800a49c:	4911      	ldr	r1, [pc, #68]	; (800a4e4 <RCC_SetFlashLatency+0xf4>)
 800a49e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4a0:	4313      	orrs	r3, r2
 800a4a2:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4a4:	f7fd fcde 	bl	8007e64 <HAL_GetTick>
 800a4a8:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a4aa:	e008      	b.n	800a4be <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800a4ac:	f7fd fcda 	bl	8007e64 <HAL_GetTick>
 800a4b0:	4602      	mov	r2, r0
 800a4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e007      	b.n	800a4ce <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800a4be:	4b09      	ldr	r3, [pc, #36]	; (800a4e4 <RCC_SetFlashLatency+0xf4>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f003 0307 	and.w	r3, r3, #7
 800a4c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d1ef      	bne.n	800a4ac <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	374c      	adds	r7, #76	; 0x4c
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd90      	pop	{r4, r7, pc}
 800a4d6:	bf00      	nop
 800a4d8:	0802edcc 	.word	0x0802edcc
 800a4dc:	0802eddc 	.word	0x0802eddc
 800a4e0:	0802ede8 	.word	0x0802ede8
 800a4e4:	58004000 	.word	0x58004000

0800a4e8 <LL_RCC_LSE_IsEnabled>:
{
 800a4e8:	b480      	push	{r7}
 800a4ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800a4ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a4f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f4:	f003 0301 	and.w	r3, r3, #1
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d101      	bne.n	800a500 <LL_RCC_LSE_IsEnabled+0x18>
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e000      	b.n	800a502 <LL_RCC_LSE_IsEnabled+0x1a>
 800a500:	2300      	movs	r3, #0
}
 800a502:	4618      	mov	r0, r3
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <LL_RCC_LSE_IsReady>:
{
 800a50c:	b480      	push	{r7}
 800a50e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800a510:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d101      	bne.n	800a524 <LL_RCC_LSE_IsReady+0x18>
 800a520:	2301      	movs	r3, #1
 800a522:	e000      	b.n	800a526 <LL_RCC_LSE_IsReady+0x1a>
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <LL_RCC_SetRFWKPClockSource>:
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 800a538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a53c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a540:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800a544:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4313      	orrs	r3, r2
 800a54c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 800a550:	bf00      	nop
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <LL_RCC_SetSMPSClockSource>:
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 800a564:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a56a:	f023 0203 	bic.w	r2, r3, #3
 800a56e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	4313      	orrs	r3, r2
 800a576:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a578:	bf00      	nop
 800a57a:	370c      	adds	r7, #12
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <LL_RCC_SetSMPSPrescaler>:
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 800a58c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a596:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4313      	orrs	r3, r2
 800a59e:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a5a0:	bf00      	nop
 800a5a2:	370c      	adds	r7, #12
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr

0800a5ac <LL_RCC_SetUSARTClockSource>:
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 800a5b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5bc:	f023 0203 	bic.w	r2, r3, #3
 800a5c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a5cc:	bf00      	nop
 800a5ce:	370c      	adds	r7, #12
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d6:	4770      	bx	lr

0800a5d8 <LL_RCC_SetLPUARTClockSource>:
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b083      	sub	sp, #12
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 800a5e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a5e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a5ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4313      	orrs	r3, r2
 800a5f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a5f8:	bf00      	nop
 800a5fa:	370c      	adds	r7, #12
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a602:	4770      	bx	lr

0800a604 <LL_RCC_SetI2CClockSource>:
{
 800a604:	b480      	push	{r7}
 800a606:	b083      	sub	sp, #12
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800a60c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a610:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	091b      	lsrs	r3, r3, #4
 800a618:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a61c:	43db      	mvns	r3, r3
 800a61e:	401a      	ands	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	011b      	lsls	r3, r3, #4
 800a624:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800a628:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a62c:	4313      	orrs	r3, r2
 800a62e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a632:	bf00      	nop
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr

0800a63e <LL_RCC_SetLPTIMClockSource>:
{
 800a63e:	b480      	push	{r7}
 800a640:	b083      	sub	sp, #12
 800a642:	af00      	add	r7, sp, #0
 800a644:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800a646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a64a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	0c1b      	lsrs	r3, r3, #16
 800a652:	041b      	lsls	r3, r3, #16
 800a654:	43db      	mvns	r3, r3
 800a656:	401a      	ands	r2, r3
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	041b      	lsls	r3, r3, #16
 800a65c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a660:	4313      	orrs	r3, r2
 800a662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a666:	bf00      	nop
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <LL_RCC_SetSAIClockSource>:
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 800a67a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a682:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a686:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a692:	bf00      	nop
 800a694:	370c      	adds	r7, #12
 800a696:	46bd      	mov	sp, r7
 800a698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69c:	4770      	bx	lr

0800a69e <LL_RCC_SetRNGClockSource>:
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b083      	sub	sp, #12
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800a6a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ae:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800a6b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a6be:	bf00      	nop
 800a6c0:	370c      	adds	r7, #12
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c8:	4770      	bx	lr

0800a6ca <LL_RCC_SetCLK48ClockSource>:
{
 800a6ca:	b480      	push	{r7}
 800a6cc:	b083      	sub	sp, #12
 800a6ce:	af00      	add	r7, sp, #0
 800a6d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 800a6d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a6d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6da:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a6de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a6ea:	bf00      	nop
 800a6ec:	370c      	adds	r7, #12
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f4:	4770      	bx	lr

0800a6f6 <LL_RCC_SetUSBClockSource>:
{
 800a6f6:	b580      	push	{r7, lr}
 800a6f8:	b082      	sub	sp, #8
 800a6fa:	af00      	add	r7, sp, #0
 800a6fc:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff ffe3 	bl	800a6ca <LL_RCC_SetCLK48ClockSource>
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <LL_RCC_SetADCClockSource>:
{
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 800a714:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a71c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a720:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	4313      	orrs	r3, r2
 800a728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <LL_RCC_SetRTCClockSource>:
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800a740:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a748:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a74c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	4313      	orrs	r3, r2
 800a754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <LL_RCC_GetRTCClockSource>:
{
 800a764:	b480      	push	{r7}
 800a766:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800a768:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a76c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a770:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800a774:	4618      	mov	r0, r3
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <LL_RCC_ForceBackupDomainReset>:
{
 800a77e:	b480      	push	{r7}
 800a780:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a78a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a78e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a792:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a796:	bf00      	nop
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <LL_RCC_ReleaseBackupDomainReset>:
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800a7a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800a7b8:	bf00      	nop
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr

0800a7c2 <LL_RCC_PLLSAI1_Enable>:
{
 800a7c2:	b480      	push	{r7}
 800a7c4:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a7c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a7d4:	6013      	str	r3, [r2, #0]
}
 800a7d6:	bf00      	nop
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <LL_RCC_PLLSAI1_Disable>:
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 800a7e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a7ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a7f2:	6013      	str	r3, [r2, #0]
}
 800a7f4:	bf00      	nop
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr

0800a7fe <LL_RCC_PLLSAI1_IsReady>:
{
 800a7fe:	b480      	push	{r7}
 800a800:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 800a802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a80c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a810:	d101      	bne.n	800a816 <LL_RCC_PLLSAI1_IsReady+0x18>
 800a812:	2301      	movs	r3, #1
 800a814:	e000      	b.n	800a818 <LL_RCC_PLLSAI1_IsReady+0x1a>
 800a816:	2300      	movs	r3, #0
}
 800a818:	4618      	mov	r0, r3
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr

0800a822 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a822:	b580      	push	{r7, lr}
 800a824:	b088      	sub	sp, #32
 800a826:	af00      	add	r7, sp, #0
 800a828:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 800a82a:	2300      	movs	r3, #0
 800a82c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800a82e:	2300      	movs	r3, #0
 800a830:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d034      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a842:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a846:	d021      	beq.n	800a88c <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a848:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a84c:	d81b      	bhi.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a84e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a852:	d01d      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800a854:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a858:	d815      	bhi.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00b      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x54>
 800a85e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a862:	d110      	bne.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 800a864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a86e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a872:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 800a874:	e00d      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3304      	adds	r3, #4
 800a87a:	4618      	mov	r0, r3
 800a87c:	f000 f947 	bl	800ab0e <RCCEx_PLLSAI1_ConfigNP>
 800a880:	4603      	mov	r3, r0
 800a882:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 800a884:	e005      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 800a886:	2301      	movs	r3, #1
 800a888:	77fb      	strb	r3, [r7, #31]
        break;
 800a88a:	e002      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a88c:	bf00      	nop
 800a88e:	e000      	b.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 800a890:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a892:	7ffb      	ldrb	r3, [r7, #31]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d105      	bne.n	800a8a4 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a89c:	4618      	mov	r0, r3
 800a89e:	f7ff fee8 	bl	800a672 <LL_RCC_SetSAIClockSource>
 800a8a2:	e001      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a4:	7ffb      	ldrb	r3, [r7, #31]
 800a8a6:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d046      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 800a8b4:	f7ff ff56 	bl	800a764 <LL_RCC_GetRTCClockSource>
 800a8b8:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	69ba      	ldr	r2, [r7, #24]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d03c      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800a8c4:	f7fe fc68 	bl	8009198 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d105      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff ff30 	bl	800a738 <LL_RCC_SetRTCClockSource>
 800a8d8:	e02e      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 800a8da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a8e2:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 800a8e4:	f7ff ff4b 	bl	800a77e <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 800a8e8:	f7ff ff5a 	bl	800a7a0 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 800a8fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 800a904:	f7ff fdf0 	bl	800a4e8 <LL_RCC_LSE_IsEnabled>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d114      	bne.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a90e:	f7fd faa9 	bl	8007e64 <HAL_GetTick>
 800a912:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 800a914:	e00b      	b.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a916:	f7fd faa5 	bl	8007e64 <HAL_GetTick>
 800a91a:	4602      	mov	r2, r0
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	1ad3      	subs	r3, r2, r3
 800a920:	f241 3288 	movw	r2, #5000	; 0x1388
 800a924:	4293      	cmp	r3, r2
 800a926:	d902      	bls.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	77fb      	strb	r3, [r7, #31]
              break;
 800a92c:	e004      	b.n	800a938 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 800a92e:	f7ff fded 	bl	800a50c <LL_RCC_LSE_IsReady>
 800a932:	4603      	mov	r3, r0
 800a934:	2b01      	cmp	r3, #1
 800a936:	d1ee      	bne.n	800a916 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 800a938:	7ffb      	ldrb	r3, [r7, #31]
 800a93a:	77bb      	strb	r3, [r7, #30]
 800a93c:	e001      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a93e:	7ffb      	ldrb	r3, [r7, #31]
 800a940:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	f003 0301 	and.w	r3, r3, #1
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d004      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	699b      	ldr	r3, [r3, #24]
 800a952:	4618      	mov	r0, r3
 800a954:	f7ff fe2a 	bl	800a5ac <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	f003 0302 	and.w	r3, r3, #2
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	69db      	ldr	r3, [r3, #28]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fe35 	bl	800a5d8 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	f003 0310 	and.w	r3, r3, #16
 800a976:	2b00      	cmp	r3, #0
 800a978:	d004      	beq.n	800a984 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a97e:	4618      	mov	r0, r3
 800a980:	f7ff fe5d 	bl	800a63e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f003 0320 	and.w	r3, r3, #32
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d004      	beq.n	800a99a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a994:	4618      	mov	r0, r3
 800a996:	f7ff fe52 	bl	800a63e <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	f003 0304 	and.w	r3, r3, #4
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d004      	beq.n	800a9b0 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6a1b      	ldr	r3, [r3, #32]
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f7ff fe2a 	bl	800a604 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f003 0308 	and.w	r3, r3, #8
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d004      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff fe1f 	bl	800a604 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d022      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	f7ff fe8d 	bl	800a6f6 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a9e4:	d107      	bne.n	800a9f6 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 800a9e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a9ea:	68db      	ldr	r3, [r3, #12]
 800a9ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a9f4:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a9fe:	d10b      	bne.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	3304      	adds	r3, #4
 800aa04:	4618      	mov	r0, r3
 800aa06:	f000 f8dd 	bl	800abc4 <RCCEx_PLLSAI1_ConfigNQ>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800aa0e:	7ffb      	ldrb	r3, [r7, #31]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d001      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 800aa14:	7ffb      	ldrb	r3, [r7, #31]
 800aa16:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d02b      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa2c:	d008      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa36:	d003      	beq.n	800aa40 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d105      	bne.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	4618      	mov	r0, r3
 800aa46:	f7ff fe2a 	bl	800a69e <LL_RCC_SetRNGClockSource>
 800aa4a:	e00a      	b.n	800aa62 <HAL_RCCEx_PeriphCLKConfig+0x240>
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800aa54:	60fb      	str	r3, [r7, #12]
 800aa56:	2000      	movs	r0, #0
 800aa58:	f7ff fe21 	bl	800a69e <LL_RCC_SetRNGClockSource>
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f7ff fe34 	bl	800a6ca <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa66:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 800aa6a:	d107      	bne.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800aa6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa70:	68db      	ldr	r3, [r3, #12]
 800aa72:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800aa7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d022      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff fe3d 	bl	800a70c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aa9a:	d107      	bne.n	800aaac <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800aa9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aaa0:	68db      	ldr	r3, [r3, #12]
 800aaa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aaa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aaaa:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aab0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aab4:	d10b      	bne.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	3304      	adds	r3, #4
 800aaba:	4618      	mov	r0, r3
 800aabc:	f000 f8dd 	bl	800ac7a <RCCEx_PLLSAI1_ConfigNR>
 800aac0:	4603      	mov	r3, r0
 800aac2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800aac4:	7ffb      	ldrb	r3, [r7, #31]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d001      	beq.n	800aace <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 800aaca:	7ffb      	ldrb	r3, [r7, #31]
 800aacc:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d004      	beq.n	800aae4 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff fd26 	bl	800a530 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d009      	beq.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff fd45 	bl	800a584 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fd2c 	bl	800a55c <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 800ab04:	7fbb      	ldrb	r3, [r7, #30]
}
 800ab06:	4618      	mov	r0, r3
 800ab08:	3720      	adds	r7, #32
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}

0800ab0e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ab0e:	b580      	push	{r7, lr}
 800ab10:	b084      	sub	sp, #16
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ab16:	2300      	movs	r3, #0
 800ab18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ab1a:	f7ff fe61 	bl	800a7e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ab1e:	f7fd f9a1 	bl	8007e64 <HAL_GetTick>
 800ab22:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab24:	e009      	b.n	800ab3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab26:	f7fd f99d 	bl	8007e64 <HAL_GetTick>
 800ab2a:	4602      	mov	r2, r0
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	1ad3      	subs	r3, r2, r3
 800ab30:	2b02      	cmp	r3, #2
 800ab32:	d902      	bls.n	800ab3a <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 800ab34:	2303      	movs	r3, #3
 800ab36:	73fb      	strb	r3, [r7, #15]
      break;
 800ab38:	e004      	b.n	800ab44 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ab3a:	f7ff fe60 	bl	800a7fe <LL_RCC_PLLSAI1_IsReady>
 800ab3e:	4603      	mov	r3, r0
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d1f0      	bne.n	800ab26 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 800ab44:	7bfb      	ldrb	r3, [r7, #15]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d137      	bne.n	800abba <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ab4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab4e:	691b      	ldr	r3, [r3, #16]
 800ab50:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	021b      	lsls	r3, r3, #8
 800ab5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 800ab62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab66:	691b      	ldr	r3, [r3, #16]
 800ab68:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	685b      	ldr	r3, [r3, #4]
 800ab70:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ab74:	4313      	orrs	r3, r2
 800ab76:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ab78:	f7ff fe23 	bl	800a7c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab7c:	f7fd f972 	bl	8007e64 <HAL_GetTick>
 800ab80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab82:	e009      	b.n	800ab98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ab84:	f7fd f96e 	bl	8007e64 <HAL_GetTick>
 800ab88:	4602      	mov	r2, r0
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	1ad3      	subs	r3, r2, r3
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	d902      	bls.n	800ab98 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 800ab92:	2303      	movs	r3, #3
 800ab94:	73fb      	strb	r3, [r7, #15]
        break;
 800ab96:	e004      	b.n	800aba2 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ab98:	f7ff fe31 	bl	800a7fe <LL_RCC_PLLSAI1_IsReady>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b01      	cmp	r3, #1
 800aba0:	d1f0      	bne.n	800ab84 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 800aba2:	7bfb      	ldrb	r3, [r7, #15]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d108      	bne.n	800abba <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800aba8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800abac:	691a      	ldr	r2, [r3, #16]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	691b      	ldr	r3, [r3, #16]
 800abb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800abb6:	4313      	orrs	r3, r2
 800abb8:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800abba:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3710      	adds	r7, #16
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b084      	sub	sp, #16
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800abcc:	2300      	movs	r3, #0
 800abce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800abd0:	f7ff fe06 	bl	800a7e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800abd4:	f7fd f946 	bl	8007e64 <HAL_GetTick>
 800abd8:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800abda:	e009      	b.n	800abf0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800abdc:	f7fd f942 	bl	8007e64 <HAL_GetTick>
 800abe0:	4602      	mov	r2, r0
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	1ad3      	subs	r3, r2, r3
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	d902      	bls.n	800abf0 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 800abea:	2303      	movs	r3, #3
 800abec:	73fb      	strb	r3, [r7, #15]
      break;
 800abee:	e004      	b.n	800abfa <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800abf0:	f7ff fe05 	bl	800a7fe <LL_RCC_PLLSAI1_IsReady>
 800abf4:	4603      	mov	r3, r0
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d1f0      	bne.n	800abdc <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 800abfa:	7bfb      	ldrb	r3, [r7, #15]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d137      	bne.n	800ac70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800ac00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac04:	691b      	ldr	r3, [r3, #16]
 800ac06:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	021b      	lsls	r3, r3, #8
 800ac10:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac14:	4313      	orrs	r3, r2
 800ac16:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 800ac18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac1c:	691b      	ldr	r3, [r3, #16]
 800ac1e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ac2e:	f7ff fdc8 	bl	800a7c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac32:	f7fd f917 	bl	8007e64 <HAL_GetTick>
 800ac36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac38:	e009      	b.n	800ac4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac3a:	f7fd f913 	bl	8007e64 <HAL_GetTick>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	1ad3      	subs	r3, r2, r3
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d902      	bls.n	800ac4e <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 800ac48:	2303      	movs	r3, #3
 800ac4a:	73fb      	strb	r3, [r7, #15]
        break;
 800ac4c:	e004      	b.n	800ac58 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ac4e:	f7ff fdd6 	bl	800a7fe <LL_RCC_PLLSAI1_IsReady>
 800ac52:	4603      	mov	r3, r0
 800ac54:	2b01      	cmp	r3, #1
 800ac56:	d1f0      	bne.n	800ac3a <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 800ac58:	7bfb      	ldrb	r3, [r7, #15]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d108      	bne.n	800ac70 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ac5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ac62:	691a      	ldr	r2, [r3, #16]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	691b      	ldr	r3, [r3, #16]
 800ac68:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac72:	4618      	mov	r0, r3
 800ac74:	3710      	adds	r7, #16
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}

0800ac7a <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 800ac7a:	b580      	push	{r7, lr}
 800ac7c:	b084      	sub	sp, #16
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800ac82:	2300      	movs	r3, #0
 800ac84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 800ac86:	f7ff fdab 	bl	800a7e0 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800ac8a:	f7fd f8eb 	bl	8007e64 <HAL_GetTick>
 800ac8e:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800ac90:	e009      	b.n	800aca6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800ac92:	f7fd f8e7 	bl	8007e64 <HAL_GetTick>
 800ac96:	4602      	mov	r2, r0
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	1ad3      	subs	r3, r2, r3
 800ac9c:	2b02      	cmp	r3, #2
 800ac9e:	d902      	bls.n	800aca6 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 800aca0:	2303      	movs	r3, #3
 800aca2:	73fb      	strb	r3, [r7, #15]
      break;
 800aca4:	e004      	b.n	800acb0 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 800aca6:	f7ff fdaa 	bl	800a7fe <LL_RCC_PLLSAI1_IsReady>
 800acaa:	4603      	mov	r3, r0
 800acac:	2b00      	cmp	r3, #0
 800acae:	d1f0      	bne.n	800ac92 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d137      	bne.n	800ad26 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 800acb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	021b      	lsls	r3, r3, #8
 800acc6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800acca:	4313      	orrs	r3, r2
 800accc:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800acce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ace0:	4313      	orrs	r3, r2
 800ace2:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 800ace4:	f7ff fd6d 	bl	800a7c2 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ace8:	f7fd f8bc 	bl	8007e64 <HAL_GetTick>
 800acec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800acee:	e009      	b.n	800ad04 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800acf0:	f7fd f8b8 	bl	8007e64 <HAL_GetTick>
 800acf4:	4602      	mov	r2, r0
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	1ad3      	subs	r3, r2, r3
 800acfa:	2b02      	cmp	r3, #2
 800acfc:	d902      	bls.n	800ad04 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800acfe:	2303      	movs	r3, #3
 800ad00:	73fb      	strb	r3, [r7, #15]
        break;
 800ad02:	e004      	b.n	800ad0e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800ad04:	f7ff fd7b 	bl	800a7fe <LL_RCC_PLLSAI1_IsReady>
 800ad08:	4603      	mov	r3, r0
 800ad0a:	2b01      	cmp	r3, #1
 800ad0c:	d1f0      	bne.n	800acf0 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800ad0e:	7bfb      	ldrb	r3, [r7, #15]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d108      	bne.n	800ad26 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 800ad14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ad18:	691a      	ldr	r2, [r3, #16]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	691b      	ldr	r3, [r3, #16]
 800ad1e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800ad22:	4313      	orrs	r3, r2
 800ad24:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 800ad26:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b082      	sub	sp, #8
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d101      	bne.n	800ad42 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e027      	b.n	800ad92 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	7a5b      	ldrb	r3, [r3, #9]
 800ad46:	b2db      	uxtb	r3, r3
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d105      	bne.n	800ad58 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f7f8 faa2 	bl	800329c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	f023 0120 	bic.w	r1, r3, #32
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	685a      	ldr	r2, [r3, #4]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	430a      	orrs	r2, r1
 800ad72:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	681a      	ldr	r2, [r3, #0]
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	f042 0204 	orr.w	r2, r2, #4
 800ad82:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	2201      	movs	r2, #1
 800ad88:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2200      	movs	r2, #0
 800ad8e:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3708      	adds	r7, #8
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
	...

0800ad9c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b084      	sub	sp, #16
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d101      	bne.n	800adae <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800adaa:	2301      	movs	r3, #1
 800adac:	e09f      	b.n	800aeee <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800adb4:	b2db      	uxtb	r3, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d106      	bne.n	800adc8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f7f8 fa94 	bl	80032f0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	2202      	movs	r2, #2
 800adcc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800add0:	4b49      	ldr	r3, [pc, #292]	; (800aef8 <HAL_RTC_Init+0x15c>)
 800add2:	68db      	ldr	r3, [r3, #12]
 800add4:	f003 0310 	and.w	r3, r3, #16
 800add8:	2b10      	cmp	r3, #16
 800adda:	d07e      	beq.n	800aeda <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	22ca      	movs	r2, #202	; 0xca
 800ade2:	625a      	str	r2, [r3, #36]	; 0x24
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2253      	movs	r2, #83	; 0x53
 800adea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 f8ab 	bl	800af48 <RTC_EnterInitMode>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d00a      	beq.n	800ae0e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	22ff      	movs	r2, #255	; 0xff
 800adfe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2204      	movs	r2, #4
 800ae04:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 800ae08:	2301      	movs	r3, #1
 800ae0a:	73fb      	strb	r3, [r7, #15]
 800ae0c:	e067      	b.n	800aede <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	689b      	ldr	r3, [r3, #8]
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	6812      	ldr	r2, [r2, #0]
 800ae18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ae1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae20:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6899      	ldr	r1, [r3, #8]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	685a      	ldr	r2, [r3, #4]
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	691b      	ldr	r3, [r3, #16]
 800ae30:	431a      	orrs	r2, r3
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	431a      	orrs	r2, r3
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	68d2      	ldr	r2, [r2, #12]
 800ae48:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	6919      	ldr	r1, [r3, #16]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	689b      	ldr	r3, [r3, #8]
 800ae54:	041a      	lsls	r2, r3, #16
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	430a      	orrs	r2, r1
 800ae5c:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	68da      	ldr	r2, [r3, #12]
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ae6c:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	f022 0203 	bic.w	r2, r2, #3
 800ae7c:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	69da      	ldr	r2, [r3, #28]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	695b      	ldr	r3, [r3, #20]
 800ae8c:	431a      	orrs	r2, r3
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	430a      	orrs	r2, r1
 800ae94:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d113      	bne.n	800aecc <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f829 	bl	800aefc <HAL_RTC_WaitForSynchro>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00d      	beq.n	800aecc <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	22ff      	movs	r2, #255	; 0xff
 800aeb6:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	2204      	movs	r2, #4
 800aebc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	2200      	movs	r2, #0
 800aec4:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 800aec8:	2301      	movs	r3, #1
 800aeca:	e010      	b.n	800aeee <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	22ff      	movs	r2, #255	; 0xff
 800aed2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 800aed4:	2300      	movs	r3, #0
 800aed6:	73fb      	strb	r3, [r7, #15]
 800aed8:	e001      	b.n	800aede <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800aede:	7bfb      	ldrb	r3, [r7, #15]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d103      	bne.n	800aeec <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3710      	adds	r7, #16
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}
 800aef6:	bf00      	nop
 800aef8:	40002800 	.word	0x40002800

0800aefc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	68da      	ldr	r2, [r3, #12]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800af12:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800af14:	f7fc ffa6 	bl	8007e64 <HAL_GetTick>
 800af18:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af1a:	e009      	b.n	800af30 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800af1c:	f7fc ffa2 	bl	8007e64 <HAL_GetTick>
 800af20:	4602      	mov	r2, r0
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af2a:	d901      	bls.n	800af30 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800af2c:	2303      	movs	r3, #3
 800af2e:	e007      	b.n	800af40 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68db      	ldr	r3, [r3, #12]
 800af36:	f003 0320 	and.w	r3, r3, #32
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d0ee      	beq.n	800af1c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800af3e:	2300      	movs	r3, #0
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d119      	bne.n	800af92 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f04f 32ff 	mov.w	r2, #4294967295
 800af66:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800af68:	f7fc ff7c 	bl	8007e64 <HAL_GetTick>
 800af6c:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af6e:	e009      	b.n	800af84 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800af70:	f7fc ff78 	bl	8007e64 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800af7e:	d901      	bls.n	800af84 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e007      	b.n	800af94 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0ee      	beq.n	800af70 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3710      	adds	r7, #16
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd80      	pop	{r7, pc}

0800af9c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b086      	sub	sp, #24
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	60f8      	str	r0, [r7, #12]
 800afa4:	60b9      	str	r1, [r7, #8]
 800afa6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800afae:	2b01      	cmp	r3, #1
 800afb0:	d101      	bne.n	800afb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 800afb2:	2302      	movs	r3, #2
 800afb4:	e0a8      	b.n	800b108 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2201      	movs	r2, #1
 800afba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2202      	movs	r2, #2
 800afc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	22ca      	movs	r2, #202	; 0xca
 800afcc:	625a      	str	r2, [r3, #36]	; 0x24
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2253      	movs	r2, #83	; 0x53
 800afd4:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	689b      	ldr	r3, [r3, #8]
 800afdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d020      	beq.n	800b026 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 800afe4:	f7fc ff3e 	bl	8007e64 <HAL_GetTick>
 800afe8:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800afea:	e015      	b.n	800b018 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800afec:	f7fc ff3a 	bl	8007e64 <HAL_GetTick>
 800aff0:	4602      	mov	r2, r0
 800aff2:	697b      	ldr	r3, [r7, #20]
 800aff4:	1ad3      	subs	r3, r2, r3
 800aff6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800affa:	d90d      	bls.n	800b018 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	22ff      	movs	r2, #255	; 0xff
 800b002:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	2203      	movs	r2, #3
 800b008:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	2200      	movs	r2, #0
 800b010:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 800b014:	2303      	movs	r3, #3
 800b016:	e077      	b.n	800b108 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	68db      	ldr	r3, [r3, #12]
 800b01e:	f003 0304 	and.w	r3, r3, #4
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1e2      	bne.n	800afec <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b034:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68db      	ldr	r3, [r3, #12]
 800b03c:	b2da      	uxtb	r2, r3
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800b046:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800b048:	f7fc ff0c 	bl	8007e64 <HAL_GetTick>
 800b04c:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b04e:	e015      	b.n	800b07c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800b050:	f7fc ff08 	bl	8007e64 <HAL_GetTick>
 800b054:	4602      	mov	r2, r0
 800b056:	697b      	ldr	r3, [r7, #20]
 800b058:	1ad3      	subs	r3, r2, r3
 800b05a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b05e:	d90d      	bls.n	800b07c <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	22ff      	movs	r2, #255	; 0xff
 800b066:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2203      	movs	r2, #3
 800b06c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800b078:	2303      	movs	r3, #3
 800b07a:	e045      	b.n	800b108 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	f003 0304 	and.w	r3, r3, #4
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0e2      	beq.n	800b050 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	68ba      	ldr	r2, [r7, #8]
 800b090:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	689a      	ldr	r2, [r3, #8]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f022 0207 	bic.w	r2, r2, #7
 800b0a0:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	6899      	ldr	r1, [r3, #8]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	430a      	orrs	r2, r1
 800b0b0:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800b0b2:	4b17      	ldr	r3, [pc, #92]	; (800b110 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b0b8:	4a15      	ldr	r2, [pc, #84]	; (800b110 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0be:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800b0c2:	4b13      	ldr	r3, [pc, #76]	; (800b110 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a12      	ldr	r2, [pc, #72]	; (800b110 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800b0c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0cc:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	689a      	ldr	r2, [r3, #8]
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b0dc:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	689a      	ldr	r2, [r3, #8]
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b0ec:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	22ff      	movs	r2, #255	; 0xff
 800b0f4:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3718      	adds	r7, #24
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}
 800b110:	58000800 	.word	0x58000800

0800b114 <LL_RCC_GetUSARTClockSource>:
{
 800b114:	b480      	push	{r7}
 800b116:	b083      	sub	sp, #12
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 800b11c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b120:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	4013      	ands	r3, r2
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <LL_RCC_GetLPUARTClockSource>:
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800b13c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800b140:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	4013      	ands	r3, r2
}
 800b148:	4618      	mov	r0, r3
 800b14a:	370c      	adds	r7, #12
 800b14c:	46bd      	mov	sp, r7
 800b14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b152:	4770      	bx	lr

0800b154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b082      	sub	sp, #8
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b162:	2301      	movs	r3, #1
 800b164:	e042      	b.n	800b1ec <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d106      	bne.n	800b17e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b178:	6878      	ldr	r0, [r7, #4]
 800b17a:	f7f7 ff9b 	bl	80030b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2224      	movs	r2, #36	; 0x24
 800b182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681a      	ldr	r2, [r3, #0]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f022 0201 	bic.w	r2, r2, #1
 800b194:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b19e:	6878      	ldr	r0, [r7, #4]
 800b1a0:	f000 fe60 	bl	800be64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fc35 	bl	800ba14 <UART_SetConfig>
 800b1aa:	4603      	mov	r3, r0
 800b1ac:	2b01      	cmp	r3, #1
 800b1ae:	d101      	bne.n	800b1b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	e01b      	b.n	800b1ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	685a      	ldr	r2, [r3, #4]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b1c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	689a      	ldr	r2, [r3, #8]
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b1d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681a      	ldr	r2, [r3, #0]
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f042 0201 	orr.w	r2, r2, #1
 800b1e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f000 fedf 	bl	800bfa8 <UART_CheckIdleState>
 800b1ea:	4603      	mov	r3, r0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3708      	adds	r7, #8
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b08a      	sub	sp, #40	; 0x28
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	60f8      	str	r0, [r7, #12]
 800b1fc:	60b9      	str	r1, [r7, #8]
 800b1fe:	4613      	mov	r3, r2
 800b200:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b208:	2b20      	cmp	r3, #32
 800b20a:	d137      	bne.n	800b27c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800b20c:	68bb      	ldr	r3, [r7, #8]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d002      	beq.n	800b218 <HAL_UART_Receive_IT+0x24>
 800b212:	88fb      	ldrh	r3, [r7, #6]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e030      	b.n	800b27e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a18      	ldr	r2, [pc, #96]	; (800b288 <HAL_UART_Receive_IT+0x94>)
 800b228:	4293      	cmp	r3, r2
 800b22a:	d01f      	beq.n	800b26c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b236:	2b00      	cmp	r3, #0
 800b238:	d018      	beq.n	800b26c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	e853 3f00 	ldrex	r3, [r3]
 800b246:	613b      	str	r3, [r7, #16]
   return(result);
 800b248:	693b      	ldr	r3, [r7, #16]
 800b24a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b24e:	627b      	str	r3, [r7, #36]	; 0x24
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	461a      	mov	r2, r3
 800b256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b258:	623b      	str	r3, [r7, #32]
 800b25a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25c:	69f9      	ldr	r1, [r7, #28]
 800b25e:	6a3a      	ldr	r2, [r7, #32]
 800b260:	e841 2300 	strex	r3, r2, [r1]
 800b264:	61bb      	str	r3, [r7, #24]
   return(result);
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1e6      	bne.n	800b23a <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b26c:	88fb      	ldrh	r3, [r7, #6]
 800b26e:	461a      	mov	r2, r3
 800b270:	68b9      	ldr	r1, [r7, #8]
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 ffb0 	bl	800c1d8 <UART_Start_Receive_IT>
 800b278:	4603      	mov	r3, r0
 800b27a:	e000      	b.n	800b27e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b27c:	2302      	movs	r3, #2
  }
}
 800b27e:	4618      	mov	r0, r3
 800b280:	3728      	adds	r7, #40	; 0x28
 800b282:	46bd      	mov	sp, r7
 800b284:	bd80      	pop	{r7, pc}
 800b286:	bf00      	nop
 800b288:	40008000 	.word	0x40008000

0800b28c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08a      	sub	sp, #40	; 0x28
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	4613      	mov	r3, r2
 800b298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b2a0:	2b20      	cmp	r3, #32
 800b2a2:	d167      	bne.n	800b374 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d002      	beq.n	800b2b0 <HAL_UART_Transmit_DMA+0x24>
 800b2aa:	88fb      	ldrh	r3, [r7, #6]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	e060      	b.n	800b376 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	68ba      	ldr	r2, [r7, #8]
 800b2b8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	88fa      	ldrh	r2, [r7, #6]
 800b2be:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	88fa      	ldrh	r2, [r7, #6]
 800b2c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2221      	movs	r2, #33	; 0x21
 800b2d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d028      	beq.n	800b334 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2e6:	4a26      	ldr	r2, [pc, #152]	; (800b380 <HAL_UART_Transmit_DMA+0xf4>)
 800b2e8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2ee:	4a25      	ldr	r2, [pc, #148]	; (800b384 <HAL_UART_Transmit_DMA+0xf8>)
 800b2f0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2f6:	4a24      	ldr	r2, [pc, #144]	; (800b388 <HAL_UART_Transmit_DMA+0xfc>)
 800b2f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2fe:	2200      	movs	r2, #0
 800b300:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30a:	4619      	mov	r1, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	3328      	adds	r3, #40	; 0x28
 800b312:	461a      	mov	r2, r3
 800b314:	88fb      	ldrh	r3, [r7, #6]
 800b316:	f7fd f817 	bl	8008348 <HAL_DMA_Start_IT>
 800b31a:	4603      	mov	r3, r0
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d009      	beq.n	800b334 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2210      	movs	r2, #16
 800b324:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2220      	movs	r2, #32
 800b32c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e020      	b.n	800b376 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	2240      	movs	r2, #64	; 0x40
 800b33a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	3308      	adds	r3, #8
 800b342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	e853 3f00 	ldrex	r3, [r3]
 800b34a:	613b      	str	r3, [r7, #16]
   return(result);
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b352:	627b      	str	r3, [r7, #36]	; 0x24
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	3308      	adds	r3, #8
 800b35a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35c:	623a      	str	r2, [r7, #32]
 800b35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b360:	69f9      	ldr	r1, [r7, #28]
 800b362:	6a3a      	ldr	r2, [r7, #32]
 800b364:	e841 2300 	strex	r3, r2, [r1]
 800b368:	61bb      	str	r3, [r7, #24]
   return(result);
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d1e5      	bne.n	800b33c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800b370:	2300      	movs	r3, #0
 800b372:	e000      	b.n	800b376 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800b374:	2302      	movs	r3, #2
  }
}
 800b376:	4618      	mov	r0, r3
 800b378:	3728      	adds	r7, #40	; 0x28
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	0800c56b 	.word	0x0800c56b
 800b384:	0800c605 	.word	0x0800c605
 800b388:	0800c621 	.word	0x0800c621

0800b38c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b0ba      	sub	sp, #232	; 0xe8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	69db      	ldr	r3, [r3, #28]
 800b39a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3b2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800b3b6:	f640 030f 	movw	r3, #2063	; 0x80f
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800b3c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d11b      	bne.n	800b400 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3cc:	f003 0320 	and.w	r3, r3, #32
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d015      	beq.n	800b400 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b3d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b3d8:	f003 0320 	and.w	r3, r3, #32
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d105      	bne.n	800b3ec <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b3e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d009      	beq.n	800b400 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	f000 82e3 	beq.w	800b9bc <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	4798      	blx	r3
      }
      return;
 800b3fe:	e2dd      	b.n	800b9bc <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b404:	2b00      	cmp	r3, #0
 800b406:	f000 8123 	beq.w	800b650 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b40a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b40e:	4b8d      	ldr	r3, [pc, #564]	; (800b644 <HAL_UART_IRQHandler+0x2b8>)
 800b410:	4013      	ands	r3, r2
 800b412:	2b00      	cmp	r3, #0
 800b414:	d106      	bne.n	800b424 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b416:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b41a:	4b8b      	ldr	r3, [pc, #556]	; (800b648 <HAL_UART_IRQHandler+0x2bc>)
 800b41c:	4013      	ands	r3, r2
 800b41e:	2b00      	cmp	r3, #0
 800b420:	f000 8116 	beq.w	800b650 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b428:	f003 0301 	and.w	r3, r3, #1
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d011      	beq.n	800b454 <HAL_UART_IRQHandler+0xc8>
 800b430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d00b      	beq.n	800b454 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	2201      	movs	r2, #1
 800b442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b44a:	f043 0201 	orr.w	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b458:	f003 0302 	and.w	r3, r3, #2
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d011      	beq.n	800b484 <HAL_UART_IRQHandler+0xf8>
 800b460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b464:	f003 0301 	and.w	r3, r3, #1
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2202      	movs	r2, #2
 800b472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b47a:	f043 0204 	orr.w	r2, r3, #4
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b488:	f003 0304 	and.w	r3, r3, #4
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d011      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x128>
 800b490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b494:	f003 0301 	and.w	r3, r3, #1
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d00b      	beq.n	800b4b4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2204      	movs	r2, #4
 800b4a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4aa:	f043 0202 	orr.w	r2, r3, #2
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b8:	f003 0308 	and.w	r3, r3, #8
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d017      	beq.n	800b4f0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4c4:	f003 0320 	and.w	r3, r3, #32
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d105      	bne.n	800b4d8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b4cc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b4d0:	4b5c      	ldr	r3, [pc, #368]	; (800b644 <HAL_UART_IRQHandler+0x2b8>)
 800b4d2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d00b      	beq.n	800b4f0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2208      	movs	r2, #8
 800b4de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b4e6:	f043 0208 	orr.w	r2, r3, #8
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b4f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d012      	beq.n	800b522 <HAL_UART_IRQHandler+0x196>
 800b4fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00c      	beq.n	800b522 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b518:	f043 0220 	orr.w	r2, r3, #32
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b528:	2b00      	cmp	r3, #0
 800b52a:	f000 8249 	beq.w	800b9c0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b532:	f003 0320 	and.w	r3, r3, #32
 800b536:	2b00      	cmp	r3, #0
 800b538:	d013      	beq.n	800b562 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b00      	cmp	r3, #0
 800b544:	d105      	bne.n	800b552 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b546:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b54a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d007      	beq.n	800b562 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b556:	2b00      	cmp	r3, #0
 800b558:	d003      	beq.n	800b562 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689b      	ldr	r3, [r3, #8]
 800b572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b576:	2b40      	cmp	r3, #64	; 0x40
 800b578:	d005      	beq.n	800b586 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b57a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b57e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b582:	2b00      	cmp	r3, #0
 800b584:	d054      	beq.n	800b630 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 ff89 	bl	800c49e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	689b      	ldr	r3, [r3, #8]
 800b592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b596:	2b40      	cmp	r3, #64	; 0x40
 800b598:	d146      	bne.n	800b628 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5a8:	e853 3f00 	ldrex	r3, [r3]
 800b5ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b5b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b5c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b5ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b5d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b5d6:	e841 2300 	strex	r3, r2, [r1]
 800b5da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b5de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1d9      	bne.n	800b59a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d017      	beq.n	800b620 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b5f6:	4a15      	ldr	r2, [pc, #84]	; (800b64c <HAL_UART_IRQHandler+0x2c0>)
 800b5f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b600:	4618      	mov	r0, r3
 800b602:	f7fc ff7b 	bl	80084fc <HAL_DMA_Abort_IT>
 800b606:	4603      	mov	r3, r0
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d019      	beq.n	800b640 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b614:	687a      	ldr	r2, [r7, #4]
 800b616:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b61a:	4610      	mov	r0, r2
 800b61c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b61e:	e00f      	b.n	800b640 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 f9e1 	bl	800b9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b626:	e00b      	b.n	800b640 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f9dd 	bl	800b9e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b62e:	e007      	b.n	800b640 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 f9d9 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b63e:	e1bf      	b.n	800b9c0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b640:	bf00      	nop
    return;
 800b642:	e1bd      	b.n	800b9c0 <HAL_UART_IRQHandler+0x634>
 800b644:	10000001 	.word	0x10000001
 800b648:	04000120 	.word	0x04000120
 800b64c:	0800c6a1 	.word	0x0800c6a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b654:	2b01      	cmp	r3, #1
 800b656:	f040 8153 	bne.w	800b900 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b65e:	f003 0310 	and.w	r3, r3, #16
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 814c 	beq.w	800b900 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b668:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b66c:	f003 0310 	and.w	r3, r3, #16
 800b670:	2b00      	cmp	r3, #0
 800b672:	f000 8145 	beq.w	800b900 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	2210      	movs	r2, #16
 800b67c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	689b      	ldr	r3, [r3, #8]
 800b684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b688:	2b40      	cmp	r3, #64	; 0x40
 800b68a:	f040 80bb 	bne.w	800b804 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	685b      	ldr	r3, [r3, #4]
 800b698:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b69c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f000 818f 	beq.w	800b9c4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b6ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	f080 8187 	bcs.w	800b9c4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b6bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	f003 0320 	and.w	r3, r3, #32
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	f040 8087 	bne.w	800b7e2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b6e0:	e853 3f00 	ldrex	r3, [r3]
 800b6e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b6e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b6ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b6fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b702:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b706:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b70a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b70e:	e841 2300 	strex	r3, r2, [r1]
 800b712:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1da      	bne.n	800b6d4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	3308      	adds	r3, #8
 800b724:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b726:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b728:	e853 3f00 	ldrex	r3, [r3]
 800b72c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b72e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b730:	f023 0301 	bic.w	r3, r3, #1
 800b734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3308      	adds	r3, #8
 800b73e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b742:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b746:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b748:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b74a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b74e:	e841 2300 	strex	r3, r2, [r1]
 800b752:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b754:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1e1      	bne.n	800b71e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	3308      	adds	r3, #8
 800b760:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b764:	e853 3f00 	ldrex	r3, [r3]
 800b768:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b76a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b76c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b770:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	3308      	adds	r3, #8
 800b77a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b77e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b780:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b782:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b784:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b786:	e841 2300 	strex	r3, r2, [r1]
 800b78a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b78c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d1e3      	bne.n	800b75a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2220      	movs	r2, #32
 800b796:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2200      	movs	r2, #0
 800b79e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7a8:	e853 3f00 	ldrex	r3, [r3]
 800b7ac:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b7ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7b0:	f023 0310 	bic.w	r3, r3, #16
 800b7b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b7c2:	65bb      	str	r3, [r7, #88]	; 0x58
 800b7c4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b7c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b7ca:	e841 2300 	strex	r3, r2, [r1]
 800b7ce:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b7d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1e4      	bne.n	800b7a0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fc fe2e 	bl	800843e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	1ad3      	subs	r3, r2, r3
 800b7f8:	b29b      	uxth	r3, r3
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f8fd 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b802:	e0df      	b.n	800b9c4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b810:	b29b      	uxth	r3, r3
 800b812:	1ad3      	subs	r3, r2, r3
 800b814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b81e:	b29b      	uxth	r3, r3
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 80d1 	beq.w	800b9c8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800b826:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	f000 80cc 	beq.w	800b9c8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b838:	e853 3f00 	ldrex	r3, [r3]
 800b83c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b83e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	461a      	mov	r2, r3
 800b84e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b852:	647b      	str	r3, [r7, #68]	; 0x44
 800b854:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b85a:	e841 2300 	strex	r3, r2, [r1]
 800b85e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1e4      	bne.n	800b830 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	3308      	adds	r3, #8
 800b86c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b870:	e853 3f00 	ldrex	r3, [r3]
 800b874:	623b      	str	r3, [r7, #32]
   return(result);
 800b876:	6a3b      	ldr	r3, [r7, #32]
 800b878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b87c:	f023 0301 	bic.w	r3, r3, #1
 800b880:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	3308      	adds	r3, #8
 800b88a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b88e:	633a      	str	r2, [r7, #48]	; 0x30
 800b890:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b892:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b896:	e841 2300 	strex	r3, r2, [r1]
 800b89a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d1e1      	bne.n	800b866 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2220      	movs	r2, #32
 800b8a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	e853 3f00 	ldrex	r3, [r3]
 800b8c2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f023 0310 	bic.w	r3, r3, #16
 800b8ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b8d8:	61fb      	str	r3, [r7, #28]
 800b8da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8dc:	69b9      	ldr	r1, [r7, #24]
 800b8de:	69fa      	ldr	r2, [r7, #28]
 800b8e0:	e841 2300 	strex	r3, r2, [r1]
 800b8e4:	617b      	str	r3, [r7, #20]
   return(result);
 800b8e6:	697b      	ldr	r3, [r7, #20]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1e4      	bne.n	800b8b6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b8f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	6878      	ldr	r0, [r7, #4]
 800b8fa:	f000 f87f 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b8fe:	e063      	b.n	800b9c8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b904:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d00e      	beq.n	800b92a <HAL_UART_IRQHandler+0x59e>
 800b90c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b910:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d008      	beq.n	800b92a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b920:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b922:	6878      	ldr	r0, [r7, #4]
 800b924:	f001 fc1a 	bl	800d15c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b928:	e051      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b92a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b92e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b932:	2b00      	cmp	r3, #0
 800b934:	d014      	beq.n	800b960 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d105      	bne.n	800b94e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b946:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d008      	beq.n	800b960 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b952:	2b00      	cmp	r3, #0
 800b954:	d03a      	beq.n	800b9cc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	4798      	blx	r3
    }
    return;
 800b95e:	e035      	b.n	800b9cc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d009      	beq.n	800b980 <HAL_UART_IRQHandler+0x5f4>
 800b96c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b974:	2b00      	cmp	r3, #0
 800b976:	d003      	beq.n	800b980 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 fea7 	bl	800c6cc <UART_EndTransmit_IT>
    return;
 800b97e:	e026      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b984:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d009      	beq.n	800b9a0 <HAL_UART_IRQHandler+0x614>
 800b98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b990:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b994:	2b00      	cmp	r3, #0
 800b996:	d003      	beq.n	800b9a0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b998:	6878      	ldr	r0, [r7, #4]
 800b99a:	f001 fbf3 	bl	800d184 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b99e:	e016      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b9a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d010      	beq.n	800b9ce <HAL_UART_IRQHandler+0x642>
 800b9ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	da0c      	bge.n	800b9ce <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f001 fbdb 	bl	800d170 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9ba:	e008      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
      return;
 800b9bc:	bf00      	nop
 800b9be:	e006      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
    return;
 800b9c0:	bf00      	nop
 800b9c2:	e004      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
      return;
 800b9c4:	bf00      	nop
 800b9c6:	e002      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
      return;
 800b9c8:	bf00      	nop
 800b9ca:	e000      	b.n	800b9ce <HAL_UART_IRQHandler+0x642>
    return;
 800b9cc:	bf00      	nop
  }
}
 800b9ce:	37e8      	adds	r7, #232	; 0xe8
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b083      	sub	sp, #12
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b9dc:	bf00      	nop
 800b9de:	370c      	adds	r7, #12
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e6:	4770      	bx	lr

0800b9e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b083      	sub	sp, #12
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9f0:	bf00      	nop
 800b9f2:	370c      	adds	r7, #12
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b083      	sub	sp, #12
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	460b      	mov	r3, r1
 800ba06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba18:	b08c      	sub	sp, #48	; 0x30
 800ba1a:	af00      	add	r7, sp, #0
 800ba1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba1e:	2300      	movs	r3, #0
 800ba20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	689a      	ldr	r2, [r3, #8]
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	431a      	orrs	r2, r3
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	695b      	ldr	r3, [r3, #20]
 800ba32:	431a      	orrs	r2, r3
 800ba34:	697b      	ldr	r3, [r7, #20]
 800ba36:	69db      	ldr	r3, [r3, #28]
 800ba38:	4313      	orrs	r3, r2
 800ba3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	681a      	ldr	r2, [r3, #0]
 800ba42:	4baf      	ldr	r3, [pc, #700]	; (800bd00 <UART_SetConfig+0x2ec>)
 800ba44:	4013      	ands	r3, r2
 800ba46:	697a      	ldr	r2, [r7, #20]
 800ba48:	6812      	ldr	r2, [r2, #0]
 800ba4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba4c:	430b      	orrs	r3, r1
 800ba4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba50:	697b      	ldr	r3, [r7, #20]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	685b      	ldr	r3, [r3, #4]
 800ba56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	68da      	ldr	r2, [r3, #12]
 800ba5e:	697b      	ldr	r3, [r7, #20]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	430a      	orrs	r2, r1
 800ba64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	699b      	ldr	r3, [r3, #24]
 800ba6a:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4aa4      	ldr	r2, [pc, #656]	; (800bd04 <UART_SetConfig+0x2f0>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d004      	beq.n	800ba80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	6a1b      	ldr	r3, [r3, #32]
 800ba7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ba7c:	4313      	orrs	r3, r2
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	689b      	ldr	r3, [r3, #8]
 800ba86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800ba8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	6812      	ldr	r2, [r2, #0]
 800ba92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba94:	430b      	orrs	r3, r1
 800ba96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba9e:	f023 010f 	bic.w	r1, r3, #15
 800baa2:	697b      	ldr	r3, [r7, #20]
 800baa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	430a      	orrs	r2, r1
 800baac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800baae:	697b      	ldr	r3, [r7, #20]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	4a95      	ldr	r2, [pc, #596]	; (800bd08 <UART_SetConfig+0x2f4>)
 800bab4:	4293      	cmp	r3, r2
 800bab6:	d125      	bne.n	800bb04 <UART_SetConfig+0xf0>
 800bab8:	2003      	movs	r0, #3
 800baba:	f7ff fb2b 	bl	800b114 <LL_RCC_GetUSARTClockSource>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b03      	cmp	r3, #3
 800bac2:	d81b      	bhi.n	800bafc <UART_SetConfig+0xe8>
 800bac4:	a201      	add	r2, pc, #4	; (adr r2, 800bacc <UART_SetConfig+0xb8>)
 800bac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baca:	bf00      	nop
 800bacc:	0800badd 	.word	0x0800badd
 800bad0:	0800baed 	.word	0x0800baed
 800bad4:	0800bae5 	.word	0x0800bae5
 800bad8:	0800baf5 	.word	0x0800baf5
 800badc:	2301      	movs	r3, #1
 800bade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bae2:	e042      	b.n	800bb6a <UART_SetConfig+0x156>
 800bae4:	2302      	movs	r3, #2
 800bae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baea:	e03e      	b.n	800bb6a <UART_SetConfig+0x156>
 800baec:	2304      	movs	r3, #4
 800baee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800baf2:	e03a      	b.n	800bb6a <UART_SetConfig+0x156>
 800baf4:	2308      	movs	r3, #8
 800baf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bafa:	e036      	b.n	800bb6a <UART_SetConfig+0x156>
 800bafc:	2310      	movs	r3, #16
 800bafe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb02:	e032      	b.n	800bb6a <UART_SetConfig+0x156>
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4a7e      	ldr	r2, [pc, #504]	; (800bd04 <UART_SetConfig+0x2f0>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d12a      	bne.n	800bb64 <UART_SetConfig+0x150>
 800bb0e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800bb12:	f7ff fb0f 	bl	800b134 <LL_RCC_GetLPUARTClockSource>
 800bb16:	4603      	mov	r3, r0
 800bb18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb1c:	d01a      	beq.n	800bb54 <UART_SetConfig+0x140>
 800bb1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bb22:	d81b      	bhi.n	800bb5c <UART_SetConfig+0x148>
 800bb24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb28:	d00c      	beq.n	800bb44 <UART_SetConfig+0x130>
 800bb2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bb2e:	d815      	bhi.n	800bb5c <UART_SetConfig+0x148>
 800bb30:	2b00      	cmp	r3, #0
 800bb32:	d003      	beq.n	800bb3c <UART_SetConfig+0x128>
 800bb34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb38:	d008      	beq.n	800bb4c <UART_SetConfig+0x138>
 800bb3a:	e00f      	b.n	800bb5c <UART_SetConfig+0x148>
 800bb3c:	2300      	movs	r3, #0
 800bb3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb42:	e012      	b.n	800bb6a <UART_SetConfig+0x156>
 800bb44:	2302      	movs	r3, #2
 800bb46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb4a:	e00e      	b.n	800bb6a <UART_SetConfig+0x156>
 800bb4c:	2304      	movs	r3, #4
 800bb4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb52:	e00a      	b.n	800bb6a <UART_SetConfig+0x156>
 800bb54:	2308      	movs	r3, #8
 800bb56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb5a:	e006      	b.n	800bb6a <UART_SetConfig+0x156>
 800bb5c:	2310      	movs	r3, #16
 800bb5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb62:	e002      	b.n	800bb6a <UART_SetConfig+0x156>
 800bb64:	2310      	movs	r3, #16
 800bb66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb6a:	697b      	ldr	r3, [r7, #20]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a65      	ldr	r2, [pc, #404]	; (800bd04 <UART_SetConfig+0x2f0>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	f040 8097 	bne.w	800bca4 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bb76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bb7a:	2b08      	cmp	r3, #8
 800bb7c:	d823      	bhi.n	800bbc6 <UART_SetConfig+0x1b2>
 800bb7e:	a201      	add	r2, pc, #4	; (adr r2, 800bb84 <UART_SetConfig+0x170>)
 800bb80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb84:	0800bba9 	.word	0x0800bba9
 800bb88:	0800bbc7 	.word	0x0800bbc7
 800bb8c:	0800bbb1 	.word	0x0800bbb1
 800bb90:	0800bbc7 	.word	0x0800bbc7
 800bb94:	0800bbb7 	.word	0x0800bbb7
 800bb98:	0800bbc7 	.word	0x0800bbc7
 800bb9c:	0800bbc7 	.word	0x0800bbc7
 800bba0:	0800bbc7 	.word	0x0800bbc7
 800bba4:	0800bbbf 	.word	0x0800bbbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bba8:	f7fe fbbe 	bl	800a328 <HAL_RCC_GetPCLK1Freq>
 800bbac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbae:	e010      	b.n	800bbd2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bbb0:	4b56      	ldr	r3, [pc, #344]	; (800bd0c <UART_SetConfig+0x2f8>)
 800bbb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bbb4:	e00d      	b.n	800bbd2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bbb6:	f7fe fb37 	bl	800a228 <HAL_RCC_GetSysClockFreq>
 800bbba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bbbc:	e009      	b.n	800bbd2 <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bbbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bbc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bbc4:	e005      	b.n	800bbd2 <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bbd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	f000 812b 	beq.w	800be30 <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbde:	4a4c      	ldr	r2, [pc, #304]	; (800bd10 <UART_SetConfig+0x2fc>)
 800bbe0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbe4:	461a      	mov	r2, r3
 800bbe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbe8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbee:	697b      	ldr	r3, [r7, #20]
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	005b      	lsls	r3, r3, #1
 800bbf6:	4413      	add	r3, r2
 800bbf8:	69ba      	ldr	r2, [r7, #24]
 800bbfa:	429a      	cmp	r2, r3
 800bbfc:	d305      	bcc.n	800bc0a <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbfe:	697b      	ldr	r3, [r7, #20]
 800bc00:	685b      	ldr	r3, [r3, #4]
 800bc02:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	429a      	cmp	r2, r3
 800bc08:	d903      	bls.n	800bc12 <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bc10:	e10e      	b.n	800be30 <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc14:	2200      	movs	r2, #0
 800bc16:	60bb      	str	r3, [r7, #8]
 800bc18:	60fa      	str	r2, [r7, #12]
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc1e:	4a3c      	ldr	r2, [pc, #240]	; (800bd10 <UART_SetConfig+0x2fc>)
 800bc20:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc24:	b29b      	uxth	r3, r3
 800bc26:	2200      	movs	r2, #0
 800bc28:	603b      	str	r3, [r7, #0]
 800bc2a:	607a      	str	r2, [r7, #4]
 800bc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc34:	f7f4 ffe0 	bl	8000bf8 <__aeabi_uldivmod>
 800bc38:	4602      	mov	r2, r0
 800bc3a:	460b      	mov	r3, r1
 800bc3c:	4610      	mov	r0, r2
 800bc3e:	4619      	mov	r1, r3
 800bc40:	f04f 0200 	mov.w	r2, #0
 800bc44:	f04f 0300 	mov.w	r3, #0
 800bc48:	020b      	lsls	r3, r1, #8
 800bc4a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc4e:	0202      	lsls	r2, r0, #8
 800bc50:	6979      	ldr	r1, [r7, #20]
 800bc52:	6849      	ldr	r1, [r1, #4]
 800bc54:	0849      	lsrs	r1, r1, #1
 800bc56:	2000      	movs	r0, #0
 800bc58:	460c      	mov	r4, r1
 800bc5a:	4605      	mov	r5, r0
 800bc5c:	eb12 0804 	adds.w	r8, r2, r4
 800bc60:	eb43 0905 	adc.w	r9, r3, r5
 800bc64:	697b      	ldr	r3, [r7, #20]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	469a      	mov	sl, r3
 800bc6c:	4693      	mov	fp, r2
 800bc6e:	4652      	mov	r2, sl
 800bc70:	465b      	mov	r3, fp
 800bc72:	4640      	mov	r0, r8
 800bc74:	4649      	mov	r1, r9
 800bc76:	f7f4 ffbf 	bl	8000bf8 <__aeabi_uldivmod>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	460b      	mov	r3, r1
 800bc7e:	4613      	mov	r3, r2
 800bc80:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc82:	6a3b      	ldr	r3, [r7, #32]
 800bc84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc88:	d308      	bcc.n	800bc9c <UART_SetConfig+0x288>
 800bc8a:	6a3b      	ldr	r3, [r7, #32]
 800bc8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc90:	d204      	bcs.n	800bc9c <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800bc92:	697b      	ldr	r3, [r7, #20]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	6a3a      	ldr	r2, [r7, #32]
 800bc98:	60da      	str	r2, [r3, #12]
 800bc9a:	e0c9      	b.n	800be30 <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800bc9c:	2301      	movs	r3, #1
 800bc9e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bca2:	e0c5      	b.n	800be30 <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	69db      	ldr	r3, [r3, #28]
 800bca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcac:	d16d      	bne.n	800bd8a <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800bcae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	2b07      	cmp	r3, #7
 800bcb6:	d82d      	bhi.n	800bd14 <UART_SetConfig+0x300>
 800bcb8:	a201      	add	r2, pc, #4	; (adr r2, 800bcc0 <UART_SetConfig+0x2ac>)
 800bcba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bcbe:	bf00      	nop
 800bcc0:	0800bce1 	.word	0x0800bce1
 800bcc4:	0800bce9 	.word	0x0800bce9
 800bcc8:	0800bd15 	.word	0x0800bd15
 800bccc:	0800bcef 	.word	0x0800bcef
 800bcd0:	0800bd15 	.word	0x0800bd15
 800bcd4:	0800bd15 	.word	0x0800bd15
 800bcd8:	0800bd15 	.word	0x0800bd15
 800bcdc:	0800bcf7 	.word	0x0800bcf7
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bce0:	f7fe fb38 	bl	800a354 <HAL_RCC_GetPCLK2Freq>
 800bce4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bce6:	e01b      	b.n	800bd20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bce8:	4b08      	ldr	r3, [pc, #32]	; (800bd0c <UART_SetConfig+0x2f8>)
 800bcea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcec:	e018      	b.n	800bd20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bcee:	f7fe fa9b 	bl	800a228 <HAL_RCC_GetSysClockFreq>
 800bcf2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bcf4:	e014      	b.n	800bd20 <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bcf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bcfc:	e010      	b.n	800bd20 <UART_SetConfig+0x30c>
 800bcfe:	bf00      	nop
 800bd00:	cfff69f3 	.word	0xcfff69f3
 800bd04:	40008000 	.word	0x40008000
 800bd08:	40013800 	.word	0x40013800
 800bd0c:	00f42400 	.word	0x00f42400
 800bd10:	08032e30 	.word	0x08032e30
      default:
        pclk = 0U;
 800bd14:	2300      	movs	r3, #0
 800bd16:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd18:	2301      	movs	r3, #1
 800bd1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	f000 8084 	beq.w	800be30 <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd28:	697b      	ldr	r3, [r7, #20]
 800bd2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd2c:	4a4b      	ldr	r2, [pc, #300]	; (800be5c <UART_SetConfig+0x448>)
 800bd2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd32:	461a      	mov	r2, r3
 800bd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd36:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd3a:	005a      	lsls	r2, r3, #1
 800bd3c:	697b      	ldr	r3, [r7, #20]
 800bd3e:	685b      	ldr	r3, [r3, #4]
 800bd40:	085b      	lsrs	r3, r3, #1
 800bd42:	441a      	add	r2, r3
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd4c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd4e:	6a3b      	ldr	r3, [r7, #32]
 800bd50:	2b0f      	cmp	r3, #15
 800bd52:	d916      	bls.n	800bd82 <UART_SetConfig+0x36e>
 800bd54:	6a3b      	ldr	r3, [r7, #32]
 800bd56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd5a:	d212      	bcs.n	800bd82 <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd5c:	6a3b      	ldr	r3, [r7, #32]
 800bd5e:	b29b      	uxth	r3, r3
 800bd60:	f023 030f 	bic.w	r3, r3, #15
 800bd64:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd66:	6a3b      	ldr	r3, [r7, #32]
 800bd68:	085b      	lsrs	r3, r3, #1
 800bd6a:	b29b      	uxth	r3, r3
 800bd6c:	f003 0307 	and.w	r3, r3, #7
 800bd70:	b29a      	uxth	r2, r3
 800bd72:	8bfb      	ldrh	r3, [r7, #30]
 800bd74:	4313      	orrs	r3, r2
 800bd76:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	8bfa      	ldrh	r2, [r7, #30]
 800bd7e:	60da      	str	r2, [r3, #12]
 800bd80:	e056      	b.n	800be30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800bd82:	2301      	movs	r3, #1
 800bd84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bd88:	e052      	b.n	800be30 <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bd8a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	2b07      	cmp	r3, #7
 800bd92:	d822      	bhi.n	800bdda <UART_SetConfig+0x3c6>
 800bd94:	a201      	add	r2, pc, #4	; (adr r2, 800bd9c <UART_SetConfig+0x388>)
 800bd96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd9a:	bf00      	nop
 800bd9c:	0800bdbd 	.word	0x0800bdbd
 800bda0:	0800bdc5 	.word	0x0800bdc5
 800bda4:	0800bddb 	.word	0x0800bddb
 800bda8:	0800bdcb 	.word	0x0800bdcb
 800bdac:	0800bddb 	.word	0x0800bddb
 800bdb0:	0800bddb 	.word	0x0800bddb
 800bdb4:	0800bddb 	.word	0x0800bddb
 800bdb8:	0800bdd3 	.word	0x0800bdd3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdbc:	f7fe faca 	bl	800a354 <HAL_RCC_GetPCLK2Freq>
 800bdc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdc2:	e010      	b.n	800bde6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bdc4:	4b26      	ldr	r3, [pc, #152]	; (800be60 <UART_SetConfig+0x44c>)
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdc8:	e00d      	b.n	800bde6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdca:	f7fe fa2d 	bl	800a228 <HAL_RCC_GetSysClockFreq>
 800bdce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bdd0:	e009      	b.n	800bde6 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bdd8:	e005      	b.n	800bde6 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800bdda:	2300      	movs	r3, #0
 800bddc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bdde:	2301      	movs	r3, #1
 800bde0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bde4:	bf00      	nop
    }

    if (pclk != 0U)
 800bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d021      	beq.n	800be30 <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdec:	697b      	ldr	r3, [r7, #20]
 800bdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdf0:	4a1a      	ldr	r2, [pc, #104]	; (800be5c <UART_SetConfig+0x448>)
 800bdf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdf6:	461a      	mov	r2, r3
 800bdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdfa:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	685b      	ldr	r3, [r3, #4]
 800be02:	085b      	lsrs	r3, r3, #1
 800be04:	441a      	add	r2, r3
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	685b      	ldr	r3, [r3, #4]
 800be0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be10:	6a3b      	ldr	r3, [r7, #32]
 800be12:	2b0f      	cmp	r3, #15
 800be14:	d909      	bls.n	800be2a <UART_SetConfig+0x416>
 800be16:	6a3b      	ldr	r3, [r7, #32]
 800be18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be1c:	d205      	bcs.n	800be2a <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800be1e:	6a3b      	ldr	r3, [r7, #32]
 800be20:	b29a      	uxth	r2, r3
 800be22:	697b      	ldr	r3, [r7, #20]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	60da      	str	r2, [r3, #12]
 800be28:	e002      	b.n	800be30 <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2201      	movs	r2, #1
 800be34:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be38:	697b      	ldr	r3, [r7, #20]
 800be3a:	2201      	movs	r2, #1
 800be3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	2200      	movs	r2, #0
 800be44:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800be46:	697b      	ldr	r3, [r7, #20]
 800be48:	2200      	movs	r2, #0
 800be4a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800be4c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800be50:	4618      	mov	r0, r3
 800be52:	3730      	adds	r7, #48	; 0x30
 800be54:	46bd      	mov	sp, r7
 800be56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be5a:	bf00      	nop
 800be5c:	08032e30 	.word	0x08032e30
 800be60:	00f42400 	.word	0x00f42400

0800be64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be64:	b480      	push	{r7}
 800be66:	b083      	sub	sp, #12
 800be68:	af00      	add	r7, sp, #0
 800be6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be70:	f003 0308 	and.w	r3, r3, #8
 800be74:	2b00      	cmp	r3, #0
 800be76:	d00a      	beq.n	800be8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685b      	ldr	r3, [r3, #4]
 800be7e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	430a      	orrs	r2, r1
 800be8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be92:	f003 0301 	and.w	r3, r3, #1
 800be96:	2b00      	cmp	r3, #0
 800be98:	d00a      	beq.n	800beb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	685b      	ldr	r3, [r3, #4]
 800bea0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	430a      	orrs	r2, r1
 800beae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb4:	f003 0302 	and.w	r3, r3, #2
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00a      	beq.n	800bed2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	430a      	orrs	r2, r1
 800bed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00a      	beq.n	800bef4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	430a      	orrs	r2, r1
 800bef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bef8:	f003 0310 	and.w	r3, r3, #16
 800befc:	2b00      	cmp	r3, #0
 800befe:	d00a      	beq.n	800bf16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	430a      	orrs	r2, r1
 800bf14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf1a:	f003 0320 	and.w	r3, r3, #32
 800bf1e:	2b00      	cmp	r3, #0
 800bf20:	d00a      	beq.n	800bf38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	689b      	ldr	r3, [r3, #8]
 800bf28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	430a      	orrs	r2, r1
 800bf36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01a      	beq.n	800bf7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	430a      	orrs	r2, r1
 800bf58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf62:	d10a      	bne.n	800bf7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d00a      	beq.n	800bf9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	430a      	orrs	r2, r1
 800bf9a:	605a      	str	r2, [r3, #4]
  }
}
 800bf9c:	bf00      	nop
 800bf9e:	370c      	adds	r7, #12
 800bfa0:	46bd      	mov	sp, r7
 800bfa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa6:	4770      	bx	lr

0800bfa8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b098      	sub	sp, #96	; 0x60
 800bfac:	af02      	add	r7, sp, #8
 800bfae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bfb8:	f7fb ff54 	bl	8007e64 <HAL_GetTick>
 800bfbc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0308 	and.w	r3, r3, #8
 800bfc8:	2b08      	cmp	r3, #8
 800bfca:	d12f      	bne.n	800c02c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bfcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bfd0:	9300      	str	r3, [sp, #0]
 800bfd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f88e 	bl	800c0fc <UART_WaitOnFlagUntilTimeout>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d022      	beq.n	800c02c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfee:	e853 3f00 	ldrex	r3, [r3]
 800bff2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bffa:	653b      	str	r3, [r7, #80]	; 0x50
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c004:	647b      	str	r3, [r7, #68]	; 0x44
 800c006:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c008:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c00a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c00c:	e841 2300 	strex	r3, r2, [r1]
 800c010:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c012:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c014:	2b00      	cmp	r3, #0
 800c016:	d1e6      	bne.n	800bfe6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2220      	movs	r2, #32
 800c01c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2200      	movs	r2, #0
 800c024:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c028:	2303      	movs	r3, #3
 800c02a:	e063      	b.n	800c0f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	f003 0304 	and.w	r3, r3, #4
 800c036:	2b04      	cmp	r3, #4
 800c038:	d149      	bne.n	800c0ce <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c03a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c03e:	9300      	str	r3, [sp, #0]
 800c040:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c042:	2200      	movs	r2, #0
 800c044:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 f857 	bl	800c0fc <UART_WaitOnFlagUntilTimeout>
 800c04e:	4603      	mov	r3, r0
 800c050:	2b00      	cmp	r3, #0
 800c052:	d03c      	beq.n	800c0ce <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c05a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05c:	e853 3f00 	ldrex	r3, [r3]
 800c060:	623b      	str	r3, [r7, #32]
   return(result);
 800c062:	6a3b      	ldr	r3, [r7, #32]
 800c064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	461a      	mov	r2, r3
 800c070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c072:	633b      	str	r3, [r7, #48]	; 0x30
 800c074:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c076:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c078:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c07a:	e841 2300 	strex	r3, r2, [r1]
 800c07e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c082:	2b00      	cmp	r3, #0
 800c084:	d1e6      	bne.n	800c054 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	3308      	adds	r3, #8
 800c08c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	e853 3f00 	ldrex	r3, [r3]
 800c094:	60fb      	str	r3, [r7, #12]
   return(result);
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	f023 0301 	bic.w	r3, r3, #1
 800c09c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	3308      	adds	r3, #8
 800c0a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0a6:	61fa      	str	r2, [r7, #28]
 800c0a8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0aa:	69b9      	ldr	r1, [r7, #24]
 800c0ac:	69fa      	ldr	r2, [r7, #28]
 800c0ae:	e841 2300 	strex	r3, r2, [r1]
 800c0b2:	617b      	str	r3, [r7, #20]
   return(result);
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d1e5      	bne.n	800c086 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2220      	movs	r2, #32
 800c0be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ca:	2303      	movs	r3, #3
 800c0cc:	e012      	b.n	800c0f4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	2220      	movs	r2, #32
 800c0d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2220      	movs	r2, #32
 800c0da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0f2:	2300      	movs	r3, #0
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3758      	adds	r7, #88	; 0x58
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b084      	sub	sp, #16
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	603b      	str	r3, [r7, #0]
 800c108:	4613      	mov	r3, r2
 800c10a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c10c:	e04f      	b.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c10e:	69bb      	ldr	r3, [r7, #24]
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d04b      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c116:	f7fb fea5 	bl	8007e64 <HAL_GetTick>
 800c11a:	4602      	mov	r2, r0
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	1ad3      	subs	r3, r2, r3
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	429a      	cmp	r2, r3
 800c124:	d302      	bcc.n	800c12c <UART_WaitOnFlagUntilTimeout+0x30>
 800c126:	69bb      	ldr	r3, [r7, #24]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c12c:	2303      	movs	r3, #3
 800c12e:	e04e      	b.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	f003 0304 	and.w	r3, r3, #4
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d037      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	2b80      	cmp	r3, #128	; 0x80
 800c142:	d034      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	2b40      	cmp	r3, #64	; 0x40
 800c148:	d031      	beq.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69db      	ldr	r3, [r3, #28]
 800c150:	f003 0308 	and.w	r3, r3, #8
 800c154:	2b08      	cmp	r3, #8
 800c156:	d110      	bne.n	800c17a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2208      	movs	r2, #8
 800c15e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c160:	68f8      	ldr	r0, [r7, #12]
 800c162:	f000 f99c 	bl	800c49e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2208      	movs	r2, #8
 800c16a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	2200      	movs	r2, #0
 800c172:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	e029      	b.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	69db      	ldr	r3, [r3, #28]
 800c180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c188:	d111      	bne.n	800c1ae <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c192:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 f982 	bl	800c49e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2220      	movs	r2, #32
 800c19e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e00f      	b.n	800c1ce <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c1ae:	68fb      	ldr	r3, [r7, #12]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69da      	ldr	r2, [r3, #28]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	4013      	ands	r3, r2
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	bf0c      	ite	eq
 800c1be:	2301      	moveq	r3, #1
 800c1c0:	2300      	movne	r3, #0
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	79fb      	ldrb	r3, [r7, #7]
 800c1c8:	429a      	cmp	r2, r3
 800c1ca:	d0a0      	beq.n	800c10e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}
	...

0800c1d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b0a3      	sub	sp, #140	; 0x8c
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	4613      	mov	r3, r2
 800c1e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	88fa      	ldrh	r2, [r7, #6]
 800c1f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	88fa      	ldrh	r2, [r7, #6]
 800c1f8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	2200      	movs	r2, #0
 800c200:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	689b      	ldr	r3, [r3, #8]
 800c206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c20a:	d10e      	bne.n	800c22a <UART_Start_Receive_IT+0x52>
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d105      	bne.n	800c220 <UART_Start_Receive_IT+0x48>
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c21a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c21e:	e02d      	b.n	800c27c <UART_Start_Receive_IT+0xa4>
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	22ff      	movs	r2, #255	; 0xff
 800c224:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c228:	e028      	b.n	800c27c <UART_Start_Receive_IT+0xa4>
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	689b      	ldr	r3, [r3, #8]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d10d      	bne.n	800c24e <UART_Start_Receive_IT+0x76>
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	691b      	ldr	r3, [r3, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d104      	bne.n	800c244 <UART_Start_Receive_IT+0x6c>
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	22ff      	movs	r2, #255	; 0xff
 800c23e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c242:	e01b      	b.n	800c27c <UART_Start_Receive_IT+0xa4>
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	227f      	movs	r2, #127	; 0x7f
 800c248:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c24c:	e016      	b.n	800c27c <UART_Start_Receive_IT+0xa4>
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	689b      	ldr	r3, [r3, #8]
 800c252:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c256:	d10d      	bne.n	800c274 <UART_Start_Receive_IT+0x9c>
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	691b      	ldr	r3, [r3, #16]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d104      	bne.n	800c26a <UART_Start_Receive_IT+0x92>
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	227f      	movs	r2, #127	; 0x7f
 800c264:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c268:	e008      	b.n	800c27c <UART_Start_Receive_IT+0xa4>
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	223f      	movs	r2, #63	; 0x3f
 800c26e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c272:	e003      	b.n	800c27c <UART_Start_Receive_IT+0xa4>
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	2200      	movs	r2, #0
 800c278:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2200      	movs	r2, #0
 800c280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	2222      	movs	r2, #34	; 0x22
 800c288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	3308      	adds	r3, #8
 800c292:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c294:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c296:	e853 3f00 	ldrex	r3, [r3]
 800c29a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c29c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c29e:	f043 0301 	orr.w	r3, r3, #1
 800c2a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c2b0:	673a      	str	r2, [r7, #112]	; 0x70
 800c2b2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c2b6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c2b8:	e841 2300 	strex	r3, r2, [r1]
 800c2bc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c2be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d1e3      	bne.n	800c28c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c2c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2cc:	d14f      	bne.n	800c36e <UART_Start_Receive_IT+0x196>
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c2d4:	88fa      	ldrh	r2, [r7, #6]
 800c2d6:	429a      	cmp	r2, r3
 800c2d8:	d349      	bcc.n	800c36e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2e2:	d107      	bne.n	800c2f4 <UART_Start_Receive_IT+0x11c>
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	691b      	ldr	r3, [r3, #16]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d103      	bne.n	800c2f4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	4a47      	ldr	r2, [pc, #284]	; (800c40c <UART_Start_Receive_IT+0x234>)
 800c2f0:	675a      	str	r2, [r3, #116]	; 0x74
 800c2f2:	e002      	b.n	800c2fa <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	4a46      	ldr	r2, [pc, #280]	; (800c410 <UART_Start_Receive_IT+0x238>)
 800c2f8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	691b      	ldr	r3, [r3, #16]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d01a      	beq.n	800c338 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c30a:	e853 3f00 	ldrex	r3, [r3]
 800c30e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c316:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c324:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c326:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c328:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c32a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c32c:	e841 2300 	strex	r3, r2, [r1]
 800c330:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c332:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c334:	2b00      	cmp	r3, #0
 800c336:	d1e4      	bne.n	800c302 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	3308      	adds	r3, #8
 800c33e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c342:	e853 3f00 	ldrex	r3, [r3]
 800c346:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c34a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c34e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	3308      	adds	r3, #8
 800c356:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c358:	64ba      	str	r2, [r7, #72]	; 0x48
 800c35a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c35c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c35e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c360:	e841 2300 	strex	r3, r2, [r1]
 800c364:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c366:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d1e5      	bne.n	800c338 <UART_Start_Receive_IT+0x160>
 800c36c:	e046      	b.n	800c3fc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	689b      	ldr	r3, [r3, #8]
 800c372:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c376:	d107      	bne.n	800c388 <UART_Start_Receive_IT+0x1b0>
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	691b      	ldr	r3, [r3, #16]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d103      	bne.n	800c388 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	4a24      	ldr	r2, [pc, #144]	; (800c414 <UART_Start_Receive_IT+0x23c>)
 800c384:	675a      	str	r2, [r3, #116]	; 0x74
 800c386:	e002      	b.n	800c38e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	4a23      	ldr	r2, [pc, #140]	; (800c418 <UART_Start_Receive_IT+0x240>)
 800c38c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	691b      	ldr	r3, [r3, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d019      	beq.n	800c3ca <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c39e:	e853 3f00 	ldrex	r3, [r3]
 800c3a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c3aa:	677b      	str	r3, [r7, #116]	; 0x74
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c3b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c3b6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c3ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c3bc:	e841 2300 	strex	r3, r2, [r1]
 800c3c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d1e6      	bne.n	800c396 <UART_Start_Receive_IT+0x1be>
 800c3c8:	e018      	b.n	800c3fc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	613b      	str	r3, [r7, #16]
   return(result);
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	f043 0320 	orr.w	r3, r3, #32
 800c3de:	67bb      	str	r3, [r7, #120]	; 0x78
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c3e8:	623b      	str	r3, [r7, #32]
 800c3ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ec:	69f9      	ldr	r1, [r7, #28]
 800c3ee:	6a3a      	ldr	r2, [r7, #32]
 800c3f0:	e841 2300 	strex	r3, r2, [r1]
 800c3f4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c3f6:	69bb      	ldr	r3, [r7, #24]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d1e6      	bne.n	800c3ca <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c3fc:	2300      	movs	r3, #0
}
 800c3fe:	4618      	mov	r0, r3
 800c400:	378c      	adds	r7, #140	; 0x8c
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	0800cdf5 	.word	0x0800cdf5
 800c410:	0800ca95 	.word	0x0800ca95
 800c414:	0800c8dd 	.word	0x0800c8dd
 800c418:	0800c725 	.word	0x0800c725

0800c41c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b08f      	sub	sp, #60	; 0x3c
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42a:	6a3b      	ldr	r3, [r7, #32]
 800c42c:	e853 3f00 	ldrex	r3, [r3]
 800c430:	61fb      	str	r3, [r7, #28]
   return(result);
 800c432:	69fb      	ldr	r3, [r7, #28]
 800c434:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c438:	637b      	str	r3, [r7, #52]	; 0x34
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	461a      	mov	r2, r3
 800c440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c442:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c444:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c446:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c448:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c44a:	e841 2300 	strex	r3, r2, [r1]
 800c44e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c452:	2b00      	cmp	r3, #0
 800c454:	d1e6      	bne.n	800c424 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	3308      	adds	r3, #8
 800c45c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	e853 3f00 	ldrex	r3, [r3]
 800c464:	60bb      	str	r3, [r7, #8]
   return(result);
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c46c:	633b      	str	r3, [r7, #48]	; 0x30
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	3308      	adds	r3, #8
 800c474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c476:	61ba      	str	r2, [r7, #24]
 800c478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47a:	6979      	ldr	r1, [r7, #20]
 800c47c:	69ba      	ldr	r2, [r7, #24]
 800c47e:	e841 2300 	strex	r3, r2, [r1]
 800c482:	613b      	str	r3, [r7, #16]
   return(result);
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d1e5      	bne.n	800c456 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2220      	movs	r2, #32
 800c48e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800c492:	bf00      	nop
 800c494:	373c      	adds	r7, #60	; 0x3c
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr

0800c49e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c49e:	b480      	push	{r7}
 800c4a0:	b095      	sub	sp, #84	; 0x54
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ae:	e853 3f00 	ldrex	r3, [r3]
 800c4b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	461a      	mov	r2, r3
 800c4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4c4:	643b      	str	r3, [r7, #64]	; 0x40
 800c4c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c4ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c4cc:	e841 2300 	strex	r3, r2, [r1]
 800c4d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d1e6      	bne.n	800c4a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	3308      	adds	r3, #8
 800c4de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e0:	6a3b      	ldr	r3, [r7, #32]
 800c4e2:	e853 3f00 	ldrex	r3, [r3]
 800c4e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c4e8:	69fb      	ldr	r3, [r7, #28]
 800c4ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4ee:	f023 0301 	bic.w	r3, r3, #1
 800c4f2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	3308      	adds	r3, #8
 800c4fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c4fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c500:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c504:	e841 2300 	strex	r3, r2, [r1]
 800c508:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c50a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1e3      	bne.n	800c4d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c514:	2b01      	cmp	r3, #1
 800c516:	d118      	bne.n	800c54a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	e853 3f00 	ldrex	r3, [r3]
 800c524:	60bb      	str	r3, [r7, #8]
   return(result);
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	f023 0310 	bic.w	r3, r3, #16
 800c52c:	647b      	str	r3, [r7, #68]	; 0x44
 800c52e:	687b      	ldr	r3, [r7, #4]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	461a      	mov	r2, r3
 800c534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c536:	61bb      	str	r3, [r7, #24]
 800c538:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c53a:	6979      	ldr	r1, [r7, #20]
 800c53c:	69ba      	ldr	r2, [r7, #24]
 800c53e:	e841 2300 	strex	r3, r2, [r1]
 800c542:	613b      	str	r3, [r7, #16]
   return(result);
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d1e6      	bne.n	800c518 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2220      	movs	r2, #32
 800c54e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	2200      	movs	r2, #0
 800c556:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	2200      	movs	r2, #0
 800c55c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c55e:	bf00      	nop
 800c560:	3754      	adds	r7, #84	; 0x54
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr

0800c56a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800c56a:	b580      	push	{r7, lr}
 800c56c:	b090      	sub	sp, #64	; 0x40
 800c56e:	af00      	add	r7, sp, #0
 800c570:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0320 	and.w	r3, r3, #32
 800c582:	2b00      	cmp	r3, #0
 800c584:	d137      	bne.n	800c5f6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800c586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c588:	2200      	movs	r2, #0
 800c58a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c58e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	3308      	adds	r3, #8
 800c594:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c598:	e853 3f00 	ldrex	r3, [r3]
 800c59c:	623b      	str	r3, [r7, #32]
   return(result);
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c5a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	3308      	adds	r3, #8
 800c5ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ae:	633a      	str	r2, [r7, #48]	; 0x30
 800c5b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c5b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5b6:	e841 2300 	strex	r3, r2, [r1]
 800c5ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d1e5      	bne.n	800c58e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5c8:	693b      	ldr	r3, [r7, #16]
 800c5ca:	e853 3f00 	ldrex	r3, [r3]
 800c5ce:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c5d6:	637b      	str	r3, [r7, #52]	; 0x34
 800c5d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	461a      	mov	r2, r3
 800c5de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5e0:	61fb      	str	r3, [r7, #28]
 800c5e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5e4:	69b9      	ldr	r1, [r7, #24]
 800c5e6:	69fa      	ldr	r2, [r7, #28]
 800c5e8:	e841 2300 	strex	r3, r2, [r1]
 800c5ec:	617b      	str	r3, [r7, #20]
   return(result);
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d1e6      	bne.n	800c5c2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c5f4:	e002      	b.n	800c5fc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800c5f6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c5f8:	f7f6 fab0 	bl	8002b5c <HAL_UART_TxCpltCallback>
}
 800c5fc:	bf00      	nop
 800c5fe:	3740      	adds	r7, #64	; 0x40
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c610:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800c612:	68f8      	ldr	r0, [r7, #12]
 800c614:	f7ff f9de 	bl	800b9d4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c618:	bf00      	nop
 800c61a:	3710      	adds	r7, #16
 800c61c:	46bd      	mov	sp, r7
 800c61e:	bd80      	pop	{r7, pc}

0800c620 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c62c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c634:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c63c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c648:	2b80      	cmp	r3, #128	; 0x80
 800c64a:	d109      	bne.n	800c660 <UART_DMAError+0x40>
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2b21      	cmp	r3, #33	; 0x21
 800c650:	d106      	bne.n	800c660 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c652:	697b      	ldr	r3, [r7, #20]
 800c654:	2200      	movs	r2, #0
 800c656:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800c65a:	6978      	ldr	r0, [r7, #20]
 800c65c:	f7ff fede 	bl	800c41c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	689b      	ldr	r3, [r3, #8]
 800c666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c66a:	2b40      	cmp	r3, #64	; 0x40
 800c66c:	d109      	bne.n	800c682 <UART_DMAError+0x62>
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	2b22      	cmp	r3, #34	; 0x22
 800c672:	d106      	bne.n	800c682 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c674:	697b      	ldr	r3, [r7, #20]
 800c676:	2200      	movs	r2, #0
 800c678:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800c67c:	6978      	ldr	r0, [r7, #20]
 800c67e:	f7ff ff0e 	bl	800c49e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c682:	697b      	ldr	r3, [r7, #20]
 800c684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c688:	f043 0210 	orr.w	r2, r3, #16
 800c68c:	697b      	ldr	r3, [r7, #20]
 800c68e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c692:	6978      	ldr	r0, [r7, #20]
 800c694:	f7ff f9a8 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c698:	bf00      	nop
 800c69a:	3718      	adds	r7, #24
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}

0800c6a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b084      	sub	sp, #16
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	f7ff f992 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c6c4:	bf00      	nop
 800c6c6:	3710      	adds	r7, #16
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b088      	sub	sp, #32
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	e853 3f00 	ldrex	r3, [r3]
 800c6e0:	60bb      	str	r3, [r7, #8]
   return(result);
 800c6e2:	68bb      	ldr	r3, [r7, #8]
 800c6e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c6e8:	61fb      	str	r3, [r7, #28]
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	69fb      	ldr	r3, [r7, #28]
 800c6f2:	61bb      	str	r3, [r7, #24]
 800c6f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f6:	6979      	ldr	r1, [r7, #20]
 800c6f8:	69ba      	ldr	r2, [r7, #24]
 800c6fa:	e841 2300 	strex	r3, r2, [r1]
 800c6fe:	613b      	str	r3, [r7, #16]
   return(result);
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	2b00      	cmp	r3, #0
 800c704:	d1e6      	bne.n	800c6d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2220      	movs	r2, #32
 800c70a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	2200      	movs	r2, #0
 800c712:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c714:	6878      	ldr	r0, [r7, #4]
 800c716:	f7f6 fa21 	bl	8002b5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c71a:	bf00      	nop
 800c71c:	3720      	adds	r7, #32
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}
	...

0800c724 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b09c      	sub	sp, #112	; 0x70
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c732:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c73c:	2b22      	cmp	r3, #34	; 0x22
 800c73e:	f040 80be 	bne.w	800c8be <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c748:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c74c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800c750:	b2d9      	uxtb	r1, r3
 800c752:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c756:	b2da      	uxtb	r2, r3
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c75c:	400a      	ands	r2, r1
 800c75e:	b2d2      	uxtb	r2, r2
 800c760:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c766:	1c5a      	adds	r2, r3, #1
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c772:	b29b      	uxth	r3, r3
 800c774:	3b01      	subs	r3, #1
 800c776:	b29a      	uxth	r2, r3
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c784:	b29b      	uxth	r3, r3
 800c786:	2b00      	cmp	r3, #0
 800c788:	f040 80a1 	bne.w	800c8ce <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c794:	e853 3f00 	ldrex	r3, [r3]
 800c798:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c79a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c79c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7a0:	66bb      	str	r3, [r7, #104]	; 0x68
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	461a      	mov	r2, r3
 800c7a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c7aa:	65bb      	str	r3, [r7, #88]	; 0x58
 800c7ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c7b2:	e841 2300 	strex	r3, r2, [r1]
 800c7b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c7b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1e6      	bne.n	800c78c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c8:	e853 3f00 	ldrex	r3, [r3]
 800c7cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c7ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7d0:	f023 0301 	bic.w	r3, r3, #1
 800c7d4:	667b      	str	r3, [r7, #100]	; 0x64
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	3308      	adds	r3, #8
 800c7dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c7de:	647a      	str	r2, [r7, #68]	; 0x44
 800c7e0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c7e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7e6:	e841 2300 	strex	r3, r2, [r1]
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	d1e5      	bne.n	800c7be <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2220      	movs	r2, #32
 800c7f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2200      	movs	r2, #0
 800c804:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	4a33      	ldr	r2, [pc, #204]	; (800c8d8 <UART_RxISR_8BIT+0x1b4>)
 800c80c:	4293      	cmp	r3, r2
 800c80e:	d01f      	beq.n	800c850 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d018      	beq.n	800c850 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c826:	e853 3f00 	ldrex	r3, [r3]
 800c82a:	623b      	str	r3, [r7, #32]
   return(result);
 800c82c:	6a3b      	ldr	r3, [r7, #32]
 800c82e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c832:	663b      	str	r3, [r7, #96]	; 0x60
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	461a      	mov	r2, r3
 800c83a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c83c:	633b      	str	r3, [r7, #48]	; 0x30
 800c83e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c840:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c842:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c844:	e841 2300 	strex	r3, r2, [r1]
 800c848:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c84a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1e6      	bne.n	800c81e <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c854:	2b01      	cmp	r3, #1
 800c856:	d12e      	bne.n	800c8b6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2200      	movs	r2, #0
 800c85c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	e853 3f00 	ldrex	r3, [r3]
 800c86a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	f023 0310 	bic.w	r3, r3, #16
 800c872:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	461a      	mov	r2, r3
 800c87a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c87c:	61fb      	str	r3, [r7, #28]
 800c87e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c880:	69b9      	ldr	r1, [r7, #24]
 800c882:	69fa      	ldr	r2, [r7, #28]
 800c884:	e841 2300 	strex	r3, r2, [r1]
 800c888:	617b      	str	r3, [r7, #20]
   return(result);
 800c88a:	697b      	ldr	r3, [r7, #20]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d1e6      	bne.n	800c85e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	69db      	ldr	r3, [r3, #28]
 800c896:	f003 0310 	and.w	r3, r3, #16
 800c89a:	2b10      	cmp	r3, #16
 800c89c:	d103      	bne.n	800c8a6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	2210      	movs	r2, #16
 800c8a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c8ac:	4619      	mov	r1, r3
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f7ff f8a4 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8b4:	e00b      	b.n	800c8ce <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f7f6 f932 	bl	8002b20 <HAL_UART_RxCpltCallback>
}
 800c8bc:	e007      	b.n	800c8ce <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	699a      	ldr	r2, [r3, #24]
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	f042 0208 	orr.w	r2, r2, #8
 800c8cc:	619a      	str	r2, [r3, #24]
}
 800c8ce:	bf00      	nop
 800c8d0:	3770      	adds	r7, #112	; 0x70
 800c8d2:	46bd      	mov	sp, r7
 800c8d4:	bd80      	pop	{r7, pc}
 800c8d6:	bf00      	nop
 800c8d8:	40008000 	.word	0x40008000

0800c8dc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c8dc:	b580      	push	{r7, lr}
 800c8de:	b09c      	sub	sp, #112	; 0x70
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c8ea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c8f4:	2b22      	cmp	r3, #34	; 0x22
 800c8f6:	f040 80be 	bne.w	800ca76 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c900:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c908:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800c90a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800c90e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800c912:	4013      	ands	r3, r2
 800c914:	b29a      	uxth	r2, r3
 800c916:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c918:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c91e:	1c9a      	adds	r2, r3, #2
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	3b01      	subs	r3, #1
 800c92e:	b29a      	uxth	r2, r3
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c93c:	b29b      	uxth	r3, r3
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f040 80a1 	bne.w	800ca86 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c94a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c94c:	e853 3f00 	ldrex	r3, [r3]
 800c950:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c954:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c958:	667b      	str	r3, [r7, #100]	; 0x64
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	461a      	mov	r2, r3
 800c960:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c962:	657b      	str	r3, [r7, #84]	; 0x54
 800c964:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c966:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c968:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c96a:	e841 2300 	strex	r3, r2, [r1]
 800c96e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c970:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c972:	2b00      	cmp	r3, #0
 800c974:	d1e6      	bne.n	800c944 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	3308      	adds	r3, #8
 800c97c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c97e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c980:	e853 3f00 	ldrex	r3, [r3]
 800c984:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	f023 0301 	bic.w	r3, r3, #1
 800c98c:	663b      	str	r3, [r7, #96]	; 0x60
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	3308      	adds	r3, #8
 800c994:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c996:	643a      	str	r2, [r7, #64]	; 0x40
 800c998:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c99a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c99c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c99e:	e841 2300 	strex	r3, r2, [r1]
 800c9a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d1e5      	bne.n	800c976 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2220      	movs	r2, #32
 800c9ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	4a33      	ldr	r2, [pc, #204]	; (800ca90 <UART_RxISR_16BIT+0x1b4>)
 800c9c4:	4293      	cmp	r3, r2
 800c9c6:	d01f      	beq.n	800ca08 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d018      	beq.n	800ca08 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9dc:	6a3b      	ldr	r3, [r7, #32]
 800c9de:	e853 3f00 	ldrex	r3, [r3]
 800c9e2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	461a      	mov	r2, r3
 800c9f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c9f6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c9fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9fc:	e841 2300 	strex	r3, r2, [r1]
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ca02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d1e6      	bne.n	800c9d6 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca0c:	2b01      	cmp	r3, #1
 800ca0e:	d12e      	bne.n	800ca6e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2200      	movs	r2, #0
 800ca14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	e853 3f00 	ldrex	r3, [r3]
 800ca22:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca24:	68bb      	ldr	r3, [r7, #8]
 800ca26:	f023 0310 	bic.w	r3, r3, #16
 800ca2a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	461a      	mov	r2, r3
 800ca32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca34:	61bb      	str	r3, [r7, #24]
 800ca36:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca38:	6979      	ldr	r1, [r7, #20]
 800ca3a:	69ba      	ldr	r2, [r7, #24]
 800ca3c:	e841 2300 	strex	r3, r2, [r1]
 800ca40:	613b      	str	r3, [r7, #16]
   return(result);
 800ca42:	693b      	ldr	r3, [r7, #16]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d1e6      	bne.n	800ca16 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	69db      	ldr	r3, [r3, #28]
 800ca4e:	f003 0310 	and.w	r3, r3, #16
 800ca52:	2b10      	cmp	r3, #16
 800ca54:	d103      	bne.n	800ca5e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	2210      	movs	r2, #16
 800ca5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca64:	4619      	mov	r1, r3
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f7fe ffc8 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ca6c:	e00b      	b.n	800ca86 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f7f6 f856 	bl	8002b20 <HAL_UART_RxCpltCallback>
}
 800ca74:	e007      	b.n	800ca86 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	699a      	ldr	r2, [r3, #24]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	f042 0208 	orr.w	r2, r2, #8
 800ca84:	619a      	str	r2, [r3, #24]
}
 800ca86:	bf00      	nop
 800ca88:	3770      	adds	r7, #112	; 0x70
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}
 800ca8e:	bf00      	nop
 800ca90:	40008000 	.word	0x40008000

0800ca94 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b0ac      	sub	sp, #176	; 0xb0
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caa2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69db      	ldr	r3, [r3, #28]
 800caac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800caca:	2b22      	cmp	r3, #34	; 0x22
 800cacc:	f040 8182 	bne.w	800cdd4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cad6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cada:	e125      	b.n	800cd28 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cae2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cae6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800caea:	b2d9      	uxtb	r1, r3
 800caec:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800caf0:	b2da      	uxtb	r2, r3
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800caf6:	400a      	ands	r2, r1
 800caf8:	b2d2      	uxtb	r2, r2
 800cafa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb00:	1c5a      	adds	r2, r3, #1
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	3b01      	subs	r3, #1
 800cb10:	b29a      	uxth	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	69db      	ldr	r3, [r3, #28]
 800cb1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800cb22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb26:	f003 0307 	and.w	r3, r3, #7
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d053      	beq.n	800cbd6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cb2e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb32:	f003 0301 	and.w	r3, r3, #1
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d011      	beq.n	800cb5e <UART_RxISR_8BIT_FIFOEN+0xca>
 800cb3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800cb3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00b      	beq.n	800cb5e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb54:	f043 0201 	orr.w	r2, r3, #1
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb62:	f003 0302 	and.w	r3, r3, #2
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d011      	beq.n	800cb8e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800cb6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb6e:	f003 0301 	and.w	r3, r3, #1
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d00b      	beq.n	800cb8e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	2202      	movs	r2, #2
 800cb7c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cb84:	f043 0204 	orr.w	r2, r3, #4
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cb8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cb92:	f003 0304 	and.w	r3, r3, #4
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d011      	beq.n	800cbbe <UART_RxISR_8BIT_FIFOEN+0x12a>
 800cb9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cb9e:	f003 0301 	and.w	r3, r3, #1
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d00b      	beq.n	800cbbe <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	2204      	movs	r2, #4
 800cbac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbb4:	f043 0202 	orr.w	r2, r3, #2
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d006      	beq.n	800cbd6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f7fe ff0d 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cbdc:	b29b      	uxth	r3, r3
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	f040 80a2 	bne.w	800cd28 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cbec:	e853 3f00 	ldrex	r3, [r3]
 800cbf0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800cbf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbf8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	461a      	mov	r2, r3
 800cc02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cc06:	67fb      	str	r3, [r7, #124]	; 0x7c
 800cc08:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800cc0c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800cc0e:	e841 2300 	strex	r3, r2, [r1]
 800cc12:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800cc14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d1e4      	bne.n	800cbe4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	3308      	adds	r3, #8
 800cc20:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cc24:	e853 3f00 	ldrex	r3, [r3]
 800cc28:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800cc2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cc2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cc30:	f023 0301 	bic.w	r3, r3, #1
 800cc34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	3308      	adds	r3, #8
 800cc3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cc42:	66ba      	str	r2, [r7, #104]	; 0x68
 800cc44:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc46:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800cc48:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cc4a:	e841 2300 	strex	r3, r2, [r1]
 800cc4e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800cc50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d1e1      	bne.n	800cc1a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2220      	movs	r2, #32
 800cc5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2200      	movs	r2, #0
 800cc62:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2200      	movs	r2, #0
 800cc68:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	4a5f      	ldr	r2, [pc, #380]	; (800cdec <UART_RxISR_8BIT_FIFOEN+0x358>)
 800cc70:	4293      	cmp	r3, r2
 800cc72:	d021      	beq.n	800ccb8 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	685b      	ldr	r3, [r3, #4]
 800cc7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d01a      	beq.n	800ccb8 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cc8a:	e853 3f00 	ldrex	r3, [r3]
 800cc8e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800cc90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cc96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	461a      	mov	r2, r3
 800cca0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800cca4:	657b      	str	r3, [r7, #84]	; 0x54
 800cca6:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cca8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ccaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ccac:	e841 2300 	strex	r3, r2, [r1]
 800ccb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d1e4      	bne.n	800cc82 <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ccbc:	2b01      	cmp	r3, #1
 800ccbe:	d130      	bne.n	800cd22 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2200      	movs	r2, #0
 800ccc4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccce:	e853 3f00 	ldrex	r3, [r3]
 800ccd2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ccd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccd6:	f023 0310 	bic.w	r3, r3, #16
 800ccda:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	461a      	mov	r2, r3
 800cce4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cce8:	643b      	str	r3, [r7, #64]	; 0x40
 800ccea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ccee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ccf0:	e841 2300 	strex	r3, r2, [r1]
 800ccf4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d1e4      	bne.n	800ccc6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	69db      	ldr	r3, [r3, #28]
 800cd02:	f003 0310 	and.w	r3, r3, #16
 800cd06:	2b10      	cmp	r3, #16
 800cd08:	d103      	bne.n	800cd12 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	2210      	movs	r2, #16
 800cd10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cd18:	4619      	mov	r1, r3
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f7fe fe6e 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
 800cd20:	e002      	b.n	800cd28 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800cd22:	6878      	ldr	r0, [r7, #4]
 800cd24:	f7f5 fefc 	bl	8002b20 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cd28:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d006      	beq.n	800cd3e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800cd30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cd34:	f003 0320 	and.w	r3, r3, #32
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	f47f aecf 	bne.w	800cadc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cd44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800cd48:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d049      	beq.n	800cde4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cd56:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d242      	bcs.n	800cde4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	3308      	adds	r3, #8
 800cd64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd66:	6a3b      	ldr	r3, [r7, #32]
 800cd68:	e853 3f00 	ldrex	r3, [r3]
 800cd6c:	61fb      	str	r3, [r7, #28]
   return(result);
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cd74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	3308      	adds	r3, #8
 800cd7e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800cd82:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cd84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd8a:	e841 2300 	strex	r3, r2, [r1]
 800cd8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cd90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d1e3      	bne.n	800cd5e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	4a15      	ldr	r2, [pc, #84]	; (800cdf0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800cd9a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	e853 3f00 	ldrex	r3, [r3]
 800cda8:	60bb      	str	r3, [r7, #8]
   return(result);
 800cdaa:	68bb      	ldr	r3, [r7, #8]
 800cdac:	f043 0320 	orr.w	r3, r3, #32
 800cdb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	461a      	mov	r2, r3
 800cdba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800cdbe:	61bb      	str	r3, [r7, #24]
 800cdc0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdc2:	6979      	ldr	r1, [r7, #20]
 800cdc4:	69ba      	ldr	r2, [r7, #24]
 800cdc6:	e841 2300 	strex	r3, r2, [r1]
 800cdca:	613b      	str	r3, [r7, #16]
   return(result);
 800cdcc:	693b      	ldr	r3, [r7, #16]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1e4      	bne.n	800cd9c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdd2:	e007      	b.n	800cde4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	699a      	ldr	r2, [r3, #24]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f042 0208 	orr.w	r2, r2, #8
 800cde2:	619a      	str	r2, [r3, #24]
}
 800cde4:	bf00      	nop
 800cde6:	37b0      	adds	r7, #176	; 0xb0
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}
 800cdec:	40008000 	.word	0x40008000
 800cdf0:	0800c725 	.word	0x0800c725

0800cdf4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b0ae      	sub	sp, #184	; 0xb8
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce02:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	69db      	ldr	r3, [r3, #28]
 800ce0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	689b      	ldr	r3, [r3, #8]
 800ce20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce2a:	2b22      	cmp	r3, #34	; 0x22
 800ce2c:	f040 8186 	bne.w	800d13c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800ce36:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ce3a:	e129      	b.n	800d090 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce42:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800ce4e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800ce52:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800ce56:	4013      	ands	r3, r2
 800ce58:	b29a      	uxth	r2, r3
 800ce5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ce5e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce64:	1c9a      	adds	r2, r3, #2
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce70:	b29b      	uxth	r3, r3
 800ce72:	3b01      	subs	r3, #1
 800ce74:	b29a      	uxth	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	69db      	ldr	r3, [r3, #28]
 800ce82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ce86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce8a:	f003 0307 	and.w	r3, r3, #7
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d053      	beq.n	800cf3a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800ce96:	f003 0301 	and.w	r3, r3, #1
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d011      	beq.n	800cec2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800ce9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d00b      	beq.n	800cec2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ceb8:	f043 0201 	orr.w	r2, r3, #1
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cec2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cec6:	f003 0302 	and.w	r3, r3, #2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d011      	beq.n	800cef2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800cece:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00b      	beq.n	800cef2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	2202      	movs	r2, #2
 800cee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cee8:	f043 0204 	orr.w	r2, r3, #4
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cef2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800cef6:	f003 0304 	and.w	r3, r3, #4
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d011      	beq.n	800cf22 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800cefe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d00b      	beq.n	800cf22 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	2204      	movs	r2, #4
 800cf10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf18:	f043 0202 	orr.w	r2, r3, #2
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d006      	beq.n	800cf3a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cf2c:	6878      	ldr	r0, [r7, #4]
 800cf2e:	f7fe fd5b 	bl	800b9e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2200      	movs	r2, #0
 800cf36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cf40:	b29b      	uxth	r3, r3
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	f040 80a4 	bne.w	800d090 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf50:	e853 3f00 	ldrex	r3, [r3]
 800cf54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cf56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	461a      	mov	r2, r3
 800cf66:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800cf6e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cf72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cf76:	e841 2300 	strex	r3, r2, [r1]
 800cf7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cf7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d1e2      	bne.n	800cf48 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	3308      	adds	r3, #8
 800cf88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cf92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cf98:	f023 0301 	bic.w	r3, r3, #1
 800cf9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800cfaa:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cfac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cfb0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cfb2:	e841 2300 	strex	r3, r2, [r1]
 800cfb6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cfb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1e1      	bne.n	800cf82 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2220      	movs	r2, #32
 800cfc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	4a5f      	ldr	r2, [pc, #380]	; (800d154 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800cfd8:	4293      	cmp	r3, r2
 800cfda:	d021      	beq.n	800d020 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	685b      	ldr	r3, [r3, #4]
 800cfe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d01a      	beq.n	800d020 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cff2:	e853 3f00 	ldrex	r3, [r3]
 800cff6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cff8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cffe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	461a      	mov	r2, r3
 800d008:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d00c:	65bb      	str	r3, [r7, #88]	; 0x58
 800d00e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d010:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d012:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d014:	e841 2300 	strex	r3, r2, [r1]
 800d018:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d01a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d1e4      	bne.n	800cfea <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d024:	2b01      	cmp	r3, #1
 800d026:	d130      	bne.n	800d08a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d036:	e853 3f00 	ldrex	r3, [r3]
 800d03a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d03e:	f023 0310 	bic.w	r3, r3, #16
 800d042:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d050:	647b      	str	r3, [r7, #68]	; 0x44
 800d052:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d054:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d056:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d058:	e841 2300 	strex	r3, r2, [r1]
 800d05c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d1e4      	bne.n	800d02e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	f003 0310 	and.w	r3, r3, #16
 800d06e:	2b10      	cmp	r3, #16
 800d070:	d103      	bne.n	800d07a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2210      	movs	r2, #16
 800d078:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d080:	4619      	mov	r1, r3
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f7fe fcba 	bl	800b9fc <HAL_UARTEx_RxEventCallback>
 800d088:	e002      	b.n	800d090 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	f7f5 fd48 	bl	8002b20 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d090:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d094:	2b00      	cmp	r3, #0
 800d096:	d006      	beq.n	800d0a6 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800d098:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d09c:	f003 0320 	and.w	r3, r3, #32
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	f47f aecb 	bne.w	800ce3c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0ac:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d0b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d049      	beq.n	800d14c <UART_RxISR_16BIT_FIFOEN+0x358>
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d0be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d242      	bcs.n	800d14c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d0ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0d0:	e853 3f00 	ldrex	r3, [r3]
 800d0d4:	623b      	str	r3, [r7, #32]
   return(result);
 800d0d6:	6a3b      	ldr	r3, [r7, #32]
 800d0d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d0dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	3308      	adds	r3, #8
 800d0e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d0ea:	633a      	str	r2, [r7, #48]	; 0x30
 800d0ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d0f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d0f2:	e841 2300 	strex	r3, r2, [r1]
 800d0f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d1e3      	bne.n	800d0c6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	4a15      	ldr	r2, [pc, #84]	; (800d158 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d102:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	e853 3f00 	ldrex	r3, [r3]
 800d110:	60fb      	str	r3, [r7, #12]
   return(result);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f043 0320 	orr.w	r3, r3, #32
 800d118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	461a      	mov	r2, r3
 800d122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d126:	61fb      	str	r3, [r7, #28]
 800d128:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	69b9      	ldr	r1, [r7, #24]
 800d12c:	69fa      	ldr	r2, [r7, #28]
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	617b      	str	r3, [r7, #20]
   return(result);
 800d134:	697b      	ldr	r3, [r7, #20]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e4      	bne.n	800d104 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d13a:	e007      	b.n	800d14c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	699a      	ldr	r2, [r3, #24]
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	f042 0208 	orr.w	r2, r2, #8
 800d14a:	619a      	str	r2, [r3, #24]
}
 800d14c:	bf00      	nop
 800d14e:	37b8      	adds	r7, #184	; 0xb8
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}
 800d154:	40008000 	.word	0x40008000
 800d158:	0800c8dd 	.word	0x0800c8dd

0800d15c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d15c:	b480      	push	{r7}
 800d15e:	b083      	sub	sp, #12
 800d160:	af00      	add	r7, sp, #0
 800d162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d164:	bf00      	nop
 800d166:	370c      	adds	r7, #12
 800d168:	46bd      	mov	sp, r7
 800d16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16e:	4770      	bx	lr

0800d170 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d170:	b480      	push	{r7}
 800d172:	b083      	sub	sp, #12
 800d174:	af00      	add	r7, sp, #0
 800d176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d178:	bf00      	nop
 800d17a:	370c      	adds	r7, #12
 800d17c:	46bd      	mov	sp, r7
 800d17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d182:	4770      	bx	lr

0800d184 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d184:	b480      	push	{r7}
 800d186:	b083      	sub	sp, #12
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d18c:	bf00      	nop
 800d18e:	370c      	adds	r7, #12
 800d190:	46bd      	mov	sp, r7
 800d192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d196:	4770      	bx	lr

0800d198 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b084      	sub	sp, #16
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d1a6:	2b01      	cmp	r3, #1
 800d1a8:	d101      	bne.n	800d1ae <HAL_UARTEx_EnableFifoMode+0x16>
 800d1aa:	2302      	movs	r3, #2
 800d1ac:	e02b      	b.n	800d206 <HAL_UARTEx_EnableFifoMode+0x6e>
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	2201      	movs	r2, #1
 800d1b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	2224      	movs	r2, #36	; 0x24
 800d1ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	681a      	ldr	r2, [r3, #0]
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	f022 0201 	bic.w	r2, r2, #1
 800d1d4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800d1e4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	68fa      	ldr	r2, [r7, #12]
 800d1ec:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f88a 	bl	800d308 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2220      	movs	r2, #32
 800d1f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2200      	movs	r2, #0
 800d200:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3710      	adds	r7, #16
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}

0800d20e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d20e:	b580      	push	{r7, lr}
 800d210:	b084      	sub	sp, #16
 800d212:	af00      	add	r7, sp, #0
 800d214:	6078      	str	r0, [r7, #4]
 800d216:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d101      	bne.n	800d226 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d222:	2302      	movs	r3, #2
 800d224:	e02d      	b.n	800d282 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	2224      	movs	r2, #36	; 0x24
 800d232:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f022 0201 	bic.w	r2, r2, #1
 800d24c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	683a      	ldr	r2, [r7, #0]
 800d25e:	430a      	orrs	r2, r1
 800d260:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 f850 	bl	800d308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	68fa      	ldr	r2, [r7, #12]
 800d26e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	2220      	movs	r2, #32
 800d274:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b084      	sub	sp, #16
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
 800d292:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d101      	bne.n	800d2a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d29e:	2302      	movs	r3, #2
 800d2a0:	e02d      	b.n	800d2fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	2201      	movs	r2, #1
 800d2a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	2224      	movs	r2, #36	; 0x24
 800d2ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f022 0201 	bic.w	r2, r2, #1
 800d2c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	683a      	ldr	r2, [r7, #0]
 800d2da:	430a      	orrs	r2, r1
 800d2dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 f812 	bl	800d308 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2220      	movs	r2, #32
 800d2f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	4618      	mov	r0, r3
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
	...

0800d308 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d308:	b480      	push	{r7}
 800d30a:	b085      	sub	sp, #20
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d314:	2b00      	cmp	r3, #0
 800d316:	d108      	bne.n	800d32a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2201      	movs	r2, #1
 800d31c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2201      	movs	r2, #1
 800d324:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d328:	e031      	b.n	800d38e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d32a:	2308      	movs	r3, #8
 800d32c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d32e:	2308      	movs	r3, #8
 800d330:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	689b      	ldr	r3, [r3, #8]
 800d338:	0e5b      	lsrs	r3, r3, #25
 800d33a:	b2db      	uxtb	r3, r3
 800d33c:	f003 0307 	and.w	r3, r3, #7
 800d340:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	689b      	ldr	r3, [r3, #8]
 800d348:	0f5b      	lsrs	r3, r3, #29
 800d34a:	b2db      	uxtb	r3, r3
 800d34c:	f003 0307 	and.w	r3, r3, #7
 800d350:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d352:	7bbb      	ldrb	r3, [r7, #14]
 800d354:	7b3a      	ldrb	r2, [r7, #12]
 800d356:	4911      	ldr	r1, [pc, #68]	; (800d39c <UARTEx_SetNbDataToProcess+0x94>)
 800d358:	5c8a      	ldrb	r2, [r1, r2]
 800d35a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d35e:	7b3a      	ldrb	r2, [r7, #12]
 800d360:	490f      	ldr	r1, [pc, #60]	; (800d3a0 <UARTEx_SetNbDataToProcess+0x98>)
 800d362:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d364:	fb93 f3f2 	sdiv	r3, r3, r2
 800d368:	b29a      	uxth	r2, r3
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d370:	7bfb      	ldrb	r3, [r7, #15]
 800d372:	7b7a      	ldrb	r2, [r7, #13]
 800d374:	4909      	ldr	r1, [pc, #36]	; (800d39c <UARTEx_SetNbDataToProcess+0x94>)
 800d376:	5c8a      	ldrb	r2, [r1, r2]
 800d378:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d37c:	7b7a      	ldrb	r2, [r7, #13]
 800d37e:	4908      	ldr	r1, [pc, #32]	; (800d3a0 <UARTEx_SetNbDataToProcess+0x98>)
 800d380:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d382:	fb93 f3f2 	sdiv	r3, r3, r2
 800d386:	b29a      	uxth	r2, r3
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d38e:	bf00      	nop
 800d390:	3714      	adds	r7, #20
 800d392:	46bd      	mov	sp, r7
 800d394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d398:	4770      	bx	lr
 800d39a:	bf00      	nop
 800d39c:	08032e48 	.word	0x08032e48
 800d3a0:	08032e50 	.word	0x08032e50

0800d3a4 <Chk_ParamValidity>:
* @param  param: Parameter 
* @param  max_param_value: Max Parameter Value 
* @retval MOBLE_RESULT
*/ 
 MOBLE_RESULT Chk_ParamValidity(MOBLEUINT8 param, MOBLEUINT8 max_param_val )
{
 800d3a4:	b480      	push	{r7}
 800d3a6:	b083      	sub	sp, #12
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	460a      	mov	r2, r1
 800d3ae:	71fb      	strb	r3, [r7, #7]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	71bb      	strb	r3, [r7, #6]
  if (param > max_param_val) 
 800d3b4:	79fa      	ldrb	r2, [r7, #7]
 800d3b6:	79bb      	ldrb	r3, [r7, #6]
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d901      	bls.n	800d3c0 <Chk_ParamValidity+0x1c>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e000      	b.n	800d3c2 <Chk_ParamValidity+0x1e>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d3c0:	2300      	movs	r3, #0
  }
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	370c      	adds	r7, #12
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3cc:	4770      	bx	lr

0800d3ce <Chk_RangeValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_RangeValidity(MOBLEUINT16 min_param_value, 
                                const MOBLEUINT8* param,
                                                     MOBLEUINT16 max_param_value )
{
 800d3ce:	b480      	push	{r7}
 800d3d0:	b085      	sub	sp, #20
 800d3d2:	af00      	add	r7, sp, #0
 800d3d4:	4603      	mov	r3, r0
 800d3d6:	6039      	str	r1, [r7, #0]
 800d3d8:	80fb      	strh	r3, [r7, #6]
 800d3da:	4613      	mov	r3, r2
 800d3dc:	80bb      	strh	r3, [r7, #4]
   MOBLEUINT16 minRange;
   MOBLEUINT16 maxRange;
    
    minRange =  param[1] << 8;
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	3301      	adds	r3, #1
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	021b      	lsls	r3, r3, #8
 800d3e8:	81fb      	strh	r3, [r7, #14]
    minRange |= param[0];
 800d3ea:	683b      	ldr	r3, [r7, #0]
 800d3ec:	781b      	ldrb	r3, [r3, #0]
 800d3ee:	b29a      	uxth	r2, r3
 800d3f0:	89fb      	ldrh	r3, [r7, #14]
 800d3f2:	4313      	orrs	r3, r2
 800d3f4:	81fb      	strh	r3, [r7, #14]
    
    maxRange =  param[3] << 8;
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	3303      	adds	r3, #3
 800d3fa:	781b      	ldrb	r3, [r3, #0]
 800d3fc:	b29b      	uxth	r3, r3
 800d3fe:	021b      	lsls	r3, r3, #8
 800d400:	81bb      	strh	r3, [r7, #12]
    maxRange |= param[2];
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	3302      	adds	r3, #2
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	b29a      	uxth	r2, r3
 800d40a:	89bb      	ldrh	r3, [r7, #12]
 800d40c:	4313      	orrs	r3, r2
 800d40e:	81bb      	strh	r3, [r7, #12]
    
  if(minRange < min_param_value)
 800d410:	89fa      	ldrh	r2, [r7, #14]
 800d412:	88fb      	ldrh	r3, [r7, #6]
 800d414:	429a      	cmp	r2, r3
 800d416:	d201      	bcs.n	800d41c <Chk_RangeValidity+0x4e>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d418:	2303      	movs	r3, #3
 800d41a:	e00a      	b.n	800d432 <Chk_RangeValidity+0x64>
  }
  
  if((maxRange > max_param_value) || (maxRange < minRange))        
 800d41c:	89ba      	ldrh	r2, [r7, #12]
 800d41e:	88bb      	ldrh	r3, [r7, #4]
 800d420:	429a      	cmp	r2, r3
 800d422:	d803      	bhi.n	800d42c <Chk_RangeValidity+0x5e>
 800d424:	89ba      	ldrh	r2, [r7, #12]
 800d426:	89fb      	ldrh	r3, [r7, #14]
 800d428:	429a      	cmp	r2, r3
 800d42a:	d201      	bcs.n	800d430 <Chk_RangeValidity+0x62>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d42c:	2303      	movs	r3, #3
 800d42e:	e000      	b.n	800d432 <Chk_RangeValidity+0x64>
  } 
  
  return MOBLE_RESULT_SUCCESS;  
 800d430:	2300      	movs	r3, #0
}
 800d432:	4618      	mov	r0, r3
 800d434:	3714      	adds	r7, #20
 800d436:	46bd      	mov	sp, r7
 800d438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d43c:	4770      	bx	lr

0800d43e <Chk_OptionalParamValidity>:
*/ 
MOBLE_RESULT Chk_OptionalParamValidity(MOBLEUINT8 param_length,
                                       MOBLEUINT8 mandatory_length,
                                       MOBLEUINT8 param, 
                                       MOBLEUINT8 max_param_value  )
{
 800d43e:	b490      	push	{r4, r7}
 800d440:	b082      	sub	sp, #8
 800d442:	af00      	add	r7, sp, #0
 800d444:	4604      	mov	r4, r0
 800d446:	4608      	mov	r0, r1
 800d448:	4611      	mov	r1, r2
 800d44a:	461a      	mov	r2, r3
 800d44c:	4623      	mov	r3, r4
 800d44e:	71fb      	strb	r3, [r7, #7]
 800d450:	4603      	mov	r3, r0
 800d452:	71bb      	strb	r3, [r7, #6]
 800d454:	460b      	mov	r3, r1
 800d456:	717b      	strb	r3, [r7, #5]
 800d458:	4613      	mov	r3, r2
 800d45a:	713b      	strb	r3, [r7, #4]
  if ((param_length > mandatory_length) && (param > max_param_value))
 800d45c:	79fa      	ldrb	r2, [r7, #7]
 800d45e:	79bb      	ldrb	r3, [r7, #6]
 800d460:	429a      	cmp	r2, r3
 800d462:	d905      	bls.n	800d470 <Chk_OptionalParamValidity+0x32>
 800d464:	797a      	ldrb	r2, [r7, #5]
 800d466:	793b      	ldrb	r3, [r7, #4]
 800d468:	429a      	cmp	r2, r3
 800d46a:	d901      	bls.n	800d470 <Chk_OptionalParamValidity+0x32>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d46c:	2303      	movs	r3, #3
 800d46e:	e000      	b.n	800d472 <Chk_OptionalParamValidity+0x34>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d470:	2300      	movs	r3, #0
  }
}
 800d472:	4618      	mov	r0, r3
 800d474:	3708      	adds	r7, #8
 800d476:	46bd      	mov	sp, r7
 800d478:	bc90      	pop	{r4, r7}
 800d47a:	4770      	bx	lr

0800d47c <Chk_ParamMinMaxIntValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_ParamMinMaxIntValidity(MOBLEINT16 min_param_value,
                                        const MOBLEUINT8* param,
                                                     MOBLEINT16 max_param_value )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b085      	sub	sp, #20
 800d480:	af00      	add	r7, sp, #0
 800d482:	4603      	mov	r3, r0
 800d484:	6039      	str	r1, [r7, #0]
 800d486:	80fb      	strh	r3, [r7, #6]
 800d488:	4613      	mov	r3, r2
 800d48a:	80bb      	strh	r3, [r7, #4]
  MOBLEINT16 param_State1;
    
  param_State1 =  param[1] << 8;
 800d48c:	683b      	ldr	r3, [r7, #0]
 800d48e:	3301      	adds	r3, #1
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	021b      	lsls	r3, r3, #8
 800d494:	81fb      	strh	r3, [r7, #14]
  param_State1 |= param[0];
 800d496:	683b      	ldr	r3, [r7, #0]
 800d498:	781b      	ldrb	r3, [r3, #0]
 800d49a:	b21a      	sxth	r2, r3
 800d49c:	89fb      	ldrh	r3, [r7, #14]
 800d49e:	4313      	orrs	r3, r2
 800d4a0:	81fb      	strh	r3, [r7, #14]
    
  if((param_State1 < min_param_value) || (param_State1 > max_param_value))
 800d4a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d4a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	db05      	blt.n	800d4ba <Chk_ParamMinMaxIntValidity+0x3e>
 800d4ae:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800d4b2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800d4b6:	429a      	cmp	r2, r3
 800d4b8:	dd01      	ble.n	800d4be <Chk_ParamMinMaxIntValidity+0x42>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d4ba:	2303      	movs	r3, #3
 800d4bc:	e000      	b.n	800d4c0 <Chk_ParamMinMaxIntValidity+0x44>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d4be:	2300      	movs	r3, #0
  }
}
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <Chk_ParamMinMaxValidity>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Chk_ParamMinMaxValidity(MOBLEUINT16 min_param_value,
                                     const MOBLEUINT8* param,
                                                     MOBLEUINT16 max_param_value )
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	6039      	str	r1, [r7, #0]
 800d4d6:	80fb      	strh	r3, [r7, #6]
 800d4d8:	4613      	mov	r3, r2
 800d4da:	80bb      	strh	r3, [r7, #4]
   MOBLEUINT16 param_State1;
    
    param_State1 =  param[1] << 8;
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	3301      	adds	r3, #1
 800d4e0:	781b      	ldrb	r3, [r3, #0]
 800d4e2:	b29b      	uxth	r3, r3
 800d4e4:	021b      	lsls	r3, r3, #8
 800d4e6:	81fb      	strh	r3, [r7, #14]
    param_State1 |= param[0];
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	b29a      	uxth	r2, r3
 800d4ee:	89fb      	ldrh	r3, [r7, #14]
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	81fb      	strh	r3, [r7, #14]

  if((param_State1 < min_param_value) || (param_State1 > max_param_value))
 800d4f4:	89fa      	ldrh	r2, [r7, #14]
 800d4f6:	88fb      	ldrh	r3, [r7, #6]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d303      	bcc.n	800d504 <Chk_ParamMinMaxValidity+0x38>
 800d4fc:	89fa      	ldrh	r2, [r7, #14]
 800d4fe:	88bb      	ldrh	r3, [r7, #4]
 800d500:	429a      	cmp	r2, r3
 800d502:	d901      	bls.n	800d508 <Chk_ParamMinMaxValidity+0x3c>
  {
    return MOBLE_RESULT_INVALIDARG;
 800d504:	2303      	movs	r3, #3
 800d506:	e000      	b.n	800d50a <Chk_ParamMinMaxValidity+0x3e>
  }
  else
  {
    return MOBLE_RESULT_SUCCESS;
 800d508:	2300      	movs	r3, #0
  }
}
 800d50a:	4618      	mov	r0, r3
 800d50c:	3714      	adds	r7, #20
 800d50e:	46bd      	mov	sp, r7
 800d510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d514:	4770      	bx	lr
	...

0800d518 <Get_StepResolutionValue>:
* @brief  Get actual value in milliseconds from default transition step resolution 
* @param  time_param: integer value received for transition time
* @retval stepResolution 
 */                                         
MOBLEUINT32 Get_StepResolutionValue(MOBLEUINT8 time_param)
{
 800d518:	b480      	push	{r7}
 800d51a:	b085      	sub	sp, #20
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT32 stepResolution = 0;
 800d522:	2300      	movs	r3, #0
 800d524:	60fb      	str	r3, [r7, #12]
  
  if(time_param == STEP_HEX_VALUE_0)
 800d526:	79fb      	ldrb	r3, [r7, #7]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d102      	bne.n	800d532 <Get_StepResolutionValue+0x1a>
  {
    stepResolution = STEP_RESOLUTION_100MS;   
 800d52c:	2364      	movs	r3, #100	; 0x64
 800d52e:	60fb      	str	r3, [r7, #12]
 800d530:	e015      	b.n	800d55e <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_1)
 800d532:	79fb      	ldrb	r3, [r7, #7]
 800d534:	2b01      	cmp	r3, #1
 800d536:	d103      	bne.n	800d540 <Get_StepResolutionValue+0x28>
  {
    stepResolution = STEP_RESOLUTION_1S;   
 800d538:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	e00e      	b.n	800d55e <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_2)
 800d540:	79fb      	ldrb	r3, [r7, #7]
 800d542:	2b02      	cmp	r3, #2
 800d544:	d103      	bne.n	800d54e <Get_StepResolutionValue+0x36>
  {
    stepResolution = STEP_RESOLUTION_10S;   
 800d546:	f242 7310 	movw	r3, #10000	; 0x2710
 800d54a:	60fb      	str	r3, [r7, #12]
 800d54c:	e007      	b.n	800d55e <Get_StepResolutionValue+0x46>
  }
  else if(time_param == STEP_HEX_VALUE_3)
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	2b03      	cmp	r3, #3
 800d552:	d102      	bne.n	800d55a <Get_StepResolutionValue+0x42>
  {
    stepResolution = STEP_RESOLUTION_10M;
 800d554:	4b05      	ldr	r3, [pc, #20]	; (800d56c <Get_StepResolutionValue+0x54>)
 800d556:	60fb      	str	r3, [r7, #12]
 800d558:	e001      	b.n	800d55e <Get_StepResolutionValue+0x46>
  }
  else
  {
    stepResolution = 0;   
 800d55a:	2300      	movs	r3, #0
 800d55c:	60fb      	str	r3, [r7, #12]
  }  
  
  return stepResolution;  
 800d55e:	68fb      	ldr	r3, [r7, #12]
}
 800d560:	4618      	mov	r0, r3
 800d562:	3714      	adds	r7, #20
 800d564:	46bd      	mov	sp, r7
 800d566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d56a:	4770      	bx	lr
 800d56c:	000927c0 	.word	0x000927c0

0800d570 <TraceHeader>:
* @param  func_name: function pointer.
* @param  mode: Flag
* @retval void
*/ 
void TraceHeader(const char* func_name, int mode)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b082      	sub	sp, #8
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
    if (mode >= 0)
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	db08      	blt.n	800d592 <TraceHeader+0x22>
        printf("%ld %s - ", Clock_Time(), func_name);
 800d580:	f7fa fc70 	bl	8007e64 <HAL_GetTick>
 800d584:	4603      	mov	r3, r0
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	4619      	mov	r1, r3
 800d58a:	4808      	ldr	r0, [pc, #32]	; (800d5ac <TraceHeader+0x3c>)
 800d58c:	f01b fff4 	bl	8029578 <iprintf>
    else
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
}    
 800d590:	e007      	b.n	800d5a2 <TraceHeader+0x32>
        printf("%ld %s - <<<ERROR>>>", Clock_Time(), func_name);
 800d592:	f7fa fc67 	bl	8007e64 <HAL_GetTick>
 800d596:	4603      	mov	r3, r0
 800d598:	687a      	ldr	r2, [r7, #4]
 800d59a:	4619      	mov	r1, r3
 800d59c:	4804      	ldr	r0, [pc, #16]	; (800d5b0 <TraceHeader+0x40>)
 800d59e:	f01b ffeb 	bl	8029578 <iprintf>
}    
 800d5a2:	bf00      	nop
 800d5a4:	3708      	adds	r7, #8
 800d5a6:	46bd      	mov	sp, r7
 800d5a8:	bd80      	pop	{r7, pc}
 800d5aa:	bf00      	nop
 800d5ac:	0802edf8 	.word	0x0802edf8
 800d5b0:	0802ee04 	.word	0x0802ee04

0800d5b4 <Model_RestoreStates>:
*        saved states.
* @param void.
* return void.
*/
void Model_RestoreStates(MOBLEUINT8 const *pModelState_Load, MOBLEUINT8 size)
{ 
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b090      	sub	sp, #64	; 0x40
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
 800d5bc:	460b      	mov	r3, r1
 800d5be:	70fb      	strb	r3, [r7, #3]
  MOBLEUINT8 setData[4];
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT16 model_ID = 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
  MOBLEUINT16 opcode = 0;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  MOBLEUINT32 length = 0;
 800d5c8:	2300      	movs	r3, #0
 800d5ca:	637b      	str	r3, [r7, #52]	; 0x34
  MOBLEUINT16 dstPeer;
  MODEL_MessageHeader_t msgParam;
  
  MOBLEUINT16 saveBuffSize;
  
  my_Address = BLEMesh_GetAddress(); /* Get the Primary address */
 800d5cc:	f00f fd6c 	bl	801d0a8 <BLEMesh_GetAddress>
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	877b      	strh	r3, [r7, #58]	; 0x3a
  
  Models_ParamNvm_t Models_ParamNvm[APPLICATION_NUMBER_OF_ELEMENTS];
  
  saveBuffSize = sizeof(Models_ParamNvm);
 800d5d4:	2310      	movs	r3, #16
 800d5d6:	867b      	strh	r3, [r7, #50]	; 0x32
  
  TRACE_I(TF_NVM,"Retrieved data from flash \r\n");
  for(MOBLEUINT8 count=0;count<saveBuffSize;count++)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d5de:	e004      	b.n	800d5ea <Model_RestoreStates+0x36>
 800d5e0:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
 800d5ea:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800d5ee:	b29b      	uxth	r3, r3
 800d5f0:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 800d5f2:	429a      	cmp	r2, r3
 800d5f4:	d8f4      	bhi.n	800d5e0 <Model_RestoreStates+0x2c>
  {
    TRACE_I(TF_NVM,"%.2x %c",pModelState_Load[count],' ');
  }
  TRACE_I(TF_NVM,"\r\n");
  
  if (size > 0)
 800d5f6:	78fb      	ldrb	r3, [r7, #3]
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	f000 80d0 	beq.w	800d79e <Model_RestoreStates+0x1ea>
  {
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d5fe:	2300      	movs	r3, #0
 800d600:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d604:	e0c6      	b.n	800d794 <Model_RestoreStates+0x1e0>
    {
      
      memcpy((void*)&Models_ParamNvm,pModelState_Load,sizeof(Models_ParamNvm));
 800d606:	f107 030c 	add.w	r3, r7, #12
 800d60a:	2210      	movs	r2, #16
 800d60c:	6879      	ldr	r1, [r7, #4]
 800d60e:	4618      	mov	r0, r3
 800d610:	f01c f9e1 	bl	80299d6 <memcpy>
      
      Generic_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d614:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d618:	f107 020c 	add.w	r2, r7, #12
 800d61c:	011b      	lsls	r3, r3, #4
 800d61e:	4413      	add	r3, r2
 800d620:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d624:	4611      	mov	r1, r2
 800d626:	4618      	mov	r0, r3
 800d628:	f002 f800 	bl	800f62c <Generic_RestoreModelStates>
      Light_RestoreModelStates(&Models_ParamNvm[elementIndex] , elementIndex);
 800d62c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d630:	f107 020c 	add.w	r2, r7, #12
 800d634:	011b      	lsls	r3, r3, #4
 800d636:	4413      	add	r3, r2
 800d638:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d63c:	4611      	mov	r1, r2
 800d63e:	4618      	mov	r0, r3
 800d640:	f004 fae8 	bl	8011c14 <Light_RestoreModelStates>
      
      dstPeer = my_Address+elementIndex;
 800d644:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d648:	b29a      	uxth	r2, r3
 800d64a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d64c:	4413      	add	r3, r2
 800d64e:	863b      	strh	r3, [r7, #48]	; 0x30
    
      /* Initialize the messageParam */
      msgParam.dst_peer = dstPeer;
 800d650:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d652:	847b      	strh	r3, [r7, #34]	; 0x22
      msgParam.peer_addr = dstPeer;
 800d654:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d656:	843b      	strh	r3, [r7, #32]
      msgParam.elementIndex = elementIndex;
 800d658:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d65c:	773b      	strb	r3, [r7, #28]
      msgParam.rcvdAppKeyOffset = 0;
 800d65e:	2300      	movs	r3, #0
 800d660:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
      msgParam.rcvdNetKeyOffset = 0;
 800d664:	2300      	movs	r3, #0
 800d666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      msgParam.rssi = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      msgParam.ttl = 0;
 800d670:	2300      	movs	r3, #0
 800d672:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
      
      switch(Models_ParamNvm[elementIndex].Restore_Flag)  
 800d676:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d67a:	011b      	lsls	r3, r3, #4
 800d67c:	3340      	adds	r3, #64	; 0x40
 800d67e:	443b      	add	r3, r7
 800d680:	3b34      	subs	r3, #52	; 0x34
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2bfe      	cmp	r3, #254	; 0xfe
 800d686:	d057      	beq.n	800d738 <Model_RestoreStates+0x184>
 800d688:	2bfe      	cmp	r3, #254	; 0xfe
 800d68a:	dc61      	bgt.n	800d750 <Model_RestoreStates+0x19c>
 800d68c:	2b03      	cmp	r3, #3
 800d68e:	d02f      	beq.n	800d6f0 <Model_RestoreStates+0x13c>
 800d690:	2b03      	cmp	r3, #3
 800d692:	dc5d      	bgt.n	800d750 <Model_RestoreStates+0x19c>
 800d694:	2b01      	cmp	r3, #1
 800d696:	d002      	beq.n	800d69e <Model_RestoreStates+0xea>
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d013      	beq.n	800d6c4 <Model_RestoreStates+0x110>
        }
        
        default: 
        {
          TRACE_M(TF_LIGHT_M, "No Saved Data Found \r\n");
          break;
 800d69c:	e058      	b.n	800d750 <Model_RestoreStates+0x19c>
          Generic_OnOffPowerOnValue(&Models_ParamNvm[elementIndex], &msgParam);				
 800d69e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6a2:	f107 020c 	add.w	r2, r7, #12
 800d6a6:	011b      	lsls	r3, r3, #4
 800d6a8:	4413      	add	r3, r2
 800d6aa:	f107 021c 	add.w	r2, r7, #28
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 f87d 	bl	800d7b0 <Generic_OnOffPowerOnValue>
          opcode = GENERIC_ON_OFF_SET_UNACK;
 800d6b6:	f248 2303 	movw	r3, #33283	; 0x8203
 800d6ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
          model_ID = GENERIC_ONOFF_SERVER_MODEL_ID;
 800d6bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d6c0:	87fb      	strh	r3, [r7, #62]	; 0x3e
          break;
 800d6c2:	e046      	b.n	800d752 <Model_RestoreStates+0x19e>
          CopyU8LittleEndienArray_fromU16word (setData, Models_ParamNvm[elementIndex].Generic_Level);
 800d6c4:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6c8:	011b      	lsls	r3, r3, #4
 800d6ca:	3340      	adds	r3, #64	; 0x40
 800d6cc:	443b      	add	r3, r7
 800d6ce:	3b2e      	subs	r3, #46	; 0x2e
 800d6d0:	881a      	ldrh	r2, [r3, #0]
 800d6d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6d6:	4611      	mov	r1, r2
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f000 f94f 	bl	800d97c <CopyU8LittleEndienArray_fromU16word>
          Generic_Level_Set(setData,2, &msgParam);
 800d6de:	f107 021c 	add.w	r2, r7, #28
 800d6e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d6e6:	2102      	movs	r1, #2
 800d6e8:	4618      	mov	r0, r3
 800d6ea:	f000 fb95 	bl	800de18 <Generic_Level_Set>
          break;
 800d6ee:	e030      	b.n	800d752 <Model_RestoreStates+0x19e>
          light_LightnessValue = Light_lightnessPowerOnValue(&Models_ParamNvm[elementIndex], &msgParam);
 800d6f0:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d6f4:	f107 020c 	add.w	r2, r7, #12
 800d6f8:	011b      	lsls	r3, r3, #4
 800d6fa:	4413      	add	r3, r2
 800d6fc:	f107 021c 	add.w	r2, r7, #28
 800d700:	4611      	mov	r1, r2
 800d702:	4618      	mov	r0, r3
 800d704:	f000 f891 	bl	800d82a <Light_lightnessPowerOnValue>
 800d708:	4603      	mov	r3, r0
 800d70a:	85fb      	strh	r3, [r7, #46]	; 0x2e
          CopyU8LittleEndienArray_fromU16word (setData, light_LightnessValue);
 800d70c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d70e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d712:	4611      	mov	r1, r2
 800d714:	4618      	mov	r0, r3
 800d716:	f000 f931 	bl	800d97c <CopyU8LittleEndienArray_fromU16word>
          Light_Lightness_Set(setData, 2, &msgParam);
 800d71a:	f107 021c 	add.w	r2, r7, #28
 800d71e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d722:	2102      	movs	r1, #2
 800d724:	4618      	mov	r0, r3
 800d726:	f001 fffb 	bl	800f720 <Light_Lightness_Set>
          opcode = LIGHT_LIGHTNESS_SET_UNACK;
 800d72a:	f248 234d 	movw	r3, #33357	; 0x824d
 800d72e:	87bb      	strh	r3, [r7, #60]	; 0x3c
          model_ID = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 800d730:	f44f 5398 	mov.w	r3, #4864	; 0x1300
 800d734:	87fb      	strh	r3, [r7, #62]	; 0x3e
          break;
 800d736:	e00c      	b.n	800d752 <Model_RestoreStates+0x19e>
          TRACE_M(TF_GENERIC_M, "Power OnOff value stored = %d \r\n",pModelState_Load[4]);
 800d738:	2100      	movs	r1, #0
 800d73a:	481b      	ldr	r0, [pc, #108]	; (800d7a8 <Model_RestoreStates+0x1f4>)
 800d73c:	f7ff ff18 	bl	800d570 <TraceHeader>
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	3304      	adds	r3, #4
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	4619      	mov	r1, r3
 800d748:	4818      	ldr	r0, [pc, #96]	; (800d7ac <Model_RestoreStates+0x1f8>)
 800d74a:	f01b ff15 	bl	8029578 <iprintf>
          break;
 800d74e:	e000      	b.n	800d752 <Model_RestoreStates+0x19e>
          break;
 800d750:	bf00      	nop
        }
        
      } /* switch(pModelState_Load[GENERIC_VALID_FLAG_OFFSET]) */    
    
      my_Address = BLEMesh_GetAddress();
 800d752:	f00f fca9 	bl	801d0a8 <BLEMesh_GetAddress>
 800d756:	4603      	mov	r3, r0
 800d758:	877b      	strh	r3, [r7, #58]	; 0x3a
      publishAddress = BLEMesh_GetPublishAddress(elementIndex, model_ID);
 800d75a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800d75c:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d760:	4611      	mov	r1, r2
 800d762:	4618      	mov	r0, r3
 800d764:	f00f fcb0 	bl	801d0c8 <BLEMesh_GetPublishAddress>
 800d768:	4603      	mov	r3, r0
 800d76a:	85bb      	strh	r3, [r7, #44]	; 0x2c
      
      if(publishAddress != 0x0000 )
 800d76c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d00b      	beq.n	800d78a <Model_RestoreStates+0x1d6>
      {
        msgParam.peer_addr = publishAddress;
 800d772:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d774:	843b      	strh	r3, [r7, #32]
        msgParam.dst_peer = dstPeer;
 800d776:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d778:	847b      	strh	r3, [r7, #34]	; 0x22
      
        Model_SendResponse(&msgParam, opcode, setData,length);
 800d77a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800d77e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 800d780:	f107 001c 	add.w	r0, r7, #28
 800d784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d786:	f01a fe9d 	bl	80284c4 <Model_SendResponse>
    for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800d78a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d78e:	3301      	adds	r3, #1
 800d790:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800d794:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800d798:	2b00      	cmp	r3, #0
 800d79a:	f43f af34 	beq.w	800d606 <Model_RestoreStates+0x52>
      } /* if(publishAddress != 0x0000) */
     
     // break; /* Run only once for element index 0 */
    } /* for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++) */
  } /* if (size > 0) */
}
 800d79e:	bf00      	nop
 800d7a0:	3740      	adds	r7, #64	; 0x40
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	08032e58 	.word	0x08032e58
 800d7ac:	0802ee28 	.word	0x0802ee28

0800d7b0 <Generic_OnOffPowerOnValue>:
* @param  *pmsgParam: Pointer to structure of message header for parameters:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLEUINT16
*/
void Generic_OnOffPowerOnValue(Models_ParamNvm_t *state_Value, MODEL_MessageHeader_t *pmsgParam)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 transitionStatus;
  MOBLEUINT8 setData[2]; 
  
  transitionStatus = state_Value->GenericTransitionStatus;
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	789b      	ldrb	r3, [r3, #2]
 800d7be:	73fb      	strb	r3, [r7, #15]
  
  if(transitionStatus)
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d003      	beq.n	800d7ce <Generic_OnOffPowerOnValue+0x1e>
  {
    setData[0] = state_Value->GenericTarget;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	795b      	ldrb	r3, [r3, #5]
 800d7ca:	733b      	strb	r3, [r7, #12]
 800d7cc:	e002      	b.n	800d7d4 <Generic_OnOffPowerOnValue+0x24>
  }
  else
  {
    setData[0] = state_Value->Generic_OnOff;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	791b      	ldrb	r3, [r3, #4]
 800d7d2:	733b      	strb	r3, [r7, #12]
  }
  
  if(state_Value->PowerOnOff == GENERIC_POWER_OFF_STATE)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	78db      	ldrb	r3, [r3, #3]
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d109      	bne.n	800d7f0 <Generic_OnOffPowerOnValue+0x40>
  {
    setData[0] = APPLI_LED_OFF;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam); 
 800d7e0:	f107 030c 	add.w	r3, r7, #12
 800d7e4:	683a      	ldr	r2, [r7, #0]
 800d7e6:	2101      	movs	r1, #1
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f000 f98f 	bl	800db0c <Generic_OnOff_Set>
  }
  else
  {
    
  }           
}
 800d7ee:	e018      	b.n	800d822 <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_ON_STATE)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	78db      	ldrb	r3, [r3, #3]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d109      	bne.n	800d80c <Generic_OnOffPowerOnValue+0x5c>
    setData[0] = APPLI_LED_ON;
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	733b      	strb	r3, [r7, #12]
    Generic_OnOff_Set(setData,1,pmsgParam);
 800d7fc:	f107 030c 	add.w	r3, r7, #12
 800d800:	683a      	ldr	r2, [r7, #0]
 800d802:	2101      	movs	r1, #1
 800d804:	4618      	mov	r0, r3
 800d806:	f000 f981 	bl	800db0c <Generic_OnOff_Set>
}
 800d80a:	e00a      	b.n	800d822 <Generic_OnOffPowerOnValue+0x72>
  else if(state_Value->PowerOnOff == GENERIC_POWER_RESTORE_STATE)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	78db      	ldrb	r3, [r3, #3]
 800d810:	2b02      	cmp	r3, #2
 800d812:	d106      	bne.n	800d822 <Generic_OnOffPowerOnValue+0x72>
    Generic_OnOff_Set(setData, 1,pmsgParam);
 800d814:	f107 030c 	add.w	r3, r7, #12
 800d818:	683a      	ldr	r2, [r7, #0]
 800d81a:	2101      	movs	r1, #1
 800d81c:	4618      	mov	r0, r3
 800d81e:	f000 f975 	bl	800db0c <Generic_OnOff_Set>
}
 800d822:	bf00      	nop
 800d824:	3710      	adds	r7, #16
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}

0800d82a <Light_lightnessPowerOnValue>:
* @param  *pmsgParam: Pointer to structure of message header for parameters:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLEUINT16
*/
MOBLEUINT16 Light_lightnessPowerOnValue(Models_ParamNvm_t *state_Value, MODEL_MessageHeader_t *pmsgParam)
{
 800d82a:	b580      	push	{r7, lr}
 800d82c:	b086      	sub	sp, #24
 800d82e:	af00      	add	r7, sp, #0
 800d830:	6078      	str	r0, [r7, #4]
 800d832:	6039      	str	r1, [r7, #0]
  MOBLEUINT8 powerOn_Value;
  MOBLEUINT16 light_Actual = 0;
 800d834:	2300      	movs	r3, #0
 800d836:	82fb      	strh	r3, [r7, #22]
  MOBLEUINT16 last_KnownValue;
  MOBLEUINT8 transitionStatus;
  MOBLEUINT8 setData[4];
  transitionStatus = state_Value->LightTransitionStatus;
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	785b      	ldrb	r3, [r3, #1]
 800d83c:	74fb      	strb	r3, [r7, #19]
  
  if(transitionStatus)
 800d83e:	7cfb      	ldrb	r3, [r7, #19]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d003      	beq.n	800d84c <Light_lightnessPowerOnValue+0x22>
  {
    last_KnownValue = state_Value->LightTarget;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	895b      	ldrh	r3, [r3, #10]
 800d848:	82bb      	strh	r3, [r7, #20]
 800d84a:	e002      	b.n	800d852 <Light_lightnessPowerOnValue+0x28>
    TRACE_M(TF_COMMON,"Transition Flag is = %.2x, Last_Known Value = 0x%.2x \r\n",\
            transitionStatus, last_KnownValue);
  }
  else
  {
    last_KnownValue = state_Value->LightLightness;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	891b      	ldrh	r3, [r3, #8]
 800d850:	82bb      	strh	r3, [r7, #20]
    
    TRACE_M(TF_COMMON,"Transition Flag is = %.2x, Last_Known Value = 0x%.2x \r\n",\
            transitionStatus, last_KnownValue);
  }
  
  powerOn_Value = state_Value->PowerOnOff;
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	78db      	ldrb	r3, [r3, #3]
 800d856:	74bb      	strb	r3, [r7, #18]
  
  CopyU8LittleEndienArray_fromU16word (setData, state_Value->LightLast);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	89da      	ldrh	r2, [r3, #14]
 800d85c:	f107 030c 	add.w	r3, r7, #12
 800d860:	4611      	mov	r1, r2
 800d862:	4618      	mov	r0, r3
 800d864:	f000 f88a 	bl	800d97c <CopyU8LittleEndienArray_fromU16word>
  
  Light_LightnessLast_Set(setData,2, pmsgParam);
 800d868:	f107 030c 	add.w	r3, r7, #12
 800d86c:	683a      	ldr	r2, [r7, #0]
 800d86e:	2102      	movs	r1, #2
 800d870:	4618      	mov	r0, r3
 800d872:	f002 fa6d 	bl	800fd50 <Light_LightnessLast_Set>
  
  CopyU8LittleEndienArray_fromU16word (setData, state_Value->LightDefault);
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	899a      	ldrh	r2, [r3, #12]
 800d87a:	f107 030c 	add.w	r3, r7, #12
 800d87e:	4611      	mov	r1, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f000 f87b 	bl	800d97c <CopyU8LittleEndienArray_fromU16word>
  Light_LightnessDefault_Set(setData,2, pmsgParam);
 800d886:	f107 030c 	add.w	r3, r7, #12
 800d88a:	683a      	ldr	r2, [r7, #0]
 800d88c:	2102      	movs	r1, #2
 800d88e:	4618      	mov	r0, r3
 800d890:	f002 fad2 	bl	800fe38 <Light_LightnessDefault_Set>
   
  if(powerOn_Value == GENERIC_POWER_OFF_STATE)
 800d894:	7cbb      	ldrb	r3, [r7, #18]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d102      	bne.n	800d8a0 <Light_lightnessPowerOnValue+0x76>
  { /* Light Lightness Actual = 0 for value of the Generic OnPowerUp state equal 
       to 0x00 */
    light_Actual = 0x00;
 800d89a:	2300      	movs	r3, #0
 800d89c:	82fb      	strh	r3, [r7, #22]
 800d89e:	e01a      	b.n	800d8d6 <Light_lightnessPowerOnValue+0xac>
  }
  else if((powerOn_Value == GENERIC_POWER_ON_STATE) && (state_Value->LightDefault != 0x00))
 800d8a0:	7cbb      	ldrb	r3, [r7, #18]
 800d8a2:	2b01      	cmp	r3, #1
 800d8a4:	d107      	bne.n	800d8b6 <Light_lightnessPowerOnValue+0x8c>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	899b      	ldrh	r3, [r3, #12]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d003      	beq.n	800d8b6 <Light_lightnessPowerOnValue+0x8c>
  {
    /* Light Lightness Actual = Light Lightness Default for value of the Generic 
        OnPowerUp state equal to 0x01 and Light Lightness Default not equal to zero, */
    light_Actual = state_Value->LightDefault;
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	899b      	ldrh	r3, [r3, #12]
 800d8b2:	82fb      	strh	r3, [r7, #22]
 800d8b4:	e00f      	b.n	800d8d6 <Light_lightnessPowerOnValue+0xac>
  }
  else if((powerOn_Value == GENERIC_POWER_ON_STATE) && (state_Value->LightDefault == 0x00))
 800d8b6:	7cbb      	ldrb	r3, [r7, #18]
 800d8b8:	2b01      	cmp	r3, #1
 800d8ba:	d107      	bne.n	800d8cc <Light_lightnessPowerOnValue+0xa2>
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	899b      	ldrh	r3, [r3, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d103      	bne.n	800d8cc <Light_lightnessPowerOnValue+0xa2>
  {
    /* Light Lightness Actual = Light Lightness Last (see Section 6.1.2.3)
       for value of the Generic OnPowerUp state equal to 0x01 and 
       Light Lightness Default equal to zero */
    light_Actual = state_Value->LightLast;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	89db      	ldrh	r3, [r3, #14]
 800d8c8:	82fb      	strh	r3, [r7, #22]
 800d8ca:	e004      	b.n	800d8d6 <Light_lightnessPowerOnValue+0xac>
  }
  else if(powerOn_Value == GENERIC_POWER_RESTORE_STATE)
 800d8cc:	7cbb      	ldrb	r3, [r7, #18]
 800d8ce:	2b02      	cmp	r3, #2
 800d8d0:	d101      	bne.n	800d8d6 <Light_lightnessPowerOnValue+0xac>
  {
    light_Actual = last_KnownValue;
 800d8d2:	8abb      	ldrh	r3, [r7, #20]
 800d8d4:	82fb      	strh	r3, [r7, #22]
  {
     
  }

  TRACE_I(TF_COMMON, "LIGHT LIGHTNESS VALUE ON POWER UP %.2x \r\n",light_Actual);
  return light_Actual;
 800d8d6:	8afb      	ldrh	r3, [r7, #22]
}  
 800d8d8:	4618      	mov	r0, r3
 800d8da:	3718      	adds	r7, #24
 800d8dc:	46bd      	mov	sp, r7
 800d8de:	bd80      	pop	{r7, pc}

0800d8e0 <Chk_TidValidity>:
  * @brief  
  * @param  
  * @retval 
  */
MOBLE_RESULT Chk_TidValidity(MOBLE_ADDRESS peerAddr, MOBLE_ADDRESS dstAddr, MOBLEUINT8 tidValue)
{
 800d8e0:	b580      	push	{r7, lr}
 800d8e2:	b084      	sub	sp, #16
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	80fb      	strh	r3, [r7, #6]
 800d8ea:	460b      	mov	r3, r1
 800d8ec:	80bb      	strh	r3, [r7, #4]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	73fb      	strb	r3, [r7, #15]
  
  TRACE_M(TF_COMMON, "dst_peer %.2X peer_add %.2X, tid %d\r\n", dstAddr, peerAddr, tidValue);
  
  if(((Clock_Time()- Check_time) <= 6000))
 800d8f6:	f7fa fab5 	bl	8007e64 <HAL_GetTick>
 800d8fa:	4602      	mov	r2, r0
 800d8fc:	4b1d      	ldr	r3, [pc, #116]	; (800d974 <Chk_TidValidity+0x94>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	1ad3      	subs	r3, r2, r3
 800d902:	f241 7270 	movw	r2, #6000	; 0x1770
 800d906:	4293      	cmp	r3, r2
 800d908:	d820      	bhi.n	800d94c <Chk_TidValidity+0x6c>
  {
    if((Model_Tid.Peer_Addrs == peerAddr)&&(Model_Tid.Dst_Addrs == dstAddr)&&(Model_Tid.Tid_Value == tidValue))
 800d90a:	4b1b      	ldr	r3, [pc, #108]	; (800d978 <Chk_TidValidity+0x98>)
 800d90c:	885b      	ldrh	r3, [r3, #2]
 800d90e:	88fa      	ldrh	r2, [r7, #6]
 800d910:	429a      	cmp	r2, r3
 800d912:	d10c      	bne.n	800d92e <Chk_TidValidity+0x4e>
 800d914:	4b18      	ldr	r3, [pc, #96]	; (800d978 <Chk_TidValidity+0x98>)
 800d916:	889b      	ldrh	r3, [r3, #4]
 800d918:	88ba      	ldrh	r2, [r7, #4]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d107      	bne.n	800d92e <Chk_TidValidity+0x4e>
 800d91e:	4b16      	ldr	r3, [pc, #88]	; (800d978 <Chk_TidValidity+0x98>)
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	78fa      	ldrb	r2, [r7, #3]
 800d924:	429a      	cmp	r2, r3
 800d926:	d102      	bne.n	800d92e <Chk_TidValidity+0x4e>
    {
      TRACE_M(TF_COMMON,"Duplicate Message Parameter within six second \r\n");
      status =  MOBLE_RESULT_INVALIDARG;       
 800d928:	2303      	movs	r3, #3
 800d92a:	73fb      	strb	r3, [r7, #15]
 800d92c:	e01c      	b.n	800d968 <Chk_TidValidity+0x88>
    }
    else
    {
      Check_time = Clock_Time();
 800d92e:	f7fa fa99 	bl	8007e64 <HAL_GetTick>
 800d932:	4603      	mov	r3, r0
 800d934:	4a0f      	ldr	r2, [pc, #60]	; (800d974 <Chk_TidValidity+0x94>)
 800d936:	6013      	str	r3, [r2, #0]
      Model_Tid.Peer_Addrs = peerAddr;
 800d938:	4a0f      	ldr	r2, [pc, #60]	; (800d978 <Chk_TidValidity+0x98>)
 800d93a:	88fb      	ldrh	r3, [r7, #6]
 800d93c:	8053      	strh	r3, [r2, #2]
      Model_Tid.Dst_Addrs = dstAddr;
 800d93e:	4a0e      	ldr	r2, [pc, #56]	; (800d978 <Chk_TidValidity+0x98>)
 800d940:	88bb      	ldrh	r3, [r7, #4]
 800d942:	8093      	strh	r3, [r2, #4]
      Model_Tid.Tid_Value = tidValue; 
 800d944:	4a0c      	ldr	r2, [pc, #48]	; (800d978 <Chk_TidValidity+0x98>)
 800d946:	78fb      	ldrb	r3, [r7, #3]
 800d948:	7013      	strb	r3, [r2, #0]
 800d94a:	e00d      	b.n	800d968 <Chk_TidValidity+0x88>
      TRACE_M(TF_COMMON,"New Message Parameter within six second \r\n");
    }
  }
  else
  {
    Check_time = Clock_Time();
 800d94c:	f7fa fa8a 	bl	8007e64 <HAL_GetTick>
 800d950:	4603      	mov	r3, r0
 800d952:	4a08      	ldr	r2, [pc, #32]	; (800d974 <Chk_TidValidity+0x94>)
 800d954:	6013      	str	r3, [r2, #0]
    Model_Tid.Peer_Addrs = peerAddr;
 800d956:	4a08      	ldr	r2, [pc, #32]	; (800d978 <Chk_TidValidity+0x98>)
 800d958:	88fb      	ldrh	r3, [r7, #6]
 800d95a:	8053      	strh	r3, [r2, #2]
    Model_Tid.Dst_Addrs = dstAddr;
 800d95c:	4a06      	ldr	r2, [pc, #24]	; (800d978 <Chk_TidValidity+0x98>)
 800d95e:	88bb      	ldrh	r3, [r7, #4]
 800d960:	8093      	strh	r3, [r2, #4]
    Model_Tid.Tid_Value = tidValue;
 800d962:	4a05      	ldr	r2, [pc, #20]	; (800d978 <Chk_TidValidity+0x98>)
 800d964:	78fb      	ldrb	r3, [r7, #3]
 800d966:	7013      	strb	r3, [r2, #0]
    TRACE_M(TF_COMMON,"New Message Parameter after six second\r\n");
  }
  
  return status;
 800d968:	7bfb      	ldrb	r3, [r7, #15]
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3710      	adds	r7, #16
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	20004564 	.word	0x20004564
 800d978:	20004554 	.word	0x20004554

0800d97c <CopyU8LittleEndienArray_fromU16word>:
  * and copy in one byte size array.  
  * @param pArray: pointer too the input array
  * @param inputWord: 16 bit variabale  
*/
void CopyU8LittleEndienArray_fromU16word (MOBLEUINT8* pArray, MOBLEUINT16 inputWord)
{
 800d97c:	b480      	push	{r7}
 800d97e:	b083      	sub	sp, #12
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	807b      	strh	r3, [r7, #2]
  *(pArray) = (MOBLEUINT8)(inputWord & 0x00ff);  /* Copy the LSB first */
 800d988:	887b      	ldrh	r3, [r7, #2]
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	701a      	strb	r2, [r3, #0]
  *(pArray+1) = (MOBLEUINT8)((inputWord & 0xff00) >> 0x08); /* Copy the MSB later */
 800d990:	887b      	ldrh	r3, [r7, #2]
 800d992:	0a1b      	lsrs	r3, r3, #8
 800d994:	b29a      	uxth	r2, r3
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	3301      	adds	r3, #1
 800d99a:	b2d2      	uxtb	r2, r2
 800d99c:	701a      	strb	r2, [r3, #0]
}
 800d99e:	bf00      	nop
 800d9a0:	370c      	adds	r7, #12
 800d9a2:	46bd      	mov	sp, r7
 800d9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a8:	4770      	bx	lr

0800d9aa <CopyU8LittleEndienArrayToU16word>:
  * bit variable
  * @param pArray: pointer too the input array
  * @retval u16Word : 16 bit value. 
*/
MOBLEUINT16 CopyU8LittleEndienArrayToU16word (MOBLEUINT8* pArray) 
{
 800d9aa:	b480      	push	{r7}
 800d9ac:	b085      	sub	sp, #20
 800d9ae:	af00      	add	r7, sp, #0
 800d9b0:	6078      	str	r0, [r7, #4]
  MOBLEUINT16 u16Word=0;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 lsb_byte=0;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	737b      	strb	r3, [r7, #13]
  MOBLEUINT8 msb_byte=0;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	733b      	strb	r3, [r7, #12]
  
  lsb_byte = *pArray;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	781b      	ldrb	r3, [r3, #0]
 800d9c2:	737b      	strb	r3, [r7, #13]
  pArray++;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	607b      	str	r3, [r7, #4]
  msb_byte = *pArray;
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	733b      	strb	r3, [r7, #12]
  u16Word = (msb_byte<<8);
 800d9d0:	7b3b      	ldrb	r3, [r7, #12]
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	021b      	lsls	r3, r3, #8
 800d9d6:	81fb      	strh	r3, [r7, #14]
  u16Word &= 0xFF00;
 800d9d8:	89fb      	ldrh	r3, [r7, #14]
 800d9da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d9de:	81fb      	strh	r3, [r7, #14]
  u16Word |= lsb_byte;
 800d9e0:	7b7b      	ldrb	r3, [r7, #13]
 800d9e2:	b29a      	uxth	r2, r3
 800d9e4:	89fb      	ldrh	r3, [r7, #14]
 800d9e6:	4313      	orrs	r3, r2
 800d9e8:	81fb      	strh	r3, [r7, #14]

  return u16Word;
 800d9ea:	89fb      	ldrh	r3, [r7, #14]
}
 800d9ec:	4618      	mov	r0, r3
 800d9ee:	3714      	adds	r7, #20
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f6:	4770      	bx	lr

0800d9f8 <NvmStatePowerFlag_Set>:
* @brief  Update parameters for ModelSaveProcess to save model states
* @param  NVM flag for model
* @retval None
*/
void NvmStatePowerFlag_Set(MOBLEUINT8 nvmModelFlag, MOBLEUINT8 elementIndex)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b083      	sub	sp, #12
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	4603      	mov	r3, r0
 800da00:	460a      	mov	r2, r1
 800da02:	71fb      	strb	r3, [r7, #7]
 800da04:	4613      	mov	r3, r2
 800da06:	71bb      	strb	r3, [r7, #6]
#ifdef SAVE_MODEL_STATE_FOR_ALL_MESSAGES
  PowerOnOff_flag = FLAG_SET;
  RestoreFlag[elementIndex] = nvmModelFlag;
#endif
}
 800da08:	bf00      	nop
 800da0a:	370c      	adds	r7, #12
 800da0c:	46bd      	mov	sp, r7
 800da0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da12:	4770      	bx	lr

0800da14 <Binding_GenericOnOff_LightLcLightOnOff>:
MOBLE_RESULT Binding_GenericOnOff_LightLcLightOnOff(MOBLEUINT8 genericElementIndex, 
                                                    MOBLEUINT8 genericOnOff,
                                                    MOBLEUINT8 optionalParams,
                                                    MOBLEUINT32 delayMs,
                                                      MOBLEUINT8 transitionParam)
{
 800da14:	b580      	push	{r7, lr}
 800da16:	b086      	sub	sp, #24
 800da18:	af02      	add	r7, sp, #8
 800da1a:	603b      	str	r3, [r7, #0]
 800da1c:	4603      	mov	r3, r0
 800da1e:	71fb      	strb	r3, [r7, #7]
 800da20:	460b      	mov	r3, r1
 800da22:	71bb      	strb	r3, [r7, #6]
 800da24:	4613      	mov	r3, r2
 800da26:	717b      	strb	r3, [r7, #5]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800da28:	2300      	movs	r3, #0
 800da2a:	73fb      	strb	r3, [r7, #15]
  
  /* optional params to be inserted */
  Light_LC_LcOnOffUpdate(genericElementIndex, genericOnOff, 0, 0, 0, 0);
 800da2c:	79b9      	ldrb	r1, [r7, #6]
 800da2e:	79f8      	ldrb	r0, [r7, #7]
 800da30:	2300      	movs	r3, #0
 800da32:	9301      	str	r3, [sp, #4]
 800da34:	2300      	movs	r3, #0
 800da36:	9300      	str	r3, [sp, #0]
 800da38:	2300      	movs	r3, #0
 800da3a:	2200      	movs	r2, #0
 800da3c:	f005 fe00 	bl	8013640 <Light_LC_LcOnOffUpdate>
  
  return result;
 800da40:	7bfb      	ldrb	r3, [r7, #15]
}
 800da42:	4618      	mov	r0, r3
 800da44:	3710      	adds	r7, #16
 800da46:	46bd      	mov	sp, r7
 800da48:	bd80      	pop	{r7, pc}

0800da4a <BindingDisable_LcLinearOut_LightLightnessLinear>:
  *         Extract target LC Server element index
  * @param  element index of Light Lightness Server
  * @retval None
  */
void BindingDisable_LcLinearOut_LightLightnessLinear(MOBLEUINT8 lightnessLinearElementIndex)
{
 800da4a:	b580      	push	{r7, lr}
 800da4c:	b082      	sub	sp, #8
 800da4e:	af00      	add	r7, sp, #0
 800da50:	4603      	mov	r3, r0
 800da52:	71fb      	strb	r3, [r7, #7]
  if(lightnessLinearElementIndex == LIGHT_LIGHTNESS_SERVER_MAIN_ELEMENT_INDEX)
 800da54:	79fb      	ldrb	r3, [r7, #7]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d103      	bne.n	800da62 <BindingDisable_LcLinearOut_LightLightnessLinear+0x18>
  {
    Light_LC_LigtnessLinearUnsolicitedChange(lightnessLinearElementIndex);
 800da5a:	79fb      	ldrb	r3, [r7, #7]
 800da5c:	4618      	mov	r0, r3
 800da5e:	f005 fde4 	bl	801362a <Light_LC_LigtnessLinearUnsolicitedChange>
  }
}
 800da62:	bf00      	nop
 800da64:	3708      	adds	r7, #8
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <ApplicationGetConfigServerDeviceKey>:


WEAK_FUNCTION ( MOBLE_RESULT ApplicationGetConfigServerDeviceKey(MOBLE_ADDRESS src, 
                                                 const MOBLEUINT8 **ppkeyTbUse))
{
 800da6a:	b480      	push	{r7}
 800da6c:	b083      	sub	sp, #12
 800da6e:	af00      	add	r7, sp, #0
 800da70:	4603      	mov	r3, r0
 800da72:	6039      	str	r1, [r7, #0]
 800da74:	80fb      	strh	r3, [r7, #6]
  return MOBLE_RESULT_SUCCESS;
 800da76:	2300      	movs	r3, #0
}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <Wait_RandomTime>:
* @brief  Function used to calculate the delay with random time..
* @param  MOBLEUINT16
* @retval MOBLEUINT8
*/
MOBLEBOOL Wait_RandomTime(void)
{
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
   static MOBLEUINT8 Clockflag = 0;
   static MOBLEUINT32 wait_Time;
   static MOBLEUINT32 check_Time;
   MOBLEUINT8 random_time[8];
 
   if(Clockflag == 0)
 800da8a:	4b1c      	ldr	r3, [pc, #112]	; (800dafc <Wait_RandomTime+0x78>)
 800da8c:	781b      	ldrb	r3, [r3, #0]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d120      	bne.n	800dad4 <Wait_RandomTime+0x50>
   {   
    hci_le_rand(random_time);
 800da92:	463b      	mov	r3, r7
 800da94:	4618      	mov	r0, r3
 800da96:	f007 ff41 	bl	801591c <hci_le_rand>
    check_Time = Clock_Time();
 800da9a:	f7fa f9e3 	bl	8007e64 <HAL_GetTick>
 800da9e:	4603      	mov	r3, r0
 800daa0:	4a17      	ldr	r2, [pc, #92]	; (800db00 <Wait_RandomTime+0x7c>)
 800daa2:	6013      	str	r3, [r2, #0]
    wait_Time = DEFAULT_RANDOM_DELAY_VALUE + 
                                     (random_time[0] + random_time[1]*256)\
 800daa4:	783b      	ldrb	r3, [r7, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	787b      	ldrb	r3, [r7, #1]
 800daaa:	021b      	lsls	r3, r3, #8
 800daac:	441a      	add	r2, r3
                                         %DEFAULT_RANDOM_DELAY_VALUE; 
 800daae:	4b15      	ldr	r3, [pc, #84]	; (800db04 <Wait_RandomTime+0x80>)
 800dab0:	fb83 1302 	smull	r1, r3, r3, r2
 800dab4:	1159      	asrs	r1, r3, #5
 800dab6:	17d3      	asrs	r3, r2, #31
 800dab8:	1acb      	subs	r3, r1, r3
 800daba:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800dabe:	fb01 f303 	mul.w	r3, r1, r3
 800dac2:	1ad3      	subs	r3, r2, r3
    wait_Time = DEFAULT_RANDOM_DELAY_VALUE + 
 800dac4:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 800dac8:	461a      	mov	r2, r3
 800daca:	4b0f      	ldr	r3, [pc, #60]	; (800db08 <Wait_RandomTime+0x84>)
 800dacc:	601a      	str	r2, [r3, #0]
                                        
     Clockflag = 1;
 800dace:	4b0b      	ldr	r3, [pc, #44]	; (800dafc <Wait_RandomTime+0x78>)
 800dad0:	2201      	movs	r2, #1
 800dad2:	701a      	strb	r2, [r3, #0]
   } 
/* The function will called until the testcount will not become zero */     

     if((Clock_Time() - check_Time) >=  wait_Time)
 800dad4:	f7fa f9c6 	bl	8007e64 <HAL_GetTick>
 800dad8:	4602      	mov	r2, r0
 800dada:	4b09      	ldr	r3, [pc, #36]	; (800db00 <Wait_RandomTime+0x7c>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	1ad2      	subs	r2, r2, r3
 800dae0:	4b09      	ldr	r3, [pc, #36]	; (800db08 <Wait_RandomTime+0x84>)
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d304      	bcc.n	800daf2 <Wait_RandomTime+0x6e>
     {
        Clockflag = 0;
 800dae8:	4b04      	ldr	r3, [pc, #16]	; (800dafc <Wait_RandomTime+0x78>)
 800daea:	2200      	movs	r2, #0
 800daec:	701a      	strb	r2, [r3, #0]
        return MOBLE_TRUE;
 800daee:	2301      	movs	r3, #1
 800daf0:	e000      	b.n	800daf4 <Wait_RandomTime+0x70>

       }
   return MOBLE_FALSE;
 800daf2:	2300      	movs	r3, #0
}
 800daf4:	4618      	mov	r0, r3
 800daf6:	3708      	adds	r7, #8
 800daf8:	46bd      	mov	sp, r7
 800dafa:	bd80      	pop	{r7, pc}
 800dafc:	20004568 	.word	0x20004568
 800db00:	2000456c 	.word	0x2000456c
 800db04:	1b4e81b5 	.word	0x1b4e81b5
 800db08:	20004570 	.word	0x20004570

0800db0c <Generic_OnOff_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Set(MOBLEUINT8 const *pOnOff_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam)  
{
 800db0c:	b5b0      	push	{r4, r5, r7, lr}
 800db0e:	b088      	sub	sp, #32
 800db10:	af02      	add	r7, sp, #8
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
  TID :  1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 millisecond steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_OnOff_Set callback received \r\n");  
 800db18:	2100      	movs	r1, #0
 800db1a:	486c      	ldr	r0, [pc, #432]	; (800dccc <Generic_OnOff_Set+0x1c0>)
 800db1c:	f7ff fd28 	bl	800d570 <TraceHeader>
 800db20:	486b      	ldr	r0, [pc, #428]	; (800dcd0 <Generic_OnOff_Set+0x1c4>)
 800db22:	f01b fd8f 	bl	8029644 <puts>
  
  Generic_OnOffParam_t Generic_OnOffParam; 
  Generic_OnOffParam.TargetOnOffState = pOnOff_param[0];
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	753b      	strb	r3, [r7, #20]
  Generic_OnOffParam.Generic_TID = pOnOff_param[1];
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	3301      	adds	r3, #1
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	757b      	strb	r3, [r7, #21]
  Generic_OnOffParam.Transition_Time = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	75bb      	strb	r3, [r7, #22]
  Generic_OnOffParam.Delay_Time = 0;
 800db38:	2300      	movs	r3, #0
 800db3a:	75fb      	strb	r3, [r7, #23]
  Checking for optional parameters
  length > 2 , 4 values  received(OnOff status, TID, Trasmisition time(optional),
  Delay(optional)),length < 2 OnOff status and TID   
  */
  
  if((length > 2) && (pOnOff_param[2] !=0))
 800db3c:	68bb      	ldr	r3, [r7, #8]
 800db3e:	2b02      	cmp	r3, #2
 800db40:	d96f      	bls.n	800dc22 <Generic_OnOff_Set+0x116>
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	3302      	adds	r3, #2
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d06a      	beq.n	800dc22 <Generic_OnOff_Set+0x116>
  {
    /* Transition_Time & Delay_Time Present */
    Generic_OnOffParam.Transition_Time = pOnOff_param[2];
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	3302      	adds	r3, #2
 800db50:	781b      	ldrb	r3, [r3, #0]
 800db52:	75bb      	strb	r3, [r7, #22]
    Generic_OnOffParam.Delay_Time = pOnOff_param[3];
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	3303      	adds	r3, #3
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	75fb      	strb	r3, [r7, #23]
      
    /* 3.1.1.1 Binary state transitions: Because binary states cannot support transitions, 
       when changing to 0x01 (On), the Generic OnOff state shall change immediately 
       when the transition starts, and when changing to 0x00, the state shall
       change when the transition finishes.*/
    if(pOnOff_param[0] == 1)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	2b01      	cmp	r3, #1
 800db62:	d10c      	bne.n	800db7e <Generic_OnOff_Set+0x72>
    {
      Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = pOnOff_param[0];
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	4619      	mov	r1, r3
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	7818      	ldrb	r0, [r3, #0]
 800db6e:	4a59      	ldr	r2, [pc, #356]	; (800dcd4 <Generic_OnOff_Set+0x1c8>)
 800db70:	460b      	mov	r3, r1
 800db72:	005b      	lsls	r3, r3, #1
 800db74:	440b      	add	r3, r1
 800db76:	005b      	lsls	r3, r3, #1
 800db78:	4413      	add	r3, r2
 800db7a:	4602      	mov	r2, r0
 800db7c:	701a      	strb	r2, [r3, #0]
    }
    Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff = Generic_OnOffParam.TargetOnOffState;
 800db7e:	7d3a      	ldrb	r2, [r7, #20]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	4619      	mov	r1, r3
 800db86:	b290      	uxth	r0, r2
 800db88:	4a52      	ldr	r2, [pc, #328]	; (800dcd4 <Generic_OnOff_Set+0x1c8>)
 800db8a:	460b      	mov	r3, r1
 800db8c:	005b      	lsls	r3, r3, #1
 800db8e:	440b      	add	r3, r1
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	4413      	add	r3, r2
 800db94:	4602      	mov	r2, r0
 800db96:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffParam.Transition_Time;   
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	4619      	mov	r1, r3
 800dba0:	7db8      	ldrb	r0, [r7, #22]
 800dba2:	4a4c      	ldr	r2, [pc, #304]	; (800dcd4 <Generic_OnOff_Set+0x1c8>)
 800dba4:	460b      	mov	r3, r1
 800dba6:	005b      	lsls	r3, r3, #1
 800dba8:	440b      	add	r3, r1
 800dbaa:	005b      	lsls	r3, r3, #1
 800dbac:	4413      	add	r3, r2
 800dbae:	3305      	adds	r3, #5
 800dbb0:	4602      	mov	r2, r0
 800dbb2:	701a      	strb	r2, [r3, #0]
    
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	4618      	mov	r0, r3
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	781b      	ldrb	r3, [r3, #0]
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	4a44      	ldr	r2, [pc, #272]	; (800dcd4 <Generic_OnOff_Set+0x1c8>)
 800dbc2:	4603      	mov	r3, r0
 800dbc4:	005b      	lsls	r3, r3, #1
 800dbc6:	4403      	add	r3, r0
 800dbc8:	005b      	lsls	r3, r3, #1
 800dbca:	4413      	add	r3, r2
 800dbcc:	3305      	adds	r3, #5
 800dbce:	7818      	ldrb	r0, [r3, #0]
 800dbd0:	4a41      	ldr	r2, [pc, #260]	; (800dcd8 <Generic_OnOff_Set+0x1cc>)
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	440b      	add	r3, r1
 800dbd8:	4413      	add	r3, r2
 800dbda:	4602      	mov	r2, r0
 800dbdc:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(pOnOff_param[2], pmsgParam->elementIndex);   
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	3302      	adds	r3, #2
 800dbe2:	781a      	ldrb	r2, [r3, #0]
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	781b      	ldrb	r3, [r3, #0]
 800dbe8:	4619      	mov	r1, r3
 800dbea:	4610      	mov	r0, r2
 800dbec:	f001 f9da 	bl	800efa4 <Generic_GetStepValue>
    /*option parameter flag, enable to send optional parameters in status.*/         
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	781b      	ldrb	r3, [r3, #0]
 800dbf4:	4619      	mov	r1, r3
 800dbf6:	4a39      	ldr	r2, [pc, #228]	; (800dcdc <Generic_OnOff_Set+0x1d0>)
 800dbf8:	460b      	mov	r3, r1
 800dbfa:	005b      	lsls	r3, r3, #1
 800dbfc:	440b      	add	r3, r1
 800dbfe:	4413      	add	r3, r2
 800dc00:	3301      	adds	r3, #1
 800dc02:	2201      	movs	r2, #1
 800dc04:	701a      	strb	r2, [r3, #0]
    /*Flag to enable the on Off transition state machine */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_ON_OFF_TRANSITION_START;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	781b      	ldrb	r3, [r3, #0]
 800dc0a:	4619      	mov	r1, r3
 800dc0c:	4a33      	ldr	r2, [pc, #204]	; (800dcdc <Generic_OnOff_Set+0x1d0>)
 800dc0e:	460b      	mov	r3, r1
 800dc10:	005b      	lsls	r3, r3, #1
 800dc12:	440b      	add	r3, r1
 800dc14:	4413      	add	r3, r2
 800dc16:	2201      	movs	r2, #1
 800dc18:	701a      	strb	r2, [r3, #0]
    /* flag is used for the application to get the information about the transition 
       time parameter is included or not in the received message.
    */
    OptionalParam = IN_TRANSITION;
 800dc1a:	4b31      	ldr	r3, [pc, #196]	; (800dce0 <Generic_OnOff_Set+0x1d4>)
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	701a      	strb	r2, [r3, #0]
 800dc20:	e013      	b.n	800dc4a <Generic_OnOff_Set+0x13e>
/* EME END: management of Present_OnOff_Value and Target_OnOff on immediate transition */
#else
    /* When no optional parameter received, target value will be set as present
       value in application.
    */  
    OptionalParam = NO_TRANSITION;
 800dc22:	4b2f      	ldr	r3, [pc, #188]	; (800dce0 <Generic_OnOff_Set+0x1d4>)
 800dc24:	2201      	movs	r2, #1
 800dc26:	701a      	strb	r2, [r3, #0]
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	781b      	ldrb	r3, [r3, #0]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f001 fcd1 	bl	800f5d4 <Generic_TransitionParameterReset>
#endif       
    
    Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State = Generic_OnOffParam.TargetOnOffState;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	781b      	ldrb	r3, [r3, #0]
 800dc36:	4619      	mov	r1, r3
 800dc38:	7d38      	ldrb	r0, [r7, #20]
 800dc3a:	4a26      	ldr	r2, [pc, #152]	; (800dcd4 <Generic_OnOff_Set+0x1c8>)
 800dc3c:	460b      	mov	r3, r1
 800dc3e:	005b      	lsls	r3, r3, #1
 800dc40:	440b      	add	r3, r1
 800dc42:	005b      	lsls	r3, r3, #1
 800dc44:	4413      	add	r3, r2
 800dc46:	4602      	mov	r2, r0
 800dc48:	701a      	strb	r2, [r3, #0]
  }
  
  /* Application Callback */
  (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[pmsgParam->elementIndex], OptionalParam, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800dc4a:	4b26      	ldr	r3, [pc, #152]	; (800dce4 <Generic_OnOff_Set+0x1d8>)
 800dc4c:	681c      	ldr	r4, [r3, #0]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	781b      	ldrb	r3, [r3, #0]
 800dc52:	461a      	mov	r2, r3
 800dc54:	4613      	mov	r3, r2
 800dc56:	005b      	lsls	r3, r3, #1
 800dc58:	4413      	add	r3, r2
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	4a1d      	ldr	r2, [pc, #116]	; (800dcd4 <Generic_OnOff_Set+0x1c8>)
 800dc5e:	1898      	adds	r0, r3, r2
 800dc60:	4b1f      	ldr	r3, [pc, #124]	; (800dce0 <Generic_OnOff_Set+0x1d4>)
 800dc62:	7819      	ldrb	r1, [r3, #0]
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	88da      	ldrh	r2, [r3, #6]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING    

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  /* Binding of data b/w Generic on off and Light lightness Actual model */
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	781b      	ldrb	r3, [r3, #0]
 800dc72:	461a      	mov	r2, r3
 800dc74:	4613      	mov	r3, r2
 800dc76:	005b      	lsls	r3, r3, #1
 800dc78:	4413      	add	r3, r2
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	4a15      	ldr	r2, [pc, #84]	; (800dcd4 <Generic_OnOff_Set+0x1c8>)
 800dc7e:	1898      	adds	r0, r3, r2
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	7819      	ldrb	r1, [r3, #0]
           Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	461c      	mov	r4, r3
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dc8a:	4a14      	ldr	r2, [pc, #80]	; (800dcdc <Generic_OnOff_Set+0x1d0>)
 800dc8c:	4623      	mov	r3, r4
 800dc8e:	005b      	lsls	r3, r3, #1
 800dc90:	4423      	add	r3, r4
 800dc92:	4413      	add	r3, r2
 800dc94:	781a      	ldrb	r2, [r3, #0]
           Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	461d      	mov	r5, r3
  GenericOnOff_LightActualBinding(&Generic_OnOffStatus[pmsgParam->elementIndex],pmsgParam->elementIndex,
 800dc9c:	4c0f      	ldr	r4, [pc, #60]	; (800dcdc <Generic_OnOff_Set+0x1d0>)
 800dc9e:	462b      	mov	r3, r5
 800dca0:	005b      	lsls	r3, r3, #1
 800dca2:	442b      	add	r3, r5
 800dca4:	4423      	add	r3, r4
 800dca6:	3302      	adds	r3, #2
 800dca8:	781b      	ldrb	r3, [r3, #0]
 800dcaa:	f003 fbc3 	bl	8011434 <GenericOnOff_LightActualBinding>
#endif

  /* For corresponding element which supports Light LC Server */
  Binding_GenericOnOff_LightLcLightOnOff(pmsgParam->elementIndex,
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	7818      	ldrb	r0, [r3, #0]
 800dcb2:	7d39      	ldrb	r1, [r7, #20]
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	9300      	str	r3, [sp, #0]
 800dcb8:	2300      	movs	r3, #0
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f7ff feaa 	bl	800da14 <Binding_GenericOnOff_LightLcLightOnOff>
                                         Generic_OnOffParam.TargetOnOffState,
                                          0, 0, 0);
  
#endif
  
  return MOBLE_RESULT_SUCCESS;
 800dcc0:	2300      	movs	r3, #0
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3718      	adds	r7, #24
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bdb0      	pop	{r4, r5, r7, pc}
 800dcca:	bf00      	nop
 800dccc:	08032f14 	.word	0x08032f14
 800dcd0:	0802ee4c 	.word	0x0802ee4c
 800dcd4:	20004594 	.word	0x20004594
 800dcd8:	20004574 	.word	0x20004574
 800dcdc:	2000459c 	.word	0x2000459c
 800dce0:	200045a0 	.word	0x200045a0
 800dce4:	08032bf8 	.word	0x08032bf8

0800dce8 <Generic_OnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_OnOff_Status(MOBLEUINT8* pOnOff_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800dce8:	b580      	push	{r7, lr}
 800dcea:	b084      	sub	sp, #16
 800dcec:	af00      	add	r7, sp, #0
 800dcee:	60f8      	str	r0, [r7, #12]
 800dcf0:	60b9      	str	r1, [r7, #8]
 800dcf2:	607a      	str	r2, [r7, #4]
  Present OnOff The present value of the Generic OnOff state. 
  Target OnOff The target value of the Generic OnOff state (optional).
  Remaining Time is transition time. 
  */
  
  TRACE_M(TF_GENERIC_M, ">>>\r\n");
 800dcf4:	2100      	movs	r1, #0
 800dcf6:	483f      	ldr	r0, [pc, #252]	; (800ddf4 <Generic_OnOff_Status+0x10c>)
 800dcf8:	f7ff fc3a 	bl	800d570 <TraceHeader>
 800dcfc:	483e      	ldr	r0, [pc, #248]	; (800ddf8 <Generic_OnOff_Status+0x110>)
 800dcfe:	f01b fca1 	bl	8029644 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8201! \n\r");
 800dd02:	2100      	movs	r1, #0
 800dd04:	483b      	ldr	r0, [pc, #236]	; (800ddf4 <Generic_OnOff_Status+0x10c>)
 800dd06:	f7ff fc33 	bl	800d570 <TraceHeader>
 800dd0a:	483c      	ldr	r0, [pc, #240]	; (800ddfc <Generic_OnOff_Status+0x114>)
 800dd0c:	f01b fc34 	bl	8029578 <iprintf>
  /* 
  Default value of GenericOptionalParam=0, 
  GenericOptionalParam set equal to 1 in Generic_OnOff_Set for Generic_OnOff_Status 
  */
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam == 1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	781b      	ldrb	r3, [r3, #0]
 800dd14:	4619      	mov	r1, r3
 800dd16:	4a3a      	ldr	r2, [pc, #232]	; (800de00 <Generic_OnOff_Status+0x118>)
 800dd18:	460b      	mov	r3, r1
 800dd1a:	005b      	lsls	r3, r3, #1
 800dd1c:	440b      	add	r3, r1
 800dd1e:	4413      	add	r3, r2
 800dd20:	3301      	adds	r3, #1
 800dd22:	781b      	ldrb	r3, [r3, #0]
 800dd24:	2b01      	cmp	r3, #1
 800dd26:	d00c      	beq.n	800dd42 <Generic_OnOff_Status+0x5a>
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	781b      	ldrb	r3, [r3, #0]
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	4a35      	ldr	r2, [pc, #212]	; (800de04 <Generic_OnOff_Status+0x11c>)
 800dd30:	460b      	mov	r3, r1
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	440b      	add	r3, r1
 800dd36:	005b      	lsls	r3, r3, #1
 800dd38:	4413      	add	r3, r2
 800dd3a:	f993 3000 	ldrsb.w	r3, [r3]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d033      	beq.n	800ddaa <Generic_OnOff_Status+0xc2>
  {   
    /*  
    When optional parameter received present value,targert value, remaining time be sent in status message
    length of received data is equal to 4B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent with Transition \r\n"); 
 800dd42:	2100      	movs	r1, #0
 800dd44:	482b      	ldr	r0, [pc, #172]	; (800ddf4 <Generic_OnOff_Status+0x10c>)
 800dd46:	f7ff fc13 	bl	800d570 <TraceHeader>
 800dd4a:	482f      	ldr	r0, [pc, #188]	; (800de08 <Generic_OnOff_Status+0x120>)
 800dd4c:	f01b fc7a 	bl	8029644 <puts>

    *(pOnOff_status+1) = Generic_OnOffStatus[pmsgParam->elementIndex].Target_OnOff;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	4619      	mov	r1, r3
 800dd56:	4a2d      	ldr	r2, [pc, #180]	; (800de0c <Generic_OnOff_Status+0x124>)
 800dd58:	460b      	mov	r3, r1
 800dd5a:	005b      	lsls	r3, r3, #1
 800dd5c:	440b      	add	r3, r1
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	4413      	add	r3, r2
 800dd62:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800dd66:	b29a      	uxth	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	3301      	adds	r3, #1
 800dd6c:	b2d2      	uxtb	r2, r2
 800dd6e:	701a      	strb	r2, [r3, #0]
    *(pOnOff_status+2) = Generic_OnOffStatus[pmsgParam->elementIndex].RemainingTime;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	4618      	mov	r0, r3
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	1c9a      	adds	r2, r3, #2
 800dd7a:	4924      	ldr	r1, [pc, #144]	; (800de0c <Generic_OnOff_Status+0x124>)
 800dd7c:	4603      	mov	r3, r0
 800dd7e:	005b      	lsls	r3, r3, #1
 800dd80:	4403      	add	r3, r0
 800dd82:	005b      	lsls	r3, r3, #1
 800dd84:	440b      	add	r3, r1
 800dd86:	3305      	adds	r3, #5
 800dd88:	781b      	ldrb	r3, [r3, #0]
 800dd8a:	7013      	strb	r3, [r2, #0]
       *plength = 3; 
 800dd8c:	68bb      	ldr	r3, [r7, #8]
 800dd8e:	2203      	movs	r2, #3
 800dd90:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	4619      	mov	r1, r3
 800dd98:	4a19      	ldr	r2, [pc, #100]	; (800de00 <Generic_OnOff_Status+0x118>)
 800dd9a:	460b      	mov	r3, r1
 800dd9c:	005b      	lsls	r3, r3, #1
 800dd9e:	440b      	add	r3, r1
 800dda0:	4413      	add	r3, r2
 800dda2:	3301      	adds	r3, #1
 800dda4:	2200      	movs	r2, #0
 800dda6:	701a      	strb	r2, [r3, #0]
 800dda8:	e013      	b.n	800ddd2 <Generic_OnOff_Status+0xea>
  else
  { /* When no optional parameter received, target value will
       be sent in status message.
       length of received data is equal to 2B
    */
    TRACE_M(TF_GENERIC_M, "Generic_OnOff_Status sent without Transition \r\n"); 
 800ddaa:	2100      	movs	r1, #0
 800ddac:	4811      	ldr	r0, [pc, #68]	; (800ddf4 <Generic_OnOff_Status+0x10c>)
 800ddae:	f7ff fbdf 	bl	800d570 <TraceHeader>
 800ddb2:	4817      	ldr	r0, [pc, #92]	; (800de10 <Generic_OnOff_Status+0x128>)
 800ddb4:	f01b fc46 	bl	8029644 <puts>
    TRACE_M(TF_GENERIC_M, "%d \r\n",*pOnOff_status);
 800ddb8:	2100      	movs	r1, #0
 800ddba:	480e      	ldr	r0, [pc, #56]	; (800ddf4 <Generic_OnOff_Status+0x10c>)
 800ddbc:	f7ff fbd8 	bl	800d570 <TraceHeader>
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	781b      	ldrb	r3, [r3, #0]
 800ddc4:	4619      	mov	r1, r3
 800ddc6:	4813      	ldr	r0, [pc, #76]	; (800de14 <Generic_OnOff_Status+0x12c>)
 800ddc8:	f01b fbd6 	bl	8029578 <iprintf>
    *plength = 1;
 800ddcc:	68bb      	ldr	r3, [r7, #8]
 800ddce:	2201      	movs	r2, #1
 800ddd0:	601a      	str	r2, [r3, #0]
  }
  *pOnOff_status = Generic_OnOffStatus[pmsgParam->elementIndex].Present_OnOff_State; 
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	781b      	ldrb	r3, [r3, #0]
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	4a0c      	ldr	r2, [pc, #48]	; (800de0c <Generic_OnOff_Status+0x124>)
 800ddda:	460b      	mov	r3, r1
 800dddc:	005b      	lsls	r3, r3, #1
 800ddde:	440b      	add	r3, r1
 800dde0:	005b      	lsls	r3, r3, #1
 800dde2:	4413      	add	r3, r2
 800dde4:	781a      	ldrb	r2, [r3, #0]
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3710      	adds	r7, #16
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	bd80      	pop	{r7, pc}
 800ddf4:	08032f28 	.word	0x08032f28
 800ddf8:	0802ee74 	.word	0x0802ee74
 800ddfc:	0802ee7c 	.word	0x0802ee7c
 800de00:	2000459c 	.word	0x2000459c
 800de04:	2000457c 	.word	0x2000457c
 800de08:	0802ee88 	.word	0x0802ee88
 800de0c:	20004594 	.word	0x20004594
 800de10:	0802eeb4 	.word	0x0802eeb4
 800de14:	0802eee4 	.word	0x0802eee4

0800de18 <Generic_Level_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Set(const MOBLEUINT8* plevel_param, 
                               MOBLEUINT32 length,
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800de18:	b5b0      	push	{r4, r5, r7, lr}
 800de1a:	b088      	sub	sp, #32
 800de1c:	af02      	add	r7, sp, #8
 800de1e:	60f8      	str	r0, [r7, #12]
 800de20:	60b9      	str	r1, [r7, #8]
 800de22:	607a      	str	r2, [r7, #4]
  TID :  1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay:1B Message execution delay in 5 milliseconds steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Level_Set callback received \r\n");
 800de24:	2100      	movs	r1, #0
 800de26:	4878      	ldr	r0, [pc, #480]	; (800e008 <Generic_Level_Set+0x1f0>)
 800de28:	f7ff fba2 	bl	800d570 <TraceHeader>
 800de2c:	4877      	ldr	r0, [pc, #476]	; (800e00c <Generic_Level_Set+0x1f4>)
 800de2e:	f01b fc09 	bl	8029644 <puts>
  
  Generic_LevelParam_t Generic_LevelParam;
  MOBLEINT16 setValue;
  
  Generic_LevelParam.TargetLevel = CopyU8LittleEndienArrayToU16word((MOBLEUINT8*)plevel_param);
 800de32:	68f8      	ldr	r0, [r7, #12]
 800de34:	f7ff fdb9 	bl	800d9aa <CopyU8LittleEndienArrayToU16word>
 800de38:	4603      	mov	r3, r0
 800de3a:	b21b      	sxth	r3, r3
 800de3c:	823b      	strh	r3, [r7, #16]
  Generic_LevelParam.Generic_TID = plevel_param[2]; 
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	3302      	adds	r3, #2
 800de42:	781b      	ldrb	r3, [r3, #0]
 800de44:	74bb      	strb	r3, [r7, #18]
  
  setValue =  Generic_LevelParam.TargetLevel;
 800de46:	8a3b      	ldrh	r3, [r7, #16]
 800de48:	82fb      	strh	r3, [r7, #22]
  /* Check for Optional Parameters. 
     length > 3  plevel_param has level,TID,Transition Time, Delay      
     length < 3  plevel_param has level,TID
  */ 
  if((length > 3) && (plevel_param[3] !=0))
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	2b03      	cmp	r3, #3
 800de4e:	d970      	bls.n	800df32 <Generic_Level_Set+0x11a>
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	3303      	adds	r3, #3
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d06b      	beq.n	800df32 <Generic_Level_Set+0x11a>
  {
     Generic_LevelParam.Transition_Time = plevel_param[3];
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3303      	adds	r3, #3
 800de5e:	781b      	ldrb	r3, [r3, #0]
 800de60:	74fb      	strb	r3, [r7, #19]
     Generic_LevelParam.Delay_Time = plevel_param[4];
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	3304      	adds	r3, #4
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	753b      	strb	r3, [r7, #20]
     /* Copy the data into status message which needs to be update in 
       application message.
     */
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = setValue;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	4619      	mov	r1, r3
 800de70:	4a67      	ldr	r2, [pc, #412]	; (800e010 <Generic_Level_Set+0x1f8>)
 800de72:	460b      	mov	r3, r1
 800de74:	005b      	lsls	r3, r3, #1
 800de76:	440b      	add	r3, r1
 800de78:	009b      	lsls	r3, r3, #2
 800de7a:	4413      	add	r3, r2
 800de7c:	3302      	adds	r3, #2
 800de7e:	8afa      	ldrh	r2, [r7, #22]
 800de80:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelParam.Transition_Time;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	4619      	mov	r1, r3
 800de88:	7cf8      	ldrb	r0, [r7, #19]
 800de8a:	4a61      	ldr	r2, [pc, #388]	; (800e010 <Generic_Level_Set+0x1f8>)
 800de8c:	460b      	mov	r3, r1
 800de8e:	005b      	lsls	r3, r3, #1
 800de90:	440b      	add	r3, r1
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	4413      	add	r3, r2
 800de96:	3304      	adds	r3, #4
 800de98:	4602      	mov	r2, r0
 800de9a:	701a      	strb	r2, [r3, #0]
    /* copy status parameters in Temporary parameters for transition 
       process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	4618      	mov	r0, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	781b      	ldrb	r3, [r3, #0]
 800dea6:	4619      	mov	r1, r3
 800dea8:	4a59      	ldr	r2, [pc, #356]	; (800e010 <Generic_Level_Set+0x1f8>)
 800deaa:	4603      	mov	r3, r0
 800deac:	005b      	lsls	r3, r3, #1
 800deae:	4403      	add	r3, r0
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4413      	add	r3, r2
 800deb4:	3302      	adds	r3, #2
 800deb6:	f9b3 0000 	ldrsh.w	r0, [r3]
 800deba:	4a56      	ldr	r2, [pc, #344]	; (800e014 <Generic_Level_Set+0x1fc>)
 800debc:	460b      	mov	r3, r1
 800debe:	009b      	lsls	r3, r3, #2
 800dec0:	440b      	add	r3, r1
 800dec2:	4413      	add	r3, r2
 800dec4:	4602      	mov	r2, r0
 800dec6:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	4618      	mov	r0, r3
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	4619      	mov	r1, r3
 800ded6:	4a4e      	ldr	r2, [pc, #312]	; (800e010 <Generic_Level_Set+0x1f8>)
 800ded8:	4603      	mov	r3, r0
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	4403      	add	r3, r0
 800dede:	009b      	lsls	r3, r3, #2
 800dee0:	4413      	add	r3, r2
 800dee2:	3304      	adds	r3, #4
 800dee4:	7818      	ldrb	r0, [r3, #0]
 800dee6:	4a4b      	ldr	r2, [pc, #300]	; (800e014 <Generic_Level_Set+0x1fc>)
 800dee8:	460b      	mov	r3, r1
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	440b      	add	r3, r1
 800deee:	4413      	add	r3, r2
 800def0:	4602      	mov	r2, r0
 800def2:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
      step size for transition state machine
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex); 
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	3303      	adds	r3, #3
 800def8:	781a      	ldrb	r2, [r3, #0]
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	781b      	ldrb	r3, [r3, #0]
 800defe:	4619      	mov	r1, r3
 800df00:	4610      	mov	r0, r2
 800df02:	f001 f84f 	bl	800efa4 <Generic_GetStepValue>
    /*option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	4619      	mov	r1, r3
 800df0c:	4a42      	ldr	r2, [pc, #264]	; (800e018 <Generic_Level_Set+0x200>)
 800df0e:	460b      	mov	r3, r1
 800df10:	005b      	lsls	r3, r3, #1
 800df12:	440b      	add	r3, r1
 800df14:	4413      	add	r3, r2
 800df16:	3301      	adds	r3, #1
 800df18:	2201      	movs	r2, #1
 800df1a:	701a      	strb	r2, [r3, #0]
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	781b      	ldrb	r3, [r3, #0]
 800df20:	4619      	mov	r1, r3
 800df22:	4a3d      	ldr	r2, [pc, #244]	; (800e018 <Generic_Level_Set+0x200>)
 800df24:	460b      	mov	r3, r1
 800df26:	005b      	lsls	r3, r3, #1
 800df28:	440b      	add	r3, r1
 800df2a:	4413      	add	r3, r2
 800df2c:	2202      	movs	r2, #2
 800df2e:	701a      	strb	r2, [r3, #0]
 800df30:	e01a      	b.n	800df68 <Generic_Level_Set+0x150>

#else
     /* When no optional parameter received, target value will
         be set as present value in application.
     */
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	781b      	ldrb	r3, [r3, #0]
 800df36:	4618      	mov	r0, r3
 800df38:	f001 fb4c 	bl	800f5d4 <Generic_TransitionParameterReset>
    Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16= setValue;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	781b      	ldrb	r3, [r3, #0]
 800df40:	4619      	mov	r1, r3
 800df42:	4a33      	ldr	r2, [pc, #204]	; (800e010 <Generic_Level_Set+0x1f8>)
 800df44:	460b      	mov	r3, r1
 800df46:	005b      	lsls	r3, r3, #1
 800df48:	440b      	add	r3, r1
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	4413      	add	r3, r2
 800df4e:	8afa      	ldrh	r2, [r7, #22]
 800df50:	801a      	strh	r2, [r3, #0]
    Generic_TimeParam[pmsgParam->elementIndex].StepValue = 0;
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	781b      	ldrb	r3, [r3, #0]
 800df56:	4619      	mov	r1, r3
 800df58:	4a30      	ldr	r2, [pc, #192]	; (800e01c <Generic_Level_Set+0x204>)
 800df5a:	460b      	mov	r3, r1
 800df5c:	009b      	lsls	r3, r3, #2
 800df5e:	440b      	add	r3, r1
 800df60:	005b      	lsls	r3, r3, #1
 800df62:	4413      	add	r3, r2
 800df64:	2200      	movs	r2, #0
 800df66:	701a      	strb	r2, [r3, #0]
#endif    
  }  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	781b      	ldrb	r3, [r3, #0]
 800df6c:	4618      	mov	r0, r3
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	4619      	mov	r1, r3
 800df74:	4a26      	ldr	r2, [pc, #152]	; (800e010 <Generic_Level_Set+0x1f8>)
 800df76:	4603      	mov	r3, r0
 800df78:	005b      	lsls	r3, r3, #1
 800df7a:	4403      	add	r3, r0
 800df7c:	009b      	lsls	r3, r3, #2
 800df7e:	4413      	add	r3, r2
 800df80:	f9b3 0000 	ldrsh.w	r0, [r3]
 800df84:	4a22      	ldr	r2, [pc, #136]	; (800e010 <Generic_Level_Set+0x1f8>)
 800df86:	460b      	mov	r3, r1
 800df88:	005b      	lsls	r3, r3, #1
 800df8a:	440b      	add	r3, r1
 800df8c:	009b      	lsls	r3, r3, #2
 800df8e:	4413      	add	r3, r2
 800df90:	3306      	adds	r3, #6
 800df92:	4602      	mov	r2, r0
 800df94:	801a      	strh	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800df96:	4b22      	ldr	r3, [pc, #136]	; (800e020 <Generic_Level_Set+0x208>)
 800df98:	689c      	ldr	r4, [r3, #8]
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	005b      	lsls	r3, r3, #1
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	4a19      	ldr	r2, [pc, #100]	; (800e010 <Generic_Level_Set+0x1f8>)
 800dfaa:	1898      	adds	r0, r3, r2
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	88da      	ldrh	r2, [r3, #6]
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	781b      	ldrb	r3, [r3, #0]
 800dfb4:	2100      	movs	r1, #0
 800dfb6:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING       
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	781b      	ldrb	r3, [r3, #0]
 800dfbc:	461a      	mov	r2, r3
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	005b      	lsls	r3, r3, #1
 800dfc2:	4413      	add	r3, r2
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4a12      	ldr	r2, [pc, #72]	; (800e010 <Generic_Level_Set+0x1f8>)
 800dfc8:	1898      	adds	r0, r3, r2
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	781a      	ldrb	r2, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	781b      	ldrb	r3, [r3, #0]
 800dfd2:	461c      	mov	r4, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800dfd4:	4910      	ldr	r1, [pc, #64]	; (800e018 <Generic_Level_Set+0x200>)
 800dfd6:	4623      	mov	r3, r4
 800dfd8:	005b      	lsls	r3, r3, #1
 800dfda:	4423      	add	r3, r4
 800dfdc:	440b      	add	r3, r1
 800dfde:	7819      	ldrb	r1, [r3, #0]
        Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	461d      	mov	r5, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET, pmsgParam->elementIndex,
 800dfe6:	4c0c      	ldr	r4, [pc, #48]	; (800e018 <Generic_Level_Set+0x200>)
 800dfe8:	462b      	mov	r3, r5
 800dfea:	005b      	lsls	r3, r3, #1
 800dfec:	442b      	add	r3, r5
 800dfee:	4423      	add	r3, r4
 800dff0:	3302      	adds	r3, #2
 800dff2:	781b      	ldrb	r3, [r3, #0]
 800dff4:	9300      	str	r3, [sp, #0]
 800dff6:	460b      	mov	r3, r1
 800dff8:	2101      	movs	r1, #1
 800dffa:	f003 fae5 	bl	80115c8 <GenericLevel_LightBinding>
#endif 
        
  return MOBLE_RESULT_SUCCESS;
 800dffe:	2300      	movs	r3, #0
}
 800e000:	4618      	mov	r0, r3
 800e002:	3718      	adds	r7, #24
 800e004:	46bd      	mov	sp, r7
 800e006:	bdb0      	pop	{r4, r5, r7, pc}
 800e008:	08032f40 	.word	0x08032f40
 800e00c:	0802eeec 	.word	0x0802eeec
 800e010:	20004588 	.word	0x20004588
 800e014:	20004574 	.word	0x20004574
 800e018:	2000459c 	.word	0x2000459c
 800e01c:	2000457c 	.word	0x2000457c
 800e020:	08032bf8 	.word	0x08032bf8

0800e024 <Generic_Delta_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Delta_Set(const MOBLEUINT8* plevel_param, MOBLEUINT32 length,\
                               MODEL_MessageHeader_t *pmsgParam) 
{
 800e024:	b5b0      	push	{r4, r5, r7, lr}
 800e026:	b08a      	sub	sp, #40	; 0x28
 800e028:	af02      	add	r7, sp, #8
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  TID:   1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 milliseconds steps (C.1)
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Delta_Set callback received \r\n");
 800e030:	2100      	movs	r1, #0
 800e032:	4896      	ldr	r0, [pc, #600]	; (800e28c <Generic_Delta_Set+0x268>)
 800e034:	f7ff fa9c 	bl	800d570 <TraceHeader>
 800e038:	4895      	ldr	r0, [pc, #596]	; (800e290 <Generic_Delta_Set+0x26c>)
 800e03a:	f01b fb03 	bl	8029644 <puts>
  
  Generic_DeltaLevelParam_t Generic_DeltaLevelParam ;
  MOBLEUINT32 delta;
  
  /* Copy the 4Bytes data to local variable */
  delta = (plevel_param[3] << 24);
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	3303      	adds	r3, #3
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	061b      	lsls	r3, r3, #24
 800e046:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[2] << 16);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	3302      	adds	r3, #2
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	041b      	lsls	r3, r3, #16
 800e050:	461a      	mov	r2, r3
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	4313      	orrs	r3, r2
 800e056:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[1] << 8);
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	3301      	adds	r3, #1
 800e05c:	781b      	ldrb	r3, [r3, #0]
 800e05e:	021b      	lsls	r3, r3, #8
 800e060:	461a      	mov	r2, r3
 800e062:	69fb      	ldr	r3, [r7, #28]
 800e064:	4313      	orrs	r3, r2
 800e066:	61fb      	str	r3, [r7, #28]
  delta |= (plevel_param[0]);
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	461a      	mov	r2, r3
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	4313      	orrs	r3, r2
 800e072:	61fb      	str	r3, [r7, #28]
  Generic_DeltaLevelParam.TargetDeltaLevel32 = delta;
 800e074:	69fb      	ldr	r3, [r7, #28]
 800e076:	617b      	str	r3, [r7, #20]
  
  TRACE_M(TF_GENERIC_M,"Generic delta value %.2lx \r\n",
 800e078:	2100      	movs	r1, #0
 800e07a:	4884      	ldr	r0, [pc, #528]	; (800e28c <Generic_Delta_Set+0x268>)
 800e07c:	f7ff fa78 	bl	800d570 <TraceHeader>
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	4619      	mov	r1, r3
 800e084:	4883      	ldr	r0, [pc, #524]	; (800e294 <Generic_Delta_Set+0x270>)
 800e086:	f01b fa77 	bl	8029578 <iprintf>
          Generic_DeltaLevelParam.TargetDeltaLevel32);
  
  Generic_DeltaLevelParam.Generic_TID = plevel_param[4];
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	3304      	adds	r3, #4
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	763b      	strb	r3, [r7, #24]
  /* 
     Check for Optional Parameters 
     length > 5  Delata level,TID, Trasition Time(optional),Delay(optional)
     length < 5  Delta level,TID
  */    
  if((length > 5) && (plevel_param[5] !=0))
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2b05      	cmp	r3, #5
 800e096:	f240 8082 	bls.w	800e19e <Generic_Delta_Set+0x17a>
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	3305      	adds	r3, #5
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d07c      	beq.n	800e19e <Generic_Delta_Set+0x17a>
  {
    Generic_DeltaLevelParam.Transition_Time = plevel_param[5];
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	3305      	adds	r3, #5
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	767b      	strb	r3, [r7, #25]
    Generic_DeltaLevelParam.Delay_Time = plevel_param[6];
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	3306      	adds	r3, #6
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	76bb      	strb	r3, [r7, #26]
    /* Copy the data into status message which needs to be update in 
     application message.
    */ 
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	4619      	mov	r1, r3
 800e0ba:	4a77      	ldr	r2, [pc, #476]	; (800e298 <Generic_Delta_Set+0x274>)
 800e0bc:	460b      	mov	r3, r1
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	440b      	add	r3, r1
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e0ca:	b29a      	uxth	r2, r3
                                                Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e0cc:	697b      	ldr	r3, [r7, #20]
    Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 + 
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	4413      	add	r3, r2
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	4619      	mov	r1, r3
 800e0da:	b210      	sxth	r0, r2
 800e0dc:	4a6e      	ldr	r2, [pc, #440]	; (800e298 <Generic_Delta_Set+0x274>)
 800e0de:	460b      	mov	r3, r1
 800e0e0:	005b      	lsls	r3, r3, #1
 800e0e2:	440b      	add	r3, r1
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	4413      	add	r3, r2
 800e0e8:	3302      	adds	r3, #2
 800e0ea:	4602      	mov	r2, r0
 800e0ec:	801a      	strh	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = Generic_DeltaLevelParam.Transition_Time;
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	7e78      	ldrb	r0, [r7, #25]
 800e0f6:	4a68      	ldr	r2, [pc, #416]	; (800e298 <Generic_Delta_Set+0x274>)
 800e0f8:	460b      	mov	r3, r1
 800e0fa:	005b      	lsls	r3, r3, #1
 800e0fc:	440b      	add	r3, r1
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	4413      	add	r3, r2
 800e102:	3304      	adds	r3, #4
 800e104:	4602      	mov	r2, r0
 800e106:	701a      	strb	r2, [r3, #0]
       
    /* copy status parameters in Temporary parameters for transition 
     process.
    */
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	4618      	mov	r0, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	4619      	mov	r1, r3
 800e114:	4a60      	ldr	r2, [pc, #384]	; (800e298 <Generic_Delta_Set+0x274>)
 800e116:	4603      	mov	r3, r0
 800e118:	005b      	lsls	r3, r3, #1
 800e11a:	4403      	add	r3, r0
 800e11c:	009b      	lsls	r3, r3, #2
 800e11e:	4413      	add	r3, r2
 800e120:	3302      	adds	r3, #2
 800e122:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e126:	4a5d      	ldr	r2, [pc, #372]	; (800e29c <Generic_Delta_Set+0x278>)
 800e128:	460b      	mov	r3, r1
 800e12a:	009b      	lsls	r3, r3, #2
 800e12c:	440b      	add	r3, r1
 800e12e:	4413      	add	r3, r2
 800e130:	4602      	mov	r2, r0
 800e132:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	781b      	ldrb	r3, [r3, #0]
 800e13a:	4618      	mov	r0, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	781b      	ldrb	r3, [r3, #0]
 800e140:	4619      	mov	r1, r3
 800e142:	4a55      	ldr	r2, [pc, #340]	; (800e298 <Generic_Delta_Set+0x274>)
 800e144:	4603      	mov	r3, r0
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	4403      	add	r3, r0
 800e14a:	009b      	lsls	r3, r3, #2
 800e14c:	4413      	add	r3, r2
 800e14e:	3304      	adds	r3, #4
 800e150:	7818      	ldrb	r0, [r3, #0]
 800e152:	4a52      	ldr	r2, [pc, #328]	; (800e29c <Generic_Delta_Set+0x278>)
 800e154:	460b      	mov	r3, r1
 800e156:	009b      	lsls	r3, r3, #2
 800e158:	440b      	add	r3, r1
 800e15a:	4413      	add	r3, r2
 800e15c:	4602      	mov	r2, r0
 800e15e:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[5], pmsgParam->elementIndex);   
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	3305      	adds	r3, #5
 800e164:	781a      	ldrb	r2, [r3, #0]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	781b      	ldrb	r3, [r3, #0]
 800e16a:	4619      	mov	r1, r3
 800e16c:	4610      	mov	r0, r2
 800e16e:	f000 ff19 	bl	800efa4 <Generic_GetStepValue>
       
    /*option parameter flag, enable to sent all required parameter in status.*/ 
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	781b      	ldrb	r3, [r3, #0]
 800e176:	4619      	mov	r1, r3
 800e178:	4a49      	ldr	r2, [pc, #292]	; (800e2a0 <Generic_Delta_Set+0x27c>)
 800e17a:	460b      	mov	r3, r1
 800e17c:	005b      	lsls	r3, r3, #1
 800e17e:	440b      	add	r3, r1
 800e180:	4413      	add	r3, r2
 800e182:	3301      	adds	r3, #1
 800e184:	2201      	movs	r2, #1
 800e186:	701a      	strb	r2, [r3, #0]
       
    /*transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	781b      	ldrb	r3, [r3, #0]
 800e18c:	4619      	mov	r1, r3
 800e18e:	4a44      	ldr	r2, [pc, #272]	; (800e2a0 <Generic_Delta_Set+0x27c>)
 800e190:	460b      	mov	r3, r1
 800e192:	005b      	lsls	r3, r3, #1
 800e194:	440b      	add	r3, r1
 800e196:	4413      	add	r3, r2
 800e198:	2202      	movs	r2, #2
 800e19a:	701a      	strb	r2, [r3, #0]
 800e19c:	e0a3      	b.n	800e2e6 <Generic_Delta_Set+0x2c2>
  }
  else
  {   
		
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	781b      	ldrb	r3, [r3, #0]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f001 fa16 	bl	800f5d4 <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_DeltaLevelParam.Generic_TID)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	781b      	ldrb	r3, [r3, #0]
 800e1ac:	4619      	mov	r1, r3
 800e1ae:	4a3a      	ldr	r2, [pc, #232]	; (800e298 <Generic_Delta_Set+0x274>)
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	440b      	add	r3, r1
 800e1b6:	009b      	lsls	r3, r3, #2
 800e1b8:	4413      	add	r3, r2
 800e1ba:	3305      	adds	r3, #5
 800e1bc:	781a      	ldrb	r2, [r3, #0]
 800e1be:	7e3b      	ldrb	r3, [r7, #24]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d16f      	bne.n	800e2a4 <Generic_Delta_Set+0x280>
    {
        if(Generic_DeltaLevelParam.TargetDeltaLevel32 > Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level)
 800e1c4:	697a      	ldr	r2, [r7, #20]
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	4932      	ldr	r1, [pc, #200]	; (800e298 <Generic_Delta_Set+0x274>)
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	005b      	lsls	r3, r3, #1
 800e1d2:	4403      	add	r3, r0
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	440b      	add	r3, r1
 800e1d8:	3308      	adds	r3, #8
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	dd2a      	ble.n	800e236 <Generic_Delta_Set+0x212>
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	781b      	ldrb	r3, [r3, #0]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	4a2c      	ldr	r2, [pc, #176]	; (800e298 <Generic_Delta_Set+0x274>)
 800e1e8:	460b      	mov	r3, r1
 800e1ea:	005b      	lsls	r3, r3, #1
 800e1ec:	440b      	add	r3, r1
 800e1ee:	009b      	lsls	r3, r3, #2
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e1f6:	b29a      	uxth	r2, r3
 800e1f8:	697b      	ldr	r3, [r7, #20]
          - Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level);     
 800e1fa:	b299      	uxth	r1, r3
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	461c      	mov	r4, r3
 800e202:	4825      	ldr	r0, [pc, #148]	; (800e298 <Generic_Delta_Set+0x274>)
 800e204:	4623      	mov	r3, r4
 800e206:	005b      	lsls	r3, r3, #1
 800e208:	4423      	add	r3, r4
 800e20a:	009b      	lsls	r3, r3, #2
 800e20c:	4403      	add	r3, r0
 800e20e:	3308      	adds	r3, #8
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	b29b      	uxth	r3, r3
 800e214:	1acb      	subs	r3, r1, r3
 800e216:	b29b      	uxth	r3, r3
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += (Generic_DeltaLevelParam.TargetDeltaLevel32  
 800e218:	4413      	add	r3, r2
 800e21a:	b29a      	uxth	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	4619      	mov	r1, r3
 800e222:	b210      	sxth	r0, r2
 800e224:	4a1c      	ldr	r2, [pc, #112]	; (800e298 <Generic_Delta_Set+0x274>)
 800e226:	460b      	mov	r3, r1
 800e228:	005b      	lsls	r3, r3, #1
 800e22a:	440b      	add	r3, r1
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	4413      	add	r3, r2
 800e230:	4602      	mov	r2, r0
 800e232:	801a      	strh	r2, [r3, #0]
 800e234:	e052      	b.n	800e2dc <Generic_Delta_Set+0x2b8>
      }
      else
      {
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	4619      	mov	r1, r3
 800e23c:	4a16      	ldr	r2, [pc, #88]	; (800e298 <Generic_Delta_Set+0x274>)
 800e23e:	460b      	mov	r3, r1
 800e240:	005b      	lsls	r3, r3, #1
 800e242:	440b      	add	r3, r1
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4413      	add	r3, r2
 800e248:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e24c:	b29a      	uxth	r2, r3
            -Generic_DeltaLevelParam.TargetDeltaLevel32) ;           
 800e24e:	697b      	ldr	r3, [r7, #20]
          Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 -= (Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level
 800e250:	b299      	uxth	r1, r3
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	461c      	mov	r4, r3
 800e258:	480f      	ldr	r0, [pc, #60]	; (800e298 <Generic_Delta_Set+0x274>)
 800e25a:	4623      	mov	r3, r4
 800e25c:	005b      	lsls	r3, r3, #1
 800e25e:	4423      	add	r3, r4
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4403      	add	r3, r0
 800e264:	3308      	adds	r3, #8
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	b29b      	uxth	r3, r3
 800e26a:	1acb      	subs	r3, r1, r3
 800e26c:	b29b      	uxth	r3, r3
 800e26e:	4413      	add	r3, r2
 800e270:	b29a      	uxth	r2, r3
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	4619      	mov	r1, r3
 800e278:	b210      	sxth	r0, r2
 800e27a:	4a07      	ldr	r2, [pc, #28]	; (800e298 <Generic_Delta_Set+0x274>)
 800e27c:	460b      	mov	r3, r1
 800e27e:	005b      	lsls	r3, r3, #1
 800e280:	440b      	add	r3, r1
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	4602      	mov	r2, r0
 800e288:	801a      	strh	r2, [r3, #0]
 800e28a:	e027      	b.n	800e2dc <Generic_Delta_Set+0x2b8>
 800e28c:	08032f54 	.word	0x08032f54
 800e290:	0802ef14 	.word	0x0802ef14
 800e294:	0802ef3c 	.word	0x0802ef3c
 800e298:	20004588 	.word	0x20004588
 800e29c:	20004574 	.word	0x20004574
 800e2a0:	2000459c 	.word	0x2000459c
      }       
    }
    else
    {    /*If TID value is different from the last TID, then new transaction has been started*/
        Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 += Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	781b      	ldrb	r3, [r3, #0]
 800e2a8:	4619      	mov	r1, r3
 800e2aa:	4a41      	ldr	r2, [pc, #260]	; (800e3b0 <Generic_Delta_Set+0x38c>)
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	005b      	lsls	r3, r3, #1
 800e2b0:	440b      	add	r3, r1
 800e2b2:	009b      	lsls	r3, r3, #2
 800e2b4:	4413      	add	r3, r2
 800e2b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	b29b      	uxth	r3, r3
 800e2c0:	4413      	add	r3, r2
 800e2c2:	b29a      	uxth	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	781b      	ldrb	r3, [r3, #0]
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	b210      	sxth	r0, r2
 800e2cc:	4a38      	ldr	r2, [pc, #224]	; (800e3b0 <Generic_Delta_Set+0x38c>)
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	005b      	lsls	r3, r3, #1
 800e2d2:	440b      	add	r3, r1
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	4602      	mov	r2, r0
 800e2da:	801a      	strh	r2, [r3, #0]
    
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
	Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	781b      	ldrb	r3, [r3, #0]
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f001 f977 	bl	800f5d4 <Generic_TransitionParameterReset>
#endif   
  }
  
  TRACE_M(TF_GENERIC_M, "Generic Level value %.2x \r\n" ,Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16);
 800e2e6:	2100      	movs	r1, #0
 800e2e8:	4832      	ldr	r0, [pc, #200]	; (800e3b4 <Generic_Delta_Set+0x390>)
 800e2ea:	f7ff f941 	bl	800d570 <TraceHeader>
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	781b      	ldrb	r3, [r3, #0]
 800e2f2:	4619      	mov	r1, r3
 800e2f4:	4a2e      	ldr	r2, [pc, #184]	; (800e3b0 <Generic_Delta_Set+0x38c>)
 800e2f6:	460b      	mov	r3, r1
 800e2f8:	005b      	lsls	r3, r3, #1
 800e2fa:	440b      	add	r3, r1
 800e2fc:	009b      	lsls	r3, r3, #2
 800e2fe:	4413      	add	r3, r2
 800e300:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e304:	4619      	mov	r1, r3
 800e306:	482c      	ldr	r0, [pc, #176]	; (800e3b8 <Generic_Delta_Set+0x394>)
 800e308:	f01b f936 	bl	8029578 <iprintf>
  
  Generic_LevelStatus[pmsgParam->elementIndex].Last_delta_level = Generic_DeltaLevelParam.TargetDeltaLevel32;
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	781b      	ldrb	r3, [r3, #0]
 800e310:	4618      	mov	r0, r3
 800e312:	697a      	ldr	r2, [r7, #20]
 800e314:	4926      	ldr	r1, [pc, #152]	; (800e3b0 <Generic_Delta_Set+0x38c>)
 800e316:	4603      	mov	r3, r0
 800e318:	005b      	lsls	r3, r3, #1
 800e31a:	4403      	add	r3, r0
 800e31c:	009b      	lsls	r3, r3, #2
 800e31e:	440b      	add	r3, r1
 800e320:	3308      	adds	r3, #8
 800e322:	601a      	str	r2, [r3, #0]
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_DeltaLevelParam.Generic_TID; 
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	781b      	ldrb	r3, [r3, #0]
 800e328:	4619      	mov	r1, r3
 800e32a:	7e38      	ldrb	r0, [r7, #24]
 800e32c:	4a20      	ldr	r2, [pc, #128]	; (800e3b0 <Generic_Delta_Set+0x38c>)
 800e32e:	460b      	mov	r3, r1
 800e330:	005b      	lsls	r3, r3, #1
 800e332:	440b      	add	r3, r1
 800e334:	009b      	lsls	r3, r3, #2
 800e336:	4413      	add	r3, r2
 800e338:	3305      	adds	r3, #5
 800e33a:	4602      	mov	r2, r0
 800e33c:	701a      	strb	r2, [r3, #0]
      
  /* Application Callback */
  (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800e33e:	4b1f      	ldr	r3, [pc, #124]	; (800e3bc <Generic_Delta_Set+0x398>)
 800e340:	689c      	ldr	r4, [r3, #8]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	461a      	mov	r2, r3
 800e348:	4613      	mov	r3, r2
 800e34a:	005b      	lsls	r3, r3, #1
 800e34c:	4413      	add	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4a17      	ldr	r2, [pc, #92]	; (800e3b0 <Generic_Delta_Set+0x38c>)
 800e352:	1898      	adds	r0, r3, r2
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	88da      	ldrh	r2, [r3, #6]
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	2100      	movs	r1, #0
 800e35e:	47a0      	blx	r4
#ifdef ENABLE_MODEL_BINDING    
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  /* Binding of Generic level with light lightnes actual */
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	781b      	ldrb	r3, [r3, #0]
 800e364:	461a      	mov	r2, r3
 800e366:	4613      	mov	r3, r2
 800e368:	005b      	lsls	r3, r3, #1
 800e36a:	4413      	add	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4a10      	ldr	r2, [pc, #64]	; (800e3b0 <Generic_Delta_Set+0x38c>)
 800e370:	1898      	adds	r0, r3, r2
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	781a      	ldrb	r2, [r3, #0]
         Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	781b      	ldrb	r3, [r3, #0]
 800e37a:	461c      	mov	r4, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e37c:	4910      	ldr	r1, [pc, #64]	; (800e3c0 <Generic_Delta_Set+0x39c>)
 800e37e:	4623      	mov	r3, r4
 800e380:	005b      	lsls	r3, r3, #1
 800e382:	4423      	add	r3, r4
 800e384:	440b      	add	r3, r1
 800e386:	7819      	ldrb	r1, [r3, #0]
         Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag,Generic_ModelFlag[pmsgParam->elementIndex].Generic_Trnsn_Cmplt);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	781b      	ldrb	r3, [r3, #0]
 800e38c:	461d      	mov	r5, r3
  GenericLevel_LightBinding(&Generic_LevelStatus[pmsgParam->elementIndex],BINDING_GENERIC_LEVEL_SET,pmsgParam->elementIndex,
 800e38e:	4c0c      	ldr	r4, [pc, #48]	; (800e3c0 <Generic_Delta_Set+0x39c>)
 800e390:	462b      	mov	r3, r5
 800e392:	005b      	lsls	r3, r3, #1
 800e394:	442b      	add	r3, r5
 800e396:	4423      	add	r3, r4
 800e398:	3302      	adds	r3, #2
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	9300      	str	r3, [sp, #0]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	2101      	movs	r1, #1
 800e3a2:	f003 f911 	bl	80115c8 <GenericLevel_LightBinding>
#endif  
#endif  
  return MOBLE_RESULT_SUCCESS;
 800e3a6:	2300      	movs	r3, #0
}
 800e3a8:	4618      	mov	r0, r3
 800e3aa:	3720      	adds	r7, #32
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e3b0:	20004588 	.word	0x20004588
 800e3b4:	08032f54 	.word	0x08032f54
 800e3b8:	0802ef5c 	.word	0x0802ef5c
 800e3bc:	08032bf8 	.word	0x08032bf8
 800e3c0:	2000459c 	.word	0x2000459c

0800e3c4 <Generic_Move_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Move_Set(const MOBLEUINT8* plevel_param, 
                              MOBLEUINT32 length,
                              MODEL_MessageHeader_t *pmsgParam) 
{
 800e3c4:	b590      	push	{r4, r7, lr}
 800e3c6:	b087      	sub	sp, #28
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	60b9      	str	r1, [r7, #8]
 800e3ce:	607a      	str	r2, [r7, #4]
  Level: 2B The target value of the Generic Level state
  TID:   1B Transaction Identifier
  Transition Time: 1B Format as defined in Section 3.1.3. (Optional)
  Delay: 1B Message execution delay in 5 milliseconds steps (C.1)
  */
  TRACE_M(TF_GENERIC_M, "Generic_Move_Set callback received \r\n");
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	4872      	ldr	r0, [pc, #456]	; (800e59c <Generic_Move_Set+0x1d8>)
 800e3d4:	f7ff f8cc 	bl	800d570 <TraceHeader>
 800e3d8:	4871      	ldr	r0, [pc, #452]	; (800e5a0 <Generic_Move_Set+0x1dc>)
 800e3da:	f01b f933 	bl	8029644 <puts>
  
  Generic_LevelMoveParam_t  Generic_LevelMoveParam;
  
  Generic_LevelMoveParam.TargetMoveLevel16  = (plevel_param[1] << 8);
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	3301      	adds	r3, #1
 800e3e2:	781b      	ldrb	r3, [r3, #0]
 800e3e4:	b29b      	uxth	r3, r3
 800e3e6:	021b      	lsls	r3, r3, #8
 800e3e8:	b29b      	uxth	r3, r3
 800e3ea:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.TargetMoveLevel16 |= (plevel_param[0]);
 800e3ec:	8a3a      	ldrh	r2, [r7, #16]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	4313      	orrs	r3, r2
 800e3f6:	b29b      	uxth	r3, r3
 800e3f8:	823b      	strh	r3, [r7, #16]
  Generic_LevelMoveParam.Generic_TID = plevel_param[2];
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	3302      	adds	r3, #2
 800e3fe:	781b      	ldrb	r3, [r3, #0]
 800e400:	74bb      	strb	r3, [r7, #18]
  /* Check for Optional Parameters 
  
    length > 3 plevel_param has level,TID,Trasition Time,Delay
    length < 3 plevel_param has level,TID
  */     
  if((length > 3) && (plevel_param[3] !=0))
 800e402:	68bb      	ldr	r3, [r7, #8]
 800e404:	2b03      	cmp	r3, #3
 800e406:	d977      	bls.n	800e4f8 <Generic_Move_Set+0x134>
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3303      	adds	r3, #3
 800e40c:	781b      	ldrb	r3, [r3, #0]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d072      	beq.n	800e4f8 <Generic_Move_Set+0x134>
  {
    Generic_LevelMoveParam.Transition_Time = plevel_param[3];
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3303      	adds	r3, #3
 800e416:	781b      	ldrb	r3, [r3, #0]
 800e418:	74fb      	strb	r3, [r7, #19]
    Generic_LevelMoveParam.Delay_Time = plevel_param[4];
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3304      	adds	r3, #4
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	753b      	strb	r3, [r7, #20]
    /* Copy the data into status message which needs to be update in 
      application message.
    */ 
    /* The assumption here is that the move command starts transition with each 
       step of size delta, which terminates only at max or min value */
    if (Generic_LevelMoveParam.TargetMoveLevel16 <= 0x7FFF)
 800e422:	8a3b      	ldrh	r3, [r7, #16]
 800e424:	b21b      	sxth	r3, r3
 800e426:	2b00      	cmp	r3, #0
 800e428:	db0d      	blt.n	800e446 <Generic_Move_Set+0x82>
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x7FFF;
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	781b      	ldrb	r3, [r3, #0]
 800e42e:	4619      	mov	r1, r3
 800e430:	4a5c      	ldr	r2, [pc, #368]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e432:	460b      	mov	r3, r1
 800e434:	005b      	lsls	r3, r3, #1
 800e436:	440b      	add	r3, r1
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	3302      	adds	r3, #2
 800e43e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e442:	801a      	strh	r2, [r3, #0]
 800e444:	e00c      	b.n	800e460 <Generic_Move_Set+0x9c>
    }
    else
    {
        Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 = 0x8000;
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	781b      	ldrb	r3, [r3, #0]
 800e44a:	4619      	mov	r1, r3
 800e44c:	4a55      	ldr	r2, [pc, #340]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e44e:	460b      	mov	r3, r1
 800e450:	005b      	lsls	r3, r3, #1
 800e452:	440b      	add	r3, r1
 800e454:	009b      	lsls	r3, r3, #2
 800e456:	4413      	add	r3, r2
 800e458:	3302      	adds	r3, #2
 800e45a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800e45e:	801a      	strh	r2, [r3, #0]
    }
    Generic_TemporaryStatus[pmsgParam->elementIndex].TargetValue16 = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	781b      	ldrb	r3, [r3, #0]
 800e464:	4618      	mov	r0, r3
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	4619      	mov	r1, r3
 800e46c:	4a4d      	ldr	r2, [pc, #308]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e46e:	4603      	mov	r3, r0
 800e470:	005b      	lsls	r3, r3, #1
 800e472:	4403      	add	r3, r0
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	3302      	adds	r3, #2
 800e47a:	f9b3 0000 	ldrsh.w	r0, [r3]
 800e47e:	4a4a      	ldr	r2, [pc, #296]	; (800e5a8 <Generic_Move_Set+0x1e4>)
 800e480:	460b      	mov	r3, r1
 800e482:	009b      	lsls	r3, r3, #2
 800e484:	440b      	add	r3, r1
 800e486:	4413      	add	r3, r2
 800e488:	4602      	mov	r2, r0
 800e48a:	f8a3 2003 	strh.w	r2, [r3, #3]
    Generic_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	781b      	ldrb	r3, [r3, #0]
 800e492:	4619      	mov	r1, r3
 800e494:	4a44      	ldr	r2, [pc, #272]	; (800e5a8 <Generic_Move_Set+0x1e4>)
 800e496:	460b      	mov	r3, r1
 800e498:	009b      	lsls	r3, r3, #2
 800e49a:	440b      	add	r3, r1
 800e49c:	4413      	add	r3, r2
 800e49e:	223f      	movs	r2, #63	; 0x3f
 800e4a0:	701a      	strb	r2, [r3, #0]
    Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime = UNDEFSTEPVAL;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	781b      	ldrb	r3, [r3, #0]
 800e4a6:	4619      	mov	r1, r3
 800e4a8:	4a3e      	ldr	r2, [pc, #248]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e4aa:	460b      	mov	r3, r1
 800e4ac:	005b      	lsls	r3, r3, #1
 800e4ae:	440b      	add	r3, r1
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	3304      	adds	r3, #4
 800e4b6:	223f      	movs	r2, #63	; 0x3f
 800e4b8:	701a      	strb	r2, [r3, #0]
    
    /* Function to calculate time parameters, step resolution
      step size for transition state machine.
    */
    Generic_GetStepValue(plevel_param[3], pmsgParam->elementIndex);   
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	3303      	adds	r3, #3
 800e4be:	781a      	ldrb	r2, [r3, #0]
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	f000 fd6c 	bl	800efa4 <Generic_GetStepValue>
    /* option parameter flag, enable to sent all required parameter in status.*/
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 1;  
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4a36      	ldr	r2, [pc, #216]	; (800e5ac <Generic_Move_Set+0x1e8>)
 800e4d4:	460b      	mov	r3, r1
 800e4d6:	005b      	lsls	r3, r3, #1
 800e4d8:	440b      	add	r3, r1
 800e4da:	4413      	add	r3, r2
 800e4dc:	3301      	adds	r3, #1
 800e4de:	2201      	movs	r2, #1
 800e4e0:	701a      	strb	r2, [r3, #0]
    /* transition process enable flag. */
    Generic_ModelFlag[pmsgParam->elementIndex].GenericTransitionFlag = GENERIC_LEVEL_TRANSITION_START;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	781b      	ldrb	r3, [r3, #0]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	4a30      	ldr	r2, [pc, #192]	; (800e5ac <Generic_Move_Set+0x1e8>)
 800e4ea:	460b      	mov	r3, r1
 800e4ec:	005b      	lsls	r3, r3, #1
 800e4ee:	440b      	add	r3, r1
 800e4f0:	4413      	add	r3, r2
 800e4f2:	2202      	movs	r2, #2
 800e4f4:	701a      	strb	r2, [r3, #0]
 800e4f6:	e02e      	b.n	800e556 <Generic_Move_Set+0x192>
  }
  else
  {   
    Generic_TransitionParameterReset(pmsgParam->elementIndex);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	4618      	mov	r0, r3
 800e4fe:	f001 f869 	bl	800f5d4 <Generic_TransitionParameterReset>
    
    if(Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID == Generic_LevelMoveParam.Generic_TID)
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	4619      	mov	r1, r3
 800e508:	4a26      	ldr	r2, [pc, #152]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e50a:	460b      	mov	r3, r1
 800e50c:	005b      	lsls	r3, r3, #1
 800e50e:	440b      	add	r3, r1
 800e510:	009b      	lsls	r3, r3, #2
 800e512:	4413      	add	r3, r2
 800e514:	3305      	adds	r3, #5
 800e516:	781a      	ldrb	r2, [r3, #0]
 800e518:	7cbb      	ldrb	r3, [r7, #18]
 800e51a:	429a      	cmp	r2, r3
 800e51c:	d11b      	bne.n	800e556 <Generic_Move_Set+0x192>
    {
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	4619      	mov	r1, r3
 800e524:	4a1f      	ldr	r2, [pc, #124]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e526:	460b      	mov	r3, r1
 800e528:	005b      	lsls	r3, r3, #1
 800e52a:	440b      	add	r3, r1
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	3306      	adds	r3, #6
 800e532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e536:	b29a      	uxth	r2, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800e538:	8a3b      	ldrh	r3, [r7, #16]
 800e53a:	4413      	add	r3, r2
 800e53c:	b29a      	uxth	r2, r3
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	781b      	ldrb	r3, [r3, #0]
 800e542:	4619      	mov	r1, r3
        + Generic_LevelMoveParam.TargetMoveLevel16;
 800e544:	b210      	sxth	r0, r2
      Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 =  Generic_LevelStatus[pmsgParam->elementIndex].Last_Present_Level16 
 800e546:	4a17      	ldr	r2, [pc, #92]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e548:	460b      	mov	r3, r1
 800e54a:	005b      	lsls	r3, r3, #1
 800e54c:	440b      	add	r3, r1
 800e54e:	009b      	lsls	r3, r3, #2
 800e550:	4413      	add	r3, r2
 800e552:	4602      	mov	r2, r0
 800e554:	801a      	strh	r2, [r3, #0]
    {
      
    }
    }
    
  Generic_LevelStatus[pmsgParam->elementIndex].Last_Level_TID = Generic_LevelMoveParam.Generic_TID; 
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	4619      	mov	r1, r3
 800e55c:	7cb8      	ldrb	r0, [r7, #18]
 800e55e:	4a11      	ldr	r2, [pc, #68]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e560:	460b      	mov	r3, r1
 800e562:	005b      	lsls	r3, r3, #1
 800e564:	440b      	add	r3, r1
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	4413      	add	r3, r2
 800e56a:	3305      	adds	r3, #5
 800e56c:	4602      	mov	r2, r0
 800e56e:	701a      	strb	r2, [r3, #0]
 
  /* Application Callback */
  (GenericAppli_cb.LevelDeltaMove_Set_cb)(&Generic_LevelStatus[pmsgParam->elementIndex], 0, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800e570:	4b0f      	ldr	r3, [pc, #60]	; (800e5b0 <Generic_Move_Set+0x1ec>)
 800e572:	691c      	ldr	r4, [r3, #16]
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	781b      	ldrb	r3, [r3, #0]
 800e578:	461a      	mov	r2, r3
 800e57a:	4613      	mov	r3, r2
 800e57c:	005b      	lsls	r3, r3, #1
 800e57e:	4413      	add	r3, r2
 800e580:	009b      	lsls	r3, r3, #2
 800e582:	4a08      	ldr	r2, [pc, #32]	; (800e5a4 <Generic_Move_Set+0x1e0>)
 800e584:	1898      	adds	r0, r3, r2
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	88da      	ldrh	r2, [r3, #6]
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	781b      	ldrb	r3, [r3, #0]
 800e58e:	2100      	movs	r1, #0
 800e590:	47a0      	blx	r4
     
  return MOBLE_RESULT_SUCCESS;
 800e592:	2300      	movs	r3, #0
}
 800e594:	4618      	mov	r0, r3
 800e596:	371c      	adds	r7, #28
 800e598:	46bd      	mov	sp, r7
 800e59a:	bd90      	pop	{r4, r7, pc}
 800e59c:	08032f68 	.word	0x08032f68
 800e5a0:	0802ef78 	.word	0x0802ef78
 800e5a4:	20004588 	.word	0x20004588
 800e5a8:	20004574 	.word	0x20004574
 800e5ac:	2000459c 	.word	0x2000459c
 800e5b0:	08032bf8 	.word	0x08032bf8

0800e5b4 <Generic_Level_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_Level_Status(MOBLEUINT8* plevel_status, 
                                  MOBLEUINT32 *plength,
                                  MODEL_MessageHeader_t *pmsgParam) 
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	60f8      	str	r0, [r7, #12]
 800e5bc:	60b9      	str	r1, [r7, #8]
 800e5be:	607a      	str	r2, [r7, #4]
  Target Level: 2B The target value of the Generic Level state (Optional). 
  Remaining Time: 1B Format as defined in Section 3.1.3 (C.1).
  
  */
  
  TRACE_M(TF_GENERIC_M, "Generic_Level_Status callback received \r\n");
 800e5c0:	2100      	movs	r1, #0
 800e5c2:	4856      	ldr	r0, [pc, #344]	; (800e71c <Generic_Level_Status+0x168>)
 800e5c4:	f7fe ffd4 	bl	800d570 <TraceHeader>
 800e5c8:	4855      	ldr	r0, [pc, #340]	; (800e720 <Generic_Level_Status+0x16c>)
 800e5ca:	f01b f83b 	bl	8029644 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8205! \n\r");
 800e5ce:	2100      	movs	r1, #0
 800e5d0:	4852      	ldr	r0, [pc, #328]	; (800e71c <Generic_Level_Status+0x168>)
 800e5d2:	f7fe ffcd 	bl	800d570 <TraceHeader>
 800e5d6:	4853      	ldr	r0, [pc, #332]	; (800e724 <Generic_Level_Status+0x170>)
 800e5d8:	f01a ffce 	bl	8029578 <iprintf>
  
  /* checking the transition is in process.
  checking for remaining time is not equal to zero.
  */
  
  if((Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam ==1) || (Generic_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	781b      	ldrb	r3, [r3, #0]
 800e5e0:	4619      	mov	r1, r3
 800e5e2:	4a51      	ldr	r2, [pc, #324]	; (800e728 <Generic_Level_Status+0x174>)
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	005b      	lsls	r3, r3, #1
 800e5e8:	440b      	add	r3, r1
 800e5ea:	4413      	add	r3, r2
 800e5ec:	3301      	adds	r3, #1
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	2b01      	cmp	r3, #1
 800e5f2:	d00c      	beq.n	800e60e <Generic_Level_Status+0x5a>
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	781b      	ldrb	r3, [r3, #0]
 800e5f8:	4619      	mov	r1, r3
 800e5fa:	4a4c      	ldr	r2, [pc, #304]	; (800e72c <Generic_Level_Status+0x178>)
 800e5fc:	460b      	mov	r3, r1
 800e5fe:	009b      	lsls	r3, r3, #2
 800e600:	440b      	add	r3, r1
 800e602:	005b      	lsls	r3, r3, #1
 800e604:	4413      	add	r3, r2
 800e606:	f993 3000 	ldrsb.w	r3, [r3]
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d045      	beq.n	800e69a <Generic_Level_Status+0xe6>
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent with Transition \r\n"); 
 800e60e:	2100      	movs	r1, #0
 800e610:	4842      	ldr	r0, [pc, #264]	; (800e71c <Generic_Level_Status+0x168>)
 800e612:	f7fe ffad 	bl	800d570 <TraceHeader>
 800e616:	4846      	ldr	r0, [pc, #280]	; (800e730 <Generic_Level_Status+0x17c>)
 800e618:	f01b f814 	bl	8029644 <puts>

    *(plevel_status+2) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	4619      	mov	r1, r3
 800e622:	4a44      	ldr	r2, [pc, #272]	; (800e734 <Generic_Level_Status+0x180>)
 800e624:	460b      	mov	r3, r1
 800e626:	005b      	lsls	r3, r3, #1
 800e628:	440b      	add	r3, r1
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	3302      	adds	r3, #2
 800e630:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	3302      	adds	r3, #2
 800e638:	b2d2      	uxtb	r2, r2
 800e63a:	701a      	strb	r2, [r3, #0]
    *(plevel_status+3) = Generic_LevelStatus[pmsgParam->elementIndex].Target_Level16 >> 8;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	781b      	ldrb	r3, [r3, #0]
 800e640:	4619      	mov	r1, r3
 800e642:	4a3c      	ldr	r2, [pc, #240]	; (800e734 <Generic_Level_Status+0x180>)
 800e644:	460b      	mov	r3, r1
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	440b      	add	r3, r1
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4413      	add	r3, r2
 800e64e:	3302      	adds	r3, #2
 800e650:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e654:	121b      	asrs	r3, r3, #8
 800e656:	b21a      	sxth	r2, r3
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	3303      	adds	r3, #3
 800e65c:	b2d2      	uxtb	r2, r2
 800e65e:	701a      	strb	r2, [r3, #0]
    *(plevel_status+4) = Generic_LevelStatus[pmsgParam->elementIndex].RemainingTime;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	781b      	ldrb	r3, [r3, #0]
 800e664:	4618      	mov	r0, r3
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	1d1a      	adds	r2, r3, #4
 800e66a:	4932      	ldr	r1, [pc, #200]	; (800e734 <Generic_Level_Status+0x180>)
 800e66c:	4603      	mov	r3, r0
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	4403      	add	r3, r0
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	440b      	add	r3, r1
 800e676:	3304      	adds	r3, #4
 800e678:	781b      	ldrb	r3, [r3, #0]
 800e67a:	7013      	strb	r3, [r2, #0]
    *plength = 5;
 800e67c:	68bb      	ldr	r3, [r7, #8]
 800e67e:	2205      	movs	r2, #5
 800e680:	601a      	str	r2, [r3, #0]
    Generic_ModelFlag[pmsgParam->elementIndex].GenericOptionalParam = 0;    
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	781b      	ldrb	r3, [r3, #0]
 800e686:	4619      	mov	r1, r3
 800e688:	4a27      	ldr	r2, [pc, #156]	; (800e728 <Generic_Level_Status+0x174>)
 800e68a:	460b      	mov	r3, r1
 800e68c:	005b      	lsls	r3, r3, #1
 800e68e:	440b      	add	r3, r1
 800e690:	4413      	add	r3, r2
 800e692:	3301      	adds	r3, #1
 800e694:	2200      	movs	r2, #0
 800e696:	701a      	strb	r2, [r3, #0]
 800e698:	e009      	b.n	800e6ae <Generic_Level_Status+0xfa>
  }
  else
  {
    TRACE_M(TF_GENERIC_M, "Generic_Level_Status sent without Transition \r\n"); 
 800e69a:	2100      	movs	r1, #0
 800e69c:	481f      	ldr	r0, [pc, #124]	; (800e71c <Generic_Level_Status+0x168>)
 800e69e:	f7fe ff67 	bl	800d570 <TraceHeader>
 800e6a2:	4825      	ldr	r0, [pc, #148]	; (800e738 <Generic_Level_Status+0x184>)
 800e6a4:	f01a ffce 	bl	8029644 <puts>
    *plength = 2;             
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	2202      	movs	r2, #2
 800e6ac:	601a      	str	r2, [r3, #0]
  }
     
  *(plevel_status) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	781b      	ldrb	r3, [r3, #0]
 800e6b2:	4619      	mov	r1, r3
 800e6b4:	4a1f      	ldr	r2, [pc, #124]	; (800e734 <Generic_Level_Status+0x180>)
 800e6b6:	460b      	mov	r3, r1
 800e6b8:	005b      	lsls	r3, r3, #1
 800e6ba:	440b      	add	r3, r1
 800e6bc:	009b      	lsls	r3, r3, #2
 800e6be:	4413      	add	r3, r2
 800e6c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6c4:	b2da      	uxtb	r2, r3
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	701a      	strb	r2, [r3, #0]
  *(plevel_status+1) = Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16 >> 8;
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	4619      	mov	r1, r3
 800e6d0:	4a18      	ldr	r2, [pc, #96]	; (800e734 <Generic_Level_Status+0x180>)
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	005b      	lsls	r3, r3, #1
 800e6d6:	440b      	add	r3, r1
 800e6d8:	009b      	lsls	r3, r3, #2
 800e6da:	4413      	add	r3, r2
 800e6dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6e0:	121b      	asrs	r3, r3, #8
 800e6e2:	b21a      	sxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	3301      	adds	r3, #1
 800e6e8:	b2d2      	uxtb	r2, r2
 800e6ea:	701a      	strb	r2, [r3, #0]
  TRACE_M(TF_GENERIC_M, "%d \r\n", Generic_LevelStatus[pmsgParam->elementIndex].Present_Level16); 
 800e6ec:	2100      	movs	r1, #0
 800e6ee:	480b      	ldr	r0, [pc, #44]	; (800e71c <Generic_Level_Status+0x168>)
 800e6f0:	f7fe ff3e 	bl	800d570 <TraceHeader>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	781b      	ldrb	r3, [r3, #0]
 800e6f8:	4619      	mov	r1, r3
 800e6fa:	4a0e      	ldr	r2, [pc, #56]	; (800e734 <Generic_Level_Status+0x180>)
 800e6fc:	460b      	mov	r3, r1
 800e6fe:	005b      	lsls	r3, r3, #1
 800e700:	440b      	add	r3, r1
 800e702:	009b      	lsls	r3, r3, #2
 800e704:	4413      	add	r3, r2
 800e706:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e70a:	4619      	mov	r1, r3
 800e70c:	480b      	ldr	r0, [pc, #44]	; (800e73c <Generic_Level_Status+0x188>)
 800e70e:	f01a ff33 	bl	8029578 <iprintf>
  return MOBLE_RESULT_SUCCESS;   
 800e712:	2300      	movs	r3, #0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3710      	adds	r7, #16
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}
 800e71c:	08032f7c 	.word	0x08032f7c
 800e720:	0802efa0 	.word	0x0802efa0
 800e724:	0802efcc 	.word	0x0802efcc
 800e728:	2000459c 	.word	0x2000459c
 800e72c:	2000457c 	.word	0x2000457c
 800e730:	0802efd8 	.word	0x0802efd8
 800e734:	20004588 	.word	0x20004588
 800e738:	0802f004 	.word	0x0802f004
 800e73c:	0802eee4 	.word	0x0802eee4

0800e740 <Generic_PowerOnOff_Set>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & AppKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Set(const MOBLEUINT8 *powerOnOff_param , MOBLEUINT32 length,\
                                   MODEL_MessageHeader_t *pmsgParam) 
{
 800e740:	b590      	push	{r4, r7, lr}
 800e742:	b087      	sub	sp, #28
 800e744:	af00      	add	r7, sp, #0
 800e746:	60f8      	str	r0, [r7, #12]
 800e748:	60b9      	str	r1, [r7, #8]
 800e74a:	607a      	str	r2, [r7, #4]
  /* 
  3.2.4.2 Generic Power On Off Time
  Following is the set message:
  powerOnOff_param:1B parameter is received to set the power on off model.  
  */
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Set callback received \r\n");
 800e74c:	2100      	movs	r1, #0
 800e74e:	4817      	ldr	r0, [pc, #92]	; (800e7ac <Generic_PowerOnOff_Set+0x6c>)
 800e750:	f7fe ff0e 	bl	800d570 <TraceHeader>
 800e754:	4816      	ldr	r0, [pc, #88]	; (800e7b0 <Generic_PowerOnOff_Set+0x70>)
 800e756:	f01a ff75 	bl	8029644 <puts>
  TRACE_M(TF_GENERIC_M,"Generic_PowerOnOff_Set is %d\r\n", powerOnOff_param[0]);
 800e75a:	2100      	movs	r1, #0
 800e75c:	4813      	ldr	r0, [pc, #76]	; (800e7ac <Generic_PowerOnOff_Set+0x6c>)
 800e75e:	f7fe ff07 	bl	800d570 <TraceHeader>
 800e762:	68fb      	ldr	r3, [r7, #12]
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	4619      	mov	r1, r3
 800e768:	4812      	ldr	r0, [pc, #72]	; (800e7b4 <Generic_PowerOnOff_Set+0x74>)
 800e76a:	f01a ff05 	bl	8029578 <iprintf>
  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  
  Generic_PowerOnOffParam[pmsgParam->elementIndex].PowerOnOffState = powerOnOff_param[0];
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	781b      	ldrb	r3, [r3, #0]
 800e772:	4619      	mov	r1, r3
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	781a      	ldrb	r2, [r3, #0]
 800e778:	f101 0318 	add.w	r3, r1, #24
 800e77c:	443b      	add	r3, r7
 800e77e:	f803 2c04 	strb.w	r2, [r3, #-4]
  
  /* Application Callback */
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[pmsgParam->elementIndex], length, pmsgParam->dst_peer,\
 800e782:	4b0d      	ldr	r3, [pc, #52]	; (800e7b8 <Generic_PowerOnOff_Set+0x78>)
 800e784:	699c      	ldr	r4, [r3, #24]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	781b      	ldrb	r3, [r3, #0]
 800e78a:	461a      	mov	r2, r3
 800e78c:	f107 0314 	add.w	r3, r7, #20
 800e790:	1898      	adds	r0, r3, r2
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	b2d9      	uxtb	r1, r3
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	88da      	ldrh	r2, [r3, #6]
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	781b      	ldrb	r3, [r3, #0]
 800e79e:	47a0      	blx	r4
                                                     pmsgParam->elementIndex);
  return MOBLE_RESULT_SUCCESS;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	371c      	adds	r7, #28
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd90      	pop	{r4, r7, pc}
 800e7aa:	bf00      	nop
 800e7ac:	08032f94 	.word	0x08032f94
 800e7b0:	0802f034 	.word	0x0802f034
 800e7b4:	0802f060 	.word	0x0802f060
 800e7b8:	08032bf8 	.word	0x08032bf8

0800e7bc <Generic_PowerOnOff_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Generic_PowerOnOff_Status(MOBLEUINT8 *powerOnOff_status , 
                                       MOBLEUINT32 *plength,
                                       MODEL_MessageHeader_t *pmsgParam) 
{  
 800e7bc:	b580      	push	{r7, lr}
 800e7be:	b086      	sub	sp, #24
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	60f8      	str	r0, [r7, #12]
 800e7c4:	60b9      	str	r1, [r7, #8]
 800e7c6:	607a      	str	r2, [r7, #4]
  3.2.4.4 Generic OnPowerUp Status
  Following is the status message:
  powerOnOff_status: 1B is the status parameter of the Power on off model. 
  */  
  MOBLEUINT8 Generic_GetBuff[2] ;
  TRACE_M(TF_GENERIC_M, "Generic_PowerOnOff_Status callback received \r\n");
 800e7c8:	2100      	movs	r1, #0
 800e7ca:	4810      	ldr	r0, [pc, #64]	; (800e80c <Generic_PowerOnOff_Status+0x50>)
 800e7cc:	f7fe fed0 	bl	800d570 <TraceHeader>
 800e7d0:	480f      	ldr	r0, [pc, #60]	; (800e810 <Generic_PowerOnOff_Status+0x54>)
 800e7d2:	f01a ff37 	bl	8029644 <puts>
  TRACE_M(TF_SERIAL_CTRL,"#8211! \n\r");
 800e7d6:	2100      	movs	r1, #0
 800e7d8:	480c      	ldr	r0, [pc, #48]	; (800e80c <Generic_PowerOnOff_Status+0x50>)
 800e7da:	f7fe fec9 	bl	800d570 <TraceHeader>
 800e7de:	480d      	ldr	r0, [pc, #52]	; (800e814 <Generic_PowerOnOff_Status+0x58>)
 800e7e0:	f01a feca 	bl	8029578 <iprintf>
  
  /* Function call back to get the values from application*/
  (Appli_GenericState_cb.GetPowerOnOffStatus_cb)(Generic_GetBuff, pmsgParam->dst_peer,\
 800e7e4:	4b0c      	ldr	r3, [pc, #48]	; (800e818 <Generic_PowerOnOff_Status+0x5c>)
 800e7e6:	68db      	ldr	r3, [r3, #12]
 800e7e8:	687a      	ldr	r2, [r7, #4]
 800e7ea:	88d1      	ldrh	r1, [r2, #6]
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	7812      	ldrb	r2, [r2, #0]
 800e7f0:	f107 0014 	add.w	r0, r7, #20
 800e7f4:	4798      	blx	r3
                                                        pmsgParam->elementIndex);
   
  *(powerOnOff_status) = Generic_GetBuff[0];
 800e7f6:	7d3a      	ldrb	r2, [r7, #20]
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	701a      	strb	r2, [r3, #0]
  *plength = 1;
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2201      	movs	r2, #1
 800e800:	601a      	str	r2, [r3, #0]
 
  return MOBLE_RESULT_SUCCESS;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	08032fac 	.word	0x08032fac
 800e810:	0802f080 	.word	0x0802f080
 800e814:	0802f0b0 	.word	0x0802f0b0
 800e818:	08032c20 	.word	0x08032c20

0800e81c <GenericModelServer_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT GenericModelServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b083      	sub	sp, #12
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
 800e824:	6039      	str	r1, [r7, #0]
  *data = Generic_Opcodes_Table;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4a05      	ldr	r2, [pc, #20]	; (800e840 <GenericModelServer_GetOpcodeTableCb+0x24>)
 800e82a:	601a      	str	r2, [r3, #0]
  *length = sizeof(Generic_Opcodes_Table)/sizeof(Generic_Opcodes_Table[0]);
 800e82c:	683b      	ldr	r3, [r7, #0]
 800e82e:	220e      	movs	r2, #14
 800e830:	801a      	strh	r2, [r3, #0]

  return MOBLE_RESULT_SUCCESS;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	370c      	adds	r7, #12
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr
 800e840:	08032e6c 	.word	0x08032e6c

0800e844 <GenericModelServer_GetStatusRequestCb>:
                                                   MOBLEUINT32 *plength, 
                                                   MOBLEUINT8 const *pRxData,
                                                   MOBLEUINT32 dataLength,
                                                   MOBLEBOOL response)

{
 800e844:	b580      	push	{r7, lr}
 800e846:	b084      	sub	sp, #16
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	607a      	str	r2, [r7, #4]
 800e84e:	603b      	str	r3, [r7, #0]
 800e850:	460b      	mov	r3, r1
 800e852:	817b      	strh	r3, [r7, #10]
  TRACE_M(TF_GENERIC_M, "response status enable \n\r");
 800e854:	2100      	movs	r1, #0
 800e856:	4818      	ldr	r0, [pc, #96]	; (800e8b8 <GenericModelServer_GetStatusRequestCb+0x74>)
 800e858:	f7fe fe8a 	bl	800d570 <TraceHeader>
 800e85c:	4817      	ldr	r0, [pc, #92]	; (800e8bc <GenericModelServer_GetStatusRequestCb+0x78>)
 800e85e:	f01a fe8b 	bl	8029578 <iprintf>
  switch(opcode)
 800e862:	897b      	ldrh	r3, [r7, #10]
 800e864:	f248 2212 	movw	r2, #33298	; 0x8212
 800e868:	4293      	cmp	r3, r2
 800e86a:	d018      	beq.n	800e89e <GenericModelServer_GetStatusRequestCb+0x5a>
 800e86c:	f248 2212 	movw	r2, #33298	; 0x8212
 800e870:	4293      	cmp	r3, r2
 800e872:	dc1a      	bgt.n	800e8aa <GenericModelServer_GetStatusRequestCb+0x66>
 800e874:	f248 2204 	movw	r2, #33284	; 0x8204
 800e878:	4293      	cmp	r3, r2
 800e87a:	d004      	beq.n	800e886 <GenericModelServer_GetStatusRequestCb+0x42>
 800e87c:	f248 2208 	movw	r2, #33288	; 0x8208
 800e880:	4293      	cmp	r3, r2
 800e882:	d006      	beq.n	800e892 <GenericModelServer_GetStatusRequestCb+0x4e>
      Generic_DefaultTransitionTime_Status(pResponsedata, plength, pmsgParam);
    }
#endif    
    default:
    {
      break;
 800e884:	e011      	b.n	800e8aa <GenericModelServer_GetStatusRequestCb+0x66>
      Generic_OnOff_Status(pResponsedata, plength, pmsgParam);       
 800e886:	68fa      	ldr	r2, [r7, #12]
 800e888:	6839      	ldr	r1, [r7, #0]
 800e88a:	6878      	ldr	r0, [r7, #4]
 800e88c:	f7ff fa2c 	bl	800dce8 <Generic_OnOff_Status>
      break;
 800e890:	e00c      	b.n	800e8ac <GenericModelServer_GetStatusRequestCb+0x68>
      Generic_Level_Status(pResponsedata, plength, pmsgParam);     
 800e892:	68fa      	ldr	r2, [r7, #12]
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f7ff fe8c 	bl	800e5b4 <Generic_Level_Status>
      break;
 800e89c:	e006      	b.n	800e8ac <GenericModelServer_GetStatusRequestCb+0x68>
      Generic_PowerOnOff_Status(pResponsedata, plength, pmsgParam);
 800e89e:	68fa      	ldr	r2, [r7, #12]
 800e8a0:	6839      	ldr	r1, [r7, #0]
 800e8a2:	6878      	ldr	r0, [r7, #4]
 800e8a4:	f7ff ff8a 	bl	800e7bc <Generic_PowerOnOff_Status>
      break;
 800e8a8:	e000      	b.n	800e8ac <GenericModelServer_GetStatusRequestCb+0x68>
      break;
 800e8aa:	bf00      	nop
    }
  }
  return MOBLE_RESULT_SUCCESS;    
 800e8ac:	2300      	movs	r3, #0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3710      	adds	r7, #16
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
 800e8b6:	bf00      	nop
 800e8b8:	08032fc8 	.word	0x08032fc8
 800e8bc:	0802f198 	.word	0x0802f198

0800e8c0 <GenericModelServer_ProcessMessageCb>:
MOBLE_RESULT GenericModelServer_ProcessMessageCb(MODEL_MessageHeader_t *pmsgParam,
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response)
{
 800e8c0:	b590      	push	{r4, r7, lr}
 800e8c2:	b089      	sub	sp, #36	; 0x24
 800e8c4:	af02      	add	r7, sp, #8
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	607a      	str	r2, [r7, #4]
 800e8ca:	603b      	str	r3, [r7, #0]
 800e8cc:	460b      	mov	r3, r1
 800e8ce:	817b      	strh	r3, [r7, #10]
  Model_Binding_Var.Dst_Peer = pmsgParam->dst_peer;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	88da      	ldrh	r2, [r3, #6]
 800e8d4:	4b94      	ldr	r3, [pc, #592]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800e8d6:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800e8d8:	2300      	movs	r3, #0
 800e8da:	75fb      	strb	r3, [r7, #23]
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT8 modelStateChangeFlag = MOBLE_FALSE; 
 800e8dc:	2300      	movs	r3, #0
 800e8de:	75bb      	strb	r3, [r7, #22]
  
  TRACE_M(TF_GENERIC_M, "elementIndex %.2x dst_peer %.2X peer_add %.2X opcode %.2X response %.2X\r\n",
 800e8e0:	2100      	movs	r1, #0
 800e8e2:	4892      	ldr	r0, [pc, #584]	; (800eb2c <GenericModelServer_ProcessMessageCb+0x26c>)
 800e8e4:	f7fe fe44 	bl	800d570 <TraceHeader>
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	4619      	mov	r1, r3
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	88db      	ldrh	r3, [r3, #6]
 800e8f2:	4618      	mov	r0, r3
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	889b      	ldrh	r3, [r3, #4]
 800e8f8:	461c      	mov	r4, r3
 800e8fa:	897b      	ldrh	r3, [r7, #10]
 800e8fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800e900:	9201      	str	r2, [sp, #4]
 800e902:	9300      	str	r3, [sp, #0]
 800e904:	4623      	mov	r3, r4
 800e906:	4602      	mov	r2, r0
 800e908:	4889      	ldr	r0, [pc, #548]	; (800eb30 <GenericModelServer_ProcessMessageCb+0x270>)
 800e90a:	f01a fe35 	bl	8029578 <iprintf>
          pmsgParam->elementIndex, pmsgParam->dst_peer, pmsgParam->peer_addr, opcode, response);   
                                                      
  switch(opcode)
 800e90e:	897b      	ldrh	r3, [r7, #10]
 800e910:	f5a3 4302 	sub.w	r3, r3, #33280	; 0x8200
 800e914:	3b02      	subs	r3, #2
 800e916:	2b12      	cmp	r3, #18
 800e918:	f200 80e4 	bhi.w	800eae4 <GenericModelServer_ProcessMessageCb+0x224>
 800e91c:	a201      	add	r2, pc, #4	; (adr r2, 800e924 <GenericModelServer_ProcessMessageCb+0x64>)
 800e91e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e922:	bf00      	nop
 800e924:	0800e971 	.word	0x0800e971
 800e928:	0800e971 	.word	0x0800e971
 800e92c:	0800eae5 	.word	0x0800eae5
 800e930:	0800eae5 	.word	0x0800eae5
 800e934:	0800e9ef 	.word	0x0800e9ef
 800e938:	0800e9ef 	.word	0x0800e9ef
 800e93c:	0800eae5 	.word	0x0800eae5
 800e940:	0800ea47 	.word	0x0800ea47
 800e944:	0800ea47 	.word	0x0800ea47
 800e948:	0800ea6b 	.word	0x0800ea6b
 800e94c:	0800ea6b 	.word	0x0800ea6b
 800e950:	0800eae5 	.word	0x0800eae5
 800e954:	0800eae5 	.word	0x0800eae5
 800e958:	0800eae5 	.word	0x0800eae5
 800e95c:	0800eae5 	.word	0x0800eae5
 800e960:	0800eae5 	.word	0x0800eae5
 800e964:	0800eae5 	.word	0x0800eae5
 800e968:	0800eaab 	.word	0x0800eaab
 800e96c:	0800eaab 	.word	0x0800eaab
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    case GENERIC_ON_OFF_SET_ACK:
    case GENERIC_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], 1); 
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	2101      	movs	r1, #1
 800e976:	4618      	mov	r0, r3
 800e978:	f7fe fd14 	bl	800d3a4 <Chk_ParamValidity>
 800e97c:	4603      	mov	r3, r0
 800e97e:	75fb      	strb	r3, [r7, #23]
      /* 3.2.1.2 Generic OnOff Set 
      Check if Transition Time field is present or Not,
      If present, Only values of 0x00 through 0x3E shall be used to specify 
      the value of the Transition Number of Steps field. */

      result |= Chk_OptionalParamValidity (dataLength, 2, (pRxData[2]&0x3F), 0x3E );        
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	b2d8      	uxtb	r0, r3
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	3302      	adds	r3, #2
 800e988:	781b      	ldrb	r3, [r3, #0]
 800e98a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e98e:	b2da      	uxtb	r2, r3
 800e990:	233e      	movs	r3, #62	; 0x3e
 800e992:	2102      	movs	r1, #2
 800e994:	f7fe fd53 	bl	800d43e <Chk_OptionalParamValidity>
 800e998:	4603      	mov	r3, r0
 800e99a:	461a      	mov	r2, r3
 800e99c:	7dfb      	ldrb	r3, [r7, #23]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	75fb      	strb	r3, [r7, #23]
    
      if(result == MOBLE_RESULT_SUCCESS)
 800e9a2:	7dfb      	ldrb	r3, [r7, #23]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	f040 809f 	bne.w	800eae8 <GenericModelServer_ProcessMessageCb+0x228>
      {
        /* when device is working as proxy and is a part of node
           delay is included in LED toggle */              
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr,\
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	8898      	ldrh	r0, [r3, #4]
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	88d9      	ldrh	r1, [r3, #6]
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	3301      	adds	r3, #1
 800e9b6:	781b      	ldrb	r3, [r3, #0]
 800e9b8:	461a      	mov	r2, r3
 800e9ba:	f7fe ff91 	bl	800d8e0 <Chk_TidValidity>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	75fb      	strb	r3, [r7, #23]
 800e9c2:	7dfb      	ldrb	r3, [r7, #23]
 800e9c4:	2b01      	cmp	r3, #1
 800e9c6:	f200 808f 	bhi.w	800eae8 <GenericModelServer_ProcessMessageCb+0x228>
                                             pmsgParam->dst_peer, pRxData[1])))
        {
          Generic_OnOff_Set(pRxData, dataLength, pmsgParam);  
 800e9ca:	68fa      	ldr	r2, [r7, #12]
 800e9cc:	6839      	ldr	r1, [r7, #0]
 800e9ce:	6878      	ldr	r0, [r7, #4]
 800e9d0:	f7ff f89c 	bl	800db0c <Generic_OnOff_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_ONOFF_SERVER_MODEL_ID;
 800e9d4:	4b54      	ldr	r3, [pc, #336]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800e9d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e9da:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800e9dc:	4a52      	ldr	r2, [pc, #328]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800e9de:	897b      	ldrh	r3, [r7, #10]
 800e9e0:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800e9e2:	2301      	movs	r3, #1
 800e9e4:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800e9e6:	4b53      	ldr	r3, [pc, #332]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	709a      	strb	r2, [r3, #2]
        }
      }
        
      break;
 800e9ec:	e07c      	b.n	800eae8 <GenericModelServer_ProcessMessageCb+0x228>
  
    case GENERIC_LEVEL_SET_ACK:
    case GENERIC_LEVEL_SET_UNACK: 
    {   
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );        
 800e9ee:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e9f2:	6879      	ldr	r1, [r7, #4]
 800e9f4:	4850      	ldr	r0, [pc, #320]	; (800eb38 <GenericModelServer_ProcessMessageCb+0x278>)
 800e9f6:	f7fe fd41 	bl	800d47c <Chk_ParamMinMaxIntValidity>
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800e9fe:	7dfb      	ldrb	r3, [r7, #23]
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d173      	bne.n	800eaec <GenericModelServer_ProcessMessageCb+0x22c>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	8898      	ldrh	r0, [r3, #4]
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	88d9      	ldrh	r1, [r3, #6]
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	3302      	adds	r3, #2
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	461a      	mov	r2, r3
 800ea14:	f7fe ff64 	bl	800d8e0 <Chk_TidValidity>
 800ea18:	4603      	mov	r3, r0
 800ea1a:	75fb      	strb	r3, [r7, #23]
 800ea1c:	7dfb      	ldrb	r3, [r7, #23]
 800ea1e:	2b01      	cmp	r3, #1
 800ea20:	d864      	bhi.n	800eaec <GenericModelServer_ProcessMessageCb+0x22c>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Level_Set(pRxData, dataLength, pmsgParam);  
 800ea22:	68fa      	ldr	r2, [r7, #12]
 800ea24:	6839      	ldr	r1, [r7, #0]
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f7ff f9f6 	bl	800de18 <Generic_Level_Set>
          Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800ea2c:	4b3e      	ldr	r3, [pc, #248]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea2e:	f241 0202 	movw	r2, #4098	; 0x1002
 800ea32:	805a      	strh	r2, [r3, #2]
          Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ea34:	4a3c      	ldr	r2, [pc, #240]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea36:	897b      	ldrh	r3, [r7, #10]
 800ea38:	8013      	strh	r3, [r2, #0]
          modelStateChangeFlag = MOBLE_TRUE;
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	75bb      	strb	r3, [r7, #22]
          Publication1SecFlag.count = 0;
 800ea3e:	4b3d      	ldr	r3, [pc, #244]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800ea40:	2200      	movs	r2, #0
 800ea42:	709a      	strb	r2, [r3, #2]
        }
      }
       
      break;
 800ea44:	e052      	b.n	800eaec <GenericModelServer_ProcessMessageCb+0x22c>
        Delta Level 4 The Delta change of the Generic Level state 
        TID 1 Transaction Identifier 
        Transition Time 1 Format as defined in Section 3.1.3. (Optional) 
        Delay 1 Message execution delay in 5 milliseconds steps (C.1)
      */
      Generic_Delta_Set(pRxData,dataLength, pmsgParam);   
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	6839      	ldr	r1, [r7, #0]
 800ea4a:	6878      	ldr	r0, [r7, #4]
 800ea4c:	f7ff faea 	bl	800e024 <Generic_Delta_Set>
      Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_LEVEL_SERVER_MODEL_ID;
 800ea50:	4b35      	ldr	r3, [pc, #212]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea52:	f241 0202 	movw	r2, #4098	; 0x1002
 800ea56:	805a      	strh	r2, [r3, #2]
      Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ea58:	4a33      	ldr	r2, [pc, #204]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ea5a:	897b      	ldrh	r3, [r7, #10]
 800ea5c:	8013      	strh	r3, [r2, #0]
      modelStateChangeFlag = MOBLE_TRUE;
 800ea5e:	2301      	movs	r3, #1
 800ea60:	75bb      	strb	r3, [r7, #22]
      Publication1SecFlag.count = 0;
 800ea62:	4b34      	ldr	r3, [pc, #208]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800ea64:	2200      	movs	r2, #0
 800ea66:	709a      	strb	r2, [r3, #2]
      break;
 800ea68:	e045      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      
    case GENERIC_MOVE_SET:
    case GENERIC_MOVE_SET_UNACK:
    {    
       
      result = Chk_ParamMinMaxIntValidity(INT16_MIN ,pRxData , INT16_MAX );       
 800ea6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ea6e:	6879      	ldr	r1, [r7, #4]
 800ea70:	4831      	ldr	r0, [pc, #196]	; (800eb38 <GenericModelServer_ProcessMessageCb+0x278>)
 800ea72:	f7fe fd03 	bl	800d47c <Chk_ParamMinMaxIntValidity>
 800ea76:	4603      	mov	r3, r0
 800ea78:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800ea7a:	7dfb      	ldrb	r3, [r7, #23]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d137      	bne.n	800eaf0 <GenericModelServer_ProcessMessageCb+0x230>
      {
        if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 800ea80:	68fb      	ldr	r3, [r7, #12]
 800ea82:	8898      	ldrh	r0, [r3, #4]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	88d9      	ldrh	r1, [r3, #6]
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3302      	adds	r3, #2
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	461a      	mov	r2, r3
 800ea90:	f7fe ff26 	bl	800d8e0 <Chk_TidValidity>
 800ea94:	4603      	mov	r3, r0
 800ea96:	75fb      	strb	r3, [r7, #23]
 800ea98:	7dfb      	ldrb	r3, [r7, #23]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d828      	bhi.n	800eaf0 <GenericModelServer_ProcessMessageCb+0x230>
                                                  pmsgParam->dst_peer,
                                                  pRxData[2])))
        {
          Generic_Move_Set(pRxData, dataLength, pmsgParam);  
 800ea9e:	68fa      	ldr	r2, [r7, #12]
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f7ff fc8e 	bl	800e3c4 <Generic_Move_Set>
        }
      }
      break;
 800eaa8:	e022      	b.n	800eaf0 <GenericModelServer_ProcessMessageCb+0x230>
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    case GENERIC_POWER_ON_OFF_SET: 
    case GENERIC_POWER_ON_OFF_SET_UNACK:
    {
      result = Chk_ParamValidity(pRxData[0], GENERIC_POWER_RESTORE_STATE); 
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	2102      	movs	r1, #2
 800eab0:	4618      	mov	r0, r3
 800eab2:	f7fe fc77 	bl	800d3a4 <Chk_ParamValidity>
 800eab6:	4603      	mov	r3, r0
 800eab8:	75fb      	strb	r3, [r7, #23]
      if(result == MOBLE_RESULT_SUCCESS)
 800eaba:	7dfb      	ldrb	r3, [r7, #23]
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d119      	bne.n	800eaf4 <GenericModelServer_ProcessMessageCb+0x234>
      {
        Generic_PowerOnOff_Set(pRxData, dataLength, pmsgParam); 
 800eac0:	68fa      	ldr	r2, [r7, #12]
 800eac2:	6839      	ldr	r1, [r7, #0]
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f7ff fe3b 	bl	800e740 <Generic_PowerOnOff_Set>
        Model_Binding_Var.Model_ID = (MOBLEUINT16)GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 800eaca:	4b17      	ldr	r3, [pc, #92]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800eacc:	f241 0206 	movw	r2, #4102	; 0x1006
 800ead0:	805a      	strh	r2, [r3, #2]
        Model_Binding_Var.Model_Rx_Opcode = opcode;
 800ead2:	4a15      	ldr	r2, [pc, #84]	; (800eb28 <GenericModelServer_ProcessMessageCb+0x268>)
 800ead4:	897b      	ldrh	r3, [r7, #10]
 800ead6:	8013      	strh	r3, [r2, #0]
        modelStateChangeFlag = MOBLE_TRUE;
 800ead8:	2301      	movs	r3, #1
 800eada:	75bb      	strb	r3, [r7, #22]
        Publication1SecFlag.count = 0;
 800eadc:	4b15      	ldr	r3, [pc, #84]	; (800eb34 <GenericModelServer_ProcessMessageCb+0x274>)
 800eade:	2200      	movs	r2, #0
 800eae0:	709a      	strb	r2, [r3, #2]
      }
      break;
 800eae2:	e007      	b.n	800eaf4 <GenericModelServer_ProcessMessageCb+0x234>
  
#endif    
    
    default:
    {
      break;
 800eae4:	bf00      	nop
 800eae6:	e006      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eae8:	bf00      	nop
 800eaea:	e004      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eaec:	bf00      	nop
 800eaee:	e002      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eaf0:	bf00      	nop
 800eaf2:	e000      	b.n	800eaf6 <GenericModelServer_ProcessMessageCb+0x236>
      break;
 800eaf4:	bf00      	nop
    }          
  } /* Switch ends */
          
  if((result == MOBLE_RESULT_SUCCESS) && (response == MOBLE_TRUE))
 800eaf6:	7dfb      	ldrb	r3, [r7, #23]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d12b      	bne.n	800eb54 <GenericModelServer_ProcessMessageCb+0x294>
 800eafc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800eb00:	2b01      	cmp	r3, #1
 800eb02:	d127      	bne.n	800eb54 <GenericModelServer_ProcessMessageCb+0x294>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800eb04:	68fb      	ldr	r3, [r7, #12]
 800eb06:	88db      	ldrh	r3, [r3, #6]
 800eb08:	b21b      	sxth	r3, r3
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	dd16      	ble.n	800eb3c <GenericModelServer_ProcessMessageCb+0x27c>
 800eb0e:	68fb      	ldr	r3, [r7, #12]
 800eb10:	88db      	ldrh	r3, [r3, #6]
 800eb12:	b21b      	sxth	r3, r3
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	db11      	blt.n	800eb3c <GenericModelServer_ProcessMessageCb+0x27c>
    {
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800eb18:	8979      	ldrh	r1, [r7, #10]
 800eb1a:	683b      	ldr	r3, [r7, #0]
 800eb1c:	687a      	ldr	r2, [r7, #4]
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f019 fcd0 	bl	80284c4 <Model_SendResponse>
 800eb24:	e016      	b.n	800eb54 <GenericModelServer_ProcessMessageCb+0x294>
 800eb26:	bf00      	nop
 800eb28:	2000455c 	.word	0x2000455c
 800eb2c:	08032ff0 	.word	0x08032ff0
 800eb30:	0802f1b4 	.word	0x0802f1b4
 800eb34:	200045b8 	.word	0x200045b8
 800eb38:	ffff8000 	.word	0xffff8000
    }
    else
    {

      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800eb3c:	f00e fab4 	bl	801d0a8 <BLEMesh_GetAddress>
 800eb40:	4603      	mov	r3, r0
 800eb42:	461a      	mov	r2, r3
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800eb48:	8979      	ldrh	r1, [r7, #10]
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	687a      	ldr	r2, [r7, #4]
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	f019 fcb8 	bl	80284c4 <Model_SendResponse>
     Publish the status to publish address if the publication is set by client 
     publication is independent of the response of the message.if thek condition 
     for publication is full filled as per specification then the status will be 
     published.
  */
  publishAddress = BLEMesh_GetPublishAddress(pmsgParam->elementIndex, Model_Binding_Var.Model_ID);
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	781b      	ldrb	r3, [r3, #0]
 800eb58:	4a1f      	ldr	r2, [pc, #124]	; (800ebd8 <GenericModelServer_ProcessMessageCb+0x318>)
 800eb5a:	8852      	ldrh	r2, [r2, #2]
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f00e fab2 	bl	801d0c8 <BLEMesh_GetPublishAddress>
 800eb64:	4603      	mov	r3, r0
 800eb66:	82bb      	strh	r3, [r7, #20]
    
  if((result == MOBLE_RESULT_SUCCESS) && 
 800eb68:	7dfb      	ldrb	r3, [r7, #23]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d12f      	bne.n	800ebce <GenericModelServer_ProcessMessageCb+0x30e>
 800eb6e:	8abb      	ldrh	r3, [r7, #20]
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d02c      	beq.n	800ebce <GenericModelServer_ProcessMessageCb+0x30e>
     (publishAddress != 0x0000) && 
 800eb74:	7dbb      	ldrb	r3, [r7, #22]
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d129      	bne.n	800ebce <GenericModelServer_ProcessMessageCb+0x30e>
       (modelStateChangeFlag == MOBLE_TRUE))
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 800eb7a:	68fb      	ldr	r3, [r7, #12]
 800eb7c:	88db      	ldrh	r3, [r3, #6]
 800eb7e:	b21b      	sxth	r3, r3
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	dd0e      	ble.n	800eba2 <GenericModelServer_ProcessMessageCb+0x2e2>
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	88db      	ldrh	r3, [r3, #6]
 800eb88:	b21b      	sxth	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	db09      	blt.n	800eba2 <GenericModelServer_ProcessMessageCb+0x2e2>
    {
      pmsgParam->peer_addr = publishAddress;
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	8aba      	ldrh	r2, [r7, #20]
 800eb92:	809a      	strh	r2, [r3, #4]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800eb94:	8979      	ldrh	r1, [r7, #10]
 800eb96:	683b      	ldr	r3, [r7, #0]
 800eb98:	687a      	ldr	r2, [r7, #4]
 800eb9a:	68f8      	ldr	r0, [r7, #12]
 800eb9c:	f019 fc92 	bl	80284c4 <Model_SendResponse>
 800eba0:	e00e      	b.n	800ebc0 <GenericModelServer_ProcessMessageCb+0x300>
    }
        else
    {

      pmsgParam->peer_addr = publishAddress;
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	8aba      	ldrh	r2, [r7, #20]
 800eba6:	809a      	strh	r2, [r3, #4]
      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 800eba8:	f00e fa7e 	bl	801d0a8 <BLEMesh_GetAddress>
 800ebac:	4603      	mov	r3, r0
 800ebae:	461a      	mov	r2, r3
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 800ebb4:	8979      	ldrh	r1, [r7, #10]
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	687a      	ldr	r2, [r7, #4]
 800ebba:	68f8      	ldr	r0, [r7, #12]
 800ebbc:	f019 fc82 	bl	80284c4 <Model_SendResponse>
    }
                
      modelStateChangeFlag = MOBLE_FALSE;   
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	75bb      	strb	r3, [r7, #22]
      TRACE_I(TF_GENERIC_M,"Publishing state when change to the address %.2X \r\n",publishAddress);
 800ebc4:	8abb      	ldrh	r3, [r7, #20]
 800ebc6:	4619      	mov	r1, r3
 800ebc8:	4804      	ldr	r0, [pc, #16]	; (800ebdc <GenericModelServer_ProcessMessageCb+0x31c>)
 800ebca:	f01a fcd5 	bl	8029578 <iprintf>
  }
  return MOBLE_RESULT_SUCCESS;
 800ebce:	2300      	movs	r3, #0
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	371c      	adds	r7, #28
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd90      	pop	{r4, r7, pc}
 800ebd8:	2000455c 	.word	0x2000455c
 800ebdc:	0802f200 	.word	0x0802f200

0800ebe0 <Generic_TransitionBehaviour>:
*                     is elementNumber-1
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Generic_TransitionBehaviour(MOBLEUINT8 *GetValue, 
                                         MOBLEUINT8 elementIndex)
{
 800ebe0:	b5b0      	push	{r4, r5, r7, lr}
 800ebe2:	b086      	sub	sp, #24
 800ebe4:	af02      	add	r7, sp, #8
 800ebe6:	6078      	str	r0, [r7, #4]
 800ebe8:	460b      	mov	r3, r1
 800ebea:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT32 Check_time;
  MOBLEUINT16 targetRange;
  MOBLEUINT16 targetSlot;
  
  /* Taking the time stamp for particular time */
  if(Clockflag == 0)
 800ebec:	4b5e      	ldr	r3, [pc, #376]	; (800ed68 <Generic_TransitionBehaviour+0x188>)
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d107      	bne.n	800ec04 <Generic_TransitionBehaviour+0x24>
  {
    Check_time = Clock_Time();
 800ebf4:	f7f9 f936 	bl	8007e64 <HAL_GetTick>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	4a5c      	ldr	r2, [pc, #368]	; (800ed6c <Generic_TransitionBehaviour+0x18c>)
 800ebfc:	6013      	str	r3, [r2, #0]
    Clockflag = 1;
 800ebfe:	4b5a      	ldr	r3, [pc, #360]	; (800ed68 <Generic_TransitionBehaviour+0x188>)
 800ec00:	2201      	movs	r2, #1
 800ec02:	701a      	strb	r2, [r3, #0]
  }
  
  /* Publication after 1 second if total transition time is greater than 2 sec.*/
  if(Generic_TimeParam[elementIndex].TotalTime >2000)
 800ec04:	78fa      	ldrb	r2, [r7, #3]
 800ec06:	495a      	ldr	r1, [pc, #360]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ec08:	4613      	mov	r3, r2
 800ec0a:	009b      	lsls	r3, r3, #2
 800ec0c:	4413      	add	r3, r2
 800ec0e:	005b      	lsls	r3, r3, #1
 800ec10:	440b      	add	r3, r1
 800ec12:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800ec16:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800ec1a:	d901      	bls.n	800ec20 <Generic_TransitionBehaviour+0x40>
  {
    Punblication_OneSecTimer();
 800ec1c:	f002 ffd6 	bl	8011bcc <Punblication_OneSecTimer>
  }
  /* Values from application are copied into Temporary variables for processing */
  
  Generic_TemporaryStatus[elementIndex].PresentValue16  = GetValue[1] << 8;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	3301      	adds	r3, #1
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	021b      	lsls	r3, r3, #8
 800ec28:	78fa      	ldrb	r2, [r7, #3]
 800ec2a:	b218      	sxth	r0, r3
 800ec2c:	4951      	ldr	r1, [pc, #324]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ec2e:	4613      	mov	r3, r2
 800ec30:	009b      	lsls	r3, r3, #2
 800ec32:	4413      	add	r3, r2
 800ec34:	440b      	add	r3, r1
 800ec36:	4602      	mov	r2, r0
 800ec38:	f8a3 2001 	strh.w	r2, [r3, #1]
  Generic_TemporaryStatus[elementIndex].PresentValue16 |= GetValue[0];
 800ec3c:	78fa      	ldrb	r2, [r7, #3]
 800ec3e:	494d      	ldr	r1, [pc, #308]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ec40:	4613      	mov	r3, r2
 800ec42:	009b      	lsls	r3, r3, #2
 800ec44:	4413      	add	r3, r2
 800ec46:	440b      	add	r3, r1
 800ec48:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ec4c:	b219      	sxth	r1, r3
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	781b      	ldrb	r3, [r3, #0]
 800ec52:	b21b      	sxth	r3, r3
 800ec54:	78fa      	ldrb	r2, [r7, #3]
 800ec56:	430b      	orrs	r3, r1
 800ec58:	b218      	sxth	r0, r3
 800ec5a:	4946      	ldr	r1, [pc, #280]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ec5c:	4613      	mov	r3, r2
 800ec5e:	009b      	lsls	r3, r3, #2
 800ec60:	4413      	add	r3, r2
 800ec62:	440b      	add	r3, r1
 800ec64:	4602      	mov	r2, r0
 800ec66:	f8a3 2001 	strh.w	r2, [r3, #1]
  /* if condition to wait until the time is equal to the given resolution time */
  if(((Clock_Time()- Check_time) >= Generic_TimeParam[elementIndex].Res_Value))
 800ec6a:	f7f9 f8fb 	bl	8007e64 <HAL_GetTick>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	4b3e      	ldr	r3, [pc, #248]	; (800ed6c <Generic_TransitionBehaviour+0x18c>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	1ad1      	subs	r1, r2, r3
 800ec76:	78fa      	ldrb	r2, [r7, #3]
 800ec78:	483d      	ldr	r0, [pc, #244]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	009b      	lsls	r3, r3, #2
 800ec7e:	4413      	add	r3, r2
 800ec80:	005b      	lsls	r3, r3, #1
 800ec82:	4403      	add	r3, r0
 800ec84:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800ec88:	4299      	cmp	r1, r3
 800ec8a:	f0c0 8171 	bcc.w	800ef70 <Generic_TransitionBehaviour+0x390>
  {     
    if(Generic_TimeParam[elementIndex].StepValue == 0)
 800ec8e:	78fa      	ldrb	r2, [r7, #3]
 800ec90:	4937      	ldr	r1, [pc, #220]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ec92:	4613      	mov	r3, r2
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4413      	add	r3, r2
 800ec98:	005b      	lsls	r3, r3, #1
 800ec9a:	440b      	add	r3, r1
 800ec9c:	f993 3000 	ldrsb.w	r3, [r3]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d108      	bne.n	800ecb6 <Generic_TransitionBehaviour+0xd6>
    {
      Generic_TimeParam[elementIndex].StepValue = 1;
 800eca4:	78fa      	ldrb	r2, [r7, #3]
 800eca6:	4932      	ldr	r1, [pc, #200]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800eca8:	4613      	mov	r3, r2
 800ecaa:	009b      	lsls	r3, r3, #2
 800ecac:	4413      	add	r3, r2
 800ecae:	005b      	lsls	r3, r3, #1
 800ecb0:	440b      	add	r3, r1
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	701a      	strb	r2, [r3, #0]
    }

    if(Generic_TemporaryStatus[elementIndex].TargetValue16 > Generic_TemporaryStatus[elementIndex].PresentValue16)
 800ecb6:	78fa      	ldrb	r2, [r7, #3]
 800ecb8:	492e      	ldr	r1, [pc, #184]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ecba:	4613      	mov	r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4413      	add	r3, r2
 800ecc0:	440b      	add	r3, r1
 800ecc2:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ecc6:	b219      	sxth	r1, r3
 800ecc8:	78fa      	ldrb	r2, [r7, #3]
 800ecca:	482a      	ldr	r0, [pc, #168]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800eccc:	4613      	mov	r3, r2
 800ecce:	009b      	lsls	r3, r3, #2
 800ecd0:	4413      	add	r3, r2
 800ecd2:	4403      	add	r3, r0
 800ecd4:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ecd8:	b21b      	sxth	r3, r3
 800ecda:	4299      	cmp	r1, r3
 800ecdc:	dd4e      	ble.n	800ed7c <Generic_TransitionBehaviour+0x19c>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 1;
 800ecde:	78fa      	ldrb	r2, [r7, #3]
 800ece0:	4925      	ldr	r1, [pc, #148]	; (800ed78 <Generic_TransitionBehaviour+0x198>)
 800ece2:	4613      	mov	r3, r2
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	4413      	add	r3, r2
 800ece8:	005b      	lsls	r3, r3, #1
 800ecea:	440b      	add	r3, r1
 800ecec:	2201      	movs	r2, #1
 800ecee:	701a      	strb	r2, [r3, #0]
      /* target range = total range to be covered */
      targetRange = 
        Generic_TemporaryStatus[elementIndex].TargetValue16 - Generic_TemporaryStatus[elementIndex].PresentValue16;
 800ecf0:	78fa      	ldrb	r2, [r7, #3]
 800ecf2:	4920      	ldr	r1, [pc, #128]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ecf4:	4613      	mov	r3, r2
 800ecf6:	009b      	lsls	r3, r3, #2
 800ecf8:	4413      	add	r3, r2
 800ecfa:	440b      	add	r3, r1
 800ecfc:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ed00:	b21b      	sxth	r3, r3
 800ed02:	b299      	uxth	r1, r3
 800ed04:	78fa      	ldrb	r2, [r7, #3]
 800ed06:	481b      	ldr	r0, [pc, #108]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ed08:	4613      	mov	r3, r2
 800ed0a:	009b      	lsls	r3, r3, #2
 800ed0c:	4413      	add	r3, r2
 800ed0e:	4403      	add	r3, r0
 800ed10:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ed14:	b21b      	sxth	r3, r3
 800ed16:	b29b      	uxth	r3, r3
      targetRange = 
 800ed18:	1acb      	subs	r3, r1, r3
 800ed1a:	81fb      	strh	r3, [r7, #14]
      
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800ed1c:	89f9      	ldrh	r1, [r7, #14]
 800ed1e:	78fa      	ldrb	r2, [r7, #3]
 800ed20:	4813      	ldr	r0, [pc, #76]	; (800ed70 <Generic_TransitionBehaviour+0x190>)
 800ed22:	4613      	mov	r3, r2
 800ed24:	009b      	lsls	r3, r3, #2
 800ed26:	4413      	add	r3, r2
 800ed28:	005b      	lsls	r3, r3, #1
 800ed2a:	4403      	add	r3, r0
 800ed2c:	f993 3000 	ldrsb.w	r3, [r3]
 800ed30:	fb91 f3f3 	sdiv	r3, r1, r3
 800ed34:	81bb      	strh	r3, [r7, #12]
      /* target slot added to present value to achieve target value */
      Generic_TemporaryStatus[elementIndex].PresentValue16 += targetSlot;      
 800ed36:	78fa      	ldrb	r2, [r7, #3]
 800ed38:	490e      	ldr	r1, [pc, #56]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	440b      	add	r3, r1
 800ed42:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ed46:	b21b      	sxth	r3, r3
 800ed48:	b29a      	uxth	r2, r3
 800ed4a:	89bb      	ldrh	r3, [r7, #12]
 800ed4c:	4413      	add	r3, r2
 800ed4e:	b29b      	uxth	r3, r3
 800ed50:	78fa      	ldrb	r2, [r7, #3]
 800ed52:	b218      	sxth	r0, r3
 800ed54:	4907      	ldr	r1, [pc, #28]	; (800ed74 <Generic_TransitionBehaviour+0x194>)
 800ed56:	4613      	mov	r3, r2
 800ed58:	009b      	lsls	r3, r3, #2
 800ed5a:	4413      	add	r3, r2
 800ed5c:	440b      	add	r3, r1
 800ed5e:	4602      	mov	r2, r0
 800ed60:	f8a3 2001 	strh.w	r2, [r3, #1]
 800ed64:	e061      	b.n	800ee2a <Generic_TransitionBehaviour+0x24a>
 800ed66:	bf00      	nop
 800ed68:	200045a1 	.word	0x200045a1
 800ed6c:	200045a4 	.word	0x200045a4
 800ed70:	2000457c 	.word	0x2000457c
 800ed74:	20004574 	.word	0x20004574
 800ed78:	20004594 	.word	0x20004594
    }              
    else if(Generic_TemporaryStatus[elementIndex].TargetValue16 < Generic_TemporaryStatus[elementIndex].PresentValue16)
 800ed7c:	78fa      	ldrb	r2, [r7, #3]
 800ed7e:	497f      	ldr	r1, [pc, #508]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ed80:	4613      	mov	r3, r2
 800ed82:	009b      	lsls	r3, r3, #2
 800ed84:	4413      	add	r3, r2
 800ed86:	440b      	add	r3, r1
 800ed88:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ed8c:	b219      	sxth	r1, r3
 800ed8e:	78fa      	ldrb	r2, [r7, #3]
 800ed90:	487a      	ldr	r0, [pc, #488]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ed92:	4613      	mov	r3, r2
 800ed94:	009b      	lsls	r3, r3, #2
 800ed96:	4413      	add	r3, r2
 800ed98:	4403      	add	r3, r0
 800ed9a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ed9e:	b21b      	sxth	r3, r3
 800eda0:	4299      	cmp	r1, r3
 800eda2:	da42      	bge.n	800ee2a <Generic_TransitionBehaviour+0x24a>
    {  
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0;
 800eda4:	78fa      	ldrb	r2, [r7, #3]
 800eda6:	4976      	ldr	r1, [pc, #472]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eda8:	4613      	mov	r3, r2
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	4413      	add	r3, r2
 800edae:	005b      	lsls	r3, r3, #1
 800edb0:	440b      	add	r3, r1
 800edb2:	2200      	movs	r2, #0
 800edb4:	701a      	strb	r2, [r3, #0]
      /* condition execute when transition is negative */
      /* target range = total range to be covered */ 
      targetRange = Generic_TemporaryStatus[elementIndex].PresentValue16 - Generic_TemporaryStatus[elementIndex].TargetValue16;
 800edb6:	78fa      	ldrb	r2, [r7, #3]
 800edb8:	4970      	ldr	r1, [pc, #448]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800edba:	4613      	mov	r3, r2
 800edbc:	009b      	lsls	r3, r3, #2
 800edbe:	4413      	add	r3, r2
 800edc0:	440b      	add	r3, r1
 800edc2:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800edc6:	b21b      	sxth	r3, r3
 800edc8:	b299      	uxth	r1, r3
 800edca:	78fa      	ldrb	r2, [r7, #3]
 800edcc:	486b      	ldr	r0, [pc, #428]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800edce:	4613      	mov	r3, r2
 800edd0:	009b      	lsls	r3, r3, #2
 800edd2:	4413      	add	r3, r2
 800edd4:	4403      	add	r3, r0
 800edd6:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800edda:	b21b      	sxth	r3, r3
 800eddc:	b29b      	uxth	r3, r3
 800edde:	1acb      	subs	r3, r1, r3
 800ede0:	81fb      	strh	r3, [r7, #14]
      /* target slot = time to cover in single step */
      targetSlot = targetRange / Generic_TimeParam[elementIndex].StepValue;
 800ede2:	89f9      	ldrh	r1, [r7, #14]
 800ede4:	78fa      	ldrb	r2, [r7, #3]
 800ede6:	4867      	ldr	r0, [pc, #412]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ede8:	4613      	mov	r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4413      	add	r3, r2
 800edee:	005b      	lsls	r3, r3, #1
 800edf0:	4403      	add	r3, r0
 800edf2:	f993 3000 	ldrsb.w	r3, [r3]
 800edf6:	fb91 f3f3 	sdiv	r3, r1, r3
 800edfa:	81bb      	strh	r3, [r7, #12]
      /* target slot = time to cover in single step */
      Generic_TemporaryStatus[elementIndex].PresentValue16 -= targetSlot; 
 800edfc:	78fa      	ldrb	r2, [r7, #3]
 800edfe:	495f      	ldr	r1, [pc, #380]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ee00:	4613      	mov	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	440b      	add	r3, r1
 800ee08:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ee0c:	b21b      	sxth	r3, r3
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	89bb      	ldrh	r3, [r7, #12]
 800ee12:	1ad3      	subs	r3, r2, r3
 800ee14:	b29b      	uxth	r3, r3
 800ee16:	78fa      	ldrb	r2, [r7, #3]
 800ee18:	b218      	sxth	r0, r3
 800ee1a:	4958      	ldr	r1, [pc, #352]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ee1c:	4613      	mov	r3, r2
 800ee1e:	009b      	lsls	r3, r3, #2
 800ee20:	4413      	add	r3, r2
 800ee22:	440b      	add	r3, r1
 800ee24:	4602      	mov	r2, r0
 800ee26:	f8a3 2001 	strh.w	r2, [r3, #1]
    }     
    else
    {
      
    }
    Generic_TimeParam[elementIndex].StepValue--;
 800ee2a:	78fa      	ldrb	r2, [r7, #3]
 800ee2c:	4955      	ldr	r1, [pc, #340]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee2e:	4613      	mov	r3, r2
 800ee30:	009b      	lsls	r3, r3, #2
 800ee32:	4413      	add	r3, r2
 800ee34:	005b      	lsls	r3, r3, #1
 800ee36:	440b      	add	r3, r1
 800ee38:	f993 3000 	ldrsb.w	r3, [r3]
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	3b01      	subs	r3, #1
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	b258      	sxtb	r0, r3
 800ee44:	494f      	ldr	r1, [pc, #316]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee46:	4613      	mov	r3, r2
 800ee48:	009b      	lsls	r3, r3, #2
 800ee4a:	4413      	add	r3, r2
 800ee4c:	005b      	lsls	r3, r3, #1
 800ee4e:	440b      	add	r3, r1
 800ee50:	4602      	mov	r2, r0
 800ee52:	701a      	strb	r2, [r3, #0]
    /* updating the remaining time after each step covered*/
    Generic_TemporaryStatus[elementIndex].RemainingTime = Generic_TimeParam[elementIndex].StepValue | (Generic_TimeParam[elementIndex].ResBitValue << 6) ;
 800ee54:	78fa      	ldrb	r2, [r7, #3]
 800ee56:	494b      	ldr	r1, [pc, #300]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee58:	4613      	mov	r3, r2
 800ee5a:	009b      	lsls	r3, r3, #2
 800ee5c:	4413      	add	r3, r2
 800ee5e:	005b      	lsls	r3, r3, #1
 800ee60:	440b      	add	r3, r1
 800ee62:	f993 1000 	ldrsb.w	r1, [r3]
 800ee66:	78fa      	ldrb	r2, [r7, #3]
 800ee68:	4846      	ldr	r0, [pc, #280]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800ee6a:	4613      	mov	r3, r2
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	4413      	add	r3, r2
 800ee70:	005b      	lsls	r3, r3, #1
 800ee72:	4403      	add	r3, r0
 800ee74:	3301      	adds	r3, #1
 800ee76:	781b      	ldrb	r3, [r3, #0]
 800ee78:	019b      	lsls	r3, r3, #6
 800ee7a:	b25b      	sxtb	r3, r3
 800ee7c:	430b      	orrs	r3, r1
 800ee7e:	b25b      	sxtb	r3, r3
 800ee80:	78fa      	ldrb	r2, [r7, #3]
 800ee82:	b2d8      	uxtb	r0, r3
 800ee84:	493d      	ldr	r1, [pc, #244]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ee86:	4613      	mov	r3, r2
 800ee88:	009b      	lsls	r3, r3, #2
 800ee8a:	4413      	add	r3, r2
 800ee8c:	440b      	add	r3, r1
 800ee8e:	4602      	mov	r2, r0
 800ee90:	701a      	strb	r2, [r3, #0]
   
    Check_time = 0;
 800ee92:	4b3d      	ldr	r3, [pc, #244]	; (800ef88 <Generic_TransitionBehaviour+0x3a8>)
 800ee94:	2200      	movs	r2, #0
 800ee96:	601a      	str	r2, [r3, #0]
    Clockflag = 0;
 800ee98:	4b3c      	ldr	r3, [pc, #240]	; (800ef8c <Generic_TransitionBehaviour+0x3ac>)
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	701a      	strb	r2, [r3, #0]
    GenericUpdateFlag = VALUE_UPDATE_SET;
 800ee9e:	4b3c      	ldr	r3, [pc, #240]	; (800ef90 <Generic_TransitionBehaviour+0x3b0>)
 800eea0:	2201      	movs	r2, #1
 800eea2:	701a      	strb	r2, [r3, #0]
    /* when transition is completed, disable the transition by disabling 
       transition flag
    */
    if(Generic_TimeParam[elementIndex].StepValue <= 0)
 800eea4:	78fa      	ldrb	r2, [r7, #3]
 800eea6:	4937      	ldr	r1, [pc, #220]	; (800ef84 <Generic_TransitionBehaviour+0x3a4>)
 800eea8:	4613      	mov	r3, r2
 800eeaa:	009b      	lsls	r3, r3, #2
 800eeac:	4413      	add	r3, r2
 800eeae:	005b      	lsls	r3, r3, #1
 800eeb0:	440b      	add	r3, r1
 800eeb2:	f993 3000 	ldrsb.w	r3, [r3]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	dc32      	bgt.n	800ef20 <Generic_TransitionBehaviour+0x340>
    {
      if((Generic_OnOffStatus[elementIndex].Present_OnOff_State == 1) && (Generic_OnOffStatus[elementIndex].Target_OnOff == 0))
 800eeba:	78fa      	ldrb	r2, [r7, #3]
 800eebc:	4930      	ldr	r1, [pc, #192]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eebe:	4613      	mov	r3, r2
 800eec0:	005b      	lsls	r3, r3, #1
 800eec2:	4413      	add	r3, r2
 800eec4:	005b      	lsls	r3, r3, #1
 800eec6:	440b      	add	r3, r1
 800eec8:	781b      	ldrb	r3, [r3, #0]
 800eeca:	2b01      	cmp	r3, #1
 800eecc:	d114      	bne.n	800eef8 <Generic_TransitionBehaviour+0x318>
 800eece:	78fa      	ldrb	r2, [r7, #3]
 800eed0:	492b      	ldr	r1, [pc, #172]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eed2:	4613      	mov	r3, r2
 800eed4:	005b      	lsls	r3, r3, #1
 800eed6:	4413      	add	r3, r2
 800eed8:	005b      	lsls	r3, r3, #1
 800eeda:	440b      	add	r3, r1
 800eedc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800eee0:	b29b      	uxth	r3, r3
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d108      	bne.n	800eef8 <Generic_TransitionBehaviour+0x318>
      {
        Generic_OnOffStatus[elementIndex].Present_OnOff_State=0;
 800eee6:	78fa      	ldrb	r2, [r7, #3]
 800eee8:	4925      	ldr	r1, [pc, #148]	; (800ef80 <Generic_TransitionBehaviour+0x3a0>)
 800eeea:	4613      	mov	r3, r2
 800eeec:	005b      	lsls	r3, r3, #1
 800eeee:	4413      	add	r3, r2
 800eef0:	005b      	lsls	r3, r3, #1
 800eef2:	440b      	add	r3, r1
 800eef4:	2200      	movs	r2, #0
 800eef6:	701a      	strb	r2, [r3, #0]
      }
      Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP; 
 800eef8:	78fa      	ldrb	r2, [r7, #3]
 800eefa:	4926      	ldr	r1, [pc, #152]	; (800ef94 <Generic_TransitionBehaviour+0x3b4>)
 800eefc:	4613      	mov	r3, r2
 800eefe:	005b      	lsls	r3, r3, #1
 800ef00:	4413      	add	r3, r2
 800ef02:	440b      	add	r3, r1
 800ef04:	2200      	movs	r2, #0
 800ef06:	701a      	strb	r2, [r3, #0]
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_TRUE;
 800ef08:	78fa      	ldrb	r2, [r7, #3]
 800ef0a:	4922      	ldr	r1, [pc, #136]	; (800ef94 <Generic_TransitionBehaviour+0x3b4>)
 800ef0c:	4613      	mov	r3, r2
 800ef0e:	005b      	lsls	r3, r3, #1
 800ef10:	4413      	add	r3, r2
 800ef12:	440b      	add	r3, r1
 800ef14:	3302      	adds	r3, #2
 800ef16:	2201      	movs	r2, #1
 800ef18:	701a      	strb	r2, [r3, #0]
      Publication1SecFlag.TimeStampFlag = MOBLE_FALSE;  
 800ef1a:	4b1f      	ldr	r3, [pc, #124]	; (800ef98 <Generic_TransitionBehaviour+0x3b8>)
 800ef1c:	2200      	movs	r2, #0
 800ef1e:	705a      	strb	r2, [r3, #1]
    }
    TRACE_M(TF_GENERIC_M, "Inside virtual application at %ld, Current state 0x%.2x, Target state 0x%.2x, Remaining Time 0x%.2x \n\r",
 800ef20:	2100      	movs	r1, #0
 800ef22:	481e      	ldr	r0, [pc, #120]	; (800ef9c <Generic_TransitionBehaviour+0x3bc>)
 800ef24:	f7fe fb24 	bl	800d570 <TraceHeader>
 800ef28:	f7f8 ff9c 	bl	8007e64 <HAL_GetTick>
 800ef2c:	4601      	mov	r1, r0
 800ef2e:	78fa      	ldrb	r2, [r7, #3]
 800ef30:	4812      	ldr	r0, [pc, #72]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ef32:	4613      	mov	r3, r2
 800ef34:	009b      	lsls	r3, r3, #2
 800ef36:	4413      	add	r3, r2
 800ef38:	4403      	add	r3, r0
 800ef3a:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800ef3e:	b21b      	sxth	r3, r3
 800ef40:	461c      	mov	r4, r3
 800ef42:	78fa      	ldrb	r2, [r7, #3]
 800ef44:	480d      	ldr	r0, [pc, #52]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ef46:	4613      	mov	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4413      	add	r3, r2
 800ef4c:	4403      	add	r3, r0
 800ef4e:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800ef52:	b21b      	sxth	r3, r3
 800ef54:	461d      	mov	r5, r3
 800ef56:	78fa      	ldrb	r2, [r7, #3]
 800ef58:	4808      	ldr	r0, [pc, #32]	; (800ef7c <Generic_TransitionBehaviour+0x39c>)
 800ef5a:	4613      	mov	r3, r2
 800ef5c:	009b      	lsls	r3, r3, #2
 800ef5e:	4413      	add	r3, r2
 800ef60:	4403      	add	r3, r0
 800ef62:	781b      	ldrb	r3, [r3, #0]
 800ef64:	9300      	str	r3, [sp, #0]
 800ef66:	462b      	mov	r3, r5
 800ef68:	4622      	mov	r2, r4
 800ef6a:	480d      	ldr	r0, [pc, #52]	; (800efa0 <Generic_TransitionBehaviour+0x3c0>)
 800ef6c:	f01a fb04 	bl	8029578 <iprintf>
            Clock_Time(), Generic_TemporaryStatus[elementIndex].PresentValue16,Generic_TemporaryStatus[elementIndex].TargetValue16,Generic_TemporaryStatus[elementIndex].RemainingTime);                     
  }
  return MOBLE_RESULT_SUCCESS;       
 800ef70:	2300      	movs	r3, #0

} 
 800ef72:	4618      	mov	r0, r3
 800ef74:	3710      	adds	r7, #16
 800ef76:	46bd      	mov	sp, r7
 800ef78:	bdb0      	pop	{r4, r5, r7, pc}
 800ef7a:	bf00      	nop
 800ef7c:	20004574 	.word	0x20004574
 800ef80:	20004594 	.word	0x20004594
 800ef84:	2000457c 	.word	0x2000457c
 800ef88:	200045a4 	.word	0x200045a4
 800ef8c:	200045a1 	.word	0x200045a1
 800ef90:	2000459f 	.word	0x2000459f
 800ef94:	2000459c 	.word	0x2000459c
 800ef98:	200045b8 	.word	0x200045b8
 800ef9c:	08033014 	.word	0x08033014
 800efa0:	0802f234 	.word	0x0802f234

0800efa4 <Generic_GetStepValue>:
*                     is elementNumber-1
* retval void
*/
void Generic_GetStepValue(MOBLEUINT8 stepParam, 
                          MOBLEUINT8 elementIndex)
{
 800efa4:	b590      	push	{r4, r7, lr}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	4603      	mov	r3, r0
 800efac:	460a      	mov	r2, r1
 800efae:	71fb      	strb	r3, [r7, #7]
 800efb0:	4613      	mov	r3, r2
 800efb2:	71bb      	strb	r3, [r7, #6]
    10 = resolution is 10000 ms.
    11 = resolution is 600000 ms. 
    Last bits from 0 to 5th index is step number.
  */
  
  Generic_TimeParam[elementIndex].ResBitValue = stepParam >> 6 ;
 800efb4:	79ba      	ldrb	r2, [r7, #6]
 800efb6:	79fb      	ldrb	r3, [r7, #7]
 800efb8:	099b      	lsrs	r3, r3, #6
 800efba:	b2d8      	uxtb	r0, r3
 800efbc:	494b      	ldr	r1, [pc, #300]	; (800f0ec <Generic_GetStepValue+0x148>)
 800efbe:	4613      	mov	r3, r2
 800efc0:	009b      	lsls	r3, r3, #2
 800efc2:	4413      	add	r3, r2
 800efc4:	005b      	lsls	r3, r3, #1
 800efc6:	440b      	add	r3, r1
 800efc8:	3301      	adds	r3, #1
 800efca:	4602      	mov	r2, r0
 800efcc:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].Res_Value = Get_StepResolutionValue(Generic_TimeParam[elementIndex].ResBitValue);
 800efce:	79ba      	ldrb	r2, [r7, #6]
 800efd0:	4946      	ldr	r1, [pc, #280]	; (800f0ec <Generic_GetStepValue+0x148>)
 800efd2:	4613      	mov	r3, r2
 800efd4:	009b      	lsls	r3, r3, #2
 800efd6:	4413      	add	r3, r2
 800efd8:	005b      	lsls	r3, r3, #1
 800efda:	440b      	add	r3, r1
 800efdc:	3301      	adds	r3, #1
 800efde:	781b      	ldrb	r3, [r3, #0]
 800efe0:	79bc      	ldrb	r4, [r7, #6]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f7fe fa98 	bl	800d518 <Get_StepResolutionValue>
 800efe8:	4602      	mov	r2, r0
 800efea:	4940      	ldr	r1, [pc, #256]	; (800f0ec <Generic_GetStepValue+0x148>)
 800efec:	4623      	mov	r3, r4
 800efee:	009b      	lsls	r3, r3, #2
 800eff0:	4423      	add	r3, r4
 800eff2:	005b      	lsls	r3, r3, #1
 800eff4:	440b      	add	r3, r1
 800eff6:	f8c3 2002 	str.w	r2, [r3, #2]
  Generic_TimeParam[elementIndex].StepValue = stepParam & 0x3F ;
 800effa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800effe:	79ba      	ldrb	r2, [r7, #6]
 800f000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f004:	b258      	sxtb	r0, r3
 800f006:	4939      	ldr	r1, [pc, #228]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f008:	4613      	mov	r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	4413      	add	r3, r2
 800f00e:	005b      	lsls	r3, r3, #1
 800f010:	440b      	add	r3, r1
 800f012:	4602      	mov	r2, r0
 800f014:	701a      	strb	r2, [r3, #0]
  Generic_TimeParam[elementIndex].TotalTime = (Generic_TimeParam[elementIndex].StepValue * Generic_TimeParam[elementIndex].Res_Value);
 800f016:	79ba      	ldrb	r2, [r7, #6]
 800f018:	4934      	ldr	r1, [pc, #208]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f01a:	4613      	mov	r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	4413      	add	r3, r2
 800f020:	005b      	lsls	r3, r3, #1
 800f022:	440b      	add	r3, r1
 800f024:	f993 3000 	ldrsb.w	r3, [r3]
 800f028:	4618      	mov	r0, r3
 800f02a:	79ba      	ldrb	r2, [r7, #6]
 800f02c:	492f      	ldr	r1, [pc, #188]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f02e:	4613      	mov	r3, r2
 800f030:	009b      	lsls	r3, r3, #2
 800f032:	4413      	add	r3, r2
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	440b      	add	r3, r1
 800f038:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f03c:	79ba      	ldrb	r2, [r7, #6]
 800f03e:	fb03 f100 	mul.w	r1, r3, r0
 800f042:	482a      	ldr	r0, [pc, #168]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f044:	4613      	mov	r3, r2
 800f046:	009b      	lsls	r3, r3, #2
 800f048:	4413      	add	r3, r2
 800f04a:	005b      	lsls	r3, r3, #1
 800f04c:	4403      	add	r3, r0
 800f04e:	f8c3 1006 	str.w	r1, [r3, #6]
  
  if(Generic_TimeParam[elementIndex].Res_Value >= 100)
 800f052:	79ba      	ldrb	r2, [r7, #6]
 800f054:	4925      	ldr	r1, [pc, #148]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f056:	4613      	mov	r3, r2
 800f058:	009b      	lsls	r3, r3, #2
 800f05a:	4413      	add	r3, r2
 800f05c:	005b      	lsls	r3, r3, #1
 800f05e:	440b      	add	r3, r1
 800f060:	f8d3 3002 	ldr.w	r3, [r3, #2]
 800f064:	2b63      	cmp	r3, #99	; 0x63
 800f066:	d923      	bls.n	800f0b0 <Generic_GetStepValue+0x10c>
  {
    Generic_TimeParam[elementIndex].Res_Value = Generic_TimeParam[elementIndex].Res_Value/TRANSITION_SCALER;
 800f068:	79b9      	ldrb	r1, [r7, #6]
 800f06a:	79ba      	ldrb	r2, [r7, #6]
 800f06c:	481f      	ldr	r0, [pc, #124]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f06e:	460b      	mov	r3, r1
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	440b      	add	r3, r1
 800f074:	005b      	lsls	r3, r3, #1
 800f076:	4403      	add	r3, r0
 800f078:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800f07c:	481b      	ldr	r0, [pc, #108]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f07e:	4613      	mov	r3, r2
 800f080:	009b      	lsls	r3, r3, #2
 800f082:	4413      	add	r3, r2
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	4403      	add	r3, r0
 800f088:	f8c3 1002 	str.w	r1, [r3, #2]
    Generic_TimeParam[elementIndex].StepValue = (Generic_TimeParam[elementIndex].StepValue * TRANSITION_SCALER);
 800f08c:	79b9      	ldrb	r1, [r7, #6]
 800f08e:	79ba      	ldrb	r2, [r7, #6]
 800f090:	4816      	ldr	r0, [pc, #88]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f092:	460b      	mov	r3, r1
 800f094:	009b      	lsls	r3, r3, #2
 800f096:	440b      	add	r3, r1
 800f098:	005b      	lsls	r3, r3, #1
 800f09a:	4403      	add	r3, r0
 800f09c:	f993 0000 	ldrsb.w	r0, [r3]
 800f0a0:	4912      	ldr	r1, [pc, #72]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f0a2:	4613      	mov	r3, r2
 800f0a4:	009b      	lsls	r3, r3, #2
 800f0a6:	4413      	add	r3, r2
 800f0a8:	005b      	lsls	r3, r3, #1
 800f0aa:	440b      	add	r3, r1
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	701a      	strb	r2, [r3, #0]
  }
  
  TRACE_M(TF_GENERIC_M," step resolution 0x%.2lx, number of step 0x%.2x \r\n",
 800f0b0:	2100      	movs	r1, #0
 800f0b2:	480f      	ldr	r0, [pc, #60]	; (800f0f0 <Generic_GetStepValue+0x14c>)
 800f0b4:	f7fe fa5c 	bl	800d570 <TraceHeader>
 800f0b8:	79ba      	ldrb	r2, [r7, #6]
 800f0ba:	490c      	ldr	r1, [pc, #48]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f0bc:	4613      	mov	r3, r2
 800f0be:	009b      	lsls	r3, r3, #2
 800f0c0:	4413      	add	r3, r2
 800f0c2:	005b      	lsls	r3, r3, #1
 800f0c4:	440b      	add	r3, r1
 800f0c6:	f8d3 1002 	ldr.w	r1, [r3, #2]
 800f0ca:	79ba      	ldrb	r2, [r7, #6]
 800f0cc:	4807      	ldr	r0, [pc, #28]	; (800f0ec <Generic_GetStepValue+0x148>)
 800f0ce:	4613      	mov	r3, r2
 800f0d0:	009b      	lsls	r3, r3, #2
 800f0d2:	4413      	add	r3, r2
 800f0d4:	005b      	lsls	r3, r3, #1
 800f0d6:	4403      	add	r3, r0
 800f0d8:	f993 3000 	ldrsb.w	r3, [r3]
 800f0dc:	461a      	mov	r2, r3
 800f0de:	4805      	ldr	r0, [pc, #20]	; (800f0f4 <Generic_GetStepValue+0x150>)
 800f0e0:	f01a fa4a 	bl	8029578 <iprintf>
          Generic_TimeParam[elementIndex].Res_Value , Generic_TimeParam[elementIndex].StepValue );   
}
 800f0e4:	bf00      	nop
 800f0e6:	370c      	adds	r7, #12
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd90      	pop	{r4, r7, pc}
 800f0ec:	2000457c 	.word	0x2000457c
 800f0f0:	08033030 	.word	0x08033030
 800f0f4:	0802f29c 	.word	0x0802f29c

0800f0f8 <Generic_Process>:
*         particular Generic Model
* @param  void
* @retval void
*/ 
void Generic_Process(void)
{       
 800f0f8:	b590      	push	{r4, r7, lr}
 800f0fa:	b08d      	sub	sp, #52	; 0x34
 800f0fc:	af02      	add	r7, sp, #8
  MOBLE_ADDRESS publishAddress;
  MOBLE_ADDRESS my_Address = BLEMesh_GetAddress();
 800f0fe:	f00d ffd3 	bl	801d0a8 <BLEMesh_GetAddress>
 800f102:	4603      	mov	r3, r0
 800f104:	84fb      	strh	r3, [r7, #38]	; 0x26
  MOBLEUINT8 elementIndex;
  MOBLEUINT8 const pRxData[8] = {0};
 800f106:	2300      	movs	r3, #0
 800f108:	617b      	str	r3, [r7, #20]
 800f10a:	2300      	movs	r3, #0
 800f10c:	61bb      	str	r3, [r7, #24]
  MOBLEUINT32 dataLength = 0;
 800f10e:	2300      	movs	r3, #0
 800f110:	623b      	str	r3, [r7, #32]
  
#if defined ENABLE_GENERIC_MODEL_SERVER_ONOFF || defined ENABLE_GENERIC_MODEL_SERVER_LEVEL  
  MOBLEUINT8 Generic_GetBuff[8]; 
#endif     
  
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800f112:	2300      	movs	r3, #0
 800f114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f118:	e10a      	b.n	800f330 <Generic_Process+0x238>
  {
    my_Address = my_Address+elementIndex;
 800f11a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f11e:	b29a      	uxth	r2, r3
 800f120:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f122:	4413      	add	r3, r2
 800f124:	84fb      	strh	r3, [r7, #38]	; 0x26
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF   
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_ON_OFF_TRANSITION_START)
 800f126:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f12a:	4986      	ldr	r1, [pc, #536]	; (800f344 <Generic_Process+0x24c>)
 800f12c:	4613      	mov	r3, r2
 800f12e:	005b      	lsls	r3, r3, #1
 800f130:	4413      	add	r3, r2
 800f132:	440b      	add	r3, r1
 800f134:	781b      	ldrb	r3, [r3, #0]
 800f136:	2b01      	cmp	r3, #1
 800f138:	d16e      	bne.n	800f218 <Generic_Process+0x120>
    {   
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetOnOffValue_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800f13a:	4b83      	ldr	r3, [pc, #524]	; (800f348 <Generic_Process+0x250>)
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f142:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800f144:	f107 000c 	add.w	r0, r7, #12
 800f148:	4798      	blx	r3
      
      Generic_TemporaryStatus[elementIndex].TargetValue16  = Generic_GetBuff[3] << 8;
 800f14a:	7bfb      	ldrb	r3, [r7, #15]
 800f14c:	021b      	lsls	r3, r3, #8
 800f14e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f152:	b218      	sxth	r0, r3
 800f154:	497d      	ldr	r1, [pc, #500]	; (800f34c <Generic_Process+0x254>)
 800f156:	4613      	mov	r3, r2
 800f158:	009b      	lsls	r3, r3, #2
 800f15a:	4413      	add	r3, r2
 800f15c:	440b      	add	r3, r1
 800f15e:	4602      	mov	r2, r0
 800f160:	f8a3 2003 	strh.w	r2, [r3, #3]
      Generic_TemporaryStatus[elementIndex].TargetValue16 |= Generic_GetBuff[2];
 800f164:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f168:	4978      	ldr	r1, [pc, #480]	; (800f34c <Generic_Process+0x254>)
 800f16a:	4613      	mov	r3, r2
 800f16c:	009b      	lsls	r3, r3, #2
 800f16e:	4413      	add	r3, r2
 800f170:	440b      	add	r3, r1
 800f172:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f176:	b219      	sxth	r1, r3
 800f178:	7bbb      	ldrb	r3, [r7, #14]
 800f17a:	b21b      	sxth	r3, r3
 800f17c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f180:	430b      	orrs	r3, r1
 800f182:	b218      	sxth	r0, r3
 800f184:	4971      	ldr	r1, [pc, #452]	; (800f34c <Generic_Process+0x254>)
 800f186:	4613      	mov	r3, r2
 800f188:	009b      	lsls	r3, r3, #2
 800f18a:	4413      	add	r3, r2
 800f18c:	440b      	add	r3, r1
 800f18e:	4602      	mov	r2, r0
 800f190:	f8a3 2003 	strh.w	r2, [r3, #3]
      
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800f194:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f198:	f107 030c 	add.w	r3, r7, #12
 800f19c:	4611      	mov	r1, r2
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7ff fd1e 	bl	800ebe0 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800f1a4:	4b6a      	ldr	r3, [pc, #424]	; (800f350 <Generic_Process+0x258>)
 800f1a6:	781b      	ldrb	r3, [r3, #0]
 800f1a8:	2b01      	cmp	r3, #1
 800f1aa:	d135      	bne.n	800f218 <Generic_Process+0x120>
      {
        /* updating the state value after the each transition step complete */
        Generic_OnOffStateUpdate_Process(elementIndex);
 800f1ac:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f1b0:	4618      	mov	r0, r3
 800f1b2:	f000 f8d9 	bl	800f368 <Generic_OnOffStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.OnOff_Set_cb)(&Generic_OnOffStatus[elementIndex], OptionalParam, my_Address, elementIndex);  
 800f1b6:	4b67      	ldr	r3, [pc, #412]	; (800f354 <Generic_Process+0x25c>)
 800f1b8:	681c      	ldr	r4, [r3, #0]
 800f1ba:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1be:	4613      	mov	r3, r2
 800f1c0:	005b      	lsls	r3, r3, #1
 800f1c2:	4413      	add	r3, r2
 800f1c4:	005b      	lsls	r3, r3, #1
 800f1c6:	4a64      	ldr	r2, [pc, #400]	; (800f358 <Generic_Process+0x260>)
 800f1c8:	1898      	adds	r0, r3, r2
 800f1ca:	4b64      	ldr	r3, [pc, #400]	; (800f35c <Generic_Process+0x264>)
 800f1cc:	7819      	ldrb	r1, [r3, #0]
 800f1ce:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f1d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f1d4:	47a0      	blx	r4
        /*binding of the generic on off with light model */
        GenericOnOff_LightActualBinding(&Generic_OnOffStatus[elementIndex],
 800f1d6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1da:	4613      	mov	r3, r2
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4413      	add	r3, r2
 800f1e0:	005b      	lsls	r3, r3, #1
 800f1e2:	4a5d      	ldr	r2, [pc, #372]	; (800f358 <Generic_Process+0x260>)
 800f1e4:	1898      	adds	r0, r3, r2
 800f1e6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1ea:	4956      	ldr	r1, [pc, #344]	; (800f344 <Generic_Process+0x24c>)
 800f1ec:	4613      	mov	r3, r2
 800f1ee:	005b      	lsls	r3, r3, #1
 800f1f0:	4413      	add	r3, r2
 800f1f2:	440b      	add	r3, r1
 800f1f4:	781c      	ldrb	r4, [r3, #0]
 800f1f6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f1fa:	4952      	ldr	r1, [pc, #328]	; (800f344 <Generic_Process+0x24c>)
 800f1fc:	4613      	mov	r3, r2
 800f1fe:	005b      	lsls	r3, r3, #1
 800f200:	4413      	add	r3, r2
 800f202:	440b      	add	r3, r1
 800f204:	3302      	adds	r3, #2
 800f206:	781b      	ldrb	r3, [r3, #0]
 800f208:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 800f20c:	4622      	mov	r2, r4
 800f20e:	f002 f911 	bl	8011434 <GenericOnOff_LightActualBinding>
                                        elementIndex,
                                        Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                        Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;     
 800f212:	4b4f      	ldr	r3, [pc, #316]	; (800f350 <Generic_Process+0x258>)
 800f214:	2200      	movs	r2, #0
 800f216:	701a      	strb	r2, [r3, #0]
      }
    }    
#endif 
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL       
    if(Generic_ModelFlag[elementIndex].GenericTransitionFlag == GENERIC_LEVEL_TRANSITION_START)
 800f218:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f21c:	4949      	ldr	r1, [pc, #292]	; (800f344 <Generic_Process+0x24c>)
 800f21e:	4613      	mov	r3, r2
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	4413      	add	r3, r2
 800f224:	440b      	add	r3, r1
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	2b02      	cmp	r3, #2
 800f22a:	d14a      	bne.n	800f2c2 <Generic_Process+0x1ca>
    {    
      /* Fetching the state value from the application layer to middle layer */
      (Appli_GenericState_cb.GetLevelStatus_cb)(Generic_GetBuff, my_Address, elementIndex); 
 800f22c:	4b46      	ldr	r3, [pc, #280]	; (800f348 <Generic_Process+0x250>)
 800f22e:	689b      	ldr	r3, [r3, #8]
 800f230:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f234:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800f236:	f107 000c 	add.w	r0, r7, #12
 800f23a:	4798      	blx	r3
      /* Transition function called to change the state in transition */
      Generic_TransitionBehaviour(Generic_GetBuff, elementIndex); 
 800f23c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f240:	f107 030c 	add.w	r3, r7, #12
 800f244:	4611      	mov	r1, r2
 800f246:	4618      	mov	r0, r3
 800f248:	f7ff fcca 	bl	800ebe0 <Generic_TransitionBehaviour>
      if(GenericUpdateFlag == VALUE_UPDATE_SET)
 800f24c:	4b40      	ldr	r3, [pc, #256]	; (800f350 <Generic_Process+0x258>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	2b01      	cmp	r3, #1
 800f252:	d136      	bne.n	800f2c2 <Generic_Process+0x1ca>
      {
        /* updating the state value after the each transition step complete */
        Generic_LevelStateUpdate_Process(elementIndex);
 800f254:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f258:	4618      	mov	r0, r3
 800f25a:	f000 f931 	bl	800f4c0 <Generic_LevelStateUpdate_Process>
        /* Application callback */
        (GenericAppli_cb.Level_Set_cb)(&Generic_LevelStatus[elementIndex], 0, my_Address, elementIndex);  
 800f25e:	4b3d      	ldr	r3, [pc, #244]	; (800f354 <Generic_Process+0x25c>)
 800f260:	689c      	ldr	r4, [r3, #8]
 800f262:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f266:	4613      	mov	r3, r2
 800f268:	005b      	lsls	r3, r3, #1
 800f26a:	4413      	add	r3, r2
 800f26c:	009b      	lsls	r3, r3, #2
 800f26e:	4a3c      	ldr	r2, [pc, #240]	; (800f360 <Generic_Process+0x268>)
 800f270:	1898      	adds	r0, r3, r2
 800f272:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f276:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f278:	2100      	movs	r1, #0
 800f27a:	47a0      	blx	r4
        /*binding of the generic Level with light model */
        GenericLevel_LightBinding(&Generic_LevelStatus[elementIndex],BINDING_GENERIC_LEVEL_SET,
 800f27c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f280:	4613      	mov	r3, r2
 800f282:	005b      	lsls	r3, r3, #1
 800f284:	4413      	add	r3, r2
 800f286:	009b      	lsls	r3, r3, #2
 800f288:	4a35      	ldr	r2, [pc, #212]	; (800f360 <Generic_Process+0x268>)
 800f28a:	1898      	adds	r0, r3, r2
 800f28c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f290:	492c      	ldr	r1, [pc, #176]	; (800f344 <Generic_Process+0x24c>)
 800f292:	4613      	mov	r3, r2
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	4413      	add	r3, r2
 800f298:	440b      	add	r3, r1
 800f29a:	7819      	ldrb	r1, [r3, #0]
 800f29c:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f2a0:	4c28      	ldr	r4, [pc, #160]	; (800f344 <Generic_Process+0x24c>)
 800f2a2:	4613      	mov	r3, r2
 800f2a4:	005b      	lsls	r3, r3, #1
 800f2a6:	4413      	add	r3, r2
 800f2a8:	4423      	add	r3, r4
 800f2aa:	3302      	adds	r3, #2
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f2b2:	9300      	str	r3, [sp, #0]
 800f2b4:	460b      	mov	r3, r1
 800f2b6:	2101      	movs	r1, #1
 800f2b8:	f002 f986 	bl	80115c8 <GenericLevel_LightBinding>
                                  elementIndex,
                                  Generic_ModelFlag[elementIndex].GenericTransitionFlag,
                                  Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt);
        GenericUpdateFlag = VALUE_UPDATE_RESET;
 800f2bc:	4b24      	ldr	r3, [pc, #144]	; (800f350 <Generic_Process+0x258>)
 800f2be:	2200      	movs	r2, #0
 800f2c0:	701a      	strb	r2, [r3, #0]
      }
      
    }   
#endif
  
    if(Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt == MOBLE_TRUE)
 800f2c2:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f2c6:	491f      	ldr	r1, [pc, #124]	; (800f344 <Generic_Process+0x24c>)
 800f2c8:	4613      	mov	r3, r2
 800f2ca:	005b      	lsls	r3, r3, #1
 800f2cc:	4413      	add	r3, r2
 800f2ce:	440b      	add	r3, r1
 800f2d0:	3302      	adds	r3, #2
 800f2d2:	781b      	ldrb	r3, [r3, #0]
 800f2d4:	2b01      	cmp	r3, #1
 800f2d6:	d126      	bne.n	800f326 <Generic_Process+0x22e>
    {         
      publishAddress = BLEMesh_GetPublishAddress(elementIndex,Model_Binding_Var.Model_ID);
 800f2d8:	4b22      	ldr	r3, [pc, #136]	; (800f364 <Generic_Process+0x26c>)
 800f2da:	885b      	ldrh	r3, [r3, #2]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f2e2:	4611      	mov	r1, r2
 800f2e4:	4618      	mov	r0, r3
 800f2e6:	f00d feef 	bl	801d0c8 <BLEMesh_GetPublishAddress>
 800f2ea:	4603      	mov	r3, r0
 800f2ec:	83fb      	strh	r3, [r7, #30]
      if((publishAddress != 0x00))
 800f2ee:	8bfb      	ldrh	r3, [r7, #30]
 800f2f0:	2b00      	cmp	r3, #0
 800f2f2:	d00e      	beq.n	800f312 <Generic_Process+0x21a>
      {

         MODEL_MessageHeader_t msgHdr;
         msgHdr.dst_peer = my_Address;
 800f2f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f2f6:	80fb      	strh	r3, [r7, #6]
         msgHdr.elementIndex = elementIndex;
 800f2f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f2fc:	703b      	strb	r3, [r7, #0]
         msgHdr.peer_addr = publishAddress;
 800f2fe:	8bfb      	ldrh	r3, [r7, #30]
 800f300:	80bb      	strh	r3, [r7, #4]
         Model_SendResponse(&msgHdr, Model_Binding_Var.Model_Rx_Opcode, pRxData, dataLength);
 800f302:	4b18      	ldr	r3, [pc, #96]	; (800f364 <Generic_Process+0x26c>)
 800f304:	8819      	ldrh	r1, [r3, #0]
 800f306:	f107 0214 	add.w	r2, r7, #20
 800f30a:	4638      	mov	r0, r7
 800f30c:	6a3b      	ldr	r3, [r7, #32]
 800f30e:	f019 f8d9 	bl	80284c4 <Model_SendResponse>
         TRACE_M(TF_LIGHT_M, "Publishing the status after transition complete opcode %.2x model id %.2x \r\n",
         Model_Binding_Var.Model_Rx_Opcode,Model_Binding_Var.Model_ID);
      }
      Generic_ModelFlag[elementIndex].Generic_Trnsn_Cmplt = MOBLE_FALSE;
 800f312:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800f316:	490b      	ldr	r1, [pc, #44]	; (800f344 <Generic_Process+0x24c>)
 800f318:	4613      	mov	r3, r2
 800f31a:	005b      	lsls	r3, r3, #1
 800f31c:	4413      	add	r3, r2
 800f31e:	440b      	add	r3, r1
 800f320:	3302      	adds	r3, #2
 800f322:	2200      	movs	r2, #0
 800f324:	701a      	strb	r2, [r3, #0]
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 800f326:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f32a:	3301      	adds	r3, #1
 800f32c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800f330:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f334:	2b00      	cmp	r3, #0
 800f336:	f43f aef0 	beq.w	800f11a <Generic_Process+0x22>
    }
  }
}
 800f33a:	bf00      	nop
 800f33c:	bf00      	nop
 800f33e:	372c      	adds	r7, #44	; 0x2c
 800f340:	46bd      	mov	sp, r7
 800f342:	bd90      	pop	{r4, r7, pc}
 800f344:	2000459c 	.word	0x2000459c
 800f348:	08032c20 	.word	0x08032c20
 800f34c:	20004574 	.word	0x20004574
 800f350:	2000459f 	.word	0x2000459f
 800f354:	08032bf8 	.word	0x08032bf8
 800f358:	20004594 	.word	0x20004594
 800f35c:	200045a0 	.word	0x200045a0
 800f360:	20004588 	.word	0x20004588
 800f364:	2000455c 	.word	0x2000455c

0800f368 <Generic_OnOffStateUpdate_Process>:
*        Generic On Off model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_OnOffStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800f368:	b480      	push	{r7}
 800f36a:	b083      	sub	sp, #12
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	4603      	mov	r3, r0
 800f370:	71fb      	strb	r3, [r7, #7]
  Generic_OnOffStatus[elementIndex].Present_OnOff_Value = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800f372:	79fa      	ldrb	r2, [r7, #7]
 800f374:	492a      	ldr	r1, [pc, #168]	; (800f420 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f376:	4613      	mov	r3, r2
 800f378:	009b      	lsls	r3, r3, #2
 800f37a:	4413      	add	r3, r2
 800f37c:	440b      	add	r3, r1
 800f37e:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800f382:	b21b      	sxth	r3, r3
 800f384:	79fa      	ldrb	r2, [r7, #7]
 800f386:	b298      	uxth	r0, r3
 800f388:	4926      	ldr	r1, [pc, #152]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f38a:	4613      	mov	r3, r2
 800f38c:	005b      	lsls	r3, r3, #1
 800f38e:	4413      	add	r3, r2
 800f390:	005b      	lsls	r3, r3, #1
 800f392:	440b      	add	r3, r1
 800f394:	4602      	mov	r2, r0
 800f396:	f8a3 2001 	strh.w	r2, [r3, #1]
  if(Generic_TemporaryStatus[elementIndex].TargetValue16 == 0x01)
 800f39a:	79fa      	ldrb	r2, [r7, #7]
 800f39c:	4920      	ldr	r1, [pc, #128]	; (800f420 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f39e:	4613      	mov	r3, r2
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	4413      	add	r3, r2
 800f3a4:	440b      	add	r3, r1
 800f3a6:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f3aa:	b21b      	sxth	r3, r3
 800f3ac:	2b01      	cmp	r3, #1
 800f3ae:	d109      	bne.n	800f3c4 <Generic_OnOffStateUpdate_Process+0x5c>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800f3b0:	79fa      	ldrb	r2, [r7, #7]
 800f3b2:	491c      	ldr	r1, [pc, #112]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f3b4:	4613      	mov	r3, r2
 800f3b6:	005b      	lsls	r3, r3, #1
 800f3b8:	4413      	add	r3, r2
 800f3ba:	005b      	lsls	r3, r3, #1
 800f3bc:	440b      	add	r3, r1
 800f3be:	2201      	movs	r2, #1
 800f3c0:	701a      	strb	r2, [r3, #0]
 800f3c2:	e014      	b.n	800f3ee <Generic_OnOffStateUpdate_Process+0x86>
  }
  else
  {
    if(Generic_OnOffStatus[elementIndex].Present_OnOff_Value == 0x00)
 800f3c4:	79fa      	ldrb	r2, [r7, #7]
 800f3c6:	4917      	ldr	r1, [pc, #92]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f3c8:	4613      	mov	r3, r2
 800f3ca:	005b      	lsls	r3, r3, #1
 800f3cc:	4413      	add	r3, r2
 800f3ce:	005b      	lsls	r3, r3, #1
 800f3d0:	440b      	add	r3, r1
 800f3d2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800f3d6:	b29b      	uxth	r3, r3
 800f3d8:	2b00      	cmp	r3, #0
 800f3da:	d108      	bne.n	800f3ee <Generic_OnOffStateUpdate_Process+0x86>
    {
      Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800f3dc:	79fa      	ldrb	r2, [r7, #7]
 800f3de:	4911      	ldr	r1, [pc, #68]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	005b      	lsls	r3, r3, #1
 800f3e4:	4413      	add	r3, r2
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	440b      	add	r3, r1
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	701a      	strb	r2, [r3, #0]
    }
  }
  Generic_OnOffStatus[elementIndex].RemainingTime = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800f3ee:	79f9      	ldrb	r1, [r7, #7]
 800f3f0:	79fa      	ldrb	r2, [r7, #7]
 800f3f2:	480b      	ldr	r0, [pc, #44]	; (800f420 <Generic_OnOffStateUpdate_Process+0xb8>)
 800f3f4:	460b      	mov	r3, r1
 800f3f6:	009b      	lsls	r3, r3, #2
 800f3f8:	440b      	add	r3, r1
 800f3fa:	4403      	add	r3, r0
 800f3fc:	7818      	ldrb	r0, [r3, #0]
 800f3fe:	4909      	ldr	r1, [pc, #36]	; (800f424 <Generic_OnOffStateUpdate_Process+0xbc>)
 800f400:	4613      	mov	r3, r2
 800f402:	005b      	lsls	r3, r3, #1
 800f404:	4413      	add	r3, r2
 800f406:	005b      	lsls	r3, r3, #1
 800f408:	440b      	add	r3, r1
 800f40a:	3305      	adds	r3, #5
 800f40c:	4602      	mov	r2, r0
 800f40e:	701a      	strb	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800f410:	2300      	movs	r3, #0
}
 800f412:	4618      	mov	r0, r3
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	20004574 	.word	0x20004574
 800f424:	20004594 	.word	0x20004594

0800f428 <Generic_Publish>:
*         button.
* @param  srcAddress: Source Address of the node 
* @retval void
*/ 
void Generic_Publish(MOBLE_ADDRESS srcAddress)
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b088      	sub	sp, #32
 800f42c:	af04      	add	r7, sp, #16
 800f42e:	4603      	mov	r3, r0
 800f430:	80fb      	strh	r3, [r7, #6]
  MOBLEUINT8 generic_Buff[2]; 
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 800f432:	2300      	movs	r3, #0
 800f434:	73fb      	strb	r3, [r7, #15]
  
  /* changes the LED status on other nodes in the network */
  if(CommandStatus == (MOBLEUINT16)APPLI_LED_ON)
 800f436:	4b1e      	ldr	r3, [pc, #120]	; (800f4b0 <Generic_Publish+0x88>)
 800f438:	881b      	ldrh	r3, [r3, #0]
 800f43a:	2b01      	cmp	r3, #1
 800f43c:	d102      	bne.n	800f444 <Generic_Publish+0x1c>
  {
    generic_Buff[0] = APPLI_LED_OFF;
 800f43e:	2300      	movs	r3, #0
 800f440:	733b      	strb	r3, [r7, #12]
 800f442:	e001      	b.n	800f448 <Generic_Publish+0x20>
  }
  else
  {
    generic_Buff[0] = APPLI_LED_ON;
 800f444:	2301      	movs	r3, #1
 800f446:	733b      	strb	r3, [r7, #12]
  }
  generic_Buff[1] = Model_Tid.TidSend;
 800f448:	4b1a      	ldr	r3, [pc, #104]	; (800f4b4 <Generic_Publish+0x8c>)
 800f44a:	785b      	ldrb	r3, [r3, #1]
 800f44c:	737b      	strb	r3, [r7, #13]
  
  result = BLEMesh_SetRemotePublication(GENERIC_ONOFF_SERVER_MODEL_ID, 
 800f44e:	f107 030c 	add.w	r3, r7, #12
 800f452:	88f9      	ldrh	r1, [r7, #6]
 800f454:	2200      	movs	r2, #0
 800f456:	9202      	str	r2, [sp, #8]
 800f458:	2200      	movs	r2, #0
 800f45a:	9201      	str	r2, [sp, #4]
 800f45c:	2202      	movs	r2, #2
 800f45e:	9200      	str	r2, [sp, #0]
 800f460:	f248 2203 	movw	r2, #33283	; 0x8203
 800f464:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800f468:	f019 f8f2 	bl	8028650 <BLEMesh_SetRemotePublication>
 800f46c:	4603      	mov	r3, r0
 800f46e:	73fb      	strb	r3, [r7, #15]
                                        srcAddress ,
                                        GENERIC_ON_OFF_SET_UNACK, 
                                        generic_Buff, 2,
                                        MOBLE_FALSE, MOBLE_FALSE);
  Model_Tid.TidSend++;
 800f470:	4b10      	ldr	r3, [pc, #64]	; (800f4b4 <Generic_Publish+0x8c>)
 800f472:	785b      	ldrb	r3, [r3, #1]
 800f474:	3301      	adds	r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	4b0e      	ldr	r3, [pc, #56]	; (800f4b4 <Generic_Publish+0x8c>)
 800f47a:	705a      	strb	r2, [r3, #1]
  if(Model_Tid.TidSend >= MAX_TID_VALUE)
 800f47c:	4b0d      	ldr	r3, [pc, #52]	; (800f4b4 <Generic_Publish+0x8c>)
 800f47e:	785b      	ldrb	r3, [r3, #1]
 800f480:	2bff      	cmp	r3, #255	; 0xff
 800f482:	d102      	bne.n	800f48a <Generic_Publish+0x62>
  {
    Model_Tid.TidSend = 0;
 800f484:	4b0b      	ldr	r3, [pc, #44]	; (800f4b4 <Generic_Publish+0x8c>)
 800f486:	2200      	movs	r2, #0
 800f488:	705a      	strb	r2, [r3, #1]
  }  
  if(result)
 800f48a:	7bfb      	ldrb	r3, [r7, #15]
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d006      	beq.n	800f49e <Generic_Publish+0x76>
  {
    TRACE_M(TF_GENERIC_M, "Publication Error \r\n");
 800f490:	2100      	movs	r1, #0
 800f492:	4809      	ldr	r0, [pc, #36]	; (800f4b8 <Generic_Publish+0x90>)
 800f494:	f7fe f86c 	bl	800d570 <TraceHeader>
 800f498:	4808      	ldr	r0, [pc, #32]	; (800f4bc <Generic_Publish+0x94>)
 800f49a:	f01a f8d3 	bl	8029644 <puts>
  }
  
  CommandStatus = generic_Buff[0];
 800f49e:	7b3b      	ldrb	r3, [r7, #12]
 800f4a0:	b29a      	uxth	r2, r3
 800f4a2:	4b03      	ldr	r3, [pc, #12]	; (800f4b0 <Generic_Publish+0x88>)
 800f4a4:	801a      	strh	r2, [r3, #0]
}
 800f4a6:	bf00      	nop
 800f4a8:	3710      	adds	r7, #16
 800f4aa:	46bd      	mov	sp, r7
 800f4ac:	bd80      	pop	{r7, pc}
 800f4ae:	bf00      	nop
 800f4b0:	20006e78 	.word	0x20006e78
 800f4b4:	20004554 	.word	0x20004554
 800f4b8:	08033048 	.word	0x08033048
 800f4bc:	0802f2d0 	.word	0x0802f2d0

0800f4c0 <Generic_LevelStateUpdate_Process>:
*        Level model in application file from Temporary parameter in model file.
* @param void
* return MOBLE_RESULT.
*/
MOBLE_RESULT Generic_LevelStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	71fb      	strb	r3, [r7, #7]
  Generic_LevelStatus[elementIndex].Present_Level16 = Generic_TemporaryStatus[elementIndex].PresentValue16;
 800f4ca:	79f9      	ldrb	r1, [r7, #7]
 800f4cc:	79fa      	ldrb	r2, [r7, #7]
 800f4ce:	481d      	ldr	r0, [pc, #116]	; (800f544 <Generic_LevelStateUpdate_Process+0x84>)
 800f4d0:	460b      	mov	r3, r1
 800f4d2:	009b      	lsls	r3, r3, #2
 800f4d4:	440b      	add	r3, r1
 800f4d6:	4403      	add	r3, r0
 800f4d8:	f9b3 3001 	ldrsh.w	r3, [r3, #1]
 800f4dc:	b218      	sxth	r0, r3
 800f4de:	491a      	ldr	r1, [pc, #104]	; (800f548 <Generic_LevelStateUpdate_Process+0x88>)
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	005b      	lsls	r3, r3, #1
 800f4e4:	4413      	add	r3, r2
 800f4e6:	009b      	lsls	r3, r3, #2
 800f4e8:	440b      	add	r3, r1
 800f4ea:	4602      	mov	r2, r0
 800f4ec:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].Target_Level16  = Generic_TemporaryStatus[elementIndex].TargetValue16;
 800f4ee:	79f9      	ldrb	r1, [r7, #7]
 800f4f0:	79fa      	ldrb	r2, [r7, #7]
 800f4f2:	4814      	ldr	r0, [pc, #80]	; (800f544 <Generic_LevelStateUpdate_Process+0x84>)
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	009b      	lsls	r3, r3, #2
 800f4f8:	440b      	add	r3, r1
 800f4fa:	4403      	add	r3, r0
 800f4fc:	f9b3 3003 	ldrsh.w	r3, [r3, #3]
 800f500:	b218      	sxth	r0, r3
 800f502:	4911      	ldr	r1, [pc, #68]	; (800f548 <Generic_LevelStateUpdate_Process+0x88>)
 800f504:	4613      	mov	r3, r2
 800f506:	005b      	lsls	r3, r3, #1
 800f508:	4413      	add	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	440b      	add	r3, r1
 800f50e:	3302      	adds	r3, #2
 800f510:	4602      	mov	r2, r0
 800f512:	801a      	strh	r2, [r3, #0]
  Generic_LevelStatus[elementIndex].RemainingTime   = Generic_TemporaryStatus[elementIndex].RemainingTime;
 800f514:	79f9      	ldrb	r1, [r7, #7]
 800f516:	79fa      	ldrb	r2, [r7, #7]
 800f518:	480a      	ldr	r0, [pc, #40]	; (800f544 <Generic_LevelStateUpdate_Process+0x84>)
 800f51a:	460b      	mov	r3, r1
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	440b      	add	r3, r1
 800f520:	4403      	add	r3, r0
 800f522:	7818      	ldrb	r0, [r3, #0]
 800f524:	4908      	ldr	r1, [pc, #32]	; (800f548 <Generic_LevelStateUpdate_Process+0x88>)
 800f526:	4613      	mov	r3, r2
 800f528:	005b      	lsls	r3, r3, #1
 800f52a:	4413      	add	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	440b      	add	r3, r1
 800f530:	3304      	adds	r3, #4
 800f532:	4602      	mov	r2, r0
 800f534:	701a      	strb	r2, [r3, #0]
   
  return MOBLE_RESULT_SUCCESS;
 800f536:	2300      	movs	r3, #0
}
 800f538:	4618      	mov	r0, r3
 800f53a:	370c      	adds	r7, #12
 800f53c:	46bd      	mov	sp, r7
 800f53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f542:	4770      	bx	lr
 800f544:	20004574 	.word	0x20004574
 800f548:	20004588 	.word	0x20004588

0800f54c <LightActual_GenericOnOffBinding>:
* @param lightActual: used to select the binding and reverse binding 
* return void.
*/
void LightActual_GenericOnOffBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{
 800f54c:	b480      	push	{r7}
 800f54e:	b083      	sub	sp, #12
 800f550:	af00      	add	r7, sp, #0
 800f552:	6078      	str	r0, [r7, #4]
 800f554:	460b      	mov	r3, r1
 800f556:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.3 - Binding of actual light lightness with generic on off,
  As actual lightness will set which changes the on off state in 
  generic model
  */

  if(lightActual->LightnessPresentValue16 == 0x00)
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	881b      	ldrh	r3, [r3, #0]
 800f55c:	b29b      	uxth	r3, r3
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d109      	bne.n	800f576 <LightActual_GenericOnOffBinding+0x2a>
  {
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x00;
 800f562:	78fa      	ldrb	r2, [r7, #3]
 800f564:	490b      	ldr	r1, [pc, #44]	; (800f594 <LightActual_GenericOnOffBinding+0x48>)
 800f566:	4613      	mov	r3, r2
 800f568:	005b      	lsls	r3, r3, #1
 800f56a:	4413      	add	r3, r2
 800f56c:	005b      	lsls	r3, r3, #1
 800f56e:	440b      	add	r3, r1
 800f570:	2200      	movs	r2, #0
 800f572:	701a      	strb	r2, [r3, #0]
  
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic On Off - Present OnOff value 0x%.2x \r\n", 
          Generic_OnOffStatus[elementIndex].Present_OnOff_State);    
 
}
 800f574:	e008      	b.n	800f588 <LightActual_GenericOnOffBinding+0x3c>
    Generic_OnOffStatus[elementIndex].Present_OnOff_State = 0x01;
 800f576:	78fa      	ldrb	r2, [r7, #3]
 800f578:	4906      	ldr	r1, [pc, #24]	; (800f594 <LightActual_GenericOnOffBinding+0x48>)
 800f57a:	4613      	mov	r3, r2
 800f57c:	005b      	lsls	r3, r3, #1
 800f57e:	4413      	add	r3, r2
 800f580:	005b      	lsls	r3, r3, #1
 800f582:	440b      	add	r3, r1
 800f584:	2201      	movs	r2, #1
 800f586:	701a      	strb	r2, [r3, #0]
}
 800f588:	bf00      	nop
 800f58a:	370c      	adds	r7, #12
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	20004594 	.word	0x20004594

0800f598 <LightActual_GenericLevelBinding>:
* @param lightActual: Pointer to the data which needs to be checked.
* return void.
*/
void LightActual_GenericLevelBinding(Light_LightnessStatus_t* lightActual,
                                     MOBLEUINT8 elementIndex)
{ 
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
 800f5a0:	460b      	mov	r3, r1
 800f5a2:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.2 - Binding of actual light lightness with generic level
  As Actual lightness changes, the generic level value will
  change.
     */

  Generic_LevelStatus[elementIndex].Present_Level16 = lightActual->LightnessPresentValue16 - 32768;  
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	881b      	ldrh	r3, [r3, #0]
 800f5a8:	b29b      	uxth	r3, r3
 800f5aa:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800f5ae:	b29b      	uxth	r3, r3
 800f5b0:	78fa      	ldrb	r2, [r7, #3]
 800f5b2:	b218      	sxth	r0, r3
 800f5b4:	4906      	ldr	r1, [pc, #24]	; (800f5d0 <LightActual_GenericLevelBinding+0x38>)
 800f5b6:	4613      	mov	r3, r2
 800f5b8:	005b      	lsls	r3, r3, #1
 800f5ba:	4413      	add	r3, r2
 800f5bc:	009b      	lsls	r3, r3, #2
 800f5be:	440b      	add	r3, r1
 800f5c0:	4602      	mov	r2, r0
 800f5c2:	801a      	strh	r2, [r3, #0]
 
  TRACE_M(TF_LIGHT_M, 
          "Light Actual binding with Generic Level - Present Level value 0x%.2x \r\n", 
          Generic_LevelStatus[elementIndex].Present_Level16); 
      
}
 800f5c4:	bf00      	nop
 800f5c6:	370c      	adds	r7, #12
 800f5c8:	46bd      	mov	sp, r7
 800f5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ce:	4770      	bx	lr
 800f5d0:	20004588 	.word	0x20004588

0800f5d4 <Generic_TransitionParameterReset>:
* @brief Function called when message received without optional parameter, stop the running transition.
* @param void
* @param void
*/
void Generic_TransitionParameterReset(MOBLEUINT8 elementIndex)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	4603      	mov	r3, r0
 800f5dc:	71fb      	strb	r3, [r7, #7]
   Generic_ModelFlag[elementIndex].GenericTransitionFlag = MODEL_TRANSITION_STOP;
 800f5de:	79fa      	ldrb	r2, [r7, #7]
 800f5e0:	4910      	ldr	r1, [pc, #64]	; (800f624 <Generic_TransitionParameterReset+0x50>)
 800f5e2:	4613      	mov	r3, r2
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	4413      	add	r3, r2
 800f5e8:	440b      	add	r3, r1
 800f5ea:	2200      	movs	r2, #0
 800f5ec:	701a      	strb	r2, [r3, #0]
   Generic_TimeParam[elementIndex].Res_Value = 0x00;
 800f5ee:	79fa      	ldrb	r2, [r7, #7]
 800f5f0:	490d      	ldr	r1, [pc, #52]	; (800f628 <Generic_TransitionParameterReset+0x54>)
 800f5f2:	4613      	mov	r3, r2
 800f5f4:	009b      	lsls	r3, r3, #2
 800f5f6:	4413      	add	r3, r2
 800f5f8:	005b      	lsls	r3, r3, #1
 800f5fa:	440b      	add	r3, r1
 800f5fc:	2200      	movs	r2, #0
 800f5fe:	805a      	strh	r2, [r3, #2]
 800f600:	2200      	movs	r2, #0
 800f602:	809a      	strh	r2, [r3, #4]
   Generic_TimeParam[elementIndex].StepValue = 0X00;
 800f604:	79fa      	ldrb	r2, [r7, #7]
 800f606:	4908      	ldr	r1, [pc, #32]	; (800f628 <Generic_TransitionParameterReset+0x54>)
 800f608:	4613      	mov	r3, r2
 800f60a:	009b      	lsls	r3, r3, #2
 800f60c:	4413      	add	r3, r2
 800f60e:	005b      	lsls	r3, r3, #1
 800f610:	440b      	add	r3, r1
 800f612:	2200      	movs	r2, #0
 800f614:	701a      	strb	r2, [r3, #0]
}
 800f616:	bf00      	nop
 800f618:	370c      	adds	r7, #12
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	2000459c 	.word	0x2000459c
 800f628:	2000457c 	.word	0x2000457c

0800f62c <Generic_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Generic_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 800f62c:	b590      	push	{r4, r7, lr}
 800f62e:	b085      	sub	sp, #20
 800f630:	af00      	add	r7, sp, #0
 800f632:	6078      	str	r0, [r7, #4]
 800f634:	460b      	mov	r3, r1
 800f636:	70fb      	strb	r3, [r7, #3]
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF    
  Generic_OnOffStatus[elementIndex].Present_OnOff_State = ((Models_ParamNvm_t *)model_State)->Generic_OnOff;
 800f638:	78fa      	ldrb	r2, [r7, #3]
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	7918      	ldrb	r0, [r3, #4]
 800f63e:	4922      	ldr	r1, [pc, #136]	; (800f6c8 <Generic_RestoreModelStates+0x9c>)
 800f640:	4613      	mov	r3, r2
 800f642:	005b      	lsls	r3, r3, #1
 800f644:	4413      	add	r3, r2
 800f646:	005b      	lsls	r3, r3, #1
 800f648:	440b      	add	r3, r1
 800f64a:	4602      	mov	r2, r0
 800f64c:	701a      	strb	r2, [r3, #0]
  Generic_OnOffStatus[elementIndex].Target_OnOff = ((Models_ParamNvm_t *)model_State)->GenericTarget;
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	795b      	ldrb	r3, [r3, #5]
 800f652:	78fa      	ldrb	r2, [r7, #3]
 800f654:	b298      	uxth	r0, r3
 800f656:	491c      	ldr	r1, [pc, #112]	; (800f6c8 <Generic_RestoreModelStates+0x9c>)
 800f658:	4613      	mov	r3, r2
 800f65a:	005b      	lsls	r3, r3, #1
 800f65c:	4413      	add	r3, r2
 800f65e:	005b      	lsls	r3, r3, #1
 800f660:	440b      	add	r3, r1
 800f662:	4602      	mov	r2, r0
 800f664:	f8a3 2003 	strh.w	r2, [r3, #3]
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL 
  if(((Models_ParamNvm_t *)model_State)->Generic_Level == 0x00)
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	88db      	ldrh	r3, [r3, #6]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10a      	bne.n	800f686 <Generic_RestoreModelStates+0x5a>
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = LEVEL_MIN_VALID_RANGE;
 800f670:	78fa      	ldrb	r2, [r7, #3]
 800f672:	4916      	ldr	r1, [pc, #88]	; (800f6cc <Generic_RestoreModelStates+0xa0>)
 800f674:	4613      	mov	r3, r2
 800f676:	005b      	lsls	r3, r3, #1
 800f678:	4413      	add	r3, r2
 800f67a:	009b      	lsls	r3, r3, #2
 800f67c:	440b      	add	r3, r1
 800f67e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800f682:	801a      	strh	r2, [r3, #0]
 800f684:	e00b      	b.n	800f69e <Generic_RestoreModelStates+0x72>
  }
  else
  {
    Generic_LevelStatus[elementIndex].Present_Level16 = ((Models_ParamNvm_t *)model_State)->Generic_Level;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	88db      	ldrh	r3, [r3, #6]
 800f68a:	78fa      	ldrb	r2, [r7, #3]
 800f68c:	b218      	sxth	r0, r3
 800f68e:	490f      	ldr	r1, [pc, #60]	; (800f6cc <Generic_RestoreModelStates+0xa0>)
 800f690:	4613      	mov	r3, r2
 800f692:	005b      	lsls	r3, r3, #1
 800f694:	4413      	add	r3, r2
 800f696:	009b      	lsls	r3, r3, #2
 800f698:	440b      	add	r3, r1
 800f69a:	4602      	mov	r2, r0
 800f69c:	801a      	strh	r2, [r3, #0]
  }
#endif 

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF  
  Generic_PowerOnOffParam_t Generic_PowerOnOffParam[APPLICATION_NUMBER_OF_ELEMENTS];
  Generic_PowerOnOffParam[elementIndex].PowerOnOffState = ((Models_ParamNvm_t *)model_State)->PowerOnOff;
 800f69e:	78fb      	ldrb	r3, [r7, #3]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	78d2      	ldrb	r2, [r2, #3]
 800f6a4:	3310      	adds	r3, #16
 800f6a6:	443b      	add	r3, r7
 800f6a8:	f803 2c04 	strb.w	r2, [r3, #-4]
  (GenericAppli_cb.GenericPowerOnOff_cb)(&Generic_PowerOnOffParam[elementIndex], 1, 0,elementIndex);
 800f6ac:	4b08      	ldr	r3, [pc, #32]	; (800f6d0 <Generic_RestoreModelStates+0xa4>)
 800f6ae:	699c      	ldr	r4, [r3, #24]
 800f6b0:	78fb      	ldrb	r3, [r7, #3]
 800f6b2:	f107 020c 	add.w	r2, r7, #12
 800f6b6:	18d0      	adds	r0, r2, r3
 800f6b8:	78fb      	ldrb	r3, [r7, #3]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	2101      	movs	r1, #1
 800f6be:	47a0      	blx	r4
                                                     
#endif  
}
 800f6c0:	bf00      	nop
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd90      	pop	{r4, r7, pc}
 800f6c8:	20004594 	.word	0x20004594
 800f6cc:	20004588 	.word	0x20004588
 800f6d0:	08032bf8 	.word	0x08032bf8

0800f6d4 <Appli_Generic_DefaultTransitionTime_Set>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_DefaultTransitionTime_Set(Generic_DefaultTransitionParam_t* pDefaultTimeParam, 
                                                                    MOBLEUINT8 OptionalValid, 
                                                                    uint16_t dstPeer, 
                                                                    uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800f6d4:	b480      	push	{r7}
 800f6d6:	b083      	sub	sp, #12
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	4608      	mov	r0, r1
 800f6de:	4611      	mov	r1, r2
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	70fb      	strb	r3, [r7, #3]
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	803b      	strh	r3, [r7, #0]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	70bb      	strb	r3, [r7, #2]
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	4618      	mov	r0, r3
 800f6f2:	370c      	adds	r7, #12
 800f6f4:	46bd      	mov	sp, r7
 800f6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6fa:	4770      	bx	lr

0800f6fc <Appli_Generic_Level_Status>:

WEAK_FUNCTION (MOBLE_RESULT Appli_Generic_Level_Status(MOBLEUINT8 const *plevel_status, 
                                                       MOBLEUINT32 plength, 
                                                       uint16_t dstPeer, 
                                                       uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS;}
 800f6fc:	b480      	push	{r7}
 800f6fe:	b085      	sub	sp, #20
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	4611      	mov	r1, r2
 800f708:	461a      	mov	r2, r3
 800f70a:	460b      	mov	r3, r1
 800f70c:	80fb      	strh	r3, [r7, #6]
 800f70e:	4613      	mov	r3, r2
 800f710:	717b      	strb	r3, [r7, #5]
 800f712:	2300      	movs	r3, #0
 800f714:	4618      	mov	r0, r3
 800f716:	3714      	adds	r7, #20
 800f718:	46bd      	mov	sp, r7
 800f71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f71e:	4770      	bx	lr

0800f720 <Light_Lightness_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_Lightness_Set(const MOBLEUINT8* plightness_param, 
                                 MOBLEUINT32 length,
                                 MODEL_MessageHeader_t *pmsgParam)
{
 800f720:	b590      	push	{r4, r7, lr}
 800f722:	b087      	sub	sp, #28
 800f724:	af02      	add	r7, sp, #8
 800f726:	60f8      	str	r0, [r7, #12]
 800f728:	60b9      	str	r1, [r7, #8]
 800f72a:	607a      	str	r2, [r7, #4]
  Transition Time       1B Format as defined in Section 3.1.3. (Optional)
  Delay                 1B Message execution delay in 5 millisecond steps (C.1)
  */
  TRACE_M(TF_LIGHT_M, "Callback Received \r\n");
  
  Light_LightnessParam.TargetLightnessStatus = (plightness_param[0] | plightness_param[1] << 8);
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	781b      	ldrb	r3, [r3, #0]
 800f730:	b21a      	sxth	r2, r3
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	3301      	adds	r3, #1
 800f736:	781b      	ldrb	r3, [r3, #0]
 800f738:	021b      	lsls	r3, r3, #8
 800f73a:	b21b      	sxth	r3, r3
 800f73c:	4313      	orrs	r3, r2
 800f73e:	b21b      	sxth	r3, r3
 800f740:	b29a      	uxth	r2, r3
 800f742:	4b7b      	ldr	r3, [pc, #492]	; (800f930 <Light_Lightness_Set+0x210>)
 800f744:	801a      	strh	r2, [r3, #0]
  Light_LightnessParam.TID = plightness_param[2];
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	3302      	adds	r3, #2
 800f74a:	781a      	ldrb	r2, [r3, #0]
 800f74c:	4b78      	ldr	r3, [pc, #480]	; (800f930 <Light_Lightness_Set+0x210>)
 800f74e:	711a      	strb	r2, [r3, #4]
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP  
  /* Binding of actual lightness value with lightness range */
  Light_Actual_RangeBinding(&Light_LightnessParam, pmsgParam->elementIndex);
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	4619      	mov	r1, r3
 800f756:	4876      	ldr	r0, [pc, #472]	; (800f930 <Light_Lightness_Set+0x210>)
 800f758:	f002 f990 	bl	8011a7c <Light_Actual_RangeBinding>
#endif  
  /* Check for Optional Parameters */ 
  if ((length > 3) && (plightness_param[3] !=0))
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	2b03      	cmp	r3, #3
 800f760:	d976      	bls.n	800f850 <Light_Lightness_Set+0x130>
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	3303      	adds	r3, #3
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d071      	beq.n	800f850 <Light_Lightness_Set+0x130>
  {
    /* Transition_Time & Delay_Time Present */
    Light_LightnessParam.TransitionTime = plightness_param[3];
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	3303      	adds	r3, #3
 800f770:	781a      	ldrb	r2, [r3, #0]
 800f772:	4b6f      	ldr	r3, [pc, #444]	; (800f930 <Light_Lightness_Set+0x210>)
 800f774:	715a      	strb	r2, [r3, #5]
    Light_LightnessParam.Delay_Time = plightness_param[4]; 
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	3304      	adds	r3, #4
 800f77a:	781a      	ldrb	r2, [r3, #0]
 800f77c:	4b6c      	ldr	r3, [pc, #432]	; (800f930 <Light_Lightness_Set+0x210>)
 800f77e:	719a      	strb	r2, [r3, #6]
    
    /* Copy the received data in status message which needs
    to be set in application messages */  
    Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 = Light_LightnessParam.TargetLightnessStatus;
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	781b      	ldrb	r3, [r3, #0]
 800f784:	4619      	mov	r1, r3
 800f786:	4b6a      	ldr	r3, [pc, #424]	; (800f930 <Light_Lightness_Set+0x210>)
 800f788:	8818      	ldrh	r0, [r3, #0]
 800f78a:	4a6a      	ldr	r2, [pc, #424]	; (800f934 <Light_Lightness_Set+0x214>)
 800f78c:	460b      	mov	r3, r1
 800f78e:	00db      	lsls	r3, r3, #3
 800f790:	440b      	add	r3, r1
 800f792:	4413      	add	r3, r2
 800f794:	3304      	adds	r3, #4
 800f796:	4602      	mov	r2, r0
 800f798:	801a      	strh	r2, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessParam.TransitionTime;
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	781b      	ldrb	r3, [r3, #0]
 800f79e:	4619      	mov	r1, r3
 800f7a0:	4b63      	ldr	r3, [pc, #396]	; (800f930 <Light_Lightness_Set+0x210>)
 800f7a2:	7958      	ldrb	r0, [r3, #5]
 800f7a4:	4a63      	ldr	r2, [pc, #396]	; (800f934 <Light_Lightness_Set+0x214>)
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	00db      	lsls	r3, r3, #3
 800f7aa:	440b      	add	r3, r1
 800f7ac:	4413      	add	r3, r2
 800f7ae:	3306      	adds	r3, #6
 800f7b0:	4602      	mov	r2, r0
 800f7b2:	701a      	strb	r2, [r3, #0]
    
    /* copy status parameters in Temporary parameters for transition 
    process.
    */
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
                   Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	4618      	mov	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	781b      	ldrb	r3, [r3, #0]
 800f7be:	461a      	mov	r2, r3
                   Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800f7c0:	495c      	ldr	r1, [pc, #368]	; (800f934 <Light_Lightness_Set+0x214>)
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	00db      	lsls	r3, r3, #3
 800f7c6:	4403      	add	r3, r0
 800f7c8:	440b      	add	r3, r1
 800f7ca:	3304      	adds	r3, #4
 800f7cc:	881b      	ldrh	r3, [r3, #0]
 800f7ce:	b298      	uxth	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = 
 800f7d0:	4959      	ldr	r1, [pc, #356]	; (800f938 <Light_Lightness_Set+0x218>)
 800f7d2:	4613      	mov	r3, r2
 800f7d4:	005b      	lsls	r3, r3, #1
 800f7d6:	4413      	add	r3, r2
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	4413      	add	r3, r2
 800f7dc:	440b      	add	r3, r1
 800f7de:	3306      	adds	r3, #6
 800f7e0:	4602      	mov	r2, r0
 800f7e2:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
                   Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	4618      	mov	r0, r3
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	781b      	ldrb	r3, [r3, #0]
 800f7ee:	461a      	mov	r2, r3
                   Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800f7f0:	4950      	ldr	r1, [pc, #320]	; (800f934 <Light_Lightness_Set+0x214>)
 800f7f2:	4603      	mov	r3, r0
 800f7f4:	00db      	lsls	r3, r3, #3
 800f7f6:	4403      	add	r3, r0
 800f7f8:	440b      	add	r3, r1
 800f7fa:	3306      	adds	r3, #6
 800f7fc:	7818      	ldrb	r0, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = 
 800f7fe:	494e      	ldr	r1, [pc, #312]	; (800f938 <Light_Lightness_Set+0x218>)
 800f800:	4613      	mov	r3, r2
 800f802:	005b      	lsls	r3, r3, #1
 800f804:	4413      	add	r3, r2
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	440b      	add	r3, r1
 800f80c:	330c      	adds	r3, #12
 800f80e:	4602      	mov	r2, r0
 800f810:	701a      	strb	r2, [r3, #0]
    
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    Light_GetStepValue(plightness_param[3],pmsgParam->elementIndex);
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	3303      	adds	r3, #3
 800f816:	781a      	ldrb	r2, [r3, #0]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	4619      	mov	r1, r3
 800f81e:	4610      	mov	r0, r2
 800f820:	f001 f870 	bl	8010904 <Light_GetStepValue>
    /*option parameter flag, enable to sent all required parameter in status.*/
    Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag = LIGHT_LIGHTNESS_TRANSITION_START;  
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	781b      	ldrb	r3, [r3, #0]
 800f828:	4619      	mov	r1, r3
 800f82a:	4a44      	ldr	r2, [pc, #272]	; (800f93c <Light_Lightness_Set+0x21c>)
 800f82c:	460b      	mov	r3, r1
 800f82e:	005b      	lsls	r3, r3, #1
 800f830:	440b      	add	r3, r1
 800f832:	4413      	add	r3, r2
 800f834:	2201      	movs	r2, #1
 800f836:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 1;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	4619      	mov	r1, r3
 800f83e:	4a3f      	ldr	r2, [pc, #252]	; (800f93c <Light_Lightness_Set+0x21c>)
 800f840:	460b      	mov	r3, r1
 800f842:	005b      	lsls	r3, r3, #1
 800f844:	440b      	add	r3, r1
 800f846:	4413      	add	r3, r2
 800f848:	3301      	adds	r3, #1
 800f84a:	2201      	movs	r2, #1
 800f84c:	701a      	strb	r2, [r3, #0]
 800f84e:	e03f      	b.n	800f8d0 <Light_Lightness_Set+0x1b0>
                                          pmsgParam->elementIndex);
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
    Light_TransitionParameterReset(pmsgParam->elementIndex);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	781b      	ldrb	r3, [r3, #0]
 800f854:	4618      	mov	r0, r3
 800f856:	f002 f95d 	bl	8011b14 <Light_TransitionParameterReset>
		
    Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 = 
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	781b      	ldrb	r3, [r3, #0]
 800f85e:	4619      	mov	r1, r3
                                     Light_LightnessParam.TargetLightnessStatus; 
 800f860:	4b33      	ldr	r3, [pc, #204]	; (800f930 <Light_Lightness_Set+0x210>)
 800f862:	8818      	ldrh	r0, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 = 
 800f864:	4a33      	ldr	r2, [pc, #204]	; (800f934 <Light_Lightness_Set+0x214>)
 800f866:	460b      	mov	r3, r1
 800f868:	00db      	lsls	r3, r3, #3
 800f86a:	440b      	add	r3, r1
 800f86c:	4413      	add	r3, r2
 800f86e:	4602      	mov	r2, r0
 800f870:	801a      	strh	r2, [r3, #0]
#endif   
     
    if(Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 > 0x00)
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	4619      	mov	r1, r3
 800f878:	4a2e      	ldr	r2, [pc, #184]	; (800f934 <Light_Lightness_Set+0x214>)
 800f87a:	460b      	mov	r3, r1
 800f87c:	00db      	lsls	r3, r3, #3
 800f87e:	440b      	add	r3, r1
 800f880:	4413      	add	r3, r2
 800f882:	881b      	ldrh	r3, [r3, #0]
 800f884:	b29b      	uxth	r3, r3
 800f886:	2b00      	cmp	r3, #0
 800f888:	d022      	beq.n	800f8d0 <Light_Lightness_Set+0x1b0>
    {
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
        Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	781b      	ldrb	r3, [r3, #0]
 800f88e:	4618      	mov	r0, r3
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	781b      	ldrb	r3, [r3, #0]
 800f894:	4619      	mov	r1, r3
        Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f896:	4a27      	ldr	r2, [pc, #156]	; (800f934 <Light_Lightness_Set+0x214>)
 800f898:	4603      	mov	r3, r0
 800f89a:	00db      	lsls	r3, r3, #3
 800f89c:	4403      	add	r3, r0
 800f89e:	4413      	add	r3, r2
 800f8a0:	881b      	ldrh	r3, [r3, #0]
 800f8a2:	b298      	uxth	r0, r3
      Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = 
 800f8a4:	4a23      	ldr	r2, [pc, #140]	; (800f934 <Light_Lightness_Set+0x214>)
 800f8a6:	460b      	mov	r3, r1
 800f8a8:	00db      	lsls	r3, r3, #3
 800f8aa:	440b      	add	r3, r1
 800f8ac:	4413      	add	r3, r2
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	f8a3 2007 	strh.w	r2, [r3, #7]
      
      (LightAppli_cb.Lightness_Last_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex],                                     
 800f8b4:	4b22      	ldr	r3, [pc, #136]	; (800f940 <Light_Lightness_Set+0x220>)
 800f8b6:	699a      	ldr	r2, [r3, #24]
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	781b      	ldrb	r3, [r3, #0]
 800f8bc:	4619      	mov	r1, r3
 800f8be:	460b      	mov	r3, r1
 800f8c0:	00db      	lsls	r3, r3, #3
 800f8c2:	440b      	add	r3, r1
 800f8c4:	491b      	ldr	r1, [pc, #108]	; (800f934 <Light_Lightness_Set+0x214>)
 800f8c6:	1858      	adds	r0, r3, r1
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	4619      	mov	r1, r3
 800f8ce:	4790      	blx	r2
                                            pmsgParam->elementIndex);
    }
  }
   
  /* Application Callback */
  (LightAppli_cb.Lightness_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex], 
 800f8d0:	4b1b      	ldr	r3, [pc, #108]	; (800f940 <Light_Lightness_Set+0x220>)
 800f8d2:	681c      	ldr	r4, [r3, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	4613      	mov	r3, r2
 800f8dc:	00db      	lsls	r3, r3, #3
 800f8de:	4413      	add	r3, r2
 800f8e0:	4a14      	ldr	r2, [pc, #80]	; (800f934 <Light_Lightness_Set+0x214>)
 800f8e2:	1898      	adds	r0, r3, r2
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	88da      	ldrh	r2, [r3, #6]
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	781b      	ldrb	r3, [r3, #0]
 800f8ec:	2100      	movs	r1, #0
 800f8ee:	47a0      	blx	r4
                                   0,pmsgParam->dst_peer, 
                                   pmsgParam->elementIndex);
  
#ifdef ENABLE_MODEL_BINDING    
  /* Binding of actual light lightness with other models */
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	781a      	ldrb	r2, [r3, #0]
              Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);  
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	4618      	mov	r0, r3
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f8fa:	4910      	ldr	r1, [pc, #64]	; (800f93c <Light_Lightness_Set+0x21c>)
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	005b      	lsls	r3, r3, #1
 800f900:	4403      	add	r3, r0
 800f902:	440b      	add	r3, r1
 800f904:	7819      	ldrb	r1, [r3, #0]
              Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);  
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	781b      	ldrb	r3, [r3, #0]
 800f90a:	461c      	mov	r4, r3
  Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , length,pmsgParam->elementIndex,
 800f90c:	480b      	ldr	r0, [pc, #44]	; (800f93c <Light_Lightness_Set+0x21c>)
 800f90e:	4623      	mov	r3, r4
 800f910:	005b      	lsls	r3, r3, #1
 800f912:	4423      	add	r3, r4
 800f914:	4403      	add	r3, r0
 800f916:	3302      	adds	r3, #2
 800f918:	781b      	ldrb	r3, [r3, #0]
 800f91a:	9300      	str	r3, [sp, #0]
 800f91c:	460b      	mov	r3, r1
 800f91e:	68b9      	ldr	r1, [r7, #8]
 800f920:	2002      	movs	r0, #2
 800f922:	f001 fb9f 	bl	8011064 <Light_Lightness_Binding>
#endif  
  
  return MOBLE_RESULT_SUCCESS;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3714      	adds	r7, #20
 800f92c:	46bd      	mov	sp, r7
 800f92e:	bd90      	pop	{r4, r7, pc}
 800f930:	200045cc 	.word	0x200045cc
 800f934:	200045d4 	.word	0x200045d4
 800f938:	200045bc 	.word	0x200045bc
 800f93c:	200045b4 	.word	0x200045b4
 800f940:	08032c78 	.word	0x08032c78

0800f944 <Light_Lightness_Status>:
*          elementIndex, src, dst addresses, TTL, RSSI, NetKey & ApkmpKey Offset
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_Lightness_Status(MOBLEUINT8* pLightness_status, MOBLEUINT32* pLength,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b084      	sub	sp, #16
 800f948:	af00      	add	r7, sp, #0
 800f94a:	60f8      	str	r0, [r7, #12]
 800f94c:	60b9      	str	r1, [r7, #8]
 800f94e:	607a      	str	r2, [r7, #4]
  Remaining Time        1B Time to complete the transition to the target Light Lightness
  
  */ 
  
  TRACE_M(TF_LIGHT_M, "Light_Lightness_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#824B! \n\r");
 800f950:	2100      	movs	r1, #0
 800f952:	4840      	ldr	r0, [pc, #256]	; (800fa54 <Light_Lightness_Status+0x110>)
 800f954:	f7fd fe0c 	bl	800d570 <TraceHeader>
 800f958:	483f      	ldr	r0, [pc, #252]	; (800fa58 <Light_Lightness_Status+0x114>)
 800f95a:	f019 fe0d 	bl	8029578 <iprintf>
  
  *(pLightness_status) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16;
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	781b      	ldrb	r3, [r3, #0]
 800f962:	4619      	mov	r1, r3
 800f964:	4a3d      	ldr	r2, [pc, #244]	; (800fa5c <Light_Lightness_Status+0x118>)
 800f966:	460b      	mov	r3, r1
 800f968:	00db      	lsls	r3, r3, #3
 800f96a:	440b      	add	r3, r1
 800f96c:	4413      	add	r3, r2
 800f96e:	881b      	ldrh	r3, [r3, #0]
 800f970:	b29b      	uxth	r3, r3
 800f972:	b2da      	uxtb	r2, r3
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	701a      	strb	r2, [r3, #0]
  *(pLightness_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessPresentValue16 >> 8;
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	781b      	ldrb	r3, [r3, #0]
 800f97c:	4619      	mov	r1, r3
 800f97e:	4a37      	ldr	r2, [pc, #220]	; (800fa5c <Light_Lightness_Status+0x118>)
 800f980:	460b      	mov	r3, r1
 800f982:	00db      	lsls	r3, r3, #3
 800f984:	440b      	add	r3, r1
 800f986:	4413      	add	r3, r2
 800f988:	881b      	ldrh	r3, [r3, #0]
 800f98a:	b29b      	uxth	r3, r3
 800f98c:	0a1b      	lsrs	r3, r3, #8
 800f98e:	b29a      	uxth	r2, r3
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	3301      	adds	r3, #1
 800f994:	b2d2      	uxtb	r2, r2
 800f996:	701a      	strb	r2, [r3, #0]
  
  /* This condition will be processed when message received will have
  transition time and delay parameter.
  or the transition will be in process
  */
  if((Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam == 1) || (Light_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	781b      	ldrb	r3, [r3, #0]
 800f99c:	4619      	mov	r1, r3
 800f99e:	4a30      	ldr	r2, [pc, #192]	; (800fa60 <Light_Lightness_Status+0x11c>)
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	005b      	lsls	r3, r3, #1
 800f9a4:	440b      	add	r3, r1
 800f9a6:	4413      	add	r3, r2
 800f9a8:	3301      	adds	r3, #1
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d00c      	beq.n	800f9ca <Light_Lightness_Status+0x86>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	781b      	ldrb	r3, [r3, #0]
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	4a2b      	ldr	r2, [pc, #172]	; (800fa64 <Light_Lightness_Status+0x120>)
 800f9b8:	460b      	mov	r3, r1
 800f9ba:	009b      	lsls	r3, r3, #2
 800f9bc:	440b      	add	r3, r1
 800f9be:	005b      	lsls	r3, r3, #1
 800f9c0:	4413      	add	r3, r2
 800f9c2:	f993 3000 	ldrsb.w	r3, [r3]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d03b      	beq.n	800fa42 <Light_Lightness_Status+0xfe>
  {
    *(pLightness_status+2) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	781b      	ldrb	r3, [r3, #0]
 800f9ce:	4619      	mov	r1, r3
 800f9d0:	4a22      	ldr	r2, [pc, #136]	; (800fa5c <Light_Lightness_Status+0x118>)
 800f9d2:	460b      	mov	r3, r1
 800f9d4:	00db      	lsls	r3, r3, #3
 800f9d6:	440b      	add	r3, r1
 800f9d8:	4413      	add	r3, r2
 800f9da:	3304      	adds	r3, #4
 800f9dc:	881b      	ldrh	r3, [r3, #0]
 800f9de:	b29a      	uxth	r2, r3
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	3302      	adds	r3, #2
 800f9e4:	b2d2      	uxtb	r2, r2
 800f9e6:	701a      	strb	r2, [r3, #0]
    *(pLightness_status+3) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 >>8;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	4a1b      	ldr	r2, [pc, #108]	; (800fa5c <Light_Lightness_Status+0x118>)
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	00db      	lsls	r3, r3, #3
 800f9f4:	440b      	add	r3, r1
 800f9f6:	4413      	add	r3, r2
 800f9f8:	3304      	adds	r3, #4
 800f9fa:	881b      	ldrh	r3, [r3, #0]
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	0a1b      	lsrs	r3, r3, #8
 800fa00:	b29a      	uxth	r2, r3
 800fa02:	68fb      	ldr	r3, [r7, #12]
 800fa04:	3303      	adds	r3, #3
 800fa06:	b2d2      	uxtb	r2, r2
 800fa08:	701a      	strb	r2, [r3, #0]
    *(pLightness_status+4) = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	781b      	ldrb	r3, [r3, #0]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	1d1a      	adds	r2, r3, #4
 800fa14:	4911      	ldr	r1, [pc, #68]	; (800fa5c <Light_Lightness_Status+0x118>)
 800fa16:	4603      	mov	r3, r0
 800fa18:	00db      	lsls	r3, r3, #3
 800fa1a:	4403      	add	r3, r0
 800fa1c:	440b      	add	r3, r1
 800fa1e:	3306      	adds	r3, #6
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	7013      	strb	r3, [r2, #0]
    *pLength = 5;     
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	2205      	movs	r2, #5
 800fa28:	601a      	str	r2, [r3, #0]
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 0;    
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	781b      	ldrb	r3, [r3, #0]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	4a0b      	ldr	r2, [pc, #44]	; (800fa60 <Light_Lightness_Status+0x11c>)
 800fa32:	460b      	mov	r3, r1
 800fa34:	005b      	lsls	r3, r3, #1
 800fa36:	440b      	add	r3, r1
 800fa38:	4413      	add	r3, r2
 800fa3a:	3301      	adds	r3, #1
 800fa3c:	2200      	movs	r2, #0
 800fa3e:	701a      	strb	r2, [r3, #0]
 800fa40:	e002      	b.n	800fa48 <Light_Lightness_Status+0x104>
  else
  {    
    /* When no optional parameter received then, target value will
    be sent in status message.
    */    
    *pLength = 2;          
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	2202      	movs	r2, #2
 800fa46:	601a      	str	r2, [r3, #0]
     TRACE_M(TF_LIGHT_M, "Light_Lightness_Status sent without transition \r\n");
  }
  
  return MOBLE_RESULT_SUCCESS;
 800fa48:	2300      	movs	r3, #0
}
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	3710      	adds	r7, #16
 800fa4e:	46bd      	mov	sp, r7
 800fa50:	bd80      	pop	{r7, pc}
 800fa52:	bf00      	nop
 800fa54:	08033100 	.word	0x08033100
 800fa58:	0802f444 	.word	0x0802f444
 800fa5c:	200045d4 	.word	0x200045d4
 800fa60:	200045b4 	.word	0x200045b4
 800fa64:	200045a8 	.word	0x200045a8

0800fa68 <Light_LightnessLinear_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLinear_Set(const MOBLEUINT8* plightnessLinear_param,\
                                        MOBLEUINT32 length,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800fa68:	b590      	push	{r4, r7, lr}
 800fa6a:	b089      	sub	sp, #36	; 0x24
 800fa6c:	af02      	add	r7, sp, #8
 800fa6e:	60f8      	str	r0, [r7, #12]
 800fa70:	60b9      	str	r1, [r7, #8]
 800fa72:	607a      	str	r2, [r7, #4]
  Lightness             2B The target value of the Light Lightness Actual state. 
  TID                   1B Transaction Identifier
  Transition Time       1B Format as defined in Section 3.1.3. (Optional)
  Delay                 1B Message execution delay in 5 millisecond steps (C.1)
  */
  MOBLEUINT8 OptionalValid = 0;
 800fa74:	2300      	movs	r3, #0
 800fa76:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLinear_Set callback received \r\n");
  
  Light_LightnessParam.TargetLightnessLinearStatus = ((plightnessLinear_param[0])
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	b21a      	sxth	r2, r3
                                                      | (plightnessLinear_param[1] << 8));
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	3301      	adds	r3, #1
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	021b      	lsls	r3, r3, #8
 800fa86:	b21b      	sxth	r3, r3
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	b21b      	sxth	r3, r3
 800fa8c:	b29a      	uxth	r2, r3
  Light_LightnessParam.TargetLightnessLinearStatus = ((plightnessLinear_param[0])
 800fa8e:	4b61      	ldr	r3, [pc, #388]	; (800fc14 <Light_LightnessLinear_Set+0x1ac>)
 800fa90:	805a      	strh	r2, [r3, #2]
  Light_LightnessParam.TID = plightnessLinear_param[2];
 800fa92:	68fb      	ldr	r3, [r7, #12]
 800fa94:	3302      	adds	r3, #2
 800fa96:	781a      	ldrb	r2, [r3, #0]
 800fa98:	4b5e      	ldr	r3, [pc, #376]	; (800fc14 <Light_LightnessLinear_Set+0x1ac>)
 800fa9a:	711a      	strb	r2, [r3, #4]
  
  /* Check for Optional Parameters */ 
  if ((length > 3) && (plightnessLinear_param[3] !=0))
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	2b03      	cmp	r3, #3
 800faa0:	d976      	bls.n	800fb90 <Light_LightnessLinear_Set+0x128>
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	3303      	adds	r3, #3
 800faa6:	781b      	ldrb	r3, [r3, #0]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d071      	beq.n	800fb90 <Light_LightnessLinear_Set+0x128>
  {
    /* Transition_Time & Delay_Time Present */
    Light_LightnessParam.TransitionTime = plightnessLinear_param[3];
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	3303      	adds	r3, #3
 800fab0:	781a      	ldrb	r2, [r3, #0]
 800fab2:	4b58      	ldr	r3, [pc, #352]	; (800fc14 <Light_LightnessLinear_Set+0x1ac>)
 800fab4:	715a      	strb	r2, [r3, #5]
    Light_LightnessParam.Delay_Time = plightnessLinear_param[4]; 
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	3304      	adds	r3, #4
 800faba:	781a      	ldrb	r2, [r3, #0]
 800fabc:	4b55      	ldr	r3, [pc, #340]	; (800fc14 <Light_LightnessLinear_Set+0x1ac>)
 800fabe:	719a      	strb	r2, [r3, #6]
    
    /* Copy the received data in status message which needs
    to be set in application messages */
    Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 = Light_LightnessParam.TargetLightnessLinearStatus;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	781b      	ldrb	r3, [r3, #0]
 800fac4:	4619      	mov	r1, r3
 800fac6:	4b53      	ldr	r3, [pc, #332]	; (800fc14 <Light_LightnessLinear_Set+0x1ac>)
 800fac8:	8858      	ldrh	r0, [r3, #2]
 800faca:	4a53      	ldr	r2, [pc, #332]	; (800fc18 <Light_LightnessLinear_Set+0x1b0>)
 800facc:	460b      	mov	r3, r1
 800face:	00db      	lsls	r3, r3, #3
 800fad0:	440b      	add	r3, r1
 800fad2:	4413      	add	r3, r2
 800fad4:	3304      	adds	r3, #4
 800fad6:	4602      	mov	r2, r0
 800fad8:	801a      	strh	r2, [r3, #0]
    Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessParam.TransitionTime;
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	781b      	ldrb	r3, [r3, #0]
 800fade:	4619      	mov	r1, r3
 800fae0:	4b4c      	ldr	r3, [pc, #304]	; (800fc14 <Light_LightnessLinear_Set+0x1ac>)
 800fae2:	7958      	ldrb	r0, [r3, #5]
 800fae4:	4a4c      	ldr	r2, [pc, #304]	; (800fc18 <Light_LightnessLinear_Set+0x1b0>)
 800fae6:	460b      	mov	r3, r1
 800fae8:	00db      	lsls	r3, r3, #3
 800faea:	440b      	add	r3, r1
 800faec:	4413      	add	r3, r2
 800faee:	3306      	adds	r3, #6
 800faf0:	4602      	mov	r2, r0
 800faf2:	701a      	strb	r2, [r3, #0]
    /* copy status parameters in Temporary parameters for transition 
    process.
    */
    Light_TemporaryStatus[pmsgParam->elementIndex].TargetParam_1 = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;    
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	781b      	ldrb	r3, [r3, #0]
 800faf8:	4618      	mov	r0, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	461a      	mov	r2, r3
 800fb00:	4945      	ldr	r1, [pc, #276]	; (800fc18 <Light_LightnessLinear_Set+0x1b0>)
 800fb02:	4603      	mov	r3, r0
 800fb04:	00db      	lsls	r3, r3, #3
 800fb06:	4403      	add	r3, r0
 800fb08:	440b      	add	r3, r1
 800fb0a:	3304      	adds	r3, #4
 800fb0c:	881b      	ldrh	r3, [r3, #0]
 800fb0e:	b298      	uxth	r0, r3
 800fb10:	4942      	ldr	r1, [pc, #264]	; (800fc1c <Light_LightnessLinear_Set+0x1b4>)
 800fb12:	4613      	mov	r3, r2
 800fb14:	005b      	lsls	r3, r3, #1
 800fb16:	4413      	add	r3, r2
 800fb18:	009b      	lsls	r3, r3, #2
 800fb1a:	4413      	add	r3, r2
 800fb1c:	440b      	add	r3, r1
 800fb1e:	3306      	adds	r3, #6
 800fb20:	4602      	mov	r2, r0
 800fb22:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[pmsgParam->elementIndex].RemainingTime = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	461a      	mov	r2, r3
 800fb30:	4939      	ldr	r1, [pc, #228]	; (800fc18 <Light_LightnessLinear_Set+0x1b0>)
 800fb32:	4603      	mov	r3, r0
 800fb34:	00db      	lsls	r3, r3, #3
 800fb36:	4403      	add	r3, r0
 800fb38:	440b      	add	r3, r1
 800fb3a:	3306      	adds	r3, #6
 800fb3c:	7818      	ldrb	r0, [r3, #0]
 800fb3e:	4937      	ldr	r1, [pc, #220]	; (800fc1c <Light_LightnessLinear_Set+0x1b4>)
 800fb40:	4613      	mov	r3, r2
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	4413      	add	r3, r2
 800fb46:	009b      	lsls	r3, r3, #2
 800fb48:	4413      	add	r3, r2
 800fb4a:	440b      	add	r3, r1
 800fb4c:	330c      	adds	r3, #12
 800fb4e:	4602      	mov	r2, r0
 800fb50:	701a      	strb	r2, [r3, #0]
    /* Function to calculate time parameters, step resolution
    step size for transition state machine.
    */
    
    Light_GetStepValue(plightnessLinear_param[3],pmsgParam->elementIndex);
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3303      	adds	r3, #3
 800fb56:	781a      	ldrb	r2, [r3, #0]
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	781b      	ldrb	r3, [r3, #0]
 800fb5c:	4619      	mov	r1, r3
 800fb5e:	4610      	mov	r0, r2
 800fb60:	f000 fed0 	bl	8010904 <Light_GetStepValue>
    /*transition process enable flag. */
    Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag = LIGHT_LINEAR_TRANSITION_START; 
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	781b      	ldrb	r3, [r3, #0]
 800fb68:	4619      	mov	r1, r3
 800fb6a:	4a2d      	ldr	r2, [pc, #180]	; (800fc20 <Light_LightnessLinear_Set+0x1b8>)
 800fb6c:	460b      	mov	r3, r1
 800fb6e:	005b      	lsls	r3, r3, #1
 800fb70:	440b      	add	r3, r1
 800fb72:	4413      	add	r3, r2
 800fb74:	2202      	movs	r2, #2
 800fb76:	701a      	strb	r2, [r3, #0]
    /*option parameter flag, enable to sent all required parameter in status.*/
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 1;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	781b      	ldrb	r3, [r3, #0]
 800fb7c:	4619      	mov	r1, r3
 800fb7e:	4a28      	ldr	r2, [pc, #160]	; (800fc20 <Light_LightnessLinear_Set+0x1b8>)
 800fb80:	460b      	mov	r3, r1
 800fb82:	005b      	lsls	r3, r3, #1
 800fb84:	440b      	add	r3, r1
 800fb86:	4413      	add	r3, r2
 800fb88:	3301      	adds	r3, #1
 800fb8a:	2201      	movs	r2, #1
 800fb8c:	701a      	strb	r2, [r3, #0]
 800fb8e:	e011      	b.n	800fbb4 <Light_LightnessLinear_Set+0x14c>
                                          pmsgParam->elementIndex);
#else
    /* When no optional parameter received, target value will
    be set as present value in application.
    */
    Light_TransitionParameterReset(pmsgParam->elementIndex);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	781b      	ldrb	r3, [r3, #0]
 800fb94:	4618      	mov	r0, r3
 800fb96:	f001 ffbd 	bl	8011b14 <Light_TransitionParameterReset>
		
    Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 = 
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	4619      	mov	r1, r3
      Light_LightnessParam.TargetLightnessLinearStatus; 
 800fba0:	4b1c      	ldr	r3, [pc, #112]	; (800fc14 <Light_LightnessLinear_Set+0x1ac>)
 800fba2:	8858      	ldrh	r0, [r3, #2]
    Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 = 
 800fba4:	4a1c      	ldr	r2, [pc, #112]	; (800fc18 <Light_LightnessLinear_Set+0x1b0>)
 800fba6:	460b      	mov	r3, r1
 800fba8:	00db      	lsls	r3, r3, #3
 800fbaa:	440b      	add	r3, r1
 800fbac:	4413      	add	r3, r2
 800fbae:	3302      	adds	r3, #2
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	801a      	strh	r2, [r3, #0]
#endif  
  }
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Linear_Set_cb)(&Light_LightnessStatus[pmsgParam->elementIndex], OptionalValid, pmsgParam->dst_peer, pmsgParam->elementIndex);
 800fbb4:	4b1b      	ldr	r3, [pc, #108]	; (800fc24 <Light_LightnessLinear_Set+0x1bc>)
 800fbb6:	689c      	ldr	r4, [r3, #8]
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	781b      	ldrb	r3, [r3, #0]
 800fbbc:	461a      	mov	r2, r3
 800fbbe:	4613      	mov	r3, r2
 800fbc0:	00db      	lsls	r3, r3, #3
 800fbc2:	4413      	add	r3, r2
 800fbc4:	4a14      	ldr	r2, [pc, #80]	; (800fc18 <Light_LightnessLinear_Set+0x1b0>)
 800fbc6:	1898      	adds	r0, r3, r2
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	88da      	ldrh	r2, [r3, #6]
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	7df9      	ldrb	r1, [r7, #23]
 800fbd2:	47a0      	blx	r4
  
#ifdef ENABLE_MODEL_BINDING   
  /* Binding of data of light lightness with light linear */
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	781a      	ldrb	r2, [r3, #0]
                  Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	781b      	ldrb	r3, [r3, #0]
 800fbdc:	4618      	mov	r0, r3
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800fbde:	4910      	ldr	r1, [pc, #64]	; (800fc20 <Light_LightnessLinear_Set+0x1b8>)
 800fbe0:	4603      	mov	r3, r0
 800fbe2:	005b      	lsls	r3, r3, #1
 800fbe4:	4403      	add	r3, r0
 800fbe6:	440b      	add	r3, r1
 800fbe8:	7819      	ldrb	r1, [r3, #0]
                  Light_ModelFlag[pmsgParam->elementIndex].LightTransitionFlag,Light_ModelFlag[pmsgParam->elementIndex].Light_Trnsn_Cmplt);
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	781b      	ldrb	r3, [r3, #0]
 800fbee:	461c      	mov	r4, r3
  Light_Lightness_Linear_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET ,length, pmsgParam->elementIndex,
 800fbf0:	480b      	ldr	r0, [pc, #44]	; (800fc20 <Light_LightnessLinear_Set+0x1b8>)
 800fbf2:	4623      	mov	r3, r4
 800fbf4:	005b      	lsls	r3, r3, #1
 800fbf6:	4423      	add	r3, r4
 800fbf8:	4403      	add	r3, r0
 800fbfa:	3302      	adds	r3, #2
 800fbfc:	781b      	ldrb	r3, [r3, #0]
 800fbfe:	9300      	str	r3, [sp, #0]
 800fc00:	460b      	mov	r3, r1
 800fc02:	68b9      	ldr	r1, [r7, #8]
 800fc04:	2003      	movs	r0, #3
 800fc06:	f001 f993 	bl	8010f30 <Light_Lightness_Linear_Binding>
#endif   

#ifdef ENABLE_LIGHT_MODEL_SERVER_LC  
  Light_Linear_ActualBinding(length, pmsgParam->elementIndex);
#endif    
  return MOBLE_RESULT_SUCCESS;
 800fc0a:	2300      	movs	r3, #0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	371c      	adds	r7, #28
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd90      	pop	{r4, r7, pc}
 800fc14:	200045cc 	.word	0x200045cc
 800fc18:	200045d4 	.word	0x200045d4
 800fc1c:	200045bc 	.word	0x200045bc
 800fc20:	200045b4 	.word	0x200045b4
 800fc24:	08032c78 	.word	0x08032c78

0800fc28 <Light_LightnessLinear_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLinear_Status(MOBLEUINT8* pLightnessLinear_status,
                                           MOBLEUINT32 *pLength,\
                               MODEL_MessageHeader_t *pmsgParam)
{
 800fc28:	b580      	push	{r7, lr}
 800fc2a:	b084      	sub	sp, #16
 800fc2c:	af00      	add	r7, sp, #0
 800fc2e:	60f8      	str	r0, [r7, #12]
 800fc30:	60b9      	str	r1, [r7, #8]
 800fc32:	607a      	str	r2, [r7, #4]
  Target Lightness      2B The target value of the Light Lightness Linear state (Optional).
  Remaining Time        1B Time to complete the transition to the target Light Lightness Li
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLinear_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#824F! \n\r");
 800fc34:	2100      	movs	r1, #0
 800fc36:	4841      	ldr	r0, [pc, #260]	; (800fd3c <Light_LightnessLinear_Status+0x114>)
 800fc38:	f7fd fc9a 	bl	800d570 <TraceHeader>
 800fc3c:	4840      	ldr	r0, [pc, #256]	; (800fd40 <Light_LightnessLinear_Status+0x118>)
 800fc3e:	f019 fc9b 	bl	8029578 <iprintf>
  
  *(pLightnessLinear_status) = Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	781b      	ldrb	r3, [r3, #0]
 800fc46:	4619      	mov	r1, r3
 800fc48:	4a3e      	ldr	r2, [pc, #248]	; (800fd44 <Light_LightnessLinear_Status+0x11c>)
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	00db      	lsls	r3, r3, #3
 800fc4e:	440b      	add	r3, r1
 800fc50:	4413      	add	r3, r2
 800fc52:	3302      	adds	r3, #2
 800fc54:	881b      	ldrh	r3, [r3, #0]
 800fc56:	b29b      	uxth	r3, r3
 800fc58:	b2da      	uxtb	r2, r3
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	701a      	strb	r2, [r3, #0]
  *(pLightnessLinear_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LinearPresentValue16 >> 8;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	781b      	ldrb	r3, [r3, #0]
 800fc62:	4619      	mov	r1, r3
 800fc64:	4a37      	ldr	r2, [pc, #220]	; (800fd44 <Light_LightnessLinear_Status+0x11c>)
 800fc66:	460b      	mov	r3, r1
 800fc68:	00db      	lsls	r3, r3, #3
 800fc6a:	440b      	add	r3, r1
 800fc6c:	4413      	add	r3, r2
 800fc6e:	3302      	adds	r3, #2
 800fc70:	881b      	ldrh	r3, [r3, #0]
 800fc72:	b29b      	uxth	r3, r3
 800fc74:	0a1b      	lsrs	r3, r3, #8
 800fc76:	b29a      	uxth	r2, r3
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	b2d2      	uxtb	r2, r2
 800fc7e:	701a      	strb	r2, [r3, #0]
    
  /* This condition will be processed when message received will have
  transition time and delay parameter.
  or the transition will be in process
  */
  if((Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam == 1) || (Light_TimeParam[pmsgParam->elementIndex].StepValue != 0))
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	781b      	ldrb	r3, [r3, #0]
 800fc84:	4619      	mov	r1, r3
 800fc86:	4a30      	ldr	r2, [pc, #192]	; (800fd48 <Light_LightnessLinear_Status+0x120>)
 800fc88:	460b      	mov	r3, r1
 800fc8a:	005b      	lsls	r3, r3, #1
 800fc8c:	440b      	add	r3, r1
 800fc8e:	4413      	add	r3, r2
 800fc90:	3301      	adds	r3, #1
 800fc92:	781b      	ldrb	r3, [r3, #0]
 800fc94:	2b01      	cmp	r3, #1
 800fc96:	d00c      	beq.n	800fcb2 <Light_LightnessLinear_Status+0x8a>
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	781b      	ldrb	r3, [r3, #0]
 800fc9c:	4619      	mov	r1, r3
 800fc9e:	4a2b      	ldr	r2, [pc, #172]	; (800fd4c <Light_LightnessLinear_Status+0x124>)
 800fca0:	460b      	mov	r3, r1
 800fca2:	009b      	lsls	r3, r3, #2
 800fca4:	440b      	add	r3, r1
 800fca6:	005b      	lsls	r3, r3, #1
 800fca8:	4413      	add	r3, r2
 800fcaa:	f993 3000 	ldrsb.w	r3, [r3]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d03b      	beq.n	800fd2a <Light_LightnessLinear_Status+0x102>
  {
    *(pLightnessLinear_status+2) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16;
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	4619      	mov	r1, r3
 800fcb8:	4a22      	ldr	r2, [pc, #136]	; (800fd44 <Light_LightnessLinear_Status+0x11c>)
 800fcba:	460b      	mov	r3, r1
 800fcbc:	00db      	lsls	r3, r3, #3
 800fcbe:	440b      	add	r3, r1
 800fcc0:	4413      	add	r3, r2
 800fcc2:	3304      	adds	r3, #4
 800fcc4:	881b      	ldrh	r3, [r3, #0]
 800fcc6:	b29a      	uxth	r2, r3
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	3302      	adds	r3, #2
 800fccc:	b2d2      	uxtb	r2, r2
 800fcce:	701a      	strb	r2, [r3, #0]
    *(pLightnessLinear_status+3) = Light_LightnessStatus[pmsgParam->elementIndex].TargetValue16 >>8;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	781b      	ldrb	r3, [r3, #0]
 800fcd4:	4619      	mov	r1, r3
 800fcd6:	4a1b      	ldr	r2, [pc, #108]	; (800fd44 <Light_LightnessLinear_Status+0x11c>)
 800fcd8:	460b      	mov	r3, r1
 800fcda:	00db      	lsls	r3, r3, #3
 800fcdc:	440b      	add	r3, r1
 800fcde:	4413      	add	r3, r2
 800fce0:	3304      	adds	r3, #4
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	b29b      	uxth	r3, r3
 800fce6:	0a1b      	lsrs	r3, r3, #8
 800fce8:	b29a      	uxth	r2, r3
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	3303      	adds	r3, #3
 800fcee:	b2d2      	uxtb	r2, r2
 800fcf0:	701a      	strb	r2, [r3, #0]
    *(pLightnessLinear_status+4) = Light_LightnessStatus[pmsgParam->elementIndex].RemainingTime;
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	781b      	ldrb	r3, [r3, #0]
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	68fb      	ldr	r3, [r7, #12]
 800fcfa:	1d1a      	adds	r2, r3, #4
 800fcfc:	4911      	ldr	r1, [pc, #68]	; (800fd44 <Light_LightnessLinear_Status+0x11c>)
 800fcfe:	4603      	mov	r3, r0
 800fd00:	00db      	lsls	r3, r3, #3
 800fd02:	4403      	add	r3, r0
 800fd04:	440b      	add	r3, r1
 800fd06:	3306      	adds	r3, #6
 800fd08:	781b      	ldrb	r3, [r3, #0]
 800fd0a:	7013      	strb	r3, [r2, #0]
    *pLength = 5;
 800fd0c:	68bb      	ldr	r3, [r7, #8]
 800fd0e:	2205      	movs	r2, #5
 800fd10:	601a      	str	r2, [r3, #0]
    
    Light_ModelFlag[pmsgParam->elementIndex].LightOptionalParam = 0U;          
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	4619      	mov	r1, r3
 800fd18:	4a0b      	ldr	r2, [pc, #44]	; (800fd48 <Light_LightnessLinear_Status+0x120>)
 800fd1a:	460b      	mov	r3, r1
 800fd1c:	005b      	lsls	r3, r3, #1
 800fd1e:	440b      	add	r3, r1
 800fd20:	4413      	add	r3, r2
 800fd22:	3301      	adds	r3, #1
 800fd24:	2200      	movs	r2, #0
 800fd26:	701a      	strb	r2, [r3, #0]
 800fd28:	e002      	b.n	800fd30 <Light_LightnessLinear_Status+0x108>
  else
  { 
    /* When no optional parameter received then, target value will
    be sent in status message.
    */
    *pLength = 2;
 800fd2a:	68bb      	ldr	r3, [r7, #8]
 800fd2c:	2202      	movs	r2, #2
 800fd2e:	601a      	str	r2, [r3, #0]
  }
  
  return MOBLE_RESULT_SUCCESS;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3710      	adds	r7, #16
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop
 800fd3c:	08033118 	.word	0x08033118
 800fd40:	0802f450 	.word	0x0802f450
 800fd44:	200045d4 	.word	0x200045d4
 800fd48:	200045b4 	.word	0x200045b4
 800fd4c:	200045a8 	.word	0x200045a8

0800fd50 <Light_LightnessLast_Set>:

*/ 
MOBLE_RESULT Light_LightnessLast_Set(const MOBLEUINT8* plightnessLast_param, 
                                      MOBLEUINT32 length,\
                                      MODEL_MessageHeader_t *pmsgParam)
{
 800fd50:	b480      	push	{r7}
 800fd52:	b085      	sub	sp, #20
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	607a      	str	r2, [r7, #4]
  Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus = plightnessLast_param[1] << 8;
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	3301      	adds	r3, #1
 800fd60:	781b      	ldrb	r3, [r3, #0]
 800fd62:	b29b      	uxth	r3, r3
 800fd64:	687a      	ldr	r2, [r7, #4]
 800fd66:	7812      	ldrb	r2, [r2, #0]
 800fd68:	4611      	mov	r1, r2
 800fd6a:	021b      	lsls	r3, r3, #8
 800fd6c:	b298      	uxth	r0, r3
 800fd6e:	4a14      	ldr	r2, [pc, #80]	; (800fdc0 <Light_LightnessLast_Set+0x70>)
 800fd70:	460b      	mov	r3, r1
 800fd72:	00db      	lsls	r3, r3, #3
 800fd74:	440b      	add	r3, r1
 800fd76:	4413      	add	r3, r2
 800fd78:	4602      	mov	r2, r0
 800fd7a:	f8a3 2007 	strh.w	r2, [r3, #7]
  Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus |= plightnessLast_param[0];
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	4619      	mov	r1, r3
 800fd84:	4a0e      	ldr	r2, [pc, #56]	; (800fdc0 <Light_LightnessLast_Set+0x70>)
 800fd86:	460b      	mov	r3, r1
 800fd88:	00db      	lsls	r3, r3, #3
 800fd8a:	440b      	add	r3, r1
 800fd8c:	4413      	add	r3, r2
 800fd8e:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fd92:	b29a      	uxth	r2, r3
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	b29b      	uxth	r3, r3
 800fd9a:	6879      	ldr	r1, [r7, #4]
 800fd9c:	7809      	ldrb	r1, [r1, #0]
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	b298      	uxth	r0, r3
 800fda2:	4a07      	ldr	r2, [pc, #28]	; (800fdc0 <Light_LightnessLast_Set+0x70>)
 800fda4:	460b      	mov	r3, r1
 800fda6:	00db      	lsls	r3, r3, #3
 800fda8:	440b      	add	r3, r1
 800fdaa:	4413      	add	r3, r2
 800fdac:	4602      	mov	r2, r0
 800fdae:	f8a3 2007 	strh.w	r2, [r3, #7]
  
  return MOBLE_RESULT_SUCCESS;
 800fdb2:	2300      	movs	r3, #0
}  
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	3714      	adds	r7, #20
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr
 800fdc0:	200045d4 	.word	0x200045d4

0800fdc4 <Light_LightnessLast_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessLast_Status(MOBLEUINT8* pLightnessLast_status, 
                                         MOBLEUINT32 *pLength,\
                                         MODEL_MessageHeader_t *pmsgParam)
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b084      	sub	sp, #16
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	60f8      	str	r0, [r7, #12]
 800fdcc:	60b9      	str	r1, [r7, #8]
 800fdce:	607a      	str	r2, [r7, #4]
  Following is the status message:
  Lightness     2B The value of the Light Lightness Last. 
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessLast_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8253! \n\r");
 800fdd0:	2100      	movs	r1, #0
 800fdd2:	4816      	ldr	r0, [pc, #88]	; (800fe2c <Light_LightnessLast_Status+0x68>)
 800fdd4:	f7fd fbcc 	bl	800d570 <TraceHeader>
 800fdd8:	4815      	ldr	r0, [pc, #84]	; (800fe30 <Light_LightnessLast_Status+0x6c>)
 800fdda:	f019 fbcd 	bl	8029578 <iprintf>
  
  *pLightnessLast_status = Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus ;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	781b      	ldrb	r3, [r3, #0]
 800fde2:	4619      	mov	r1, r3
 800fde4:	4a13      	ldr	r2, [pc, #76]	; (800fe34 <Light_LightnessLast_Status+0x70>)
 800fde6:	460b      	mov	r3, r1
 800fde8:	00db      	lsls	r3, r3, #3
 800fdea:	440b      	add	r3, r1
 800fdec:	4413      	add	r3, r2
 800fdee:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fdf2:	b29b      	uxth	r3, r3
 800fdf4:	b2da      	uxtb	r2, r3
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	701a      	strb	r2, [r3, #0]
  *(pLightnessLast_status+1) = Light_LightnessStatus[pmsgParam->elementIndex].LightnessLastStatus >> 8;
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	781b      	ldrb	r3, [r3, #0]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	4a0c      	ldr	r2, [pc, #48]	; (800fe34 <Light_LightnessLast_Status+0x70>)
 800fe02:	460b      	mov	r3, r1
 800fe04:	00db      	lsls	r3, r3, #3
 800fe06:	440b      	add	r3, r1
 800fe08:	4413      	add	r3, r2
 800fe0a:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 800fe0e:	b29b      	uxth	r3, r3
 800fe10:	0a1b      	lsrs	r3, r3, #8
 800fe12:	b29a      	uxth	r2, r3
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	3301      	adds	r3, #1
 800fe18:	b2d2      	uxtb	r2, r2
 800fe1a:	701a      	strb	r2, [r3, #0]
  *pLength = 2;
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	2202      	movs	r2, #2
 800fe20:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800fe22:	2300      	movs	r3, #0
}
 800fe24:	4618      	mov	r0, r3
 800fe26:	3710      	adds	r7, #16
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}
 800fe2c:	08033138 	.word	0x08033138
 800fe30:	0802f45c 	.word	0x0802f45c
 800fe34:	200045d4 	.word	0x200045d4

0800fe38 <Light_LightnessDefault_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessDefault_Set(const MOBLEUINT8* plightnessDefault_param, 
                                         MOBLEUINT32 length,\
                                         MODEL_MessageHeader_t *pmsgParam)
{
 800fe38:	b590      	push	{r4, r7, lr}
 800fe3a:	b087      	sub	sp, #28
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	60f8      	str	r0, [r7, #12]
 800fe40:	60b9      	str	r1, [r7, #8]
 800fe42:	607a      	str	r2, [r7, #4]
  /* 6.3.1.12 Light Default Lightness Set
  Lightness   2B The target value of the Light Lightness Actual state. 
  */
  MOBLEUINT8 OptionalValid = 0;
 800fe44:	2300      	movs	r3, #0
 800fe46:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessDefault_Set callback received \r\n");  
  
  Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus = plightnessDefault_param[1] << 8;
 800fe48:	68fb      	ldr	r3, [r7, #12]
 800fe4a:	3301      	adds	r3, #1
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	b29b      	uxth	r3, r3
 800fe50:	687a      	ldr	r2, [r7, #4]
 800fe52:	7812      	ldrb	r2, [r2, #0]
 800fe54:	021b      	lsls	r3, r3, #8
 800fe56:	b299      	uxth	r1, r3
 800fe58:	4b12      	ldr	r3, [pc, #72]	; (800fea4 <Light_LightnessDefault_Set+0x6c>)
 800fe5a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus |= plightnessDefault_param[0];
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	781b      	ldrb	r3, [r3, #0]
 800fe62:	461a      	mov	r2, r3
 800fe64:	4b0f      	ldr	r3, [pc, #60]	; (800fea4 <Light_LightnessDefault_Set+0x6c>)
 800fe66:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	b29b      	uxth	r3, r3
 800fe70:	6879      	ldr	r1, [r7, #4]
 800fe72:	7809      	ldrb	r1, [r1, #0]
 800fe74:	4313      	orrs	r3, r2
 800fe76:	b29a      	uxth	r2, r3
 800fe78:	4b0a      	ldr	r3, [pc, #40]	; (800fea4 <Light_LightnessDefault_Set+0x6c>)
 800fe7a:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Default_Set_cb)(&Light_LightnessDefaultParam[pmsgParam->elementIndex], 
 800fe7e:	4b0a      	ldr	r3, [pc, #40]	; (800fea8 <Light_LightnessDefault_Set+0x70>)
 800fe80:	691c      	ldr	r4, [r3, #16]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	781b      	ldrb	r3, [r3, #0]
 800fe86:	005b      	lsls	r3, r3, #1
 800fe88:	4a06      	ldr	r2, [pc, #24]	; (800fea4 <Light_LightnessDefault_Set+0x6c>)
 800fe8a:	1898      	adds	r0, r3, r2
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	88da      	ldrh	r2, [r3, #6]
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	781b      	ldrb	r3, [r3, #0]
 800fe94:	7df9      	ldrb	r1, [r7, #23]
 800fe96:	47a0      	blx	r4
                                   OptionalValid, pmsgParam->dst_peer, pmsgParam->elementIndex);
  
  return MOBLE_RESULT_SUCCESS;
 800fe98:	2300      	movs	r3, #0
}
 800fe9a:	4618      	mov	r0, r3
 800fe9c:	371c      	adds	r7, #28
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd90      	pop	{r4, r7, pc}
 800fea2:	bf00      	nop
 800fea4:	200045e0 	.word	0x200045e0
 800fea8:	08032c78 	.word	0x08032c78

0800feac <Light_LightnessDefault_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessDefault_Status(MOBLEUINT8* pLightnessDefault_status,
                                            MOBLEUINT32 *pLength,\
                                            MODEL_MessageHeader_t *pmsgParam)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b084      	sub	sp, #16
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	60f8      	str	r0, [r7, #12]
 800feb4:	60b9      	str	r1, [r7, #8]
 800feb6:	607a      	str	r2, [r7, #4]
  Following is the status message:
  Lightness     2B The value of the Light Lightness Default state. 
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessDefault_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8255! \n\r");
 800feb8:	2100      	movs	r1, #0
 800feba:	4811      	ldr	r0, [pc, #68]	; (800ff00 <Light_LightnessDefault_Status+0x54>)
 800febc:	f7fd fb58 	bl	800d570 <TraceHeader>
 800fec0:	4810      	ldr	r0, [pc, #64]	; (800ff04 <Light_LightnessDefault_Status+0x58>)
 800fec2:	f019 fb59 	bl	8029578 <iprintf>
  
  /* Function call back to get the values from application*/
  *pLightnessDefault_status = Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus ;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	781b      	ldrb	r3, [r3, #0]
 800feca:	461a      	mov	r2, r3
 800fecc:	4b0e      	ldr	r3, [pc, #56]	; (800ff08 <Light_LightnessDefault_Status+0x5c>)
 800fece:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fed2:	b2da      	uxtb	r2, r3
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	701a      	strb	r2, [r3, #0]
  *(pLightnessDefault_status+1) = Light_LightnessDefaultParam[pmsgParam->elementIndex].LightnessDefaultStatus >>8;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	781b      	ldrb	r3, [r3, #0]
 800fedc:	461a      	mov	r2, r3
 800fede:	4b0a      	ldr	r3, [pc, #40]	; (800ff08 <Light_LightnessDefault_Status+0x5c>)
 800fee0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800fee4:	0a1b      	lsrs	r3, r3, #8
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	3301      	adds	r3, #1
 800feec:	b2d2      	uxtb	r2, r2
 800feee:	701a      	strb	r2, [r3, #0]
  *pLength = 2;
 800fef0:	68bb      	ldr	r3, [r7, #8]
 800fef2:	2202      	movs	r2, #2
 800fef4:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3710      	adds	r7, #16
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}
 800ff00:	08033154 	.word	0x08033154
 800ff04:	0802f468 	.word	0x0802f468
 800ff08:	200045e0 	.word	0x200045e0

0800ff0c <Light_LightnessRange_Set>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessRange_Set(const MOBLEUINT8* plightnessRange_param, 
                                       MOBLEUINT32 length,\
                                       MODEL_MessageHeader_t *pmsgParam)
{
 800ff0c:	b590      	push	{r4, r7, lr}
 800ff0e:	b087      	sub	sp, #28
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	60f8      	str	r0, [r7, #12]
 800ff14:	60b9      	str	r1, [r7, #8]
 800ff16:	607a      	str	r2, [r7, #4]
  /* 6.3.1.16 Light Lightness Range Set 
  Min Range    2B The Minimum range value of the Light Lightness state. 
  Max Range    2B The Maximum range value of the Light Lightness state         
  */
  MOBLEUINT8 OptionalValid = 0;
 800ff18:	2300      	movs	r3, #0
 800ff1a:	75fb      	strb	r3, [r7, #23]
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessRange_Set callback received \r\n");
  
  Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus = plightnessRange_param[1] << 8;
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	3301      	adds	r3, #1
 800ff20:	781b      	ldrb	r3, [r3, #0]
 800ff22:	b29b      	uxth	r3, r3
 800ff24:	687a      	ldr	r2, [r7, #4]
 800ff26:	7812      	ldrb	r2, [r2, #0]
 800ff28:	4611      	mov	r1, r2
 800ff2a:	021b      	lsls	r3, r3, #8
 800ff2c:	b298      	uxth	r0, r3
 800ff2e:	4a36      	ldr	r2, [pc, #216]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800ff30:	460b      	mov	r3, r1
 800ff32:	009b      	lsls	r3, r3, #2
 800ff34:	440b      	add	r3, r1
 800ff36:	4413      	add	r3, r2
 800ff38:	4602      	mov	r2, r0
 800ff3a:	f8a3 2001 	strh.w	r2, [r3, #1]
  Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus |= plightnessRange_param[0];
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	4619      	mov	r1, r3
 800ff44:	4a30      	ldr	r2, [pc, #192]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800ff46:	460b      	mov	r3, r1
 800ff48:	009b      	lsls	r3, r3, #2
 800ff4a:	440b      	add	r3, r1
 800ff4c:	4413      	add	r3, r2
 800ff4e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800ff52:	b29a      	uxth	r2, r3
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	b29b      	uxth	r3, r3
 800ff5a:	6879      	ldr	r1, [r7, #4]
 800ff5c:	7809      	ldrb	r1, [r1, #0]
 800ff5e:	4313      	orrs	r3, r2
 800ff60:	b298      	uxth	r0, r3
 800ff62:	4a29      	ldr	r2, [pc, #164]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800ff64:	460b      	mov	r3, r1
 800ff66:	009b      	lsls	r3, r3, #2
 800ff68:	440b      	add	r3, r1
 800ff6a:	4413      	add	r3, r2
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	f8a3 2001 	strh.w	r2, [r3, #1]
  
  Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus = plightnessRange_param[3] << 8;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	3303      	adds	r3, #3
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	b29b      	uxth	r3, r3
 800ff7a:	687a      	ldr	r2, [r7, #4]
 800ff7c:	7812      	ldrb	r2, [r2, #0]
 800ff7e:	4611      	mov	r1, r2
 800ff80:	021b      	lsls	r3, r3, #8
 800ff82:	b298      	uxth	r0, r3
 800ff84:	4a20      	ldr	r2, [pc, #128]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800ff86:	460b      	mov	r3, r1
 800ff88:	009b      	lsls	r3, r3, #2
 800ff8a:	440b      	add	r3, r1
 800ff8c:	4413      	add	r3, r2
 800ff8e:	4602      	mov	r2, r0
 800ff90:	f8a3 2003 	strh.w	r2, [r3, #3]
  Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus |= plightnessRange_param[2];
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	781b      	ldrb	r3, [r3, #0]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	4a1b      	ldr	r2, [pc, #108]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800ff9c:	460b      	mov	r3, r1
 800ff9e:	009b      	lsls	r3, r3, #2
 800ffa0:	440b      	add	r3, r1
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	3302      	adds	r3, #2
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	b29b      	uxth	r3, r3
 800ffb2:	6879      	ldr	r1, [r7, #4]
 800ffb4:	7809      	ldrb	r1, [r1, #0]
 800ffb6:	4313      	orrs	r3, r2
 800ffb8:	b298      	uxth	r0, r3
 800ffba:	4a13      	ldr	r2, [pc, #76]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800ffbc:	460b      	mov	r3, r1
 800ffbe:	009b      	lsls	r3, r3, #2
 800ffc0:	440b      	add	r3, r1
 800ffc2:	4413      	add	r3, r2
 800ffc4:	4602      	mov	r2, r0
 800ffc6:	f8a3 2003 	strh.w	r2, [r3, #3]
  Light_LightnessRangeParam[pmsgParam->elementIndex].StatusCode = SUCCESS_STATUS_CODE;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	4619      	mov	r1, r3
 800ffd0:	4a0d      	ldr	r2, [pc, #52]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800ffd2:	460b      	mov	r3, r1
 800ffd4:	009b      	lsls	r3, r3, #2
 800ffd6:	440b      	add	r3, r1
 800ffd8:	4413      	add	r3, r2
 800ffda:	2200      	movs	r2, #0
 800ffdc:	701a      	strb	r2, [r3, #0]
  
  /* condition to check the minimum range value according to the specification*/
  /* set the status code for status message according to value of range*/  
  
  /* Application Callback */
  (LightAppli_cb.Lightness_Range_Set_cb)(&Light_LightnessRangeParam[pmsgParam->elementIndex], OptionalValid,pmsgParam->dst_peer,pmsgParam->elementIndex);
 800ffde:	4b0b      	ldr	r3, [pc, #44]	; (801000c <Light_LightnessRange_Set+0x100>)
 800ffe0:	6a1c      	ldr	r4, [r3, #32]
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	781b      	ldrb	r3, [r3, #0]
 800ffe6:	461a      	mov	r2, r3
 800ffe8:	4613      	mov	r3, r2
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	4413      	add	r3, r2
 800ffee:	4a06      	ldr	r2, [pc, #24]	; (8010008 <Light_LightnessRange_Set+0xfc>)
 800fff0:	1898      	adds	r0, r3, r2
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	88da      	ldrh	r2, [r3, #6]
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	781b      	ldrb	r3, [r3, #0]
 800fffa:	7df9      	ldrb	r1, [r7, #23]
 800fffc:	47a0      	blx	r4
  
  return MOBLE_RESULT_SUCCESS;
 800fffe:	2300      	movs	r3, #0
}
 8010000:	4618      	mov	r0, r3
 8010002:	371c      	adds	r7, #28
 8010004:	46bd      	mov	sp, r7
 8010006:	bd90      	pop	{r4, r7, pc}
 8010008:	200045e4 	.word	0x200045e4
 801000c:	08032c78 	.word	0x08032c78

08010010 <Light_LightnessRange_Status>:
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT Light_LightnessRange_Status(MOBLEUINT8* pLightnessRange_status,
                                          MOBLEUINT32 *pLength,\
                                          MODEL_MessageHeader_t *pmsgParam)
{
 8010010:	b580      	push	{r7, lr}
 8010012:	b084      	sub	sp, #16
 8010014:	af00      	add	r7, sp, #0
 8010016:	60f8      	str	r0, [r7, #12]
 8010018:	60b9      	str	r1, [r7, #8]
 801001a:	607a      	str	r2, [r7, #4]
  Min Range      2B The Minimum range value of the Light Lightness state. 
  Max Range      2B The Maximum range value of the Light Lightness state         
  */
  
  TRACE_M(TF_LIGHT_M, "Light_LightnessRange_Status callback received \r\n");
  TRACE_M(TF_SERIAL_CTRL,"#8257! \n\r");
 801001c:	2100      	movs	r1, #0
 801001e:	482c      	ldr	r0, [pc, #176]	; (80100d0 <Light_LightnessRange_Status+0xc0>)
 8010020:	f7fd faa6 	bl	800d570 <TraceHeader>
 8010024:	482b      	ldr	r0, [pc, #172]	; (80100d4 <Light_LightnessRange_Status+0xc4>)
 8010026:	f019 faa7 	bl	8029578 <iprintf>
  
  *(pLightnessRange_status) = Light_LightnessRangeParam[pmsgParam->elementIndex].StatusCode;
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	781b      	ldrb	r3, [r3, #0]
 801002e:	4619      	mov	r1, r3
 8010030:	4a29      	ldr	r2, [pc, #164]	; (80100d8 <Light_LightnessRange_Status+0xc8>)
 8010032:	460b      	mov	r3, r1
 8010034:	009b      	lsls	r3, r3, #2
 8010036:	440b      	add	r3, r1
 8010038:	4413      	add	r3, r2
 801003a:	781a      	ldrb	r2, [r3, #0]
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+1) = Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus;
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	781b      	ldrb	r3, [r3, #0]
 8010044:	4619      	mov	r1, r3
 8010046:	4a24      	ldr	r2, [pc, #144]	; (80100d8 <Light_LightnessRange_Status+0xc8>)
 8010048:	460b      	mov	r3, r1
 801004a:	009b      	lsls	r3, r3, #2
 801004c:	440b      	add	r3, r1
 801004e:	4413      	add	r3, r2
 8010050:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010054:	b29a      	uxth	r2, r3
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	3301      	adds	r3, #1
 801005a:	b2d2      	uxtb	r2, r2
 801005c:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+2) = Light_LightnessRangeParam[pmsgParam->elementIndex].MinRangeStatus >> 8;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	781b      	ldrb	r3, [r3, #0]
 8010062:	4619      	mov	r1, r3
 8010064:	4a1c      	ldr	r2, [pc, #112]	; (80100d8 <Light_LightnessRange_Status+0xc8>)
 8010066:	460b      	mov	r3, r1
 8010068:	009b      	lsls	r3, r3, #2
 801006a:	440b      	add	r3, r1
 801006c:	4413      	add	r3, r2
 801006e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8010072:	b29b      	uxth	r3, r3
 8010074:	0a1b      	lsrs	r3, r3, #8
 8010076:	b29a      	uxth	r2, r3
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	3302      	adds	r3, #2
 801007c:	b2d2      	uxtb	r2, r2
 801007e:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+3) = Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus;
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	4619      	mov	r1, r3
 8010086:	4a14      	ldr	r2, [pc, #80]	; (80100d8 <Light_LightnessRange_Status+0xc8>)
 8010088:	460b      	mov	r3, r1
 801008a:	009b      	lsls	r3, r3, #2
 801008c:	440b      	add	r3, r1
 801008e:	4413      	add	r3, r2
 8010090:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8010094:	b29a      	uxth	r2, r3
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	3303      	adds	r3, #3
 801009a:	b2d2      	uxtb	r2, r2
 801009c:	701a      	strb	r2, [r3, #0]
  *(pLightnessRange_status+4) = Light_LightnessRangeParam[pmsgParam->elementIndex].MaxRangeStatus >> 8;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	4619      	mov	r1, r3
 80100a4:	4a0c      	ldr	r2, [pc, #48]	; (80100d8 <Light_LightnessRange_Status+0xc8>)
 80100a6:	460b      	mov	r3, r1
 80100a8:	009b      	lsls	r3, r3, #2
 80100aa:	440b      	add	r3, r1
 80100ac:	4413      	add	r3, r2
 80100ae:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80100b2:	b29b      	uxth	r3, r3
 80100b4:	0a1b      	lsrs	r3, r3, #8
 80100b6:	b29a      	uxth	r2, r3
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	3304      	adds	r3, #4
 80100bc:	b2d2      	uxtb	r2, r2
 80100be:	701a      	strb	r2, [r3, #0]
  *pLength = 5;
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	2205      	movs	r2, #5
 80100c4:	601a      	str	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 80100c6:	2300      	movs	r3, #0
}
 80100c8:	4618      	mov	r0, r3
 80100ca:	3710      	adds	r7, #16
 80100cc:	46bd      	mov	sp, r7
 80100ce:	bd80      	pop	{r7, pc}
 80100d0:	08033174 	.word	0x08033174
 80100d4:	0802f474 	.word	0x0802f474
 80100d8:	200045e4 	.word	0x200045e4

080100dc <LightModelServer_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Light Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT LightModelServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                               MOBLEUINT16 *length)
{
 80100dc:	b480      	push	{r7}
 80100de:	b083      	sub	sp, #12
 80100e0:	af00      	add	r7, sp, #0
 80100e2:	6078      	str	r0, [r7, #4]
 80100e4:	6039      	str	r1, [r7, #0]
  *data = Light_Opcodes_Table;
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	4a05      	ldr	r2, [pc, #20]	; (8010100 <LightModelServer_GetOpcodeTableCb+0x24>)
 80100ea:	601a      	str	r2, [r3, #0]
  *length = sizeof(Light_Opcodes_Table)/sizeof(Light_Opcodes_Table[0]);
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	220e      	movs	r2, #14
 80100f0:	801a      	strh	r2, [r3, #0]
  
  return MOBLE_RESULT_SUCCESS;
 80100f2:	2300      	movs	r3, #0
}
 80100f4:	4618      	mov	r0, r3
 80100f6:	370c      	adds	r7, #12
 80100f8:	46bd      	mov	sp, r7
 80100fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100fe:	4770      	bx	lr
 8010100:	08033058 	.word	0x08033058

08010104 <LightModelServer_GetStatusRequestCb>:
                                    MOBLEUINT8 *pResponsedata, 
                                    MOBLEUINT32 *plength, 
                                    MOBLEUINT8 const *pRxData,
                                    MOBLEUINT32 dataLength,
                                    MOBLEBOOL response)
{
 8010104:	b580      	push	{r7, lr}
 8010106:	b084      	sub	sp, #16
 8010108:	af00      	add	r7, sp, #0
 801010a:	60f8      	str	r0, [r7, #12]
 801010c:	607a      	str	r2, [r7, #4]
 801010e:	603b      	str	r3, [r7, #0]
 8010110:	460b      	mov	r3, r1
 8010112:	817b      	strh	r3, [r7, #10]
  TRACE_M(TF_LIGHT_M,"response status enable \n\r");
  switch(opcode)
 8010114:	897b      	ldrh	r3, [r7, #10]
 8010116:	f5a3 4302 	sub.w	r3, r3, #33280	; 0x8200
 801011a:	3b4e      	subs	r3, #78	; 0x4e
 801011c:	2b0a      	cmp	r3, #10
 801011e:	d837      	bhi.n	8010190 <LightModelServer_GetStatusRequestCb+0x8c>
 8010120:	a201      	add	r2, pc, #4	; (adr r2, 8010128 <LightModelServer_GetStatusRequestCb+0x24>)
 8010122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010126:	bf00      	nop
 8010128:	08010155 	.word	0x08010155
 801012c:	08010191 	.word	0x08010191
 8010130:	08010191 	.word	0x08010191
 8010134:	08010191 	.word	0x08010191
 8010138:	08010161 	.word	0x08010161
 801013c:	08010191 	.word	0x08010191
 8010140:	0801016d 	.word	0x0801016d
 8010144:	08010191 	.word	0x08010191
 8010148:	08010179 	.word	0x08010179
 801014c:	08010191 	.word	0x08010191
 8010150:	08010185 	.word	0x08010185
  {
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    
  case LIGHT_LIGHTNESS_STATUS:
    {
      Light_Lightness_Status(pResponsedata, plength , pmsgParam);
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	6839      	ldr	r1, [r7, #0]
 8010158:	6878      	ldr	r0, [r7, #4]
 801015a:	f7ff fbf3 	bl	800f944 <Light_Lightness_Status>
      break;
 801015e:	e018      	b.n	8010192 <LightModelServer_GetStatusRequestCb+0x8e>
    }    
  case LIGHT_LIGHTNESS_LINEAR_STATUS:
    {
      Light_LightnessLinear_Status(pResponsedata,plength, pmsgParam);
 8010160:	68fa      	ldr	r2, [r7, #12]
 8010162:	6839      	ldr	r1, [r7, #0]
 8010164:	6878      	ldr	r0, [r7, #4]
 8010166:	f7ff fd5f 	bl	800fc28 <Light_LightnessLinear_Status>
      break;
 801016a:	e012      	b.n	8010192 <LightModelServer_GetStatusRequestCb+0x8e>
    }     
  case LIGHT_LIGHTNESS_LAST_STATUS:
    {
      Light_LightnessLast_Status(pResponsedata,plength, pmsgParam);
 801016c:	68fa      	ldr	r2, [r7, #12]
 801016e:	6839      	ldr	r1, [r7, #0]
 8010170:	6878      	ldr	r0, [r7, #4]
 8010172:	f7ff fe27 	bl	800fdc4 <Light_LightnessLast_Status>
      break;
 8010176:	e00c      	b.n	8010192 <LightModelServer_GetStatusRequestCb+0x8e>
    }   
  case LIGHT_LIGHTNESS_DEFAULT_STATUS:
    {
      Light_LightnessDefault_Status(pResponsedata,plength, pmsgParam);
 8010178:	68fa      	ldr	r2, [r7, #12]
 801017a:	6839      	ldr	r1, [r7, #0]
 801017c:	6878      	ldr	r0, [r7, #4]
 801017e:	f7ff fe95 	bl	800feac <Light_LightnessDefault_Status>
      break;
 8010182:	e006      	b.n	8010192 <LightModelServer_GetStatusRequestCb+0x8e>
    }  
  case LIGHT_LIGHTNESS_RANGE_STATUS:
    {
      Light_LightnessRange_Status(pResponsedata,plength, pmsgParam);
 8010184:	68fa      	ldr	r2, [r7, #12]
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	6878      	ldr	r0, [r7, #4]
 801018a:	f7ff ff41 	bl	8010010 <Light_LightnessRange_Status>
      break;
 801018e:	e000      	b.n	8010192 <LightModelServer_GetStatusRequestCb+0x8e>
      break;
    } 
#endif
  default:
    {
      break;
 8010190:	bf00      	nop
    }
  }
  return MOBLE_RESULT_SUCCESS;    
 8010192:	2300      	movs	r3, #0
}
 8010194:	4618      	mov	r0, r3
 8010196:	3710      	adds	r7, #16
 8010198:	46bd      	mov	sp, r7
 801019a:	bd80      	pop	{r7, pc}

0801019c <LightModelServer_ProcessMessageCb>:
                                               MOBLEUINT16 opcode, 
                                               MOBLEUINT8 const *pRxData, 
                                               MOBLEUINT32 dataLength, 
                                               MOBLEBOOL response
                                                 )
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b086      	sub	sp, #24
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	60f8      	str	r0, [r7, #12]
 80101a4:	607a      	str	r2, [r7, #4]
 80101a6:	603b      	str	r3, [r7, #0]
 80101a8:	460b      	mov	r3, r1
 80101aa:	817b      	strh	r3, [r7, #10]
  Model_Binding_Var.Dst_Peer = pmsgParam->dst_peer;	
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	88da      	ldrh	r2, [r3, #6]
 80101b0:	4b8a      	ldr	r3, [pc, #552]	; (80103dc <LightModelServer_ProcessMessageCb+0x240>)
 80101b2:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80101b4:	2300      	movs	r3, #0
 80101b6:	75fb      	strb	r3, [r7, #23]
  MOBLE_ADDRESS publishAddress;
  MOBLEUINT8 modelStateChangeFlag = MOBLE_FALSE;
 80101b8:	2300      	movs	r3, #0
 80101ba:	75bb      	strb	r3, [r7, #22]
  
  TRACE_M(TF_LIGHT_M, "elementIndex %.2x dst_peer %.2X peer_add %.2X opcode %.2X response %.2X\r\n",
          pmsgParam->elementIndex, pmsgParam->dst_peer, pmsgParam->peer_addr, opcode, response);
  
  switch(opcode)
 80101bc:	897b      	ldrh	r3, [r7, #10]
 80101be:	f5a3 4302 	sub.w	r3, r3, #33280	; 0x8200
 80101c2:	3b4c      	subs	r3, #76	; 0x4c
 80101c4:	2b10      	cmp	r3, #16
 80101c6:	f200 809f 	bhi.w	8010308 <LightModelServer_ProcessMessageCb+0x16c>
 80101ca:	a201      	add	r2, pc, #4	; (adr r2, 80101d0 <LightModelServer_ProcessMessageCb+0x34>)
 80101cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d0:	08010215 	.word	0x08010215
 80101d4:	08010215 	.word	0x08010215
 80101d8:	08010309 	.word	0x08010309
 80101dc:	08010309 	.word	0x08010309
 80101e0:	0801026d 	.word	0x0801026d
 80101e4:	0801026d 	.word	0x0801026d
 80101e8:	08010309 	.word	0x08010309
 80101ec:	08010309 	.word	0x08010309
 80101f0:	08010309 	.word	0x08010309
 80101f4:	08010309 	.word	0x08010309
 80101f8:	08010309 	.word	0x08010309
 80101fc:	08010309 	.word	0x08010309
 8010200:	08010309 	.word	0x08010309
 8010204:	080102c5 	.word	0x080102c5
 8010208:	080102c5 	.word	0x080102c5
 801020c:	080102e7 	.word	0x080102e7
 8010210:	080102e7 	.word	0x080102e7
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
    
  case LIGHT_LIGHTNESS_SET:
  case LIGHT_LIGHTNESS_SET_UNACK:
    {       
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE ,pRxData , MAX_VALID_RANGE );
 8010214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010218:	6879      	ldr	r1, [r7, #4]
 801021a:	2000      	movs	r0, #0
 801021c:	f7fd f956 	bl	800d4cc <Chk_ParamMinMaxValidity>
 8010220:	4603      	mov	r3, r0
 8010222:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 8010224:	7dfb      	ldrb	r3, [r7, #23]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d170      	bne.n	801030c <LightModelServer_ProcessMessageCb+0x170>
      {
          if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, pmsgParam->dst_peer,pRxData[2])))
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	8898      	ldrh	r0, [r3, #4]
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	88d9      	ldrh	r1, [r3, #6]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3302      	adds	r3, #2
 8010236:	781b      	ldrb	r3, [r3, #0]
 8010238:	461a      	mov	r2, r3
 801023a:	f7fd fb51 	bl	800d8e0 <Chk_TidValidity>
 801023e:	4603      	mov	r3, r0
 8010240:	75fb      	strb	r3, [r7, #23]
 8010242:	7dfb      	ldrb	r3, [r7, #23]
 8010244:	2b01      	cmp	r3, #1
 8010246:	d861      	bhi.n	801030c <LightModelServer_ProcessMessageCb+0x170>
        {
            Light_Lightness_Set(pRxData, dataLength,pmsgParam);
 8010248:	68fa      	ldr	r2, [r7, #12]
 801024a:	6839      	ldr	r1, [r7, #0]
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f7ff fa67 	bl	800f720 <Light_Lightness_Set>
            Model_Binding_Var.Model_ID = (MOBLEUINT16)LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 8010252:	4b62      	ldr	r3, [pc, #392]	; (80103dc <LightModelServer_ProcessMessageCb+0x240>)
 8010254:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 8010258:	805a      	strh	r2, [r3, #2]
            Model_Binding_Var.Model_Rx_Opcode = opcode;
 801025a:	4a60      	ldr	r2, [pc, #384]	; (80103dc <LightModelServer_ProcessMessageCb+0x240>)
 801025c:	897b      	ldrh	r3, [r7, #10]
 801025e:	8013      	strh	r3, [r2, #0]
            modelStateChangeFlag = MOBLE_TRUE; 
 8010260:	2301      	movs	r3, #1
 8010262:	75bb      	strb	r3, [r7, #22]
            Publication1SecFlag.count = 0;
 8010264:	4b5e      	ldr	r3, [pc, #376]	; (80103e0 <LightModelServer_ProcessMessageCb+0x244>)
 8010266:	2200      	movs	r2, #0
 8010268:	709a      	strb	r2, [r3, #2]
        }
      }
      break;
 801026a:	e04f      	b.n	801030c <LightModelServer_ProcessMessageCb+0x170>
    }
  case LIGHT_LIGHTNESS_LINEAR_SET:
  case LIGHT_LIGHTNESS_LINEAR_SET_UNACK: 
    {
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 801026c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010270:	6879      	ldr	r1, [r7, #4]
 8010272:	2000      	movs	r0, #0
 8010274:	f7fd f92a 	bl	800d4cc <Chk_ParamMinMaxValidity>
 8010278:	4603      	mov	r3, r0
 801027a:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 801027c:	7dfb      	ldrb	r3, [r7, #23]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d146      	bne.n	8010310 <LightModelServer_ProcessMessageCb+0x174>
      {
          if(!MOBLE_FAILED(result = Chk_TidValidity(pmsgParam->peer_addr, 
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	8898      	ldrh	r0, [r3, #4]
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	88d9      	ldrh	r1, [r3, #6]
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	3302      	adds	r3, #2
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	461a      	mov	r2, r3
 8010292:	f7fd fb25 	bl	800d8e0 <Chk_TidValidity>
 8010296:	4603      	mov	r3, r0
 8010298:	75fb      	strb	r3, [r7, #23]
 801029a:	7dfb      	ldrb	r3, [r7, #23]
 801029c:	2b01      	cmp	r3, #1
 801029e:	d837      	bhi.n	8010310 <LightModelServer_ProcessMessageCb+0x174>
                                                  pmsgParam->dst_peer,pRxData[2])))
        {
            Light_LightnessLinear_Set(pRxData, dataLength,pmsgParam);
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	6839      	ldr	r1, [r7, #0]
 80102a4:	6878      	ldr	r0, [r7, #4]
 80102a6:	f7ff fbdf 	bl	800fa68 <Light_LightnessLinear_Set>
            Model_Binding_Var.Model_ID = (MOBLEUINT16)LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 80102aa:	4b4c      	ldr	r3, [pc, #304]	; (80103dc <LightModelServer_ProcessMessageCb+0x240>)
 80102ac:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 80102b0:	805a      	strh	r2, [r3, #2]
            Model_Binding_Var.Model_Rx_Opcode = opcode;
 80102b2:	4a4a      	ldr	r2, [pc, #296]	; (80103dc <LightModelServer_ProcessMessageCb+0x240>)
 80102b4:	897b      	ldrh	r3, [r7, #10]
 80102b6:	8013      	strh	r3, [r2, #0]
            modelStateChangeFlag = MOBLE_TRUE;
 80102b8:	2301      	movs	r3, #1
 80102ba:	75bb      	strb	r3, [r7, #22]
            Publication1SecFlag.count = 0;
 80102bc:	4b48      	ldr	r3, [pc, #288]	; (80103e0 <LightModelServer_ProcessMessageCb+0x244>)
 80102be:	2200      	movs	r2, #0
 80102c0:	709a      	strb	r2, [r3, #2]
        }
      }
      break;
 80102c2:	e025      	b.n	8010310 <LightModelServer_ProcessMessageCb+0x174>
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    
  case LIGHT_LIGHTNESS_DEFAULT_SET:
  case LIGHT_LIGHTNESS_DEFAULT_SET_UNACK:
    {      
      result = Chk_ParamMinMaxValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 80102c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102c8:	6879      	ldr	r1, [r7, #4]
 80102ca:	2000      	movs	r0, #0
 80102cc:	f7fd f8fe 	bl	800d4cc <Chk_ParamMinMaxValidity>
 80102d0:	4603      	mov	r3, r0
 80102d2:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 80102d4:	7dfb      	ldrb	r3, [r7, #23]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d11c      	bne.n	8010314 <LightModelServer_ProcessMessageCb+0x178>
      {
          Light_LightnessDefault_Set(pRxData, dataLength, pmsgParam);       
 80102da:	68fa      	ldr	r2, [r7, #12]
 80102dc:	6839      	ldr	r1, [r7, #0]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	f7ff fdaa 	bl	800fe38 <Light_LightnessDefault_Set>
      }
      break;
 80102e4:	e016      	b.n	8010314 <LightModelServer_ProcessMessageCb+0x178>
    }
  case LIGHT_LIGHTNESS_RANGE_SET:
  case LIGHT_LIGHTNESS_RANGE_SET_UNACK:
    {
      result = Chk_RangeValidity(MIN_VALID_RANGE , pRxData , MAX_VALID_RANGE);
 80102e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80102ea:	6879      	ldr	r1, [r7, #4]
 80102ec:	2000      	movs	r0, #0
 80102ee:	f7fd f86e 	bl	800d3ce <Chk_RangeValidity>
 80102f2:	4603      	mov	r3, r0
 80102f4:	75fb      	strb	r3, [r7, #23]
      
      if(result == MOBLE_RESULT_SUCCESS)
 80102f6:	7dfb      	ldrb	r3, [r7, #23]
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d10d      	bne.n	8010318 <LightModelServer_ProcessMessageCb+0x17c>
      {
          Light_LightnessRange_Set(pRxData, dataLength,pmsgParam);     
 80102fc:	68fa      	ldr	r2, [r7, #12]
 80102fe:	6839      	ldr	r1, [r7, #0]
 8010300:	6878      	ldr	r0, [r7, #4]
 8010302:	f7ff fe03 	bl	800ff0c <Light_LightnessRange_Set>
      }
      break;
 8010306:	e007      	b.n	8010318 <LightModelServer_ProcessMessageCb+0x17c>
    }

#endif  
  default:
    {
      break;
 8010308:	bf00      	nop
 801030a:	e006      	b.n	801031a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 801030c:	bf00      	nop
 801030e:	e004      	b.n	801031a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010310:	bf00      	nop
 8010312:	e002      	b.n	801031a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010314:	bf00      	nop
 8010316:	e000      	b.n	801031a <LightModelServer_ProcessMessageCb+0x17e>
      break;
 8010318:	bf00      	nop
    }    
  } /* Switch ends */
  
  if((result == MOBLE_RESULT_SUCCESS) && (response == MOBLE_TRUE))
 801031a:	7dfb      	ldrb	r3, [r7, #23]
 801031c:	2b00      	cmp	r3, #0
 801031e:	d120      	bne.n	8010362 <LightModelServer_ProcessMessageCb+0x1c6>
 8010320:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010324:	2b01      	cmp	r3, #1
 8010326:	d11c      	bne.n	8010362 <LightModelServer_ProcessMessageCb+0x1c6>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 8010328:	68fb      	ldr	r3, [r7, #12]
 801032a:	88db      	ldrh	r3, [r3, #6]
 801032c:	b21b      	sxth	r3, r3
 801032e:	2b00      	cmp	r3, #0
 8010330:	dd0b      	ble.n	801034a <LightModelServer_ProcessMessageCb+0x1ae>
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	88db      	ldrh	r3, [r3, #6]
 8010336:	b21b      	sxth	r3, r3
 8010338:	2b00      	cmp	r3, #0
 801033a:	db06      	blt.n	801034a <LightModelServer_ProcessMessageCb+0x1ae>
    {
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);                                           
 801033c:	8979      	ldrh	r1, [r7, #10]
 801033e:	683b      	ldr	r3, [r7, #0]
 8010340:	687a      	ldr	r2, [r7, #4]
 8010342:	68f8      	ldr	r0, [r7, #12]
 8010344:	f018 f8be 	bl	80284c4 <Model_SendResponse>
 8010348:	e00b      	b.n	8010362 <LightModelServer_ProcessMessageCb+0x1c6>
    }
    else{

      pmsgParam->dst_peer = BLEMesh_GetAddress();       // Replace group address by the single node address for response
 801034a:	f00c fead 	bl	801d0a8 <BLEMesh_GetAddress>
 801034e:	4603      	mov	r3, r0
 8010350:	461a      	mov	r2, r3
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);   
 8010356:	8979      	ldrh	r1, [r7, #10]
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	687a      	ldr	r2, [r7, #4]
 801035c:	68f8      	ldr	r0, [r7, #12]
 801035e:	f018 f8b1 	bl	80284c4 <Model_SendResponse>
     Publish the status to publish address if the publication is set by client 
     publication is independent of the response of the message.if the condition 
     for publication is full filled as per specification then the status will be 
     published.
  */
  publishAddress = BLEMesh_GetPublishAddress(pmsgParam->elementIndex, Model_Binding_Var.Model_ID);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	4a1d      	ldr	r2, [pc, #116]	; (80103dc <LightModelServer_ProcessMessageCb+0x240>)
 8010368:	8852      	ldrh	r2, [r2, #2]
 801036a:	4611      	mov	r1, r2
 801036c:	4618      	mov	r0, r3
 801036e:	f00c feab 	bl	801d0c8 <BLEMesh_GetPublishAddress>
 8010372:	4603      	mov	r3, r0
 8010374:	82bb      	strh	r3, [r7, #20]
  
  if((result == MOBLE_RESULT_SUCCESS) && (publishAddress != 0x0000) && (modelStateChangeFlag == MOBLE_TRUE))
 8010376:	7dfb      	ldrb	r3, [r7, #23]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d12a      	bne.n	80103d2 <LightModelServer_ProcessMessageCb+0x236>
 801037c:	8abb      	ldrh	r3, [r7, #20]
 801037e:	2b00      	cmp	r3, #0
 8010380:	d027      	beq.n	80103d2 <LightModelServer_ProcessMessageCb+0x236>
 8010382:	7dbb      	ldrb	r3, [r7, #22]
 8010384:	2b01      	cmp	r3, #1
 8010386:	d124      	bne.n	80103d2 <LightModelServer_ProcessMessageCb+0x236>
  {
    if(ADDRESS_IS_UNICAST(pmsgParam->dst_peer))
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	88db      	ldrh	r3, [r3, #6]
 801038c:	b21b      	sxth	r3, r3
 801038e:	2b00      	cmp	r3, #0
 8010390:	dd0e      	ble.n	80103b0 <LightModelServer_ProcessMessageCb+0x214>
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	88db      	ldrh	r3, [r3, #6]
 8010396:	b21b      	sxth	r3, r3
 8010398:	2b00      	cmp	r3, #0
 801039a:	db09      	blt.n	80103b0 <LightModelServer_ProcessMessageCb+0x214>
    {
      pmsgParam->peer_addr = publishAddress;
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	8aba      	ldrh	r2, [r7, #20]
 80103a0:	809a      	strh	r2, [r3, #4]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 80103a2:	8979      	ldrh	r1, [r7, #10]
 80103a4:	683b      	ldr	r3, [r7, #0]
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f018 f88b 	bl	80284c4 <Model_SendResponse>
 80103ae:	e00e      	b.n	80103ce <LightModelServer_ProcessMessageCb+0x232>
    }
    else{

      pmsgParam->peer_addr = publishAddress;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	8aba      	ldrh	r2, [r7, #20]
 80103b4:	809a      	strh	r2, [r3, #4]
      pmsgParam->dst_peer = BLEMesh_GetAddress(); // Replace group address by the single node address for response
 80103b6:	f00c fe77 	bl	801d0a8 <BLEMesh_GetAddress>
 80103ba:	4603      	mov	r3, r0
 80103bc:	461a      	mov	r2, r3
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	80da      	strh	r2, [r3, #6]
      Model_SendResponse(pmsgParam, opcode, pRxData, dataLength);
 80103c2:	8979      	ldrh	r1, [r7, #10]
 80103c4:	683b      	ldr	r3, [r7, #0]
 80103c6:	687a      	ldr	r2, [r7, #4]
 80103c8:	68f8      	ldr	r0, [r7, #12]
 80103ca:	f018 f87b 	bl	80284c4 <Model_SendResponse>
    }
    
    modelStateChangeFlag = MOBLE_FALSE;  
 80103ce:	2300      	movs	r3, #0
 80103d0:	75bb      	strb	r3, [r7, #22]
    TRACE_I(TF_LIGHT_M,"Publishing state to the address  %.2X \r\n",publishAddress);
  }

  return MOBLE_RESULT_SUCCESS;
 80103d2:	2300      	movs	r3, #0
}
 80103d4:	4618      	mov	r0, r3
 80103d6:	3718      	adds	r7, #24
 80103d8:	46bd      	mov	sp, r7
 80103da:	bd80      	pop	{r7, pc}
 80103dc:	2000455c 	.word	0x2000455c
 80103e0:	200045b8 	.word	0x200045b8

080103e4 <Light_TransitionBehaviourSingle_Param>:
* @param GetValue: Pointer of the array
* @retval MOBLE_RESULT
*/
MOBLE_RESULT Light_TransitionBehaviourSingle_Param(MOBLEUINT8 *GetValue,
                                                   MOBLEUINT8 elementIndex)
{
 80103e4:	b580      	push	{r7, lr}
 80103e6:	b084      	sub	sp, #16
 80103e8:	af00      	add	r7, sp, #0
 80103ea:	6078      	str	r0, [r7, #4]
 80103ec:	460b      	mov	r3, r1
 80103ee:	70fb      	strb	r3, [r7, #3]
  static MOBLEUINT8 Clockflag = 0;
  static MOBLEUINT32 Check_time;
  MOBLEUINT16 targetRange;
  MOBLEUINT16 targetSlot;
  
  if(Clockflag == 0)
 80103f0:	4bac      	ldr	r3, [pc, #688]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c0>)
 80103f2:	781b      	ldrb	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d107      	bne.n	8010408 <Light_TransitionBehaviourSingle_Param+0x24>
  {
    Check_time = Clock_Time();
 80103f8:	f7f7 fd34 	bl	8007e64 <HAL_GetTick>
 80103fc:	4603      	mov	r3, r0
 80103fe:	4aaa      	ldr	r2, [pc, #680]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 8010400:	6013      	str	r3, [r2, #0]
    Clockflag = 1;
 8010402:	4ba8      	ldr	r3, [pc, #672]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c0>)
 8010404:	2201      	movs	r2, #1
 8010406:	701a      	strb	r2, [r3, #0]
  }
  
  /* Publication after 1 second if total transition time is greater than 2 sec.*/
  if(Light_TimeParam[elementIndex].TotalTime >2000)
 8010408:	78fa      	ldrb	r2, [r7, #3]
 801040a:	49a8      	ldr	r1, [pc, #672]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801040c:	4613      	mov	r3, r2
 801040e:	009b      	lsls	r3, r3, #2
 8010410:	4413      	add	r3, r2
 8010412:	005b      	lsls	r3, r3, #1
 8010414:	440b      	add	r3, r1
 8010416:	f8d3 3006 	ldr.w	r3, [r3, #6]
 801041a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 801041e:	d901      	bls.n	8010424 <Light_TransitionBehaviourSingle_Param+0x40>
  {
    Punblication_OneSecTimer();
 8010420:	f001 fbd4 	bl	8011bcc <Punblication_OneSecTimer>
  }
  
  /* Values from application are copied into temporary variables for processing */    
  Light_TemporaryStatus[elementIndex].PresentParam_1 = GetValue[1] << 8;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	3301      	adds	r3, #1
 8010428:	781b      	ldrb	r3, [r3, #0]
 801042a:	b29b      	uxth	r3, r3
 801042c:	78fa      	ldrb	r2, [r7, #3]
 801042e:	021b      	lsls	r3, r3, #8
 8010430:	b298      	uxth	r0, r3
 8010432:	499f      	ldr	r1, [pc, #636]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010434:	4613      	mov	r3, r2
 8010436:	005b      	lsls	r3, r3, #1
 8010438:	4413      	add	r3, r2
 801043a:	009b      	lsls	r3, r3, #2
 801043c:	4413      	add	r3, r2
 801043e:	440b      	add	r3, r1
 8010440:	4602      	mov	r2, r0
 8010442:	801a      	strh	r2, [r3, #0]
  Light_TemporaryStatus[elementIndex].PresentParam_1 |= GetValue[0];   
 8010444:	78fa      	ldrb	r2, [r7, #3]
 8010446:	499a      	ldr	r1, [pc, #616]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010448:	4613      	mov	r3, r2
 801044a:	005b      	lsls	r3, r3, #1
 801044c:	4413      	add	r3, r2
 801044e:	009b      	lsls	r3, r3, #2
 8010450:	4413      	add	r3, r2
 8010452:	440b      	add	r3, r1
 8010454:	881b      	ldrh	r3, [r3, #0]
 8010456:	b299      	uxth	r1, r3
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	781b      	ldrb	r3, [r3, #0]
 801045c:	b29b      	uxth	r3, r3
 801045e:	78fa      	ldrb	r2, [r7, #3]
 8010460:	430b      	orrs	r3, r1
 8010462:	b298      	uxth	r0, r3
 8010464:	4992      	ldr	r1, [pc, #584]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010466:	4613      	mov	r3, r2
 8010468:	005b      	lsls	r3, r3, #1
 801046a:	4413      	add	r3, r2
 801046c:	009b      	lsls	r3, r3, #2
 801046e:	4413      	add	r3, r2
 8010470:	440b      	add	r3, r1
 8010472:	4602      	mov	r2, r0
 8010474:	801a      	strh	r2, [r3, #0]
  /*if condition to wait until the time is equal to the given resolution time */  
  if(((Clock_Time()- Check_time) >= Light_TimeParam[elementIndex].Res_Value))
 8010476:	f7f7 fcf5 	bl	8007e64 <HAL_GetTick>
 801047a:	4602      	mov	r2, r0
 801047c:	4b8a      	ldr	r3, [pc, #552]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 801047e:	681b      	ldr	r3, [r3, #0]
 8010480:	1ad1      	subs	r1, r2, r3
 8010482:	78fa      	ldrb	r2, [r7, #3]
 8010484:	4889      	ldr	r0, [pc, #548]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010486:	4613      	mov	r3, r2
 8010488:	009b      	lsls	r3, r3, #2
 801048a:	4413      	add	r3, r2
 801048c:	005b      	lsls	r3, r3, #1
 801048e:	4403      	add	r3, r0
 8010490:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8010494:	4299      	cmp	r1, r3
 8010496:	f0c0 80ff 	bcc.w	8010698 <Light_TransitionBehaviourSingle_Param+0x2b4>
  {
    if(Light_TimeParam[elementIndex].StepValue == 0)
 801049a:	78fa      	ldrb	r2, [r7, #3]
 801049c:	4983      	ldr	r1, [pc, #524]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801049e:	4613      	mov	r3, r2
 80104a0:	009b      	lsls	r3, r3, #2
 80104a2:	4413      	add	r3, r2
 80104a4:	005b      	lsls	r3, r3, #1
 80104a6:	440b      	add	r3, r1
 80104a8:	f993 3000 	ldrsb.w	r3, [r3]
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d108      	bne.n	80104c2 <Light_TransitionBehaviourSingle_Param+0xde>
    {
      Light_TimeParam[elementIndex].StepValue = 1;
 80104b0:	78fa      	ldrb	r2, [r7, #3]
 80104b2:	497e      	ldr	r1, [pc, #504]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80104b4:	4613      	mov	r3, r2
 80104b6:	009b      	lsls	r3, r3, #2
 80104b8:	4413      	add	r3, r2
 80104ba:	005b      	lsls	r3, r3, #1
 80104bc:	440b      	add	r3, r1
 80104be:	2201      	movs	r2, #1
 80104c0:	701a      	strb	r2, [r3, #0]
    }
    
    if(Light_TemporaryStatus[elementIndex].TargetParam_1 > Light_TemporaryStatus[elementIndex].PresentParam_1)
 80104c2:	78fa      	ldrb	r2, [r7, #3]
 80104c4:	497a      	ldr	r1, [pc, #488]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80104c6:	4613      	mov	r3, r2
 80104c8:	005b      	lsls	r3, r3, #1
 80104ca:	4413      	add	r3, r2
 80104cc:	009b      	lsls	r3, r3, #2
 80104ce:	4413      	add	r3, r2
 80104d0:	440b      	add	r3, r1
 80104d2:	3306      	adds	r3, #6
 80104d4:	881b      	ldrh	r3, [r3, #0]
 80104d6:	b299      	uxth	r1, r3
 80104d8:	78fa      	ldrb	r2, [r7, #3]
 80104da:	4875      	ldr	r0, [pc, #468]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80104dc:	4613      	mov	r3, r2
 80104de:	005b      	lsls	r3, r3, #1
 80104e0:	4413      	add	r3, r2
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4413      	add	r3, r2
 80104e6:	4403      	add	r3, r0
 80104e8:	881b      	ldrh	r3, [r3, #0]
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	4299      	cmp	r1, r3
 80104ee:	d93b      	bls.n	8010568 <Light_TransitionBehaviourSingle_Param+0x184>
    {
      /* calculating the target range to be achieved which is target value
      which is target value minus present value if target value is greater 
      than present value.   
      */
      targetRange = Light_TemporaryStatus[elementIndex].TargetParam_1 - Light_TemporaryStatus[elementIndex].PresentParam_1;  
 80104f0:	78fa      	ldrb	r2, [r7, #3]
 80104f2:	496f      	ldr	r1, [pc, #444]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80104f4:	4613      	mov	r3, r2
 80104f6:	005b      	lsls	r3, r3, #1
 80104f8:	4413      	add	r3, r2
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	4413      	add	r3, r2
 80104fe:	440b      	add	r3, r1
 8010500:	3306      	adds	r3, #6
 8010502:	881b      	ldrh	r3, [r3, #0]
 8010504:	b299      	uxth	r1, r3
 8010506:	78fa      	ldrb	r2, [r7, #3]
 8010508:	4869      	ldr	r0, [pc, #420]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801050a:	4613      	mov	r3, r2
 801050c:	005b      	lsls	r3, r3, #1
 801050e:	4413      	add	r3, r2
 8010510:	009b      	lsls	r3, r3, #2
 8010512:	4413      	add	r3, r2
 8010514:	4403      	add	r3, r0
 8010516:	881b      	ldrh	r3, [r3, #0]
 8010518:	b29b      	uxth	r3, r3
 801051a:	1acb      	subs	r3, r1, r3
 801051c:	81fb      	strh	r3, [r7, #14]
      /*target slot = time to cover in single step */
      targetSlot = targetRange/Light_TimeParam[elementIndex].StepValue;
 801051e:	89f9      	ldrh	r1, [r7, #14]
 8010520:	78fa      	ldrb	r2, [r7, #3]
 8010522:	4862      	ldr	r0, [pc, #392]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010524:	4613      	mov	r3, r2
 8010526:	009b      	lsls	r3, r3, #2
 8010528:	4413      	add	r3, r2
 801052a:	005b      	lsls	r3, r3, #1
 801052c:	4403      	add	r3, r0
 801052e:	f993 3000 	ldrsb.w	r3, [r3]
 8010532:	fb91 f3f3 	sdiv	r3, r1, r3
 8010536:	81bb      	strh	r3, [r7, #12]
      /* target slot added to present value to achieve target value */
      Light_TemporaryStatus[elementIndex].PresentParam_1 += targetSlot;             
 8010538:	78fa      	ldrb	r2, [r7, #3]
 801053a:	495d      	ldr	r1, [pc, #372]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801053c:	4613      	mov	r3, r2
 801053e:	005b      	lsls	r3, r3, #1
 8010540:	4413      	add	r3, r2
 8010542:	009b      	lsls	r3, r3, #2
 8010544:	4413      	add	r3, r2
 8010546:	440b      	add	r3, r1
 8010548:	881b      	ldrh	r3, [r3, #0]
 801054a:	b299      	uxth	r1, r3
 801054c:	78fa      	ldrb	r2, [r7, #3]
 801054e:	89bb      	ldrh	r3, [r7, #12]
 8010550:	440b      	add	r3, r1
 8010552:	b298      	uxth	r0, r3
 8010554:	4956      	ldr	r1, [pc, #344]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010556:	4613      	mov	r3, r2
 8010558:	005b      	lsls	r3, r3, #1
 801055a:	4413      	add	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	4413      	add	r3, r2
 8010560:	440b      	add	r3, r1
 8010562:	4602      	mov	r2, r0
 8010564:	801a      	strh	r2, [r3, #0]
 8010566:	e03a      	b.n	80105de <Light_TransitionBehaviourSingle_Param+0x1fa>
    }              
    else
    { 
      /* if present value is greater than target value, this condition executes */
      targetRange = Light_TemporaryStatus[elementIndex].PresentParam_1 - Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010568:	78fa      	ldrb	r2, [r7, #3]
 801056a:	4951      	ldr	r1, [pc, #324]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801056c:	4613      	mov	r3, r2
 801056e:	005b      	lsls	r3, r3, #1
 8010570:	4413      	add	r3, r2
 8010572:	009b      	lsls	r3, r3, #2
 8010574:	4413      	add	r3, r2
 8010576:	440b      	add	r3, r1
 8010578:	881b      	ldrh	r3, [r3, #0]
 801057a:	b299      	uxth	r1, r3
 801057c:	78fa      	ldrb	r2, [r7, #3]
 801057e:	484c      	ldr	r0, [pc, #304]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 8010580:	4613      	mov	r3, r2
 8010582:	005b      	lsls	r3, r3, #1
 8010584:	4413      	add	r3, r2
 8010586:	009b      	lsls	r3, r3, #2
 8010588:	4413      	add	r3, r2
 801058a:	4403      	add	r3, r0
 801058c:	3306      	adds	r3, #6
 801058e:	881b      	ldrh	r3, [r3, #0]
 8010590:	b29b      	uxth	r3, r3
 8010592:	1acb      	subs	r3, r1, r3
 8010594:	81fb      	strh	r3, [r7, #14]
      targetSlot = targetRange/Light_TimeParam[elementIndex].StepValue;          
 8010596:	89f9      	ldrh	r1, [r7, #14]
 8010598:	78fa      	ldrb	r2, [r7, #3]
 801059a:	4844      	ldr	r0, [pc, #272]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801059c:	4613      	mov	r3, r2
 801059e:	009b      	lsls	r3, r3, #2
 80105a0:	4413      	add	r3, r2
 80105a2:	005b      	lsls	r3, r3, #1
 80105a4:	4403      	add	r3, r0
 80105a6:	f993 3000 	ldrsb.w	r3, [r3]
 80105aa:	fb91 f3f3 	sdiv	r3, r1, r3
 80105ae:	81bb      	strh	r3, [r7, #12]
      Light_TemporaryStatus[elementIndex].PresentParam_1 -= targetSlot;
 80105b0:	78fa      	ldrb	r2, [r7, #3]
 80105b2:	493f      	ldr	r1, [pc, #252]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80105b4:	4613      	mov	r3, r2
 80105b6:	005b      	lsls	r3, r3, #1
 80105b8:	4413      	add	r3, r2
 80105ba:	009b      	lsls	r3, r3, #2
 80105bc:	4413      	add	r3, r2
 80105be:	440b      	add	r3, r1
 80105c0:	881b      	ldrh	r3, [r3, #0]
 80105c2:	b299      	uxth	r1, r3
 80105c4:	78fa      	ldrb	r2, [r7, #3]
 80105c6:	89bb      	ldrh	r3, [r7, #12]
 80105c8:	1acb      	subs	r3, r1, r3
 80105ca:	b298      	uxth	r0, r3
 80105cc:	4938      	ldr	r1, [pc, #224]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 80105ce:	4613      	mov	r3, r2
 80105d0:	005b      	lsls	r3, r3, #1
 80105d2:	4413      	add	r3, r2
 80105d4:	009b      	lsls	r3, r3, #2
 80105d6:	4413      	add	r3, r2
 80105d8:	440b      	add	r3, r1
 80105da:	4602      	mov	r2, r0
 80105dc:	801a      	strh	r2, [r3, #0]
    } 
    
    Light_TimeParam[elementIndex].StepValue=Light_TimeParam[elementIndex].StepValue-1;         
 80105de:	78fa      	ldrb	r2, [r7, #3]
 80105e0:	4932      	ldr	r1, [pc, #200]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80105e2:	4613      	mov	r3, r2
 80105e4:	009b      	lsls	r3, r3, #2
 80105e6:	4413      	add	r3, r2
 80105e8:	005b      	lsls	r3, r3, #1
 80105ea:	440b      	add	r3, r1
 80105ec:	f993 3000 	ldrsb.w	r3, [r3]
 80105f0:	b2db      	uxtb	r3, r3
 80105f2:	3b01      	subs	r3, #1
 80105f4:	b2db      	uxtb	r3, r3
 80105f6:	78fa      	ldrb	r2, [r7, #3]
 80105f8:	b258      	sxtb	r0, r3
 80105fa:	492c      	ldr	r1, [pc, #176]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 80105fc:	4613      	mov	r3, r2
 80105fe:	009b      	lsls	r3, r3, #2
 8010600:	4413      	add	r3, r2
 8010602:	005b      	lsls	r3, r3, #1
 8010604:	440b      	add	r3, r1
 8010606:	4602      	mov	r2, r0
 8010608:	701a      	strb	r2, [r3, #0]
    /* updating the remaining time after each step covered*/
    Light_TemporaryStatus[elementIndex].RemainingTime =  Light_TimeParam[elementIndex].StepValue  | (Light_TimeParam[elementIndex].ResBitValue << 6) ;
 801060a:	78fa      	ldrb	r2, [r7, #3]
 801060c:	4927      	ldr	r1, [pc, #156]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 801060e:	4613      	mov	r3, r2
 8010610:	009b      	lsls	r3, r3, #2
 8010612:	4413      	add	r3, r2
 8010614:	005b      	lsls	r3, r3, #1
 8010616:	440b      	add	r3, r1
 8010618:	f993 1000 	ldrsb.w	r1, [r3]
 801061c:	78fa      	ldrb	r2, [r7, #3]
 801061e:	4823      	ldr	r0, [pc, #140]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010620:	4613      	mov	r3, r2
 8010622:	009b      	lsls	r3, r3, #2
 8010624:	4413      	add	r3, r2
 8010626:	005b      	lsls	r3, r3, #1
 8010628:	4403      	add	r3, r0
 801062a:	3305      	adds	r3, #5
 801062c:	781b      	ldrb	r3, [r3, #0]
 801062e:	019b      	lsls	r3, r3, #6
 8010630:	b25b      	sxtb	r3, r3
 8010632:	430b      	orrs	r3, r1
 8010634:	b25b      	sxtb	r3, r3
 8010636:	78fa      	ldrb	r2, [r7, #3]
 8010638:	b2d8      	uxtb	r0, r3
 801063a:	491d      	ldr	r1, [pc, #116]	; (80106b0 <Light_TransitionBehaviourSingle_Param+0x2cc>)
 801063c:	4613      	mov	r3, r2
 801063e:	005b      	lsls	r3, r3, #1
 8010640:	4413      	add	r3, r2
 8010642:	009b      	lsls	r3, r3, #2
 8010644:	4413      	add	r3, r2
 8010646:	440b      	add	r3, r1
 8010648:	330c      	adds	r3, #12
 801064a:	4602      	mov	r2, r0
 801064c:	701a      	strb	r2, [r3, #0]
    LightUpdateFlag = VALUE_UPDATE_SET;
 801064e:	4b19      	ldr	r3, [pc, #100]	; (80106b4 <Light_TransitionBehaviourSingle_Param+0x2d0>)
 8010650:	2201      	movs	r2, #1
 8010652:	701a      	strb	r2, [r3, #0]
    Check_time = 0;
 8010654:	4b14      	ldr	r3, [pc, #80]	; (80106a8 <Light_TransitionBehaviourSingle_Param+0x2c4>)
 8010656:	2200      	movs	r2, #0
 8010658:	601a      	str	r2, [r3, #0]
    Clockflag = 0;
 801065a:	4b12      	ldr	r3, [pc, #72]	; (80106a4 <Light_TransitionBehaviourSingle_Param+0x2c0>)
 801065c:	2200      	movs	r2, #0
 801065e:	701a      	strb	r2, [r3, #0]
    
    /* when transition is completed, disable the transition by disabling 
    transition flag
    */
    if(Light_TimeParam[elementIndex].StepValue == 0)
 8010660:	78fa      	ldrb	r2, [r7, #3]
 8010662:	4912      	ldr	r1, [pc, #72]	; (80106ac <Light_TransitionBehaviourSingle_Param+0x2c8>)
 8010664:	4613      	mov	r3, r2
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	4413      	add	r3, r2
 801066a:	005b      	lsls	r3, r3, #1
 801066c:	440b      	add	r3, r1
 801066e:	f993 3000 	ldrsb.w	r3, [r3]
 8010672:	2b00      	cmp	r3, #0
 8010674:	d110      	bne.n	8010698 <Light_TransitionBehaviourSingle_Param+0x2b4>
    {              
      Light_ModelFlag[elementIndex].LightTransitionFlag = MODEL_TRANSITION_STOP;
 8010676:	78fa      	ldrb	r2, [r7, #3]
 8010678:	490f      	ldr	r1, [pc, #60]	; (80106b8 <Light_TransitionBehaviourSingle_Param+0x2d4>)
 801067a:	4613      	mov	r3, r2
 801067c:	005b      	lsls	r3, r3, #1
 801067e:	4413      	add	r3, r2
 8010680:	440b      	add	r3, r1
 8010682:	2200      	movs	r2, #0
 8010684:	701a      	strb	r2, [r3, #0]
      Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = 1;
 8010686:	78fa      	ldrb	r2, [r7, #3]
 8010688:	490b      	ldr	r1, [pc, #44]	; (80106b8 <Light_TransitionBehaviourSingle_Param+0x2d4>)
 801068a:	4613      	mov	r3, r2
 801068c:	005b      	lsls	r3, r3, #1
 801068e:	4413      	add	r3, r2
 8010690:	440b      	add	r3, r1
 8010692:	3302      	adds	r3, #2
 8010694:	2201      	movs	r2, #1
 8010696:	701a      	strb	r2, [r3, #0]
                                                                Light_TemporaryStatus[elementIndex].RemainingTime);
    
    
  }
  
  return MOBLE_RESULT_SUCCESS;         
 8010698:	2300      	movs	r3, #0
} 
 801069a:	4618      	mov	r0, r3
 801069c:	3710      	adds	r7, #16
 801069e:	46bd      	mov	sp, r7
 80106a0:	bd80      	pop	{r7, pc}
 80106a2:	bf00      	nop
 80106a4:	20004652 	.word	0x20004652
 80106a8:	20004654 	.word	0x20004654
 80106ac:	200045a8 	.word	0x200045a8
 80106b0:	200045bc 	.word	0x200045bc
 80106b4:	20004651 	.word	0x20004651
 80106b8:	200045b4 	.word	0x200045b4

080106bc <Model_BindingPublishStatus>:
          and supporting binding with other models.
* @param  void
* @param  void
*/ 
void Model_BindingPublishStatus(void)
{
 80106bc:	b590      	push	{r4, r7, lr}
 80106be:	b08b      	sub	sp, #44	; 0x2c
 80106c0:	af00      	add	r7, sp, #0
  MOBLE_ADDRESS publishAddress;
  static MOBLEUINT8 elementIndex;
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT16 opcode;
  MOBLEUINT8 const pRxData[12] = {0};
 80106c2:	2300      	movs	r3, #0
 80106c4:	603b      	str	r3, [r7, #0]
 80106c6:	1d3b      	adds	r3, r7, #4
 80106c8:	2200      	movs	r2, #0
 80106ca:	601a      	str	r2, [r3, #0]
 80106cc:	605a      	str	r2, [r3, #4]
  MOBLEUINT32 dataLength = 0;
 80106ce:	2300      	movs	r3, #0
 80106d0:	623b      	str	r3, [r7, #32]
  MOBLE_ADDRESS my_Address;

  if((Light_PublishOpcodeList[elementIndex].BindedStateCount > 0) &&(ADDRESS_IS_UNICAST(Model_Binding_Var.Dst_Peer))) 
 80106d2:	4b86      	ldr	r3, [pc, #536]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	461a      	mov	r2, r3
 80106d8:	4985      	ldr	r1, [pc, #532]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 80106da:	4613      	mov	r3, r2
 80106dc:	00db      	lsls	r3, r3, #3
 80106de:	4413      	add	r3, r2
 80106e0:	00da      	lsls	r2, r3, #3
 80106e2:	4413      	add	r3, r2
 80106e4:	440b      	add	r3, r1
 80106e6:	3350      	adds	r3, #80	; 0x50
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	f000 8092 	beq.w	8010814 <Model_BindingPublishStatus+0x158>
 80106f0:	4b80      	ldr	r3, [pc, #512]	; (80108f4 <Model_BindingPublishStatus+0x238>)
 80106f2:	889b      	ldrh	r3, [r3, #4]
 80106f4:	b21b      	sxth	r3, r3
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	f340 808c 	ble.w	8010814 <Model_BindingPublishStatus+0x158>
 80106fc:	4b7d      	ldr	r3, [pc, #500]	; (80108f4 <Model_BindingPublishStatus+0x238>)
 80106fe:	889b      	ldrh	r3, [r3, #4]
 8010700:	b21b      	sxth	r3, r3
 8010702:	2b00      	cmp	r3, #0
 8010704:	f2c0 8086 	blt.w	8010814 <Model_BindingPublishStatus+0x158>
  { 
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 8010708:	f7fd f9bc 	bl	800da84 <Wait_RandomTime>
 801070c:	4603      	mov	r3, r0
 801070e:	2b01      	cmp	r3, #1
 8010710:	f040 80e6 	bne.w	80108e0 <Model_BindingPublishStatus+0x224>
    {   
      my_Address = BLEMesh_GetAddress(); 
 8010714:	f00c fcc8 	bl	801d0a8 <BLEMesh_GetAddress>
 8010718:	4603      	mov	r3, r0
 801071a:	83fb      	strh	r3, [r7, #30]
      publishAddress = BLEMesh_GetPublishAddress(elementIndex, Light_PublishOpcodeList[elementIndex].Model_ID[Publication1SecFlag.count]);
 801071c:	4b73      	ldr	r3, [pc, #460]	; (80108ec <Model_BindingPublishStatus+0x230>)
 801071e:	7818      	ldrb	r0, [r3, #0]
 8010720:	4b72      	ldr	r3, [pc, #456]	; (80108ec <Model_BindingPublishStatus+0x230>)
 8010722:	781b      	ldrb	r3, [r3, #0]
 8010724:	4619      	mov	r1, r3
 8010726:	4b74      	ldr	r3, [pc, #464]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 8010728:	789b      	ldrb	r3, [r3, #2]
 801072a:	4c71      	ldr	r4, [pc, #452]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 801072c:	3314      	adds	r3, #20
 801072e:	005a      	lsls	r2, r3, #1
 8010730:	460b      	mov	r3, r1
 8010732:	00db      	lsls	r3, r3, #3
 8010734:	440b      	add	r3, r1
 8010736:	00d9      	lsls	r1, r3, #3
 8010738:	440b      	add	r3, r1
 801073a:	4413      	add	r3, r2
 801073c:	4423      	add	r3, r4
 801073e:	881b      	ldrh	r3, [r3, #0]
 8010740:	b29b      	uxth	r3, r3
 8010742:	4619      	mov	r1, r3
 8010744:	f00c fcc0 	bl	801d0c8 <BLEMesh_GetPublishAddress>
 8010748:	4603      	mov	r3, r0
 801074a:	83bb      	strh	r3, [r7, #28]
      opcode = (MOBLEUINT16)Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Publication1SecFlag.count];
 801074c:	4b67      	ldr	r3, [pc, #412]	; (80108ec <Model_BindingPublishStatus+0x230>)
 801074e:	781b      	ldrb	r3, [r3, #0]
 8010750:	4619      	mov	r1, r3
 8010752:	4b69      	ldr	r3, [pc, #420]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 8010754:	789b      	ldrb	r3, [r3, #2]
 8010756:	4866      	ldr	r0, [pc, #408]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 8010758:	005a      	lsls	r2, r3, #1
 801075a:	460b      	mov	r3, r1
 801075c:	00db      	lsls	r3, r3, #3
 801075e:	440b      	add	r3, r1
 8010760:	00d9      	lsls	r1, r3, #3
 8010762:	440b      	add	r3, r1
 8010764:	4413      	add	r3, r2
 8010766:	4403      	add	r3, r0
 8010768:	781a      	ldrb	r2, [r3, #0]
 801076a:	785b      	ldrb	r3, [r3, #1]
 801076c:	021b      	lsls	r3, r3, #8
 801076e:	4313      	orrs	r3, r2
 8010770:	837b      	strh	r3, [r7, #26]

      /*Initialize the Parameters*/
      msgParam.dst_peer = my_Address;
 8010772:	8bfb      	ldrh	r3, [r7, #30]
 8010774:	827b      	strh	r3, [r7, #18]
      msgParam.peer_addr = publishAddress;
 8010776:	8bbb      	ldrh	r3, [r7, #28]
 8010778:	823b      	strh	r3, [r7, #16]
      msgParam.elementIndex = elementIndex;
 801077a:	4b5c      	ldr	r3, [pc, #368]	; (80108ec <Model_BindingPublishStatus+0x230>)
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	733b      	strb	r3, [r7, #12]
      msgParam.rcvdAppKeyOffset = 0;
 8010780:	2300      	movs	r3, #0
 8010782:	75bb      	strb	r3, [r7, #22]
      msgParam.rcvdNetKeyOffset = 0;
 8010784:	2300      	movs	r3, #0
 8010786:	75fb      	strb	r3, [r7, #23]
      msgParam.rssi = 0;
 8010788:	2300      	movs	r3, #0
 801078a:	757b      	strb	r3, [r7, #21]
      msgParam.ttl = 0;
 801078c:	2300      	movs	r3, #0
 801078e:	753b      	strb	r3, [r7, #20]
        
      if(publishAddress != 0x0000) 
 8010790:	8bbb      	ldrh	r3, [r7, #28]
 8010792:	2b00      	cmp	r3, #0
 8010794:	d006      	beq.n	80107a4 <Model_BindingPublishStatus+0xe8>
      {
        /*Using the same API used for Acknowledgement, where src & dst getting interchanged.
        Therefore PublishAddress is copied in peer_addr & vice-versa*/  
        Model_SendResponse(&msgParam, opcode, pRxData, dataLength);
 8010796:	463a      	mov	r2, r7
 8010798:	8b79      	ldrh	r1, [r7, #26]
 801079a:	f107 000c 	add.w	r0, r7, #12
 801079e:	6a3b      	ldr	r3, [r7, #32]
 80107a0:	f017 fe90 	bl	80284c4 <Model_SendResponse>
        TRACE_M(TF_LIGHT_M, "Binded publishing address %.2x opcode %.2x model id %.2x \r\n",
                publishAddress,Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Publication1SecFlag.count],
                Light_PublishOpcodeList[elementIndex].Model_ID[Publication1SecFlag.count]);
      }     
       
      Publication1SecFlag.count++;
 80107a4:	4b54      	ldr	r3, [pc, #336]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 80107a6:	789b      	ldrb	r3, [r3, #2]
 80107a8:	3301      	adds	r3, #1
 80107aa:	b2da      	uxtb	r2, r3
 80107ac:	4b52      	ldr	r3, [pc, #328]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 80107ae:	709a      	strb	r2, [r3, #2]
      if(Publication1SecFlag.count > Light_PublishOpcodeList[elementIndex].BindedStateCount)
 80107b0:	4b51      	ldr	r3, [pc, #324]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 80107b2:	789a      	ldrb	r2, [r3, #2]
 80107b4:	4b4d      	ldr	r3, [pc, #308]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80107b6:	781b      	ldrb	r3, [r3, #0]
 80107b8:	4619      	mov	r1, r3
 80107ba:	484d      	ldr	r0, [pc, #308]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 80107bc:	460b      	mov	r3, r1
 80107be:	00db      	lsls	r3, r3, #3
 80107c0:	440b      	add	r3, r1
 80107c2:	00d9      	lsls	r1, r3, #3
 80107c4:	440b      	add	r3, r1
 80107c6:	4403      	add	r3, r0
 80107c8:	3350      	adds	r3, #80	; 0x50
 80107ca:	781b      	ldrb	r3, [r3, #0]
 80107cc:	429a      	cmp	r2, r3
 80107ce:	f240 8087 	bls.w	80108e0 <Model_BindingPublishStatus+0x224>
      {
        Publication1SecFlag.count = 0;
 80107d2:	4b49      	ldr	r3, [pc, #292]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 80107d4:	2200      	movs	r2, #0
 80107d6:	709a      	strb	r2, [r3, #2]
        Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80107d8:	4b44      	ldr	r3, [pc, #272]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	461a      	mov	r2, r3
 80107de:	4944      	ldr	r1, [pc, #272]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 80107e0:	4613      	mov	r3, r2
 80107e2:	00db      	lsls	r3, r3, #3
 80107e4:	4413      	add	r3, r2
 80107e6:	00da      	lsls	r2, r3, #3
 80107e8:	4413      	add	r3, r2
 80107ea:	440b      	add	r3, r1
 80107ec:	3350      	adds	r3, #80	; 0x50
 80107ee:	2200      	movs	r2, #0
 80107f0:	701a      	strb	r2, [r3, #0]
        Publication1SecFlag.Transition1SecFlag = MOBLE_FALSE;
 80107f2:	4b41      	ldr	r3, [pc, #260]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 80107f4:	2200      	movs	r2, #0
 80107f6:	701a      	strb	r2, [r3, #0]
        elementIndex++;
 80107f8:	4b3c      	ldr	r3, [pc, #240]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80107fa:	781b      	ldrb	r3, [r3, #0]
 80107fc:	3301      	adds	r3, #1
 80107fe:	b2da      	uxtb	r2, r3
 8010800:	4b3a      	ldr	r3, [pc, #232]	; (80108ec <Model_BindingPublishStatus+0x230>)
 8010802:	701a      	strb	r2, [r3, #0]
        if(elementIndex == APPLICATION_NUMBER_OF_ELEMENTS)
 8010804:	4b39      	ldr	r3, [pc, #228]	; (80108ec <Model_BindingPublishStatus+0x230>)
 8010806:	781b      	ldrb	r3, [r3, #0]
 8010808:	2b01      	cmp	r3, #1
 801080a:	d169      	bne.n	80108e0 <Model_BindingPublishStatus+0x224>
        {
          elementIndex = 0;
 801080c:	4b37      	ldr	r3, [pc, #220]	; (80108ec <Model_BindingPublishStatus+0x230>)
 801080e:	2200      	movs	r2, #0
 8010810:	701a      	strb	r2, [r3, #0]
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 8010812:	e065      	b.n	80108e0 <Model_BindingPublishStatus+0x224>
      }
    }
  }
  else
  {
    Publication1SecFlag.count = 0;
 8010814:	4b38      	ldr	r3, [pc, #224]	; (80108f8 <Model_BindingPublishStatus+0x23c>)
 8010816:	2200      	movs	r2, #0
 8010818:	709a      	strb	r2, [r3, #2]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 801081a:	4b34      	ldr	r3, [pc, #208]	; (80108ec <Model_BindingPublishStatus+0x230>)
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	461a      	mov	r2, r3
 8010820:	4933      	ldr	r1, [pc, #204]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 8010822:	4613      	mov	r3, r2
 8010824:	00db      	lsls	r3, r3, #3
 8010826:	4413      	add	r3, r2
 8010828:	00da      	lsls	r2, r3, #3
 801082a:	4413      	add	r3, r2
 801082c:	440b      	add	r3, r1
 801082e:	3350      	adds	r3, #80	; 0x50
 8010830:	2200      	movs	r2, #0
 8010832:	701a      	strb	r2, [r3, #0]
    if((Generic_ModelFlag[elementIndex].GenericTransitionFlag == MODEL_TRANSITION_STOP) &&
 8010834:	4b2d      	ldr	r3, [pc, #180]	; (80108ec <Model_BindingPublishStatus+0x230>)
 8010836:	781b      	ldrb	r3, [r3, #0]
 8010838:	4619      	mov	r1, r3
 801083a:	4a30      	ldr	r2, [pc, #192]	; (80108fc <Model_BindingPublishStatus+0x240>)
 801083c:	460b      	mov	r3, r1
 801083e:	005b      	lsls	r3, r3, #1
 8010840:	440b      	add	r3, r1
 8010842:	4413      	add	r3, r2
 8010844:	781b      	ldrb	r3, [r3, #0]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d13c      	bne.n	80108c4 <Model_BindingPublishStatus+0x208>
       (Light_ModelFlag[elementIndex].LightTransitionFlag == MODEL_TRANSITION_STOP))
 801084a:	4b28      	ldr	r3, [pc, #160]	; (80108ec <Model_BindingPublishStatus+0x230>)
 801084c:	781b      	ldrb	r3, [r3, #0]
 801084e:	4619      	mov	r1, r3
 8010850:	4a2b      	ldr	r2, [pc, #172]	; (8010900 <Model_BindingPublishStatus+0x244>)
 8010852:	460b      	mov	r3, r1
 8010854:	005b      	lsls	r3, r3, #1
 8010856:	440b      	add	r3, r1
 8010858:	4413      	add	r3, r2
 801085a:	781b      	ldrb	r3, [r3, #0]
    if((Generic_ModelFlag[elementIndex].GenericTransitionFlag == MODEL_TRANSITION_STOP) &&
 801085c:	2b00      	cmp	r3, #0
 801085e:	d131      	bne.n	80108c4 <Model_BindingPublishStatus+0x208>
    {
      for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 8010860:	2300      	movs	r3, #0
 8010862:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010866:	e029      	b.n	80108bc <Model_BindingPublishStatus+0x200>
      {
        Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 8010868:	4b20      	ldr	r3, [pc, #128]	; (80108ec <Model_BindingPublishStatus+0x230>)
 801086a:	781b      	ldrb	r3, [r3, #0]
 801086c:	4619      	mov	r1, r3
 801086e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010872:	481f      	ldr	r0, [pc, #124]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 8010874:	3314      	adds	r3, #20
 8010876:	005a      	lsls	r2, r3, #1
 8010878:	460b      	mov	r3, r1
 801087a:	00db      	lsls	r3, r3, #3
 801087c:	440b      	add	r3, r1
 801087e:	00d9      	lsls	r1, r3, #3
 8010880:	440b      	add	r3, r1
 8010882:	4413      	add	r3, r2
 8010884:	4403      	add	r3, r0
 8010886:	2200      	movs	r2, #0
 8010888:	701a      	strb	r2, [r3, #0]
 801088a:	2200      	movs	r2, #0
 801088c:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 801088e:	4b17      	ldr	r3, [pc, #92]	; (80108ec <Model_BindingPublishStatus+0x230>)
 8010890:	781b      	ldrb	r3, [r3, #0]
 8010892:	4619      	mov	r1, r3
 8010894:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010898:	4815      	ldr	r0, [pc, #84]	; (80108f0 <Model_BindingPublishStatus+0x234>)
 801089a:	005a      	lsls	r2, r3, #1
 801089c:	460b      	mov	r3, r1
 801089e:	00db      	lsls	r3, r3, #3
 80108a0:	440b      	add	r3, r1
 80108a2:	00d9      	lsls	r1, r3, #3
 80108a4:	440b      	add	r3, r1
 80108a6:	4413      	add	r3, r2
 80108a8:	4403      	add	r3, r0
 80108aa:	2200      	movs	r2, #0
 80108ac:	701a      	strb	r2, [r3, #0]
 80108ae:	2200      	movs	r2, #0
 80108b0:	705a      	strb	r2, [r3, #1]
      for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 80108b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108b6:	3301      	adds	r3, #1
 80108b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80108bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108c0:	2b13      	cmp	r3, #19
 80108c2:	d9d1      	bls.n	8010868 <Model_BindingPublishStatus+0x1ac>
      }		
    }  
    elementIndex++;
 80108c4:	4b09      	ldr	r3, [pc, #36]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80108c6:	781b      	ldrb	r3, [r3, #0]
 80108c8:	3301      	adds	r3, #1
 80108ca:	b2da      	uxtb	r2, r3
 80108cc:	4b07      	ldr	r3, [pc, #28]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80108ce:	701a      	strb	r2, [r3, #0]
    if(elementIndex == APPLICATION_NUMBER_OF_ELEMENTS)
 80108d0:	4b06      	ldr	r3, [pc, #24]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	d104      	bne.n	80108e2 <Model_BindingPublishStatus+0x226>
    {
      elementIndex = 0;
 80108d8:	4b04      	ldr	r3, [pc, #16]	; (80108ec <Model_BindingPublishStatus+0x230>)
 80108da:	2200      	movs	r2, #0
 80108dc:	701a      	strb	r2, [r3, #0]
    }
  }		
}
 80108de:	e000      	b.n	80108e2 <Model_BindingPublishStatus+0x226>
    if((Wait_RandomTime() == MOBLE_TRUE)) 
 80108e0:	bf00      	nop
}
 80108e2:	bf00      	nop
 80108e4:	372c      	adds	r7, #44	; 0x2c
 80108e6:	46bd      	mov	sp, r7
 80108e8:	bd90      	pop	{r4, r7, pc}
 80108ea:	bf00      	nop
 80108ec:	20004658 	.word	0x20004658
 80108f0:	20004600 	.word	0x20004600
 80108f4:	2000455c 	.word	0x2000455c
 80108f8:	200045b8 	.word	0x200045b8
 80108fc:	2000459c 	.word	0x2000459c
 8010900:	200045b4 	.word	0x200045b4

08010904 <Light_GetStepValue>:
*         for light model.
* @param stepParam is transition time set value.
* retval void.
*/
void Light_GetStepValue(MOBLEUINT8 stepParam,MOBLEUINT8 elementIndex)
{
 8010904:	b590      	push	{r4, r7, lr}
 8010906:	b083      	sub	sp, #12
 8010908:	af00      	add	r7, sp, #0
 801090a:	4603      	mov	r3, r0
 801090c:	460a      	mov	r2, r1
 801090e:	71fb      	strb	r3, [r7, #7]
 8010910:	4613      	mov	r3, r2
 8010912:	71bb      	strb	r3, [r7, #6]
  10 = resolution is 10000 ms.
  11 = resolution is 600000 ms. 
  Last bits from 0 to 5th index is step number.
  */
  
  Light_TimeParam[elementIndex].ResBitValue = stepParam >> 6 ;
 8010914:	79ba      	ldrb	r2, [r7, #6]
 8010916:	79fb      	ldrb	r3, [r7, #7]
 8010918:	099b      	lsrs	r3, r3, #6
 801091a:	b2d8      	uxtb	r0, r3
 801091c:	493e      	ldr	r1, [pc, #248]	; (8010a18 <Light_GetStepValue+0x114>)
 801091e:	4613      	mov	r3, r2
 8010920:	009b      	lsls	r3, r3, #2
 8010922:	4413      	add	r3, r2
 8010924:	005b      	lsls	r3, r3, #1
 8010926:	440b      	add	r3, r1
 8010928:	3305      	adds	r3, #5
 801092a:	4602      	mov	r2, r0
 801092c:	701a      	strb	r2, [r3, #0]
  Light_TimeParam[elementIndex].Res_Value = Get_StepResolutionValue(Light_TimeParam[elementIndex].ResBitValue);
 801092e:	79ba      	ldrb	r2, [r7, #6]
 8010930:	4939      	ldr	r1, [pc, #228]	; (8010a18 <Light_GetStepValue+0x114>)
 8010932:	4613      	mov	r3, r2
 8010934:	009b      	lsls	r3, r3, #2
 8010936:	4413      	add	r3, r2
 8010938:	005b      	lsls	r3, r3, #1
 801093a:	440b      	add	r3, r1
 801093c:	3305      	adds	r3, #5
 801093e:	781b      	ldrb	r3, [r3, #0]
 8010940:	79bc      	ldrb	r4, [r7, #6]
 8010942:	4618      	mov	r0, r3
 8010944:	f7fc fde8 	bl	800d518 <Get_StepResolutionValue>
 8010948:	4602      	mov	r2, r0
 801094a:	4933      	ldr	r1, [pc, #204]	; (8010a18 <Light_GetStepValue+0x114>)
 801094c:	4623      	mov	r3, r4
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	4423      	add	r3, r4
 8010952:	005b      	lsls	r3, r3, #1
 8010954:	440b      	add	r3, r1
 8010956:	f8c3 2001 	str.w	r2, [r3, #1]
  Light_TimeParam[elementIndex].StepValue = stepParam & 0x3F ;
 801095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801095e:	79ba      	ldrb	r2, [r7, #6]
 8010960:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010964:	b258      	sxtb	r0, r3
 8010966:	492c      	ldr	r1, [pc, #176]	; (8010a18 <Light_GetStepValue+0x114>)
 8010968:	4613      	mov	r3, r2
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	4413      	add	r3, r2
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	440b      	add	r3, r1
 8010972:	4602      	mov	r2, r0
 8010974:	701a      	strb	r2, [r3, #0]
  
  Light_TimeParam[elementIndex].TotalTime = (Light_TimeParam[elementIndex].StepValue * Light_TimeParam[elementIndex].Res_Value);
 8010976:	79ba      	ldrb	r2, [r7, #6]
 8010978:	4927      	ldr	r1, [pc, #156]	; (8010a18 <Light_GetStepValue+0x114>)
 801097a:	4613      	mov	r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	4413      	add	r3, r2
 8010980:	005b      	lsls	r3, r3, #1
 8010982:	440b      	add	r3, r1
 8010984:	f993 3000 	ldrsb.w	r3, [r3]
 8010988:	4618      	mov	r0, r3
 801098a:	79ba      	ldrb	r2, [r7, #6]
 801098c:	4922      	ldr	r1, [pc, #136]	; (8010a18 <Light_GetStepValue+0x114>)
 801098e:	4613      	mov	r3, r2
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	4413      	add	r3, r2
 8010994:	005b      	lsls	r3, r3, #1
 8010996:	440b      	add	r3, r1
 8010998:	f8d3 3001 	ldr.w	r3, [r3, #1]
 801099c:	79ba      	ldrb	r2, [r7, #6]
 801099e:	fb03 f100 	mul.w	r1, r3, r0
 80109a2:	481d      	ldr	r0, [pc, #116]	; (8010a18 <Light_GetStepValue+0x114>)
 80109a4:	4613      	mov	r3, r2
 80109a6:	009b      	lsls	r3, r3, #2
 80109a8:	4413      	add	r3, r2
 80109aa:	005b      	lsls	r3, r3, #1
 80109ac:	4403      	add	r3, r0
 80109ae:	f8c3 1006 	str.w	r1, [r3, #6]
  
  if(Light_TimeParam[elementIndex].Res_Value >= 100)
 80109b2:	79ba      	ldrb	r2, [r7, #6]
 80109b4:	4918      	ldr	r1, [pc, #96]	; (8010a18 <Light_GetStepValue+0x114>)
 80109b6:	4613      	mov	r3, r2
 80109b8:	009b      	lsls	r3, r3, #2
 80109ba:	4413      	add	r3, r2
 80109bc:	005b      	lsls	r3, r3, #1
 80109be:	440b      	add	r3, r1
 80109c0:	f8d3 3001 	ldr.w	r3, [r3, #1]
 80109c4:	2b63      	cmp	r3, #99	; 0x63
 80109c6:	d923      	bls.n	8010a10 <Light_GetStepValue+0x10c>
  {
    Light_TimeParam[elementIndex].Res_Value = Light_TimeParam[elementIndex].Res_Value/TRANSITION_SCALER;
 80109c8:	79b9      	ldrb	r1, [r7, #6]
 80109ca:	79ba      	ldrb	r2, [r7, #6]
 80109cc:	4812      	ldr	r0, [pc, #72]	; (8010a18 <Light_GetStepValue+0x114>)
 80109ce:	460b      	mov	r3, r1
 80109d0:	009b      	lsls	r3, r3, #2
 80109d2:	440b      	add	r3, r1
 80109d4:	005b      	lsls	r3, r3, #1
 80109d6:	4403      	add	r3, r0
 80109d8:	f8d3 1001 	ldr.w	r1, [r3, #1]
 80109dc:	480e      	ldr	r0, [pc, #56]	; (8010a18 <Light_GetStepValue+0x114>)
 80109de:	4613      	mov	r3, r2
 80109e0:	009b      	lsls	r3, r3, #2
 80109e2:	4413      	add	r3, r2
 80109e4:	005b      	lsls	r3, r3, #1
 80109e6:	4403      	add	r3, r0
 80109e8:	f8c3 1001 	str.w	r1, [r3, #1]
    Light_TimeParam[elementIndex].StepValue = (Light_TimeParam[elementIndex].StepValue * TRANSITION_SCALER);
 80109ec:	79b9      	ldrb	r1, [r7, #6]
 80109ee:	79ba      	ldrb	r2, [r7, #6]
 80109f0:	4809      	ldr	r0, [pc, #36]	; (8010a18 <Light_GetStepValue+0x114>)
 80109f2:	460b      	mov	r3, r1
 80109f4:	009b      	lsls	r3, r3, #2
 80109f6:	440b      	add	r3, r1
 80109f8:	005b      	lsls	r3, r3, #1
 80109fa:	4403      	add	r3, r0
 80109fc:	f993 0000 	ldrsb.w	r0, [r3]
 8010a00:	4905      	ldr	r1, [pc, #20]	; (8010a18 <Light_GetStepValue+0x114>)
 8010a02:	4613      	mov	r3, r2
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	4413      	add	r3, r2
 8010a08:	005b      	lsls	r3, r3, #1
 8010a0a:	440b      	add	r3, r1
 8010a0c:	4602      	mov	r2, r0
 8010a0e:	701a      	strb	r2, [r3, #0]
  }
  
  TRACE_M(TF_LIGHT_M, "step resolution 0x%.2lx, number of step 0x%.2x \r\n",Light_TimeParam[elementIndex].Res_Value ,
          Light_TimeParam[elementIndex].StepValue  );   
}
 8010a10:	bf00      	nop
 8010a12:	370c      	adds	r7, #12
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd90      	pop	{r4, r7, pc}
 8010a18:	200045a8 	.word	0x200045a8

08010a1c <Lighting_Process>:
* @brief  Function to execute the transition state machine for particular Light Model
* @param  void
* @retval void
*/ 
void Lighting_Process(void)
{ 
 8010a1c:	b590      	push	{r4, r7, lr}
 8010a1e:	b08f      	sub	sp, #60	; 0x3c
 8010a20:	af02      	add	r7, sp, #8
  MOBLE_ADDRESS publishAddress;
  MOBLE_ADDRESS my_Address = BLEMesh_GetAddress();
 8010a22:	f00c fb41 	bl	801d0a8 <BLEMesh_GetAddress>
 8010a26:	4603      	mov	r3, r0
 8010a28:	85fb      	strh	r3, [r7, #46]	; 0x2e
  MODEL_MessageHeader_t msgParam;
  MOBLEUINT8 elementIndex;
  MOBLEUINT8 const pRxData[12] = {0};
 8010a2a:	2300      	movs	r3, #0
 8010a2c:	60fb      	str	r3, [r7, #12]
 8010a2e:	f107 0310 	add.w	r3, r7, #16
 8010a32:	2200      	movs	r2, #0
 8010a34:	601a      	str	r2, [r3, #0]
 8010a36:	605a      	str	r2, [r3, #4]
  MOBLEUINT32 dataLength = 0;
 8010a38:	2300      	movs	r3, #0
 8010a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010a42:	e0e5      	b.n	8010c10 <Lighting_Process+0x1f4>
  {
    my_Address = my_Address+elementIndex;
 8010a44:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a48:	b29a      	uxth	r2, r3
 8010a4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010a4c:	4413      	add	r3, r2
 8010a4e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    
    MOBLEUINT8 Light_GetBuff[8];
#endif
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
  if(Light_ModelFlag[elementIndex].LightTransitionFlag == LIGHT_LIGHTNESS_TRANSITION_START)
 8010a50:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a54:	4973      	ldr	r1, [pc, #460]	; (8010c24 <Lighting_Process+0x208>)
 8010a56:	4613      	mov	r3, r2
 8010a58:	005b      	lsls	r3, r3, #1
 8010a5a:	4413      	add	r3, r2
 8010a5c:	440b      	add	r3, r1
 8010a5e:	781b      	ldrb	r3, [r3, #0]
 8010a60:	2b01      	cmp	r3, #1
 8010a62:	d140      	bne.n	8010ae6 <Lighting_Process+0xca>
  {  
     /* Fetching the state value from the application layer to middle layer */
    (Appli_Light_GetStatus_cb.GetLightLightness_cb)(Light_GetBuff, my_Address, elementIndex);
 8010a64:	4b70      	ldr	r3, [pc, #448]	; (8010c28 <Lighting_Process+0x20c>)
 8010a66:	681b      	ldr	r3, [r3, #0]
 8010a68:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a6c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8010a6e:	1d38      	adds	r0, r7, #4
 8010a70:	4798      	blx	r3
    /* Transition function called to change the state in transition */
    Light_TransitionBehaviourSingle_Param(Light_GetBuff, elementIndex);
 8010a72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a76:	1d3b      	adds	r3, r7, #4
 8010a78:	4611      	mov	r1, r2
 8010a7a:	4618      	mov	r0, r3
 8010a7c:	f7ff fcb2 	bl	80103e4 <Light_TransitionBehaviourSingle_Param>
    if(LightUpdateFlag == VALUE_UPDATE_SET)
 8010a80:	4b6a      	ldr	r3, [pc, #424]	; (8010c2c <Lighting_Process+0x210>)
 8010a82:	781b      	ldrb	r3, [r3, #0]
 8010a84:	2b01      	cmp	r3, #1
 8010a86:	d12e      	bne.n	8010ae6 <Lighting_Process+0xca>
    {
      /* updating the state value after the each transition step complete */
      Light_LightnessStateUpdate_Process(elementIndex);
 8010a88:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	f000 f8d5 	bl	8010c3c <Light_LightnessStateUpdate_Process>
      /*Application Callback */
      (LightAppli_cb.Lightness_Set_cb)(&Light_LightnessStatus[elementIndex],0, my_Address, elementIndex); 
 8010a92:	4b67      	ldr	r3, [pc, #412]	; (8010c30 <Lighting_Process+0x214>)
 8010a94:	681c      	ldr	r4, [r3, #0]
 8010a96:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a9a:	4613      	mov	r3, r2
 8010a9c:	00db      	lsls	r3, r3, #3
 8010a9e:	4413      	add	r3, r2
 8010aa0:	4a64      	ldr	r2, [pc, #400]	; (8010c34 <Lighting_Process+0x218>)
 8010aa2:	1898      	adds	r0, r3, r2
 8010aa4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010aa8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010aaa:	2100      	movs	r1, #0
 8010aac:	47a0      	blx	r4
      /* Binding of actual light lightness with other models */
      Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_ACTUAL_SET , 0,elementIndex,
 8010aae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ab2:	495c      	ldr	r1, [pc, #368]	; (8010c24 <Lighting_Process+0x208>)
 8010ab4:	4613      	mov	r3, r2
 8010ab6:	005b      	lsls	r3, r3, #1
 8010ab8:	4413      	add	r3, r2
 8010aba:	440b      	add	r3, r1
 8010abc:	7819      	ldrb	r1, [r3, #0]
 8010abe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ac2:	4858      	ldr	r0, [pc, #352]	; (8010c24 <Lighting_Process+0x208>)
 8010ac4:	4613      	mov	r3, r2
 8010ac6:	005b      	lsls	r3, r3, #1
 8010ac8:	4413      	add	r3, r2
 8010aca:	4403      	add	r3, r0
 8010acc:	3302      	adds	r3, #2
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ad4:	9300      	str	r3, [sp, #0]
 8010ad6:	460b      	mov	r3, r1
 8010ad8:	2100      	movs	r1, #0
 8010ada:	2002      	movs	r0, #2
 8010adc:	f000 fac2 	bl	8011064 <Light_Lightness_Binding>
                              Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
      LightUpdateFlag = VALUE_UPDATE_RESET;
 8010ae0:	4b52      	ldr	r3, [pc, #328]	; (8010c2c <Lighting_Process+0x210>)
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	701a      	strb	r2, [r3, #0]
    }
  }  
  if(Light_ModelFlag[elementIndex].LightTransitionFlag == LIGHT_LINEAR_TRANSITION_START)
 8010ae6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010aea:	494e      	ldr	r1, [pc, #312]	; (8010c24 <Lighting_Process+0x208>)
 8010aec:	4613      	mov	r3, r2
 8010aee:	005b      	lsls	r3, r3, #1
 8010af0:	4413      	add	r3, r2
 8010af2:	440b      	add	r3, r1
 8010af4:	781b      	ldrb	r3, [r3, #0]
 8010af6:	2b02      	cmp	r3, #2
 8010af8:	d140      	bne.n	8010b7c <Lighting_Process+0x160>
  {
    /* Fetching the state value from the application layer to middle layer */
    (Appli_Light_GetStatus_cb.GetLightLightnessLinear_cb)(Light_GetBuff,my_Address, elementIndex);
 8010afa:	4b4b      	ldr	r3, [pc, #300]	; (8010c28 <Lighting_Process+0x20c>)
 8010afc:	685b      	ldr	r3, [r3, #4]
 8010afe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b02:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 8010b04:	1d38      	adds	r0, r7, #4
 8010b06:	4798      	blx	r3
    /* Transition function called to change the state in transition */
    Light_TransitionBehaviourSingle_Param(Light_GetBuff,elementIndex);
 8010b08:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b0c:	1d3b      	adds	r3, r7, #4
 8010b0e:	4611      	mov	r1, r2
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7ff fc67 	bl	80103e4 <Light_TransitionBehaviourSingle_Param>
    if(LightUpdateFlag == VALUE_UPDATE_SET)
 8010b16:	4b45      	ldr	r3, [pc, #276]	; (8010c2c <Lighting_Process+0x210>)
 8010b18:	781b      	ldrb	r3, [r3, #0]
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d12e      	bne.n	8010b7c <Lighting_Process+0x160>
    {
      /* updating the state value after the each transition step complete */
      Light_LinearStateUpdate_Process(elementIndex);
 8010b1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b22:	4618      	mov	r0, r3
 8010b24:	f000 f9ba 	bl	8010e9c <Light_LinearStateUpdate_Process>
      /*Application Callback */
      (LightAppli_cb.Lightness_Linear_Set_cb)(&Light_LightnessStatus[elementIndex], 0, my_Address, elementIndex);
 8010b28:	4b41      	ldr	r3, [pc, #260]	; (8010c30 <Lighting_Process+0x214>)
 8010b2a:	689c      	ldr	r4, [r3, #8]
 8010b2c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b30:	4613      	mov	r3, r2
 8010b32:	00db      	lsls	r3, r3, #3
 8010b34:	4413      	add	r3, r2
 8010b36:	4a3f      	ldr	r2, [pc, #252]	; (8010c34 <Lighting_Process+0x218>)
 8010b38:	1898      	adds	r0, r3, r2
 8010b3a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010b3e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010b40:	2100      	movs	r1, #0
 8010b42:	47a0      	blx	r4
      /* Binding of data of light lightness with light linear */
      Light_Lightness_Binding(BINDING_LIGHT_LIGHTNESS_LINEAR_SET , 0,elementIndex,
 8010b44:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b48:	4936      	ldr	r1, [pc, #216]	; (8010c24 <Lighting_Process+0x208>)
 8010b4a:	4613      	mov	r3, r2
 8010b4c:	005b      	lsls	r3, r3, #1
 8010b4e:	4413      	add	r3, r2
 8010b50:	440b      	add	r3, r1
 8010b52:	7819      	ldrb	r1, [r3, #0]
 8010b54:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b58:	4832      	ldr	r0, [pc, #200]	; (8010c24 <Lighting_Process+0x208>)
 8010b5a:	4613      	mov	r3, r2
 8010b5c:	005b      	lsls	r3, r3, #1
 8010b5e:	4413      	add	r3, r2
 8010b60:	4403      	add	r3, r0
 8010b62:	3302      	adds	r3, #2
 8010b64:	781b      	ldrb	r3, [r3, #0]
 8010b66:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	460b      	mov	r3, r1
 8010b6e:	2100      	movs	r1, #0
 8010b70:	2003      	movs	r0, #3
 8010b72:	f000 fa77 	bl	8011064 <Light_Lightness_Binding>
                              Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
      LightUpdateFlag = VALUE_UPDATE_RESET;
 8010b76:	4b2d      	ldr	r3, [pc, #180]	; (8010c2c <Lighting_Process+0x210>)
 8010b78:	2200      	movs	r2, #0
 8010b7a:	701a      	strb	r2, [r3, #0]
      LightUpdateFlag = VALUE_UPDATE_RESET;
    }
  }
#endif  
  /* Check if Transition is completed */
  if(Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt == MOBLE_TRUE)
 8010b7c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010b80:	4928      	ldr	r1, [pc, #160]	; (8010c24 <Lighting_Process+0x208>)
 8010b82:	4613      	mov	r3, r2
 8010b84:	005b      	lsls	r3, r3, #1
 8010b86:	4413      	add	r3, r2
 8010b88:	440b      	add	r3, r1
 8010b8a:	3302      	adds	r3, #2
 8010b8c:	781b      	ldrb	r3, [r3, #0]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d137      	bne.n	8010c02 <Lighting_Process+0x1e6>
  {         
    my_Address = BLEMesh_GetAddress();
 8010b92:	f00c fa89 	bl	801d0a8 <BLEMesh_GetAddress>
 8010b96:	4603      	mov	r3, r0
 8010b98:	85fb      	strh	r3, [r7, #46]	; 0x2e
    publishAddress = BLEMesh_GetPublishAddress(elementIndex, Model_Binding_Var.Model_ID);
 8010b9a:	4b27      	ldr	r3, [pc, #156]	; (8010c38 <Lighting_Process+0x21c>)
 8010b9c:	885b      	ldrh	r3, [r3, #2]
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f00c fa8e 	bl	801d0c8 <BLEMesh_GetPublishAddress>
 8010bac:	4603      	mov	r3, r0
 8010bae:	84fb      	strh	r3, [r7, #38]	; 0x26
    
    /* Initialize the messageParam*/
    msgParam.dst_peer = my_Address;
 8010bb0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010bb2:	83fb      	strh	r3, [r7, #30]
    msgParam.peer_addr = publishAddress;
 8010bb4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bb6:	83bb      	strh	r3, [r7, #28]
    msgParam.elementIndex = elementIndex;
 8010bb8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010bbc:	763b      	strb	r3, [r7, #24]
    msgParam.rcvdAppKeyOffset = 0;
 8010bbe:	2300      	movs	r3, #0
 8010bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    msgParam.rcvdNetKeyOffset = 0;
 8010bc4:	2300      	movs	r3, #0
 8010bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msgParam.rssi = 0;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    msgParam.ttl = 0;
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	f887 3020 	strb.w	r3, [r7, #32]
  
    if(publishAddress != 0x00)
 8010bd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d008      	beq.n	8010bee <Lighting_Process+0x1d2>
    {
      /*Using the same API used for Acknowledgement, where src & dst getting interchanged.
        Therefore PublishAddress is copied in peer_addr & vice-versa*/ 
      Model_SendResponse(&msgParam, Model_Binding_Var.Model_Rx_Opcode, pRxData, dataLength);
 8010bdc:	4b16      	ldr	r3, [pc, #88]	; (8010c38 <Lighting_Process+0x21c>)
 8010bde:	8819      	ldrh	r1, [r3, #0]
 8010be0:	f107 020c 	add.w	r2, r7, #12
 8010be4:	f107 0018 	add.w	r0, r7, #24
 8010be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bea:	f017 fc6b 	bl	80284c4 <Model_SendResponse>
      TRACE_M(TF_LIGHT_M, "Publishing the status after transition complete opcode %.2x model id %.2x \r\n",
       Model_Binding_Var.Model_Rx_Opcode,Model_Binding_Var.Model_ID);
    }
    Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = MOBLE_FALSE;
 8010bee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010bf2:	490c      	ldr	r1, [pc, #48]	; (8010c24 <Lighting_Process+0x208>)
 8010bf4:	4613      	mov	r3, r2
 8010bf6:	005b      	lsls	r3, r3, #1
 8010bf8:	4413      	add	r3, r2
 8010bfa:	440b      	add	r3, r1
 8010bfc:	3302      	adds	r3, #2
 8010bfe:	2200      	movs	r2, #0
 8010c00:	701a      	strb	r2, [r3, #0]
  }
#ifdef  ENABLE_MODEL_BINDING 
    /* publish the status of the node to the publish address */
  Model_BindingPublishStatus();
 8010c02:	f7ff fd5b 	bl	80106bc <Model_BindingPublishStatus>
  for(elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010c06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c0a:	3301      	adds	r3, #1
 8010c0c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8010c10:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	f43f af15 	beq.w	8010a44 <Lighting_Process+0x28>
#endif  
}
}
 8010c1a:	bf00      	nop
 8010c1c:	bf00      	nop
 8010c1e:	3734      	adds	r7, #52	; 0x34
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd90      	pop	{r4, r7, pc}
 8010c24:	200045b4 	.word	0x200045b4
 8010c28:	08032c34 	.word	0x08032c34
 8010c2c:	20004651 	.word	0x20004651
 8010c30:	08032c78 	.word	0x08032c78
 8010c34:	200045d4 	.word	0x200045d4
 8010c38:	2000455c 	.word	0x2000455c

08010c3c <Light_LightnessStateUpdate_Process>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLE_RESULT.
*/
MOBLE_RESULT Light_LightnessStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 8010c3c:	b590      	push	{r4, r7, lr}
 8010c3e:	b083      	sub	sp, #12
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	4603      	mov	r3, r0
 8010c44:	71fb      	strb	r3, [r7, #7]
  Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_TemporaryStatus[elementIndex].PresentParam_1;
 8010c46:	79fa      	ldrb	r2, [r7, #7]
 8010c48:	79f9      	ldrb	r1, [r7, #7]
 8010c4a:	483b      	ldr	r0, [pc, #236]	; (8010d38 <Light_LightnessStateUpdate_Process+0xfc>)
 8010c4c:	4613      	mov	r3, r2
 8010c4e:	005b      	lsls	r3, r3, #1
 8010c50:	4413      	add	r3, r2
 8010c52:	009b      	lsls	r3, r3, #2
 8010c54:	4413      	add	r3, r2
 8010c56:	4403      	add	r3, r0
 8010c58:	881b      	ldrh	r3, [r3, #0]
 8010c5a:	b298      	uxth	r0, r3
 8010c5c:	4a37      	ldr	r2, [pc, #220]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010c5e:	460b      	mov	r3, r1
 8010c60:	00db      	lsls	r3, r3, #3
 8010c62:	440b      	add	r3, r1
 8010c64:	4413      	add	r3, r2
 8010c66:	4602      	mov	r2, r0
 8010c68:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 = Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010c6a:	79fa      	ldrb	r2, [r7, #7]
 8010c6c:	79f9      	ldrb	r1, [r7, #7]
 8010c6e:	4832      	ldr	r0, [pc, #200]	; (8010d38 <Light_LightnessStateUpdate_Process+0xfc>)
 8010c70:	4613      	mov	r3, r2
 8010c72:	005b      	lsls	r3, r3, #1
 8010c74:	4413      	add	r3, r2
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	4413      	add	r3, r2
 8010c7a:	4403      	add	r3, r0
 8010c7c:	3306      	adds	r3, #6
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	b298      	uxth	r0, r3
 8010c82:	4a2e      	ldr	r2, [pc, #184]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010c84:	460b      	mov	r3, r1
 8010c86:	00db      	lsls	r3, r3, #3
 8010c88:	440b      	add	r3, r1
 8010c8a:	4413      	add	r3, r2
 8010c8c:	3304      	adds	r3, #4
 8010c8e:	4602      	mov	r2, r0
 8010c90:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].RemainingTime = Light_TemporaryStatus[elementIndex].RemainingTime ;
 8010c92:	79fa      	ldrb	r2, [r7, #7]
 8010c94:	79f9      	ldrb	r1, [r7, #7]
 8010c96:	4828      	ldr	r0, [pc, #160]	; (8010d38 <Light_LightnessStateUpdate_Process+0xfc>)
 8010c98:	4613      	mov	r3, r2
 8010c9a:	005b      	lsls	r3, r3, #1
 8010c9c:	4413      	add	r3, r2
 8010c9e:	009b      	lsls	r3, r3, #2
 8010ca0:	4413      	add	r3, r2
 8010ca2:	4403      	add	r3, r0
 8010ca4:	330c      	adds	r3, #12
 8010ca6:	7818      	ldrb	r0, [r3, #0]
 8010ca8:	4a24      	ldr	r2, [pc, #144]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010caa:	460b      	mov	r3, r1
 8010cac:	00db      	lsls	r3, r3, #3
 8010cae:	440b      	add	r3, r1
 8010cb0:	4413      	add	r3, r2
 8010cb2:	3306      	adds	r3, #6
 8010cb4:	4602      	mov	r2, r0
 8010cb6:	701a      	strb	r2, [r3, #0]
	
  if((Light_LightnessStatus[elementIndex].LightnessPresentValue16 == Light_LightnessStatus[elementIndex].TargetValue16) && 
 8010cb8:	79fa      	ldrb	r2, [r7, #7]
 8010cba:	4920      	ldr	r1, [pc, #128]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	00db      	lsls	r3, r3, #3
 8010cc0:	4413      	add	r3, r2
 8010cc2:	440b      	add	r3, r1
 8010cc4:	881b      	ldrh	r3, [r3, #0]
 8010cc6:	b299      	uxth	r1, r3
 8010cc8:	79fa      	ldrb	r2, [r7, #7]
 8010cca:	481c      	ldr	r0, [pc, #112]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010ccc:	4613      	mov	r3, r2
 8010cce:	00db      	lsls	r3, r3, #3
 8010cd0:	4413      	add	r3, r2
 8010cd2:	4403      	add	r3, r0
 8010cd4:	3304      	adds	r3, #4
 8010cd6:	881b      	ldrh	r3, [r3, #0]
 8010cd8:	b29b      	uxth	r3, r3
 8010cda:	4299      	cmp	r1, r3
 8010cdc:	d126      	bne.n	8010d2c <Light_LightnessStateUpdate_Process+0xf0>
     (Light_LightnessStatus[elementIndex].LightnessPresentValue16 > 0))
 8010cde:	79fa      	ldrb	r2, [r7, #7]
 8010ce0:	4916      	ldr	r1, [pc, #88]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010ce2:	4613      	mov	r3, r2
 8010ce4:	00db      	lsls	r3, r3, #3
 8010ce6:	4413      	add	r3, r2
 8010ce8:	440b      	add	r3, r1
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	b29b      	uxth	r3, r3
  if((Light_LightnessStatus[elementIndex].LightnessPresentValue16 == Light_LightnessStatus[elementIndex].TargetValue16) && 
 8010cee:	2b00      	cmp	r3, #0
 8010cf0:	d01c      	beq.n	8010d2c <Light_LightnessStateUpdate_Process+0xf0>
  {
    Light_LightnessStatus[elementIndex].LightnessLastStatus = Light_LightnessStatus[elementIndex].LightnessPresentValue16;
 8010cf2:	79f9      	ldrb	r1, [r7, #7]
 8010cf4:	79fa      	ldrb	r2, [r7, #7]
 8010cf6:	4811      	ldr	r0, [pc, #68]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010cf8:	460b      	mov	r3, r1
 8010cfa:	00db      	lsls	r3, r3, #3
 8010cfc:	440b      	add	r3, r1
 8010cfe:	4403      	add	r3, r0
 8010d00:	881b      	ldrh	r3, [r3, #0]
 8010d02:	b298      	uxth	r0, r3
 8010d04:	490d      	ldr	r1, [pc, #52]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010d06:	4613      	mov	r3, r2
 8010d08:	00db      	lsls	r3, r3, #3
 8010d0a:	4413      	add	r3, r2
 8010d0c:	440b      	add	r3, r1
 8010d0e:	4602      	mov	r2, r0
 8010d10:	f8a3 2007 	strh.w	r2, [r3, #7]
		  
    (LightAppli_cb.Lightness_Last_Set_cb)(&Light_LightnessStatus[elementIndex],elementIndex);                                       
 8010d14:	4b0a      	ldr	r3, [pc, #40]	; (8010d40 <Light_LightnessStateUpdate_Process+0x104>)
 8010d16:	699c      	ldr	r4, [r3, #24]
 8010d18:	79fa      	ldrb	r2, [r7, #7]
 8010d1a:	4613      	mov	r3, r2
 8010d1c:	00db      	lsls	r3, r3, #3
 8010d1e:	4413      	add	r3, r2
 8010d20:	4a06      	ldr	r2, [pc, #24]	; (8010d3c <Light_LightnessStateUpdate_Process+0x100>)
 8010d22:	4413      	add	r3, r2
 8010d24:	79fa      	ldrb	r2, [r7, #7]
 8010d26:	4611      	mov	r1, r2
 8010d28:	4618      	mov	r0, r3
 8010d2a:	47a0      	blx	r4
  }
  return MOBLE_RESULT_SUCCESS;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	370c      	adds	r7, #12
 8010d32:	46bd      	mov	sp, r7
 8010d34:	bd90      	pop	{r4, r7, pc}
 8010d36:	bf00      	nop
 8010d38:	200045bc 	.word	0x200045bc
 8010d3c:	200045d4 	.word	0x200045d4
 8010d40:	08032c78 	.word	0x08032c78

08010d44 <Light_ModelRangeInit>:
* @brief Light_ModelRangeInit: Function called to initialise the minimum and maximum range of model state.
* @param void
* return void.
*/
void Light_ModelRangeInit(void)
{
 8010d44:	b480      	push	{r7}
 8010d46:	b083      	sub	sp, #12
 8010d48:	af00      	add	r7, sp, #0
	
  for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	71fb      	strb	r3, [r7, #7]
 8010d4e:	e092      	b.n	8010e76 <Light_ModelRangeInit+0x132>
  {
    Light_LightnessRangeParam[elementIndex].StatusCode = 0x00;
 8010d50:	79fa      	ldrb	r2, [r7, #7]
 8010d52:	494e      	ldr	r1, [pc, #312]	; (8010e8c <Light_ModelRangeInit+0x148>)
 8010d54:	4613      	mov	r3, r2
 8010d56:	009b      	lsls	r3, r3, #2
 8010d58:	4413      	add	r3, r2
 8010d5a:	440b      	add	r3, r1
 8010d5c:	2200      	movs	r2, #0
 8010d5e:	701a      	strb	r2, [r3, #0]
    Light_LightnessRangeParam[elementIndex].MinRangeStatus = MIN_VALID_RANGE;
 8010d60:	79fa      	ldrb	r2, [r7, #7]
 8010d62:	494a      	ldr	r1, [pc, #296]	; (8010e8c <Light_ModelRangeInit+0x148>)
 8010d64:	4613      	mov	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	4413      	add	r3, r2
 8010d6a:	440b      	add	r3, r1
 8010d6c:	2200      	movs	r2, #0
 8010d6e:	705a      	strb	r2, [r3, #1]
 8010d70:	2200      	movs	r2, #0
 8010d72:	709a      	strb	r2, [r3, #2]
    Light_LightnessRangeParam[elementIndex].MaxRangeStatus = MAX_VALID_RANGE;
 8010d74:	79fa      	ldrb	r2, [r7, #7]
 8010d76:	4945      	ldr	r1, [pc, #276]	; (8010e8c <Light_ModelRangeInit+0x148>)
 8010d78:	4613      	mov	r3, r2
 8010d7a:	009b      	lsls	r3, r3, #2
 8010d7c:	4413      	add	r3, r2
 8010d7e:	440b      	add	r3, r1
 8010d80:	f04f 32ff 	mov.w	r2, #4294967295
 8010d84:	70da      	strb	r2, [r3, #3]
 8010d86:	f04f 32ff 	mov.w	r2, #4294967295
 8010d8a:	711a      	strb	r2, [r3, #4]
			
    CtlTemperatureRangeParam[elementIndex].StatusCode = 0x00;
 8010d8c:	79fa      	ldrb	r2, [r7, #7]
 8010d8e:	4940      	ldr	r1, [pc, #256]	; (8010e90 <Light_ModelRangeInit+0x14c>)
 8010d90:	4613      	mov	r3, r2
 8010d92:	009b      	lsls	r3, r3, #2
 8010d94:	4413      	add	r3, r2
 8010d96:	440b      	add	r3, r1
 8010d98:	2200      	movs	r2, #0
 8010d9a:	701a      	strb	r2, [r3, #0]
    CtlTemperatureRangeParam[elementIndex].MinRangeStatus = MIN_CTL_TEMP_RANGE;
 8010d9c:	79fa      	ldrb	r2, [r7, #7]
 8010d9e:	493c      	ldr	r1, [pc, #240]	; (8010e90 <Light_ModelRangeInit+0x14c>)
 8010da0:	4613      	mov	r3, r2
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	4413      	add	r3, r2
 8010da6:	440b      	add	r3, r1
 8010da8:	2200      	movs	r2, #0
 8010daa:	f042 0220 	orr.w	r2, r2, #32
 8010dae:	705a      	strb	r2, [r3, #1]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f042 0203 	orr.w	r2, r2, #3
 8010db6:	709a      	strb	r2, [r3, #2]
    CtlTemperatureRangeParam[elementIndex].MaxRangeStatus = MAX_CTL_TEMP_RANGE;
 8010db8:	79fa      	ldrb	r2, [r7, #7]
 8010dba:	4935      	ldr	r1, [pc, #212]	; (8010e90 <Light_ModelRangeInit+0x14c>)
 8010dbc:	4613      	mov	r3, r2
 8010dbe:	009b      	lsls	r3, r3, #2
 8010dc0:	4413      	add	r3, r2
 8010dc2:	440b      	add	r3, r1
 8010dc4:	2200      	movs	r2, #0
 8010dc6:	f042 0220 	orr.w	r2, r2, #32
 8010dca:	70da      	strb	r2, [r3, #3]
 8010dcc:	2200      	movs	r2, #0
 8010dce:	f042 024e 	orr.w	r2, r2, #78	; 0x4e
 8010dd2:	711a      	strb	r2, [r3, #4]
			
    Light_HslRangeParam[elementIndex].Status_Code = 0x00;
 8010dd4:	79fa      	ldrb	r2, [r7, #7]
 8010dd6:	492f      	ldr	r1, [pc, #188]	; (8010e94 <Light_ModelRangeInit+0x150>)
 8010dd8:	4613      	mov	r3, r2
 8010dda:	00db      	lsls	r3, r3, #3
 8010ddc:	4413      	add	r3, r2
 8010dde:	440b      	add	r3, r1
 8010de0:	2200      	movs	r2, #0
 8010de2:	701a      	strb	r2, [r3, #0]
    Light_HslRangeParam[elementIndex].HslHueMinRange16 = MIN_HUE_RANGE;
 8010de4:	79fa      	ldrb	r2, [r7, #7]
 8010de6:	492b      	ldr	r1, [pc, #172]	; (8010e94 <Light_ModelRangeInit+0x150>)
 8010de8:	4613      	mov	r3, r2
 8010dea:	00db      	lsls	r3, r3, #3
 8010dec:	4413      	add	r3, r2
 8010dee:	440b      	add	r3, r1
 8010df0:	2200      	movs	r2, #0
 8010df2:	705a      	strb	r2, [r3, #1]
 8010df4:	2200      	movs	r2, #0
 8010df6:	709a      	strb	r2, [r3, #2]
    Light_HslRangeParam[elementIndex].HslHueMaxRange16 = MAX_HUE_RANGE;
 8010df8:	79fa      	ldrb	r2, [r7, #7]
 8010dfa:	4926      	ldr	r1, [pc, #152]	; (8010e94 <Light_ModelRangeInit+0x150>)
 8010dfc:	4613      	mov	r3, r2
 8010dfe:	00db      	lsls	r3, r3, #3
 8010e00:	4413      	add	r3, r2
 8010e02:	440b      	add	r3, r1
 8010e04:	f04f 32ff 	mov.w	r2, #4294967295
 8010e08:	70da      	strb	r2, [r3, #3]
 8010e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8010e0e:	711a      	strb	r2, [r3, #4]
    Light_HslRangeParam[elementIndex].HslMinSaturation16 = MIN_SATURATION_RANGE;
 8010e10:	79fa      	ldrb	r2, [r7, #7]
 8010e12:	4920      	ldr	r1, [pc, #128]	; (8010e94 <Light_ModelRangeInit+0x150>)
 8010e14:	4613      	mov	r3, r2
 8010e16:	00db      	lsls	r3, r3, #3
 8010e18:	4413      	add	r3, r2
 8010e1a:	440b      	add	r3, r1
 8010e1c:	2200      	movs	r2, #0
 8010e1e:	715a      	strb	r2, [r3, #5]
 8010e20:	2200      	movs	r2, #0
 8010e22:	719a      	strb	r2, [r3, #6]
    Light_HslRangeParam[elementIndex].HslMaxSaturation16 = MAX_SATURATION_RANGE;
 8010e24:	79fa      	ldrb	r2, [r7, #7]
 8010e26:	491b      	ldr	r1, [pc, #108]	; (8010e94 <Light_ModelRangeInit+0x150>)
 8010e28:	4613      	mov	r3, r2
 8010e2a:	00db      	lsls	r3, r3, #3
 8010e2c:	4413      	add	r3, r2
 8010e2e:	440b      	add	r3, r1
 8010e30:	f04f 32ff 	mov.w	r2, #4294967295
 8010e34:	71da      	strb	r2, [r3, #7]
 8010e36:	f04f 32ff 	mov.w	r2, #4294967295
 8010e3a:	721a      	strb	r2, [r3, #8]
			
    Light_ModelFlag[elementIndex].LightOptionalParam = 0x00;
 8010e3c:	79fa      	ldrb	r2, [r7, #7]
 8010e3e:	4916      	ldr	r1, [pc, #88]	; (8010e98 <Light_ModelRangeInit+0x154>)
 8010e40:	4613      	mov	r3, r2
 8010e42:	005b      	lsls	r3, r3, #1
 8010e44:	4413      	add	r3, r2
 8010e46:	440b      	add	r3, r1
 8010e48:	3301      	adds	r3, #1
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[elementIndex].LightTransitionFlag = 0x0;
 8010e4e:	79fa      	ldrb	r2, [r7, #7]
 8010e50:	4911      	ldr	r1, [pc, #68]	; (8010e98 <Light_ModelRangeInit+0x154>)
 8010e52:	4613      	mov	r3, r2
 8010e54:	005b      	lsls	r3, r3, #1
 8010e56:	4413      	add	r3, r2
 8010e58:	440b      	add	r3, r1
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	701a      	strb	r2, [r3, #0]
    Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt = 0x00;  
 8010e5e:	79fa      	ldrb	r2, [r7, #7]
 8010e60:	490d      	ldr	r1, [pc, #52]	; (8010e98 <Light_ModelRangeInit+0x154>)
 8010e62:	4613      	mov	r3, r2
 8010e64:	005b      	lsls	r3, r3, #1
 8010e66:	4413      	add	r3, r2
 8010e68:	440b      	add	r3, r1
 8010e6a:	3302      	adds	r3, #2
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	701a      	strb	r2, [r3, #0]
  for(uint8_t elementIndex = 0; elementIndex < APPLICATION_NUMBER_OF_ELEMENTS; elementIndex++)
 8010e70:	79fb      	ldrb	r3, [r7, #7]
 8010e72:	3301      	adds	r3, #1
 8010e74:	71fb      	strb	r3, [r7, #7]
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	f43f af69 	beq.w	8010d50 <Light_ModelRangeInit+0xc>
  }
}
 8010e7e:	bf00      	nop
 8010e80:	bf00      	nop
 8010e82:	370c      	adds	r7, #12
 8010e84:	46bd      	mov	sp, r7
 8010e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e8a:	4770      	bx	lr
 8010e8c:	200045e4 	.word	0x200045e4
 8010e90:	200045ec 	.word	0x200045ec
 8010e94:	200045f4 	.word	0x200045f4
 8010e98:	200045b4 	.word	0x200045b4

08010e9c <Light_LinearStateUpdate_Process>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLE_RESULT.
*/
MOBLE_RESULT Light_LinearStateUpdate_Process(MOBLEUINT8 elementIndex)
{
 8010e9c:	b480      	push	{r7}
 8010e9e:	b083      	sub	sp, #12
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	71fb      	strb	r3, [r7, #7]
  Light_LightnessStatus[elementIndex].LinearPresentValue16 = Light_TemporaryStatus[elementIndex].PresentParam_1;
 8010ea6:	79fa      	ldrb	r2, [r7, #7]
 8010ea8:	79f9      	ldrb	r1, [r7, #7]
 8010eaa:	481f      	ldr	r0, [pc, #124]	; (8010f28 <Light_LinearStateUpdate_Process+0x8c>)
 8010eac:	4613      	mov	r3, r2
 8010eae:	005b      	lsls	r3, r3, #1
 8010eb0:	4413      	add	r3, r2
 8010eb2:	009b      	lsls	r3, r3, #2
 8010eb4:	4413      	add	r3, r2
 8010eb6:	4403      	add	r3, r0
 8010eb8:	881b      	ldrh	r3, [r3, #0]
 8010eba:	b298      	uxth	r0, r3
 8010ebc:	4a1b      	ldr	r2, [pc, #108]	; (8010f2c <Light_LinearStateUpdate_Process+0x90>)
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	00db      	lsls	r3, r3, #3
 8010ec2:	440b      	add	r3, r1
 8010ec4:	4413      	add	r3, r2
 8010ec6:	3302      	adds	r3, #2
 8010ec8:	4602      	mov	r2, r0
 8010eca:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 =  Light_TemporaryStatus[elementIndex].TargetParam_1;
 8010ecc:	79fa      	ldrb	r2, [r7, #7]
 8010ece:	79f9      	ldrb	r1, [r7, #7]
 8010ed0:	4815      	ldr	r0, [pc, #84]	; (8010f28 <Light_LinearStateUpdate_Process+0x8c>)
 8010ed2:	4613      	mov	r3, r2
 8010ed4:	005b      	lsls	r3, r3, #1
 8010ed6:	4413      	add	r3, r2
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	4413      	add	r3, r2
 8010edc:	4403      	add	r3, r0
 8010ede:	3306      	adds	r3, #6
 8010ee0:	881b      	ldrh	r3, [r3, #0]
 8010ee2:	b298      	uxth	r0, r3
 8010ee4:	4a11      	ldr	r2, [pc, #68]	; (8010f2c <Light_LinearStateUpdate_Process+0x90>)
 8010ee6:	460b      	mov	r3, r1
 8010ee8:	00db      	lsls	r3, r3, #3
 8010eea:	440b      	add	r3, r1
 8010eec:	4413      	add	r3, r2
 8010eee:	3304      	adds	r3, #4
 8010ef0:	4602      	mov	r2, r0
 8010ef2:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].RemainingTime = Light_TemporaryStatus[elementIndex].RemainingTime ;
 8010ef4:	79fa      	ldrb	r2, [r7, #7]
 8010ef6:	79f9      	ldrb	r1, [r7, #7]
 8010ef8:	480b      	ldr	r0, [pc, #44]	; (8010f28 <Light_LinearStateUpdate_Process+0x8c>)
 8010efa:	4613      	mov	r3, r2
 8010efc:	005b      	lsls	r3, r3, #1
 8010efe:	4413      	add	r3, r2
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	4413      	add	r3, r2
 8010f04:	4403      	add	r3, r0
 8010f06:	330c      	adds	r3, #12
 8010f08:	7818      	ldrb	r0, [r3, #0]
 8010f0a:	4a08      	ldr	r2, [pc, #32]	; (8010f2c <Light_LinearStateUpdate_Process+0x90>)
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	00db      	lsls	r3, r3, #3
 8010f10:	440b      	add	r3, r1
 8010f12:	4413      	add	r3, r2
 8010f14:	3306      	adds	r3, #6
 8010f16:	4602      	mov	r2, r0
 8010f18:	701a      	strb	r2, [r3, #0]
  return MOBLE_RESULT_SUCCESS;
 8010f1a:	2300      	movs	r3, #0
}
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	370c      	adds	r7, #12
 8010f20:	46bd      	mov	sp, r7
 8010f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f26:	4770      	bx	lr
 8010f28:	200045bc 	.word	0x200045bc
 8010f2c:	200045d4 	.word	0x200045d4

08010f30 <Light_Lightness_Linear_Binding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Lightness_Linear_Binding(MOBLEUINT8 bindingFlag ,MOBLEUINT32 length, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b086      	sub	sp, #24
 8010f34:	af02      	add	r7, sp, #8
 8010f36:	6039      	str	r1, [r7, #0]
 8010f38:	4611      	mov	r1, r2
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	4603      	mov	r3, r0
 8010f3e:	71fb      	strb	r3, [r7, #7]
 8010f40:	460b      	mov	r3, r1
 8010f42:	71bb      	strb	r3, [r7, #6]
 8010f44:	4613      	mov	r3, r2
 8010f46:	717b      	strb	r3, [r7, #5]
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 
  MOBLE_RESULT result;
  
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 8010f48:	79bb      	ldrb	r3, [r7, #6]
 8010f4a:	2b00      	cmp	r3, #0
 8010f4c:	bf0c      	ite	eq
 8010f4e:	2301      	moveq	r3, #1
 8010f50:	2300      	movne	r3, #0
 8010f52:	b2db      	uxtb	r3, r3
 8010f54:	4619      	mov	r1, r3
 8010f56:	79bb      	ldrb	r3, [r7, #6]
 8010f58:	2201      	movs	r2, #1
 8010f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8010f5e:	4299      	cmp	r1, r3
 8010f60:	d162      	bne.n	8011028 <Light_Lightness_Linear_Binding+0xf8>
  {
    if(bindingFlag == BINDING_LIGHT_LIGHTNESS_LINEAR_SET)
 8010f62:	79fb      	ldrb	r3, [r7, #7]
 8010f64:	2b03      	cmp	r3, #3
 8010f66:	d15f      	bne.n	8011028 <Light_Lightness_Linear_Binding+0xf8>
    {
      Light_Linear_ActualBinding(length, elementIndex);
 8010f68:	79bb      	ldrb	r3, [r7, #6]
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	6838      	ldr	r0, [r7, #0]
 8010f6e:	f000 fcdf 	bl	8011930 <Light_Linear_ActualBinding>
      
      result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 8010f72:	79bb      	ldrb	r3, [r7, #6]
 8010f74:	4619      	mov	r1, r3
 8010f76:	f248 204d 	movw	r0, #33357	; 0x824d
 8010f7a:	f000 fdfb 	bl	8011b74 <Chk_OpcodePresent>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	73fb      	strb	r3, [r7, #15]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 8010f82:	7bfb      	ldrb	r3, [r7, #15]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d002      	beq.n	8010f8e <Light_Lightness_Linear_Binding+0x5e>
 8010f88:	7e3b      	ldrb	r3, [r7, #24]
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	d14c      	bne.n	8011028 <Light_Lightness_Linear_Binding+0xf8>
      {     
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 8010f8e:	79ba      	ldrb	r2, [r7, #6]
 8010f90:	79b9      	ldrb	r1, [r7, #6]
 8010f92:	4832      	ldr	r0, [pc, #200]	; (801105c <Light_Lightness_Linear_Binding+0x12c>)
 8010f94:	460b      	mov	r3, r1
 8010f96:	00db      	lsls	r3, r3, #3
 8010f98:	440b      	add	r3, r1
 8010f9a:	00d9      	lsls	r1, r3, #3
 8010f9c:	440b      	add	r3, r1
 8010f9e:	4403      	add	r3, r0
 8010fa0:	3350      	adds	r3, #80	; 0x50
 8010fa2:	781b      	ldrb	r3, [r3, #0]
 8010fa4:	482d      	ldr	r0, [pc, #180]	; (801105c <Light_Lightness_Linear_Binding+0x12c>)
 8010fa6:	0059      	lsls	r1, r3, #1
 8010fa8:	4613      	mov	r3, r2
 8010faa:	00db      	lsls	r3, r3, #3
 8010fac:	4413      	add	r3, r2
 8010fae:	00da      	lsls	r2, r3, #3
 8010fb0:	4413      	add	r3, r2
 8010fb2:	440b      	add	r3, r1
 8010fb4:	4403      	add	r3, r0
 8010fb6:	2200      	movs	r2, #0
 8010fb8:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8010fbc:	701a      	strb	r2, [r3, #0]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8010fc4:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;    
 8010fc6:	79ba      	ldrb	r2, [r7, #6]
 8010fc8:	79b9      	ldrb	r1, [r7, #6]
 8010fca:	4824      	ldr	r0, [pc, #144]	; (801105c <Light_Lightness_Linear_Binding+0x12c>)
 8010fcc:	460b      	mov	r3, r1
 8010fce:	00db      	lsls	r3, r3, #3
 8010fd0:	440b      	add	r3, r1
 8010fd2:	00d9      	lsls	r1, r3, #3
 8010fd4:	440b      	add	r3, r1
 8010fd6:	4403      	add	r3, r0
 8010fd8:	3350      	adds	r3, #80	; 0x50
 8010fda:	781b      	ldrb	r3, [r3, #0]
 8010fdc:	481f      	ldr	r0, [pc, #124]	; (801105c <Light_Lightness_Linear_Binding+0x12c>)
 8010fde:	3314      	adds	r3, #20
 8010fe0:	0059      	lsls	r1, r3, #1
 8010fe2:	4613      	mov	r3, r2
 8010fe4:	00db      	lsls	r3, r3, #3
 8010fe6:	4413      	add	r3, r2
 8010fe8:	00da      	lsls	r2, r3, #3
 8010fea:	4413      	add	r3, r2
 8010fec:	440b      	add	r3, r1
 8010fee:	4403      	add	r3, r0
 8010ff0:	2200      	movs	r2, #0
 8010ff2:	701a      	strb	r2, [r3, #0]
 8010ff4:	2200      	movs	r2, #0
 8010ff6:	f042 0213 	orr.w	r2, r2, #19
 8010ffa:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8010ffc:	79ba      	ldrb	r2, [r7, #6]
 8010ffe:	4817      	ldr	r0, [pc, #92]	; (801105c <Light_Lightness_Linear_Binding+0x12c>)
 8011000:	4613      	mov	r3, r2
 8011002:	00db      	lsls	r3, r3, #3
 8011004:	4413      	add	r3, r2
 8011006:	00d9      	lsls	r1, r3, #3
 8011008:	440b      	add	r3, r1
 801100a:	4403      	add	r3, r0
 801100c:	3350      	adds	r3, #80	; 0x50
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	3301      	adds	r3, #1
 8011012:	b2d8      	uxtb	r0, r3
 8011014:	4911      	ldr	r1, [pc, #68]	; (801105c <Light_Lightness_Linear_Binding+0x12c>)
 8011016:	4613      	mov	r3, r2
 8011018:	00db      	lsls	r3, r3, #3
 801101a:	4413      	add	r3, r2
 801101c:	00da      	lsls	r2, r3, #3
 801101e:	4413      	add	r3, r2
 8011020:	440b      	add	r3, r1
 8011022:	3350      	adds	r3, #80	; 0x50
 8011024:	4602      	mov	r2, r0
 8011026:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  Light_Lightness_Binding(bindingFlag , 0,elementIndex,
 8011028:	79ba      	ldrb	r2, [r7, #6]
 801102a:	490d      	ldr	r1, [pc, #52]	; (8011060 <Light_Lightness_Linear_Binding+0x130>)
 801102c:	4613      	mov	r3, r2
 801102e:	005b      	lsls	r3, r3, #1
 8011030:	4413      	add	r3, r2
 8011032:	440b      	add	r3, r1
 8011034:	7819      	ldrb	r1, [r3, #0]
 8011036:	79ba      	ldrb	r2, [r7, #6]
 8011038:	4809      	ldr	r0, [pc, #36]	; (8011060 <Light_Lightness_Linear_Binding+0x130>)
 801103a:	4613      	mov	r3, r2
 801103c:	005b      	lsls	r3, r3, #1
 801103e:	4413      	add	r3, r2
 8011040:	4403      	add	r3, r0
 8011042:	3302      	adds	r3, #2
 8011044:	781b      	ldrb	r3, [r3, #0]
 8011046:	79ba      	ldrb	r2, [r7, #6]
 8011048:	79f8      	ldrb	r0, [r7, #7]
 801104a:	9300      	str	r3, [sp, #0]
 801104c:	460b      	mov	r3, r1
 801104e:	2100      	movs	r1, #0
 8011050:	f000 f808 	bl	8011064 <Light_Lightness_Binding>
                          Light_ModelFlag[elementIndex].LightTransitionFlag,Light_ModelFlag[elementIndex].Light_Trnsn_Cmplt);
#endif  
}
 8011054:	bf00      	nop
 8011056:	3710      	adds	r7, #16
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	20004600 	.word	0x20004600
 8011060:	200045b4 	.word	0x200045b4

08011064 <Light_Lightness_Binding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Lightness_Binding(MOBLEUINT8 bindingFlag , MOBLEUINT32 length, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	6039      	str	r1, [r7, #0]
 801106c:	4611      	mov	r1, r2
 801106e:	461a      	mov	r2, r3
 8011070:	4603      	mov	r3, r0
 8011072:	71fb      	strb	r3, [r7, #7]
 8011074:	460b      	mov	r3, r1
 8011076:	71bb      	strb	r3, [r7, #6]
 8011078:	4613      	mov	r3, r2
 801107a:	717b      	strb	r3, [r7, #5]
	   || defined (ENABLE_LIGHT_MODEL_SERVER_HSL)
  MOBLE_RESULT result;
#endif 	
 
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 801107c:	79bb      	ldrb	r3, [r7, #6]
 801107e:	2b00      	cmp	r3, #0
 8011080:	bf0c      	ite	eq
 8011082:	2301      	moveq	r3, #1
 8011084:	2300      	movne	r3, #0
 8011086:	b2db      	uxtb	r3, r3
 8011088:	4619      	mov	r1, r3
 801108a:	79bb      	ldrb	r3, [r7, #6]
 801108c:	2201      	movs	r2, #1
 801108e:	fa02 f303 	lsl.w	r3, r2, r3
 8011092:	4299      	cmp	r1, r3
 8011094:	d161      	bne.n	801115a <Light_Lightness_Binding+0xf6>
  {
    if(bindingFlag != BINDING_LIGHT_LIGHTNESS_LINEAR_SET)
 8011096:	79fb      	ldrb	r3, [r7, #7]
 8011098:	2b03      	cmp	r3, #3
 801109a:	d05e      	beq.n	801115a <Light_Lightness_Binding+0xf6>
    {
      Light_Actual_LinearBinding(elementIndex); 
 801109c:	79bb      	ldrb	r3, [r7, #6]
 801109e:	4618      	mov	r0, r3
 80110a0:	f000 fbf2 	bl	8011888 <Light_Actual_LinearBinding>
      TRACE_M(TF_LIGHT_M, "Light Lightness binding with Light Linear \r\n"); 
                  
      result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_LINEAR_SET_UNACK ,elementIndex); 
 80110a4:	79bb      	ldrb	r3, [r7, #6]
 80110a6:	4619      	mov	r1, r3
 80110a8:	f248 2051 	movw	r0, #33361	; 0x8251
 80110ac:	f000 fd62 	bl	8011b74 <Chk_OpcodePresent>
 80110b0:	4603      	mov	r3, r0
 80110b2:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 80110b4:	7bbb      	ldrb	r3, [r7, #14]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d002      	beq.n	80110c0 <Light_Lightness_Binding+0x5c>
 80110ba:	7e3b      	ldrb	r3, [r7, #24]
 80110bc:	2b01      	cmp	r3, #1
 80110be:	d14c      	bne.n	801115a <Light_Lightness_Binding+0xf6>
      {            
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_LINEAR_SET_UNACK;
 80110c0:	79ba      	ldrb	r2, [r7, #6]
 80110c2:	79b9      	ldrb	r1, [r7, #6]
 80110c4:	48c2      	ldr	r0, [pc, #776]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80110c6:	460b      	mov	r3, r1
 80110c8:	00db      	lsls	r3, r3, #3
 80110ca:	440b      	add	r3, r1
 80110cc:	00d9      	lsls	r1, r3, #3
 80110ce:	440b      	add	r3, r1
 80110d0:	4403      	add	r3, r0
 80110d2:	3350      	adds	r3, #80	; 0x50
 80110d4:	781b      	ldrb	r3, [r3, #0]
 80110d6:	48be      	ldr	r0, [pc, #760]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80110d8:	0059      	lsls	r1, r3, #1
 80110da:	4613      	mov	r3, r2
 80110dc:	00db      	lsls	r3, r3, #3
 80110de:	4413      	add	r3, r2
 80110e0:	00da      	lsls	r2, r3, #3
 80110e2:	4413      	add	r3, r2
 80110e4:	440b      	add	r3, r1
 80110e6:	4403      	add	r3, r0
 80110e8:	2200      	movs	r2, #0
 80110ea:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 80110ee:	701a      	strb	r2, [r3, #0]
 80110f0:	2200      	movs	r2, #0
 80110f2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80110f6:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;    
 80110f8:	79ba      	ldrb	r2, [r7, #6]
 80110fa:	79b9      	ldrb	r1, [r7, #6]
 80110fc:	48b4      	ldr	r0, [pc, #720]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80110fe:	460b      	mov	r3, r1
 8011100:	00db      	lsls	r3, r3, #3
 8011102:	440b      	add	r3, r1
 8011104:	00d9      	lsls	r1, r3, #3
 8011106:	440b      	add	r3, r1
 8011108:	4403      	add	r3, r0
 801110a:	3350      	adds	r3, #80	; 0x50
 801110c:	781b      	ldrb	r3, [r3, #0]
 801110e:	48b0      	ldr	r0, [pc, #704]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 8011110:	3314      	adds	r3, #20
 8011112:	0059      	lsls	r1, r3, #1
 8011114:	4613      	mov	r3, r2
 8011116:	00db      	lsls	r3, r3, #3
 8011118:	4413      	add	r3, r2
 801111a:	00da      	lsls	r2, r3, #3
 801111c:	4413      	add	r3, r2
 801111e:	440b      	add	r3, r1
 8011120:	4403      	add	r3, r0
 8011122:	2200      	movs	r2, #0
 8011124:	701a      	strb	r2, [r3, #0]
 8011126:	2200      	movs	r2, #0
 8011128:	f042 0213 	orr.w	r2, r2, #19
 801112c:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 801112e:	79ba      	ldrb	r2, [r7, #6]
 8011130:	48a7      	ldr	r0, [pc, #668]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 8011132:	4613      	mov	r3, r2
 8011134:	00db      	lsls	r3, r3, #3
 8011136:	4413      	add	r3, r2
 8011138:	00d9      	lsls	r1, r3, #3
 801113a:	440b      	add	r3, r1
 801113c:	4403      	add	r3, r0
 801113e:	3350      	adds	r3, #80	; 0x50
 8011140:	781b      	ldrb	r3, [r3, #0]
 8011142:	3301      	adds	r3, #1
 8011144:	b2d8      	uxtb	r0, r3
 8011146:	49a2      	ldr	r1, [pc, #648]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 8011148:	4613      	mov	r3, r2
 801114a:	00db      	lsls	r3, r3, #3
 801114c:	4413      	add	r3, r2
 801114e:	00da      	lsls	r2, r3, #3
 8011150:	4413      	add	r3, r2
 8011152:	440b      	add	r3, r1
 8011154:	3350      	adds	r3, #80	; 0x50
 8011156:	4602      	mov	r2, r0
 8011158:	701a      	strb	r2, [r3, #0]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic on off state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF  
    /* Binding of data b/w light lightness actual and Generic on off */
  if((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementIndex)) == (1 << elementIndex))
 801115a:	79bb      	ldrb	r3, [r7, #6]
 801115c:	2b00      	cmp	r3, #0
 801115e:	bf0c      	ite	eq
 8011160:	2301      	moveq	r3, #1
 8011162:	2300      	movne	r3, #0
 8011164:	b2db      	uxtb	r3, r3
 8011166:	4619      	mov	r1, r3
 8011168:	79bb      	ldrb	r3, [r7, #6]
 801116a:	2201      	movs	r2, #1
 801116c:	fa02 f303 	lsl.w	r3, r2, r3
 8011170:	4299      	cmp	r1, r3
 8011172:	d168      	bne.n	8011246 <Light_Lightness_Binding+0x1e2>
  {
    if(bindingFlag != BINDING_GENERIC_ON_OFF_SET)
 8011174:	79fb      	ldrb	r3, [r7, #7]
 8011176:	2b00      	cmp	r3, #0
 8011178:	d065      	beq.n	8011246 <Light_Lightness_Binding+0x1e2>
    {
      LightActual_GenericOnOffBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 801117a:	79ba      	ldrb	r2, [r7, #6]
 801117c:	4613      	mov	r3, r2
 801117e:	00db      	lsls	r3, r3, #3
 8011180:	4413      	add	r3, r2
 8011182:	4a94      	ldr	r2, [pc, #592]	; (80113d4 <Light_Lightness_Binding+0x370>)
 8011184:	4413      	add	r3, r2
 8011186:	79ba      	ldrb	r2, [r7, #6]
 8011188:	4611      	mov	r1, r2
 801118a:	4618      	mov	r0, r3
 801118c:	f7fe f9de 	bl	800f54c <LightActual_GenericOnOffBinding>
       
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_ON_OFF_SET_UNACK ,elementIndex); 
 8011190:	79bb      	ldrb	r3, [r7, #6]
 8011192:	4619      	mov	r1, r3
 8011194:	f248 2003 	movw	r0, #33283	; 0x8203
 8011198:	f000 fcec 	bl	8011b74 <Chk_OpcodePresent>
 801119c:	4603      	mov	r3, r0
 801119e:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 80111a0:	7bbb      	ldrb	r3, [r7, #14]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d002      	beq.n	80111ac <Light_Lightness_Binding+0x148>
 80111a6:	7e3b      	ldrb	r3, [r7, #24]
 80111a8:	2b01      	cmp	r3, #1
 80111aa:	d14c      	bne.n	8011246 <Light_Lightness_Binding+0x1e2>
      { 
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_ON_OFF_SET_UNACK;
 80111ac:	79ba      	ldrb	r2, [r7, #6]
 80111ae:	79b9      	ldrb	r1, [r7, #6]
 80111b0:	4887      	ldr	r0, [pc, #540]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80111b2:	460b      	mov	r3, r1
 80111b4:	00db      	lsls	r3, r3, #3
 80111b6:	440b      	add	r3, r1
 80111b8:	00d9      	lsls	r1, r3, #3
 80111ba:	440b      	add	r3, r1
 80111bc:	4403      	add	r3, r0
 80111be:	3350      	adds	r3, #80	; 0x50
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	4883      	ldr	r0, [pc, #524]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80111c4:	0059      	lsls	r1, r3, #1
 80111c6:	4613      	mov	r3, r2
 80111c8:	00db      	lsls	r3, r3, #3
 80111ca:	4413      	add	r3, r2
 80111cc:	00da      	lsls	r2, r3, #3
 80111ce:	4413      	add	r3, r2
 80111d0:	440b      	add	r3, r1
 80111d2:	4403      	add	r3, r0
 80111d4:	2200      	movs	r2, #0
 80111d6:	f042 0203 	orr.w	r2, r2, #3
 80111da:	701a      	strb	r2, [r3, #0]
 80111dc:	2200      	movs	r2, #0
 80111de:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80111e2:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_ONOFF_SERVER_MODEL_ID;
 80111e4:	79ba      	ldrb	r2, [r7, #6]
 80111e6:	79b9      	ldrb	r1, [r7, #6]
 80111e8:	4879      	ldr	r0, [pc, #484]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80111ea:	460b      	mov	r3, r1
 80111ec:	00db      	lsls	r3, r3, #3
 80111ee:	440b      	add	r3, r1
 80111f0:	00d9      	lsls	r1, r3, #3
 80111f2:	440b      	add	r3, r1
 80111f4:	4403      	add	r3, r0
 80111f6:	3350      	adds	r3, #80	; 0x50
 80111f8:	781b      	ldrb	r3, [r3, #0]
 80111fa:	4875      	ldr	r0, [pc, #468]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80111fc:	3314      	adds	r3, #20
 80111fe:	0059      	lsls	r1, r3, #1
 8011200:	4613      	mov	r3, r2
 8011202:	00db      	lsls	r3, r3, #3
 8011204:	4413      	add	r3, r2
 8011206:	00da      	lsls	r2, r3, #3
 8011208:	4413      	add	r3, r2
 801120a:	440b      	add	r3, r1
 801120c:	4403      	add	r3, r0
 801120e:	2200      	movs	r2, #0
 8011210:	701a      	strb	r2, [r3, #0]
 8011212:	2200      	movs	r2, #0
 8011214:	f042 0210 	orr.w	r2, r2, #16
 8011218:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 801121a:	79ba      	ldrb	r2, [r7, #6]
 801121c:	486c      	ldr	r0, [pc, #432]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 801121e:	4613      	mov	r3, r2
 8011220:	00db      	lsls	r3, r3, #3
 8011222:	4413      	add	r3, r2
 8011224:	00d9      	lsls	r1, r3, #3
 8011226:	440b      	add	r3, r1
 8011228:	4403      	add	r3, r0
 801122a:	3350      	adds	r3, #80	; 0x50
 801122c:	781b      	ldrb	r3, [r3, #0]
 801122e:	3301      	adds	r3, #1
 8011230:	b2d8      	uxtb	r0, r3
 8011232:	4967      	ldr	r1, [pc, #412]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 8011234:	4613      	mov	r3, r2
 8011236:	00db      	lsls	r3, r3, #3
 8011238:	4413      	add	r3, r2
 801123a:	00da      	lsls	r2, r3, #3
 801123c:	4413      	add	r3, r2
 801123e:	440b      	add	r3, r1
 8011240:	3350      	adds	r3, #80	; 0x50
 8011242:	4602      	mov	r2, r0
 8011244:	701a      	strb	r2, [r3, #0]
    As linear lightness changes, it changes the value of actual lightness
    which in turn changes the state of generic level state.
    */
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL  
    /* Binding of data b/w light lightness actual and Generic Level */
  if((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementIndex)) == (1 << elementIndex))
 8011246:	79bb      	ldrb	r3, [r7, #6]
 8011248:	2b00      	cmp	r3, #0
 801124a:	bf0c      	ite	eq
 801124c:	2301      	moveq	r3, #1
 801124e:	2300      	movne	r3, #0
 8011250:	b2db      	uxtb	r3, r3
 8011252:	4619      	mov	r1, r3
 8011254:	79bb      	ldrb	r3, [r7, #6]
 8011256:	2201      	movs	r2, #1
 8011258:	fa02 f303 	lsl.w	r3, r2, r3
 801125c:	4299      	cmp	r1, r3
 801125e:	d16a      	bne.n	8011336 <Light_Lightness_Binding+0x2d2>
  {
    if(bindingFlag != BINDING_GENERIC_LEVEL_SET)
 8011260:	79fb      	ldrb	r3, [r7, #7]
 8011262:	2b01      	cmp	r3, #1
 8011264:	d067      	beq.n	8011336 <Light_Lightness_Binding+0x2d2>
    {
      LightActual_GenericLevelBinding(&Light_LightnessStatus[elementIndex],elementIndex);
 8011266:	79ba      	ldrb	r2, [r7, #6]
 8011268:	4613      	mov	r3, r2
 801126a:	00db      	lsls	r3, r3, #3
 801126c:	4413      	add	r3, r2
 801126e:	4a59      	ldr	r2, [pc, #356]	; (80113d4 <Light_Lightness_Binding+0x370>)
 8011270:	4413      	add	r3, r2
 8011272:	79ba      	ldrb	r2, [r7, #6]
 8011274:	4611      	mov	r1, r2
 8011276:	4618      	mov	r0, r3
 8011278:	f7fe f98e 	bl	800f598 <LightActual_GenericLevelBinding>
      
      result = Chk_OpcodePresent((MOBLEUINT16)GENERIC_LEVEL_SET_UNACK ,elementIndex); 
 801127c:	79bb      	ldrb	r3, [r7, #6]
 801127e:	4619      	mov	r1, r3
 8011280:	f248 2007 	movw	r0, #33287	; 0x8207
 8011284:	f000 fc76 	bl	8011b74 <Chk_OpcodePresent>
 8011288:	4603      	mov	r3, r0
 801128a:	73bb      	strb	r3, [r7, #14]
    
      if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 801128c:	7bbb      	ldrb	r3, [r7, #14]
 801128e:	2b00      	cmp	r3, #0
 8011290:	d002      	beq.n	8011298 <Light_Lightness_Binding+0x234>
 8011292:	7e3b      	ldrb	r3, [r7, #24]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d14e      	bne.n	8011336 <Light_Lightness_Binding+0x2d2>
      {
        Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= GENERIC_LEVEL_SET_UNACK;
 8011298:	79ba      	ldrb	r2, [r7, #6]
 801129a:	79b9      	ldrb	r1, [r7, #6]
 801129c:	484c      	ldr	r0, [pc, #304]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 801129e:	460b      	mov	r3, r1
 80112a0:	00db      	lsls	r3, r3, #3
 80112a2:	440b      	add	r3, r1
 80112a4:	00d9      	lsls	r1, r3, #3
 80112a6:	440b      	add	r3, r1
 80112a8:	4403      	add	r3, r0
 80112aa:	3350      	adds	r3, #80	; 0x50
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	4848      	ldr	r0, [pc, #288]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80112b0:	0059      	lsls	r1, r3, #1
 80112b2:	4613      	mov	r3, r2
 80112b4:	00db      	lsls	r3, r3, #3
 80112b6:	4413      	add	r3, r2
 80112b8:	00da      	lsls	r2, r3, #3
 80112ba:	4413      	add	r3, r2
 80112bc:	440b      	add	r3, r1
 80112be:	4403      	add	r3, r0
 80112c0:	2200      	movs	r2, #0
 80112c2:	f042 0207 	orr.w	r2, r2, #7
 80112c6:	701a      	strb	r2, [r3, #0]
 80112c8:	2200      	movs	r2, #0
 80112ca:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80112ce:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = GENERIC_LEVEL_SERVER_MODEL_ID;
 80112d0:	79ba      	ldrb	r2, [r7, #6]
 80112d2:	79b9      	ldrb	r1, [r7, #6]
 80112d4:	483e      	ldr	r0, [pc, #248]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80112d6:	460b      	mov	r3, r1
 80112d8:	00db      	lsls	r3, r3, #3
 80112da:	440b      	add	r3, r1
 80112dc:	00d9      	lsls	r1, r3, #3
 80112de:	440b      	add	r3, r1
 80112e0:	4403      	add	r3, r0
 80112e2:	3350      	adds	r3, #80	; 0x50
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	483a      	ldr	r0, [pc, #232]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80112e8:	3314      	adds	r3, #20
 80112ea:	0059      	lsls	r1, r3, #1
 80112ec:	4613      	mov	r3, r2
 80112ee:	00db      	lsls	r3, r3, #3
 80112f0:	4413      	add	r3, r2
 80112f2:	00da      	lsls	r2, r3, #3
 80112f4:	4413      	add	r3, r2
 80112f6:	440b      	add	r3, r1
 80112f8:	4403      	add	r3, r0
 80112fa:	2200      	movs	r2, #0
 80112fc:	f042 0202 	orr.w	r2, r2, #2
 8011300:	701a      	strb	r2, [r3, #0]
 8011302:	2200      	movs	r2, #0
 8011304:	f042 0210 	orr.w	r2, r2, #16
 8011308:	705a      	strb	r2, [r3, #1]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 801130a:	79ba      	ldrb	r2, [r7, #6]
 801130c:	4830      	ldr	r0, [pc, #192]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 801130e:	4613      	mov	r3, r2
 8011310:	00db      	lsls	r3, r3, #3
 8011312:	4413      	add	r3, r2
 8011314:	00d9      	lsls	r1, r3, #3
 8011316:	440b      	add	r3, r1
 8011318:	4403      	add	r3, r0
 801131a:	3350      	adds	r3, #80	; 0x50
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	3301      	adds	r3, #1
 8011320:	b2d8      	uxtb	r0, r3
 8011322:	492b      	ldr	r1, [pc, #172]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 8011324:	4613      	mov	r3, r2
 8011326:	00db      	lsls	r3, r3, #3
 8011328:	4413      	add	r3, r2
 801132a:	00da      	lsls	r2, r3, #3
 801132c:	4413      	add	r3, r2
 801132e:	440b      	add	r3, r1
 8011330:	3350      	adds	r3, #80	; 0x50
 8011332:	4602      	mov	r2, r0
 8011334:	701a      	strb	r2, [r3, #0]
    }
  }
#endif     
   
  /* Ligtness Linear updated on its own (unsolicited change) */
  BindingDisable_LcLinearOut_LightLightnessLinear(elementIndex);
 8011336:	79bb      	ldrb	r3, [r7, #6]
 8011338:	4618      	mov	r0, r3
 801133a:	f7fc fb86 	bl	800da4a <BindingDisable_LcLinearOut_LightLightnessLinear>
  
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 801133e:	797b      	ldrb	r3, [r7, #5]
 8011340:	2b00      	cmp	r3, #0
 8011342:	d070      	beq.n	8011426 <Light_Lightness_Binding+0x3c2>
 8011344:	7e3b      	ldrb	r3, [r7, #24]
 8011346:	2b01      	cmp	r3, #1
 8011348:	d06d      	beq.n	8011426 <Light_Lightness_Binding+0x3c2>
 801134a:	4b23      	ldr	r3, [pc, #140]	; (80113d8 <Light_Lightness_Binding+0x374>)
 801134c:	781b      	ldrb	r3, [r3, #0]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d169      	bne.n	8011426 <Light_Lightness_Binding+0x3c2>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 8011352:	79ba      	ldrb	r2, [r7, #6]
 8011354:	79b9      	ldrb	r1, [r7, #6]
 8011356:	481e      	ldr	r0, [pc, #120]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 8011358:	460b      	mov	r3, r1
 801135a:	00db      	lsls	r3, r3, #3
 801135c:	440b      	add	r3, r1
 801135e:	00d9      	lsls	r1, r3, #3
 8011360:	440b      	add	r3, r1
 8011362:	4403      	add	r3, r0
 8011364:	3350      	adds	r3, #80	; 0x50
 8011366:	781b      	ldrb	r3, [r3, #0]
 8011368:	4819      	ldr	r0, [pc, #100]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 801136a:	0059      	lsls	r1, r3, #1
 801136c:	4613      	mov	r3, r2
 801136e:	00db      	lsls	r3, r3, #3
 8011370:	4413      	add	r3, r2
 8011372:	00da      	lsls	r2, r3, #3
 8011374:	4413      	add	r3, r2
 8011376:	440b      	add	r3, r1
 8011378:	4403      	add	r3, r0
 801137a:	2200      	movs	r2, #0
 801137c:	701a      	strb	r2, [r3, #0]
 801137e:	2200      	movs	r2, #0
 8011380:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 8011382:	79ba      	ldrb	r2, [r7, #6]
 8011384:	79b9      	ldrb	r1, [r7, #6]
 8011386:	4812      	ldr	r0, [pc, #72]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 8011388:	460b      	mov	r3, r1
 801138a:	00db      	lsls	r3, r3, #3
 801138c:	440b      	add	r3, r1
 801138e:	00d9      	lsls	r1, r3, #3
 8011390:	440b      	add	r3, r1
 8011392:	4403      	add	r3, r0
 8011394:	3350      	adds	r3, #80	; 0x50
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	480d      	ldr	r0, [pc, #52]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 801139a:	3314      	adds	r3, #20
 801139c:	0059      	lsls	r1, r3, #1
 801139e:	4613      	mov	r3, r2
 80113a0:	00db      	lsls	r3, r3, #3
 80113a2:	4413      	add	r3, r2
 80113a4:	00da      	lsls	r2, r3, #3
 80113a6:	4413      	add	r3, r2
 80113a8:	440b      	add	r3, r1
 80113aa:	4403      	add	r3, r0
 80113ac:	2200      	movs	r2, #0
 80113ae:	701a      	strb	r2, [r3, #0]
 80113b0:	2200      	movs	r2, #0
 80113b2:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 80113b4:	79ba      	ldrb	r2, [r7, #6]
 80113b6:	4906      	ldr	r1, [pc, #24]	; (80113d0 <Light_Lightness_Binding+0x36c>)
 80113b8:	4613      	mov	r3, r2
 80113ba:	00db      	lsls	r3, r3, #3
 80113bc:	4413      	add	r3, r2
 80113be:	00da      	lsls	r2, r3, #3
 80113c0:	4413      	add	r3, r2
 80113c2:	440b      	add	r3, r1
 80113c4:	3350      	adds	r3, #80	; 0x50
 80113c6:	2200      	movs	r2, #0
 80113c8:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 80113ca:	2300      	movs	r3, #0
 80113cc:	73fb      	strb	r3, [r7, #15]
 80113ce:	e027      	b.n	8011420 <Light_Lightness_Binding+0x3bc>
 80113d0:	20004600 	.word	0x20004600
 80113d4:	200045d4 	.word	0x200045d4
 80113d8:	200045b8 	.word	0x200045b8
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 80113dc:	79ba      	ldrb	r2, [r7, #6]
 80113de:	7bfb      	ldrb	r3, [r7, #15]
 80113e0:	4813      	ldr	r0, [pc, #76]	; (8011430 <Light_Lightness_Binding+0x3cc>)
 80113e2:	3314      	adds	r3, #20
 80113e4:	0059      	lsls	r1, r3, #1
 80113e6:	4613      	mov	r3, r2
 80113e8:	00db      	lsls	r3, r3, #3
 80113ea:	4413      	add	r3, r2
 80113ec:	00da      	lsls	r2, r3, #3
 80113ee:	4413      	add	r3, r2
 80113f0:	440b      	add	r3, r1
 80113f2:	4403      	add	r3, r0
 80113f4:	2200      	movs	r2, #0
 80113f6:	701a      	strb	r2, [r3, #0]
 80113f8:	2200      	movs	r2, #0
 80113fa:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 80113fc:	79ba      	ldrb	r2, [r7, #6]
 80113fe:	7bfb      	ldrb	r3, [r7, #15]
 8011400:	480b      	ldr	r0, [pc, #44]	; (8011430 <Light_Lightness_Binding+0x3cc>)
 8011402:	0059      	lsls	r1, r3, #1
 8011404:	4613      	mov	r3, r2
 8011406:	00db      	lsls	r3, r3, #3
 8011408:	4413      	add	r3, r2
 801140a:	00da      	lsls	r2, r3, #3
 801140c:	4413      	add	r3, r2
 801140e:	440b      	add	r3, r1
 8011410:	4403      	add	r3, r0
 8011412:	2200      	movs	r2, #0
 8011414:	701a      	strb	r2, [r3, #0]
 8011416:	2200      	movs	r2, #0
 8011418:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 801141a:	7bfb      	ldrb	r3, [r7, #15]
 801141c:	3301      	adds	r3, #1
 801141e:	73fb      	strb	r3, [r7, #15]
 8011420:	7bfb      	ldrb	r3, [r7, #15]
 8011422:	2b13      	cmp	r3, #19
 8011424:	d9da      	bls.n	80113dc <Light_Lightness_Binding+0x378>
    }
  }
}
 8011426:	bf00      	nop
 8011428:	3710      	adds	r7, #16
 801142a:	46bd      	mov	sp, r7
 801142c:	bd80      	pop	{r7, pc}
 801142e:	bf00      	nop
 8011430:	20004600 	.word	0x20004600

08011434 <GenericOnOff_LightActualBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericOnOff_LightActualBinding(Generic_OnOffStatus_t* onOff_param, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{
 8011434:	b580      	push	{r7, lr}
 8011436:	b086      	sub	sp, #24
 8011438:	af02      	add	r7, sp, #8
 801143a:	6078      	str	r0, [r7, #4]
 801143c:	4608      	mov	r0, r1
 801143e:	4611      	mov	r1, r2
 8011440:	461a      	mov	r2, r3
 8011442:	4603      	mov	r3, r0
 8011444:	70fb      	strb	r3, [r7, #3]
 8011446:	460b      	mov	r3, r1
 8011448:	70bb      	strb	r3, [r7, #2]
 801144a:	4613      	mov	r3, r2
 801144c:	707b      	strb	r3, [r7, #1]
  change.
  */
  /* condition is depends on the generic on off state */  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS 	
  MOBLE_RESULT result;
  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 801144e:	78fb      	ldrb	r3, [r7, #3]
 8011450:	2b00      	cmp	r3, #0
 8011452:	bf0c      	ite	eq
 8011454:	2301      	moveq	r3, #1
 8011456:	2300      	movne	r3, #0
 8011458:	b2db      	uxtb	r3, r3
 801145a:	4619      	mov	r1, r3
 801145c:	78fb      	ldrb	r3, [r7, #3]
 801145e:	2201      	movs	r2, #1
 8011460:	fa02 f303 	lsl.w	r3, r2, r3
 8011464:	4299      	cmp	r1, r3
 8011466:	f040 809c 	bne.w	80115a2 <GenericOnOff_LightActualBinding+0x16e>
  {       
    if(onOff_param->Present_OnOff_State == 0x00)
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	781b      	ldrb	r3, [r3, #0]
 801146e:	2b00      	cmp	r3, #0
 8011470:	d10a      	bne.n	8011488 <GenericOnOff_LightActualBinding+0x54>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = 0x00;    
 8011472:	78fa      	ldrb	r2, [r7, #3]
 8011474:	4951      	ldr	r1, [pc, #324]	; (80115bc <GenericOnOff_LightActualBinding+0x188>)
 8011476:	4613      	mov	r3, r2
 8011478:	00db      	lsls	r3, r3, #3
 801147a:	4413      	add	r3, r2
 801147c:	440b      	add	r3, r1
 801147e:	2200      	movs	r2, #0
 8011480:	701a      	strb	r2, [r3, #0]
 8011482:	2200      	movs	r2, #0
 8011484:	705a      	strb	r2, [r3, #1]
 8011486:	e031      	b.n	80114ec <GenericOnOff_LightActualBinding+0xb8>
    }
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	2b01      	cmp	r3, #1
 801148e:	d117      	bne.n	80114c0 <GenericOnOff_LightActualBinding+0x8c>
            (Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus == 0x00))
 8011490:	78fb      	ldrb	r3, [r7, #3]
 8011492:	4a4b      	ldr	r2, [pc, #300]	; (80115c0 <GenericOnOff_LightActualBinding+0x18c>)
 8011494:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 8011498:	2b00      	cmp	r3, #0
 801149a:	d111      	bne.n	80114c0 <GenericOnOff_LightActualBinding+0x8c>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_LightnessStatus[elementIndex].LightnessLastStatus;
 801149c:	78f9      	ldrb	r1, [r7, #3]
 801149e:	78fa      	ldrb	r2, [r7, #3]
 80114a0:	4846      	ldr	r0, [pc, #280]	; (80115bc <GenericOnOff_LightActualBinding+0x188>)
 80114a2:	460b      	mov	r3, r1
 80114a4:	00db      	lsls	r3, r3, #3
 80114a6:	440b      	add	r3, r1
 80114a8:	4403      	add	r3, r0
 80114aa:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80114ae:	b298      	uxth	r0, r3
 80114b0:	4942      	ldr	r1, [pc, #264]	; (80115bc <GenericOnOff_LightActualBinding+0x188>)
 80114b2:	4613      	mov	r3, r2
 80114b4:	00db      	lsls	r3, r3, #3
 80114b6:	4413      	add	r3, r2
 80114b8:	440b      	add	r3, r1
 80114ba:	4602      	mov	r2, r0
 80114bc:	801a      	strh	r2, [r3, #0]
 80114be:	e015      	b.n	80114ec <GenericOnOff_LightActualBinding+0xb8>
    }
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	781b      	ldrb	r3, [r3, #0]
 80114c4:	2b01      	cmp	r3, #1
 80114c6:	d111      	bne.n	80114ec <GenericOnOff_LightActualBinding+0xb8>
            (Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus != 0x000))
 80114c8:	78fb      	ldrb	r3, [r7, #3]
 80114ca:	4a3d      	ldr	r2, [pc, #244]	; (80115c0 <GenericOnOff_LightActualBinding+0x18c>)
 80114cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    else if((onOff_param->Present_OnOff_State == 0x01) && 
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00b      	beq.n	80114ec <GenericOnOff_LightActualBinding+0xb8>
    {
      Light_LightnessStatus[elementIndex].LightnessPresentValue16 = Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus;
 80114d4:	78fb      	ldrb	r3, [r7, #3]
 80114d6:	78fa      	ldrb	r2, [r7, #3]
 80114d8:	4939      	ldr	r1, [pc, #228]	; (80115c0 <GenericOnOff_LightActualBinding+0x18c>)
 80114da:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 80114de:	4937      	ldr	r1, [pc, #220]	; (80115bc <GenericOnOff_LightActualBinding+0x188>)
 80114e0:	4613      	mov	r3, r2
 80114e2:	00db      	lsls	r3, r3, #3
 80114e4:	4413      	add	r3, r2
 80114e6:	440b      	add	r3, r1
 80114e8:	4602      	mov	r2, r0
 80114ea:	801a      	strh	r2, [r3, #0]
    {
      /* no condition to Execute */
    }
    TRACE_M(TF_LIGHT_M, "Generic On Off binding with Light Actual \r\n"); 

    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 80114ec:	78fb      	ldrb	r3, [r7, #3]
 80114ee:	4619      	mov	r1, r3
 80114f0:	f248 204d 	movw	r0, #33357	; 0x824d
 80114f4:	f000 fb3e 	bl	8011b74 <Chk_OpcodePresent>
 80114f8:	4603      	mov	r3, r0
 80114fa:	73fb      	strb	r3, [r7, #15]
  
    if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 80114fc:	7bfb      	ldrb	r3, [r7, #15]
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d002      	beq.n	8011508 <GenericOnOff_LightActualBinding+0xd4>
 8011502:	787b      	ldrb	r3, [r7, #1]
 8011504:	2b01      	cmp	r3, #1
 8011506:	d14c      	bne.n	80115a2 <GenericOnOff_LightActualBinding+0x16e>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 8011508:	78fa      	ldrb	r2, [r7, #3]
 801150a:	78f9      	ldrb	r1, [r7, #3]
 801150c:	482d      	ldr	r0, [pc, #180]	; (80115c4 <GenericOnOff_LightActualBinding+0x190>)
 801150e:	460b      	mov	r3, r1
 8011510:	00db      	lsls	r3, r3, #3
 8011512:	440b      	add	r3, r1
 8011514:	00d9      	lsls	r1, r3, #3
 8011516:	440b      	add	r3, r1
 8011518:	4403      	add	r3, r0
 801151a:	3350      	adds	r3, #80	; 0x50
 801151c:	781b      	ldrb	r3, [r3, #0]
 801151e:	4829      	ldr	r0, [pc, #164]	; (80115c4 <GenericOnOff_LightActualBinding+0x190>)
 8011520:	0059      	lsls	r1, r3, #1
 8011522:	4613      	mov	r3, r2
 8011524:	00db      	lsls	r3, r3, #3
 8011526:	4413      	add	r3, r2
 8011528:	00da      	lsls	r2, r3, #3
 801152a:	4413      	add	r3, r2
 801152c:	440b      	add	r3, r1
 801152e:	4403      	add	r3, r0
 8011530:	2200      	movs	r2, #0
 8011532:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8011536:	701a      	strb	r2, [r3, #0]
 8011538:	2200      	movs	r2, #0
 801153a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801153e:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 8011540:	78fa      	ldrb	r2, [r7, #3]
 8011542:	78f9      	ldrb	r1, [r7, #3]
 8011544:	481f      	ldr	r0, [pc, #124]	; (80115c4 <GenericOnOff_LightActualBinding+0x190>)
 8011546:	460b      	mov	r3, r1
 8011548:	00db      	lsls	r3, r3, #3
 801154a:	440b      	add	r3, r1
 801154c:	00d9      	lsls	r1, r3, #3
 801154e:	440b      	add	r3, r1
 8011550:	4403      	add	r3, r0
 8011552:	3350      	adds	r3, #80	; 0x50
 8011554:	781b      	ldrb	r3, [r3, #0]
 8011556:	481b      	ldr	r0, [pc, #108]	; (80115c4 <GenericOnOff_LightActualBinding+0x190>)
 8011558:	3314      	adds	r3, #20
 801155a:	0059      	lsls	r1, r3, #1
 801155c:	4613      	mov	r3, r2
 801155e:	00db      	lsls	r3, r3, #3
 8011560:	4413      	add	r3, r2
 8011562:	00da      	lsls	r2, r3, #3
 8011564:	4413      	add	r3, r2
 8011566:	440b      	add	r3, r1
 8011568:	4403      	add	r3, r0
 801156a:	2200      	movs	r2, #0
 801156c:	701a      	strb	r2, [r3, #0]
 801156e:	2200      	movs	r2, #0
 8011570:	f042 0213 	orr.w	r2, r2, #19
 8011574:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011576:	78fa      	ldrb	r2, [r7, #3]
 8011578:	4812      	ldr	r0, [pc, #72]	; (80115c4 <GenericOnOff_LightActualBinding+0x190>)
 801157a:	4613      	mov	r3, r2
 801157c:	00db      	lsls	r3, r3, #3
 801157e:	4413      	add	r3, r2
 8011580:	00d9      	lsls	r1, r3, #3
 8011582:	440b      	add	r3, r1
 8011584:	4403      	add	r3, r0
 8011586:	3350      	adds	r3, #80	; 0x50
 8011588:	781b      	ldrb	r3, [r3, #0]
 801158a:	3301      	adds	r3, #1
 801158c:	b2d8      	uxtb	r0, r3
 801158e:	490d      	ldr	r1, [pc, #52]	; (80115c4 <GenericOnOff_LightActualBinding+0x190>)
 8011590:	4613      	mov	r3, r2
 8011592:	00db      	lsls	r3, r3, #3
 8011594:	4413      	add	r3, r2
 8011596:	00da      	lsls	r2, r3, #3
 8011598:	4413      	add	r3, r2
 801159a:	440b      	add	r3, r1
 801159c:	3350      	adds	r3, #80	; 0x50
 801159e:	4602      	mov	r2, r0
 80115a0:	701a      	strb	r2, [r3, #0]
  
  /*As Generic on off changes, it will change the value of the light linear due to change in the light lightness 
    value due to binding of the states.
 */
   
  Light_Lightness_Binding(BINDING_GENERIC_ON_OFF_SET, 0, elementIndex,trnsnFlag,trnsnCmplt);
 80115a2:	78b9      	ldrb	r1, [r7, #2]
 80115a4:	78fa      	ldrb	r2, [r7, #3]
 80115a6:	787b      	ldrb	r3, [r7, #1]
 80115a8:	9300      	str	r3, [sp, #0]
 80115aa:	460b      	mov	r3, r1
 80115ac:	2100      	movs	r1, #0
 80115ae:	2000      	movs	r0, #0
 80115b0:	f7ff fd58 	bl	8011064 <Light_Lightness_Binding>
}
 80115b4:	bf00      	nop
 80115b6:	3710      	adds	r7, #16
 80115b8:	46bd      	mov	sp, r7
 80115ba:	bd80      	pop	{r7, pc}
 80115bc:	200045d4 	.word	0x200045d4
 80115c0:	200045e0 	.word	0x200045e0
 80115c4:	20004600 	.word	0x20004600

080115c8 <GenericLevel_LightBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void.
*/
void GenericLevel_LightBinding(Generic_LevelStatus_t* gLevel_param , MOBLEUINT8 flag, MOBLEUINT8 elementIndex,MOBLEUINT8 trnsnFlag,MOBLEUINT8 trnsnCmplt)
{ 
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b084      	sub	sp, #16
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]
 80115d0:	4608      	mov	r0, r1
 80115d2:	4611      	mov	r1, r2
 80115d4:	461a      	mov	r2, r3
 80115d6:	4603      	mov	r3, r0
 80115d8:	70fb      	strb	r3, [r7, #3]
 80115da:	460b      	mov	r3, r1
 80115dc:	70bb      	strb	r3, [r7, #2]
 80115de:	4613      	mov	r3, r2
 80115e0:	707b      	strb	r3, [r7, #1]
  As generic Level changes, the actual lightness value will
  change.
  */
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS    

  if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementIndex)) == (1 << elementIndex))
 80115e2:	78bb      	ldrb	r3, [r7, #2]
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	bf0c      	ite	eq
 80115e8:	2301      	moveq	r3, #1
 80115ea:	2300      	movne	r3, #0
 80115ec:	b2db      	uxtb	r3, r3
 80115ee:	4619      	mov	r1, r3
 80115f0:	78bb      	ldrb	r3, [r7, #2]
 80115f2:	2201      	movs	r2, #1
 80115f4:	fa02 f303 	lsl.w	r3, r2, r3
 80115f8:	4299      	cmp	r1, r3
 80115fa:	f040 80ca 	bne.w	8011792 <GenericLevel_LightBinding+0x1ca>
  {
    Light_LightnessStatus[elementIndex].LightnessPresentValue16 = gLevel_param->Present_Level16 + 32768;   
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011604:	b21b      	sxth	r3, r3
 8011606:	b29b      	uxth	r3, r3
 8011608:	78ba      	ldrb	r2, [r7, #2]
 801160a:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 801160e:	b298      	uxth	r0, r3
 8011610:	4999      	ldr	r1, [pc, #612]	; (8011878 <GenericLevel_LightBinding+0x2b0>)
 8011612:	4613      	mov	r3, r2
 8011614:	00db      	lsls	r3, r3, #3
 8011616:	4413      	add	r3, r2
 8011618:	440b      	add	r3, r1
 801161a:	4602      	mov	r2, r0
 801161c:	801a      	strh	r2, [r3, #0]
  
    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_SET_UNACK ,elementIndex); 
 801161e:	78bb      	ldrb	r3, [r7, #2]
 8011620:	4619      	mov	r1, r3
 8011622:	f248 204d 	movw	r0, #33357	; 0x824d
 8011626:	f000 faa5 	bl	8011b74 <Chk_OpcodePresent>
 801162a:	4603      	mov	r3, r0
 801162c:	73bb      	strb	r3, [r7, #14]
    
    if((result == MOBLE_RESULT_SUCCESS) || (trnsnCmplt == MOBLE_TRUE))
 801162e:	7bbb      	ldrb	r3, [r7, #14]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d002      	beq.n	801163a <GenericLevel_LightBinding+0x72>
 8011634:	7e3b      	ldrb	r3, [r7, #24]
 8011636:	2b01      	cmp	r3, #1
 8011638:	d14c      	bne.n	80116d4 <GenericLevel_LightBinding+0x10c>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_SET_UNACK;
 801163a:	78ba      	ldrb	r2, [r7, #2]
 801163c:	78b9      	ldrb	r1, [r7, #2]
 801163e:	488f      	ldr	r0, [pc, #572]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 8011640:	460b      	mov	r3, r1
 8011642:	00db      	lsls	r3, r3, #3
 8011644:	440b      	add	r3, r1
 8011646:	00d9      	lsls	r1, r3, #3
 8011648:	440b      	add	r3, r1
 801164a:	4403      	add	r3, r0
 801164c:	3350      	adds	r3, #80	; 0x50
 801164e:	781b      	ldrb	r3, [r3, #0]
 8011650:	488a      	ldr	r0, [pc, #552]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 8011652:	0059      	lsls	r1, r3, #1
 8011654:	4613      	mov	r3, r2
 8011656:	00db      	lsls	r3, r3, #3
 8011658:	4413      	add	r3, r2
 801165a:	00da      	lsls	r2, r3, #3
 801165c:	4413      	add	r3, r2
 801165e:	440b      	add	r3, r1
 8011660:	4403      	add	r3, r0
 8011662:	2200      	movs	r2, #0
 8011664:	f042 024d 	orr.w	r2, r2, #77	; 0x4d
 8011668:	701a      	strb	r2, [r3, #0]
 801166a:	2200      	movs	r2, #0
 801166c:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8011670:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 8011672:	78ba      	ldrb	r2, [r7, #2]
 8011674:	78b9      	ldrb	r1, [r7, #2]
 8011676:	4881      	ldr	r0, [pc, #516]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 8011678:	460b      	mov	r3, r1
 801167a:	00db      	lsls	r3, r3, #3
 801167c:	440b      	add	r3, r1
 801167e:	00d9      	lsls	r1, r3, #3
 8011680:	440b      	add	r3, r1
 8011682:	4403      	add	r3, r0
 8011684:	3350      	adds	r3, #80	; 0x50
 8011686:	781b      	ldrb	r3, [r3, #0]
 8011688:	487c      	ldr	r0, [pc, #496]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 801168a:	3314      	adds	r3, #20
 801168c:	0059      	lsls	r1, r3, #1
 801168e:	4613      	mov	r3, r2
 8011690:	00db      	lsls	r3, r3, #3
 8011692:	4413      	add	r3, r2
 8011694:	00da      	lsls	r2, r3, #3
 8011696:	4413      	add	r3, r2
 8011698:	440b      	add	r3, r1
 801169a:	4403      	add	r3, r0
 801169c:	2200      	movs	r2, #0
 801169e:	701a      	strb	r2, [r3, #0]
 80116a0:	2200      	movs	r2, #0
 80116a2:	f042 0213 	orr.w	r2, r2, #19
 80116a6:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 80116a8:	78ba      	ldrb	r2, [r7, #2]
 80116aa:	4874      	ldr	r0, [pc, #464]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 80116ac:	4613      	mov	r3, r2
 80116ae:	00db      	lsls	r3, r3, #3
 80116b0:	4413      	add	r3, r2
 80116b2:	00d9      	lsls	r1, r3, #3
 80116b4:	440b      	add	r3, r1
 80116b6:	4403      	add	r3, r0
 80116b8:	3350      	adds	r3, #80	; 0x50
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	3301      	adds	r3, #1
 80116be:	b2d8      	uxtb	r0, r3
 80116c0:	496e      	ldr	r1, [pc, #440]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 80116c2:	4613      	mov	r3, r2
 80116c4:	00db      	lsls	r3, r3, #3
 80116c6:	4413      	add	r3, r2
 80116c8:	00da      	lsls	r2, r3, #3
 80116ca:	4413      	add	r3, r2
 80116cc:	440b      	add	r3, r1
 80116ce:	3350      	adds	r3, #80	; 0x50
 80116d0:	4602      	mov	r2, r0
 80116d2:	701a      	strb	r2, [r3, #0]
    }
  
    /*As Generic Level changes, it will change the value of the light linear due to change in the light lightness 
      value due to binding of the states.
    */
    Light_Actual_LinearBinding(elementIndex);
 80116d4:	78bb      	ldrb	r3, [r7, #2]
 80116d6:	4618      	mov	r0, r3
 80116d8:	f000 f8d6 	bl	8011888 <Light_Actual_LinearBinding>
  
    result = Chk_OpcodePresent((MOBLEUINT16)LIGHT_LIGHTNESS_LINEAR_SET_UNACK ,elementIndex); 
 80116dc:	78bb      	ldrb	r3, [r7, #2]
 80116de:	4619      	mov	r1, r3
 80116e0:	f248 2051 	movw	r0, #33361	; 0x8251
 80116e4:	f000 fa46 	bl	8011b74 <Chk_OpcodePresent>
 80116e8:	4603      	mov	r3, r0
 80116ea:	73bb      	strb	r3, [r7, #14]
    
    if(result == MOBLE_RESULT_SUCCESS || (trnsnCmplt == MOBLE_TRUE))
 80116ec:	7bbb      	ldrb	r3, [r7, #14]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d002      	beq.n	80116f8 <GenericLevel_LightBinding+0x130>
 80116f2:	7e3b      	ldrb	r3, [r7, #24]
 80116f4:	2b01      	cmp	r3, #1
 80116f6:	d14c      	bne.n	8011792 <GenericLevel_LightBinding+0x1ca>
    {
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= LIGHT_LIGHTNESS_LINEAR_SET_UNACK;
 80116f8:	78ba      	ldrb	r2, [r7, #2]
 80116fa:	78b9      	ldrb	r1, [r7, #2]
 80116fc:	485f      	ldr	r0, [pc, #380]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 80116fe:	460b      	mov	r3, r1
 8011700:	00db      	lsls	r3, r3, #3
 8011702:	440b      	add	r3, r1
 8011704:	00d9      	lsls	r1, r3, #3
 8011706:	440b      	add	r3, r1
 8011708:	4403      	add	r3, r0
 801170a:	3350      	adds	r3, #80	; 0x50
 801170c:	781b      	ldrb	r3, [r3, #0]
 801170e:	485b      	ldr	r0, [pc, #364]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 8011710:	0059      	lsls	r1, r3, #1
 8011712:	4613      	mov	r3, r2
 8011714:	00db      	lsls	r3, r3, #3
 8011716:	4413      	add	r3, r2
 8011718:	00da      	lsls	r2, r3, #3
 801171a:	4413      	add	r3, r2
 801171c:	440b      	add	r3, r1
 801171e:	4403      	add	r3, r0
 8011720:	2200      	movs	r2, #0
 8011722:	f042 0251 	orr.w	r2, r2, #81	; 0x51
 8011726:	701a      	strb	r2, [r3, #0]
 8011728:	2200      	movs	r2, #0
 801172a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801172e:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;
 8011730:	78ba      	ldrb	r2, [r7, #2]
 8011732:	78b9      	ldrb	r1, [r7, #2]
 8011734:	4851      	ldr	r0, [pc, #324]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 8011736:	460b      	mov	r3, r1
 8011738:	00db      	lsls	r3, r3, #3
 801173a:	440b      	add	r3, r1
 801173c:	00d9      	lsls	r1, r3, #3
 801173e:	440b      	add	r3, r1
 8011740:	4403      	add	r3, r0
 8011742:	3350      	adds	r3, #80	; 0x50
 8011744:	781b      	ldrb	r3, [r3, #0]
 8011746:	484d      	ldr	r0, [pc, #308]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 8011748:	3314      	adds	r3, #20
 801174a:	0059      	lsls	r1, r3, #1
 801174c:	4613      	mov	r3, r2
 801174e:	00db      	lsls	r3, r3, #3
 8011750:	4413      	add	r3, r2
 8011752:	00da      	lsls	r2, r3, #3
 8011754:	4413      	add	r3, r2
 8011756:	440b      	add	r3, r1
 8011758:	4403      	add	r3, r0
 801175a:	2200      	movs	r2, #0
 801175c:	701a      	strb	r2, [r3, #0]
 801175e:	2200      	movs	r2, #0
 8011760:	f042 0213 	orr.w	r2, r2, #19
 8011764:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].BindedStateCount++;
 8011766:	78ba      	ldrb	r2, [r7, #2]
 8011768:	4844      	ldr	r0, [pc, #272]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 801176a:	4613      	mov	r3, r2
 801176c:	00db      	lsls	r3, r3, #3
 801176e:	4413      	add	r3, r2
 8011770:	00d9      	lsls	r1, r3, #3
 8011772:	440b      	add	r3, r1
 8011774:	4403      	add	r3, r0
 8011776:	3350      	adds	r3, #80	; 0x50
 8011778:	781b      	ldrb	r3, [r3, #0]
 801177a:	3301      	adds	r3, #1
 801177c:	b2d8      	uxtb	r0, r3
 801177e:	493f      	ldr	r1, [pc, #252]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 8011780:	4613      	mov	r3, r2
 8011782:	00db      	lsls	r3, r3, #3
 8011784:	4413      	add	r3, r2
 8011786:	00da      	lsls	r2, r3, #3
 8011788:	4413      	add	r3, r2
 801178a:	440b      	add	r3, r1
 801178c:	3350      	adds	r3, #80	; 0x50
 801178e:	4602      	mov	r2, r0
 8011790:	701a      	strb	r2, [r3, #0]
        Light_PublishOpcodeList[elementIndex].BindedStateCount++;
      }
    }
  }
#endif    
  if((trnsnFlag != MODEL_TRANSITION_STOP) && (trnsnCmplt != MOBLE_TRUE) && (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 8011792:	787b      	ldrb	r3, [r7, #1]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d06a      	beq.n	801186e <GenericLevel_LightBinding+0x2a6>
 8011798:	7e3b      	ldrb	r3, [r7, #24]
 801179a:	2b01      	cmp	r3, #1
 801179c:	d067      	beq.n	801186e <GenericLevel_LightBinding+0x2a6>
 801179e:	4b38      	ldr	r3, [pc, #224]	; (8011880 <GenericLevel_LightBinding+0x2b8>)
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d163      	bne.n	801186e <GenericLevel_LightBinding+0x2a6>
  {
    Light_PublishOpcodeList[elementIndex].PublishStateOpcode[Light_PublishOpcodeList[elementIndex].BindedStateCount]= 0;
 80117a6:	78ba      	ldrb	r2, [r7, #2]
 80117a8:	78b9      	ldrb	r1, [r7, #2]
 80117aa:	4834      	ldr	r0, [pc, #208]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 80117ac:	460b      	mov	r3, r1
 80117ae:	00db      	lsls	r3, r3, #3
 80117b0:	440b      	add	r3, r1
 80117b2:	00d9      	lsls	r1, r3, #3
 80117b4:	440b      	add	r3, r1
 80117b6:	4403      	add	r3, r0
 80117b8:	3350      	adds	r3, #80	; 0x50
 80117ba:	781b      	ldrb	r3, [r3, #0]
 80117bc:	482f      	ldr	r0, [pc, #188]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 80117be:	0059      	lsls	r1, r3, #1
 80117c0:	4613      	mov	r3, r2
 80117c2:	00db      	lsls	r3, r3, #3
 80117c4:	4413      	add	r3, r2
 80117c6:	00da      	lsls	r2, r3, #3
 80117c8:	4413      	add	r3, r2
 80117ca:	440b      	add	r3, r1
 80117cc:	4403      	add	r3, r0
 80117ce:	2200      	movs	r2, #0
 80117d0:	701a      	strb	r2, [r3, #0]
 80117d2:	2200      	movs	r2, #0
 80117d4:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].Model_ID[Light_PublishOpcodeList[elementIndex].BindedStateCount] = 0;
 80117d6:	78ba      	ldrb	r2, [r7, #2]
 80117d8:	78b9      	ldrb	r1, [r7, #2]
 80117da:	4828      	ldr	r0, [pc, #160]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 80117dc:	460b      	mov	r3, r1
 80117de:	00db      	lsls	r3, r3, #3
 80117e0:	440b      	add	r3, r1
 80117e2:	00d9      	lsls	r1, r3, #3
 80117e4:	440b      	add	r3, r1
 80117e6:	4403      	add	r3, r0
 80117e8:	3350      	adds	r3, #80	; 0x50
 80117ea:	781b      	ldrb	r3, [r3, #0]
 80117ec:	4823      	ldr	r0, [pc, #140]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 80117ee:	3314      	adds	r3, #20
 80117f0:	0059      	lsls	r1, r3, #1
 80117f2:	4613      	mov	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	4413      	add	r3, r2
 80117f8:	00da      	lsls	r2, r3, #3
 80117fa:	4413      	add	r3, r2
 80117fc:	440b      	add	r3, r1
 80117fe:	4403      	add	r3, r0
 8011800:	2200      	movs	r2, #0
 8011802:	701a      	strb	r2, [r3, #0]
 8011804:	2200      	movs	r2, #0
 8011806:	705a      	strb	r2, [r3, #1]
    Light_PublishOpcodeList[elementIndex].BindedStateCount = 0;
 8011808:	78ba      	ldrb	r2, [r7, #2]
 801180a:	491c      	ldr	r1, [pc, #112]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 801180c:	4613      	mov	r3, r2
 801180e:	00db      	lsls	r3, r3, #3
 8011810:	4413      	add	r3, r2
 8011812:	00da      	lsls	r2, r3, #3
 8011814:	4413      	add	r3, r2
 8011816:	440b      	add	r3, r1
 8011818:	3350      	adds	r3, #80	; 0x50
 801181a:	2200      	movs	r2, #0
 801181c:	701a      	strb	r2, [r3, #0]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 801181e:	2300      	movs	r3, #0
 8011820:	73fb      	strb	r3, [r7, #15]
 8011822:	e021      	b.n	8011868 <GenericLevel_LightBinding+0x2a0>
    {
      Light_PublishOpcodeList[elementIndex].Model_ID[idx] = 0;
 8011824:	78ba      	ldrb	r2, [r7, #2]
 8011826:	7bfb      	ldrb	r3, [r7, #15]
 8011828:	4814      	ldr	r0, [pc, #80]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 801182a:	3314      	adds	r3, #20
 801182c:	0059      	lsls	r1, r3, #1
 801182e:	4613      	mov	r3, r2
 8011830:	00db      	lsls	r3, r3, #3
 8011832:	4413      	add	r3, r2
 8011834:	00da      	lsls	r2, r3, #3
 8011836:	4413      	add	r3, r2
 8011838:	440b      	add	r3, r1
 801183a:	4403      	add	r3, r0
 801183c:	2200      	movs	r2, #0
 801183e:	701a      	strb	r2, [r3, #0]
 8011840:	2200      	movs	r2, #0
 8011842:	705a      	strb	r2, [r3, #1]
      Light_PublishOpcodeList[elementIndex].PublishStateOpcode[idx] = 0;
 8011844:	78ba      	ldrb	r2, [r7, #2]
 8011846:	7bfb      	ldrb	r3, [r7, #15]
 8011848:	480c      	ldr	r0, [pc, #48]	; (801187c <GenericLevel_LightBinding+0x2b4>)
 801184a:	0059      	lsls	r1, r3, #1
 801184c:	4613      	mov	r3, r2
 801184e:	00db      	lsls	r3, r3, #3
 8011850:	4413      	add	r3, r2
 8011852:	00da      	lsls	r2, r3, #3
 8011854:	4413      	add	r3, r2
 8011856:	440b      	add	r3, r1
 8011858:	4403      	add	r3, r0
 801185a:	2200      	movs	r2, #0
 801185c:	701a      	strb	r2, [r3, #0]
 801185e:	2200      	movs	r2, #0
 8011860:	705a      	strb	r2, [r3, #1]
    for(MOBLEUINT8 idx = 0; idx < MAX_NUM_BINDED_STATE; idx++)
 8011862:	7bfb      	ldrb	r3, [r7, #15]
 8011864:	3301      	adds	r3, #1
 8011866:	73fb      	strb	r3, [r7, #15]
 8011868:	7bfb      	ldrb	r3, [r7, #15]
 801186a:	2b13      	cmp	r3, #19
 801186c:	d9da      	bls.n	8011824 <GenericLevel_LightBinding+0x25c>
    }
  } 
}
 801186e:	bf00      	nop
 8011870:	3710      	adds	r7, #16
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}
 8011876:	bf00      	nop
 8011878:	200045d4 	.word	0x200045d4
 801187c:	20004600 	.word	0x20004600
 8011880:	200045b8 	.word	0x200045b8
 8011884:	00000000 	.word	0x00000000

08011888 <Light_Actual_LinearBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLEUINT16
*/
MOBLEUINT16 Light_Actual_LinearBinding(MOBLEUINT8 elementIndex)
{
 8011888:	b580      	push	{r7, lr}
 801188a:	b084      	sub	sp, #16
 801188c:	af00      	add	r7, sp, #0
 801188e:	4603      	mov	r3, r0
 8011890:	71fb      	strb	r3, [r7, #7]
  float productValue;
  
  productValue = pow((((float)Light_LightnessStatus[elementIndex].LightnessPresentValue16)/65535) , 2);
 8011892:	79fa      	ldrb	r2, [r7, #7]
 8011894:	4924      	ldr	r1, [pc, #144]	; (8011928 <Light_Actual_LinearBinding+0xa0>)
 8011896:	4613      	mov	r3, r2
 8011898:	00db      	lsls	r3, r3, #3
 801189a:	4413      	add	r3, r2
 801189c:	440b      	add	r3, r1
 801189e:	881b      	ldrh	r3, [r3, #0]
 80118a0:	b29b      	uxth	r3, r3
 80118a2:	ee07 3a90 	vmov	s15, r3
 80118a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80118aa:	ed9f 7a20 	vldr	s14, [pc, #128]	; 801192c <Light_Actual_LinearBinding+0xa4>
 80118ae:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80118b2:	ee16 0a90 	vmov	r0, s13
 80118b6:	f7ee fe1f 	bl	80004f8 <__aeabi_f2d>
 80118ba:	4602      	mov	r2, r0
 80118bc:	460b      	mov	r3, r1
 80118be:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8011920 <Light_Actual_LinearBinding+0x98>
 80118c2:	ec43 2b10 	vmov	d0, r2, r3
 80118c6:	f01a fb55 	bl	802bf74 <pow>
 80118ca:	ec53 2b10 	vmov	r2, r3, d0
 80118ce:	4610      	mov	r0, r2
 80118d0:	4619      	mov	r1, r3
 80118d2:	f7ef f941 	bl	8000b58 <__aeabi_d2f>
 80118d6:	4603      	mov	r3, r0
 80118d8:	60fb      	str	r3, [r7, #12]
  Light_LightnessStatus[elementIndex].LinearPresentValue16 = (MOBLEUINT16)(65535 * productValue);
 80118da:	edd7 7a03 	vldr	s15, [r7, #12]
 80118de:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801192c <Light_Actual_LinearBinding+0xa4>
 80118e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80118e6:	79fa      	ldrb	r2, [r7, #7]
 80118e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80118ec:	ee17 3a90 	vmov	r3, s15
 80118f0:	b298      	uxth	r0, r3
 80118f2:	490d      	ldr	r1, [pc, #52]	; (8011928 <Light_Actual_LinearBinding+0xa0>)
 80118f4:	4613      	mov	r3, r2
 80118f6:	00db      	lsls	r3, r3, #3
 80118f8:	4413      	add	r3, r2
 80118fa:	440b      	add	r3, r1
 80118fc:	3302      	adds	r3, #2
 80118fe:	4602      	mov	r2, r0
 8011900:	801a      	strh	r2, [r3, #0]
 
  return Light_LightnessStatus[elementIndex].LinearPresentValue16; 
 8011902:	79fa      	ldrb	r2, [r7, #7]
 8011904:	4908      	ldr	r1, [pc, #32]	; (8011928 <Light_Actual_LinearBinding+0xa0>)
 8011906:	4613      	mov	r3, r2
 8011908:	00db      	lsls	r3, r3, #3
 801190a:	4413      	add	r3, r2
 801190c:	440b      	add	r3, r1
 801190e:	3302      	adds	r3, #2
 8011910:	881b      	ldrh	r3, [r3, #0]
 8011912:	b29b      	uxth	r3, r3
}
 8011914:	4618      	mov	r0, r3
 8011916:	3710      	adds	r7, #16
 8011918:	46bd      	mov	sp, r7
 801191a:	bd80      	pop	{r7, pc}
 801191c:	f3af 8000 	nop.w
 8011920:	00000000 	.word	0x00000000
 8011924:	40000000 	.word	0x40000000
 8011928:	200045d4 	.word	0x200045d4
 801192c:	477fff00 	.word	0x477fff00

08011930 <Light_Linear_ActualBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return MOBLEUINT16
*/
MOBLEUINT16 Light_Linear_ActualBinding(MOBLEUINT32 length, MOBLEUINT8 elementIndex)
{
 8011930:	b580      	push	{r7, lr}
 8011932:	b084      	sub	sp, #16
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
 8011938:	460b      	mov	r3, r1
 801193a:	70fb      	strb	r3, [r7, #3]
  /*
  6.1.2.1.1 - actual lightness = 655354 * squareroot(linear lightness/ 655354).
  */
  float productValue;
  
  if(length <= 3)
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	2b03      	cmp	r3, #3
 8011940:	d83e      	bhi.n	80119c0 <Light_Linear_ActualBinding+0x90>
  {
    productValue = sqrt((((float)Light_LightnessStatus[elementIndex].LinearPresentValue16) / 65535));
 8011942:	78fa      	ldrb	r2, [r7, #3]
 8011944:	494a      	ldr	r1, [pc, #296]	; (8011a70 <Light_Linear_ActualBinding+0x140>)
 8011946:	4613      	mov	r3, r2
 8011948:	00db      	lsls	r3, r3, #3
 801194a:	4413      	add	r3, r2
 801194c:	440b      	add	r3, r1
 801194e:	3302      	adds	r3, #2
 8011950:	881b      	ldrh	r3, [r3, #0]
 8011952:	b29b      	uxth	r3, r3
 8011954:	ee07 3a90 	vmov	s15, r3
 8011958:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801195c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8011a74 <Light_Linear_ActualBinding+0x144>
 8011960:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8011964:	ee16 0a90 	vmov	r0, s13
 8011968:	f7ee fdc6 	bl	80004f8 <__aeabi_f2d>
 801196c:	4602      	mov	r2, r0
 801196e:	460b      	mov	r3, r1
 8011970:	ec43 2b10 	vmov	d0, r2, r3
 8011974:	f01a fb6e 	bl	802c054 <sqrt>
 8011978:	ec53 2b10 	vmov	r2, r3, d0
 801197c:	4610      	mov	r0, r2
 801197e:	4619      	mov	r1, r3
 8011980:	f7ef f8ea 	bl	8000b58 <__aeabi_d2f>
 8011984:	4603      	mov	r3, r0
 8011986:	60fb      	str	r3, [r7, #12]
    Light_LightnessStatus[elementIndex].LightnessPresentValue16 = (MOBLEUINT16)(65535 * productValue);      
 8011988:	edd7 7a03 	vldr	s15, [r7, #12]
 801198c:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8011a74 <Light_Linear_ActualBinding+0x144>
 8011990:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011994:	78fa      	ldrb	r2, [r7, #3]
 8011996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801199a:	ee17 3a90 	vmov	r3, s15
 801199e:	b298      	uxth	r0, r3
 80119a0:	4933      	ldr	r1, [pc, #204]	; (8011a70 <Light_Linear_ActualBinding+0x140>)
 80119a2:	4613      	mov	r3, r2
 80119a4:	00db      	lsls	r3, r3, #3
 80119a6:	4413      	add	r3, r2
 80119a8:	440b      	add	r3, r1
 80119aa:	4602      	mov	r2, r0
 80119ac:	801a      	strh	r2, [r3, #0]
    
    return Light_LightnessStatus[elementIndex].LightnessPresentValue16;  
 80119ae:	78fa      	ldrb	r2, [r7, #3]
 80119b0:	492f      	ldr	r1, [pc, #188]	; (8011a70 <Light_Linear_ActualBinding+0x140>)
 80119b2:	4613      	mov	r3, r2
 80119b4:	00db      	lsls	r3, r3, #3
 80119b6:	4413      	add	r3, r2
 80119b8:	440b      	add	r3, r1
 80119ba:	881b      	ldrh	r3, [r3, #0]
 80119bc:	b29b      	uxth	r3, r3
 80119be:	e053      	b.n	8011a68 <Light_Linear_ActualBinding+0x138>
  }
  else
  {
    productValue = sqrt((((float)Light_LightnessStatus[elementIndex].TargetValue16) / 65535));
 80119c0:	78fa      	ldrb	r2, [r7, #3]
 80119c2:	492b      	ldr	r1, [pc, #172]	; (8011a70 <Light_Linear_ActualBinding+0x140>)
 80119c4:	4613      	mov	r3, r2
 80119c6:	00db      	lsls	r3, r3, #3
 80119c8:	4413      	add	r3, r2
 80119ca:	440b      	add	r3, r1
 80119cc:	3304      	adds	r3, #4
 80119ce:	881b      	ldrh	r3, [r3, #0]
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	ee07 3a90 	vmov	s15, r3
 80119d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80119da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8011a74 <Light_Linear_ActualBinding+0x144>
 80119de:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80119e2:	ee16 0a90 	vmov	r0, s13
 80119e6:	f7ee fd87 	bl	80004f8 <__aeabi_f2d>
 80119ea:	4602      	mov	r2, r0
 80119ec:	460b      	mov	r3, r1
 80119ee:	ec43 2b10 	vmov	d0, r2, r3
 80119f2:	f01a fb2f 	bl	802c054 <sqrt>
 80119f6:	ec53 2b10 	vmov	r2, r3, d0
 80119fa:	4610      	mov	r0, r2
 80119fc:	4619      	mov	r1, r3
 80119fe:	f7ef f8ab 	bl	8000b58 <__aeabi_d2f>
 8011a02:	4603      	mov	r3, r0
 8011a04:	60fb      	str	r3, [r7, #12]
    Light_LightnessStatus[elementIndex].TargetValue16 = (MOBLEUINT16)(65535 * productValue);
 8011a06:	edd7 7a03 	vldr	s15, [r7, #12]
 8011a0a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8011a74 <Light_Linear_ActualBinding+0x144>
 8011a0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a12:	78fa      	ldrb	r2, [r7, #3]
 8011a14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8011a18:	ee17 3a90 	vmov	r3, s15
 8011a1c:	b298      	uxth	r0, r3
 8011a1e:	4914      	ldr	r1, [pc, #80]	; (8011a70 <Light_Linear_ActualBinding+0x140>)
 8011a20:	4613      	mov	r3, r2
 8011a22:	00db      	lsls	r3, r3, #3
 8011a24:	4413      	add	r3, r2
 8011a26:	440b      	add	r3, r1
 8011a28:	3304      	adds	r3, #4
 8011a2a:	4602      	mov	r2, r0
 8011a2c:	801a      	strh	r2, [r3, #0]
    Light_TemporaryStatus[elementIndex].TargetParam_1 = Light_LightnessStatus[elementIndex].TargetValue16;   
 8011a2e:	78f9      	ldrb	r1, [r7, #3]
 8011a30:	78fa      	ldrb	r2, [r7, #3]
 8011a32:	480f      	ldr	r0, [pc, #60]	; (8011a70 <Light_Linear_ActualBinding+0x140>)
 8011a34:	460b      	mov	r3, r1
 8011a36:	00db      	lsls	r3, r3, #3
 8011a38:	440b      	add	r3, r1
 8011a3a:	4403      	add	r3, r0
 8011a3c:	3304      	adds	r3, #4
 8011a3e:	881b      	ldrh	r3, [r3, #0]
 8011a40:	b298      	uxth	r0, r3
 8011a42:	490d      	ldr	r1, [pc, #52]	; (8011a78 <Light_Linear_ActualBinding+0x148>)
 8011a44:	4613      	mov	r3, r2
 8011a46:	005b      	lsls	r3, r3, #1
 8011a48:	4413      	add	r3, r2
 8011a4a:	009b      	lsls	r3, r3, #2
 8011a4c:	4413      	add	r3, r2
 8011a4e:	440b      	add	r3, r1
 8011a50:	3306      	adds	r3, #6
 8011a52:	4602      	mov	r2, r0
 8011a54:	801a      	strh	r2, [r3, #0]
    
    return Light_LightnessStatus[elementIndex].TargetValue16;  
 8011a56:	78fa      	ldrb	r2, [r7, #3]
 8011a58:	4905      	ldr	r1, [pc, #20]	; (8011a70 <Light_Linear_ActualBinding+0x140>)
 8011a5a:	4613      	mov	r3, r2
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	4413      	add	r3, r2
 8011a60:	440b      	add	r3, r1
 8011a62:	3304      	adds	r3, #4
 8011a64:	881b      	ldrh	r3, [r3, #0]
 8011a66:	b29b      	uxth	r3, r3
  }
}
 8011a68:	4618      	mov	r0, r3
 8011a6a:	3710      	adds	r7, #16
 8011a6c:	46bd      	mov	sp, r7
 8011a6e:	bd80      	pop	{r7, pc}
 8011a70:	200045d4 	.word	0x200045d4
 8011a74:	477fff00 	.word	0x477fff00
 8011a78:	200045bc 	.word	0x200045bc

08011a7c <Light_Actual_RangeBinding>:
* @param  elementIndex: index of the element received from peer for this node which
*                     is elementNumber-1
* return void
*/
void Light_Actual_RangeBinding(Light_LightnessParam_t* lightActual, MOBLEUINT8 elementIndex)
{
 8011a7c:	b480      	push	{r7}
 8011a7e:	b083      	sub	sp, #12
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
 8011a84:	460b      	mov	r3, r1
 8011a86:	70fb      	strb	r3, [r7, #3]
  6.1.2.2.5 - actual lightness = range minimum if actual lighteness is less than range min
  value.
  actual lightness = range maximum if actual lighteness is greater than range max
  value.
  */
  if((lightActual->TargetLightnessStatus < Light_LightnessRangeParam[elementIndex].MinRangeStatus)
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	881b      	ldrh	r3, [r3, #0]
 8011a8c:	b299      	uxth	r1, r3
 8011a8e:	78fa      	ldrb	r2, [r7, #3]
 8011a90:	481f      	ldr	r0, [pc, #124]	; (8011b10 <Light_Actual_RangeBinding+0x94>)
 8011a92:	4613      	mov	r3, r2
 8011a94:	009b      	lsls	r3, r3, #2
 8011a96:	4413      	add	r3, r2
 8011a98:	4403      	add	r3, r0
 8011a9a:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011a9e:	b29b      	uxth	r3, r3
 8011aa0:	4299      	cmp	r1, r3
 8011aa2:	d210      	bcs.n	8011ac6 <Light_Actual_RangeBinding+0x4a>
     && (lightActual->TargetLightnessStatus != 0))
 8011aa4:	687b      	ldr	r3, [r7, #4]
 8011aa6:	881b      	ldrh	r3, [r3, #0]
 8011aa8:	b29b      	uxth	r3, r3
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d00b      	beq.n	8011ac6 <Light_Actual_RangeBinding+0x4a>
  {
    lightActual->TargetLightnessStatus = Light_LightnessRangeParam[elementIndex].MinRangeStatus;
 8011aae:	78fa      	ldrb	r2, [r7, #3]
 8011ab0:	4917      	ldr	r1, [pc, #92]	; (8011b10 <Light_Actual_RangeBinding+0x94>)
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	009b      	lsls	r3, r3, #2
 8011ab6:	4413      	add	r3, r2
 8011ab8:	440b      	add	r3, r1
 8011aba:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8011abe:	b29a      	uxth	r2, r3
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	801a      	strh	r2, [r3, #0]
  }
  else
  {
    /* no condition to execute */
  }
}
 8011ac4:	e01d      	b.n	8011b02 <Light_Actual_RangeBinding+0x86>
  else if((lightActual->TargetLightnessStatus > Light_LightnessRangeParam[elementIndex].MaxRangeStatus)
 8011ac6:	687b      	ldr	r3, [r7, #4]
 8011ac8:	881b      	ldrh	r3, [r3, #0]
 8011aca:	b299      	uxth	r1, r3
 8011acc:	78fa      	ldrb	r2, [r7, #3]
 8011ace:	4810      	ldr	r0, [pc, #64]	; (8011b10 <Light_Actual_RangeBinding+0x94>)
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	4413      	add	r3, r2
 8011ad6:	4403      	add	r3, r0
 8011ad8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	4299      	cmp	r1, r3
 8011ae0:	d90f      	bls.n	8011b02 <Light_Actual_RangeBinding+0x86>
          && (lightActual->TargetLightnessStatus != 0))
 8011ae2:	687b      	ldr	r3, [r7, #4]
 8011ae4:	881b      	ldrh	r3, [r3, #0]
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d00a      	beq.n	8011b02 <Light_Actual_RangeBinding+0x86>
    lightActual->TargetLightnessStatus = Light_LightnessRangeParam[elementIndex].MaxRangeStatus;
 8011aec:	78fa      	ldrb	r2, [r7, #3]
 8011aee:	4908      	ldr	r1, [pc, #32]	; (8011b10 <Light_Actual_RangeBinding+0x94>)
 8011af0:	4613      	mov	r3, r2
 8011af2:	009b      	lsls	r3, r3, #2
 8011af4:	4413      	add	r3, r2
 8011af6:	440b      	add	r3, r1
 8011af8:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 8011afc:	b29a      	uxth	r2, r3
 8011afe:	687b      	ldr	r3, [r7, #4]
 8011b00:	801a      	strh	r2, [r3, #0]
}
 8011b02:	bf00      	nop
 8011b04:	370c      	adds	r7, #12
 8011b06:	46bd      	mov	sp, r7
 8011b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0c:	4770      	bx	lr
 8011b0e:	bf00      	nop
 8011b10:	200045e4 	.word	0x200045e4

08011b14 <Light_TransitionParameterReset>:
* @brief Function called when message received without optional parameter, stop the running transition.
* @param void
* @param void
*/
void Light_TransitionParameterReset(MOBLEUINT8 elementIndex)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	4603      	mov	r3, r0
 8011b1c:	71fb      	strb	r3, [r7, #7]
  Light_ModelFlag[elementIndex].LightTransitionFlag = MODEL_TRANSITION_STOP;
 8011b1e:	79fa      	ldrb	r2, [r7, #7]
 8011b20:	4912      	ldr	r1, [pc, #72]	; (8011b6c <Light_TransitionParameterReset+0x58>)
 8011b22:	4613      	mov	r3, r2
 8011b24:	005b      	lsls	r3, r3, #1
 8011b26:	4413      	add	r3, r2
 8011b28:	440b      	add	r3, r1
 8011b2a:	2200      	movs	r2, #0
 8011b2c:	701a      	strb	r2, [r3, #0]
  Light_TimeParam[elementIndex].Res_Value = 0x00;
 8011b2e:	79fa      	ldrb	r2, [r7, #7]
 8011b30:	490f      	ldr	r1, [pc, #60]	; (8011b70 <Light_TransitionParameterReset+0x5c>)
 8011b32:	4613      	mov	r3, r2
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	4413      	add	r3, r2
 8011b38:	005b      	lsls	r3, r3, #1
 8011b3a:	440b      	add	r3, r1
 8011b3c:	2200      	movs	r2, #0
 8011b3e:	705a      	strb	r2, [r3, #1]
 8011b40:	2200      	movs	r2, #0
 8011b42:	709a      	strb	r2, [r3, #2]
 8011b44:	2200      	movs	r2, #0
 8011b46:	70da      	strb	r2, [r3, #3]
 8011b48:	2200      	movs	r2, #0
 8011b4a:	711a      	strb	r2, [r3, #4]
  Light_TimeParam[elementIndex].StepValue = 0x00;
 8011b4c:	79fa      	ldrb	r2, [r7, #7]
 8011b4e:	4908      	ldr	r1, [pc, #32]	; (8011b70 <Light_TransitionParameterReset+0x5c>)
 8011b50:	4613      	mov	r3, r2
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	4413      	add	r3, r2
 8011b56:	005b      	lsls	r3, r3, #1
 8011b58:	440b      	add	r3, r1
 8011b5a:	2200      	movs	r2, #0
 8011b5c:	701a      	strb	r2, [r3, #0]
}
 8011b5e:	bf00      	nop
 8011b60:	370c      	adds	r7, #12
 8011b62:	46bd      	mov	sp, r7
 8011b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b68:	4770      	bx	lr
 8011b6a:	bf00      	nop
 8011b6c:	200045b4 	.word	0x200045b4
 8011b70:	200045a8 	.word	0x200045a8

08011b74 <Chk_OpcodePresent>:
* @param opcode: opcode of the model
* @param elementIndex:element index of the model
* @return : MOBLE_RESULT
*/
MOBLE_RESULT Chk_OpcodePresent(MOBLEUINT16 opcode ,MOBLEUINT8 elementIndex)
{
 8011b74:	b480      	push	{r7}
 8011b76:	b085      	sub	sp, #20
 8011b78:	af00      	add	r7, sp, #0
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	460a      	mov	r2, r1
 8011b7e:	80fb      	strh	r3, [r7, #6]
 8011b80:	4613      	mov	r3, r2
 8011b82:	717b      	strb	r3, [r7, #5]
 
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 8011b84:	2300      	movs	r3, #0
 8011b86:	73fb      	strb	r3, [r7, #15]
 8011b88:	e014      	b.n	8011bb4 <Chk_OpcodePresent+0x40>
  {
    if((Light_PublishOpcodeList[elementIndex].PublishStateOpcode[index]) == opcode)
 8011b8a:	797a      	ldrb	r2, [r7, #5]
 8011b8c:	7bfb      	ldrb	r3, [r7, #15]
 8011b8e:	480e      	ldr	r0, [pc, #56]	; (8011bc8 <Chk_OpcodePresent+0x54>)
 8011b90:	0059      	lsls	r1, r3, #1
 8011b92:	4613      	mov	r3, r2
 8011b94:	00db      	lsls	r3, r3, #3
 8011b96:	4413      	add	r3, r2
 8011b98:	00da      	lsls	r2, r3, #3
 8011b9a:	4413      	add	r3, r2
 8011b9c:	440b      	add	r3, r1
 8011b9e:	4403      	add	r3, r0
 8011ba0:	881b      	ldrh	r3, [r3, #0]
 8011ba2:	b29b      	uxth	r3, r3
 8011ba4:	88fa      	ldrh	r2, [r7, #6]
 8011ba6:	429a      	cmp	r2, r3
 8011ba8:	d101      	bne.n	8011bae <Chk_OpcodePresent+0x3a>
    {
      return  MOBLE_RESULT_FALSE;
 8011baa:	2301      	movs	r3, #1
 8011bac:	e006      	b.n	8011bbc <Chk_OpcodePresent+0x48>
  for(MOBLEUINT8 index=0; index < MAX_NUM_BINDED_STATE; index++)
 8011bae:	7bfb      	ldrb	r3, [r7, #15]
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	73fb      	strb	r3, [r7, #15]
 8011bb4:	7bfb      	ldrb	r3, [r7, #15]
 8011bb6:	2b13      	cmp	r3, #19
 8011bb8:	d9e7      	bls.n	8011b8a <Chk_OpcodePresent+0x16>
    }
  }
   return MOBLE_RESULT_SUCCESS;     
 8011bba:	2300      	movs	r3, #0
}
 8011bbc:	4618      	mov	r0, r3
 8011bbe:	3714      	adds	r7, #20
 8011bc0:	46bd      	mov	sp, r7
 8011bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc6:	4770      	bx	lr
 8011bc8:	20004600 	.word	0x20004600

08011bcc <Punblication_OneSecTimer>:
* @brief  Function used to calculate the particular time delay only once.
* @param  MOBLEUINT16
* @retval MOBLEUINT8
*/
void Punblication_OneSecTimer(void)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	af00      	add	r7, sp, #0
  static MOBLEUINT32 Check_time;
  
  /* Taking the time stamp for particular time */
  if(Publication1SecFlag.TimeStampFlag == MOBLE_FALSE)
 8011bd0:	4b0e      	ldr	r3, [pc, #56]	; (8011c0c <Punblication_OneSecTimer+0x40>)
 8011bd2:	785b      	ldrb	r3, [r3, #1]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d107      	bne.n	8011be8 <Punblication_OneSecTimer+0x1c>
  {
    Check_time = Clock_Time();
 8011bd8:	f7f6 f944 	bl	8007e64 <HAL_GetTick>
 8011bdc:	4603      	mov	r3, r0
 8011bde:	4a0c      	ldr	r2, [pc, #48]	; (8011c10 <Punblication_OneSecTimer+0x44>)
 8011be0:	6013      	str	r3, [r2, #0]
    Publication1SecFlag.TimeStampFlag = MOBLE_TRUE;
 8011be2:	4b0a      	ldr	r3, [pc, #40]	; (8011c0c <Punblication_OneSecTimer+0x40>)
 8011be4:	2201      	movs	r2, #1
 8011be6:	705a      	strb	r2, [r3, #1]
  }
  
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 8011be8:	f7f6 f93c 	bl	8007e64 <HAL_GetTick>
 8011bec:	4602      	mov	r2, r0
 8011bee:	4b08      	ldr	r3, [pc, #32]	; (8011c10 <Punblication_OneSecTimer+0x44>)
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	1ad3      	subs	r3, r2, r3
 8011bf4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8011bf8:	d306      	bcc.n	8011c08 <Punblication_OneSecTimer+0x3c>
                  (Publication1SecFlag.Transition1SecFlag == MOBLE_FALSE))
 8011bfa:	4b04      	ldr	r3, [pc, #16]	; (8011c0c <Punblication_OneSecTimer+0x40>)
 8011bfc:	781b      	ldrb	r3, [r3, #0]
  if(((Clock_Time()- Check_time) >= PUBLISH_1SEC_TIME) &&
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d102      	bne.n	8011c08 <Punblication_OneSecTimer+0x3c>
  {
      Publication1SecFlag.Transition1SecFlag = MOBLE_TRUE;
 8011c02:	4b02      	ldr	r3, [pc, #8]	; (8011c0c <Punblication_OneSecTimer+0x40>)
 8011c04:	2201      	movs	r2, #1
 8011c06:	701a      	strb	r2, [r3, #0]
  }
}
 8011c08:	bf00      	nop
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	200045b8 	.word	0x200045b8
 8011c10:	2000465c 	.word	0x2000465c

08011c14 <Light_RestoreModelStates>:
* @brief function used to restore the states of the generic model.
* @param pointer to the array
* return void.
*/
void Light_RestoreModelStates(void *model_State , MOBLEUINT8 elementIndex)
{
 8011c14:	b480      	push	{r7}
 8011c16:	b083      	sub	sp, #12
 8011c18:	af00      	add	r7, sp, #0
 8011c1a:	6078      	str	r0, [r7, #4]
 8011c1c:	460b      	mov	r3, r1
 8011c1e:	70fb      	strb	r3, [r7, #3]
  
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS  
  Light_LightnessStatus[elementIndex].LightnessPresentValue16 = ((Models_ParamNvm_t *)model_State)->LightLightness; 
 8011c20:	78fa      	ldrb	r2, [r7, #3]
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	8918      	ldrh	r0, [r3, #8]
 8011c26:	4914      	ldr	r1, [pc, #80]	; (8011c78 <Light_RestoreModelStates+0x64>)
 8011c28:	4613      	mov	r3, r2
 8011c2a:	00db      	lsls	r3, r3, #3
 8011c2c:	4413      	add	r3, r2
 8011c2e:	440b      	add	r3, r1
 8011c30:	4602      	mov	r2, r0
 8011c32:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].TargetValue16 = ((Models_ParamNvm_t *)model_State)->LightTarget;
 8011c34:	78fa      	ldrb	r2, [r7, #3]
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	8958      	ldrh	r0, [r3, #10]
 8011c3a:	490f      	ldr	r1, [pc, #60]	; (8011c78 <Light_RestoreModelStates+0x64>)
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	00db      	lsls	r3, r3, #3
 8011c40:	4413      	add	r3, r2
 8011c42:	440b      	add	r3, r1
 8011c44:	3304      	adds	r3, #4
 8011c46:	4602      	mov	r2, r0
 8011c48:	801a      	strh	r2, [r3, #0]
  Light_LightnessStatus[elementIndex].LightnessLastStatus = ((Models_ParamNvm_t *)model_State)->LightLast;
 8011c4a:	78fa      	ldrb	r2, [r7, #3]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	89d8      	ldrh	r0, [r3, #14]
 8011c50:	4909      	ldr	r1, [pc, #36]	; (8011c78 <Light_RestoreModelStates+0x64>)
 8011c52:	4613      	mov	r3, r2
 8011c54:	00db      	lsls	r3, r3, #3
 8011c56:	4413      	add	r3, r2
 8011c58:	440b      	add	r3, r1
 8011c5a:	4602      	mov	r2, r0
 8011c5c:	f8a3 2007 	strh.w	r2, [r3, #7]
  Light_LightnessDefaultParam[elementIndex].LightnessDefaultStatus = ((Models_ParamNvm_t *)model_State)->LightDefault;
 8011c60:	78fb      	ldrb	r3, [r7, #3]
 8011c62:	687a      	ldr	r2, [r7, #4]
 8011c64:	8991      	ldrh	r1, [r2, #12]
 8011c66:	4a05      	ldr	r2, [pc, #20]	; (8011c7c <Light_RestoreModelStates+0x68>)
 8011c68:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  Light_HslStatus[elementIndex].PresentHslSaturation16 = ((Models_ParamNvm_t *)model_State)->HslSaturation;
  Light_HslDefaultParam[elementIndex].HslLightnessDefault16 = ((Models_ParamNvm_t *)model_State)->HslLightnessDefault;
  Light_HslDefaultParam[elementIndex].HslHueDefault16 = ((Models_ParamNvm_t *)model_State)->HslHueDefault;
  Light_HslDefaultParam[elementIndex].HslSaturationDefault16 = ((Models_ParamNvm_t *)model_State)->HslSaturationDefault;  
#endif   
}
 8011c6c:	bf00      	nop
 8011c6e:	370c      	adds	r7, #12
 8011c70:	46bd      	mov	sp, r7
 8011c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c76:	4770      	bx	lr
 8011c78:	200045d4 	.word	0x200045d4
 8011c7c:	200045e0 	.word	0x200045e0

08011c80 <Appli_Light_Ctl_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_Ctl_Set(Light_CtlStatus_t* pLight_CtlParam,
                                               MOBLEUINT8 OptionalValid, 
                                               uint16_t dstPeer, 
                                               uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011c80:	b480      	push	{r7}
 8011c82:	b083      	sub	sp, #12
 8011c84:	af00      	add	r7, sp, #0
 8011c86:	6078      	str	r0, [r7, #4]
 8011c88:	4608      	mov	r0, r1
 8011c8a:	4611      	mov	r1, r2
 8011c8c:	461a      	mov	r2, r3
 8011c8e:	4603      	mov	r3, r0
 8011c90:	70fb      	strb	r3, [r7, #3]
 8011c92:	460b      	mov	r3, r1
 8011c94:	803b      	strh	r3, [r7, #0]
 8011c96:	4613      	mov	r3, r2
 8011c98:	70bb      	strb	r3, [r7, #2]
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	370c      	adds	r7, #12
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ca6:	4770      	bx	lr

08011ca8 <Appli_Light_CtlTemperature_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlTemperature_Set(Light_CtlStatus_t* pLight_CtltempParam,
                                                          MOBLEUINT8 OptionalValid, 
                                                          uint16_t dstPeer, 
                                                          uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011ca8:	b480      	push	{r7}
 8011caa:	b083      	sub	sp, #12
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
 8011cb0:	4608      	mov	r0, r1
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	461a      	mov	r2, r3
 8011cb6:	4603      	mov	r3, r0
 8011cb8:	70fb      	strb	r3, [r7, #3]
 8011cba:	460b      	mov	r3, r1
 8011cbc:	803b      	strh	r3, [r7, #0]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	70bb      	strb	r3, [r7, #2]
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <Appli_Light_CtlTemperature_Range_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlTemperature_Range_Set(Light_CtlTemperatureRangeParam_t* pLight_CtlTempRangeParam,
                                                                MOBLEUINT8 OptionalValid, 
                                                                uint16_t dstPeer, 
                                                                uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011cd0:	b480      	push	{r7}
 8011cd2:	b083      	sub	sp, #12
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
 8011cd8:	4608      	mov	r0, r1
 8011cda:	4611      	mov	r1, r2
 8011cdc:	461a      	mov	r2, r3
 8011cde:	4603      	mov	r3, r0
 8011ce0:	70fb      	strb	r3, [r7, #3]
 8011ce2:	460b      	mov	r3, r1
 8011ce4:	803b      	strh	r3, [r7, #0]
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	70bb      	strb	r3, [r7, #2]
 8011cea:	2300      	movs	r3, #0
 8011cec:	4618      	mov	r0, r3
 8011cee:	370c      	adds	r7, #12
 8011cf0:	46bd      	mov	sp, r7
 8011cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf6:	4770      	bx	lr

08011cf8 <Appli_Light_CtlDefault_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_CtlDefault_Set(Light_CtlDefaultParam_t* pLight_CtlDefaultParam,
                                                      MOBLEUINT8 OptionalValid, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	4608      	mov	r0, r1
 8011d02:	4611      	mov	r1, r2
 8011d04:	461a      	mov	r2, r3
 8011d06:	4603      	mov	r3, r0
 8011d08:	70fb      	strb	r3, [r7, #3]
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	803b      	strh	r3, [r7, #0]
 8011d0e:	4613      	mov	r3, r2
 8011d10:	70bb      	strb	r3, [r7, #2]
 8011d12:	2300      	movs	r3, #0
 8011d14:	4618      	mov	r0, r3
 8011d16:	370c      	adds	r7, #12
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <Appli_Light_Hsl_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_Hsl_Set(Light_HslStatus_t* pLight_HslParam,
                                               MOBLEUINT8 OptionalValid, 
                                               uint16_t dstPeer, 
                                               uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d20:	b480      	push	{r7}
 8011d22:	b083      	sub	sp, #12
 8011d24:	af00      	add	r7, sp, #0
 8011d26:	6078      	str	r0, [r7, #4]
 8011d28:	4608      	mov	r0, r1
 8011d2a:	4611      	mov	r1, r2
 8011d2c:	461a      	mov	r2, r3
 8011d2e:	4603      	mov	r3, r0
 8011d30:	70fb      	strb	r3, [r7, #3]
 8011d32:	460b      	mov	r3, r1
 8011d34:	803b      	strh	r3, [r7, #0]
 8011d36:	4613      	mov	r3, r2
 8011d38:	70bb      	strb	r3, [r7, #2]
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	4618      	mov	r0, r3
 8011d3e:	370c      	adds	r7, #12
 8011d40:	46bd      	mov	sp, r7
 8011d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d46:	4770      	bx	lr

08011d48 <Appli_Light_HslHue_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslHue_Set(Light_HslStatus_t* pLight_HslHueParam,
                                                  MOBLEUINT8 OptionalValid, 
                                                  uint16_t dstPeer, 
                                                  uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d48:	b480      	push	{r7}
 8011d4a:	b083      	sub	sp, #12
 8011d4c:	af00      	add	r7, sp, #0
 8011d4e:	6078      	str	r0, [r7, #4]
 8011d50:	4608      	mov	r0, r1
 8011d52:	4611      	mov	r1, r2
 8011d54:	461a      	mov	r2, r3
 8011d56:	4603      	mov	r3, r0
 8011d58:	70fb      	strb	r3, [r7, #3]
 8011d5a:	460b      	mov	r3, r1
 8011d5c:	803b      	strh	r3, [r7, #0]
 8011d5e:	4613      	mov	r3, r2
 8011d60:	70bb      	strb	r3, [r7, #2]
 8011d62:	2300      	movs	r3, #0
 8011d64:	4618      	mov	r0, r3
 8011d66:	370c      	adds	r7, #12
 8011d68:	46bd      	mov	sp, r7
 8011d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6e:	4770      	bx	lr

08011d70 <Appli_Light_HslSaturation_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslSaturation_Set(Light_HslStatus_t* pLight_HslSaturationParam,
                                                         MOBLEUINT8 OptionalValid, 
                                                         uint16_t dstPeer, 
                                                         uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d70:	b480      	push	{r7}
 8011d72:	b083      	sub	sp, #12
 8011d74:	af00      	add	r7, sp, #0
 8011d76:	6078      	str	r0, [r7, #4]
 8011d78:	4608      	mov	r0, r1
 8011d7a:	4611      	mov	r1, r2
 8011d7c:	461a      	mov	r2, r3
 8011d7e:	4603      	mov	r3, r0
 8011d80:	70fb      	strb	r3, [r7, #3]
 8011d82:	460b      	mov	r3, r1
 8011d84:	803b      	strh	r3, [r7, #0]
 8011d86:	4613      	mov	r3, r2
 8011d88:	70bb      	strb	r3, [r7, #2]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	370c      	adds	r7, #12
 8011d90:	46bd      	mov	sp, r7
 8011d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d96:	4770      	bx	lr

08011d98 <Appli_Light_HslDefault_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslDefault_Set(Light_HslDefaultParam_t* pLight_HslDefaultParam,
                                                      MOBLEUINT8 OptionalValid, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011d98:	b480      	push	{r7}
 8011d9a:	b083      	sub	sp, #12
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	4608      	mov	r0, r1
 8011da2:	4611      	mov	r1, r2
 8011da4:	461a      	mov	r2, r3
 8011da6:	4603      	mov	r3, r0
 8011da8:	70fb      	strb	r3, [r7, #3]
 8011daa:	460b      	mov	r3, r1
 8011dac:	803b      	strh	r3, [r7, #0]
 8011dae:	4613      	mov	r3, r2
 8011db0:	70bb      	strb	r3, [r7, #2]
 8011db2:	2300      	movs	r3, #0
 8011db4:	4618      	mov	r0, r3
 8011db6:	370c      	adds	r7, #12
 8011db8:	46bd      	mov	sp, r7
 8011dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dbe:	4770      	bx	lr

08011dc0 <Appli_Light_HslRange_Set>:

WEAK_FUNCTION(MOBLE_RESULT Appli_Light_HslRange_Set(Light_HslRangeParam_t* pLight_HslRangeParam,
                                                    MOBLEUINT8 OptionalValid, 
                                                    uint16_t dstPeer, 
                                                    uint8_t elementIndex))   
{ return MOBLE_RESULT_SUCCESS;}
 8011dc0:	b480      	push	{r7}
 8011dc2:	b083      	sub	sp, #12
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
 8011dc8:	4608      	mov	r0, r1
 8011dca:	4611      	mov	r1, r2
 8011dcc:	461a      	mov	r2, r3
 8011dce:	4603      	mov	r3, r0
 8011dd0:	70fb      	strb	r3, [r7, #3]
 8011dd2:	460b      	mov	r3, r1
 8011dd4:	803b      	strh	r3, [r7, #0]
 8011dd6:	4613      	mov	r3, r2
 8011dd8:	70bb      	strb	r3, [r7, #2]
 8011dda:	2300      	movs	r3, #0
 8011ddc:	4618      	mov	r0, r3
 8011dde:	370c      	adds	r7, #12
 8011de0:	46bd      	mov	sp, r7
 8011de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de6:	4770      	bx	lr

08011de8 <Appli_Light_GetCtlLightStatus>:
                                                               uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlLightStatus(MOBLEUINT8* lCtlLightState, 
                                                         uint16_t dstPeer, 
                                                         uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011de8:	b480      	push	{r7}
 8011dea:	b083      	sub	sp, #12
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	6078      	str	r0, [r7, #4]
 8011df0:	460b      	mov	r3, r1
 8011df2:	807b      	strh	r3, [r7, #2]
 8011df4:	4613      	mov	r3, r2
 8011df6:	707b      	strb	r3, [r7, #1]
 8011df8:	2300      	movs	r3, #0
 8011dfa:	4618      	mov	r0, r3
 8011dfc:	370c      	adds	r7, #12
 8011dfe:	46bd      	mov	sp, r7
 8011e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e04:	4770      	bx	lr

08011e06 <Appli_Light_GetCtlTargetStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTargetStatus(MOBLEUINT8* lCtlLightState, 
                                                          MOBLEUINT16 dstPeer, 
                                                          MOBLEUINT8 elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e06:	b480      	push	{r7}
 8011e08:	b083      	sub	sp, #12
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	460b      	mov	r3, r1
 8011e10:	807b      	strh	r3, [r7, #2]
 8011e12:	4613      	mov	r3, r2
 8011e14:	707b      	strb	r3, [r7, #1]
 8011e16:	2300      	movs	r3, #0
 8011e18:	4618      	mov	r0, r3
 8011e1a:	370c      	adds	r7, #12
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <Appli_Light_GetCtlTemperatureStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTemperatureStatus(MOBLEUINT8* lCtlTempState, 
                                                               uint16_t dstPeer, 
                                                               uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e24:	b480      	push	{r7}
 8011e26:	b083      	sub	sp, #12
 8011e28:	af00      	add	r7, sp, #0
 8011e2a:	6078      	str	r0, [r7, #4]
 8011e2c:	460b      	mov	r3, r1
 8011e2e:	807b      	strh	r3, [r7, #2]
 8011e30:	4613      	mov	r3, r2
 8011e32:	707b      	strb	r3, [r7, #1]
 8011e34:	2300      	movs	r3, #0
 8011e36:	4618      	mov	r0, r3
 8011e38:	370c      	adds	r7, #12
 8011e3a:	46bd      	mov	sp, r7
 8011e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e40:	4770      	bx	lr

08011e42 <Appli_Light_GetCtlTemperatureRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlTemperatureRange(MOBLEUINT8* lCtlTempRange, 
                                                              uint16_t dstPeer, 
                                                              uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e42:	b480      	push	{r7}
 8011e44:	b083      	sub	sp, #12
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	6078      	str	r0, [r7, #4]
 8011e4a:	460b      	mov	r3, r1
 8011e4c:	807b      	strh	r3, [r7, #2]
 8011e4e:	4613      	mov	r3, r2
 8011e50:	707b      	strb	r3, [r7, #1]
 8011e52:	2300      	movs	r3, #0
 8011e54:	4618      	mov	r0, r3
 8011e56:	370c      	adds	r7, #12
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e5e:	4770      	bx	lr

08011e60 <Appli_Light_GetCtlDefaultStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetCtlDefaultStatus(MOBLEUINT8* lCtlDefaultState, 
                                                           uint16_t dstPeer, 
                                                           uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e60:	b480      	push	{r7}
 8011e62:	b083      	sub	sp, #12
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	460b      	mov	r3, r1
 8011e6a:	807b      	strh	r3, [r7, #2]
 8011e6c:	4613      	mov	r3, r2
 8011e6e:	707b      	strb	r3, [r7, #1]
 8011e70:	2300      	movs	r3, #0
 8011e72:	4618      	mov	r0, r3
 8011e74:	370c      	adds	r7, #12
 8011e76:	46bd      	mov	sp, r7
 8011e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e7c:	4770      	bx	lr

08011e7e <Appli_Light_GetHslStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslStatus(MOBLEUINT8* lHslState, 
                                                    uint16_t dstPeer, 
                                                    uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e7e:	b480      	push	{r7}
 8011e80:	b083      	sub	sp, #12
 8011e82:	af00      	add	r7, sp, #0
 8011e84:	6078      	str	r0, [r7, #4]
 8011e86:	460b      	mov	r3, r1
 8011e88:	807b      	strh	r3, [r7, #2]
 8011e8a:	4613      	mov	r3, r2
 8011e8c:	707b      	strb	r3, [r7, #1]
 8011e8e:	2300      	movs	r3, #0
 8011e90:	4618      	mov	r0, r3
 8011e92:	370c      	adds	r7, #12
 8011e94:	46bd      	mov	sp, r7
 8011e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e9a:	4770      	bx	lr

08011e9c <Appli_Light_GetHslTargetStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslTargetStatus(MOBLEUINT8* lHslState, 
                                                          MOBLEUINT16 dstPeer, 
                                                          MOBLEUINT8 elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011e9c:	b480      	push	{r7}
 8011e9e:	b083      	sub	sp, #12
 8011ea0:	af00      	add	r7, sp, #0
 8011ea2:	6078      	str	r0, [r7, #4]
 8011ea4:	460b      	mov	r3, r1
 8011ea6:	807b      	strh	r3, [r7, #2]
 8011ea8:	4613      	mov	r3, r2
 8011eaa:	707b      	strb	r3, [r7, #1]
 8011eac:	2300      	movs	r3, #0
 8011eae:	4618      	mov	r0, r3
 8011eb0:	370c      	adds	r7, #12
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb8:	4770      	bx	lr

08011eba <Appli_Light_GetHslHueStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslHueStatus(MOBLEUINT8* lHslHueState, 
                                                       uint16_t dstPeer, 
                                                       uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011eba:	b480      	push	{r7}
 8011ebc:	b083      	sub	sp, #12
 8011ebe:	af00      	add	r7, sp, #0
 8011ec0:	6078      	str	r0, [r7, #4]
 8011ec2:	460b      	mov	r3, r1
 8011ec4:	807b      	strh	r3, [r7, #2]
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	707b      	strb	r3, [r7, #1]
 8011eca:	2300      	movs	r3, #0
 8011ecc:	4618      	mov	r0, r3
 8011ece:	370c      	adds	r7, #12
 8011ed0:	46bd      	mov	sp, r7
 8011ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ed6:	4770      	bx	lr

08011ed8 <Appli_Light_GetHslSaturationStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslSaturationStatus(MOBLEUINT8* lHslSaturationState, 
                                                              uint16_t dstPeer, 
                                                              uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011ed8:	b480      	push	{r7}
 8011eda:	b083      	sub	sp, #12
 8011edc:	af00      	add	r7, sp, #0
 8011ede:	6078      	str	r0, [r7, #4]
 8011ee0:	460b      	mov	r3, r1
 8011ee2:	807b      	strh	r3, [r7, #2]
 8011ee4:	4613      	mov	r3, r2
 8011ee6:	707b      	strb	r3, [r7, #1]
 8011ee8:	2300      	movs	r3, #0
 8011eea:	4618      	mov	r0, r3
 8011eec:	370c      	adds	r7, #12
 8011eee:	46bd      	mov	sp, r7
 8011ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef4:	4770      	bx	lr

08011ef6 <Appli_Light_GetHslHueRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslHueRange(MOBLEUINT8* lHslHueRange, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011ef6:	b480      	push	{r7}
 8011ef8:	b083      	sub	sp, #12
 8011efa:	af00      	add	r7, sp, #0
 8011efc:	6078      	str	r0, [r7, #4]
 8011efe:	460b      	mov	r3, r1
 8011f00:	807b      	strh	r3, [r7, #2]
 8011f02:	4613      	mov	r3, r2
 8011f04:	707b      	strb	r3, [r7, #1]
 8011f06:	2300      	movs	r3, #0
 8011f08:	4618      	mov	r0, r3
 8011f0a:	370c      	adds	r7, #12
 8011f0c:	46bd      	mov	sp, r7
 8011f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f12:	4770      	bx	lr

08011f14 <Appli_Light_GetHslSatRange>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslSatRange(MOBLEUINT8* lHslSatRange, 
                                                      uint16_t dstPeer, 
                                                      uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011f14:	b480      	push	{r7}
 8011f16:	b083      	sub	sp, #12
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
 8011f1c:	460b      	mov	r3, r1
 8011f1e:	807b      	strh	r3, [r7, #2]
 8011f20:	4613      	mov	r3, r2
 8011f22:	707b      	strb	r3, [r7, #1]
 8011f24:	2300      	movs	r3, #0
 8011f26:	4618      	mov	r0, r3
 8011f28:	370c      	adds	r7, #12
 8011f2a:	46bd      	mov	sp, r7
 8011f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f30:	4770      	bx	lr

08011f32 <Appli_Light_GetHslDefaultStatus>:
WEAK_FUNCTION(MOBLE_RESULT Appli_Light_GetHslDefaultStatus(MOBLEUINT8* lHslDefaultState, 
                                                           uint16_t dstPeer, 
                                                           uint8_t elementIndex))
{  return MOBLE_RESULT_SUCCESS; }
 8011f32:	b480      	push	{r7}
 8011f34:	b083      	sub	sp, #12
 8011f36:	af00      	add	r7, sp, #0
 8011f38:	6078      	str	r0, [r7, #4]
 8011f3a:	460b      	mov	r3, r1
 8011f3c:	807b      	strh	r3, [r7, #2]
 8011f3e:	4613      	mov	r3, r2
 8011f40:	707b      	strb	r3, [r7, #1]
 8011f42:	2300      	movs	r3, #0
 8011f44:	4618      	mov	r0, r3
 8011f46:	370c      	adds	r7, #12
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4e:	4770      	bx	lr

08011f50 <MESH_Init>:
 * @brief  Mesh initialization
 * @param  None
 * @retval None
 */
void MESH_Init(void)
{
 8011f50:	b5b0      	push	{r4, r5, r7, lr}
 8011f52:	b090      	sub	sp, #64	; 0x40
 8011f54:	af04      	add	r7, sp, #16
  MOBLEUINT8 uuid[16];
  MOBLEUINT8 PrvnDevKeyFlag = 0;
 8011f56:	2300      	movs	r3, #0
 8011f58:	75fb      	strb	r3, [r7, #23]
//#if PROVISIONER_FEATURE
//   MOBLEUINT8 prvsnrDevKey[16];
//#endif
  WirelessFwInfo_t wireless_info_instance;
  WirelessFwInfo_t *p_wireless_info = &wireless_info_instance;  
 8011f5a:	1d3b      	adds	r3, r7, #4
 8011f5c:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Check for valid Board Address */
  if (!Appli_CheckBdMacAddr())
 8011f5e:	f7f4 f9cb 	bl	80062f8 <Appli_CheckBdMacAddr>
 8011f62:	4603      	mov	r3, r0
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d105      	bne.n	8011f74 <MESH_Init+0x24>
  {
    TRACE_I(TF_INIT,"Bad BD_MAC ADDR!\r\n");
 8011f68:	485c      	ldr	r0, [pc, #368]	; (80120dc <MESH_Init+0x18c>)
 8011f6a:	f017 fb6b 	bl	8029644 <puts>
    /* LED Blinks if BDAddr is not appropriate */
    while (1)
    {
      Appli_LedBlink();
 8011f6e:	f7f3 ffed 	bl	8005f4c <Appli_LedBlink>
 8011f72:	e7fc      	b.n	8011f6e <MESH_Init+0x1e>
    }
  }
  
  /* Set BLE configuration function callbacks */
  BLEMesh_BleHardwareInitCallBack(&user_ble_cb);  
 8011f74:	485a      	ldr	r0, [pc, #360]	; (80120e0 <MESH_Init+0x190>)
 8011f76:	f00b faf5 	bl	801d564 <BLEMesh_BleHardwareInitCallBack>
  
  /*Set BLE Config Model APIs callback*/
  BLEMesh_BleConfigModelInitCallBack(&config_model_cb);
 8011f7a:	485a      	ldr	r0, [pc, #360]	; (80120e4 <MESH_Init+0x194>)
 8011f7c:	f00b fafc 	bl	801d578 <BLEMesh_BleConfigModelInitCallBack>

  /* Initializes BLE-Mesh Library */
  if (MOBLE_FAILED(BLEMesh_Init(&BLEMeshlib_Init_params)))
 8011f80:	4859      	ldr	r0, [pc, #356]	; (80120e8 <MESH_Init+0x198>)
 8011f82:	f015 f88b 	bl	802709c <BLEMesh_Init>
 8011f86:	4603      	mov	r3, r0
 8011f88:	2b01      	cmp	r3, #1
 8011f8a:	d905      	bls.n	8011f98 <MESH_Init+0x48>
  {
    TRACE_I(TF_INIT,"Could not initialize BLE-Mesh library!\r\n");   
 8011f8c:	4857      	ldr	r0, [pc, #348]	; (80120ec <MESH_Init+0x19c>)
 8011f8e:	f017 fb59 	bl	8029644 <puts>
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 8011f92:	f7f3 ffdb 	bl	8005f4c <Appli_LedBlink>
 8011f96:	e7fc      	b.n	8011f92 <MESH_Init+0x42>
    }
  }
  
  /*Check SIG & VENDOR models limit*/
  if(MOBLE_FAILED(AppliCheck_EnabledModelsList()))
 8011f98:	f001 f82a 	bl	8012ff0 <AppliCheck_EnabledModelsList>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b01      	cmp	r3, #1
 8011fa0:	d902      	bls.n	8011fa8 <MESH_Init+0x58>
  {
    /* LED continuously blinks if library fails to initialize */
    while (1)
    {
      Appli_LedBlink();
 8011fa2:	f7f3 ffd3 	bl	8005f4c <Appli_LedBlink>
 8011fa6:	e7fc      	b.n	8011fa2 <MESH_Init+0x52>
  /* This function also checks for Power OnOff Cycles     
     Define the following Macro "ENABLE_UNPROVISIONING_BY_POWER_ONOFF_CYCLE" 
     to check the Power-OnOff Cycles
    5 Continuous cycles of OnOff with Ontime <2 sec will cause unprovisioning
  */
  Appli_Init(&PrvnDevKeyFlag);
 8011fa8:	f107 0317 	add.w	r3, r7, #23
 8011fac:	4618      	mov	r0, r3
 8011fae:	f7f4 fbe3 	bl	8006778 <Appli_Init>
  
  Appli_StartProvisionerMode(1);
  
#else
  /* Checks if the node is already provisioned or not */
  if (BLEMesh_IsUnprovisioned() == MOBLE_TRUE)
 8011fb2:	f00c ffe1 	bl	801ef78 <BLEMesh_IsUnprovisioned>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	2b01      	cmp	r3, #1
 8011fba:	d108      	bne.n	8011fce <MESH_Init+0x7e>
  {
    BLEMesh_InitUnprovisionedNode(); /* Initializes  Unprovisioned node */
 8011fbc:	f00c ff52 	bl	801ee64 <BLEMesh_InitUnprovisionedNode>

    TRACE_I(TF_PROVISION,"Unprovisioned device \r\n");
 8011fc0:	484b      	ldr	r0, [pc, #300]	; (80120f0 <MESH_Init+0x1a0>)
 8011fc2:	f017 fb3f 	bl	8029644 <puts>
    
#if PB_ADV_SUPPORTED
    BLEMesh_SetUnprovisionedDevBeaconInterval(100);
 8011fc6:	2064      	movs	r0, #100	; 0x64
 8011fc8:	f00b f8e0 	bl	801d18c <BLEMesh_SetUnprovisionedDevBeaconInterval>
 8011fcc:	e00b      	b.n	8011fe6 <MESH_Init+0x96>
#endif    
  }
  else
  {
    BLEMesh_InitProvisionedNode();  /* Initializes  Provisioned node */
 8011fce:	f00c fe8d 	bl	801ecec <BLEMesh_InitProvisionedNode>
    TRACE_I(TF_PROVISION,"Provisioned node \r\n");
 8011fd2:	4848      	ldr	r0, [pc, #288]	; (80120f4 <MESH_Init+0x1a4>)
 8011fd4:	f017 fb36 	bl	8029644 <puts>
    TRACE_I(TF_INIT,"Provisioned Node Address: [%04x] \n\r", BLEMesh_GetAddress());       
 8011fd8:	f00b f866 	bl	801d0a8 <BLEMesh_GetAddress>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	4619      	mov	r1, r3
 8011fe0:	4845      	ldr	r0, [pc, #276]	; (80120f8 <MESH_Init+0x1a8>)
 8011fe2:	f017 fac9 	bl	8029578 <iprintf>
//                                     PROVISIONER_ROOT_ADDR_DEFAULT,
//                                     &PrvnDevKeyFlag, 
//                                     APPLICATION_NUMBER_OF_ELEMENTS);  
//#endif  
/* Check to manually unprovision the board */
  Appli_CheckForUnprovision();
 8011fe6:	f7f4 f8d7 	bl	8006198 <Appli_CheckForUnprovision>
  
  /* Set attention timer callback */
  BLEMesh_SetAttentionTimerCallback(Appli_BleAttentionTimerCb);
 8011fea:	4844      	ldr	r0, [pc, #272]	; (80120fc <MESH_Init+0x1ac>)
 8011fec:	f00b f8c2 	bl	801d174 <BLEMesh_SetAttentionTimerCallback>

#if TF_MISC
  Appli_ConfigurationInfoDump();
 8011ff0:	f000 f89a 	bl	8012128 <Appli_ConfigurationInfoDump>
#endif  

/* Set uuid for the board*/
  Appli_BleSetUUIDCb(uuid);
 8011ff4:	f107 0318 	add.w	r3, r7, #24
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	f7f3 ffdd 	bl	8005fb8 <Appli_BleSetUUIDCb>
  
  /* Prints the MAC Address of the board */ 
  TRACE_I(TF_INIT,"BLE-Mesh Lighting Demo v%s\n\r", BLE_MESH_APPLICATION_VERSION); 
 8011ffe:	4940      	ldr	r1, [pc, #256]	; (8012100 <MESH_Init+0x1b0>)
 8012000:	4840      	ldr	r0, [pc, #256]	; (8012104 <MESH_Init+0x1b4>)
 8012002:	f017 fab9 	bl	8029578 <iprintf>
  TRACE_I(TF_INIT,"BLE-Mesh Library v%s\n\r", BLEMesh_GetLibraryVersion()); 
 8012006:	f00b faa5 	bl	801d554 <BLEMesh_GetLibraryVersion>
 801200a:	4603      	mov	r3, r0
 801200c:	4619      	mov	r1, r3
 801200e:	483e      	ldr	r0, [pc, #248]	; (8012108 <MESH_Init+0x1b8>)
 8012010:	f017 fab2 	bl	8029578 <iprintf>
  if (SHCI_GetWirelessFwInfo(p_wireless_info) != SHCI_Success)
 8012014:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012016:	f003 fdd5 	bl	8015bc4 <SHCI_GetWirelessFwInfo>
 801201a:	4603      	mov	r3, r0
 801201c:	2b00      	cmp	r3, #0
 801201e:	d11f      	bne.n	8012060 <MESH_Init+0x110>
  {
    // Error
  }
  else
  {
    TRACE_I(TF_INIT,"BLE Stack v%d.%d.%d Branch=%d Type=%d\n\r", p_wireless_info->VersionMajor, p_wireless_info->VersionMinor, p_wireless_info->VersionSub, p_wireless_info->VersionBranch, p_wireless_info->VersionReleaseType);
 8012020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012022:	781b      	ldrb	r3, [r3, #0]
 8012024:	4619      	mov	r1, r3
 8012026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012028:	785b      	ldrb	r3, [r3, #1]
 801202a:	4618      	mov	r0, r3
 801202c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801202e:	789b      	ldrb	r3, [r3, #2]
 8012030:	461c      	mov	r4, r3
 8012032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012034:	78db      	ldrb	r3, [r3, #3]
 8012036:	461a      	mov	r2, r3
 8012038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801203a:	791b      	ldrb	r3, [r3, #4]
 801203c:	9301      	str	r3, [sp, #4]
 801203e:	9200      	str	r2, [sp, #0]
 8012040:	4623      	mov	r3, r4
 8012042:	4602      	mov	r2, r0
 8012044:	4831      	ldr	r0, [pc, #196]	; (801210c <MESH_Init+0x1bc>)
 8012046:	f017 fa97 	bl	8029578 <iprintf>
    TRACE_I(TF_INIT,"FUS v%d.%d.%d\n\r", p_wireless_info->FusVersionMajor, p_wireless_info->FusVersionMinor, p_wireless_info->FusVersionSub);
 801204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204c:	7a9b      	ldrb	r3, [r3, #10]
 801204e:	4619      	mov	r1, r3
 8012050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012052:	7adb      	ldrb	r3, [r3, #11]
 8012054:	461a      	mov	r2, r3
 8012056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012058:	7b1b      	ldrb	r3, [r3, #12]
 801205a:	482d      	ldr	r0, [pc, #180]	; (8012110 <MESH_Init+0x1c0>)
 801205c:	f017 fa8c 	bl	8029578 <iprintf>
  }
  
  TRACE_I(TF_INIT,"BD_MAC Address = [%02x]:[%02x]:[%02x]:[%02x]:[%02x]:[%02x] \n\r",
 8012060:	4b2c      	ldr	r3, [pc, #176]	; (8012114 <MESH_Init+0x1c4>)
 8012062:	795b      	ldrb	r3, [r3, #5]
 8012064:	4618      	mov	r0, r3
 8012066:	4b2b      	ldr	r3, [pc, #172]	; (8012114 <MESH_Init+0x1c4>)
 8012068:	791b      	ldrb	r3, [r3, #4]
 801206a:	461c      	mov	r4, r3
 801206c:	4b29      	ldr	r3, [pc, #164]	; (8012114 <MESH_Init+0x1c4>)
 801206e:	78db      	ldrb	r3, [r3, #3]
 8012070:	461d      	mov	r5, r3
 8012072:	4b28      	ldr	r3, [pc, #160]	; (8012114 <MESH_Init+0x1c4>)
 8012074:	789b      	ldrb	r3, [r3, #2]
 8012076:	461a      	mov	r2, r3
 8012078:	4b26      	ldr	r3, [pc, #152]	; (8012114 <MESH_Init+0x1c4>)
 801207a:	785b      	ldrb	r3, [r3, #1]
 801207c:	4619      	mov	r1, r3
 801207e:	4b25      	ldr	r3, [pc, #148]	; (8012114 <MESH_Init+0x1c4>)
 8012080:	781b      	ldrb	r3, [r3, #0]
 8012082:	9302      	str	r3, [sp, #8]
 8012084:	9101      	str	r1, [sp, #4]
 8012086:	9200      	str	r2, [sp, #0]
 8012088:	462b      	mov	r3, r5
 801208a:	4622      	mov	r2, r4
 801208c:	4601      	mov	r1, r0
 801208e:	4822      	ldr	r0, [pc, #136]	; (8012118 <MESH_Init+0x1c8>)
 8012090:	f017 fa72 	bl	8029578 <iprintf>
          bdaddr[5],bdaddr[4],bdaddr[3],bdaddr[2],bdaddr[1],bdaddr[0]);
  TRACE_I(TF_INIT,"UUID Address = ");
 8012094:	4821      	ldr	r0, [pc, #132]	; (801211c <MESH_Init+0x1cc>)
 8012096:	f017 fa6f 	bl	8029578 <iprintf>
  
  for(MOBLEUINT8 i=0;i<16;i++)
 801209a:	2300      	movs	r3, #0
 801209c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120a0:	e00e      	b.n	80120c0 <MESH_Init+0x170>
  {
    TRACE_I(TF_INIT,"[%02x] ",uuid[i]);
 80120a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120a6:	3330      	adds	r3, #48	; 0x30
 80120a8:	443b      	add	r3, r7
 80120aa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80120ae:	4619      	mov	r1, r3
 80120b0:	481b      	ldr	r0, [pc, #108]	; (8012120 <MESH_Init+0x1d0>)
 80120b2:	f017 fa61 	bl	8029578 <iprintf>
  for(MOBLEUINT8 i=0;i<16;i++)
 80120b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120ba:	3301      	adds	r3, #1
 80120bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80120c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120c4:	2b0f      	cmp	r3, #15
 80120c6:	d9ec      	bls.n	80120a2 <MESH_Init+0x152>
  }
  TRACE_I(TF_INIT,"\r\n");
 80120c8:	4816      	ldr	r0, [pc, #88]	; (8012124 <MESH_Init+0x1d4>)
 80120ca:	f017 fabb 	bl	8029644 <puts>

  /* Models initialization */  
  BLEMesh_ModelsInit();
 80120ce:	f7f4 ff91 	bl	8006ff4 <BLEMesh_ModelsInit>
#endif
  
#ifdef CUSTOM_BOARD_PWM_SELECTION  
  Light_UpdatePWMValue((MOBLEUINT8)DEFAULT_STATE);
#endif
}
 80120d2:	bf00      	nop
 80120d4:	3730      	adds	r7, #48	; 0x30
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bdb0      	pop	{r4, r5, r7, pc}
 80120da:	bf00      	nop
 80120dc:	0802f4f8 	.word	0x0802f4f8
 80120e0:	08033190 	.word	0x08033190
 80120e4:	080331b4 	.word	0x080331b4
 80120e8:	080331f0 	.word	0x080331f0
 80120ec:	0802f50c 	.word	0x0802f50c
 80120f0:	0802f534 	.word	0x0802f534
 80120f4:	0802f54c 	.word	0x0802f54c
 80120f8:	0802f560 	.word	0x0802f560
 80120fc:	08006131 	.word	0x08006131
 8012100:	0802f584 	.word	0x0802f584
 8012104:	0802f590 	.word	0x0802f590
 8012108:	0802f5b0 	.word	0x0802f5b0
 801210c:	0802f5c8 	.word	0x0802f5c8
 8012110:	0802f5f0 	.word	0x0802f5f0
 8012114:	2000444c 	.word	0x2000444c
 8012118:	0802f600 	.word	0x0802f600
 801211c:	0802f640 	.word	0x0802f640
 8012120:	0802f650 	.word	0x0802f650
 8012124:	0802f658 	.word	0x0802f658

08012128 <Appli_ConfigurationInfoDump>:
* @brief This function is the Information dump function
* @param  None
* @retval None
*/
void Appli_ConfigurationInfoDump(void)
{
 8012128:	b580      	push	{r7, lr}
 801212a:	b082      	sub	sp, #8
 801212c:	af00      	add	r7, sp, #0
  TRACE_I(TF_MISC,"\r\n********************\r\n");
 801212e:	4873      	ldr	r0, [pc, #460]	; (80122fc <Appli_ConfigurationInfoDump+0x1d4>)
 8012130:	f017 fa88 	bl	8029644 <puts>
  TRACE_I(TF_MISC,"[Features Supported] \r\n");
 8012134:	4872      	ldr	r0, [pc, #456]	; (8012300 <Appli_ConfigurationInfoDump+0x1d8>)
 8012136:	f017 fa85 	bl	8029644 <puts>

#ifdef ENABLE_RELAY_FEATURE
  TRACE_I(TF_MISC,"Relay = Enabled \r\n");
 801213a:	4872      	ldr	r0, [pc, #456]	; (8012304 <Appli_ConfigurationInfoDump+0x1dc>)
 801213c:	f017 fa82 	bl	8029644 <puts>
#endif 
  
#ifdef ENABLE_PROXY_FEATURE
  TRACE_I(TF_MISC,"Proxy = Enabled \r\n");
 8012140:	4871      	ldr	r0, [pc, #452]	; (8012308 <Appli_ConfigurationInfoDump+0x1e0>)
 8012142:	f017 fa7f 	bl	8029644 <puts>
#endif
  
#ifdef ENABLE_FRIEND_FEATURE
  TRACE_I(TF_MISC,"Friend = Enabled \r\n");
 8012146:	4871      	ldr	r0, [pc, #452]	; (801230c <Appli_ConfigurationInfoDump+0x1e4>)
 8012148:	f017 fa7c 	bl	8029644 <puts>
  
#ifdef DYNAMIC_PROVISIONER
  TRACE_I(TF_MISC,"Dynamic Provisioner = Enabled \r\n");
#endif  
  
  TRACE_I(TF_MISC,"\n[Options] \r\n");
 801214c:	4870      	ldr	r0, [pc, #448]	; (8012310 <Appli_ConfigurationInfoDump+0x1e8>)
 801214e:	f017 fa79 	bl	8029644 <puts>
  
#ifdef ENABLE_PB_ADV
  TRACE_I(TF_MISC,"PB-ADV = Enabled \r\n");
 8012152:	4870      	ldr	r0, [pc, #448]	; (8012314 <Appli_ConfigurationInfoDump+0x1ec>)
 8012154:	f017 fa76 	bl	8029644 <puts>
#endif
  
#ifdef ENABLE_PB_GATT  
  TRACE_I(TF_MISC,"PB-GATT = Enabled \r\n");
 8012158:	486f      	ldr	r0, [pc, #444]	; (8012318 <Appli_ConfigurationInfoDump+0x1f0>)
 801215a:	f017 fa73 	bl	8029644 <puts>
  
#ifdef ENABLE_AUTH_TYPE_INPUT_OOB
  TRACE_I(TF_MISC,"Input OOB = Enabled \r\n");
#endif
  
  TRACE_I(TF_MISC,"\n[Library Capabilities] \r\n");
 801215e:	486f      	ldr	r0, [pc, #444]	; (801231c <Appli_ConfigurationInfoDump+0x1f4>)
 8012160:	f017 fa70 	bl	8029644 <puts>
  
  TRACE_I(TF_MISC,"Net Keys = %d \r\n", BLEMesh_GetNetKeysCount());
 8012164:	f00a ffda 	bl	801d11c <BLEMesh_GetNetKeysCount>
 8012168:	4603      	mov	r3, r0
 801216a:	4619      	mov	r1, r3
 801216c:	486c      	ldr	r0, [pc, #432]	; (8012320 <Appli_ConfigurationInfoDump+0x1f8>)
 801216e:	f017 fa03 	bl	8029578 <iprintf>
  TRACE_I(TF_MISC,"App Keys = %d \r\n", BLEMesh_GetAppKeysCount());
 8012172:	f00a ffd1 	bl	801d118 <BLEMesh_GetAppKeysCount>
 8012176:	4603      	mov	r3, r0
 8012178:	4619      	mov	r1, r3
 801217a:	486a      	ldr	r0, [pc, #424]	; (8012324 <Appli_ConfigurationInfoDump+0x1fc>)
 801217c:	f017 f9fc 	bl	8029578 <iprintf>
  TRACE_I(TF_MISC,"Elements per Node = %d \r\n", BLEMesh_GetNumberOfElements());
 8012180:	f00a ffc8 	bl	801d114 <BLEMesh_GetNumberOfElements>
 8012184:	4603      	mov	r3, r0
 8012186:	4619      	mov	r1, r3
 8012188:	4867      	ldr	r0, [pc, #412]	; (8012328 <Appli_ConfigurationInfoDump+0x200>)
 801218a:	f017 f9f5 	bl	8029578 <iprintf>
  TRACE_I(TF_MISC,"Models per Element = %d \r\n", BLEMesh_GetTotalModelsCount());
 801218e:	f00a ffbf 	bl	801d110 <BLEMesh_GetTotalModelsCount>
 8012192:	4603      	mov	r3, r0
 8012194:	4619      	mov	r1, r3
 8012196:	4865      	ldr	r0, [pc, #404]	; (801232c <Appli_ConfigurationInfoDump+0x204>)
 8012198:	f017 f9ee 	bl	8029578 <iprintf>
  TRACE_I(TF_MISC,"Subscription per Model = %d \r\n", BLEMesh_GetSubscriptionCount());
 801219c:	f00a ffc0 	bl	801d120 <BLEMesh_GetSubscriptionCount>
 80121a0:	4603      	mov	r3, r0
 80121a2:	4619      	mov	r1, r3
 80121a4:	4862      	ldr	r0, [pc, #392]	; (8012330 <Appli_ConfigurationInfoDump+0x208>)
 80121a6:	f017 f9e7 	bl	8029578 <iprintf>
  TRACE_I(TF_MISC,"Default TTL = %d \r\n", BLEMesh_GetTTL());
 80121aa:	f00a ffbb 	bl	801d124 <BLEMesh_GetTTL>
 80121ae:	4603      	mov	r3, r0
 80121b0:	4619      	mov	r1, r3
 80121b2:	4860      	ldr	r0, [pc, #384]	; (8012334 <Appli_ConfigurationInfoDump+0x20c>)
 80121b4:	f017 f9e0 	bl	8029578 <iprintf>
  TRACE_I(TF_MISC,"Default Network Transmit Count = %d \r\n", BLEMesh_GetNetworkTransmitCount());
 80121b8:	f00a ffc0 	bl	801d13c <BLEMesh_GetNetworkTransmitCount>
 80121bc:	4603      	mov	r3, r0
 80121be:	4619      	mov	r1, r3
 80121c0:	485d      	ldr	r0, [pc, #372]	; (8012338 <Appli_ConfigurationInfoDump+0x210>)
 80121c2:	f017 f9d9 	bl	8029578 <iprintf>
  TRACE_I(TF_MISC,"Default Relay retransmit Count = %d \r\n", BLEMesh_GetRelayRetransmitCount());
 80121c6:	f00a ffc7 	bl	801d158 <BLEMesh_GetRelayRetransmitCount>
 80121ca:	4603      	mov	r3, r0
 80121cc:	4619      	mov	r1, r3
 80121ce:	485b      	ldr	r0, [pc, #364]	; (801233c <Appli_ConfigurationInfoDump+0x214>)
 80121d0:	f017 f9d2 	bl	8029578 <iprintf>
  
  TRACE_I(TF_MISC,"\n[Enabled Models] \r\n");
 80121d4:	485a      	ldr	r0, [pc, #360]	; (8012340 <Appli_ConfigurationInfoDump+0x218>)
 80121d6:	f017 fa35 	bl	8029644 <puts>
  
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 80121da:	2300      	movs	r3, #0
 80121dc:	71fb      	strb	r3, [r7, #7]
 80121de:	e079      	b.n	80122d4 <Appli_ConfigurationInfoDump+0x1ac>
  {
    TRACE_I(TF_MISC,"For Element Index = %d or Element Number = %d \r\n", elementCount, (elementCount+1));
 80121e0:	79f9      	ldrb	r1, [r7, #7]
 80121e2:	79fb      	ldrb	r3, [r7, #7]
 80121e4:	3301      	adds	r3, #1
 80121e6:	461a      	mov	r2, r3
 80121e8:	4856      	ldr	r0, [pc, #344]	; (8012344 <Appli_ConfigurationInfoDump+0x21c>)
 80121ea:	f017 f9c5 	bl	8029578 <iprintf>
#ifdef ENABLE_VENDOR_MODEL_SERVER    
    if ((ENABLE_VENDOR_MODEL_SERVER & (1 << elementCount)) == (1 << elementCount))
 80121ee:	79fb      	ldrb	r3, [r7, #7]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	bf0c      	ite	eq
 80121f4:	2301      	moveq	r3, #1
 80121f6:	2300      	movne	r3, #0
 80121f8:	b2db      	uxtb	r3, r3
 80121fa:	4619      	mov	r1, r3
 80121fc:	79fb      	ldrb	r3, [r7, #7]
 80121fe:	2201      	movs	r2, #1
 8012200:	fa02 f303 	lsl.w	r3, r2, r3
 8012204:	4299      	cmp	r1, r3
 8012206:	d102      	bne.n	801220e <Appli_ConfigurationInfoDump+0xe6>
    {
      TRACE_I(TF_MISC,"Vendor Server \r\n");
 8012208:	484f      	ldr	r0, [pc, #316]	; (8012348 <Appli_ConfigurationInfoDump+0x220>)
 801220a:	f017 fa1b 	bl	8029644 <puts>
    }
#endif
  
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 801220e:	79fb      	ldrb	r3, [r7, #7]
 8012210:	2b00      	cmp	r3, #0
 8012212:	bf0c      	ite	eq
 8012214:	2301      	moveq	r3, #1
 8012216:	2300      	movne	r3, #0
 8012218:	b2db      	uxtb	r3, r3
 801221a:	4619      	mov	r1, r3
 801221c:	79fb      	ldrb	r3, [r7, #7]
 801221e:	2201      	movs	r2, #1
 8012220:	fa02 f303 	lsl.w	r3, r2, r3
 8012224:	4299      	cmp	r1, r3
 8012226:	d102      	bne.n	801222e <Appli_ConfigurationInfoDump+0x106>
    {
      TRACE_I(TF_MISC,"Generic On Off Server \r\n");
 8012228:	4848      	ldr	r0, [pc, #288]	; (801234c <Appli_ConfigurationInfoDump+0x224>)
 801222a:	f017 fa0b 	bl	8029644 <puts>
      TRACE_I(TF_MISC,"Generic On Off Client \r\n");
    }
#endif
 
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if ((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << elementCount)) == (1 << elementCount))
 801222e:	79fb      	ldrb	r3, [r7, #7]
 8012230:	2b00      	cmp	r3, #0
 8012232:	bf0c      	ite	eq
 8012234:	2301      	moveq	r3, #1
 8012236:	2300      	movne	r3, #0
 8012238:	b2db      	uxtb	r3, r3
 801223a:	4619      	mov	r1, r3
 801223c:	79fb      	ldrb	r3, [r7, #7]
 801223e:	2201      	movs	r2, #1
 8012240:	fa02 f303 	lsl.w	r3, r2, r3
 8012244:	4299      	cmp	r1, r3
 8012246:	d102      	bne.n	801224e <Appli_ConfigurationInfoDump+0x126>
    {
      TRACE_I(TF_MISC,"Generic Level Server \r\n");
 8012248:	4841      	ldr	r0, [pc, #260]	; (8012350 <Appli_ConfigurationInfoDump+0x228>)
 801224a:	f017 f9fb 	bl	8029644 <puts>
      TRACE_I(TF_MISC,"Generic Default Transition Client \r\n");
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << elementCount)) == (1 << elementCount))
 801224e:	79fb      	ldrb	r3, [r7, #7]
 8012250:	2b00      	cmp	r3, #0
 8012252:	bf0c      	ite	eq
 8012254:	2301      	moveq	r3, #1
 8012256:	2300      	movne	r3, #0
 8012258:	b2db      	uxtb	r3, r3
 801225a:	4619      	mov	r1, r3
 801225c:	79fb      	ldrb	r3, [r7, #7]
 801225e:	2201      	movs	r2, #1
 8012260:	fa02 f303 	lsl.w	r3, r2, r3
 8012264:	4299      	cmp	r1, r3
 8012266:	d102      	bne.n	801226e <Appli_ConfigurationInfoDump+0x146>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Server \r\n");
 8012268:	483a      	ldr	r0, [pc, #232]	; (8012354 <Appli_ConfigurationInfoDump+0x22c>)
 801226a:	f017 f9eb 	bl	8029644 <puts>
    }
#endif

#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if ((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << elementCount)) == (1 << elementCount))
 801226e:	79fb      	ldrb	r3, [r7, #7]
 8012270:	2b00      	cmp	r3, #0
 8012272:	bf0c      	ite	eq
 8012274:	2301      	moveq	r3, #1
 8012276:	2300      	movne	r3, #0
 8012278:	b2db      	uxtb	r3, r3
 801227a:	4619      	mov	r1, r3
 801227c:	79fb      	ldrb	r3, [r7, #7]
 801227e:	2201      	movs	r2, #1
 8012280:	fa02 f303 	lsl.w	r3, r2, r3
 8012284:	4299      	cmp	r1, r3
 8012286:	d102      	bne.n	801228e <Appli_ConfigurationInfoDump+0x166>
    {
      TRACE_I(TF_MISC,"Generic Power On Off Setup Server \r\n");
 8012288:	4833      	ldr	r0, [pc, #204]	; (8012358 <Appli_ConfigurationInfoDump+0x230>)
 801228a:	f017 f9db 	bl	8029644 <puts>
      TRACE_I(TF_MISC,"Generic User Property Server \r\n");
    }
#endif

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << elementCount)) == (1 << elementCount))
 801228e:	79fb      	ldrb	r3, [r7, #7]
 8012290:	2b00      	cmp	r3, #0
 8012292:	bf0c      	ite	eq
 8012294:	2301      	moveq	r3, #1
 8012296:	2300      	movne	r3, #0
 8012298:	b2db      	uxtb	r3, r3
 801229a:	4619      	mov	r1, r3
 801229c:	79fb      	ldrb	r3, [r7, #7]
 801229e:	2201      	movs	r2, #1
 80122a0:	fa02 f303 	lsl.w	r3, r2, r3
 80122a4:	4299      	cmp	r1, r3
 80122a6:	d102      	bne.n	80122ae <Appli_ConfigurationInfoDump+0x186>
    {
      TRACE_I(TF_MISC,"Light Lightness Server \r\n");       
 80122a8:	482c      	ldr	r0, [pc, #176]	; (801235c <Appli_ConfigurationInfoDump+0x234>)
 80122aa:	f017 f9cb 	bl	8029644 <puts>
    }
#endif 

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    if((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP & (1 << elementCount)) == (1 << elementCount))
 80122ae:	79fb      	ldrb	r3, [r7, #7]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	bf0c      	ite	eq
 80122b4:	2301      	moveq	r3, #1
 80122b6:	2300      	movne	r3, #0
 80122b8:	b2db      	uxtb	r3, r3
 80122ba:	4619      	mov	r1, r3
 80122bc:	79fb      	ldrb	r3, [r7, #7]
 80122be:	2201      	movs	r2, #1
 80122c0:	fa02 f303 	lsl.w	r3, r2, r3
 80122c4:	4299      	cmp	r1, r3
 80122c6:	d102      	bne.n	80122ce <Appli_ConfigurationInfoDump+0x1a6>
    {
      TRACE_I(TF_MISC,"Light Lightness Setup Server \r\n");       
 80122c8:	4825      	ldr	r0, [pc, #148]	; (8012360 <Appli_ConfigurationInfoDump+0x238>)
 80122ca:	f017 f9bb 	bl	8029644 <puts>
  for(uint8_t elementCount=0; elementCount<APPLICATION_NUMBER_OF_ELEMENTS; elementCount++)  
 80122ce:	79fb      	ldrb	r3, [r7, #7]
 80122d0:	3301      	adds	r3, #1
 80122d2:	71fb      	strb	r3, [r7, #7]
 80122d4:	79fb      	ldrb	r3, [r7, #7]
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d082      	beq.n	80121e0 <Appli_ConfigurationInfoDump+0xb8>
      TRACE_I(TF_MISC,"Scene \r\n");           
    }
#endif
  }
  
TRACE_I(TF_MISC,"\n[Important Information] \r\n");
 80122da:	4822      	ldr	r0, [pc, #136]	; (8012364 <Appli_ConfigurationInfoDump+0x23c>)
 80122dc:	f017 f9b2 	bl	8029644 <puts>
#if SAVE_EMBD_PROVISION_DATA     
  TRACE_I(TF_MISC,"Embedded Provisioner data saving enabled \r\n");
#endif
  
#ifdef APPLICATION_NUMBER_OF_ELEMENTS     
  TRACE_I(TF_MISC,"Number of Elements enabled in Application: %d \r\n", APPLICATION_NUMBER_OF_ELEMENTS);  
 80122e0:	2101      	movs	r1, #1
 80122e2:	4821      	ldr	r0, [pc, #132]	; (8012368 <Appli_ConfigurationInfoDump+0x240>)
 80122e4:	f017 f948 	bl	8029578 <iprintf>
#endif
  
#ifdef ENABLE_NEIGHBOR_TABLE
  TRACE_I(TF_MISC,"Neighbour Table is enabled \r\n");
 80122e8:	4820      	ldr	r0, [pc, #128]	; (801236c <Appli_ConfigurationInfoDump+0x244>)
 80122ea:	f017 f9ab 	bl	8029644 <puts>
#endif
  
  TRACE_I(TF_MISC,"********************\r\n\r\n");  
 80122ee:	4820      	ldr	r0, [pc, #128]	; (8012370 <Appli_ConfigurationInfoDump+0x248>)
 80122f0:	f017 f9a8 	bl	8029644 <puts>

}
 80122f4:	bf00      	nop
 80122f6:	3708      	adds	r7, #8
 80122f8:	46bd      	mov	sp, r7
 80122fa:	bd80      	pop	{r7, pc}
 80122fc:	0802f65c 	.word	0x0802f65c
 8012300:	0802f674 	.word	0x0802f674
 8012304:	0802f68c 	.word	0x0802f68c
 8012308:	0802f6a0 	.word	0x0802f6a0
 801230c:	0802f6b4 	.word	0x0802f6b4
 8012310:	0802f6c8 	.word	0x0802f6c8
 8012314:	0802f6d8 	.word	0x0802f6d8
 8012318:	0802f6ec 	.word	0x0802f6ec
 801231c:	0802f700 	.word	0x0802f700
 8012320:	0802f71c 	.word	0x0802f71c
 8012324:	0802f730 	.word	0x0802f730
 8012328:	0802f744 	.word	0x0802f744
 801232c:	0802f760 	.word	0x0802f760
 8012330:	0802f77c 	.word	0x0802f77c
 8012334:	0802f79c 	.word	0x0802f79c
 8012338:	0802f7b0 	.word	0x0802f7b0
 801233c:	0802f7d8 	.word	0x0802f7d8
 8012340:	0802f800 	.word	0x0802f800
 8012344:	0802f814 	.word	0x0802f814
 8012348:	0802f848 	.word	0x0802f848
 801234c:	0802f858 	.word	0x0802f858
 8012350:	0802f870 	.word	0x0802f870
 8012354:	0802f888 	.word	0x0802f888
 8012358:	0802f8a8 	.word	0x0802f8a8
 801235c:	0802f8cc 	.word	0x0802f8cc
 8012360:	0802f8e8 	.word	0x0802f8e8
 8012364:	0802f908 	.word	0x0802f908
 8012368:	0802f924 	.word	0x0802f924
 801236c:	0802f958 	.word	0x0802f958
 8012370:	0802f978 	.word	0x0802f978

08012374 <Serial_RxCpltCallback>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_RxCpltCallback( void )
{
 8012374:	b580      	push	{r7, lr}
 8012376:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8012378:	4b24      	ldr	r3, [pc, #144]	; (801240c <Serial_RxCpltCallback+0x98>)
 801237a:	881b      	ldrh	r3, [r3, #0]
 801237c:	2bff      	cmp	r3, #255	; 0xff
 801237e:	d843      	bhi.n	8012408 <Serial_RxCpltCallback+0x94>
  {
    if (aRxBuffer[0] == '\r')
 8012380:	4b23      	ldr	r3, [pc, #140]	; (8012410 <Serial_RxCpltCallback+0x9c>)
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	2b0d      	cmp	r3, #13
 8012386:	d10e      	bne.n	80123a6 <Serial_RxCpltCallback+0x32>
    {
      CommandString[indexReceiveChar] = 0; /* Make last char NULL for string comp */
 8012388:	4b20      	ldr	r3, [pc, #128]	; (801240c <Serial_RxCpltCallback+0x98>)
 801238a:	881b      	ldrh	r3, [r3, #0]
 801238c:	461a      	mov	r2, r3
 801238e:	4b21      	ldr	r3, [pc, #132]	; (8012414 <Serial_RxCpltCallback+0xa0>)
 8012390:	2100      	movs	r1, #0
 8012392:	5499      	strb	r1, [r3, r2]
        
      TRACE_I(TF_SERIAL_PRINTS,"received %s\n", CommandString);
 8012394:	491f      	ldr	r1, [pc, #124]	; (8012414 <Serial_RxCpltCallback+0xa0>)
 8012396:	4820      	ldr	r0, [pc, #128]	; (8012418 <Serial_RxCpltCallback+0xa4>)
 8012398:	f017 f8ee 	bl	8029578 <iprintf>
      
      UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_SERIAL_REQ_ID, CFG_SCH_PRIO_0);
 801239c:	2100      	movs	r1, #0
 801239e:	2010      	movs	r0, #16
 80123a0:	f004 fc48 	bl	8016c34 <UTIL_SEQ_SetTask>
      CommandString[indexReceiveChar++] = aRxBuffer[0];
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
    }
  }

  return;
 80123a4:	e030      	b.n	8012408 <Serial_RxCpltCallback+0x94>
    else if (aRxBuffer[0] == '\b')
 80123a6:	4b1a      	ldr	r3, [pc, #104]	; (8012410 <Serial_RxCpltCallback+0x9c>)
 80123a8:	781b      	ldrb	r3, [r3, #0]
 80123aa:	2b08      	cmp	r3, #8
 80123ac:	d10e      	bne.n	80123cc <Serial_RxCpltCallback+0x58>
      if (indexReceiveChar > 1)
 80123ae:	4b17      	ldr	r3, [pc, #92]	; (801240c <Serial_RxCpltCallback+0x98>)
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	2b01      	cmp	r3, #1
 80123b4:	d905      	bls.n	80123c2 <Serial_RxCpltCallback+0x4e>
        indexReceiveChar--;
 80123b6:	4b15      	ldr	r3, [pc, #84]	; (801240c <Serial_RxCpltCallback+0x98>)
 80123b8:	881b      	ldrh	r3, [r3, #0]
 80123ba:	3b01      	subs	r3, #1
 80123bc:	b29a      	uxth	r2, r3
 80123be:	4b13      	ldr	r3, [pc, #76]	; (801240c <Serial_RxCpltCallback+0x98>)
 80123c0:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 80123c2:	2100      	movs	r1, #0
 80123c4:	2008      	movs	r0, #8
 80123c6:	f004 fc35 	bl	8016c34 <UTIL_SEQ_SetTask>
  return;
 80123ca:	e01d      	b.n	8012408 <Serial_RxCpltCallback+0x94>
      if ((aRxBuffer[0] >= 'a') && (aRxBuffer[0] <= 'z'))
 80123cc:	4b10      	ldr	r3, [pc, #64]	; (8012410 <Serial_RxCpltCallback+0x9c>)
 80123ce:	781b      	ldrb	r3, [r3, #0]
 80123d0:	2b60      	cmp	r3, #96	; 0x60
 80123d2:	d909      	bls.n	80123e8 <Serial_RxCpltCallback+0x74>
 80123d4:	4b0e      	ldr	r3, [pc, #56]	; (8012410 <Serial_RxCpltCallback+0x9c>)
 80123d6:	781b      	ldrb	r3, [r3, #0]
 80123d8:	2b7a      	cmp	r3, #122	; 0x7a
 80123da:	d805      	bhi.n	80123e8 <Serial_RxCpltCallback+0x74>
        aRxBuffer[0] = aRxBuffer[0] + 'A' - 'a';
 80123dc:	4b0c      	ldr	r3, [pc, #48]	; (8012410 <Serial_RxCpltCallback+0x9c>)
 80123de:	781b      	ldrb	r3, [r3, #0]
 80123e0:	3b20      	subs	r3, #32
 80123e2:	b2da      	uxtb	r2, r3
 80123e4:	4b0a      	ldr	r3, [pc, #40]	; (8012410 <Serial_RxCpltCallback+0x9c>)
 80123e6:	701a      	strb	r2, [r3, #0]
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 80123e8:	4b08      	ldr	r3, [pc, #32]	; (801240c <Serial_RxCpltCallback+0x98>)
 80123ea:	881b      	ldrh	r3, [r3, #0]
 80123ec:	1c5a      	adds	r2, r3, #1
 80123ee:	b291      	uxth	r1, r2
 80123f0:	4a06      	ldr	r2, [pc, #24]	; (801240c <Serial_RxCpltCallback+0x98>)
 80123f2:	8011      	strh	r1, [r2, #0]
 80123f4:	461a      	mov	r2, r3
 80123f6:	4b06      	ldr	r3, [pc, #24]	; (8012410 <Serial_RxCpltCallback+0x9c>)
 80123f8:	7819      	ldrb	r1, [r3, #0]
 80123fa:	4b06      	ldr	r3, [pc, #24]	; (8012414 <Serial_RxCpltCallback+0xa0>)
 80123fc:	5499      	strb	r1, [r3, r2]
      UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 80123fe:	2100      	movs	r1, #0
 8012400:	2008      	movs	r0, #8
 8012402:	f004 fc17 	bl	8016c34 <UTIL_SEQ_SetTask>
  return;
 8012406:	bf00      	nop
 8012408:	bf00      	nop
 }
 801240a:	bd80      	pop	{r7, pc}
 801240c:	2000476c 	.word	0x2000476c
 8012410:	20004664 	.word	0x20004664
 8012414:	2000466c 	.word	0x2000466c
 8012418:	0802f990 	.word	0x0802f990

0801241c <Serial_Uart_Rx_Task>:
/**
 * @brief  DBG_TRACE USART Rx Transfer completed callback
 * @retval None
 */
static void Serial_Uart_Rx_Task( void )
{
 801241c:	b580      	push	{r7, lr}
 801241e:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT(CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, Serial_RxCpltCallback);
 8012420:	4b03      	ldr	r3, [pc, #12]	; (8012430 <Serial_Uart_Rx_Task+0x14>)
 8012422:	2201      	movs	r2, #1
 8012424:	4903      	ldr	r1, [pc, #12]	; (8012434 <Serial_Uart_Rx_Task+0x18>)
 8012426:	2000      	movs	r0, #0
 8012428:	f7f0 fb10 	bl	8002a4c <HW_UART_Receive_IT>
}
 801242c:	bf00      	nop
 801242e:	bd80      	pop	{r7, pc}
 8012430:	08012375 	.word	0x08012375
 8012434:	20004664 	.word	0x20004664

08012438 <Serial_InterfaceProcess>:
* @brief  Processes data coming from serial port   
* @param  void  
* @retval void
*/
void Serial_InterfaceProcess(void)
{
 8012438:	b580      	push	{r7, lr}
 801243a:	af00      	add	r7, sp, #0
  /* Reset button emulation state */
  button_emulation = 0;
 801243c:	4b4d      	ldr	r3, [pc, #308]	; (8012574 <Serial_InterfaceProcess+0x13c>)
 801243e:	2200      	movs	r2, #0
 8012440:	701a      	strb	r2, [r3, #0]
#ifdef ENABLE_SERIAL_CONTROL
  if (!strncmp((char const*)CommandString, "ATCL", 4))
 8012442:	2204      	movs	r2, #4
 8012444:	494c      	ldr	r1, [pc, #304]	; (8012578 <Serial_InterfaceProcess+0x140>)
 8012446:	484d      	ldr	r0, [pc, #308]	; (801257c <Serial_InterfaceProcess+0x144>)
 8012448:	f017 fa3c 	bl	80298c4 <strncmp>
 801244c:	4603      	mov	r3, r0
 801244e:	2b00      	cmp	r3, #0
 8012450:	d106      	bne.n	8012460 <Serial_InterfaceProcess+0x28>
  {            
    SerialCtrl_Process((char *)CommandString, indexReceiveChar);
 8012452:	4b4b      	ldr	r3, [pc, #300]	; (8012580 <Serial_InterfaceProcess+0x148>)
 8012454:	881b      	ldrh	r3, [r3, #0]
 8012456:	4619      	mov	r1, r3
 8012458:	4848      	ldr	r0, [pc, #288]	; (801257c <Serial_InterfaceProcess+0x144>)
 801245a:	f000 fa97 	bl	801298c <SerialCtrl_Process>
 801245e:	e07f      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  }
  else if (!strncmp((char const*)CommandString, "ATVR", 4))
 8012460:	2204      	movs	r2, #4
 8012462:	4948      	ldr	r1, [pc, #288]	; (8012584 <Serial_InterfaceProcess+0x14c>)
 8012464:	4845      	ldr	r0, [pc, #276]	; (801257c <Serial_InterfaceProcess+0x144>)
 8012466:	f017 fa2d 	bl	80298c4 <strncmp>
 801246a:	4603      	mov	r3, r0
 801246c:	2b00      	cmp	r3, #0
 801246e:	d106      	bne.n	801247e <Serial_InterfaceProcess+0x46>
  {            
    SerialCtrlVendorRead_Process((char *)CommandString, indexReceiveChar);
 8012470:	4b43      	ldr	r3, [pc, #268]	; (8012580 <Serial_InterfaceProcess+0x148>)
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	4619      	mov	r1, r3
 8012476:	4841      	ldr	r0, [pc, #260]	; (801257c <Serial_InterfaceProcess+0x144>)
 8012478:	f000 f924 	bl	80126c4 <SerialCtrlVendorRead_Process>
 801247c:	e070      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  }
  else if (!strncmp((char const*)CommandString, "ATVW", 4))
 801247e:	2204      	movs	r2, #4
 8012480:	4941      	ldr	r1, [pc, #260]	; (8012588 <Serial_InterfaceProcess+0x150>)
 8012482:	483e      	ldr	r0, [pc, #248]	; (801257c <Serial_InterfaceProcess+0x144>)
 8012484:	f017 fa1e 	bl	80298c4 <strncmp>
 8012488:	4603      	mov	r3, r0
 801248a:	2b00      	cmp	r3, #0
 801248c:	d106      	bne.n	801249c <Serial_InterfaceProcess+0x64>
  {            
    SerialCtrlVendorWrite_Process((char *)CommandString, indexReceiveChar);
 801248e:	4b3c      	ldr	r3, [pc, #240]	; (8012580 <Serial_InterfaceProcess+0x148>)
 8012490:	881b      	ldrh	r3, [r3, #0]
 8012492:	4619      	mov	r1, r3
 8012494:	4839      	ldr	r0, [pc, #228]	; (801257c <Serial_InterfaceProcess+0x144>)
 8012496:	f000 f991 	bl	80127bc <SerialCtrlVendorWrite_Process>
 801249a:	e061      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  }
#endif
#if ENABLE_UT
  else if(!strncmp((char const*)CommandString, "ATUT", 4))
 801249c:	2204      	movs	r2, #4
 801249e:	493b      	ldr	r1, [pc, #236]	; (801258c <Serial_InterfaceProcess+0x154>)
 80124a0:	4836      	ldr	r0, [pc, #216]	; (801257c <Serial_InterfaceProcess+0x144>)
 80124a2:	f017 fa0f 	bl	80298c4 <strncmp>
 80124a6:	4603      	mov	r3, r0
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d106      	bne.n	80124ba <Serial_InterfaceProcess+0x82>
  {
    SerialUt_Process((char *)CommandString, indexReceiveChar);  
 80124ac:	4b34      	ldr	r3, [pc, #208]	; (8012580 <Serial_InterfaceProcess+0x148>)
 80124ae:	881b      	ldrh	r3, [r3, #0]
 80124b0:	4619      	mov	r1, r3
 80124b2:	4832      	ldr	r0, [pc, #200]	; (801257c <Serial_InterfaceProcess+0x144>)
 80124b4:	f000 fbc4 	bl	8012c40 <SerialUt_Process>
 80124b8:	e052      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  else if(!strncmp((char const*)CommandString, "ATLLC", 5))
  {
    Appli_Light_LC_SerialCmd((char *)CommandString, indexReceiveChar);
  }
#endif
  else if(!strncmp((char const*)CommandString, "SW1", 3))
 80124ba:	2203      	movs	r2, #3
 80124bc:	4934      	ldr	r1, [pc, #208]	; (8012590 <Serial_InterfaceProcess+0x158>)
 80124be:	482f      	ldr	r0, [pc, #188]	; (801257c <Serial_InterfaceProcess+0x144>)
 80124c0:	f017 fa00 	bl	80298c4 <strncmp>
 80124c4:	4603      	mov	r3, r0
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d10c      	bne.n	80124e4 <Serial_InterfaceProcess+0xac>
  {
    button_emulation = 1; /* Set the button emulation */
 80124ca:	4b2a      	ldr	r3, [pc, #168]	; (8012574 <Serial_InterfaceProcess+0x13c>)
 80124cc:	2201      	movs	r2, #1
 80124ce:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW1 OK\r\n");
 80124d0:	4830      	ldr	r0, [pc, #192]	; (8012594 <Serial_InterfaceProcess+0x15c>)
 80124d2:	f017 f8b7 	bl	8029644 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80124d6:	4b30      	ldr	r3, [pc, #192]	; (8012598 <Serial_InterfaceProcess+0x160>)
 80124d8:	4a30      	ldr	r2, [pc, #192]	; (801259c <Serial_InterfaceProcess+0x164>)
 80124da:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80124dc:	482e      	ldr	r0, [pc, #184]	; (8012598 <Serial_InterfaceProcess+0x160>)
 80124de:	f7f6 f9fd 	bl	80088dc <HAL_EXTI_GenerateSWI>
 80124e2:	e03d      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  }
  else if(!strncmp((char const*)CommandString, "SW2", 3))
 80124e4:	2203      	movs	r2, #3
 80124e6:	492e      	ldr	r1, [pc, #184]	; (80125a0 <Serial_InterfaceProcess+0x168>)
 80124e8:	4824      	ldr	r0, [pc, #144]	; (801257c <Serial_InterfaceProcess+0x144>)
 80124ea:	f017 f9eb 	bl	80298c4 <strncmp>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d10d      	bne.n	8012510 <Serial_InterfaceProcess+0xd8>
  {
    button_emulation = 1; /* Set the button emulation */
 80124f4:	4b1f      	ldr	r3, [pc, #124]	; (8012574 <Serial_InterfaceProcess+0x13c>)
 80124f6:	2201      	movs	r2, #1
 80124f8:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW2 OK\r\n");
 80124fa:	482a      	ldr	r0, [pc, #168]	; (80125a4 <Serial_InterfaceProcess+0x16c>)
 80124fc:	f017 f8a2 	bl	8029644 <puts>
    exti_handle.Line = EXTI_LINE_0;
 8012500:	4b25      	ldr	r3, [pc, #148]	; (8012598 <Serial_InterfaceProcess+0x160>)
 8012502:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8012506:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8012508:	4823      	ldr	r0, [pc, #140]	; (8012598 <Serial_InterfaceProcess+0x160>)
 801250a:	f7f6 f9e7 	bl	80088dc <HAL_EXTI_GenerateSWI>
 801250e:	e027      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  }
  else if(!strncmp((char const*)CommandString, "SW3", 3))
 8012510:	2203      	movs	r2, #3
 8012512:	4925      	ldr	r1, [pc, #148]	; (80125a8 <Serial_InterfaceProcess+0x170>)
 8012514:	4819      	ldr	r0, [pc, #100]	; (801257c <Serial_InterfaceProcess+0x144>)
 8012516:	f017 f9d5 	bl	80298c4 <strncmp>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d10c      	bne.n	801253a <Serial_InterfaceProcess+0x102>
  {
    button_emulation = 1; /* Set the button emulation */
 8012520:	4b14      	ldr	r3, [pc, #80]	; (8012574 <Serial_InterfaceProcess+0x13c>)
 8012522:	2201      	movs	r2, #1
 8012524:	701a      	strb	r2, [r3, #0]
    TRACE_I(TF_SERIAL_PRINTS,"SW3 OK\r\n");
 8012526:	4821      	ldr	r0, [pc, #132]	; (80125ac <Serial_InterfaceProcess+0x174>)
 8012528:	f017 f88c 	bl	8029644 <puts>
    exti_handle.Line = EXTI_LINE_1;
 801252c:	4b1a      	ldr	r3, [pc, #104]	; (8012598 <Serial_InterfaceProcess+0x160>)
 801252e:	4a20      	ldr	r2, [pc, #128]	; (80125b0 <Serial_InterfaceProcess+0x178>)
 8012530:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8012532:	4819      	ldr	r0, [pc, #100]	; (8012598 <Serial_InterfaceProcess+0x160>)
 8012534:	f7f6 f9d2 	bl	80088dc <HAL_EXTI_GenerateSWI>
 8012538:	e012      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  }

  else
  {
    TRACE_I(TF_SERIAL_PRINTS,"Not Entered valid test parameters\r\n");  
 801253a:	481e      	ldr	r0, [pc, #120]	; (80125b4 <Serial_InterfaceProcess+0x17c>)
 801253c:	f017 f882 	bl	8029644 <puts>
    SerialCurrentState = STATE_IDLE;
 8012540:	4b1d      	ldr	r3, [pc, #116]	; (80125b8 <Serial_InterfaceProcess+0x180>)
 8012542:	2200      	movs	r2, #0
 8012544:	701a      	strb	r2, [r3, #0]
  }      
  while(indexReceiveChar)
 8012546:	e00b      	b.n	8012560 <Serial_InterfaceProcess+0x128>
  {
    CommandString[--indexReceiveChar] = 0;
 8012548:	4b0d      	ldr	r3, [pc, #52]	; (8012580 <Serial_InterfaceProcess+0x148>)
 801254a:	881b      	ldrh	r3, [r3, #0]
 801254c:	3b01      	subs	r3, #1
 801254e:	b29a      	uxth	r2, r3
 8012550:	4b0b      	ldr	r3, [pc, #44]	; (8012580 <Serial_InterfaceProcess+0x148>)
 8012552:	801a      	strh	r2, [r3, #0]
 8012554:	4b0a      	ldr	r3, [pc, #40]	; (8012580 <Serial_InterfaceProcess+0x148>)
 8012556:	881b      	ldrh	r3, [r3, #0]
 8012558:	461a      	mov	r2, r3
 801255a:	4b08      	ldr	r3, [pc, #32]	; (801257c <Serial_InterfaceProcess+0x144>)
 801255c:	2100      	movs	r1, #0
 801255e:	5499      	strb	r1, [r3, r2]
  while(indexReceiveChar)
 8012560:	4b07      	ldr	r3, [pc, #28]	; (8012580 <Serial_InterfaceProcess+0x148>)
 8012562:	881b      	ldrh	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d1ef      	bne.n	8012548 <Serial_InterfaceProcess+0x110>
  }
  UTIL_SEQ_SetTask( 1<<CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 8012568:	2100      	movs	r1, #0
 801256a:	2008      	movs	r0, #8
 801256c:	f004 fb62 	bl	8016c34 <UTIL_SEQ_SetTask>
}
 8012570:	bf00      	nop
 8012572:	bd80      	pop	{r7, pc}
 8012574:	20004660 	.word	0x20004660
 8012578:	0802f9a0 	.word	0x0802f9a0
 801257c:	2000466c 	.word	0x2000466c
 8012580:	2000476c 	.word	0x2000476c
 8012584:	0802f9a8 	.word	0x0802f9a8
 8012588:	0802f9b0 	.word	0x0802f9b0
 801258c:	0802f9b8 	.word	0x0802f9b8
 8012590:	0802f9c0 	.word	0x0802f9c0
 8012594:	0802f9c4 	.word	0x0802f9c4
 8012598:	200040f4 	.word	0x200040f4
 801259c:	16000004 	.word	0x16000004
 80125a0:	0802f9cc 	.word	0x0802f9cc
 80125a4:	0802f9d0 	.word	0x0802f9d0
 80125a8:	0802f9d8 	.word	0x0802f9d8
 80125ac:	0802f9dc 	.word	0x0802f9dc
 80125b0:	16000001 	.word	0x16000001
 80125b4:	0802f9e4 	.word	0x0802f9e4
 80125b8:	20004661 	.word	0x20004661

080125bc <Serial_CharToHexConvert>:
* @param  addr: input ASCI character
* @retval MOBLEUINT8
*/ 

MOBLEUINT8 Serial_CharToHexConvert(char addr)
{
 80125bc:	b480      	push	{r7}
 80125be:	b085      	sub	sp, #20
 80125c0:	af00      	add	r7, sp, #0
 80125c2:	4603      	mov	r3, r0
 80125c4:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 retVal=0;
 80125c6:	2300      	movs	r3, #0
 80125c8:	73fb      	strb	r3, [r7, #15]
  if (addr >= '0' && addr <= '9')
 80125ca:	79fb      	ldrb	r3, [r7, #7]
 80125cc:	2b2f      	cmp	r3, #47	; 0x2f
 80125ce:	d906      	bls.n	80125de <Serial_CharToHexConvert+0x22>
 80125d0:	79fb      	ldrb	r3, [r7, #7]
 80125d2:	2b39      	cmp	r3, #57	; 0x39
 80125d4:	d803      	bhi.n	80125de <Serial_CharToHexConvert+0x22>
        retVal = addr - '0';
 80125d6:	79fb      	ldrb	r3, [r7, #7]
 80125d8:	3b30      	subs	r3, #48	; 0x30
 80125da:	73fb      	strb	r3, [r7, #15]
 80125dc:	e01c      	b.n	8012618 <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'a' && addr <= 'f')
 80125de:	79fb      	ldrb	r3, [r7, #7]
 80125e0:	2b60      	cmp	r3, #96	; 0x60
 80125e2:	d906      	bls.n	80125f2 <Serial_CharToHexConvert+0x36>
 80125e4:	79fb      	ldrb	r3, [r7, #7]
 80125e6:	2b66      	cmp	r3, #102	; 0x66
 80125e8:	d803      	bhi.n	80125f2 <Serial_CharToHexConvert+0x36>
        retVal = addr+10-'a';
 80125ea:	79fb      	ldrb	r3, [r7, #7]
 80125ec:	3b57      	subs	r3, #87	; 0x57
 80125ee:	73fb      	strb	r3, [r7, #15]
 80125f0:	e012      	b.n	8012618 <Serial_CharToHexConvert+0x5c>
  else if (addr >= 'A' && addr <= 'F')
 80125f2:	79fb      	ldrb	r3, [r7, #7]
 80125f4:	2b40      	cmp	r3, #64	; 0x40
 80125f6:	d906      	bls.n	8012606 <Serial_CharToHexConvert+0x4a>
 80125f8:	79fb      	ldrb	r3, [r7, #7]
 80125fa:	2b46      	cmp	r3, #70	; 0x46
 80125fc:	d803      	bhi.n	8012606 <Serial_CharToHexConvert+0x4a>
        retVal = addr+10-'A';
 80125fe:	79fb      	ldrb	r3, [r7, #7]
 8012600:	3b37      	subs	r3, #55	; 0x37
 8012602:	73fb      	strb	r3, [r7, #15]
 8012604:	e008      	b.n	8012618 <Serial_CharToHexConvert+0x5c>
  else if (addr == ' ')
 8012606:	79fb      	ldrb	r3, [r7, #7]
 8012608:	2b20      	cmp	r3, #32
 801260a:	d103      	bne.n	8012614 <Serial_CharToHexConvert+0x58>
        retVal = addr+10-' ';
 801260c:	79fb      	ldrb	r3, [r7, #7]
 801260e:	3b16      	subs	r3, #22
 8012610:	73fb      	strb	r3, [r7, #15]
 8012612:	e001      	b.n	8012618 <Serial_CharToHexConvert+0x5c>
  else
       return 0xFF;
 8012614:	23ff      	movs	r3, #255	; 0xff
 8012616:	e000      	b.n	801261a <Serial_CharToHexConvert+0x5e>
    
  return retVal;
 8012618:	7bfb      	ldrb	r3, [r7, #15]
}
 801261a:	4618      	mov	r0, r3
 801261c:	3714      	adds	r7, #20
 801261e:	46bd      	mov	sp, r7
 8012620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012624:	4770      	bx	lr
	...

08012628 <Serial_Init>:
  * @brief  This function initialize the Rx from UART
  * @param  None
  * @retval None
  */
void Serial_Init(void)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	af00      	add	r7, sp, #0
  button_emulation = 0; /* Reset the button emulation state */
 801262c:	4b09      	ldr	r3, [pc, #36]	; (8012654 <Serial_Init+0x2c>)
 801262e:	2200      	movs	r2, #0
 8012630:	701a      	strb	r2, [r3, #0]

  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_SERIAL_REQ_ID, UTIL_SEQ_RFU, Serial_InterfaceProcess);
 8012632:	4a09      	ldr	r2, [pc, #36]	; (8012658 <Serial_Init+0x30>)
 8012634:	2100      	movs	r1, #0
 8012636:	2010      	movs	r0, #16
 8012638:	f004 fada 	bl	8016bf0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, UTIL_SEQ_RFU, Serial_Uart_Rx_Task );
 801263c:	4a07      	ldr	r2, [pc, #28]	; (801265c <Serial_Init+0x34>)
 801263e:	2100      	movs	r1, #0
 8012640:	2008      	movs	r0, #8
 8012642:	f004 fad5 	bl	8016bf0 <UTIL_SEQ_RegTask>
  UTIL_SEQ_SetTask( 1<< CFG_TASK_MESH_UART_RX_REQ_ID, CFG_SCH_PRIO_0);
 8012646:	2100      	movs	r1, #0
 8012648:	2008      	movs	r0, #8
 801264a:	f004 faf3 	bl	8016c34 <UTIL_SEQ_SetTask>

  return;
 801264e:	bf00      	nop
}
 8012650:	bd80      	pop	{r7, pc}
 8012652:	bf00      	nop
 8012654:	20004660 	.word	0x20004660
 8012658:	08012439 	.word	0x08012439
 801265c:	0801241d 	.word	0x0801241d

08012660 <BLEMesh_PrintStringCb>:
* @brief  Callback function to print data serially  
* @param  *message: Pointer of data string  
* @retval void
*/
void BLEMesh_PrintStringCb(const char *message)
{
 8012660:	b580      	push	{r7, lr}
 8012662:	b082      	sub	sp, #8
 8012664:	af00      	add	r7, sp, #0
 8012666:	6078      	str	r0, [r7, #4]
    TRACE_I(TF_SERIAL_PRINTS,"%s\n\r", (char*)message);
 8012668:	6879      	ldr	r1, [r7, #4]
 801266a:	4803      	ldr	r0, [pc, #12]	; (8012678 <BLEMesh_PrintStringCb+0x18>)
 801266c:	f016 ff84 	bl	8029578 <iprintf>
}
 8012670:	bf00      	nop
 8012672:	3708      	adds	r7, #8
 8012674:	46bd      	mov	sp, r7
 8012676:	bd80      	pop	{r7, pc}
 8012678:	0802fa08 	.word	0x0802fa08

0801267c <BLEMesh_PrintDataCb>:
* @param  *data : Pointer to the data to be printed 
* @param  size : Length of data to be printed
* @retval void
*/
void BLEMesh_PrintDataCb(MOBLEUINT8* data, MOBLEUINT16 size)
{
 801267c:	b580      	push	{r7, lr}
 801267e:	b084      	sub	sp, #16
 8012680:	af00      	add	r7, sp, #0
 8012682:	6078      	str	r0, [r7, #4]
 8012684:	460b      	mov	r3, r1
 8012686:	807b      	strh	r3, [r7, #2]
    for (int count=0; count<size; ++count)
 8012688:	2300      	movs	r3, #0
 801268a:	60fb      	str	r3, [r7, #12]
 801268c:	e00a      	b.n	80126a4 <BLEMesh_PrintDataCb+0x28>
    {
        TRACE_I(TF_SERIAL_PRINTS,"%02X", data[count]);
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	4413      	add	r3, r2
 8012694:	781b      	ldrb	r3, [r3, #0]
 8012696:	4619      	mov	r1, r3
 8012698:	4808      	ldr	r0, [pc, #32]	; (80126bc <BLEMesh_PrintDataCb+0x40>)
 801269a:	f016 ff6d 	bl	8029578 <iprintf>
    for (int count=0; count<size; ++count)
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	3301      	adds	r3, #1
 80126a2:	60fb      	str	r3, [r7, #12]
 80126a4:	887b      	ldrh	r3, [r7, #2]
 80126a6:	68fa      	ldr	r2, [r7, #12]
 80126a8:	429a      	cmp	r2, r3
 80126aa:	dbf0      	blt.n	801268e <BLEMesh_PrintDataCb+0x12>
    }
    
    TRACE_I(TF_SERIAL_PRINTS,"\n\r");
 80126ac:	4804      	ldr	r0, [pc, #16]	; (80126c0 <BLEMesh_PrintDataCb+0x44>)
 80126ae:	f016 ff63 	bl	8029578 <iprintf>
}
 80126b2:	bf00      	nop
 80126b4:	3710      	adds	r7, #16
 80126b6:	46bd      	mov	sp, r7
 80126b8:	bd80      	pop	{r7, pc}
 80126ba:	bf00      	nop
 80126bc:	0802fa10 	.word	0x0802fa10
 80126c0:	0802fa18 	.word	0x0802fa18

080126c4 <SerialCtrlVendorRead_Process>:
* @param  rcvdStringBuff: buffer to store input string 
* @param  rcvdStringSize: length of the input string 
* @retval void
*/ 
void SerialCtrlVendorRead_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b08c      	sub	sp, #48	; 0x30
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	6078      	str	r0, [r7, #4]
 80126cc:	460b      	mov	r3, r1
 80126ce:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 command = 0;                          /*Opcode command to be executed by the destination node*/
 80126d0:	2300      	movs	r3, #0
 80126d2:	84bb      	strh	r3, [r7, #36]	; 0x24
  MOBLEUINT8 datalength = 0;
 80126d4:	2300      	movs	r3, #0
 80126d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MOBLEUINT8  data [10] = {0};                  /*buffer to output property variables */
 80126da:	2300      	movs	r3, #0
 80126dc:	61bb      	str	r3, [r7, #24]
 80126de:	f107 031c 	add.w	r3, r7, #28
 80126e2:	2200      	movs	r2, #0
 80126e4:	601a      	str	r2, [r3, #0]
 80126e6:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 80126e8:	2302      	movs	r3, #2
 80126ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  MODEL_MessageHeader_t msgHdr;
  
  /*Initializing the parameters*/
  msgHdr.elementIndex = 0;
 80126ee:	2300      	movs	r3, #0
 80126f0:	733b      	strb	r3, [r7, #12]
  msgHdr.peer_addr = 0;
 80126f2:	2300      	movs	r3, #0
 80126f4:	823b      	strh	r3, [r7, #16]
  msgHdr.dst_peer = 0;
 80126f6:	2300      	movs	r3, #0
 80126f8:	827b      	strh	r3, [r7, #18]
  msgHdr.ttl = 0;
 80126fa:	2300      	movs	r3, #0
 80126fc:	753b      	strb	r3, [r7, #20]
  msgHdr.rssi = 0;
 80126fe:	2300      	movs	r3, #0
 8012700:	757b      	strb	r3, [r7, #21]
  msgHdr.rcvdAppKeyOffset = 0;
 8012702:	2300      	movs	r3, #0
 8012704:	75bb      	strb	r3, [r7, #22]
  msgHdr.rcvdNetKeyOffset = 0;
 8012706:	2300      	movs	r3, #0
 8012708:	75fb      	strb	r3, [r7, #23]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &msgHdr.dst_peer, &command); 
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	1d58      	adds	r0, r3, #5
 801270e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8012712:	f107 030c 	add.w	r3, r7, #12
 8012716:	1d9a      	adds	r2, r3, #6
 8012718:	460b      	mov	r3, r1
 801271a:	4923      	ldr	r1, [pc, #140]	; (80127a8 <SerialCtrlVendorRead_Process+0xe4>)
 801271c:	f016 ff9a 	bl	8029654 <siscanf>
  
  for(int i = 0; i < 6 ; i++)
 8012720:	2300      	movs	r3, #0
 8012722:	62bb      	str	r3, [r7, #40]	; 0x28
 8012724:	e00d      	b.n	8012742 <SerialCtrlVendorRead_Process+0x7e>
  {
    if(command == Vendor_Opcodes_Table[i])
 8012726:	4a21      	ldr	r2, [pc, #132]	; (80127ac <SerialCtrlVendorRead_Process+0xe8>)
 8012728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 801272e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012730:	429a      	cmp	r2, r3
 8012732:	d103      	bne.n	801273c <SerialCtrlVendorRead_Process+0x78>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 8012734:	2300      	movs	r3, #0
 8012736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      break;
 801273a:	e005      	b.n	8012748 <SerialCtrlVendorRead_Process+0x84>
  for(int i = 0; i < 6 ; i++)
 801273c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801273e:	3301      	adds	r3, #1
 8012740:	62bb      	str	r3, [r7, #40]	; 0x28
 8012742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012744:	2b05      	cmp	r3, #5
 8012746:	ddee      	ble.n	8012726 <SerialCtrlVendorRead_Process+0x62>
    }
  
  }
  
  datalength = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data);
 8012748:	f107 0318 	add.w	r3, r7, #24
 801274c:	8879      	ldrh	r1, [r7, #2]
 801274e:	220f      	movs	r2, #15
 8012750:	6878      	ldr	r0, [r7, #4]
 8012752:	f000 f9fa 	bl	8012b4a <SerialCtrl_GetData>
 8012756:	4603      	mov	r3, r0
 8012758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  
  if(result)
 801275c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012760:	2b00      	cmp	r3, #0
 8012762:	d003      	beq.n	801276c <SerialCtrlVendorRead_Process+0xa8>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 8012764:	4812      	ldr	r0, [pc, #72]	; (80127b0 <SerialCtrlVendorRead_Process+0xec>)
 8012766:	f016 ff6d 	bl	8029644 <puts>
 801276a:	e01a      	b.n	80127a2 <SerialCtrlVendorRead_Process+0xde>
    return;
  }
  
 else
  {
    msgHdr.peer_addr = BLEMesh_GetAddress();
 801276c:	f00a fc9c 	bl	801d0a8 <BLEMesh_GetAddress>
 8012770:	4603      	mov	r3, r0
 8012772:	823b      	strh	r3, [r7, #16]
    result = BLEMesh_ReadRemoteData(&msgHdr,command, data, datalength);   
 8012774:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8012776:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801277a:	f107 0218 	add.w	r2, r7, #24
 801277e:	f107 000c 	add.w	r0, r7, #12
 8012782:	f012 ff93 	bl	80256ac <BLEMesh_ReadRemoteData>
 8012786:	4603      	mov	r3, r0
 8012788:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if(result == MOBLE_RESULT_SUCCESS)
 801278c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012790:	2b00      	cmp	r3, #0
 8012792:	d103      	bne.n	801279c <SerialCtrlVendorRead_Process+0xd8>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012794:	4807      	ldr	r0, [pc, #28]	; (80127b4 <SerialCtrlVendorRead_Process+0xf0>)
 8012796:	f016 ff55 	bl	8029644 <puts>
 801279a:	e002      	b.n	80127a2 <SerialCtrlVendorRead_Process+0xde>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 801279c:	4806      	ldr	r0, [pc, #24]	; (80127b8 <SerialCtrlVendorRead_Process+0xf4>)
 801279e:	f016 ff51 	bl	8029644 <puts>
    }
  }
   
}
 80127a2:	3730      	adds	r7, #48	; 0x30
 80127a4:	46bd      	mov	sp, r7
 80127a6:	bd80      	pop	{r7, pc}
 80127a8:	0802fa1c 	.word	0x0802fa1c
 80127ac:	200000a4 	.word	0x200000a4
 80127b0:	0802fa28 	.word	0x0802fa28
 80127b4:	0802fa3c 	.word	0x0802fa3c
 80127b8:	0802fa5c 	.word	0x0802fa5c

080127bc <SerialCtrlVendorWrite_Process>:


void SerialCtrlVendorWrite_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 80127bc:	b5b0      	push	{r4, r5, r7, lr}
 80127be:	b09c      	sub	sp, #112	; 0x70
 80127c0:	af04      	add	r7, sp, #16
 80127c2:	6078      	str	r0, [r7, #4]
 80127c4:	460b      	mov	r3, r1
 80127c6:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 80127c8:	2300      	movs	r3, #0
 80127ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 80127ce:	2300      	movs	r3, #0
 80127d0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/  
 80127d4:	2300      	movs	r3, #0
 80127d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 80127da:	2302      	movs	r3, #2
 80127dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  MOBLEBOOL response = MOBLE_FALSE;
 80127e0:	2300      	movs	r3, #0
 80127e2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  MOBLEUINT8 data_buff[VENDOR_DATA_BUFFER_SIZE];
  MOBLEUINT16 idx=0;
 80127e6:	2300      	movs	r3, #0
 80127e8:	81fb      	strh	r3, [r7, #14]
  MOBLEUINT8 length;
  MOBLEUINT8 j = 1;
 80127ea:	2301      	movs	r3, #1
 80127ec:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  
  sscanf(rcvdStringBuff+5, "%4hx %hx %hx", &peer,&command,&idx); 
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	1d58      	adds	r0, r3, #5
 80127f4:	f107 014e 	add.w	r1, r7, #78	; 0x4e
 80127f8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80127fc:	f107 030e 	add.w	r3, r7, #14
 8012800:	9300      	str	r3, [sp, #0]
 8012802:	460b      	mov	r3, r1
 8012804:	495c      	ldr	r1, [pc, #368]	; (8012978 <SerialCtrlVendorWrite_Process+0x1bc>)
 8012806:	f016 ff25 	bl	8029654 <siscanf>
  
  if(command == 0x000E)
 801280a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801280e:	2b0e      	cmp	r3, #14
 8012810:	d165      	bne.n	80128de <SerialCtrlVendorWrite_Process+0x122>
  {
    /* Check parameter if data to be send continuously */
    if (idx == 0xFF)
 8012812:	89fb      	ldrh	r3, [r7, #14]
 8012814:	2bff      	cmp	r3, #255	; 0xff
 8012816:	d12f      	bne.n	8012878 <SerialCtrlVendorWrite_Process+0xbc>
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 8012818:	2301      	movs	r3, #1
 801281a:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-1;
 801281c:	233b      	movs	r3, #59	; 0x3b
 801281e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 8012822:	2301      	movs	r3, #1
 8012824:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8012828:	e011      	b.n	801284e <SerialCtrlVendorWrite_Process+0x92>
      {
        data_buff[j] = i;
 801282a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801282e:	3360      	adds	r3, #96	; 0x60
 8012830:	443b      	add	r3, r7
 8012832:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 8012836:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 801283a:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 801283e:	3301      	adds	r3, #1
 8012840:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      for(MOBLEUINT8 i=1;i <sizeof(data_buff);i++)
 8012844:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8012848:	3301      	adds	r3, #1
 801284a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 801284e:	f897 305c 	ldrb.w	r3, [r7, #92]	; 0x5c
 8012852:	2b3b      	cmp	r3, #59	; 0x3b
 8012854:	d9e9      	bls.n	801282a <SerialCtrlVendorWrite_Process+0x6e>
      }
      Appli_Vendor_SetBigDataPacket(data_buff, length, elementIndex , peer);
 8012856:	f897 105e 	ldrb.w	r1, [r7, #94]	; 0x5e
 801285a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801285e:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8012862:	f107 0010 	add.w	r0, r7, #16
 8012866:	f7f4 fb51 	bl	8006f0c <Appli_Vendor_SetBigDataPacket>
      Vendor_SendDataFreq(0xFF);
 801286a:	20ff      	movs	r0, #255	; 0xff
 801286c:	f001 fcb2 	bl	80141d4 <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012870:	4842      	ldr	r0, [pc, #264]	; (801297c <SerialCtrlVendorWrite_Process+0x1c0>)
 8012872:	f016 fee7 	bl	8029644 <puts>
      return;
 8012876:	e07b      	b.n	8012970 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Check parameter if continuously data send operation need to stop  */
    else if (idx == 0x00)
 8012878:	89fb      	ldrh	r3, [r7, #14]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d109      	bne.n	8012892 <SerialCtrlVendorWrite_Process+0xd6>
    {
#if USE_STM32WB5M_DK
      LED_Off();
#else
      BSP_LED_Off(LED_BLUE); 
 801287e:	2000      	movs	r0, #0
 8012880:	f7f5 f968 	bl	8007b54 <BSP_LED_Off>
#endif
      Vendor_SendDataFreq(0x00);
 8012884:	2000      	movs	r0, #0
 8012886:	f001 fca5 	bl	80141d4 <Vendor_SendDataFreq>
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 801288a:	483c      	ldr	r0, [pc, #240]	; (801297c <SerialCtrlVendorWrite_Process+0x1c0>)
 801288c:	f016 feda 	bl	8029644 <puts>
      return;
 8012890:	e06e      	b.n	8012970 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    /* Data will be sent only once */
    else
    {
      data_buff[0] = 0x01;     /*  data write sub command; */
 8012892:	2301      	movs	r3, #1
 8012894:	743b      	strb	r3, [r7, #16]
      length = sizeof(data_buff)-idx;
 8012896:	89fb      	ldrh	r3, [r7, #14]
 8012898:	b2db      	uxtb	r3, r3
 801289a:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
 801289e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
      Vendor_SendDataFreq(0x00); /* To stop sending packets periodically */
 80128a2:	2000      	movs	r0, #0
 80128a4:	f001 fc96 	bl	80141d4 <Vendor_SendDataFreq>
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 80128a8:	89fb      	ldrh	r3, [r7, #14]
 80128aa:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80128ae:	e011      	b.n	80128d4 <SerialCtrlVendorWrite_Process+0x118>
      {
        data_buff[j] = i;
 80128b0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80128b4:	3360      	adds	r3, #96	; 0x60
 80128b6:	443b      	add	r3, r7
 80128b8:	f897 205b 	ldrb.w	r2, [r7, #91]	; 0x5b
 80128bc:	f803 2c50 	strb.w	r2, [r3, #-80]
        j++;
 80128c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80128c4:	3301      	adds	r3, #1
 80128c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
      for(MOBLEUINT8 i=idx;i <sizeof(data_buff);i++)
 80128ca:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80128ce:	3301      	adds	r3, #1
 80128d0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80128d4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80128d8:	2b3b      	cmp	r3, #59	; 0x3b
 80128da:	d9e9      	bls.n	80128b0 <SerialCtrlVendorWrite_Process+0xf4>
 80128dc:	e009      	b.n	80128f2 <SerialCtrlVendorWrite_Process+0x136>
      }
    }
  }
  else
  {
    length = SerialCtrl_GetData(rcvdStringBuff, rcvdStringSize, SERIAL_MODEL_DATA_OFFSET, data_buff);
 80128de:	f107 0310 	add.w	r3, r7, #16
 80128e2:	8879      	ldrh	r1, [r7, #2]
 80128e4:	220f      	movs	r2, #15
 80128e6:	6878      	ldr	r0, [r7, #4]
 80128e8:	f000 f92f 	bl	8012b4a <SerialCtrl_GetData>
 80128ec:	4603      	mov	r3, r0
 80128ee:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  }
  
  for(int i = 0; i < 6 ; i++)
 80128f2:	2300      	movs	r3, #0
 80128f4:	657b      	str	r3, [r7, #84]	; 0x54
 80128f6:	e00e      	b.n	8012916 <SerialCtrlVendorWrite_Process+0x15a>
  {
    if(command == Vendor_Opcodes_Table[i])
 80128f8:	4a21      	ldr	r2, [pc, #132]	; (8012980 <SerialCtrlVendorWrite_Process+0x1c4>)
 80128fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80128fc:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8012900:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8012904:	429a      	cmp	r2, r3
 8012906:	d103      	bne.n	8012910 <SerialCtrlVendorWrite_Process+0x154>
    {                 
      result = MOBLE_RESULT_SUCCESS;
 8012908:	2300      	movs	r3, #0
 801290a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      break;
 801290e:	e005      	b.n	801291c <SerialCtrlVendorWrite_Process+0x160>
  for(int i = 0; i < 6 ; i++)
 8012910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012912:	3301      	adds	r3, #1
 8012914:	657b      	str	r3, [r7, #84]	; 0x54
 8012916:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012918:	2b05      	cmp	r3, #5
 801291a:	dded      	ble.n	80128f8 <SerialCtrlVendorWrite_Process+0x13c>
    }
  }
  if(result)
 801291c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012920:	2b00      	cmp	r3, #0
 8012922:	d003      	beq.n	801292c <SerialCtrlVendorWrite_Process+0x170>
  {
    TRACE_I(TF_SERIAL_PRINTS,"Invalid Command\r\n");
 8012924:	4817      	ldr	r0, [pc, #92]	; (8012984 <SerialCtrlVendorWrite_Process+0x1c8>)
 8012926:	f016 fe8d 	bl	8029644 <puts>
    return;
 801292a:	e021      	b.n	8012970 <SerialCtrlVendorWrite_Process+0x1b4>
  
  else
  {
      
    /* Publish to the peer address, that can be a group address */
    result = BLEMesh_SetRemoteData(peer,
 801292c:	f8b7 0050 	ldrh.w	r0, [r7, #80]	; 0x50
 8012930:	f8b7 404e 	ldrh.w	r4, [r7, #78]	; 0x4e
 8012934:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8012938:	f107 0510 	add.w	r5, r7, #16
 801293c:	f897 1053 	ldrb.w	r1, [r7, #83]	; 0x53
 8012940:	2201      	movs	r2, #1
 8012942:	9202      	str	r2, [sp, #8]
 8012944:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8012948:	9201      	str	r2, [sp, #4]
 801294a:	9300      	str	r3, [sp, #0]
 801294c:	462b      	mov	r3, r5
 801294e:	4622      	mov	r2, r4
 8012950:	f015 fe08 	bl	8028564 <BLEMesh_SetRemoteData>
 8012954:	4603      	mov	r3, r0
 8012956:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
                                   data_buff, 
                                   length,
                                   response, 
                                   MOBLE_TRUE);   

    if(result == MOBLE_RESULT_SUCCESS)
 801295a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801295e:	2b00      	cmp	r3, #0
 8012960:	d103      	bne.n	801296a <SerialCtrlVendorWrite_Process+0x1ae>
    {
      TRACE_I(TF_SERIAL_PRINTS,"Command Executed Successfully\r\n");
 8012962:	4806      	ldr	r0, [pc, #24]	; (801297c <SerialCtrlVendorWrite_Process+0x1c0>)
 8012964:	f016 fe6e 	bl	8029644 <puts>
 8012968:	e002      	b.n	8012970 <SerialCtrlVendorWrite_Process+0x1b4>
    }
    else
    {
      TRACE_I(TF_SERIAL_PRINTS,"Invalid Opcode Parameter\r\n");
 801296a:	4807      	ldr	r0, [pc, #28]	; (8012988 <SerialCtrlVendorWrite_Process+0x1cc>)
 801296c:	f016 fe6a 	bl	8029644 <puts>
    }
  }
}
 8012970:	3760      	adds	r7, #96	; 0x60
 8012972:	46bd      	mov	sp, r7
 8012974:	bdb0      	pop	{r4, r5, r7, pc}
 8012976:	bf00      	nop
 8012978:	0802fa78 	.word	0x0802fa78
 801297c:	0802fa3c 	.word	0x0802fa3c
 8012980:	200000a4 	.word	0x200000a4
 8012984:	0802fa28 	.word	0x0802fa28
 8012988:	0802fa5c 	.word	0x0802fa5c

0801298c <SerialCtrl_Process>:
  

void SerialCtrl_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 801298c:	b5b0      	push	{r4, r5, r7, lr}
 801298e:	b08c      	sub	sp, #48	; 0x30
 8012990:	af04      	add	r7, sp, #16
 8012992:	6078      	str	r0, [r7, #4]
 8012994:	460b      	mov	r3, r1
 8012996:	807b      	strh	r3, [r7, #2]
  MOBLE_ADDRESS peer = 0;                               /*node adderess of the destination node*/
 8012998:	2300      	movs	r3, #0
 801299a:	837b      	strh	r3, [r7, #26]
  MOBLEUINT16 command = 0;                              /*Opcode command to be executed by the destination node*/
 801299c:	2300      	movs	r3, #0
 801299e:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 minParamLength = 0;                        /*minimum number of properties required by a specific command*/
 80129a0:	2300      	movs	r3, #0
 80129a2:	77fb      	strb	r3, [r7, #31]
  MOBLEUINT8 elementIndex = 0;                          /*default element index*/
 80129a4:	2300      	movs	r3, #0
 80129a6:	77bb      	strb	r3, [r7, #30]
  MOBLEUINT8  data [10] = {0};                          /*buffer to output property variables */
 80129a8:	2300      	movs	r3, #0
 80129aa:	60fb      	str	r3, [r7, #12]
 80129ac:	f107 0310 	add.w	r3, r7, #16
 80129b0:	2200      	movs	r2, #0
 80129b2:	601a      	str	r2, [r3, #0]
 80129b4:	809a      	strh	r2, [r3, #4]
  MOBLE_RESULT result;
  MOBLEBOOL response = MOBLE_TRUE;
 80129b6:	2301      	movs	r3, #1
 80129b8:	777b      	strb	r3, [r7, #29]
  
  sscanf(rcvdStringBuff+5, "%4hx %hx ", &peer,&command); 
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	1d58      	adds	r0, r3, #5
 80129be:	f107 0318 	add.w	r3, r7, #24
 80129c2:	f107 021a 	add.w	r2, r7, #26
 80129c6:	493c      	ldr	r1, [pc, #240]	; (8012ab8 <SerialCtrl_Process+0x12c>)
 80129c8:	f016 fe44 	bl	8029654 <siscanf>
  
  /* Callback to store a pointer to Opcode table starting sddress and length of the table*/
#ifdef ENABLE_GENERIC_MODEL_SERVER  
  GenericModelServer_GetOpcodeTableCb(&Generic_OpcodeTable,&Generic_OpcodeTableLength);
 80129cc:	493b      	ldr	r1, [pc, #236]	; (8012abc <SerialCtrl_Process+0x130>)
 80129ce:	483c      	ldr	r0, [pc, #240]	; (8012ac0 <SerialCtrl_Process+0x134>)
 80129d0:	f7fb ff24 	bl	800e81c <GenericModelServer_GetOpcodeTableCb>
#ifdef ENABLE_GENERIC_MODEL_CLIENT
  GenericModelClient_GetOpcodeTableCb(&Generic_OpcodeTable,&Generic_OpcodeTableLength);
#endif
#endif
#ifdef ENABLE_LIGHT_MODEL_SERVER  
  LightModelServer_GetOpcodeTableCb(&Light_OpcodeTable,&Light_OpcodeTableLength);     
 80129d4:	493b      	ldr	r1, [pc, #236]	; (8012ac4 <SerialCtrl_Process+0x138>)
 80129d6:	483c      	ldr	r0, [pc, #240]	; (8012ac8 <SerialCtrl_Process+0x13c>)
 80129d8:	f7fd fb80 	bl	80100dc <LightModelServer_GetOpcodeTableCb>
  LightLcServer_GetOpcodeTableCb(&LightLC_OpcodeTable,&LightLC_OpcodeTableLength);
 80129dc:	493b      	ldr	r1, [pc, #236]	; (8012acc <SerialCtrl_Process+0x140>)
 80129de:	483c      	ldr	r0, [pc, #240]	; (8012ad0 <SerialCtrl_Process+0x144>)
 80129e0:	f000 fe17 	bl	8013612 <LightLcServer_GetOpcodeTableCb>
  SensorsModelClient_GetOpcodeTableCb(&Sensor_OpcodeTable,&Sensor_OpcodeTableLength);
#endif
#endif
  
  /* Minimum parameter length required for a valid opcade in Generic opcode table */
  minParamLength = SerialCtrl_GetMinParamLength(command,
 80129e4:	8b3b      	ldrh	r3, [r7, #24]
 80129e6:	4618      	mov	r0, r3
 80129e8:	4b35      	ldr	r3, [pc, #212]	; (8012ac0 <SerialCtrl_Process+0x134>)
 80129ea:	681b      	ldr	r3, [r3, #0]
 80129ec:	4a33      	ldr	r2, [pc, #204]	; (8012abc <SerialCtrl_Process+0x130>)
 80129ee:	8812      	ldrh	r2, [r2, #0]
 80129f0:	4619      	mov	r1, r3
 80129f2:	f000 f87b 	bl	8012aec <SerialCtrl_GetMinParamLength>
 80129f6:	4603      	mov	r3, r0
 80129f8:	77fb      	strb	r3, [r7, #31]
                                                Generic_OpcodeTable,
                                                Generic_OpcodeTableLength);
  
  /* Opcode not found in Generic opcode table 
      Start finding for opcode in Light Table*/
  if (minParamLength == 0xff)
 80129fa:	7ffb      	ldrb	r3, [r7, #31]
 80129fc:	2bff      	cmp	r3, #255	; 0xff
 80129fe:	d10a      	bne.n	8012a16 <SerialCtrl_Process+0x8a>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 8012a00:	8b3b      	ldrh	r3, [r7, #24]
 8012a02:	4618      	mov	r0, r3
 8012a04:	4b30      	ldr	r3, [pc, #192]	; (8012ac8 <SerialCtrl_Process+0x13c>)
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	4a2e      	ldr	r2, [pc, #184]	; (8012ac4 <SerialCtrl_Process+0x138>)
 8012a0a:	8812      	ldrh	r2, [r2, #0]
 8012a0c:	4619      	mov	r1, r3
 8012a0e:	f000 f86d 	bl	8012aec <SerialCtrl_GetMinParamLength>
 8012a12:	4603      	mov	r3, r0
 8012a14:	77fb      	strb	r3, [r7, #31]
                                                  Light_OpcodeTable,
                                                  Light_OpcodeTableLength);
  }
  /* Opcode not found in Light opcode table
      Start finding for opcode in Light LC Table*/
  if (minParamLength == 0xff)
 8012a16:	7ffb      	ldrb	r3, [r7, #31]
 8012a18:	2bff      	cmp	r3, #255	; 0xff
 8012a1a:	d10a      	bne.n	8012a32 <SerialCtrl_Process+0xa6>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 8012a1c:	8b3b      	ldrh	r3, [r7, #24]
 8012a1e:	4618      	mov	r0, r3
 8012a20:	4b2b      	ldr	r3, [pc, #172]	; (8012ad0 <SerialCtrl_Process+0x144>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	4a29      	ldr	r2, [pc, #164]	; (8012acc <SerialCtrl_Process+0x140>)
 8012a26:	8812      	ldrh	r2, [r2, #0]
 8012a28:	4619      	mov	r1, r3
 8012a2a:	f000 f85f 	bl	8012aec <SerialCtrl_GetMinParamLength>
 8012a2e:	4603      	mov	r3, r0
 8012a30:	77fb      	strb	r3, [r7, #31]
                                                 LightLC_OpcodeTableLength);

  }
  /* Opcode not found in Light LC opcode table 
      Start finding for opcode in Sensor Table*/
  if (minParamLength == 0xff)
 8012a32:	7ffb      	ldrb	r3, [r7, #31]
 8012a34:	2bff      	cmp	r3, #255	; 0xff
 8012a36:	d10f      	bne.n	8012a58 <SerialCtrl_Process+0xcc>
  {
    minParamLength = SerialCtrl_GetMinParamLength(command,
 8012a38:	8b3b      	ldrh	r3, [r7, #24]
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	4b25      	ldr	r3, [pc, #148]	; (8012ad4 <SerialCtrl_Process+0x148>)
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	4a25      	ldr	r2, [pc, #148]	; (8012ad8 <SerialCtrl_Process+0x14c>)
 8012a42:	8812      	ldrh	r2, [r2, #0]
 8012a44:	4619      	mov	r1, r3
 8012a46:	f000 f851 	bl	8012aec <SerialCtrl_GetMinParamLength>
 8012a4a:	4603      	mov	r3, r0
 8012a4c:	77fb      	strb	r3, [r7, #31]
                                                  Sensor_OpcodeTable,
                                                  Sensor_OpcodeTableLength);
    
    TRACE_I(TF_SERIAL_PRINTS, "Min Parameter Length after sensor model check %d\r\n", 
 8012a4e:	7ffb      	ldrb	r3, [r7, #31]
 8012a50:	4619      	mov	r1, r3
 8012a52:	4822      	ldr	r0, [pc, #136]	; (8012adc <SerialCtrl_Process+0x150>)
 8012a54:	f016 fd90 	bl	8029578 <iprintf>
                             minParamLength);
  }
  
  if (minParamLength != 0xff) /* Opcode found in one of the models */ 
 8012a58:	7ffb      	ldrb	r3, [r7, #31]
 8012a5a:	2bff      	cmp	r3, #255	; 0xff
 8012a5c:	d024      	beq.n	8012aa8 <SerialCtrl_Process+0x11c>
  {
    minParamLength = SerialCtrl_GetData(rcvdStringBuff, 
 8012a5e:	f107 030c 	add.w	r3, r7, #12
 8012a62:	8879      	ldrh	r1, [r7, #2]
 8012a64:	220f      	movs	r2, #15
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 f86f 	bl	8012b4a <SerialCtrl_GetData>
 8012a6c:	4603      	mov	r3, r0
 8012a6e:	77fb      	strb	r3, [r7, #31]
                                        rcvdStringSize, 
                                        SERIAL_MODEL_DATA_OFFSET, 
                                        data);

    result = BLEMesh_SetRemoteData(peer,
 8012a70:	8b78      	ldrh	r0, [r7, #26]
 8012a72:	8b3c      	ldrh	r4, [r7, #24]
 8012a74:	7ffb      	ldrb	r3, [r7, #31]
 8012a76:	f107 050c 	add.w	r5, r7, #12
 8012a7a:	7fb9      	ldrb	r1, [r7, #30]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	9202      	str	r2, [sp, #8]
 8012a80:	7f7a      	ldrb	r2, [r7, #29]
 8012a82:	9201      	str	r2, [sp, #4]
 8012a84:	9300      	str	r3, [sp, #0]
 8012a86:	462b      	mov	r3, r5
 8012a88:	4622      	mov	r2, r4
 8012a8a:	f015 fd6b 	bl	8028564 <BLEMesh_SetRemoteData>
 8012a8e:	4603      	mov	r3, r0
 8012a90:	773b      	strb	r3, [r7, #28]
                                   command, 
                                   data, 
                                   minParamLength,
                                   response, 
                                   MOBLE_FALSE);   
    if(result == MOBLE_RESULT_SUCCESS)
 8012a92:	7f3b      	ldrb	r3, [r7, #28]
 8012a94:	2b00      	cmp	r3, #0
 8012a96:	d103      	bne.n	8012aa0 <SerialCtrl_Process+0x114>
    {
      TRACE_I(TF_SERIAL_PRINTS, "Command Executed Successfully\r\n");
 8012a98:	4811      	ldr	r0, [pc, #68]	; (8012ae0 <SerialCtrl_Process+0x154>)
 8012a9a:	f016 fdd3 	bl	8029644 <puts>
  }
  else
  {
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
  }
}
 8012a9e:	e006      	b.n	8012aae <SerialCtrl_Process+0x122>
      TRACE_I(TF_SERIAL_PRINTS, "Invalid Opcode Parameter\r\n");
 8012aa0:	4810      	ldr	r0, [pc, #64]	; (8012ae4 <SerialCtrl_Process+0x158>)
 8012aa2:	f016 fdcf 	bl	8029644 <puts>
}
 8012aa6:	e002      	b.n	8012aae <SerialCtrl_Process+0x122>
    TRACE_I(TF_SERIAL_PRINTS, "Unknown Opcode\r\n");
 8012aa8:	480f      	ldr	r0, [pc, #60]	; (8012ae8 <SerialCtrl_Process+0x15c>)
 8012aaa:	f016 fdcb 	bl	8029644 <puts>
}
 8012aae:	bf00      	nop
 8012ab0:	3720      	adds	r7, #32
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	0802fa1c 	.word	0x0802fa1c
 8012abc:	20004782 	.word	0x20004782
 8012ac0:	20004774 	.word	0x20004774
 8012ac4:	20004780 	.word	0x20004780
 8012ac8:	20004770 	.word	0x20004770
 8012acc:	20004784 	.word	0x20004784
 8012ad0:	20004778 	.word	0x20004778
 8012ad4:	2000477c 	.word	0x2000477c
 8012ad8:	20004786 	.word	0x20004786
 8012adc:	0802fa88 	.word	0x0802fa88
 8012ae0:	0802fa3c 	.word	0x0802fa3c
 8012ae4:	0802fa5c 	.word	0x0802fa5c
 8012ae8:	0802fabc 	.word	0x0802fabc

08012aec <SerialCtrl_GetMinParamLength>:
* @param  list: 
* @param  length:  
* @retval MOBLEUINT16
*/ 
MOBLEUINT8 SerialCtrl_GetMinParamLength(MOBLEUINT32 opcode, const MODEL_OpcodeTableParam_t list[], MOBLEUINT16 length)
{
 8012aec:	b480      	push	{r7}
 8012aee:	b087      	sub	sp, #28
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	60f8      	str	r0, [r7, #12]
 8012af4:	60b9      	str	r1, [r7, #8]
 8012af6:	4613      	mov	r3, r2
 8012af8:	80fb      	strh	r3, [r7, #6]
  for (int i = 0; i < length; i++)
 8012afa:	2300      	movs	r3, #0
 8012afc:	617b      	str	r3, [r7, #20]
 8012afe:	e019      	b.n	8012b34 <SerialCtrl_GetMinParamLength+0x48>
  {
    if (list[i].opcode == opcode)
 8012b00:	697a      	ldr	r2, [r7, #20]
 8012b02:	4613      	mov	r3, r2
 8012b04:	005b      	lsls	r3, r3, #1
 8012b06:	4413      	add	r3, r2
 8012b08:	009b      	lsls	r3, r3, #2
 8012b0a:	461a      	mov	r2, r3
 8012b0c:	68bb      	ldr	r3, [r7, #8]
 8012b0e:	4413      	add	r3, r2
 8012b10:	885b      	ldrh	r3, [r3, #2]
 8012b12:	461a      	mov	r2, r3
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	4293      	cmp	r3, r2
 8012b18:	d109      	bne.n	8012b2e <SerialCtrl_GetMinParamLength+0x42>
    {
      return list[i].min_payload_size;
 8012b1a:	697a      	ldr	r2, [r7, #20]
 8012b1c:	4613      	mov	r3, r2
 8012b1e:	005b      	lsls	r3, r3, #1
 8012b20:	4413      	add	r3, r2
 8012b22:	009b      	lsls	r3, r3, #2
 8012b24:	461a      	mov	r2, r3
 8012b26:	68bb      	ldr	r3, [r7, #8]
 8012b28:	4413      	add	r3, r2
 8012b2a:	795b      	ldrb	r3, [r3, #5]
 8012b2c:	e007      	b.n	8012b3e <SerialCtrl_GetMinParamLength+0x52>
  for (int i = 0; i < length; i++)
 8012b2e:	697b      	ldr	r3, [r7, #20]
 8012b30:	3301      	adds	r3, #1
 8012b32:	617b      	str	r3, [r7, #20]
 8012b34:	88fb      	ldrh	r3, [r7, #6]
 8012b36:	697a      	ldr	r2, [r7, #20]
 8012b38:	429a      	cmp	r2, r3
 8012b3a:	dbe1      	blt.n	8012b00 <SerialCtrl_GetMinParamLength+0x14>
    }
  }
  return 0xff;
 8012b3c:	23ff      	movs	r3, #255	; 0xff
}
 8012b3e:	4618      	mov	r0, r3
 8012b40:	371c      	adds	r7, #28
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr

08012b4a <SerialCtrl_GetData>:
* @param  data: Output array comprising of Data
* @param  dataIndex:  
* @retval MOBLEUINT8
*/
MOBLEUINT8 SerialCtrl_GetData(char *rcvdStringBuff, uint16_t rcvdStringSize, MOBLEUINT8 dataOffset, MOBLEUINT8  *data)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b08c      	sub	sp, #48	; 0x30
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	60f8      	str	r0, [r7, #12]
 8012b52:	607b      	str	r3, [r7, #4]
 8012b54:	460b      	mov	r3, r1
 8012b56:	817b      	strh	r3, [r7, #10]
 8012b58:	4613      	mov	r3, r2
 8012b5a:	727b      	strb	r3, [r7, #9]
  MOBLEUINT8 byteBuff[10] = {0};
 8012b5c:	2300      	movs	r3, #0
 8012b5e:	613b      	str	r3, [r7, #16]
 8012b60:	f107 0314 	add.w	r3, r7, #20
 8012b64:	2200      	movs	r2, #0
 8012b66:	601a      	str	r2, [r3, #0]
 8012b68:	809a      	strh	r2, [r3, #4]
  MOBLEUINT8 dataIndex = 0;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  int msb, lsb, byteCounter=0;           
 8012b70:	2300      	movs	r3, #0
 8012b72:	62bb      	str	r3, [r7, #40]	; 0x28

  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 8012b74:	7a7b      	ldrb	r3, [r7, #9]
 8012b76:	627b      	str	r3, [r7, #36]	; 0x24
 8012b78:	e058      	b.n	8012c2c <SerialCtrl_GetData+0xe2>
  {
    /* check if space or NULL found */
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 8012b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7c:	68fa      	ldr	r2, [r7, #12]
 8012b7e:	4413      	add	r3, r2
 8012b80:	781b      	ldrb	r3, [r3, #0]
 8012b82:	2b20      	cmp	r3, #32
 8012b84:	d017      	beq.n	8012bb6 <SerialCtrl_GetData+0x6c>
 8012b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b88:	68fa      	ldr	r2, [r7, #12]
 8012b8a:	4413      	add	r3, r2
 8012b8c:	781b      	ldrb	r3, [r3, #0]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d115      	bne.n	8012bbe <SerialCtrl_GetData+0x74>
    {
      /*if number of bytes is one*/
      while(byteCounter > 0)
 8012b92:	e010      	b.n	8012bb6 <SerialCtrl_GetData+0x6c>
      {
        data[dataIndex++] = byteBuff[--byteCounter];
 8012b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b96:	3b01      	subs	r3, #1
 8012b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8012b9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b9e:	1c5a      	adds	r2, r3, #1
 8012ba0:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8012ba4:	461a      	mov	r2, r3
 8012ba6:	687b      	ldr	r3, [r7, #4]
 8012ba8:	4413      	add	r3, r2
 8012baa:	f107 0110 	add.w	r1, r7, #16
 8012bae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012bb0:	440a      	add	r2, r1
 8012bb2:	7812      	ldrb	r2, [r2, #0]
 8012bb4:	701a      	strb	r2, [r3, #0]
      while(byteCounter > 0)
 8012bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	dceb      	bgt.n	8012b94 <SerialCtrl_GetData+0x4a>
    if(rcvdStringBuff[i] == ' '||rcvdStringBuff[i] == '\0' )
 8012bbc:	e033      	b.n	8012c26 <SerialCtrl_GetData+0xdc>
      }
    }
    else
    {
      /* take two consecutive ascii characters from the rcvdStringBuff and convert to hex values */  
      msb = Serial_CharToHexConvert(rcvdStringBuff[i]);        
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc0:	68fa      	ldr	r2, [r7, #12]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	781b      	ldrb	r3, [r3, #0]
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7ff fcf8 	bl	80125bc <Serial_CharToHexConvert>
 8012bcc:	4603      	mov	r3, r0
 8012bce:	623b      	str	r3, [r7, #32]
      lsb = Serial_CharToHexConvert(rcvdStringBuff[i + 1 ]);
 8012bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	68fa      	ldr	r2, [r7, #12]
 8012bd6:	4413      	add	r3, r2
 8012bd8:	781b      	ldrb	r3, [r3, #0]
 8012bda:	4618      	mov	r0, r3
 8012bdc:	f7ff fcee 	bl	80125bc <Serial_CharToHexConvert>
 8012be0:	4603      	mov	r3, r0
 8012be2:	61fb      	str	r3, [r7, #28]
      /*join two hex values to make one hex value*/
      byteBuff[byteCounter]  = msb << 4;
 8012be4:	6a3b      	ldr	r3, [r7, #32]
 8012be6:	b2db      	uxtb	r3, r3
 8012be8:	011b      	lsls	r3, r3, #4
 8012bea:	b2d9      	uxtb	r1, r3
 8012bec:	f107 0210 	add.w	r2, r7, #16
 8012bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bf2:	4413      	add	r3, r2
 8012bf4:	460a      	mov	r2, r1
 8012bf6:	701a      	strb	r2, [r3, #0]
      byteBuff[byteCounter] |= lsb;
 8012bf8:	f107 0210 	add.w	r2, r7, #16
 8012bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bfe:	4413      	add	r3, r2
 8012c00:	781b      	ldrb	r3, [r3, #0]
 8012c02:	b25a      	sxtb	r2, r3
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	b25b      	sxtb	r3, r3
 8012c08:	4313      	orrs	r3, r2
 8012c0a:	b25b      	sxtb	r3, r3
 8012c0c:	b2d9      	uxtb	r1, r3
 8012c0e:	f107 0210 	add.w	r2, r7, #16
 8012c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c14:	4413      	add	r3, r2
 8012c16:	460a      	mov	r2, r1
 8012c18:	701a      	strb	r2, [r3, #0]
      
      i++;      /*increment for loop counter as two values are used */
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	627b      	str	r3, [r7, #36]	; 0x24
      byteCounter++;   /*increment byteCounter counter*/
 8012c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c22:	3301      	adds	r3, #1
 8012c24:	62bb      	str	r3, [r7, #40]	; 0x28
  for(int i=dataOffset ; i<=(rcvdStringSize) ; i++)
 8012c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c28:	3301      	adds	r3, #1
 8012c2a:	627b      	str	r3, [r7, #36]	; 0x24
 8012c2c:	897b      	ldrh	r3, [r7, #10]
 8012c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012c30:	429a      	cmp	r2, r3
 8012c32:	dda2      	ble.n	8012b7a <SerialCtrl_GetData+0x30>
    }
  }
        
  return dataIndex;
 8012c34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3730      	adds	r7, #48	; 0x30
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}

08012c40 <SerialUt_Process>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval void
*/
void SerialUt_Process(char *rcvdStringBuff, uint16_t rcvdStringSize)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b088      	sub	sp, #32
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
 8012c48:	460b      	mov	r3, r1
 8012c4a:	807b      	strh	r3, [r7, #2]
  MOBLEUINT16 commandIndex = SerialUt_GetFunctionIndex(rcvdStringBuff+5);
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	3305      	adds	r3, #5
 8012c50:	4618      	mov	r0, r3
 8012c52:	f000 f917 	bl	8012e84 <SerialUt_GetFunctionIndex>
 8012c56:	4603      	mov	r3, r0
 8012c58:	83bb      	strh	r3, [r7, #28]
  MOBLEUINT8 testFunctionParm[6]= {'\0'} ;
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	617b      	str	r3, [r7, #20]
 8012c5e:	2300      	movs	r3, #0
 8012c60:	833b      	strh	r3, [r7, #24]
  MOBLEUINT8 asciiFunctionParameter[7] = {'\0'} ;
 8012c62:	2300      	movs	r3, #0
 8012c64:	60fb      	str	r3, [r7, #12]
 8012c66:	f107 0310 	add.w	r3, r7, #16
 8012c6a:	2100      	movs	r1, #0
 8012c6c:	460a      	mov	r2, r1
 8012c6e:	801a      	strh	r2, [r3, #0]
 8012c70:	460a      	mov	r2, r1
 8012c72:	709a      	strb	r2, [r3, #2]
#ifdef ENABLE_SENSOR_MODEL_SERVER
  MOBLEUINT16 value = 0;           
  MOBLEUINT8 sensorOffset = 0;    
#endif
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8012c74:	2300      	movs	r3, #0
 8012c76:	77fb      	strb	r3, [r7, #31]
  MOBLEBOOL unprovisioned = MOBLE_FALSE;
 8012c78:	2300      	movs	r3, #0
 8012c7a:	77bb      	strb	r3, [r7, #30]
  
  switch (commandIndex)
 8012c7c:	8bbb      	ldrh	r3, [r7, #28]
 8012c7e:	3b01      	subs	r3, #1
 8012c80:	2b15      	cmp	r3, #21
 8012c82:	f200 80c1 	bhi.w	8012e08 <SerialUt_Process+0x1c8>
 8012c86:	a201      	add	r2, pc, #4	; (adr r2, 8012c8c <SerialUt_Process+0x4c>)
 8012c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c8c:	08012ce5 	.word	0x08012ce5
 8012c90:	08012d21 	.word	0x08012d21
 8012c94:	08012d5d 	.word	0x08012d5d
 8012c98:	08012dd5 	.word	0x08012dd5
 8012c9c:	08012d73 	.word	0x08012d73
 8012ca0:	08012d5d 	.word	0x08012d5d
 8012ca4:	08012d73 	.word	0x08012d73
 8012ca8:	08012d5d 	.word	0x08012d5d
 8012cac:	08012d5d 	.word	0x08012d5d
 8012cb0:	08012d5d 	.word	0x08012d5d
 8012cb4:	08012d5d 	.word	0x08012d5d
 8012cb8:	08012d99 	.word	0x08012d99
 8012cbc:	08012d73 	.word	0x08012d73
 8012cc0:	08012d73 	.word	0x08012d73
 8012cc4:	08012d5d 	.word	0x08012d5d
 8012cc8:	08012d5d 	.word	0x08012d5d
 8012ccc:	08012d5d 	.word	0x08012d5d
 8012cd0:	08012e09 	.word	0x08012e09
 8012cd4:	08012e09 	.word	0x08012e09
 8012cd8:	08012e09 	.word	0x08012e09
 8012cdc:	08012e09 	.word	0x08012e09
 8012ce0:	08012df3 	.word	0x08012df3
  {
  case CMD_INDEX_SEND_01:
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 8012ce4:	687b      	ldr	r3, [r7, #4]
 8012ce6:	f103 000d 	add.w	r0, r3, #13
 8012cea:	f107 030c 	add.w	r3, r7, #12
 8012cee:	3302      	adds	r3, #2
 8012cf0:	f107 020c 	add.w	r2, r7, #12
 8012cf4:	495a      	ldr	r1, [pc, #360]	; (8012e60 <SerialUt_Process+0x220>)
 8012cf6:	f016 fcad 	bl	8029654 <siscanf>
    /*SerialUt_doubleHexToHex
    Function will convert the asci string into orinal hex format.
    eg- send-01 12 3456
    return 0x12,0x34,0x56       
    */
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 8012cfa:	f107 0114 	add.w	r1, r7, #20
 8012cfe:	f107 030c 	add.w	r3, r7, #12
 8012d02:	2206      	movs	r2, #6
 8012d04:	4618      	mov	r0, r3
 8012d06:	f000 f929 	bl	8012f5c <SerialUt_doubleHexToHex>
    /*BLEMesh_UpperTesterDataProcess
    this function will take action and execute some other functions
    */       
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012d0a:	8bbb      	ldrh	r3, [r7, #28]
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	f107 0214 	add.w	r2, r7, #20
 8012d12:	4611      	mov	r1, r2
 8012d14:	4618      	mov	r0, r3
 8012d16:	f015 fcd1 	bl	80286bc <BLEMesh_UpperTesterDataProcess>
 8012d1a:	4603      	mov	r3, r0
 8012d1c:	77fb      	strb	r3, [r7, #31]
    break;
 8012d1e:	e076      	b.n	8012e0e <SerialUt_Process+0x1ce>
          
  case CMD_INDEX_SEND_02: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SEND_OFFSET, "%2s %4s", asciiFunctionParameter,asciiFunctionParameter+2);
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	f103 000d 	add.w	r0, r3, #13
 8012d26:	f107 030c 	add.w	r3, r7, #12
 8012d2a:	3302      	adds	r3, #2
 8012d2c:	f107 020c 	add.w	r2, r7, #12
 8012d30:	494b      	ldr	r1, [pc, #300]	; (8012e60 <SerialUt_Process+0x220>)
 8012d32:	f016 fc8f 	bl	8029654 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,6);
 8012d36:	f107 0114 	add.w	r1, r7, #20
 8012d3a:	f107 030c 	add.w	r3, r7, #12
 8012d3e:	2206      	movs	r2, #6
 8012d40:	4618      	mov	r0, r3
 8012d42:	f000 f90b 	bl	8012f5c <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);       
 8012d46:	8bbb      	ldrh	r3, [r7, #28]
 8012d48:	b2db      	uxtb	r3, r3
 8012d4a:	f107 0214 	add.w	r2, r7, #20
 8012d4e:	4611      	mov	r1, r2
 8012d50:	4618      	mov	r0, r3
 8012d52:	f015 fcb3 	bl	80286bc <BLEMesh_UpperTesterDataProcess>
 8012d56:	4603      	mov	r3, r0
 8012d58:	77fb      	strb	r3, [r7, #31]
    break;
 8012d5a:	e058      	b.n	8012e0e <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_13:  
     /* Order IUT to update the NetKeyIndex */
  case CMD_INDEX_SET_14:
    /* Order IUT to clear Publication & Subscription List*/
  case CMD_INDEX_SET_15:
    result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8012d5c:	8bbb      	ldrh	r3, [r7, #28]
 8012d5e:	b2db      	uxtb	r3, r3
 8012d60:	f107 0214 	add.w	r2, r7, #20
 8012d64:	4611      	mov	r1, r2
 8012d66:	4618      	mov	r0, r3
 8012d68:	f015 fca8 	bl	80286bc <BLEMesh_UpperTesterDataProcess>
 8012d6c:	4603      	mov	r3, r0
 8012d6e:	77fb      	strb	r3, [r7, #31]
    break;
 8012d70:	e04d      	b.n	8012e0e <SerialUt_Process+0x1ce>
  case CMD_INDEX_SET_05:     
    /* Sets all node identity for all Networks */
  case CMD_INDEX_SET_11:     
    /* Updates the features supported by the library */
  case CMD_INDEX_SET_12:  
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%1c", testFunctionParm);
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	330c      	adds	r3, #12
 8012d76:	f107 0214 	add.w	r2, r7, #20
 8012d7a:	493a      	ldr	r1, [pc, #232]	; (8012e64 <SerialUt_Process+0x224>)
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f016 fc69 	bl	8029654 <siscanf>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012d82:	8bbb      	ldrh	r3, [r7, #28]
 8012d84:	b2db      	uxtb	r3, r3
 8012d86:	f107 0214 	add.w	r2, r7, #20
 8012d8a:	4611      	mov	r1, r2
 8012d8c:	4618      	mov	r0, r3
 8012d8e:	f015 fc95 	bl	80286bc <BLEMesh_UpperTesterDataProcess>
 8012d92:	4603      	mov	r3, r0
 8012d94:	77fb      	strb	r3, [r7, #31]
    break;
 8012d96:	e03a      	b.n	8012e0e <SerialUt_Process+0x1ce>
    /* Sets system faults for Health Model*/
  case CMD_INDEX_SET_10: 
    sscanf(rcvdStringBuff + CMD_CTRL_OFFSET + CMD_SET_OFFSET, "%2s %1c", asciiFunctionParameter, testFunctionParm+1);
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	f103 000c 	add.w	r0, r3, #12
 8012d9e:	f107 0314 	add.w	r3, r7, #20
 8012da2:	3301      	adds	r3, #1
 8012da4:	f107 020c 	add.w	r2, r7, #12
 8012da8:	492f      	ldr	r1, [pc, #188]	; (8012e68 <SerialUt_Process+0x228>)
 8012daa:	f016 fc53 	bl	8029654 <siscanf>
    SerialUt_doubleHexToHex(asciiFunctionParameter,testFunctionParm,2);
 8012dae:	f107 0114 	add.w	r1, r7, #20
 8012db2:	f107 030c 	add.w	r3, r7, #12
 8012db6:	2202      	movs	r2, #2
 8012db8:	4618      	mov	r0, r3
 8012dba:	f000 f8cf 	bl	8012f5c <SerialUt_doubleHexToHex>
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012dbe:	8bbb      	ldrh	r3, [r7, #28]
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	f107 0214 	add.w	r2, r7, #20
 8012dc6:	4611      	mov	r1, r2
 8012dc8:	4618      	mov	r0, r3
 8012dca:	f015 fc77 	bl	80286bc <BLEMesh_UpperTesterDataProcess>
 8012dce:	4603      	mov	r3, r0
 8012dd0:	77fb      	strb	r3, [r7, #31]
    break;
 8012dd2:	e01c      	b.n	8012e0e <SerialUt_Process+0x1ce>
    break;
#endif
  /* Unprovisions the Node */
  case CMD_INDEX_SET_02:
    {
      unprovisioned = BLEMesh_IsUnprovisioned();
 8012dd4:	f00c f8d0 	bl	801ef78 <BLEMesh_IsUnprovisioned>
 8012dd8:	4603      	mov	r3, r0
 8012dda:	77bb      	strb	r3, [r7, #30]
      result = BLEMesh_UpperTesterDataProcess(commandIndex, testFunctionParm);
 8012ddc:	8bbb      	ldrh	r3, [r7, #28]
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	f107 0214 	add.w	r2, r7, #20
 8012de4:	4611      	mov	r1, r2
 8012de6:	4618      	mov	r0, r3
 8012de8:	f015 fc68 	bl	80286bc <BLEMesh_UpperTesterDataProcess>
 8012dec:	4603      	mov	r3, r0
 8012dee:	77fb      	strb	r3, [r7, #31]
    }
    break;
 8012df0:	e00d      	b.n	8012e0e <SerialUt_Process+0x1ce>
    
    /* Print Security Credentials */
  case CMD_INDEX_PRINT_01:  
    result = BLEMesh_UpperTesterDataProcess( commandIndex,  testFunctionParm);
 8012df2:	8bbb      	ldrh	r3, [r7, #28]
 8012df4:	b2db      	uxtb	r3, r3
 8012df6:	f107 0214 	add.w	r2, r7, #20
 8012dfa:	4611      	mov	r1, r2
 8012dfc:	4618      	mov	r0, r3
 8012dfe:	f015 fc5d 	bl	80286bc <BLEMesh_UpperTesterDataProcess>
 8012e02:	4603      	mov	r3, r0
 8012e04:	77fb      	strb	r3, [r7, #31]
    break;
 8012e06:	e002      	b.n	8012e0e <SerialUt_Process+0x1ce>
      
  default:
    printf("Invalid Command\r\n");
 8012e08:	4818      	ldr	r0, [pc, #96]	; (8012e6c <SerialUt_Process+0x22c>)
 8012e0a:	f016 fc1b 	bl	8029644 <puts>
  }
  if (result == MOBLE_RESULT_SUCCESS)
 8012e0e:	7ffb      	ldrb	r3, [r7, #31]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d10f      	bne.n	8012e34 <SerialUt_Process+0x1f4>
  {
    BLEMesh_PrintStringCb("Test command executed successfully\r\n");
 8012e14:	4816      	ldr	r0, [pc, #88]	; (8012e70 <SerialUt_Process+0x230>)
 8012e16:	f7ff fc23 	bl	8012660 <BLEMesh_PrintStringCb>
    if(commandIndex == CMD_INDEX_SET_02)
 8012e1a:	8bbb      	ldrh	r3, [r7, #28]
 8012e1c:	2b04      	cmp	r3, #4
 8012e1e:	d11a      	bne.n	8012e56 <SerialUt_Process+0x216>
    {
      if(!unprovisioned)
 8012e20:	7fbb      	ldrb	r3, [r7, #30]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d102      	bne.n	8012e2c <SerialUt_Process+0x1ec>
      {
        Appli_Unprovision();
 8012e26:	f7f3 fa37 	bl	8006298 <Appli_Unprovision>
  }
  else
  {
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
  }
}
 8012e2a:	e014      	b.n	8012e56 <SerialUt_Process+0x216>
        BLEMesh_PrintStringCb("Device is already unprovisioned !\r\n");
 8012e2c:	4811      	ldr	r0, [pc, #68]	; (8012e74 <SerialUt_Process+0x234>)
 8012e2e:	f7ff fc17 	bl	8012660 <BLEMesh_PrintStringCb>
}
 8012e32:	e010      	b.n	8012e56 <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_OUTOFMEMORY)
 8012e34:	7ffb      	ldrb	r3, [r7, #31]
 8012e36:	2b04      	cmp	r3, #4
 8012e38:	d103      	bne.n	8012e42 <SerialUt_Process+0x202>
    BLEMesh_PrintStringCb("Test command Failed. Out of memory\r\n");  
 8012e3a:	480f      	ldr	r0, [pc, #60]	; (8012e78 <SerialUt_Process+0x238>)
 8012e3c:	f7ff fc10 	bl	8012660 <BLEMesh_PrintStringCb>
}
 8012e40:	e009      	b.n	8012e56 <SerialUt_Process+0x216>
  else if(result == MOBLE_RESULT_INVALIDARG)
 8012e42:	7ffb      	ldrb	r3, [r7, #31]
 8012e44:	2b03      	cmp	r3, #3
 8012e46:	d103      	bne.n	8012e50 <SerialUt_Process+0x210>
    BLEMesh_PrintStringCb("Test command Failed. Invalid Argument\r\n");  
 8012e48:	480c      	ldr	r0, [pc, #48]	; (8012e7c <SerialUt_Process+0x23c>)
 8012e4a:	f7ff fc09 	bl	8012660 <BLEMesh_PrintStringCb>
}
 8012e4e:	e002      	b.n	8012e56 <SerialUt_Process+0x216>
    BLEMesh_PrintStringCb("Test command Failed.\r\n");   
 8012e50:	480b      	ldr	r0, [pc, #44]	; (8012e80 <SerialUt_Process+0x240>)
 8012e52:	f7ff fc05 	bl	8012660 <BLEMesh_PrintStringCb>
}
 8012e56:	bf00      	nop
 8012e58:	3720      	adds	r7, #32
 8012e5a:	46bd      	mov	sp, r7
 8012e5c:	bd80      	pop	{r7, pc}
 8012e5e:	bf00      	nop
 8012e60:	0802facc 	.word	0x0802facc
 8012e64:	0802fad4 	.word	0x0802fad4
 8012e68:	0802fad8 	.word	0x0802fad8
 8012e6c:	0802fa28 	.word	0x0802fa28
 8012e70:	0802fae0 	.word	0x0802fae0
 8012e74:	0802fb08 	.word	0x0802fb08
 8012e78:	0802fb2c 	.word	0x0802fb2c
 8012e7c:	0802fb54 	.word	0x0802fb54
 8012e80:	0802fb7c 	.word	0x0802fb7c

08012e84 <SerialUt_GetFunctionIndex>:
* @param  rcvdStringBuff: Pointer to the received ascii character array from the user
* @param  rcvdStringSize: Size of the received array
* @retval MOBLEUINT16
*/
static MOBLEUINT16 SerialUt_GetFunctionIndex(char *text)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  MOBLEINT16 index = 0;
 8012e8c:	2300      	movs	r3, #0
 8012e8e:	81fb      	strh	r3, [r7, #14]

  if (!strncmp(text, "SEND-",5))
 8012e90:	2205      	movs	r2, #5
 8012e92:	492c      	ldr	r1, [pc, #176]	; (8012f44 <SerialUt_GetFunctionIndex+0xc0>)
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f016 fd15 	bl	80298c4 <strncmp>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	2b00      	cmp	r3, #0
 8012e9e:	d110      	bne.n	8012ec2 <SerialUt_GetFunctionIndex+0x3e>
{
    /* sscanf is to extract the integeer value from the string */        
    sscanf(text, "SEND-%hd", &index);
 8012ea0:	f107 030e 	add.w	r3, r7, #14
 8012ea4:	461a      	mov	r2, r3
 8012ea6:	4928      	ldr	r1, [pc, #160]	; (8012f48 <SerialUt_GetFunctionIndex+0xc4>)
 8012ea8:	6878      	ldr	r0, [r7, #4]
 8012eaa:	f016 fbd3 	bl	8029654 <siscanf>
    index = (index<=CMD_SEND_COUNT) ? index : 0;
 8012eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012eb2:	2b02      	cmp	r3, #2
 8012eb4:	dc02      	bgt.n	8012ebc <SerialUt_GetFunctionIndex+0x38>
 8012eb6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012eba:	e000      	b.n	8012ebe <SerialUt_GetFunctionIndex+0x3a>
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	81fb      	strh	r3, [r7, #14]
 8012ec0:	e038      	b.n	8012f34 <SerialUt_GetFunctionIndex+0xb0>

}
  else if (!strncmp(text, "SET-",4))
 8012ec2:	2204      	movs	r2, #4
 8012ec4:	4921      	ldr	r1, [pc, #132]	; (8012f4c <SerialUt_GetFunctionIndex+0xc8>)
 8012ec6:	6878      	ldr	r0, [r7, #4]
 8012ec8:	f016 fcfc 	bl	80298c4 <strncmp>
 8012ecc:	4603      	mov	r3, r0
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d114      	bne.n	8012efc <SerialUt_GetFunctionIndex+0x78>
{
    sscanf(text, "SET-%hd", &index);
 8012ed2:	f107 030e 	add.w	r3, r7, #14
 8012ed6:	461a      	mov	r2, r3
 8012ed8:	491d      	ldr	r1, [pc, #116]	; (8012f50 <SerialUt_GetFunctionIndex+0xcc>)
 8012eda:	6878      	ldr	r0, [r7, #4]
 8012edc:	f016 fbba 	bl	8029654 <siscanf>
    index = (index<=CMD_SET_COUNT)? index + CMD_SEND_COUNT : 0;
 8012ee0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012ee4:	2b13      	cmp	r3, #19
 8012ee6:	dc06      	bgt.n	8012ef6 <SerialUt_GetFunctionIndex+0x72>
 8012ee8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012eec:	b29b      	uxth	r3, r3
 8012eee:	3302      	adds	r3, #2
 8012ef0:	b29b      	uxth	r3, r3
 8012ef2:	b21b      	sxth	r3, r3
 8012ef4:	e000      	b.n	8012ef8 <SerialUt_GetFunctionIndex+0x74>
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	81fb      	strh	r3, [r7, #14]
 8012efa:	e01b      	b.n	8012f34 <SerialUt_GetFunctionIndex+0xb0>

    }
  else if (!strncmp(text, "PRINT-",6))
 8012efc:	2206      	movs	r2, #6
 8012efe:	4915      	ldr	r1, [pc, #84]	; (8012f54 <SerialUt_GetFunctionIndex+0xd0>)
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f016 fcdf 	bl	80298c4 <strncmp>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d113      	bne.n	8012f34 <SerialUt_GetFunctionIndex+0xb0>
    {
    sscanf(text, "PRINT-%hd", &index);
 8012f0c:	f107 030e 	add.w	r3, r7, #14
 8012f10:	461a      	mov	r2, r3
 8012f12:	4911      	ldr	r1, [pc, #68]	; (8012f58 <SerialUt_GetFunctionIndex+0xd4>)
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f016 fb9d 	bl	8029654 <siscanf>
    index = (index<=CMD_PRINT_COUNT)?
 8012f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f1e:	2b01      	cmp	r3, #1
 8012f20:	dc06      	bgt.n	8012f30 <SerialUt_GetFunctionIndex+0xac>
      index + CMD_SET_COUNT + CMD_SEND_COUNT : 0;
 8012f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f26:	b29b      	uxth	r3, r3
 8012f28:	3315      	adds	r3, #21
 8012f2a:	b29b      	uxth	r3, r3
    index = (index<=CMD_PRINT_COUNT)?
 8012f2c:	b21b      	sxth	r3, r3
 8012f2e:	e000      	b.n	8012f32 <SerialUt_GetFunctionIndex+0xae>
 8012f30:	2300      	movs	r3, #0
 8012f32:	81fb      	strh	r3, [r7, #14]
    }
        return index;
 8012f34:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f38:	b29b      	uxth	r3, r3
    }
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
 8012f42:	bf00      	nop
 8012f44:	0802fb94 	.word	0x0802fb94
 8012f48:	0802fb9c 	.word	0x0802fb9c
 8012f4c:	0802fba8 	.word	0x0802fba8
 8012f50:	0802fbb0 	.word	0x0802fbb0
 8012f54:	0802fbb8 	.word	0x0802fbb8
 8012f58:	0802fbc0 	.word	0x0802fbc0

08012f5c <SerialUt_doubleHexToHex>:
* @param  outputArray: Pointer to output hex array 
* @param  length: length of the input hex array
* @retval void
*/
static void SerialUt_doubleHexToHex(MOBLEUINT8* hexArray,MOBLEUINT8* outputArray, MOBLEUINT8 length)
{
 8012f5c:	b580      	push	{r7, lr}
 8012f5e:	b086      	sub	sp, #24
 8012f60:	af00      	add	r7, sp, #0
 8012f62:	60f8      	str	r0, [r7, #12]
 8012f64:	60b9      	str	r1, [r7, #8]
 8012f66:	4613      	mov	r3, r2
 8012f68:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 counter =0,position = 0;
 8012f6a:	2300      	movs	r3, #0
 8012f6c:	75fb      	strb	r3, [r7, #23]
 8012f6e:	2300      	movs	r3, #0
 8012f70:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 msb,lsb;;
  while (counter <length)
 8012f72:	e032      	b.n	8012fda <SerialUt_doubleHexToHex+0x7e>
    {
    msb = Serial_CharToHexConvert(hexArray[counter]);
 8012f74:	7dfb      	ldrb	r3, [r7, #23]
 8012f76:	68fa      	ldr	r2, [r7, #12]
 8012f78:	4413      	add	r3, r2
 8012f7a:	781b      	ldrb	r3, [r3, #0]
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	f7ff fb1d 	bl	80125bc <Serial_CharToHexConvert>
 8012f82:	4603      	mov	r3, r0
 8012f84:	757b      	strb	r3, [r7, #21]
    lsb = Serial_CharToHexConvert(hexArray[counter + 1 ]);
 8012f86:	7dfb      	ldrb	r3, [r7, #23]
 8012f88:	3301      	adds	r3, #1
 8012f8a:	68fa      	ldr	r2, [r7, #12]
 8012f8c:	4413      	add	r3, r2
 8012f8e:	781b      	ldrb	r3, [r3, #0]
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7ff fb13 	bl	80125bc <Serial_CharToHexConvert>
 8012f96:	4603      	mov	r3, r0
 8012f98:	753b      	strb	r3, [r7, #20]
    outputArray[position] = msb<<4;
 8012f9a:	7dbb      	ldrb	r3, [r7, #22]
 8012f9c:	68ba      	ldr	r2, [r7, #8]
 8012f9e:	4413      	add	r3, r2
 8012fa0:	7d7a      	ldrb	r2, [r7, #21]
 8012fa2:	0112      	lsls	r2, r2, #4
 8012fa4:	b2d2      	uxtb	r2, r2
 8012fa6:	701a      	strb	r2, [r3, #0]
    outputArray[position] |= lsb;
 8012fa8:	7dbb      	ldrb	r3, [r7, #22]
 8012faa:	68ba      	ldr	r2, [r7, #8]
 8012fac:	4413      	add	r3, r2
 8012fae:	7819      	ldrb	r1, [r3, #0]
 8012fb0:	7dbb      	ldrb	r3, [r7, #22]
 8012fb2:	68ba      	ldr	r2, [r7, #8]
 8012fb4:	4413      	add	r3, r2
 8012fb6:	7d3a      	ldrb	r2, [r7, #20]
 8012fb8:	430a      	orrs	r2, r1
 8012fba:	b2d2      	uxtb	r2, r2
 8012fbc:	701a      	strb	r2, [r3, #0]
    printf("data scanned is  %02hx \n\r",outputArray[position]);
 8012fbe:	7dbb      	ldrb	r3, [r7, #22]
 8012fc0:	68ba      	ldr	r2, [r7, #8]
 8012fc2:	4413      	add	r3, r2
 8012fc4:	781b      	ldrb	r3, [r3, #0]
 8012fc6:	4619      	mov	r1, r3
 8012fc8:	4808      	ldr	r0, [pc, #32]	; (8012fec <SerialUt_doubleHexToHex+0x90>)
 8012fca:	f016 fad5 	bl	8029578 <iprintf>
    counter+=2;
 8012fce:	7dfb      	ldrb	r3, [r7, #23]
 8012fd0:	3302      	adds	r3, #2
 8012fd2:	75fb      	strb	r3, [r7, #23]
    position++;
 8012fd4:	7dbb      	ldrb	r3, [r7, #22]
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	75bb      	strb	r3, [r7, #22]
  while (counter <length)
 8012fda:	7dfa      	ldrb	r2, [r7, #23]
 8012fdc:	79fb      	ldrb	r3, [r7, #7]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d3c8      	bcc.n	8012f74 <SerialUt_doubleHexToHex+0x18>
    }
}
 8012fe2:	bf00      	nop
 8012fe4:	bf00      	nop
 8012fe6:	3718      	adds	r7, #24
 8012fe8:	46bd      	mov	sp, r7
 8012fea:	bd80      	pop	{r7, pc}
 8012fec:	0802fbcc 	.word	0x0802fbcc

08012ff0 <AppliCheck_EnabledModelsList>:
* @brief AppliCheck_EnabledModelsList: This function checks whether the Enabled  
*                             Models in the defined range or exceeding the limit
* retval MOBLE_RESULT
*/
MOBLE_RESULT AppliCheck_EnabledModelsList(void)
{ 
 8012ff0:	b580      	push	{r7, lr}
 8012ff2:	b082      	sub	sp, #8
 8012ff4:	af00      	add	r7, sp, #0
   MOBLE_RESULT result = MOBLE_RESULT_FAIL;
 8012ff6:	2302      	movs	r3, #2
 8012ff8:	71fb      	strb	r3, [r7, #7]
/* Initialization of the  SIG Models list */
   result = ApplicationInitSigModelList();
 8012ffa:	f000 f837 	bl	801306c <ApplicationInitSigModelList>
 8012ffe:	4603      	mov	r3, r0
 8013000:	71fb      	strb	r3, [r7, #7]
  {
    if(result == MOBLE_RESULT_FALSE)
 8013002:	79fb      	ldrb	r3, [r7, #7]
 8013004:	2b01      	cmp	r3, #1
 8013006:	d106      	bne.n	8013016 <AppliCheck_EnabledModelsList+0x26>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 8013008:	4815      	ldr	r0, [pc, #84]	; (8013060 <AppliCheck_EnabledModelsList+0x70>)
 801300a:	f016 fab5 	bl	8029578 <iprintf>
      result = MOBLE_RESULT_FAIL;
 801300e:	2302      	movs	r3, #2
 8013010:	71fb      	strb	r3, [r7, #7]
          return result;
 8013012:	79fb      	ldrb	r3, [r7, #7]
 8013014:	e020      	b.n	8013058 <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 8013016:	79fb      	ldrb	r3, [r7, #7]
 8013018:	2b02      	cmp	r3, #2
 801301a:	d105      	bne.n	8013028 <AppliCheck_EnabledModelsList+0x38>
  {
    TRACE_I(TF_INIT,"The number of Models enabled exceed the limit of %d !\r\n",
 801301c:	2106      	movs	r1, #6
 801301e:	4811      	ldr	r0, [pc, #68]	; (8013064 <AppliCheck_EnabledModelsList+0x74>)
 8013020:	f016 faaa 	bl	8029578 <iprintf>
              USER_SIG_MODELS_MAX_COUNT);
          return result;
 8013024:	79fb      	ldrb	r3, [r7, #7]
 8013026:	e017      	b.n	8013058 <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
    /* Initialization of the  VENDOR Models list, if any */
  result = ApplicationInitVendorModelList();
 8013028:	f000 f968 	bl	80132fc <ApplicationInitVendorModelList>
 801302c:	4603      	mov	r3, r0
 801302e:	71fb      	strb	r3, [r7, #7]
  {
    
    if(result == MOBLE_RESULT_FALSE)
 8013030:	79fb      	ldrb	r3, [r7, #7]
 8013032:	2b01      	cmp	r3, #1
 8013034:	d106      	bne.n	8013044 <AppliCheck_EnabledModelsList+0x54>
    {
      TRACE_I(TF_INIT,"The number of Models enabled in Application exceed the Library limit");
 8013036:	480a      	ldr	r0, [pc, #40]	; (8013060 <AppliCheck_EnabledModelsList+0x70>)
 8013038:	f016 fa9e 	bl	8029578 <iprintf>
      result = MOBLE_RESULT_FAIL;
 801303c:	2302      	movs	r3, #2
 801303e:	71fb      	strb	r3, [r7, #7]
          return result;
 8013040:	79fb      	ldrb	r3, [r7, #7]
 8013042:	e009      	b.n	8013058 <AppliCheck_EnabledModelsList+0x68>
    }

    else if(result == MOBLE_RESULT_FAIL)
 8013044:	79fb      	ldrb	r3, [r7, #7]
 8013046:	2b02      	cmp	r3, #2
 8013048:	d105      	bne.n	8013056 <AppliCheck_EnabledModelsList+0x66>
  {
    TRACE_I(TF_INIT,"The number of Vendor Models enabled exceed the limit of %d !\r\n",
 801304a:	2101      	movs	r1, #1
 801304c:	4806      	ldr	r0, [pc, #24]	; (8013068 <AppliCheck_EnabledModelsList+0x78>)
 801304e:	f016 fa93 	bl	8029578 <iprintf>
            USER_VENDOR_MODELS_MAX_COUNT); 
        return result;
 8013052:	79fb      	ldrb	r3, [r7, #7]
 8013054:	e000      	b.n	8013058 <AppliCheck_EnabledModelsList+0x68>
    }
    
  }
  
  return result;
 8013056:	79fb      	ldrb	r3, [r7, #7]
}
 8013058:	4618      	mov	r0, r3
 801305a:	3708      	adds	r7, #8
 801305c:	46bd      	mov	sp, r7
 801305e:	bd80      	pop	{r7, pc}
 8013060:	0802fc30 	.word	0x0802fc30
 8013064:	0802fc78 	.word	0x0802fc78
 8013068:	0802fcb0 	.word	0x0802fcb0

0801306c <ApplicationInitSigModelList>:
* @brief ApplicationInitSigModelList: This function initialize the list of the 
*                                     SIG Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitSigModelList(void)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b082      	sub	sp, #8
 8013070:	af00      	add	r7, sp, #0
  /*If Models enabled by user are exceeding the library capability*/
  if(APPLICATION_SIG_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 8013072:	f00a f84d 	bl	801d110 <BLEMesh_GetTotalModelsCount>
 8013076:	4603      	mov	r3, r0
 8013078:	2b06      	cmp	r3, #6
 801307a:	d80a      	bhi.n	8013092 <ApplicationInitSigModelList+0x26>
                                            APPLICATION_VENDOR_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"APPLICATION_SIG_MODELS_MAX_COUNT %d > BLEMesh_GetTotalModelsCount() %d - APPLICATION_VENDOR_MODELS_MAX_COUNT %d",
 801307c:	f00a f848 	bl	801d110 <BLEMesh_GetTotalModelsCount>
 8013080:	4603      	mov	r3, r0
 8013082:	461a      	mov	r2, r3
 8013084:	2302      	movs	r3, #2
 8013086:	2107      	movs	r1, #7
 8013088:	489a      	ldr	r0, [pc, #616]	; (80132f4 <ApplicationInitSigModelList+0x288>)
 801308a:	f016 fa75 	bl	8029578 <iprintf>
            APPLICATION_SIG_MODELS_MAX_COUNT,
            BLEMesh_GetTotalModelsCount(),
            APPLICATION_VENDOR_MODELS_MAX_COUNT);
    return(MOBLE_RESULT_FALSE);
 801308e:	2301      	movs	r3, #1
 8013090:	e12b      	b.n	80132ea <ApplicationInitSigModelList+0x27e>
  }
  
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8013092:	2300      	movs	r3, #0
 8013094:	71fb      	strb	r3, [r7, #7]
 8013096:	e123      	b.n	80132e0 <ApplicationInitSigModelList+0x274>
  {
    uint8_t modelIndex = 0;
 8013098:	2300      	movs	r3, #0
 801309a:	71bb      	strb	r3, [r7, #6]
    Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 801309c:	79fa      	ldrb	r2, [r7, #7]
 801309e:	79b9      	ldrb	r1, [r7, #6]
 80130a0:	4895      	ldr	r0, [pc, #596]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 80130a2:	4613      	mov	r3, r2
 80130a4:	00db      	lsls	r3, r3, #3
 80130a6:	1a9b      	subs	r3, r3, r2
 80130a8:	440b      	add	r3, r1
 80130aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130ae:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 80130b2:	79bb      	ldrb	r3, [r7, #6]
 80130b4:	2b06      	cmp	r3, #6
 80130b6:	d901      	bls.n	80130bc <ApplicationInitSigModelList+0x50>
    {
      return(MOBLE_RESULT_FAIL);
 80130b8:	2302      	movs	r3, #2
 80130ba:	e116      	b.n	80132ea <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_ONOFF & (1 << index)) == (1 << index)))
 80130bc:	79fb      	ldrb	r3, [r7, #7]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	bf0c      	ite	eq
 80130c2:	2301      	moveq	r3, #1
 80130c4:	2300      	movne	r3, #0
 80130c6:	b2db      	uxtb	r3, r3
 80130c8:	4619      	mov	r1, r3
 80130ca:	79fb      	ldrb	r3, [r7, #7]
 80130cc:	2201      	movs	r2, #1
 80130ce:	fa02 f303 	lsl.w	r3, r2, r3
 80130d2:	4299      	cmp	r1, r3
 80130d4:	d11b      	bne.n	801310e <ApplicationInitSigModelList+0xa2>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_ONOFF_SERVER_MODEL_ID;
 80130d6:	79fa      	ldrb	r2, [r7, #7]
 80130d8:	79bb      	ldrb	r3, [r7, #6]
 80130da:	1c59      	adds	r1, r3, #1
 80130dc:	71b9      	strb	r1, [r7, #6]
 80130de:	4618      	mov	r0, r3
 80130e0:	4985      	ldr	r1, [pc, #532]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 80130e2:	4613      	mov	r3, r2
 80130e4:	00db      	lsls	r3, r3, #3
 80130e6:	1a9b      	subs	r3, r3, r2
 80130e8:	4403      	add	r3, r0
 80130ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80130ee:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 80130f2:	79bb      	ldrb	r3, [r7, #6]
 80130f4:	2b06      	cmp	r3, #6
 80130f6:	d80a      	bhi.n	801310e <ApplicationInitSigModelList+0xa2>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80130f8:	79fa      	ldrb	r2, [r7, #7]
 80130fa:	79b9      	ldrb	r1, [r7, #6]
 80130fc:	487e      	ldr	r0, [pc, #504]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 80130fe:	4613      	mov	r3, r2
 8013100:	00db      	lsls	r3, r3, #3
 8013102:	1a9b      	subs	r3, r3, r2
 8013104:	440b      	add	r3, r1
 8013106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801310a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_LEVEL
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 801310e:	79bb      	ldrb	r3, [r7, #6]
 8013110:	2b06      	cmp	r3, #6
 8013112:	d901      	bls.n	8013118 <ApplicationInitSigModelList+0xac>
    {
      return(MOBLE_RESULT_FAIL);
 8013114:	2302      	movs	r3, #2
 8013116:	e0e8      	b.n	80132ea <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_LEVEL & (1 << index)) == (1 << index)))
 8013118:	79fb      	ldrb	r3, [r7, #7]
 801311a:	2b00      	cmp	r3, #0
 801311c:	bf0c      	ite	eq
 801311e:	2301      	moveq	r3, #1
 8013120:	2300      	movne	r3, #0
 8013122:	b2db      	uxtb	r3, r3
 8013124:	4619      	mov	r1, r3
 8013126:	79fb      	ldrb	r3, [r7, #7]
 8013128:	2201      	movs	r2, #1
 801312a:	fa02 f303 	lsl.w	r3, r2, r3
 801312e:	4299      	cmp	r1, r3
 8013130:	d11b      	bne.n	801316a <ApplicationInitSigModelList+0xfe>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_LEVEL_SERVER_MODEL_ID;
 8013132:	79fa      	ldrb	r2, [r7, #7]
 8013134:	79bb      	ldrb	r3, [r7, #6]
 8013136:	1c59      	adds	r1, r3, #1
 8013138:	71b9      	strb	r1, [r7, #6]
 801313a:	4618      	mov	r0, r3
 801313c:	496e      	ldr	r1, [pc, #440]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 801313e:	4613      	mov	r3, r2
 8013140:	00db      	lsls	r3, r3, #3
 8013142:	1a9b      	subs	r3, r3, r2
 8013144:	4403      	add	r3, r0
 8013146:	f241 0202 	movw	r2, #4098	; 0x1002
 801314a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 801314e:	79bb      	ldrb	r3, [r7, #6]
 8013150:	2b06      	cmp	r3, #6
 8013152:	d80a      	bhi.n	801316a <ApplicationInitSigModelList+0xfe>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013154:	79fa      	ldrb	r2, [r7, #7]
 8013156:	79b9      	ldrb	r1, [r7, #6]
 8013158:	4867      	ldr	r0, [pc, #412]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 801315a:	4613      	mov	r3, r2
 801315c:	00db      	lsls	r3, r3, #3
 801315e:	1a9b      	subs	r3, r3, r2
 8013160:	440b      	add	r3, r1
 8013162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013166:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    }
    
#endif
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF
    
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 801316a:	79bb      	ldrb	r3, [r7, #6]
 801316c:	2b06      	cmp	r3, #6
 801316e:	d901      	bls.n	8013174 <ApplicationInitSigModelList+0x108>
    {
      return(MOBLE_RESULT_FAIL);
 8013170:	2302      	movs	r3, #2
 8013172:	e0ba      	b.n	80132ea <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF & (1 << index)) == (1 << index)))
 8013174:	79fb      	ldrb	r3, [r7, #7]
 8013176:	2b00      	cmp	r3, #0
 8013178:	bf0c      	ite	eq
 801317a:	2301      	moveq	r3, #1
 801317c:	2300      	movne	r3, #0
 801317e:	b2db      	uxtb	r3, r3
 8013180:	4619      	mov	r1, r3
 8013182:	79fb      	ldrb	r3, [r7, #7]
 8013184:	2201      	movs	r2, #1
 8013186:	fa02 f303 	lsl.w	r3, r2, r3
 801318a:	4299      	cmp	r1, r3
 801318c:	d11b      	bne.n	80131c6 <ApplicationInitSigModelList+0x15a>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SERVER_MODEL_ID;
 801318e:	79fa      	ldrb	r2, [r7, #7]
 8013190:	79bb      	ldrb	r3, [r7, #6]
 8013192:	1c59      	adds	r1, r3, #1
 8013194:	71b9      	strb	r1, [r7, #6]
 8013196:	4618      	mov	r0, r3
 8013198:	4957      	ldr	r1, [pc, #348]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 801319a:	4613      	mov	r3, r2
 801319c:	00db      	lsls	r3, r3, #3
 801319e:	1a9b      	subs	r3, r3, r2
 80131a0:	4403      	add	r3, r0
 80131a2:	f241 0206 	movw	r2, #4102	; 0x1006
 80131a6:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 80131aa:	79bb      	ldrb	r3, [r7, #6]
 80131ac:	2b06      	cmp	r3, #6
 80131ae:	d80a      	bhi.n	80131c6 <ApplicationInitSigModelList+0x15a>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80131b0:	79fa      	ldrb	r2, [r7, #7]
 80131b2:	79b9      	ldrb	r1, [r7, #6]
 80131b4:	4850      	ldr	r0, [pc, #320]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 80131b6:	4613      	mov	r3, r2
 80131b8:	00db      	lsls	r3, r3, #3
 80131ba:	1a9b      	subs	r3, r3, r2
 80131bc:	440b      	add	r3, r1
 80131be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131c2:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 80131c6:	79bb      	ldrb	r3, [r7, #6]
 80131c8:	2b06      	cmp	r3, #6
 80131ca:	d901      	bls.n	80131d0 <ApplicationInitSigModelList+0x164>
    {
      return(MOBLE_RESULT_FAIL);
 80131cc:	2302      	movs	r3, #2
 80131ce:	e08c      	b.n	80132ea <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_GENERIC_MODEL_SERVER_POWER_ONOFF_SETUP & (1 << index)) == (1 << index)))
 80131d0:	79fb      	ldrb	r3, [r7, #7]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	bf0c      	ite	eq
 80131d6:	2301      	moveq	r3, #1
 80131d8:	2300      	movne	r3, #0
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	4619      	mov	r1, r3
 80131de:	79fb      	ldrb	r3, [r7, #7]
 80131e0:	2201      	movs	r2, #1
 80131e2:	fa02 f303 	lsl.w	r3, r2, r3
 80131e6:	4299      	cmp	r1, r3
 80131e8:	d11b      	bne.n	8013222 <ApplicationInitSigModelList+0x1b6>
    {
      Appli_SIG_Models[index][modelIndex++] = GENERIC_POWER_ONOFF_SETUP_SERVER_MODEL_ID;
 80131ea:	79fa      	ldrb	r2, [r7, #7]
 80131ec:	79bb      	ldrb	r3, [r7, #6]
 80131ee:	1c59      	adds	r1, r3, #1
 80131f0:	71b9      	strb	r1, [r7, #6]
 80131f2:	4618      	mov	r0, r3
 80131f4:	4940      	ldr	r1, [pc, #256]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 80131f6:	4613      	mov	r3, r2
 80131f8:	00db      	lsls	r3, r3, #3
 80131fa:	1a9b      	subs	r3, r3, r2
 80131fc:	4403      	add	r3, r0
 80131fe:	f241 0207 	movw	r2, #4103	; 0x1007
 8013202:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8013206:	79bb      	ldrb	r3, [r7, #6]
 8013208:	2b06      	cmp	r3, #6
 801320a:	d80a      	bhi.n	8013222 <ApplicationInitSigModelList+0x1b6>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 801320c:	79fa      	ldrb	r2, [r7, #7]
 801320e:	79b9      	ldrb	r1, [r7, #6]
 8013210:	4839      	ldr	r0, [pc, #228]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 8013212:	4613      	mov	r3, r2
 8013214:	00db      	lsls	r3, r3, #3
 8013216:	1a9b      	subs	r3, r3, r2
 8013218:	440b      	add	r3, r1
 801321a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801321e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
    /**************************************************************************/
    /** Following Section places LIGHTING MODEL Enabled SERVER IDs    *********/
    /**************************************************************************/

#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 8013222:	79bb      	ldrb	r3, [r7, #6]
 8013224:	2b06      	cmp	r3, #6
 8013226:	d901      	bls.n	801322c <ApplicationInitSigModelList+0x1c0>
    {
      return(MOBLE_RESULT_FAIL);
 8013228:	2302      	movs	r3, #2
 801322a:	e05e      	b.n	80132ea <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS & (1 << index)) == (1 << index)))
 801322c:	79fb      	ldrb	r3, [r7, #7]
 801322e:	2b00      	cmp	r3, #0
 8013230:	bf0c      	ite	eq
 8013232:	2301      	moveq	r3, #1
 8013234:	2300      	movne	r3, #0
 8013236:	b2db      	uxtb	r3, r3
 8013238:	4619      	mov	r1, r3
 801323a:	79fb      	ldrb	r3, [r7, #7]
 801323c:	2201      	movs	r2, #1
 801323e:	fa02 f303 	lsl.w	r3, r2, r3
 8013242:	4299      	cmp	r1, r3
 8013244:	d11b      	bne.n	801327e <ApplicationInitSigModelList+0x212>
    {
      Appli_SIG_Models[index][modelIndex++] = LIGHT_LIGHTNESS_SERVER_MODEL_ID;       
 8013246:	79fa      	ldrb	r2, [r7, #7]
 8013248:	79bb      	ldrb	r3, [r7, #6]
 801324a:	1c59      	adds	r1, r3, #1
 801324c:	71b9      	strb	r1, [r7, #6]
 801324e:	4618      	mov	r0, r3
 8013250:	4929      	ldr	r1, [pc, #164]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 8013252:	4613      	mov	r3, r2
 8013254:	00db      	lsls	r3, r3, #3
 8013256:	1a9b      	subs	r3, r3, r2
 8013258:	4403      	add	r3, r0
 801325a:	f44f 5298 	mov.w	r2, #4864	; 0x1300
 801325e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 8013262:	79bb      	ldrb	r3, [r7, #6]
 8013264:	2b06      	cmp	r3, #6
 8013266:	d80a      	bhi.n	801327e <ApplicationInitSigModelList+0x212>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013268:	79fa      	ldrb	r2, [r7, #7]
 801326a:	79b9      	ldrb	r1, [r7, #6]
 801326c:	4822      	ldr	r0, [pc, #136]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 801326e:	4613      	mov	r3, r2
 8013270:	00db      	lsls	r3, r3, #3
 8013272:	1a9b      	subs	r3, r3, r2
 8013274:	440b      	add	r3, r1
 8013276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801327a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
      }
    }
#endif
    
#ifdef ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP
    if(modelIndex >= APPLICATION_SIG_MODELS_MAX_COUNT)
 801327e:	79bb      	ldrb	r3, [r7, #6]
 8013280:	2b06      	cmp	r3, #6
 8013282:	d901      	bls.n	8013288 <ApplicationInitSigModelList+0x21c>
    {
      return(MOBLE_RESULT_FAIL);
 8013284:	2302      	movs	r3, #2
 8013286:	e030      	b.n	80132ea <ApplicationInitSigModelList+0x27e>
    }
    
    if(((ENABLE_LIGHT_MODEL_SERVER_LIGHTNESS_SETUP & (1 << index)) == (1 << index)))
 8013288:	79fb      	ldrb	r3, [r7, #7]
 801328a:	2b00      	cmp	r3, #0
 801328c:	bf0c      	ite	eq
 801328e:	2301      	moveq	r3, #1
 8013290:	2300      	movne	r3, #0
 8013292:	b2db      	uxtb	r3, r3
 8013294:	4619      	mov	r1, r3
 8013296:	79fb      	ldrb	r3, [r7, #7]
 8013298:	2201      	movs	r2, #1
 801329a:	fa02 f303 	lsl.w	r3, r2, r3
 801329e:	4299      	cmp	r1, r3
 80132a0:	d11b      	bne.n	80132da <ApplicationInitSigModelList+0x26e>
    {
      Appli_SIG_Models[index][modelIndex++] = LIGHT_LIGHTNESS_SETUP_SERVER_MODEL_ID;
 80132a2:	79fa      	ldrb	r2, [r7, #7]
 80132a4:	79bb      	ldrb	r3, [r7, #6]
 80132a6:	1c59      	adds	r1, r3, #1
 80132a8:	71b9      	strb	r1, [r7, #6]
 80132aa:	4618      	mov	r0, r3
 80132ac:	4912      	ldr	r1, [pc, #72]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 80132ae:	4613      	mov	r3, r2
 80132b0:	00db      	lsls	r3, r3, #3
 80132b2:	1a9b      	subs	r3, r3, r2
 80132b4:	4403      	add	r3, r0
 80132b6:	f241 3201 	movw	r2, #4865	; 0x1301
 80132ba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
      if(modelIndex < APPLICATION_SIG_MODELS_MAX_COUNT)
 80132be:	79bb      	ldrb	r3, [r7, #6]
 80132c0:	2b06      	cmp	r3, #6
 80132c2:	d80a      	bhi.n	80132da <ApplicationInitSigModelList+0x26e>
      {
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
 80132c4:	79fa      	ldrb	r2, [r7, #7]
 80132c6:	79b9      	ldrb	r1, [r7, #6]
 80132c8:	480b      	ldr	r0, [pc, #44]	; (80132f8 <ApplicationInitSigModelList+0x28c>)
 80132ca:	4613      	mov	r3, r2
 80132cc:	00db      	lsls	r3, r3, #3
 80132ce:	1a9b      	subs	r3, r3, r2
 80132d0:	440b      	add	r3, r1
 80132d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80132d6:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 80132da:	79fb      	ldrb	r3, [r7, #7]
 80132dc:	3301      	adds	r3, #1
 80132de:	71fb      	strb	r3, [r7, #7]
 80132e0:	79fb      	ldrb	r3, [r7, #7]
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	f43f aed8 	beq.w	8013098 <ApplicationInitSigModelList+0x2c>
        Appli_SIG_Models[index][modelIndex] = NO_MODEL_AVLBL;
      }
    }
#endif
  }
  return (MOBLE_RESULT_SUCCESS); 
 80132e8:	2300      	movs	r3, #0
}
 80132ea:	4618      	mov	r0, r3
 80132ec:	3708      	adds	r7, #8
 80132ee:	46bd      	mov	sp, r7
 80132f0:	bd80      	pop	{r7, pc}
 80132f2:	bf00      	nop
 80132f4:	0802fcf0 	.word	0x0802fcf0
 80132f8:	20006e5c 	.word	0x20006e5c

080132fc <ApplicationInitVendorModelList>:
* @brief ApplicationInitVendorModelList: This function initialize the list of the 
*                                     VENDOR Models.
* retval MOBLE_RESULT
*/
MOBLE_RESULT ApplicationInitVendorModelList(void)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b082      	sub	sp, #8
 8013300:	af00      	add	r7, sp, #0
#ifdef ENABLE_VENDOR_MODEL_SERVER  
  
  /*If Models enabled by user are exceeding the library capability*/
  if( APPLICATION_VENDOR_MODELS_MAX_COUNT > BLEMesh_GetTotalModelsCount() - 
 8013302:	f009 ff05 	bl	801d110 <BLEMesh_GetTotalModelsCount>
 8013306:	4603      	mov	r3, r0
 8013308:	2b06      	cmp	r3, #6
 801330a:	d804      	bhi.n	8013316 <ApplicationInitVendorModelList+0x1a>
                                            APPLICATION_SIG_MODELS_MAX_COUNT)
  {
    TRACE_I(TF_INIT,"The number of Models enabled in Application exceeding the limit of Library");
 801330c:	4823      	ldr	r0, [pc, #140]	; (801339c <ApplicationInitVendorModelList+0xa0>)
 801330e:	f016 f933 	bl	8029578 <iprintf>
    return(MOBLE_RESULT_FALSE);
 8013312:	2301      	movs	r3, #1
 8013314:	e03d      	b.n	8013392 <ApplicationInitVendorModelList+0x96>
  }
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8013316:	2300      	movs	r3, #0
 8013318:	71fb      	strb	r3, [r7, #7]
 801331a:	e036      	b.n	801338a <ApplicationInitVendorModelList+0x8e>
  {
    uint8_t modelIndex = 0;
 801331c:	2300      	movs	r3, #0
 801331e:	71bb      	strb	r3, [r7, #6]
    Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013320:	79fa      	ldrb	r2, [r7, #7]
 8013322:	79bb      	ldrb	r3, [r7, #6]
 8013324:	491e      	ldr	r1, [pc, #120]	; (80133a0 <ApplicationInitVendorModelList+0xa4>)
 8013326:	0052      	lsls	r2, r2, #1
 8013328:	4413      	add	r3, r2
 801332a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801332e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    
    if((ENABLE_VENDOR_MODEL_SERVER & (1 << index)) == (1 << index)) 
 8013332:	79fb      	ldrb	r3, [r7, #7]
 8013334:	2b00      	cmp	r3, #0
 8013336:	bf0c      	ite	eq
 8013338:	2301      	moveq	r3, #1
 801333a:	2300      	movne	r3, #0
 801333c:	b2db      	uxtb	r3, r3
 801333e:	4619      	mov	r1, r3
 8013340:	79fb      	ldrb	r3, [r7, #7]
 8013342:	2201      	movs	r2, #1
 8013344:	fa02 f303 	lsl.w	r3, r2, r3
 8013348:	4299      	cmp	r1, r3
 801334a:	d116      	bne.n	801337a <ApplicationInitVendorModelList+0x7e>
    {
      Appli_Vendor_Models[index][modelIndex++] = VENDORMODEL_STMICRO_ID1;
 801334c:	79fa      	ldrb	r2, [r7, #7]
 801334e:	79bb      	ldrb	r3, [r7, #6]
 8013350:	1c59      	adds	r1, r3, #1
 8013352:	71b9      	strb	r1, [r7, #6]
 8013354:	4618      	mov	r0, r3
 8013356:	4912      	ldr	r1, [pc, #72]	; (80133a0 <ApplicationInitVendorModelList+0xa4>)
 8013358:	0053      	lsls	r3, r2, #1
 801335a:	4403      	add	r3, r0
 801335c:	4a11      	ldr	r2, [pc, #68]	; (80133a4 <ApplicationInitVendorModelList+0xa8>)
 801335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      if(modelIndex < APPLICATION_VENDOR_MODELS_MAX_COUNT)
 8013362:	79bb      	ldrb	r3, [r7, #6]
 8013364:	2b01      	cmp	r3, #1
 8013366:	d808      	bhi.n	801337a <ApplicationInitVendorModelList+0x7e>
      {
        Appli_Vendor_Models[index][modelIndex] = NO_MODEL_AVLBL;
 8013368:	79fa      	ldrb	r2, [r7, #7]
 801336a:	79bb      	ldrb	r3, [r7, #6]
 801336c:	490c      	ldr	r1, [pc, #48]	; (80133a0 <ApplicationInitVendorModelList+0xa4>)
 801336e:	0052      	lsls	r2, r2, #1
 8013370:	4413      	add	r3, r2
 8013372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    
    if(modelIndex >= APPLICATION_VENDOR_MODELS_MAX_COUNT)
 801337a:	79bb      	ldrb	r3, [r7, #6]
 801337c:	2b01      	cmp	r3, #1
 801337e:	d901      	bls.n	8013384 <ApplicationInitVendorModelList+0x88>
    {
      return(MOBLE_RESULT_FAIL);
 8013380:	2302      	movs	r3, #2
 8013382:	e006      	b.n	8013392 <ApplicationInitVendorModelList+0x96>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
 8013384:	79fb      	ldrb	r3, [r7, #7]
 8013386:	3301      	adds	r3, #1
 8013388:	71fb      	strb	r3, [r7, #7]
 801338a:	79fb      	ldrb	r3, [r7, #7]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d0c5      	beq.n	801331c <ApplicationInitVendorModelList+0x20>
  for(uint8_t index = 0; index < APPLICATION_NUMBER_OF_ELEMENTS; index++)
  {
    Appli_Vendor_Models[index][0] = NO_MODEL_AVLBL;
  }
#endif
  return (MOBLE_RESULT_SUCCESS); 
 8013390:	2300      	movs	r3, #0
}
 8013392:	4618      	mov	r0, r3
 8013394:	3708      	adds	r7, #8
 8013396:	46bd      	mov	sp, r7
 8013398:	bd80      	pop	{r7, pc}
 801339a:	bf00      	nop
 801339c:	0802fd60 	.word	0x0802fd60
 80133a0:	20006e6c 	.word	0x20006e6c
 80133a4:	00010030 	.word	0x00010030

080133a8 <ApplicationGetSigModelList>:
* @param pModels_sig_ID: Pointer of the array to be filled with SIG Models list
* @param elementIndex: Index of the element for Model List
* retval Count of the SIG Model Servers enabled in the Application
*/
MOBLEUINT8 ApplicationGetSigModelList(MOBLEUINT16* pModels_sig_ID, MOBLEUINT8 elementIndex)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b084      	sub	sp, #16
 80133ac:	af00      	add	r7, sp, #0
 80133ae:	6078      	str	r0, [r7, #4]
 80133b0:	460b      	mov	r3, r1
 80133b2:	70fb      	strb	r3, [r7, #3]
  uint8_t modelCount = 0;
 80133b4:	2300      	movs	r3, #0
 80133b6:	73fb      	strb	r3, [r7, #15]
  
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80133b8:	e002      	b.n	80133c0 <ApplicationGetSigModelList+0x18>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 80133ba:	7bfb      	ldrb	r3, [r7, #15]
 80133bc:	3301      	adds	r3, #1
 80133be:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
 80133c2:	2b06      	cmp	r3, #6
 80133c4:	d80c      	bhi.n	80133e0 <ApplicationGetSigModelList+0x38>
        (Appli_SIG_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 80133c6:	78fa      	ldrb	r2, [r7, #3]
 80133c8:	7bf9      	ldrb	r1, [r7, #15]
 80133ca:	480f      	ldr	r0, [pc, #60]	; (8013408 <ApplicationGetSigModelList+0x60>)
 80133cc:	4613      	mov	r3, r2
 80133ce:	00db      	lsls	r3, r3, #3
 80133d0:	1a9b      	subs	r3, r3, r2
 80133d2:	440b      	add	r3, r1
 80133d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
  while((modelCount < APPLICATION_SIG_MODELS_MAX_COUNT) && 
 80133d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133dc:	4293      	cmp	r3, r2
 80133de:	d1ec      	bne.n	80133ba <ApplicationGetSigModelList+0x12>
  } 
  memcpy(pModels_sig_ID, 
         Appli_SIG_Models + elementIndex, 
 80133e0:	78fa      	ldrb	r2, [r7, #3]
 80133e2:	4613      	mov	r3, r2
 80133e4:	00db      	lsls	r3, r3, #3
 80133e6:	1a9b      	subs	r3, r3, r2
 80133e8:	005b      	lsls	r3, r3, #1
 80133ea:	461a      	mov	r2, r3
  memcpy(pModels_sig_ID, 
 80133ec:	4b06      	ldr	r3, [pc, #24]	; (8013408 <ApplicationGetSigModelList+0x60>)
 80133ee:	18d1      	adds	r1, r2, r3
         modelCount * 2);
 80133f0:	7bfb      	ldrb	r3, [r7, #15]
 80133f2:	005b      	lsls	r3, r3, #1
  memcpy(pModels_sig_ID, 
 80133f4:	461a      	mov	r2, r3
 80133f6:	6878      	ldr	r0, [r7, #4]
 80133f8:	f016 faed 	bl	80299d6 <memcpy>
  
  return modelCount; 
 80133fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3710      	adds	r7, #16
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	20006e5c 	.word	0x20006e5c

0801340c <ApplicationGetVendorModelList>:
* @param elementIndex: Index of the element for Model List
* retval Count of the Vendor Model Servers enabled in the Application
*/

MOBLEUINT8 ApplicationGetVendorModelList(MOBLEUINT32* pModels_vendor_ID, MOBLEUINT8 elementIndex)
{
 801340c:	b580      	push	{r7, lr}
 801340e:	b084      	sub	sp, #16
 8013410:	af00      	add	r7, sp, #0
 8013412:	6078      	str	r0, [r7, #4]
 8013414:	460b      	mov	r3, r1
 8013416:	70fb      	strb	r3, [r7, #3]
    {
      /*do nothing*/
    }
  }
#else
  uint8_t modelCount = 0;
 8013418:	2300      	movs	r3, #0
 801341a:	73fb      	strb	r3, [r7, #15]
  
#ifdef ENABLE_VENDOR_MODEL_SERVER 
  /* Since the SIG Models are 2 bytes, copy 2*size for memcpy */
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 801341c:	e002      	b.n	8013424 <ApplicationGetVendorModelList+0x18>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
  {
    modelCount++;
 801341e:	7bfb      	ldrb	r3, [r7, #15]
 8013420:	3301      	adds	r3, #1
 8013422:	73fb      	strb	r3, [r7, #15]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 8013424:	7bfb      	ldrb	r3, [r7, #15]
 8013426:	2b01      	cmp	r3, #1
 8013428:	d80a      	bhi.n	8013440 <ApplicationGetVendorModelList+0x34>
        (Appli_Vendor_Models[elementIndex][modelCount] != NO_MODEL_AVLBL))
 801342a:	78fa      	ldrb	r2, [r7, #3]
 801342c:	7bfb      	ldrb	r3, [r7, #15]
 801342e:	490c      	ldr	r1, [pc, #48]	; (8013460 <ApplicationGetVendorModelList+0x54>)
 8013430:	0052      	lsls	r2, r2, #1
 8013432:	4413      	add	r3, r2
 8013434:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
  while((modelCount < APPLICATION_VENDOR_MODELS_MAX_COUNT) &&
 8013438:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801343c:	4293      	cmp	r3, r2
 801343e:	d1ee      	bne.n	801341e <ApplicationGetVendorModelList+0x12>
  }
  memcpy(pModels_vendor_ID, Appli_Vendor_Models+elementIndex, modelCount*4);
 8013440:	78fb      	ldrb	r3, [r7, #3]
 8013442:	00db      	lsls	r3, r3, #3
 8013444:	4a06      	ldr	r2, [pc, #24]	; (8013460 <ApplicationGetVendorModelList+0x54>)
 8013446:	1899      	adds	r1, r3, r2
 8013448:	7bfb      	ldrb	r3, [r7, #15]
 801344a:	009b      	lsls	r3, r3, #2
 801344c:	461a      	mov	r2, r3
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f016 fac1 	bl	80299d6 <memcpy>
#endif  
#endif
  return modelCount; 
 8013454:	7bfb      	ldrb	r3, [r7, #15]
}
 8013456:	4618      	mov	r0, r3
 8013458:	3710      	adds	r7, #16
 801345a:	46bd      	mov	sp, r7
 801345c:	bd80      	pop	{r7, pc}
 801345e:	bf00      	nop
 8013460:	20006e6c 	.word	0x20006e6c

08013464 <ApplicationChkSigModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkSigModelActive(MOBLEUINT16 modelID, MOBLEUINT8 elementIndex)
{
 8013464:	b480      	push	{r7}
 8013466:	b085      	sub	sp, #20
 8013468:	af00      	add	r7, sp, #0
 801346a:	4603      	mov	r3, r0
 801346c:	460a      	mov	r2, r1
 801346e:	80fb      	strh	r3, [r7, #6]
 8013470:	4613      	mov	r3, r2
 8013472:	717b      	strb	r3, [r7, #5]
  
  MOBLEBOOL result = MOBLE_FALSE;
 8013474:	2300      	movs	r3, #0
 8013476:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 8013478:	2300      	movs	r3, #0
 801347a:	73bb      	strb	r3, [r7, #14]
 801347c:	e020      	b.n	80134c0 <ApplicationChkSigModelActive+0x5c>
  {
    if(index == elementIndex)
 801347e:	7bba      	ldrb	r2, [r7, #14]
 8013480:	797b      	ldrb	r3, [r7, #5]
 8013482:	429a      	cmp	r2, r3
 8013484:	d119      	bne.n	80134ba <ApplicationChkSigModelActive+0x56>
    {
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 8013486:	2300      	movs	r3, #0
 8013488:	737b      	strb	r3, [r7, #13]
 801348a:	e012      	b.n	80134b2 <ApplicationChkSigModelActive+0x4e>
      {
        if (modelID == Appli_SIG_Models[index][count])      
 801348c:	7bba      	ldrb	r2, [r7, #14]
 801348e:	7b79      	ldrb	r1, [r7, #13]
 8013490:	4811      	ldr	r0, [pc, #68]	; (80134d8 <ApplicationChkSigModelActive+0x74>)
 8013492:	4613      	mov	r3, r2
 8013494:	00db      	lsls	r3, r3, #3
 8013496:	1a9b      	subs	r3, r3, r2
 8013498:	440b      	add	r3, r1
 801349a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 801349e:	88fa      	ldrh	r2, [r7, #6]
 80134a0:	429a      	cmp	r2, r3
 80134a2:	d103      	bne.n	80134ac <ApplicationChkSigModelActive+0x48>
        {
         result = MOBLE_TRUE;
 80134a4:	2301      	movs	r3, #1
 80134a6:	73fb      	strb	r3, [r7, #15]
           break;
 80134a8:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 80134aa:	e00d      	b.n	80134c8 <ApplicationChkSigModelActive+0x64>
      for(uint8_t count = 0; count < APPLICATION_SIG_MODELS_MAX_COUNT; count++)
 80134ac:	7b7b      	ldrb	r3, [r7, #13]
 80134ae:	3301      	adds	r3, #1
 80134b0:	737b      	strb	r3, [r7, #13]
 80134b2:	7b7b      	ldrb	r3, [r7, #13]
 80134b4:	2b06      	cmp	r3, #6
 80134b6:	d9e9      	bls.n	801348c <ApplicationChkSigModelActive+0x28>
      break;
 80134b8:	e006      	b.n	80134c8 <ApplicationChkSigModelActive+0x64>
  for(uint8_t index = 0; index <= elementIndex; index++)
 80134ba:	7bbb      	ldrb	r3, [r7, #14]
 80134bc:	3301      	adds	r3, #1
 80134be:	73bb      	strb	r3, [r7, #14]
 80134c0:	7bba      	ldrb	r2, [r7, #14]
 80134c2:	797b      	ldrb	r3, [r7, #5]
 80134c4:	429a      	cmp	r2, r3
 80134c6:	d9da      	bls.n	801347e <ApplicationChkSigModelActive+0x1a>
    {
      /*do nothing*/  
    }
  }
  
  return result;
 80134c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3714      	adds	r7, #20
 80134ce:	46bd      	mov	sp, r7
 80134d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134d4:	4770      	bx	lr
 80134d6:	bf00      	nop
 80134d8:	20006e5c 	.word	0x20006e5c

080134dc <ApplicationChkVendorModelActive>:
* @param modelID: Model Server ID received for the checking function
* @param elementIndex : index of element for which active model checking is needed
* retval Bool: True or False, if the Server ID matches with the list 
*/
MOBLEBOOL ApplicationChkVendorModelActive(MOBLEUINT32 modelID, MOBLEUINT8 elementIndex)
{
 80134dc:	b480      	push	{r7}
 80134de:	b085      	sub	sp, #20
 80134e0:	af00      	add	r7, sp, #0
 80134e2:	6078      	str	r0, [r7, #4]
 80134e4:	460b      	mov	r3, r1
 80134e6:	70fb      	strb	r3, [r7, #3]
  MOBLEBOOL result = MOBLE_FALSE;
 80134e8:	2300      	movs	r3, #0
 80134ea:	73fb      	strb	r3, [r7, #15]
    
  for(uint8_t index = 0; index <= elementIndex; index++)
 80134ec:	2300      	movs	r3, #0
 80134ee:	73bb      	strb	r3, [r7, #14]
 80134f0:	e01e      	b.n	8013530 <ApplicationChkVendorModelActive+0x54>
  {
    if(index == elementIndex)
 80134f2:	7bba      	ldrb	r2, [r7, #14]
 80134f4:	78fb      	ldrb	r3, [r7, #3]
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d117      	bne.n	801352a <ApplicationChkVendorModelActive+0x4e>
    {
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 80134fa:	2300      	movs	r3, #0
 80134fc:	737b      	strb	r3, [r7, #13]
 80134fe:	e010      	b.n	8013522 <ApplicationChkVendorModelActive+0x46>
      {
        if (modelID == Appli_Vendor_Models[index][count])      
 8013500:	7bba      	ldrb	r2, [r7, #14]
 8013502:	7b7b      	ldrb	r3, [r7, #13]
 8013504:	4910      	ldr	r1, [pc, #64]	; (8013548 <ApplicationChkVendorModelActive+0x6c>)
 8013506:	0052      	lsls	r2, r2, #1
 8013508:	4413      	add	r3, r2
 801350a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801350e:	687a      	ldr	r2, [r7, #4]
 8013510:	429a      	cmp	r2, r3
 8013512:	d103      	bne.n	801351c <ApplicationChkVendorModelActive+0x40>
        {
         result = MOBLE_TRUE;
 8013514:	2301      	movs	r3, #1
 8013516:	73fb      	strb	r3, [r7, #15]
         break;
 8013518:	bf00      	nop
        else
        {
           /*do nothing*/ 
        }
      }
      break;
 801351a:	e00d      	b.n	8013538 <ApplicationChkVendorModelActive+0x5c>
      for(uint8_t count = 0; count < APPLICATION_VENDOR_MODELS_MAX_COUNT; count++)
 801351c:	7b7b      	ldrb	r3, [r7, #13]
 801351e:	3301      	adds	r3, #1
 8013520:	737b      	strb	r3, [r7, #13]
 8013522:	7b7b      	ldrb	r3, [r7, #13]
 8013524:	2b01      	cmp	r3, #1
 8013526:	d9eb      	bls.n	8013500 <ApplicationChkVendorModelActive+0x24>
      break;
 8013528:	e006      	b.n	8013538 <ApplicationChkVendorModelActive+0x5c>
  for(uint8_t index = 0; index <= elementIndex; index++)
 801352a:	7bbb      	ldrb	r3, [r7, #14]
 801352c:	3301      	adds	r3, #1
 801352e:	73bb      	strb	r3, [r7, #14]
 8013530:	7bba      	ldrb	r2, [r7, #14]
 8013532:	78fb      	ldrb	r3, [r7, #3]
 8013534:	429a      	cmp	r2, r3
 8013536:	d9dc      	bls.n	80134f2 <ApplicationChkVendorModelActive+0x16>
    {
      /*do nothing*/  
    }
  }
  
  return result;  
 8013538:	7bfb      	ldrb	r3, [r7, #15]
    
}
 801353a:	4618      	mov	r0, r3
 801353c:	3714      	adds	r7, #20
 801353e:	46bd      	mov	sp, r7
 8013540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013544:	4770      	bx	lr
 8013546:	bf00      	nop
 8013548:	20006e6c 	.word	0x20006e6c

0801354c <BnrgmFrndLpnProcess>:
}
#endif /* #if (FRIEND_FEATURE == 0) */

#if (LOW_POWER_FEATURE == 0)
MOBLE_RESULT BnrgmFrndLpnProcess(void* param)
{
 801354c:	b480      	push	{r7}
 801354e:	b083      	sub	sp, #12
 8013550:	af00      	add	r7, sp, #0
 8013552:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013554:	2305      	movs	r3, #5
}
 8013556:	4618      	mov	r0, r3
 8013558:	370c      	adds	r7, #12
 801355a:	46bd      	mov	sp, r7
 801355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013560:	4770      	bx	lr

08013562 <BnrgmFrndLpnProcessFrndOffer>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndOffer(void* param)
{
 8013562:	b480      	push	{r7}
 8013564:	b083      	sub	sp, #12
 8013566:	af00      	add	r7, sp, #0
 8013568:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 801356a:	2305      	movs	r3, #5
}
 801356c:	4618      	mov	r0, r3
 801356e:	370c      	adds	r7, #12
 8013570:	46bd      	mov	sp, r7
 8013572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013576:	4770      	bx	lr

08013578 <BnrgmFrndLpnProcessFrndUpdate>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndUpdate(void* param)
{
 8013578:	b480      	push	{r7}
 801357a:	b083      	sub	sp, #12
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013580:	2305      	movs	r3, #5
}
 8013582:	4618      	mov	r0, r3
 8013584:	370c      	adds	r7, #12
 8013586:	46bd      	mov	sp, r7
 8013588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358c:	4770      	bx	lr

0801358e <BnrgmFrndLpnProcessFrndRfu>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndRfu(void* param)
{
 801358e:	b480      	push	{r7}
 8013590:	b083      	sub	sp, #12
 8013592:	af00      	add	r7, sp, #0
 8013594:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013596:	2305      	movs	r3, #5
}
 8013598:	4618      	mov	r0, r3
 801359a:	370c      	adds	r7, #12
 801359c:	46bd      	mov	sp, r7
 801359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a2:	4770      	bx	lr

080135a4 <BnrgmFrndLpnProcessFrndSubscrListConf>:

MOBLE_RESULT BnrgmFrndLpnProcessFrndSubscrListConf(void* param)
{
 80135a4:	b480      	push	{r7}
 80135a6:	b083      	sub	sp, #12
 80135a8:	af00      	add	r7, sp, #0
 80135aa:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80135ac:	2305      	movs	r3, #5
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	370c      	adds	r7, #12
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr

080135ba <BnrgmFrndLpnSwitchKeys>:

MOBLE_RESULT BnrgmFrndLpnSwitchKeys(void* param)
{
 80135ba:	b480      	push	{r7}
 80135bc:	b083      	sub	sp, #12
 80135be:	af00      	add	r7, sp, #0
 80135c0:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80135c2:	2305      	movs	r3, #5
}
 80135c4:	4618      	mov	r0, r3
 80135c6:	370c      	adds	r7, #12
 80135c8:	46bd      	mov	sp, r7
 80135ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135ce:	4770      	bx	lr

080135d0 <BnrgmFrndLpnTranspSegRecvd>:

MOBLE_RESULT BnrgmFrndLpnTranspSegRecvd(void* param)
{
 80135d0:	b480      	push	{r7}
 80135d2:	b083      	sub	sp, #12
 80135d4:	af00      	add	r7, sp, #0
 80135d6:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80135d8:	2305      	movs	r3, #5
}
 80135da:	4618      	mov	r0, r3
 80135dc:	370c      	adds	r7, #12
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr

080135e6 <BnrgmFrndLpnUpdateKeys>:

MOBLE_RESULT BnrgmFrndLpnUpdateKeys(void* param)
{
 80135e6:	b480      	push	{r7}
 80135e8:	b083      	sub	sp, #12
 80135ea:	af00      	add	r7, sp, #0
 80135ec:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 80135ee:	2305      	movs	r3, #5
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	370c      	adds	r7, #12
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr

080135fc <BnrgmFrndMgmtLpnInit>:

MOBLE_RESULT BnrgmFrndMgmtLpnInit(void* param)
{
 80135fc:	b480      	push	{r7}
 80135fe:	b083      	sub	sp, #12
 8013600:	af00      	add	r7, sp, #0
 8013602:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_NOTIMPL;
 8013604:	2305      	movs	r3, #5
}
 8013606:	4618      	mov	r0, r3
 8013608:	370c      	adds	r7, #12
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr

08013612 <LightLcServer_GetOpcodeTableCb>:
//__weak void Appli_Sensor_SerialCmd(char *rcvdStringBuff, uint16_t rcvdStringSize){}
         
#ifndef ENABLE_LIGHT_MODEL_SERVER_LC
MOBLE_RESULT LightLcServer_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                            MOBLEUINT16 *length)
{return MOBLE_RESULT_NOTIMPL;}
 8013612:	b480      	push	{r7}
 8013614:	b083      	sub	sp, #12
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	6039      	str	r1, [r7, #0]
 801361c:	2305      	movs	r3, #5
 801361e:	4618      	mov	r0, r3
 8013620:	370c      	adds	r7, #12
 8013622:	46bd      	mov	sp, r7
 8013624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013628:	4770      	bx	lr

0801362a <Light_LC_LigtnessLinearUnsolicitedChange>:
MOBLE_RESULT Light_LC_SensorPropertyUpdate(MOBLEUINT8 lcsElementIndex,
                                           MOBLEUINT16 sensorPropertyId,
                                           MOBLEUINT32 value)
{return MOBLE_RESULT_NOTIMPL;}
void Light_LC_LigtnessLinearUnsolicitedChange(MOBLEUINT8 elementIndex)
{}
 801362a:	b480      	push	{r7}
 801362c:	b083      	sub	sp, #12
 801362e:	af00      	add	r7, sp, #0
 8013630:	4603      	mov	r3, r0
 8013632:	71fb      	strb	r3, [r7, #7]
 8013634:	bf00      	nop
 8013636:	370c      	adds	r7, #12
 8013638:	46bd      	mov	sp, r7
 801363a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801363e:	4770      	bx	lr

08013640 <Light_LC_LcOnOffUpdate>:
                                    MOBLEUINT8 onOff,
                                    MOBLEUINT8 optionalParams,
                                    MOBLEUINT32 delayMsOnOffMsg,
                                    MOBLEUINT32 stepResMsOnOffMsg,
                                    MOBLEUINT32 trTimeMsOnOffMsg)
{return MOBLE_RESULT_NOTIMPL;}
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
 8013646:	603b      	str	r3, [r7, #0]
 8013648:	4603      	mov	r3, r0
 801364a:	71fb      	strb	r3, [r7, #7]
 801364c:	460b      	mov	r3, r1
 801364e:	71bb      	strb	r3, [r7, #6]
 8013650:	4613      	mov	r3, r2
 8013652:	717b      	strb	r3, [r7, #5]
 8013654:	2305      	movs	r3, #5
 8013656:	4618      	mov	r0, r3
 8013658:	370c      	adds	r7, #12
 801365a:	46bd      	mov	sp, r7
 801365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013660:	4770      	bx	lr
	...

08013664 <Sensor_UpdatePublishParameters>:
  * @param  sensor offset of corresponding sensor whose parameters to be updated
  * @retval Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_UpdatePublishParameters(MOBLEUINT8 sensorOffset)
{
 8013664:	b590      	push	{r4, r7, lr}
 8013666:	b087      	sub	sp, #28
 8013668:	af00      	add	r7, sp, #0
 801366a:	4603      	mov	r3, r0
 801366c:	71fb      	strb	r3, [r7, #7]
  MOBLEUINT8 fastCadenceStatus = 0;
 801366e:	2300      	movs	r3, #0
 8013670:	75fb      	strb	r3, [r7, #23]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8013672:	2300      	movs	r3, #0
 8013674:	75bb      	strb	r3, [r7, #22]
  MOBLEUINT8 sensorOffsetTemp = sensorOffset;
 8013676:	79fb      	ldrb	r3, [r7, #7]
 8013678:	753b      	strb	r3, [r7, #20]
  sensor_params_t* pParams = SensorServer->pSensorParams + sensorOffsetTemp;
 801367a:	4b81      	ldr	r3, [pc, #516]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	685a      	ldr	r2, [r3, #4]
 8013680:	7d3b      	ldrb	r3, [r7, #20]
 8013682:	2134      	movs	r1, #52	; 0x34
 8013684:	fb01 f303 	mul.w	r3, r1, r3
 8013688:	4413      	add	r3, r2
 801368a:	613b      	str	r3, [r7, #16]
  MOBLEUINT32 fastCadenceLow;
  MOBLEUINT32 fastCadenceHigh;

  TRACE_M(TF_SENSOR_M, "SENSOR%d\r\n", sensorOffset+1);
 801368c:	2100      	movs	r1, #0
 801368e:	487d      	ldr	r0, [pc, #500]	; (8013884 <Sensor_UpdatePublishParameters+0x220>)
 8013690:	f7f9 ff6e 	bl	800d570 <TraceHeader>
 8013694:	79fb      	ldrb	r3, [r7, #7]
 8013696:	3301      	adds	r3, #1
 8013698:	4619      	mov	r1, r3
 801369a:	487b      	ldr	r0, [pc, #492]	; (8013888 <Sensor_UpdatePublishParameters+0x224>)
 801369c:	f015 ff6c 	bl	8029578 <iprintf>
  
  if (pParams != NULL)
 80136a0:	693b      	ldr	r3, [r7, #16]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	f000 80dd 	beq.w	8013862 <Sensor_UpdatePublishParameters+0x1fe>
  {
    if (pParams->cadenceState == 1)
 80136a8:	693b      	ldr	r3, [r7, #16]
 80136aa:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 80136ae:	2b01      	cmp	r3, #1
 80136b0:	f040 80cf 	bne.w	8013852 <Sensor_UpdatePublishParameters+0x1ee>
    {
      if (pParams->modelPublishPeriodMs == 0)
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	699b      	ldr	r3, [r3, #24]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d107      	bne.n	80136cc <Sensor_UpdatePublishParameters+0x68>
      {
        TRACE_M(TF_SENSOR_M, "Publish period set to 0\r\n");
 80136bc:	2100      	movs	r1, #0
 80136be:	4871      	ldr	r0, [pc, #452]	; (8013884 <Sensor_UpdatePublishParameters+0x220>)
 80136c0:	f7f9 ff56 	bl	800d570 <TraceHeader>
 80136c4:	4871      	ldr	r0, [pc, #452]	; (801388c <Sensor_UpdatePublishParameters+0x228>)
 80136c6:	f015 ffbd 	bl	8029644 <puts>
 80136ca:	e058      	b.n	801377e <Sensor_UpdatePublishParameters+0x11a>
      }
      else
      {
        if (SensorServer->p_cb->Sensor_IsFastCadence_cb != NULL)
 80136cc:	4b6c      	ldr	r3, [pc, #432]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d012      	beq.n	80136fe <Sensor_UpdatePublishParameters+0x9a>
        {
          fastCadenceLow = pParams->fastCadenceLow;
 80136d8:	693b      	ldr	r3, [r7, #16]
 80136da:	691b      	ldr	r3, [r3, #16]
 80136dc:	60fb      	str	r3, [r7, #12]
          fastCadenceHigh = pParams->fastCadenceHigh;
 80136de:	693b      	ldr	r3, [r7, #16]
 80136e0:	695b      	ldr	r3, [r3, #20]
 80136e2:	60bb      	str	r3, [r7, #8]
      
          /* check sensor value for fast cadence */
          fastCadenceStatus = 
            SensorServer->p_cb->Sensor_IsFastCadence_cb(sensorOffset,
 80136e4:	4b66      	ldr	r3, [pc, #408]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ec:	f107 0208 	add.w	r2, r7, #8
 80136f0:	f107 010c 	add.w	r1, r7, #12
 80136f4:	79f8      	ldrb	r0, [r7, #7]
 80136f6:	4798      	blx	r3
 80136f8:	4603      	mov	r3, r0
 80136fa:	75fb      	strb	r3, [r7, #23]
 80136fc:	e001      	b.n	8013702 <Sensor_UpdatePublishParameters+0x9e>
                                                        &fastCadenceLow, 
                                                        &fastCadenceHigh);
      }
      else
      {
          fastCadenceStatus = 0;
 80136fe:	2300      	movs	r3, #0
 8013700:	75fb      	strb	r3, [r7, #23]
      }
      
      /* if fast cadence required, divide publish interval by 2^n, n = fast cadence period divisor */
        if (fastCadenceStatus == 1)
 8013702:	7dfb      	ldrb	r3, [r7, #23]
 8013704:	2b01      	cmp	r3, #1
 8013706:	d109      	bne.n	801371c <Sensor_UpdatePublishParameters+0xb8>
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	699b      	ldr	r3, [r3, #24]
                                     (1<<pParams->fastCadencePeriodDiv);
 801370c:	693a      	ldr	r2, [r7, #16]
 801370e:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs / \
 8013712:	fa23 f202 	lsr.w	r2, r3, r2
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	61da      	str	r2, [r3, #28]
 801371a:	e003      	b.n	8013724 <Sensor_UpdatePublishParameters+0xc0>
      }
      else
      {
          pParams->publishPeriodMs = pParams->modelPublishPeriodMs;
 801371c:	693b      	ldr	r3, [r7, #16]
 801371e:	699a      	ldr	r2, [r3, #24]
 8013720:	693b      	ldr	r3, [r7, #16]
 8013722:	61da      	str	r2, [r3, #28]
      }
      
      /* if publish period is less than status min interval, adjust to status min value */
      if (pParams->publishPeriodMs < (1 << pParams->statusMinInterval))
 8013724:	693b      	ldr	r3, [r7, #16]
 8013726:	69db      	ldr	r3, [r3, #28]
 8013728:	693a      	ldr	r2, [r7, #16]
 801372a:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 801372e:	40d3      	lsrs	r3, r2
 8013730:	2b00      	cmp	r3, #0
 8013732:	d118      	bne.n	8013766 <Sensor_UpdatePublishParameters+0x102>
      {
        TRACE_M(TF_SENSOR_M, "publish period %ld less than status minimum interval %d\r\n", pParams->publishPeriodMs, 1 << pParams->statusMinInterval);
 8013734:	2100      	movs	r1, #0
 8013736:	4853      	ldr	r0, [pc, #332]	; (8013884 <Sensor_UpdatePublishParameters+0x220>)
 8013738:	f7f9 ff1a 	bl	800d570 <TraceHeader>
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	69d9      	ldr	r1, [r3, #28]
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8013746:	461a      	mov	r2, r3
 8013748:	2301      	movs	r3, #1
 801374a:	4093      	lsls	r3, r2
 801374c:	461a      	mov	r2, r3
 801374e:	4850      	ldr	r0, [pc, #320]	; (8013890 <Sensor_UpdatePublishParameters+0x22c>)
 8013750:	f015 ff12 	bl	8029578 <iprintf>
        pParams->publishPeriodMs = 1 << pParams->statusMinInterval;
 8013754:	693b      	ldr	r3, [r7, #16]
 8013756:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801375a:	461a      	mov	r2, r3
 801375c:	2301      	movs	r3, #1
 801375e:	4093      	lsls	r3, r2
 8013760:	461a      	mov	r2, r3
 8013762:	693b      	ldr	r3, [r7, #16]
 8013764:	61da      	str	r2, [r3, #28]
      }
      
        TRACE_M(TF_SENSOR_M, "SENSOR%d fast cadence state %d, publish period %ld\r\n",
 8013766:	2100      	movs	r1, #0
 8013768:	4846      	ldr	r0, [pc, #280]	; (8013884 <Sensor_UpdatePublishParameters+0x220>)
 801376a:	f7f9 ff01 	bl	800d570 <TraceHeader>
 801376e:	79fb      	ldrb	r3, [r7, #7]
 8013770:	1c59      	adds	r1, r3, #1
 8013772:	7dfa      	ldrb	r2, [r7, #23]
 8013774:	693b      	ldr	r3, [r7, #16]
 8013776:	69db      	ldr	r3, [r3, #28]
 8013778:	4846      	ldr	r0, [pc, #280]	; (8013894 <Sensor_UpdatePublishParameters+0x230>)
 801377a:	f015 fefd 	bl	8029578 <iprintf>
      /* realign timers of all sensors on same element index
         this may result in publishing of sensor status even for sensors whose
         sensor status is not scheduled
         Doing this benefits to publish sensor data of all elements in one message
         by data marshalling */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 801377e:	2300      	movs	r3, #0
 8013780:	757b      	strb	r3, [r7, #21]
 8013782:	e05d      	b.n	8013840 <Sensor_UpdatePublishParameters+0x1dc>
      {
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 8013784:	4b3e      	ldr	r3, [pc, #248]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	685a      	ldr	r2, [r3, #4]
 801378a:	7d7b      	ldrb	r3, [r7, #21]
 801378c:	2134      	movs	r1, #52	; 0x34
 801378e:	fb01 f303 	mul.w	r3, r1, r3
 8013792:	4413      	add	r3, r2
 8013794:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8013798:	693b      	ldr	r3, [r7, #16]
 801379a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801379e:	429a      	cmp	r2, r3
 80137a0:	d14b      	bne.n	801383a <Sensor_UpdatePublishParameters+0x1d6>
             ((SensorServer->pSensorParams)+count)->cadenceState == 1)
 80137a2:	4b37      	ldr	r3, [pc, #220]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	685a      	ldr	r2, [r3, #4]
 80137a8:	7d7b      	ldrb	r3, [r7, #21]
 80137aa:	2134      	movs	r1, #52	; 0x34
 80137ac:	fb01 f303 	mul.w	r3, r1, r3
 80137b0:	4413      	add	r3, r2
 80137b2:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
        if(((SensorServer->pSensorParams)+count)->elementIdx == pParams->elementIdx &&
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d13f      	bne.n	801383a <Sensor_UpdatePublishParameters+0x1d6>
        {
          if(((SensorServer->pSensorParams)+count)->modelPublishPeriodMs == 0)
 80137ba:	4b31      	ldr	r3, [pc, #196]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	685a      	ldr	r2, [r3, #4]
 80137c0:	7d7b      	ldrb	r3, [r7, #21]
 80137c2:	2134      	movs	r1, #52	; 0x34
 80137c4:	fb01 f303 	mul.w	r3, r1, r3
 80137c8:	4413      	add	r3, r2
 80137ca:	699b      	ldr	r3, [r3, #24]
 80137cc:	2b00      	cmp	r3, #0
 80137ce:	d10b      	bne.n	80137e8 <Sensor_UpdatePublishParameters+0x184>
          {
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_STOPPED;
 80137d0:	4b2b      	ldr	r3, [pc, #172]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 80137d2:	681b      	ldr	r3, [r3, #0]
 80137d4:	685a      	ldr	r2, [r3, #4]
 80137d6:	7d7b      	ldrb	r3, [r7, #21]
 80137d8:	2134      	movs	r1, #52	; 0x34
 80137da:	fb01 f303 	mul.w	r3, r1, r3
 80137de:	4413      	add	r3, r2
 80137e0:	2200      	movs	r2, #0
 80137e2:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 80137e6:	e028      	b.n	801383a <Sensor_UpdatePublishParameters+0x1d6>
          }
          else
          {
      /* start timer for now to immediately send status on change parameters
      subsequently status would be sent after every publish period */
            ((SensorServer->pSensorParams)+count)->timerStatus = TIMER_RUNNING;
 80137e8:	4b25      	ldr	r3, [pc, #148]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	685a      	ldr	r2, [r3, #4]
 80137ee:	7d7b      	ldrb	r3, [r7, #21]
 80137f0:	2134      	movs	r1, #52	; 0x34
 80137f2:	fb01 f303 	mul.w	r3, r1, r3
 80137f6:	4413      	add	r3, r2
 80137f8:	2201      	movs	r2, #1
 80137fa:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
            ((SensorServer->pSensorParams)+count)->timerBegin = Clock_Time();
 80137fe:	4b20      	ldr	r3, [pc, #128]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	685a      	ldr	r2, [r3, #4]
 8013804:	7d7b      	ldrb	r3, [r7, #21]
 8013806:	2134      	movs	r1, #52	; 0x34
 8013808:	fb01 f303 	mul.w	r3, r1, r3
 801380c:	18d4      	adds	r4, r2, r3
 801380e:	f7f4 fb29 	bl	8007e64 <HAL_GetTick>
 8013812:	4603      	mov	r3, r0
 8013814:	6223      	str	r3, [r4, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 8013816:	4b1a      	ldr	r3, [pc, #104]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	685a      	ldr	r2, [r3, #4]
 801381c:	7d7b      	ldrb	r3, [r7, #21]
 801381e:	2134      	movs	r1, #52	; 0x34
 8013820:	fb01 f303 	mul.w	r3, r1, r3
 8013824:	441a      	add	r2, r3
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 8013826:	4b16      	ldr	r3, [pc, #88]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	6859      	ldr	r1, [r3, #4]
 801382c:	7d7b      	ldrb	r3, [r7, #21]
 801382e:	2034      	movs	r0, #52	; 0x34
 8013830:	fb00 f303 	mul.w	r3, r0, r3
 8013834:	440b      	add	r3, r1
              ((SensorServer->pSensorParams)+count)->timerBegin;            
 8013836:	6a12      	ldr	r2, [r2, #32]
            ((SensorServer->pSensorParams)+count)->timerEnd = \
 8013838:	625a      	str	r2, [r3, #36]	; 0x24
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 801383a:	7d7b      	ldrb	r3, [r7, #21]
 801383c:	3301      	adds	r3, #1
 801383e:	757b      	strb	r3, [r7, #21]
 8013840:	4b0f      	ldr	r3, [pc, #60]	; (8013880 <Sensor_UpdatePublishParameters+0x21c>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	7a1b      	ldrb	r3, [r3, #8]
 8013846:	7d7a      	ldrb	r2, [r7, #21]
 8013848:	429a      	cmp	r2, r3
 801384a:	d39b      	bcc.n	8013784 <Sensor_UpdatePublishParameters+0x120>
        {
          /* */
        }
      }
      
      result = MOBLE_RESULT_SUCCESS;
 801384c:	2300      	movs	r3, #0
 801384e:	75bb      	strb	r3, [r7, #22]
 8013850:	e010      	b.n	8013874 <Sensor_UpdatePublishParameters+0x210>
    }
    else /* cadence not supported */
    {
      TRACE_M(TF_SENSOR_M, "Cadence not supported\r\n");
 8013852:	2100      	movs	r1, #0
 8013854:	480b      	ldr	r0, [pc, #44]	; (8013884 <Sensor_UpdatePublishParameters+0x220>)
 8013856:	f7f9 fe8b 	bl	800d570 <TraceHeader>
 801385a:	480f      	ldr	r0, [pc, #60]	; (8013898 <Sensor_UpdatePublishParameters+0x234>)
 801385c:	f015 fef2 	bl	8029644 <puts>
 8013860:	e008      	b.n	8013874 <Sensor_UpdatePublishParameters+0x210>
    }
  }
  else
  {
    result = MOBLE_RESULT_FAIL;
 8013862:	2302      	movs	r3, #2
 8013864:	75bb      	strb	r3, [r7, #22]
    TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
 8013866:	2100      	movs	r1, #0
 8013868:	4806      	ldr	r0, [pc, #24]	; (8013884 <Sensor_UpdatePublishParameters+0x220>)
 801386a:	f7f9 fe81 	bl	800d570 <TraceHeader>
 801386e:	480b      	ldr	r0, [pc, #44]	; (801389c <Sensor_UpdatePublishParameters+0x238>)
 8013870:	f015 fee8 	bl	8029644 <puts>
  }
  
  return result;
 8013874:	7dbb      	ldrb	r3, [r7, #22]
}
 8013876:	4618      	mov	r0, r3
 8013878:	371c      	adds	r7, #28
 801387a:	46bd      	mov	sp, r7
 801387c:	bd90      	pop	{r4, r7, pc}
 801387e:	bf00      	nop
 8013880:	20006e74 	.word	0x20006e74
 8013884:	08033284 	.word	0x08033284
 8013888:	08030874 	.word	0x08030874
 801388c:	08030880 	.word	0x08030880
 8013890:	0803089c 	.word	0x0803089c
 8013894:	080308d8 	.word	0x080308d8
 8013898:	08030910 	.word	0x08030910
 801389c:	08030244 	.word	0x08030244

080138a0 <Sensor_ModelPublishSet>:
  * @retval Fail if model id is not sensor server
  *         Fail if sensor not initialized
  *         else Success
  */
__weak MOBLE_RESULT Sensor_ModelPublishSet(model_publicationparams_t* pPublishParams)
{
 80138a0:	b590      	push	{r4, r7, lr}
 80138a2:	b087      	sub	sp, #28
 80138a4:	af00      	add	r7, sp, #0
 80138a6:	6078      	str	r0, [r7, #4]
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 80138a8:	2300      	movs	r3, #0
 80138aa:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 elementIdx;
  MOBLEUINT32 rcvdPublishPeriod;
  sensor_params_t* pParams = NULL;
 80138ac:	2300      	movs	r3, #0
 80138ae:	613b      	str	r3, [r7, #16]
  
  if(SensorServer != NULL)
 80138b0:	4b39      	ldr	r3, [pc, #228]	; (8013998 <Sensor_ModelPublishSet+0xf8>)
 80138b2:	681b      	ldr	r3, [r3, #0]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d063      	beq.n	8013980 <Sensor_ModelPublishSet+0xe0>
  {
    if (pPublishParams != NULL &&
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d056      	beq.n	801396c <Sensor_ModelPublishSet+0xcc>
        pPublishParams->modelID == SENSOR_SERVER_MODEL_ID)
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	685b      	ldr	r3, [r3, #4]
    if (pPublishParams != NULL &&
 80138c2:	f5b3 5f88 	cmp.w	r3, #4352	; 0x1100
 80138c6:	d151      	bne.n	801396c <Sensor_ModelPublishSet+0xcc>
    {
      /* extract element index */
      elementIdx = pPublishParams->elementAddress - BLEMesh_GetAddress();
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	781c      	ldrb	r4, [r3, #0]
 80138cc:	f009 fbec 	bl	801d0a8 <BLEMesh_GetAddress>
 80138d0:	4603      	mov	r3, r0
 80138d2:	b2db      	uxtb	r3, r3
 80138d4:	1ae3      	subs	r3, r4, r3
 80138d6:	73fb      	strb	r3, [r7, #15]
      rcvdPublishPeriod = pPublishParams->publishPeriod;
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	7b9b      	ldrb	r3, [r3, #14]
 80138dc:	60bb      	str	r3, [r7, #8]
        
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 80138de:	68bb      	ldr	r3, [r7, #8]
 80138e0:	f003 043f 	and.w	r4, r3, #63	; 0x3f
                           Get_StepResolutionValue(rcvdPublishPeriod>>6);
 80138e4:	68bb      	ldr	r3, [r7, #8]
 80138e6:	099b      	lsrs	r3, r3, #6
 80138e8:	b2db      	uxtb	r3, r3
 80138ea:	4618      	mov	r0, r3
 80138ec:	f7f9 fe14 	bl	800d518 <Get_StepResolutionValue>
 80138f0:	4603      	mov	r3, r0
      rcvdPublishPeriod = (rcvdPublishPeriod & 0x3F)*\
 80138f2:	fb04 f303 	mul.w	r3, r4, r3
 80138f6:	60bb      	str	r3, [r7, #8]
    
      TRACE_M(TF_SENSOR_M, "Element index %d publish period %ld ms\r\n",
 80138f8:	2100      	movs	r1, #0
 80138fa:	4828      	ldr	r0, [pc, #160]	; (801399c <Sensor_ModelPublishSet+0xfc>)
 80138fc:	f7f9 fe38 	bl	800d570 <TraceHeader>
 8013900:	7bfb      	ldrb	r3, [r7, #15]
 8013902:	68ba      	ldr	r2, [r7, #8]
 8013904:	4619      	mov	r1, r3
 8013906:	4826      	ldr	r0, [pc, #152]	; (80139a0 <Sensor_ModelPublishSet+0x100>)
 8013908:	f015 fe36 	bl	8029578 <iprintf>
              elementIdx, rcvdPublishPeriod);

      /* update publish period of all sensors on element given by publish parameters */
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 801390c:	2300      	movs	r3, #0
 801390e:	75bb      	strb	r3, [r7, #22]
 8013910:	e025      	b.n	801395e <Sensor_ModelPublishSet+0xbe>
      {
        pParams = SensorServer->pSensorParams + count;
 8013912:	4b21      	ldr	r3, [pc, #132]	; (8013998 <Sensor_ModelPublishSet+0xf8>)
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	685a      	ldr	r2, [r3, #4]
 8013918:	7dbb      	ldrb	r3, [r7, #22]
 801391a:	2134      	movs	r1, #52	; 0x34
 801391c:	fb01 f303 	mul.w	r3, r1, r3
 8013920:	4413      	add	r3, r2
 8013922:	613b      	str	r3, [r7, #16]

        if (pParams != NULL)
 8013924:	693b      	ldr	r3, [r7, #16]
 8013926:	2b00      	cmp	r3, #0
 8013928:	d00d      	beq.n	8013946 <Sensor_ModelPublishSet+0xa6>
        {
          if (pParams->elementIdx == elementIdx)
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013930:	7bfa      	ldrb	r2, [r7, #15]
 8013932:	429a      	cmp	r2, r3
 8013934:	d110      	bne.n	8013958 <Sensor_ModelPublishSet+0xb8>
          {
            pParams->modelPublishPeriodMs = rcvdPublishPeriod;
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	68ba      	ldr	r2, [r7, #8]
 801393a:	619a      	str	r2, [r3, #24]
            Sensor_UpdatePublishParameters(count);
 801393c:	7dbb      	ldrb	r3, [r7, #22]
 801393e:	4618      	mov	r0, r3
 8013940:	f7ff fe90 	bl	8013664 <Sensor_UpdatePublishParameters>
 8013944:	e008      	b.n	8013958 <Sensor_ModelPublishSet+0xb8>
            /* */
          }
        }
        else
        {
          TRACE_M(TF_SENSOR_M, "Sensor not initialized\r\n");
 8013946:	2100      	movs	r1, #0
 8013948:	4814      	ldr	r0, [pc, #80]	; (801399c <Sensor_ModelPublishSet+0xfc>)
 801394a:	f7f9 fe11 	bl	800d570 <TraceHeader>
 801394e:	4815      	ldr	r0, [pc, #84]	; (80139a4 <Sensor_ModelPublishSet+0x104>)
 8013950:	f015 fe78 	bl	8029644 <puts>
          break;
 8013954:	bf00      	nop
      for (MOBLEUINT8 count=0; count<SensorServer->sensorsCount; count++)
 8013956:	e01a      	b.n	801398e <Sensor_ModelPublishSet+0xee>
 8013958:	7dbb      	ldrb	r3, [r7, #22]
 801395a:	3301      	adds	r3, #1
 801395c:	75bb      	strb	r3, [r7, #22]
 801395e:	4b0e      	ldr	r3, [pc, #56]	; (8013998 <Sensor_ModelPublishSet+0xf8>)
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	7a1b      	ldrb	r3, [r3, #8]
 8013964:	7dba      	ldrb	r2, [r7, #22]
 8013966:	429a      	cmp	r2, r3
 8013968:	d3d3      	bcc.n	8013912 <Sensor_ModelPublishSet+0x72>
 801396a:	e010      	b.n	801398e <Sensor_ModelPublishSet+0xee>
        }
      }
    }
    else
    {
      TRACE_M(TF_SENSOR_M, "Not for sensor server model\r\n");
 801396c:	2100      	movs	r1, #0
 801396e:	480b      	ldr	r0, [pc, #44]	; (801399c <Sensor_ModelPublishSet+0xfc>)
 8013970:	f7f9 fdfe 	bl	800d570 <TraceHeader>
 8013974:	480c      	ldr	r0, [pc, #48]	; (80139a8 <Sensor_ModelPublishSet+0x108>)
 8013976:	f015 fe65 	bl	8029644 <puts>
      result = MOBLE_RESULT_FAIL;
 801397a:	2302      	movs	r3, #2
 801397c:	75fb      	strb	r3, [r7, #23]
 801397e:	e006      	b.n	801398e <Sensor_ModelPublishSet+0xee>
    }
  }
  else
  {
    TRACE_M(TF_SENSOR_M, "Sensor server not initialized\r\n");
 8013980:	2100      	movs	r1, #0
 8013982:	4806      	ldr	r0, [pc, #24]	; (801399c <Sensor_ModelPublishSet+0xfc>)
 8013984:	f7f9 fdf4 	bl	800d570 <TraceHeader>
 8013988:	4808      	ldr	r0, [pc, #32]	; (80139ac <Sensor_ModelPublishSet+0x10c>)
 801398a:	f015 fe5b 	bl	8029644 <puts>
  }
  
  return result;
 801398e:	7dfb      	ldrb	r3, [r7, #23]
}
 8013990:	4618      	mov	r0, r3
 8013992:	371c      	adds	r7, #28
 8013994:	46bd      	mov	sp, r7
 8013996:	bd90      	pop	{r4, r7, pc}
 8013998:	20006e74 	.word	0x20006e74
 801399c:	080332a4 	.word	0x080332a4
 80139a0:	08030edc 	.word	0x08030edc
 80139a4:	08030244 	.word	0x08030244
 80139a8:	08030f08 	.word	0x08030f08
 80139ac:	08030940 	.word	0x08030940

080139b0 <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 80139b0:	b480      	push	{r7}
 80139b2:	af00      	add	r7, sp, #0
  return;
 80139b4:	bf00      	nop
}
 80139b6:	46bd      	mov	sp, r7
 80139b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139bc:	4770      	bx	lr

080139be <BLS_Init>:

__WEAK void BLS_Init( void )
{
 80139be:	b480      	push	{r7}
 80139c0:	af00      	add	r7, sp, #0
  return;
 80139c2:	bf00      	nop
}
 80139c4:	46bd      	mov	sp, r7
 80139c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ca:	4770      	bx	lr

080139cc <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 80139cc:	b480      	push	{r7}
 80139ce:	af00      	add	r7, sp, #0
  return;
 80139d0:	bf00      	nop
}
 80139d2:	46bd      	mov	sp, r7
 80139d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d8:	4770      	bx	lr

080139da <DIS_Init>:
__WEAK void DIS_Init( void )
{
 80139da:	b480      	push	{r7}
 80139dc:	af00      	add	r7, sp, #0
  return;
 80139de:	bf00      	nop
}
 80139e0:	46bd      	mov	sp, r7
 80139e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e6:	4770      	bx	lr

080139e8 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 80139e8:	b480      	push	{r7}
 80139ea:	af00      	add	r7, sp, #0
  return;
 80139ec:	bf00      	nop
}
 80139ee:	46bd      	mov	sp, r7
 80139f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f4:	4770      	bx	lr

080139f6 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 80139f6:	b480      	push	{r7}
 80139f8:	af00      	add	r7, sp, #0
  return;
 80139fa:	bf00      	nop
}
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 8013a04:	b480      	push	{r7}
 8013a06:	af00      	add	r7, sp, #0
  return;
 8013a08:	bf00      	nop
}
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a10:	4770      	bx	lr

08013a12 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 8013a12:	b480      	push	{r7}
 8013a14:	af00      	add	r7, sp, #0
  return;
 8013a16:	bf00      	nop
}
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr

08013a20 <IAS_Init>:
__WEAK void IAS_Init( void )
{
 8013a20:	b480      	push	{r7}
 8013a22:	af00      	add	r7, sp, #0
  return;
 8013a24:	bf00      	nop
}
 8013a26:	46bd      	mov	sp, r7
 8013a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a2c:	4770      	bx	lr

08013a2e <LLS_Init>:
__WEAK void LLS_Init( void )
{
 8013a2e:	b480      	push	{r7}
 8013a30:	af00      	add	r7, sp, #0
  return;
 8013a32:	bf00      	nop
}
 8013a34:	46bd      	mov	sp, r7
 8013a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a3a:	4770      	bx	lr

08013a3c <TPS_Init>:
__WEAK void TPS_Init( void )
{
 8013a3c:	b480      	push	{r7}
 8013a3e:	af00      	add	r7, sp, #0
  return;
 8013a40:	bf00      	nop
}
 8013a42:	46bd      	mov	sp, r7
 8013a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a48:	4770      	bx	lr

08013a4a <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 8013a4a:	b480      	push	{r7}
 8013a4c:	af00      	add	r7, sp, #0
  return;
 8013a4e:	bf00      	nop
}
 8013a50:	46bd      	mov	sp, r7
 8013a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a56:	4770      	bx	lr

08013a58 <P2PS_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
 8013a58:	b480      	push	{r7}
 8013a5a:	af00      	add	r7, sp, #0
  return;
 8013a5c:	bf00      	nop
}
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a64:	4770      	bx	lr

08013a66 <ZDD_STM_Init>:
__WEAK void ZDD_STM_Init( void )
{
 8013a66:	b480      	push	{r7}
 8013a68:	af00      	add	r7, sp, #0
  return;
 8013a6a:	bf00      	nop
}
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr

08013a74 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 8013a74:	b480      	push	{r7}
 8013a76:	af00      	add	r7, sp, #0
  return;
 8013a78:	bf00      	nop
}
 8013a7a:	46bd      	mov	sp, r7
 8013a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a80:	4770      	bx	lr

08013a82 <BVOPUS_STM_Init>:
__WEAK void MESH_Init( void )
{
  return;
}
__WEAK void BVOPUS_STM_Init( void )
{
 8013a82:	b480      	push	{r7}
 8013a84:	af00      	add	r7, sp, #0
  return;
 8013a86:	bf00      	nop
}
 8013a88:	46bd      	mov	sp, r7
 8013a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a8e:	4770      	bx	lr

08013a90 <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 8013a90:	b480      	push	{r7}
 8013a92:	af00      	add	r7, sp, #0
  return;
 8013a94:	bf00      	nop
}
 8013a96:	46bd      	mov	sp, r7
 8013a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a9c:	4770      	bx	lr
	...

08013aa0 <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 8013aa0:	b580      	push	{r7, lr}
 8013aa2:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 8013aa4:	4b04      	ldr	r3, [pc, #16]	; (8013ab8 <SVCCTL_Init+0x18>)
 8013aa6:	2200      	movs	r2, #0
 8013aa8:	771a      	strb	r2, [r3, #28]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 8013aaa:	4b04      	ldr	r3, [pc, #16]	; (8013abc <SVCCTL_Init+0x1c>)
 8013aac:	2200      	movs	r2, #0
 8013aae:	751a      	strb	r2, [r3, #20]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 8013ab0:	f000 f806 	bl	8013ac0 <SVCCTL_SvcInit>

  return;
 8013ab4:	bf00      	nop
}
 8013ab6:	bd80      	pop	{r7, pc}
 8013ab8:	200002a8 	.word	0x200002a8
 8013abc:	200002c8 	.word	0x200002c8

08013ac0 <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	af00      	add	r7, sp, #0
  BAS_Init();
 8013ac4:	f7ff ff74 	bl	80139b0 <BAS_Init>

  BLS_Init();
 8013ac8:	f7ff ff79 	bl	80139be <BLS_Init>

  CRS_STM_Init();
 8013acc:	f7ff ff7e 	bl	80139cc <CRS_STM_Init>

  DIS_Init();
 8013ad0:	f7ff ff83 	bl	80139da <DIS_Init>

  EDS_STM_Init();
 8013ad4:	f7ff ff88 	bl	80139e8 <EDS_STM_Init>

  HIDS_Init();
 8013ad8:	f7ff ff8d 	bl	80139f6 <HIDS_Init>

  HRS_Init();
 8013adc:	f7ff ff92 	bl	8013a04 <HRS_Init>

  HTS_Init();
 8013ae0:	f7ff ff97 	bl	8013a12 <HTS_Init>

  IAS_Init();
 8013ae4:	f7ff ff9c 	bl	8013a20 <IAS_Init>

  LLS_Init();
 8013ae8:	f7ff ffa1 	bl	8013a2e <LLS_Init>

  TPS_Init();
 8013aec:	f7ff ffa6 	bl	8013a3c <TPS_Init>

  MOTENV_STM_Init();
 8013af0:	f7ff ffab 	bl	8013a4a <MOTENV_STM_Init>

  P2PS_STM_Init();
 8013af4:	f7ff ffb0 	bl	8013a58 <P2PS_STM_Init>

  ZDD_STM_Init();
 8013af8:	f7ff ffb5 	bl	8013a66 <ZDD_STM_Init>

  OTAS_STM_Init();
 8013afc:	f7ff ffba 	bl	8013a74 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 8013b00:	f7ff ffbf 	bl	8013a82 <BVOPUS_STM_Init>

  MESH_Init();
 8013b04:	f7fe fa24 	bl	8011f50 <MESH_Init>

  SVCCTL_InitCustomSvc();
 8013b08:	f7ff ffc2 	bl	8013a90 <SVCCTL_InitCustomSvc>
  
  return;
 8013b0c:	bf00      	nop
}
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	3301      	adds	r3, #1
 8013b1c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 8013b1e:	2300      	movs	r3, #0
 8013b20:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 8013b22:	693b      	ldr	r3, [r7, #16]
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	2bff      	cmp	r3, #255	; 0xff
 8013b28:	d13f      	bne.n	8013baa <SVCCTL_UserEvtRx+0x9a>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 8013b2a:	693b      	ldr	r3, [r7, #16]
 8013b2c:	3302      	adds	r3, #2
 8013b2e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	881b      	ldrh	r3, [r3, #0]
 8013b34:	b29b      	uxth	r3, r3
 8013b36:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013b3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8013b3e:	d132      	bne.n	8013ba6 <SVCCTL_UserEvtRx+0x96>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8013b40:	2300      	movs	r3, #0
 8013b42:	757b      	strb	r3, [r7, #21]
 8013b44:	e00d      	b.n	8013b62 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 8013b46:	7d7b      	ldrb	r3, [r7, #21]
 8013b48:	4a27      	ldr	r2, [pc, #156]	; (8013be8 <SVCCTL_UserEvtRx+0xd8>)
 8013b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	4798      	blx	r3
 8013b52:	4603      	mov	r3, r0
 8013b54:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8013b56:	7dfb      	ldrb	r3, [r7, #23]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d108      	bne.n	8013b6e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 8013b5c:	7d7b      	ldrb	r3, [r7, #21]
 8013b5e:	3301      	adds	r3, #1
 8013b60:	757b      	strb	r3, [r7, #21]
 8013b62:	4b21      	ldr	r3, [pc, #132]	; (8013be8 <SVCCTL_UserEvtRx+0xd8>)
 8013b64:	7f1b      	ldrb	r3, [r3, #28]
 8013b66:	7d7a      	ldrb	r2, [r7, #21]
 8013b68:	429a      	cmp	r2, r3
 8013b6a:	d3ec      	bcc.n	8013b46 <SVCCTL_UserEvtRx+0x36>
 8013b6c:	e000      	b.n	8013b70 <SVCCTL_UserEvtRx+0x60>
            {
              /**
               *  The event has been managed. The Event processing should be stopped
               */
              break;
 8013b6e:	bf00      	nop
            }
          }
#endif
#if (BLE_CFG_CLT_MAX_NBR_CB > 0)
          /* For Client event handler */
          event_notification_status = SVCCTL_EvtNotAck;
 8013b70:	2300      	movs	r3, #0
 8013b72:	75fb      	strb	r3, [r7, #23]
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8013b74:	2300      	movs	r3, #0
 8013b76:	757b      	strb	r3, [r7, #21]
 8013b78:	e00d      	b.n	8013b96 <SVCCTL_UserEvtRx+0x86>
          {
            event_notification_status = SVCCTL_CltHandler.SVCCTL_CltHandlerTable[index](pckt);
 8013b7a:	7d7b      	ldrb	r3, [r7, #21]
 8013b7c:	4a1b      	ldr	r2, [pc, #108]	; (8013bec <SVCCTL_UserEvtRx+0xdc>)
 8013b7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b82:	6878      	ldr	r0, [r7, #4]
 8013b84:	4798      	blx	r3
 8013b86:	4603      	mov	r3, r0
 8013b88:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Client, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Client
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 8013b8a:	7dfb      	ldrb	r3, [r7, #23]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d108      	bne.n	8013ba2 <SVCCTL_UserEvtRx+0x92>
          for(index = 0; index <SVCCTL_CltHandler.NbreOfRegisteredHandler; index++)
 8013b90:	7d7b      	ldrb	r3, [r7, #21]
 8013b92:	3301      	adds	r3, #1
 8013b94:	757b      	strb	r3, [r7, #21]
 8013b96:	4b15      	ldr	r3, [pc, #84]	; (8013bec <SVCCTL_UserEvtRx+0xdc>)
 8013b98:	7d1b      	ldrb	r3, [r3, #20]
 8013b9a:	7d7a      	ldrb	r2, [r7, #21]
 8013b9c:	429a      	cmp	r2, r3
 8013b9e:	d3ec      	bcc.n	8013b7a <SVCCTL_UserEvtRx+0x6a>
               */
              break;
            }
          }
#endif
          break;
 8013ba0:	e002      	b.n	8013ba8 <SVCCTL_UserEvtRx+0x98>
              break;
 8013ba2:	bf00      	nop
          break;
 8013ba4:	e000      	b.n	8013ba8 <SVCCTL_UserEvtRx+0x98>

        default:
          break;
 8013ba6:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 8013ba8:	e000      	b.n	8013bac <SVCCTL_UserEvtRx+0x9c>

    default:
      break;
 8013baa:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 8013bac:	7dfb      	ldrb	r3, [r7, #23]
 8013bae:	2b02      	cmp	r3, #2
 8013bb0:	d00f      	beq.n	8013bd2 <SVCCTL_UserEvtRx+0xc2>
 8013bb2:	2b02      	cmp	r3, #2
 8013bb4:	dc10      	bgt.n	8013bd8 <SVCCTL_UserEvtRx+0xc8>
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d002      	beq.n	8013bc0 <SVCCTL_UserEvtRx+0xb0>
 8013bba:	2b01      	cmp	r3, #1
 8013bbc:	d006      	beq.n	8013bcc <SVCCTL_UserEvtRx+0xbc>
 8013bbe:	e00b      	b.n	8013bd8 <SVCCTL_UserEvtRx+0xc8>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 8013bc0:	6878      	ldr	r0, [r7, #4]
 8013bc2:	f7ef fda9 	bl	8003718 <SVCCTL_App_Notification>
 8013bc6:	4603      	mov	r3, r0
 8013bc8:	75bb      	strb	r3, [r7, #22]
      break;
 8013bca:	e008      	b.n	8013bde <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 8013bcc:	2301      	movs	r3, #1
 8013bce:	75bb      	strb	r3, [r7, #22]
      break;
 8013bd0:	e005      	b.n	8013bde <SVCCTL_UserEvtRx+0xce>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	75bb      	strb	r3, [r7, #22]
      break;
 8013bd6:	e002      	b.n	8013bde <SVCCTL_UserEvtRx+0xce>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 8013bd8:	2301      	movs	r3, #1
 8013bda:	75bb      	strb	r3, [r7, #22]
      break;
 8013bdc:	bf00      	nop
  }

  return (return_status);
 8013bde:	7dbb      	ldrb	r3, [r7, #22]
}
 8013be0:	4618      	mov	r0, r3
 8013be2:	3718      	adds	r7, #24
 8013be4:	46bd      	mov	sp, r7
 8013be6:	bd80      	pop	{r7, pc}
 8013be8:	200002a8 	.word	0x200002a8
 8013bec:	200002c8 	.word	0x200002c8

08013bf0 <Vendor_WriteLocalDataCb>:
MOBLE_RESULT Vendor_WriteLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *data, 
                                     MOBLEUINT32 length, 
                                     MOBLEBOOL response)
{
 8013bf0:	b590      	push	{r4, r7, lr}
 8013bf2:	b089      	sub	sp, #36	; 0x24
 8013bf4:	af02      	add	r7, sp, #8
 8013bf6:	60f8      	str	r0, [r7, #12]
 8013bf8:	607a      	str	r2, [r7, #4]
 8013bfa:	603b      	str	r3, [r7, #0]
 8013bfc:	460b      	mov	r3, r1
 8013bfe:	72fb      	strb	r3, [r7, #11]
  
  MOBLE_COMMAND_STATUS status = STATUS_SUCCESS;
 8013c00:	2300      	movs	r3, #0
 8013c02:	75fb      	strb	r3, [r7, #23]
  
  /* Traces for the Data */
  uint16_t idx = 0;
 8013c04:	2300      	movs	r3, #0
 8013c06:	82bb      	strh	r3, [r7, #20]
  TRACE_I(TF_VENDOR_M, 
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	4619      	mov	r1, r3
 8013c0e:	68fb      	ldr	r3, [r7, #12]
 8013c10:	889b      	ldrh	r3, [r3, #4]
 8013c12:	4618      	mov	r0, r3
 8013c14:	68fb      	ldr	r3, [r7, #12]
 8013c16:	88db      	ldrh	r3, [r3, #6]
 8013c18:	461c      	mov	r4, r3
 8013c1a:	7afb      	ldrb	r3, [r7, #11]
 8013c1c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013c20:	9201      	str	r2, [sp, #4]
 8013c22:	9300      	str	r3, [sp, #0]
 8013c24:	4623      	mov	r3, r4
 8013c26:	4602      	mov	r2, r0
 8013c28:	4840      	ldr	r0, [pc, #256]	; (8013d2c <Vendor_WriteLocalDataCb+0x13c>)
 8013c2a:	f015 fca5 	bl	8029578 <iprintf>
          pmsgParams->peer_addr, 
          pmsgParams->dst_peer, 
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M, "DATA_RECEIVED length = %ld\n\r",length);
 8013c2e:	6839      	ldr	r1, [r7, #0]
 8013c30:	483f      	ldr	r0, [pc, #252]	; (8013d30 <Vendor_WriteLocalDataCb+0x140>)
 8013c32:	f015 fca1 	bl	8029578 <iprintf>
  
         for (idx=0; idx<length; idx++)
 8013c36:	2300      	movs	r3, #0
 8013c38:	82bb      	strh	r3, [r7, #20]
 8013c3a:	e00e      	b.n	8013c5a <Vendor_WriteLocalDataCb+0x6a>
         {
           TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]);  
 8013c3c:	8ab9      	ldrh	r1, [r7, #20]
 8013c3e:	8abb      	ldrh	r3, [r7, #20]
 8013c40:	687a      	ldr	r2, [r7, #4]
 8013c42:	4413      	add	r3, r2
 8013c44:	781b      	ldrb	r3, [r3, #0]
 8013c46:	461a      	mov	r2, r3
 8013c48:	483a      	ldr	r0, [pc, #232]	; (8013d34 <Vendor_WriteLocalDataCb+0x144>)
 8013c4a:	f015 fc95 	bl	8029578 <iprintf>
           TRACE_I(TF_VENDOR_M,"\n\r");
 8013c4e:	483a      	ldr	r0, [pc, #232]	; (8013d38 <Vendor_WriteLocalDataCb+0x148>)
 8013c50:	f015 fc92 	bl	8029578 <iprintf>
         for (idx=0; idx<length; idx++)
 8013c54:	8abb      	ldrh	r3, [r7, #20]
 8013c56:	3301      	adds	r3, #1
 8013c58:	82bb      	strh	r3, [r7, #20]
 8013c5a:	8abb      	ldrh	r3, [r7, #20]
 8013c5c:	683a      	ldr	r2, [r7, #0]
 8013c5e:	429a      	cmp	r2, r3
 8013c60:	d8ec      	bhi.n	8013c3c <Vendor_WriteLocalDataCb+0x4c>
         }
         
           switch (command)
 8013c62:	7afb      	ldrb	r3, [r7, #11]
 8013c64:	2b0e      	cmp	r3, #14
 8013c66:	d016      	beq.n	8013c96 <Vendor_WriteLocalDataCb+0xa6>
 8013c68:	2b0e      	cmp	r3, #14
 8013c6a:	dc1a      	bgt.n	8013ca2 <Vendor_WriteLocalDataCb+0xb2>
 8013c6c:	2b01      	cmp	r3, #1
 8013c6e:	d002      	beq.n	8013c76 <Vendor_WriteLocalDataCb+0x86>
 8013c70:	2b03      	cmp	r3, #3
 8013c72:	d006      	beq.n	8013c82 <Vendor_WriteLocalDataCb+0x92>
 8013c74:	e015      	b.n	8013ca2 <Vendor_WriteLocalDataCb+0xb2>
           case APPLI_TEST_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.TestCommand_cb(data, length);
 8013c76:	4b31      	ldr	r3, [pc, #196]	; (8013d3c <Vendor_WriteLocalDataCb+0x14c>)
 8013c78:	689b      	ldr	r3, [r3, #8]
 8013c7a:	6839      	ldr	r1, [r7, #0]
 8013c7c:	6878      	ldr	r0, [r7, #4]
 8013c7e:	4798      	blx	r3
               break;
 8013c80:	e012      	b.n	8013ca8 <Vendor_WriteLocalDataCb+0xb8>
               /* 
               Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
               B0 - Sub-Cmd LED
               B1-B7 - Data Bytes       
               */          
               VendorAppli_cb.LEDControlCommand_Cb(data, length, pmsgParams->elementIndex,\
 8013c82:	4b2e      	ldr	r3, [pc, #184]	; (8013d3c <Vendor_WriteLocalDataCb+0x14c>)
 8013c84:	681c      	ldr	r4, [r3, #0]
 8013c86:	68fb      	ldr	r3, [r7, #12]
 8013c88:	781a      	ldrb	r2, [r3, #0]
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	88db      	ldrh	r3, [r3, #6]
 8013c8e:	6839      	ldr	r1, [r7, #0]
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	47a0      	blx	r4
                 pmsgParams->dst_peer);
               break;
 8013c94:	e008      	b.n	8013ca8 <Vendor_WriteLocalDataCb+0xb8>
           case APPLI_DATA_CNTRL_CMD:
             {
               /*This is callback when ever command is coming for test of response
                 time,command reached count, data byte sent
               */          
               VendorAppli_cb.DataControlCommand_cb(data,length);    
 8013c96:	4b29      	ldr	r3, [pc, #164]	; (8013d3c <Vendor_WriteLocalDataCb+0x14c>)
 8013c98:	695b      	ldr	r3, [r3, #20]
 8013c9a:	6839      	ldr	r1, [r7, #0]
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	4798      	blx	r3
               break;       
 8013ca0:	e002      	b.n	8013ca8 <Vendor_WriteLocalDataCb+0xb8>
             } 
             /* Default case - Not valid command */
           default:
             {
               status = STATUS_INVALID_COMMAND;
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	75fb      	strb	r3, [r7, #23]
               break;
 8013ca6:	bf00      	nop
           }
                   
         /* this expression is used to send the status of data received whether it
         is correct or not , First 3 bits are for status and last 5 bit are for sub commands
         */
         ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 8013ca8:	4b25      	ldr	r3, [pc, #148]	; (8013d40 <Vendor_WriteLocalDataCb+0x150>)
 8013caa:	781b      	ldrb	r3, [r3, #0]
 8013cac:	b25a      	sxtb	r2, r3
 8013cae:	7dfb      	ldrb	r3, [r7, #23]
 8013cb0:	015b      	lsls	r3, r3, #5
 8013cb2:	b25b      	sxtb	r3, r3
 8013cb4:	4313      	orrs	r3, r2
 8013cb6:	b25b      	sxtb	r3, r3
 8013cb8:	b2da      	uxtb	r2, r3
 8013cba:	4b21      	ldr	r3, [pc, #132]	; (8013d40 <Vendor_WriteLocalDataCb+0x150>)
 8013cbc:	701a      	strb	r2, [r3, #0]
         If response is true, Message response will be sent      
         Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
         B0 - Sub-Cmd 
         B1-B7 - Response Bytes if any 
         */
         if (response == MOBLE_TRUE)
 8013cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013cc2:	2b01      	cmp	r3, #1
 8013cc4:	d128      	bne.n	8013d18 <Vendor_WriteLocalDataCb+0x128>
         {
           if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	88db      	ldrh	r3, [r3, #6]
 8013cca:	b21b      	sxth	r3, r3
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	dd15      	ble.n	8013cfc <Vendor_WriteLocalDataCb+0x10c>
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	88db      	ldrh	r3, [r3, #6]
 8013cd4:	b21b      	sxth	r3, r3
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	db10      	blt.n	8013cfc <Vendor_WriteLocalDataCb+0x10c>
           {
             VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 8013cda:	4b1a      	ldr	r3, [pc, #104]	; (8013d44 <Vendor_WriteLocalDataCb+0x154>)
 8013cdc:	881b      	ldrh	r3, [r3, #0]
 8013cde:	7afa      	ldrb	r2, [r7, #11]
 8013ce0:	9300      	str	r3, [sp, #0]
 8013ce2:	4b17      	ldr	r3, [pc, #92]	; (8013d40 <Vendor_WriteLocalDataCb+0x150>)
 8013ce4:	68f9      	ldr	r1, [r7, #12]
 8013ce6:	2030      	movs	r0, #48	; 0x30
 8013ce8:	f011 fe6c 	bl	80259c4 <VendorModel_SendResponse>
             TRACE_M(TF_VENDOR,"Sending Response for Unicast \n\r");
 8013cec:	2100      	movs	r1, #0
 8013cee:	4816      	ldr	r0, [pc, #88]	; (8013d48 <Vendor_WriteLocalDataCb+0x158>)
 8013cf0:	f7f9 fc3e 	bl	800d570 <TraceHeader>
 8013cf4:	4815      	ldr	r0, [pc, #84]	; (8013d4c <Vendor_WriteLocalDataCb+0x15c>)
 8013cf6:	f015 fc3f 	bl	8029578 <iprintf>
 8013cfa:	e00d      	b.n	8013d18 <Vendor_WriteLocalDataCb+0x128>
           }
           else
           {
             /* Randomize responses*/
             BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 8013cfc:	4b11      	ldr	r3, [pc, #68]	; (8013d44 <Vendor_WriteLocalDataCb+0x154>)
 8013cfe:	881b      	ldrh	r3, [r3, #0]
 8013d00:	7af9      	ldrb	r1, [r7, #11]
 8013d02:	4a0f      	ldr	r2, [pc, #60]	; (8013d40 <Vendor_WriteLocalDataCb+0x150>)
 8013d04:	68f8      	ldr	r0, [r7, #12]
 8013d06:	f7f3 f9ab 	bl	8007060 <BLEMesh_ModelsDelayPacket>
             TRACE_M(TF_VENDOR,"Sending Response for Multicast \n\r");
 8013d0a:	2100      	movs	r1, #0
 8013d0c:	480e      	ldr	r0, [pc, #56]	; (8013d48 <Vendor_WriteLocalDataCb+0x158>)
 8013d0e:	f7f9 fc2f 	bl	800d570 <TraceHeader>
 8013d12:	480f      	ldr	r0, [pc, #60]	; (8013d50 <Vendor_WriteLocalDataCb+0x160>)
 8013d14:	f015 fc30 	bl	8029578 <iprintf>
           }		
         }
         
         if (status == STATUS_SUCCESS)
 8013d18:	7dfb      	ldrb	r3, [r7, #23]
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	d101      	bne.n	8013d22 <Vendor_WriteLocalDataCb+0x132>
         {
           return MOBLE_RESULT_SUCCESS;  
 8013d1e:	2300      	movs	r3, #0
 8013d20:	e000      	b.n	8013d24 <Vendor_WriteLocalDataCb+0x134>
         }
         else
         {
           return MOBLE_RESULT_FAIL;
 8013d22:	2302      	movs	r3, #2
         }
         
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	371c      	adds	r7, #28
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd90      	pop	{r4, r7, pc}
 8013d2c:	08030f70 	.word	0x08030f70
 8013d30:	08030fe4 	.word	0x08030fe4
 8013d34:	08031004 	.word	0x08031004
 8013d38:	08031014 	.word	0x08031014
 8013d3c:	08032be0 	.word	0x08032be0
 8013d40:	20004460 	.word	0x20004460
 8013d44:	2000449c 	.word	0x2000449c
 8013d48:	080332bc 	.word	0x080332bc
 8013d4c:	08031018 	.word	0x08031018
 8013d50:	08031038 	.word	0x08031038

08013d54 <Vendor_ReadLocalDataCb>:
MOBLE_RESULT Vendor_ReadLocalDataCb(MODEL_MessageHeader_t *pmsgParams,  
                                   MOBLEUINT8 command, 
                                   MOBLEUINT8 const *data, 
                                   MOBLEUINT32 length, 
                                   MOBLEBOOL response)
{  
 8013d54:	b590      	push	{r4, r7, lr}
 8013d56:	b089      	sub	sp, #36	; 0x24
 8013d58:	af02      	add	r7, sp, #8
 8013d5a:	60f8      	str	r0, [r7, #12]
 8013d5c:	607a      	str	r2, [r7, #4]
 8013d5e:	603b      	str	r3, [r7, #0]
 8013d60:	460b      	mov	r3, r1
 8013d62:	72fb      	strb	r3, [r7, #11]
 
 MOBLE_RESULT status = MOBLE_RESULT_SUCCESS;
 8013d64:	2300      	movs	r3, #0
 8013d66:	75fb      	strb	r3, [r7, #23]
 MOBLEUINT8 getBuff[5];
 
 /* Traces for the Data */
  TRACE_M(TF_VENDOR_M,
 8013d68:	2100      	movs	r1, #0
 8013d6a:	4876      	ldr	r0, [pc, #472]	; (8013f44 <Vendor_ReadLocalDataCb+0x1f0>)
 8013d6c:	f7f9 fc00 	bl	800d570 <TraceHeader>
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	781b      	ldrb	r3, [r3, #0]
 8013d74:	4619      	mov	r1, r3
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	889b      	ldrh	r3, [r3, #4]
 8013d7a:	4618      	mov	r0, r3
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	88db      	ldrh	r3, [r3, #6]
 8013d80:	461c      	mov	r4, r3
 8013d82:	7afb      	ldrb	r3, [r7, #11]
 8013d84:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013d88:	9201      	str	r2, [sp, #4]
 8013d8a:	9300      	str	r3, [sp, #0]
 8013d8c:	4623      	mov	r3, r4
 8013d8e:	4602      	mov	r2, r0
 8013d90:	486d      	ldr	r0, [pc, #436]	; (8013f48 <Vendor_ReadLocalDataCb+0x1f4>)
 8013d92:	f015 fbf1 	bl	8029578 <iprintf>
          pmsgParams->peer_addr, 
          pmsgParams->dst_peer, 
          command, 
          response);
  
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r",length);
 8013d96:	6839      	ldr	r1, [r7, #0]
 8013d98:	486c      	ldr	r0, [pc, #432]	; (8013f4c <Vendor_ReadLocalDataCb+0x1f8>)
 8013d9a:	f015 fbed 	bl	8029578 <iprintf>
  
        for (MOBLEUINT8 idx=0; idx<length; idx++)
 8013d9e:	2300      	movs	r3, #0
 8013da0:	75bb      	strb	r3, [r7, #22]
 8013da2:	e00e      	b.n	8013dc2 <Vendor_ReadLocalDataCb+0x6e>
        {
          TRACE_I(TF_VENDOR_M,"data[%d]= %d",idx,data[idx]); 
 8013da4:	7db9      	ldrb	r1, [r7, #22]
 8013da6:	7dbb      	ldrb	r3, [r7, #22]
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	4413      	add	r3, r2
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	461a      	mov	r2, r3
 8013db0:	4867      	ldr	r0, [pc, #412]	; (8013f50 <Vendor_ReadLocalDataCb+0x1fc>)
 8013db2:	f015 fbe1 	bl	8029578 <iprintf>
          TRACE_I(TF_VENDOR_M,"\n\r");
 8013db6:	4867      	ldr	r0, [pc, #412]	; (8013f54 <Vendor_ReadLocalDataCb+0x200>)
 8013db8:	f015 fbde 	bl	8029578 <iprintf>
        for (MOBLEUINT8 idx=0; idx<length; idx++)
 8013dbc:	7dbb      	ldrb	r3, [r7, #22]
 8013dbe:	3301      	adds	r3, #1
 8013dc0:	75bb      	strb	r3, [r7, #22]
 8013dc2:	7dbb      	ldrb	r3, [r7, #22]
 8013dc4:	683a      	ldr	r2, [r7, #0]
 8013dc6:	429a      	cmp	r2, r3
 8013dc8:	d8ec      	bhi.n	8013da4 <Vendor_ReadLocalDataCb+0x50>
        }
        
          /* Check which command is in packet */
          switch(command)
 8013dca:	7afb      	ldrb	r3, [r7, #11]
 8013dcc:	3b01      	subs	r3, #1
 8013dce:	2b0d      	cmp	r3, #13
 8013dd0:	d866      	bhi.n	8013ea0 <Vendor_ReadLocalDataCb+0x14c>
 8013dd2:	a201      	add	r2, pc, #4	; (adr r2, 8013dd8 <Vendor_ReadLocalDataCb+0x84>)
 8013dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013dd8:	08013e11 	.word	0x08013e11
 8013ddc:	08013e43 	.word	0x08013e43
 8013de0:	08013e6d 	.word	0x08013e6d
 8013de4:	08013e53 	.word	0x08013e53
 8013de8:	08013ea7 	.word	0x08013ea7
 8013dec:	08013ea1 	.word	0x08013ea1
 8013df0:	08013ea1 	.word	0x08013ea1
 8013df4:	08013ea1 	.word	0x08013ea1
 8013df8:	08013ea1 	.word	0x08013ea1
 8013dfc:	08013ea1 	.word	0x08013ea1
 8013e00:	08013ea1 	.word	0x08013ea1
 8013e04:	08013ea1 	.word	0x08013ea1
 8013e08:	08013ea1 	.word	0x08013ea1
 8013e0c:	08013e91 	.word	0x08013e91
              B0 - Sub-Cmd for APPLI_TEST_CMD
              B1-B7 - Data Bytes if any  
              this function gives back the number count of command received by 
              the receiver.
              */
              VendorAppli_cb.GetTestCount(getBuff);
 8013e10:	4b51      	ldr	r3, [pc, #324]	; (8013f58 <Vendor_ReadLocalDataCb+0x204>)
 8013e12:	691b      	ldr	r3, [r3, #16]
 8013e14:	f107 0210 	add.w	r2, r7, #16
 8013e18:	4610      	mov	r0, r2
 8013e1a:	4798      	blx	r3
              ResponseBuffer[0] = APPLI_TEST_INC_COUNTER;
 8013e1c:	4b4f      	ldr	r3, [pc, #316]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e1e:	2205      	movs	r2, #5
 8013e20:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = getBuff[0];
 8013e22:	7c3a      	ldrb	r2, [r7, #16]
 8013e24:	4b4d      	ldr	r3, [pc, #308]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e26:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = getBuff[1];
 8013e28:	7c7a      	ldrb	r2, [r7, #17]
 8013e2a:	4b4c      	ldr	r3, [pc, #304]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e2c:	709a      	strb	r2, [r3, #2]
              ResponseBuffer[3] = getBuff[2];
 8013e2e:	7cba      	ldrb	r2, [r7, #18]
 8013e30:	4b4a      	ldr	r3, [pc, #296]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e32:	70da      	strb	r2, [r3, #3]
              ResponseBuffer[4] = getBuff[3];
 8013e34:	7cfa      	ldrb	r2, [r7, #19]
 8013e36:	4b49      	ldr	r3, [pc, #292]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e38:	711a      	strb	r2, [r3, #4]
              BuffLength = 5;
 8013e3a:	4b49      	ldr	r3, [pc, #292]	; (8013f60 <Vendor_ReadLocalDataCb+0x20c>)
 8013e3c:	2205      	movs	r2, #5
 8013e3e:	801a      	strh	r2, [r3, #0]
              break;
 8013e40:	e032      	b.n	8013ea8 <Vendor_ReadLocalDataCb+0x154>
              Message Received     B0     B1    B2      B3    B4    B5    B6     B7 
              B0 - Sub-Cmd for APPLI_DEVICE_INFO_CMD
              B1-B7 - Data Bytes if any      
              
              */
              status =  VendorAppli_cb.DeviceInfoCommand_cb(data, length);
 8013e42:	4b45      	ldr	r3, [pc, #276]	; (8013f58 <Vendor_ReadLocalDataCb+0x204>)
 8013e44:	685b      	ldr	r3, [r3, #4]
 8013e46:	6839      	ldr	r1, [r7, #0]
 8013e48:	6878      	ldr	r0, [r7, #4]
 8013e4a:	4798      	blx	r3
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	75fb      	strb	r3, [r7, #23]
              break;
 8013e50:	e02a      	b.n	8013ea8 <Vendor_ReadLocalDataCb+0x154>
          case APPLI_ELEMENT_TYPE_CMD:
            {
              /*
              Message Received with Command APPLI_ELEMENT_TYPE_CMD
              */
              ResponseBuffer[0] = ELEMENT_TYPE_LED;
 8013e52:	4b42      	ldr	r3, [pc, #264]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e54:	2201      	movs	r2, #1
 8013e56:	701a      	strb	r2, [r3, #0]
              ResponseBuffer[1] = ELEMENT_TYPE_LED;
 8013e58:	4b40      	ldr	r3, [pc, #256]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e5a:	2201      	movs	r2, #1
 8013e5c:	705a      	strb	r2, [r3, #1]
              ResponseBuffer[2] = ELEMENT_TYPE_SWITCH;
 8013e5e:	4b3f      	ldr	r3, [pc, #252]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e60:	2202      	movs	r2, #2
 8013e62:	709a      	strb	r2, [r3, #2]
              BuffLength  = 3;      
 8013e64:	4b3e      	ldr	r3, [pc, #248]	; (8013f60 <Vendor_ReadLocalDataCb+0x20c>)
 8013e66:	2203      	movs	r2, #3
 8013e68:	801a      	strh	r2, [r3, #0]
              break;
 8013e6a:	e01d      	b.n	8013ea8 <Vendor_ReadLocalDataCb+0x154>
              /*
              Message Received with Command APPLI_LED_CONTROL_STATUS_CMD
              ResponseBuffer will send the response of selected Element
              */
      
      TRACE_M(TF_VENDOR,"Appli_LED_Control_Status callback received for elementIndex %d \r\n", pmsgParams->elementIndex);     
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	4835      	ldr	r0, [pc, #212]	; (8013f44 <Vendor_ReadLocalDataCb+0x1f0>)
 8013e70:	f7f9 fb7e 	bl	800d570 <TraceHeader>
 8013e74:	68fb      	ldr	r3, [r7, #12]
 8013e76:	781b      	ldrb	r3, [r3, #0]
 8013e78:	4619      	mov	r1, r3
 8013e7a:	483a      	ldr	r0, [pc, #232]	; (8013f64 <Vendor_ReadLocalDataCb+0x210>)
 8013e7c:	f015 fb7c 	bl	8029578 <iprintf>
      /*User Need to send the status as per the element selected*/
                ResponseBuffer[0] = Appli_LedState;
 8013e80:	4b39      	ldr	r3, [pc, #228]	; (8013f68 <Vendor_ReadLocalDataCb+0x214>)
 8013e82:	781a      	ldrb	r2, [r3, #0]
 8013e84:	4b35      	ldr	r3, [pc, #212]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013e86:	701a      	strb	r2, [r3, #0]
              BuffLength = 1;  
 8013e88:	4b35      	ldr	r3, [pc, #212]	; (8013f60 <Vendor_ReadLocalDataCb+0x20c>)
 8013e8a:	2201      	movs	r2, #1
 8013e8c:	801a      	strh	r2, [r3, #0]
              
              break;
 8013e8e:	e00b      	b.n	8013ea8 <Vendor_ReadLocalDataCb+0x154>
            {
              /* 
              Message Received with Command APPLI_DATA_CNTRL_CMD
              Call the Data Read Callback to fill Response Buffer with local data
              */ 
              status =  VendorAppli_cb.DataControlCommand_cb(data, length);
 8013e90:	4b31      	ldr	r3, [pc, #196]	; (8013f58 <Vendor_ReadLocalDataCb+0x204>)
 8013e92:	695b      	ldr	r3, [r3, #20]
 8013e94:	6839      	ldr	r1, [r7, #0]
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	4798      	blx	r3
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	75fb      	strb	r3, [r7, #23]
              break;       
 8013e9e:	e003      	b.n	8013ea8 <Vendor_ReadLocalDataCb+0x154>
            }  
            
          default:
            {
              status = MOBLE_RESULT_INVALIDARG;
 8013ea0:	2303      	movs	r3, #3
 8013ea2:	75fb      	strb	r3, [r7, #23]
              break;
 8013ea4:	e000      	b.n	8013ea8 <Vendor_ReadLocalDataCb+0x154>
              break;
 8013ea6:	bf00      	nop
          }
  
        /* this expression is used to send the status of data received whether it
        is correct or not , First 3 bits are for status and last 5 bit are for sub commands
        */
        ResponseBuffer[0] = ResponseBuffer[0] | (status << 5);
 8013ea8:	4b2c      	ldr	r3, [pc, #176]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013eaa:	781b      	ldrb	r3, [r3, #0]
 8013eac:	b25a      	sxtb	r2, r3
 8013eae:	7dfb      	ldrb	r3, [r7, #23]
 8013eb0:	015b      	lsls	r3, r3, #5
 8013eb2:	b25b      	sxtb	r3, r3
 8013eb4:	4313      	orrs	r3, r2
 8013eb6:	b25b      	sxtb	r3, r3
 8013eb8:	b2da      	uxtb	r2, r3
 8013eba:	4b28      	ldr	r3, [pc, #160]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013ebc:	701a      	strb	r2, [r3, #0]
        /* Check if the command executed successfully or not */ 
        
        if (MOBLE_RESULT_SUCCESS == status)
 8013ebe:	7dfb      	ldrb	r3, [r7, #23]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d11b      	bne.n	8013efc <Vendor_ReadLocalDataCb+0x1a8>
          Read Command will always be reliable      
          Message Response     B0     B1    B2      B3    B4    B5    B6     B7 
          B0 - Sub-Cmd for which response is needed
          B1-B7 - Data Bytes if any 
          */
         if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013ec4:	68fb      	ldr	r3, [r7, #12]
 8013ec6:	88db      	ldrh	r3, [r3, #6]
 8013ec8:	b21b      	sxth	r3, r3
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	dd0e      	ble.n	8013eec <Vendor_ReadLocalDataCb+0x198>
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	88db      	ldrh	r3, [r3, #6]
 8013ed2:	b21b      	sxth	r3, r3
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	db09      	blt.n	8013eec <Vendor_ReadLocalDataCb+0x198>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, BuffLength);
 8013ed8:	4b21      	ldr	r3, [pc, #132]	; (8013f60 <Vendor_ReadLocalDataCb+0x20c>)
 8013eda:	881b      	ldrh	r3, [r3, #0]
 8013edc:	7afa      	ldrb	r2, [r7, #11]
 8013ede:	9300      	str	r3, [sp, #0]
 8013ee0:	4b1e      	ldr	r3, [pc, #120]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013ee2:	68f9      	ldr	r1, [r7, #12]
 8013ee4:	2030      	movs	r0, #48	; 0x30
 8013ee6:	f011 fd6d 	bl	80259c4 <VendorModel_SendResponse>
 8013eea:	e020      	b.n	8013f2e <Vendor_ReadLocalDataCb+0x1da>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, BuffLength);
 8013eec:	4b1c      	ldr	r3, [pc, #112]	; (8013f60 <Vendor_ReadLocalDataCb+0x20c>)
 8013eee:	881b      	ldrh	r3, [r3, #0]
 8013ef0:	7af9      	ldrb	r1, [r7, #11]
 8013ef2:	4a1a      	ldr	r2, [pc, #104]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013ef4:	68f8      	ldr	r0, [r7, #12]
 8013ef6:	f7f3 f8b3 	bl	8007060 <BLEMesh_ModelsDelayPacket>
 8013efa:	e018      	b.n	8013f2e <Vendor_ReadLocalDataCb+0x1da>
          }
        }
        /* Command not successfully processed */
        else
        {
          if (ADDRESS_IS_UNICAST(pmsgParams->dst_peer))
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	88db      	ldrh	r3, [r3, #6]
 8013f00:	b21b      	sxth	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	dd0d      	ble.n	8013f22 <Vendor_ReadLocalDataCb+0x1ce>
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	88db      	ldrh	r3, [r3, #6]
 8013f0a:	b21b      	sxth	r3, r3
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	db08      	blt.n	8013f22 <Vendor_ReadLocalDataCb+0x1ce>
          {
            VendorModel_SendResponse(VENDOR_STMICRO_CID, pmsgParams, command, ResponseBuffer, 1);
 8013f10:	7afa      	ldrb	r2, [r7, #11]
 8013f12:	2301      	movs	r3, #1
 8013f14:	9300      	str	r3, [sp, #0]
 8013f16:	4b11      	ldr	r3, [pc, #68]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013f18:	68f9      	ldr	r1, [r7, #12]
 8013f1a:	2030      	movs	r0, #48	; 0x30
 8013f1c:	f011 fd52 	bl	80259c4 <VendorModel_SendResponse>
 8013f20:	e005      	b.n	8013f2e <Vendor_ReadLocalDataCb+0x1da>
          }
          else
          {
            /* Randomize responses*/
            BLEMesh_ModelsDelayPacket(pmsgParams, command, ResponseBuffer, 1);
 8013f22:	7af9      	ldrb	r1, [r7, #11]
 8013f24:	2301      	movs	r3, #1
 8013f26:	4a0d      	ldr	r2, [pc, #52]	; (8013f5c <Vendor_ReadLocalDataCb+0x208>)
 8013f28:	68f8      	ldr	r0, [r7, #12]
 8013f2a:	f7f3 f899 	bl	8007060 <BLEMesh_ModelsDelayPacket>
          }
        }
        
        if (status == MOBLE_RESULT_SUCCESS)
 8013f2e:	7dfb      	ldrb	r3, [r7, #23]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d101      	bne.n	8013f38 <Vendor_ReadLocalDataCb+0x1e4>
        {
          return MOBLE_RESULT_SUCCESS;  
 8013f34:	2300      	movs	r3, #0
 8013f36:	e000      	b.n	8013f3a <Vendor_ReadLocalDataCb+0x1e6>
        }
        else
        {
          return MOBLE_RESULT_FAIL;
 8013f38:	2302      	movs	r3, #2
        }
}
 8013f3a:	4618      	mov	r0, r3
 8013f3c:	371c      	adds	r7, #28
 8013f3e:	46bd      	mov	sp, r7
 8013f40:	bd90      	pop	{r4, r7, pc}
 8013f42:	bf00      	nop
 8013f44:	080332d4 	.word	0x080332d4
 8013f48:	0803105c 	.word	0x0803105c
 8013f4c:	08030fe4 	.word	0x08030fe4
 8013f50:	08031004 	.word	0x08031004
 8013f54:	08031014 	.word	0x08031014
 8013f58:	08032be0 	.word	0x08032be0
 8013f5c:	20004460 	.word	0x20004460
 8013f60:	2000449c 	.word	0x2000449c
 8013f64:	080310d4 	.word	0x080310d4
 8013f68:	2000443a 	.word	0x2000443a

08013f6c <Vendor_OnResponseDataCb>:
MOBLE_RESULT Vendor_OnResponseDataCb(MODEL_MessageHeader_t *pmsgParam,  
                                     MOBLEUINT8 command, 
                                     MOBLEUINT8 const *pRxData, 
                                     MOBLEUINT32 dataLength, 
                                     MOBLEBOOL response)
{
 8013f6c:	b590      	push	{r4, r7, lr}
 8013f6e:	b08b      	sub	sp, #44	; 0x2c
 8013f70:	af02      	add	r7, sp, #8
 8013f72:	60f8      	str	r0, [r7, #12]
 8013f74:	607a      	str	r2, [r7, #4]
 8013f76:	603b      	str	r3, [r7, #0]
 8013f78:	460b      	mov	r3, r1
 8013f7a:	72fb      	strb	r3, [r7, #11]
   MOBLEUINT32 timeStampRcv;
   MOBLEUINT8 subCmd = pRxData[0];
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	781b      	ldrb	r3, [r3, #0]
 8013f80:	773b      	strb	r3, [r7, #28]
   MOBLEUINT16 hitcmdcount = 0;
 8013f82:	2300      	movs	r3, #0
 8013f84:	837b      	strh	r3, [r7, #26]
   MOBLEUINT8 increment = 1;
 8013f86:	2301      	movs	r3, #1
 8013f88:	77fb      	strb	r3, [r7, #31]
   MOBLEUINT8 idx;
  /* Traces for the Data */
  TRACE_I(TF_VENDOR_M,
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	781b      	ldrb	r3, [r3, #0]
 8013f8e:	4619      	mov	r1, r3
 8013f90:	68fb      	ldr	r3, [r7, #12]
 8013f92:	889b      	ldrh	r3, [r3, #4]
 8013f94:	4618      	mov	r0, r3
 8013f96:	68fb      	ldr	r3, [r7, #12]
 8013f98:	88db      	ldrh	r3, [r3, #6]
 8013f9a:	461c      	mov	r4, r3
 8013f9c:	7afb      	ldrb	r3, [r7, #11]
 8013f9e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8013fa2:	9201      	str	r2, [sp, #4]
 8013fa4:	9300      	str	r3, [sp, #0]
 8013fa6:	4623      	mov	r3, r4
 8013fa8:	4602      	mov	r2, r0
 8013faa:	4875      	ldr	r0, [pc, #468]	; (8014180 <Vendor_OnResponseDataCb+0x214>)
 8013fac:	f015 fae4 	bl	8029578 <iprintf>
          pmsgParam->elementIndex,
          pmsgParam->peer_addr, 
          pmsgParam->dst_peer, 
          command, 
          response);
  TRACE_I(TF_VENDOR_M,"DATA_RECEIVED length = %ld\n\r", dataLength);
 8013fb0:	6839      	ldr	r1, [r7, #0]
 8013fb2:	4874      	ldr	r0, [pc, #464]	; (8014184 <Vendor_OnResponseDataCb+0x218>)
 8013fb4:	f015 fae0 	bl	8029578 <iprintf>
  TRACE_M(TF_VENDOR_M,"#%02hx-%02hx! \n\r",command,pRxData[0]);
 8013fb8:	2100      	movs	r1, #0
 8013fba:	4873      	ldr	r0, [pc, #460]	; (8014188 <Vendor_OnResponseDataCb+0x21c>)
 8013fbc:	f7f9 fad8 	bl	800d570 <TraceHeader>
 8013fc0:	7af9      	ldrb	r1, [r7, #11]
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	781b      	ldrb	r3, [r3, #0]
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	4870      	ldr	r0, [pc, #448]	; (801418c <Vendor_OnResponseDataCb+0x220>)
 8013fca:	f015 fad5 	bl	8029578 <iprintf>
  
  switch(command)
 8013fce:	7afb      	ldrb	r3, [r7, #11]
 8013fd0:	3b01      	subs	r3, #1
 8013fd2:	2b0d      	cmp	r3, #13
 8013fd4:	f200 80cc 	bhi.w	8014170 <Vendor_OnResponseDataCb+0x204>
 8013fd8:	a201      	add	r2, pc, #4	; (adr r2, 8013fe0 <Vendor_OnResponseDataCb+0x74>)
 8013fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013fde:	bf00      	nop
 8013fe0:	08014019 	.word	0x08014019
 8013fe4:	080140b3 	.word	0x080140b3
 8013fe8:	080140a5 	.word	0x080140a5
 8013fec:	08014171 	.word	0x08014171
 8013ff0:	08014171 	.word	0x08014171
 8013ff4:	08014171 	.word	0x08014171
 8013ff8:	08014171 	.word	0x08014171
 8013ffc:	08014171 	.word	0x08014171
 8014000:	08014171 	.word	0x08014171
 8014004:	08014171 	.word	0x08014171
 8014008:	08014171 	.word	0x08014171
 801400c:	08014171 	.word	0x08014171
 8014010:	08014171 	.word	0x08014171
 8014014:	08014143 	.word	0x08014143
  {
    case APPLI_TEST_CMD:
      {
         switch(subCmd)
 8014018:	7f3b      	ldrb	r3, [r7, #28]
 801401a:	3b02      	subs	r3, #2
 801401c:	2b04      	cmp	r3, #4
 801401e:	d83f      	bhi.n	80140a0 <Vendor_OnResponseDataCb+0x134>
 8014020:	a201      	add	r2, pc, #4	; (adr r2, 8014028 <Vendor_OnResponseDataCb+0xbc>)
 8014022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014026:	bf00      	nop
 8014028:	0801403d 	.word	0x0801403d
 801402c:	080140a1 	.word	0x080140a1
 8014030:	08014063 	.word	0x08014063
 8014034:	08014071 	.word	0x08014071
 8014038:	080140a1 	.word	0x080140a1
             case APPLI_TEST_ECHO: 
               { 
                 /* this case is responsible for printing of the received back data byte from 
                    receiver node.
                 */       
                 for(idx =1;idx<dataLength;idx++)
 801403c:	2301      	movs	r3, #1
 801403e:	77bb      	strb	r3, [r7, #30]
 8014040:	e00a      	b.n	8014058 <Vendor_OnResponseDataCb+0xec>
                 {
                   TRACE_I(TF_VENDOR_M,"Response data %d\n\r", pRxData[idx]);
 8014042:	7fbb      	ldrb	r3, [r7, #30]
 8014044:	687a      	ldr	r2, [r7, #4]
 8014046:	4413      	add	r3, r2
 8014048:	781b      	ldrb	r3, [r3, #0]
 801404a:	4619      	mov	r1, r3
 801404c:	4850      	ldr	r0, [pc, #320]	; (8014190 <Vendor_OnResponseDataCb+0x224>)
 801404e:	f015 fa93 	bl	8029578 <iprintf>
                 for(idx =1;idx<dataLength;idx++)
 8014052:	7fbb      	ldrb	r3, [r7, #30]
 8014054:	3301      	adds	r3, #1
 8014056:	77bb      	strb	r3, [r7, #30]
 8014058:	7fbb      	ldrb	r3, [r7, #30]
 801405a:	683a      	ldr	r2, [r7, #0]
 801405c:	429a      	cmp	r2, r3
 801405e:	d8f0      	bhi.n	8014042 <Vendor_OnResponseDataCb+0xd6>
                 }
                 break;
 8014060:	e01f      	b.n	80140a2 <Vendor_OnResponseDataCb+0x136>
             case APPLI_TEST_COUNTER:
               { 
         /* this case is responsible for the printing the time stamp when the response 
            is received by the sender node.
         */
                 timeStampRcv = Clock_Time();
 8014062:	f7f3 feff 	bl	8007e64 <HAL_GetTick>
 8014066:	6178      	str	r0, [r7, #20]

                 Packet_ResponseTimeStamp(timeStampRcv);
 8014068:	6978      	ldr	r0, [r7, #20]
 801406a:	f000 f961 	bl	8014330 <Packet_ResponseTimeStamp>
                  
                 /*Insert Test related Commands here*/
                 break;
 801406e:	e018      	b.n	80140a2 <Vendor_OnResponseDataCb+0x136>
             case APPLI_TEST_INC_COUNTER: 
               { 
           /* This case is responsible for the printing of the number count of command 
              received by receiver.
           */     
                 hitcmdcount = (MOBLEUINT32)(pRxData[4] << 24);
 8014070:	2300      	movs	r3, #0
 8014072:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[3] << 16);
                 hitcmdcount |=(MOBLEUINT32)( pRxData[2] << 8);
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	3302      	adds	r3, #2
 8014078:	781b      	ldrb	r3, [r3, #0]
 801407a:	b29b      	uxth	r3, r3
 801407c:	021b      	lsls	r3, r3, #8
 801407e:	b29a      	uxth	r2, r3
 8014080:	8b7b      	ldrh	r3, [r7, #26]
 8014082:	4313      	orrs	r3, r2
 8014084:	837b      	strh	r3, [r7, #26]
                 hitcmdcount |=(MOBLEUINT32)( pRxData[1]);                
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	3301      	adds	r3, #1
 801408a:	781b      	ldrb	r3, [r3, #0]
 801408c:	b29a      	uxth	r2, r3
 801408e:	8b7b      	ldrh	r3, [r7, #26]
 8014090:	4313      	orrs	r3, r2
 8014092:	837b      	strh	r3, [r7, #26]
                 TRACE_I(TF_VENDOR_M,"NUMBER OF COMMANDS RECEIVED %d \r\n",hitcmdcount);
 8014094:	8b7b      	ldrh	r3, [r7, #26]
 8014096:	4619      	mov	r1, r3
 8014098:	483e      	ldr	r0, [pc, #248]	; (8014194 <Vendor_OnResponseDataCb+0x228>)
 801409a:	f015 fa6d 	bl	8029578 <iprintf>
                 /*Insert Test related Commands here*/
                 break;
 801409e:	e000      	b.n	80140a2 <Vendor_OnResponseDataCb+0x136>
                  
                 break;
               }
             default:
               {              
                  break;
 80140a0:	bf00      	nop
               }
         }
         break;
 80140a2:	e068      	b.n	8014176 <Vendor_OnResponseDataCb+0x20a>
      }                  
  case APPLI_LED_CONTROL_STATUS_CMD:
    {
      TRACE_I(TF_VENDOR_M,"Led State %d \r\n",pRxData[0]);
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	781b      	ldrb	r3, [r3, #0]
 80140a8:	4619      	mov	r1, r3
 80140aa:	483b      	ldr	r0, [pc, #236]	; (8014198 <Vendor_OnResponseDataCb+0x22c>)
 80140ac:	f015 fa64 	bl	8029578 <iprintf>
      break;
 80140b0:	e061      	b.n	8014176 <Vendor_OnResponseDataCb+0x20a>
    }
   case APPLI_DEVICE_INFO_CMD:
     {
      switch(subCmd)
 80140b2:	7f3b      	ldrb	r3, [r7, #28]
 80140b4:	2b03      	cmp	r3, #3
 80140b6:	d03d      	beq.n	8014134 <Vendor_OnResponseDataCb+0x1c8>
 80140b8:	2b03      	cmp	r3, #3
 80140ba:	dc5b      	bgt.n	8014174 <Vendor_OnResponseDataCb+0x208>
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d002      	beq.n	80140c6 <Vendor_OnResponseDataCb+0x15a>
 80140c0:	2b02      	cmp	r3, #2
 80140c2:	d017      	beq.n	80140f4 <Vendor_OnResponseDataCb+0x188>
               }
             increment=1;
             break;   
             }
         }
      break;
 80140c4:	e056      	b.n	8014174 <Vendor_OnResponseDataCb+0x208>
                 TRACE_I(TF_VENDOR_M,"IC type is %s \r\n" ,Board_Type[pRxData[1]-1]); 
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	3301      	adds	r3, #1
 80140ca:	781b      	ldrb	r3, [r3, #0]
 80140cc:	3b01      	subs	r3, #1
 80140ce:	4a33      	ldr	r2, [pc, #204]	; (801419c <Vendor_OnResponseDataCb+0x230>)
 80140d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80140d4:	4619      	mov	r1, r3
 80140d6:	4832      	ldr	r0, [pc, #200]	; (80141a0 <Vendor_OnResponseDataCb+0x234>)
 80140d8:	f015 fa4e 	bl	8029578 <iprintf>
                 break;
 80140dc:	e030      	b.n	8014140 <Vendor_OnResponseDataCb+0x1d4>
               TRACE_I(TF_VENDOR_M,"Lib Version is %d \r\n",pRxData[increment]);
 80140de:	7ffb      	ldrb	r3, [r7, #31]
 80140e0:	687a      	ldr	r2, [r7, #4]
 80140e2:	4413      	add	r3, r2
 80140e4:	781b      	ldrb	r3, [r3, #0]
 80140e6:	4619      	mov	r1, r3
 80140e8:	482e      	ldr	r0, [pc, #184]	; (80141a4 <Vendor_OnResponseDataCb+0x238>)
 80140ea:	f015 fa45 	bl	8029578 <iprintf>
               increment++;
 80140ee:	7ffb      	ldrb	r3, [r7, #31]
 80140f0:	3301      	adds	r3, #1
 80140f2:	77fb      	strb	r3, [r7, #31]
             while(increment!=8)
 80140f4:	7ffb      	ldrb	r3, [r7, #31]
 80140f6:	2b08      	cmp	r3, #8
 80140f8:	d1f1      	bne.n	80140de <Vendor_OnResponseDataCb+0x172>
             increment=1;
 80140fa:	2301      	movs	r3, #1
 80140fc:	77fb      	strb	r3, [r7, #31]
             break;
 80140fe:	e01f      	b.n	8014140 <Vendor_OnResponseDataCb+0x1d4>
                 if(pRxData[increment] != R_ASCI_CODE)
 8014100:	7ffb      	ldrb	r3, [r7, #31]
 8014102:	687a      	ldr	r2, [r7, #4]
 8014104:	4413      	add	r3, r2
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b52      	cmp	r3, #82	; 0x52
 801410a:	d008      	beq.n	801411e <Vendor_OnResponseDataCb+0x1b2>
                   TRACE_I(TF_VENDOR_M,"Lib Sub Version is %x \r\n",pRxData[increment]);
 801410c:	7ffb      	ldrb	r3, [r7, #31]
 801410e:	687a      	ldr	r2, [r7, #4]
 8014110:	4413      	add	r3, r2
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	4619      	mov	r1, r3
 8014116:	4824      	ldr	r0, [pc, #144]	; (80141a8 <Vendor_OnResponseDataCb+0x23c>)
 8014118:	f015 fa2e 	bl	8029578 <iprintf>
 801411c:	e007      	b.n	801412e <Vendor_OnResponseDataCb+0x1c2>
                   TRACE_I(TF_VENDOR_M,"Lib Sub Version is %c \r\n",pRxData[increment]);
 801411e:	7ffb      	ldrb	r3, [r7, #31]
 8014120:	687a      	ldr	r2, [r7, #4]
 8014122:	4413      	add	r3, r2
 8014124:	781b      	ldrb	r3, [r3, #0]
 8014126:	4619      	mov	r1, r3
 8014128:	4820      	ldr	r0, [pc, #128]	; (80141ac <Vendor_OnResponseDataCb+0x240>)
 801412a:	f015 fa25 	bl	8029578 <iprintf>
                  increment++;
 801412e:	7ffb      	ldrb	r3, [r7, #31]
 8014130:	3301      	adds	r3, #1
 8014132:	77fb      	strb	r3, [r7, #31]
               while(increment!=7)
 8014134:	7ffb      	ldrb	r3, [r7, #31]
 8014136:	2b07      	cmp	r3, #7
 8014138:	d1e2      	bne.n	8014100 <Vendor_OnResponseDataCb+0x194>
             increment=1;
 801413a:	2301      	movs	r3, #1
 801413c:	77fb      	strb	r3, [r7, #31]
             break;   
 801413e:	bf00      	nop
      break;
 8014140:	e018      	b.n	8014174 <Vendor_OnResponseDataCb+0x208>
     }
    case APPLI_DATA_CNTRL_CMD:  
      {
        /** Displays data received **/
        for (MOBLEUINT8 idx=0; idx<dataLength; idx++)
 8014142:	2300      	movs	r3, #0
 8014144:	777b      	strb	r3, [r7, #29]
 8014146:	e00e      	b.n	8014166 <Vendor_OnResponseDataCb+0x1fa>
        {
          TRACE_I(TF_VENDOR_M,"data[%d]= 0x%x",idx,pRxData[idx]); 
 8014148:	7f79      	ldrb	r1, [r7, #29]
 801414a:	7f7b      	ldrb	r3, [r7, #29]
 801414c:	687a      	ldr	r2, [r7, #4]
 801414e:	4413      	add	r3, r2
 8014150:	781b      	ldrb	r3, [r3, #0]
 8014152:	461a      	mov	r2, r3
 8014154:	4816      	ldr	r0, [pc, #88]	; (80141b0 <Vendor_OnResponseDataCb+0x244>)
 8014156:	f015 fa0f 	bl	8029578 <iprintf>
          TRACE_I(TF_VENDOR_M,"\n\r");
 801415a:	4816      	ldr	r0, [pc, #88]	; (80141b4 <Vendor_OnResponseDataCb+0x248>)
 801415c:	f015 fa0c 	bl	8029578 <iprintf>
        for (MOBLEUINT8 idx=0; idx<dataLength; idx++)
 8014160:	7f7b      	ldrb	r3, [r7, #29]
 8014162:	3301      	adds	r3, #1
 8014164:	777b      	strb	r3, [r7, #29]
 8014166:	7f7b      	ldrb	r3, [r7, #29]
 8014168:	683a      	ldr	r2, [r7, #0]
 801416a:	429a      	cmp	r2, r3
 801416c:	d8ec      	bhi.n	8014148 <Vendor_OnResponseDataCb+0x1dc>
        }
        break;
 801416e:	e002      	b.n	8014176 <Vendor_OnResponseDataCb+0x20a>
      }
       default:
    {              
        break;
 8014170:	bf00      	nop
 8014172:	e000      	b.n	8014176 <Vendor_OnResponseDataCb+0x20a>
      break;
 8014174:	bf00      	nop
    }
      
  }   
      
         return MOBLE_RESULT_SUCCESS;
 8014176:	2300      	movs	r3, #0
} 
 8014178:	4618      	mov	r0, r3
 801417a:	3724      	adds	r7, #36	; 0x24
 801417c:	46bd      	mov	sp, r7
 801417e:	bd90      	pop	{r4, r7, pc}
 8014180:	08031118 	.word	0x08031118
 8014184:	08030fe4 	.word	0x08030fe4
 8014188:	080332ec 	.word	0x080332ec
 801418c:	08031190 	.word	0x08031190
 8014190:	080311a4 	.word	0x080311a4
 8014194:	080311b8 	.word	0x080311b8
 8014198:	080311dc 	.word	0x080311dc
 801419c:	200000b0 	.word	0x200000b0
 80141a0:	080311ec 	.word	0x080311ec
 80141a4:	08031200 	.word	0x08031200
 80141a8:	08031218 	.word	0x08031218
 80141ac:	08031234 	.word	0x08031234
 80141b0:	08031250 	.word	0x08031250
 80141b4:	08031014 	.word	0x08031014

080141b8 <Vendor_Process>:
* @brief  State machine for Vendor Model
* @param  void
* @retval void
*/ 
void Vendor_Process(void)
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	af00      	add	r7, sp, #0
  BLEMesh_ModelsSendDelayedPacket();
 80141bc:	f7f3 f812 	bl	80071e4 <BLEMesh_ModelsSendDelayedPacket>
  
  if (Vendor_SendDataFreqState == 0xFF)
 80141c0:	4b03      	ldr	r3, [pc, #12]	; (80141d0 <Vendor_Process+0x18>)
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	2bff      	cmp	r3, #255	; 0xff
 80141c6:	d101      	bne.n	80141cc <Vendor_Process+0x14>
  {
    Appli_Vendor_SendBigDataPacket();
 80141c8:	f7f2 feca 	bl	8006f60 <Appli_Vendor_SendBigDataPacket>
  }
}
 80141cc:	bf00      	nop
 80141ce:	bd80      	pop	{r7, pc}
 80141d0:	20006e7a 	.word	0x20006e7a

080141d4 <Vendor_SendDataFreq>:
* @brief  Set the state of the Vendor Data frequency
* @param  State: New state of sending vendor packet frequency 
* @retval void
*/          
void Vendor_SendDataFreq(MOBLEUINT8 freq)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b082      	sub	sp, #8
 80141d8:	af00      	add	r7, sp, #0
 80141da:	4603      	mov	r3, r0
 80141dc:	71fb      	strb	r3, [r7, #7]
    /* Data to be sent continuously with out any time gap */ 
    if ((freq == 0xFF) || (freq == 0x00))
 80141de:	79fb      	ldrb	r3, [r7, #7]
 80141e0:	2bff      	cmp	r3, #255	; 0xff
 80141e2:	d002      	beq.n	80141ea <Vendor_SendDataFreq+0x16>
 80141e4:	79fb      	ldrb	r3, [r7, #7]
 80141e6:	2b00      	cmp	r3, #0
 80141e8:	d103      	bne.n	80141f2 <Vendor_SendDataFreq+0x1e>
    {
        Vendor_SendDataFreqState = freq;
 80141ea:	4a06      	ldr	r2, [pc, #24]	; (8014204 <Vendor_SendDataFreq+0x30>)
 80141ec:	79fb      	ldrb	r3, [r7, #7]
 80141ee:	7013      	strb	r3, [r2, #0]
 80141f0:	e003      	b.n	80141fa <Vendor_SendDataFreq+0x26>
    }
    else
    {
        TRACE_I(TF_VENDOR_M, "Invalid Data send Freq parameter \r\n");
 80141f2:	4805      	ldr	r0, [pc, #20]	; (8014208 <Vendor_SendDataFreq+0x34>)
 80141f4:	f015 fa26 	bl	8029644 <puts>
    }
}
 80141f8:	bf00      	nop
 80141fa:	bf00      	nop
 80141fc:	3708      	adds	r7, #8
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
 8014202:	bf00      	nop
 8014204:	20006e7a 	.word	0x20006e7a
 8014208:	08031274 	.word	0x08031274

0801420c <VendorModel_PID1_GetOpcodeTableCb>:
* @param  length: Pointer to the Length of Generic Model opcode array
* @retval MOBLE_RESULT
*/ 
MOBLE_RESULT VendorModel_PID1_GetOpcodeTableCb(const MODEL_OpcodeTableParam_t **data, 
                                                 MOBLEUINT16 *length)
{ 
 801420c:	b480      	push	{r7}
 801420e:	b083      	sub	sp, #12
 8014210:	af00      	add	r7, sp, #0
 8014212:	6078      	str	r0, [r7, #4]
 8014214:	6039      	str	r1, [r7, #0]
  return MOBLE_RESULT_SUCCESS;
 8014216:	2300      	movs	r3, #0
}
 8014218:	4618      	mov	r0, r3
 801421a:	370c      	adds	r7, #12
 801421c:	46bd      	mov	sp, r7
 801421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014222:	4770      	bx	lr

08014224 <VendorModel_PID1_GetStatusRequestCb>:
                                    MOBLEUINT32 *plength, 
                                    MOBLEUINT8 const *pRxData,
                                    MOBLEUINT32 dataLength,
                                    MOBLEBOOL response)

{
 8014224:	b480      	push	{r7}
 8014226:	b085      	sub	sp, #20
 8014228:	af00      	add	r7, sp, #0
 801422a:	60f8      	str	r0, [r7, #12]
 801422c:	607a      	str	r2, [r7, #4]
 801422e:	603b      	str	r3, [r7, #0]
 8014230:	460b      	mov	r3, r1
 8014232:	817b      	strh	r3, [r7, #10]
  return MOBLE_RESULT_SUCCESS;    
 8014234:	2300      	movs	r3, #0
}
 8014236:	4618      	mov	r0, r3
 8014238:	3714      	adds	r7, #20
 801423a:	46bd      	mov	sp, r7
 801423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014240:	4770      	bx	lr
	...

08014244 <VendorModel_PID1_ProcessMessageCb>:
                                                 MOBLEUINT16 opcode, 
                                                 MOBLEUINT8 const *pRxData, 
                                                 MOBLEUINT32 dataLength, 
                                                 MOBLEBOOL response
                                                   )
{
 8014244:	b580      	push	{r7, lr}
 8014246:	b088      	sub	sp, #32
 8014248:	af02      	add	r7, sp, #8
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	607a      	str	r2, [r7, #4]
 801424e:	603b      	str	r3, [r7, #0]
 8014250:	460b      	mov	r3, r1
 8014252:	817b      	strh	r3, [r7, #10]
  
  MOBLE_RESULT result = MOBLE_RESULT_SUCCESS;
 8014254:	2300      	movs	r3, #0
 8014256:	75fb      	strb	r3, [r7, #23]
  MOBLEUINT8 command;
  MOBLEBOOL cmd_response;
    
  /*tClockTime delay_t = Clock_Time();*/
  
  TRACE_I(TF_VENDOR_M, 
 8014258:	68fb      	ldr	r3, [r7, #12]
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	4619      	mov	r1, r3
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	88db      	ldrh	r3, [r3, #6]
 8014262:	461a      	mov	r2, r3
 8014264:	68fb      	ldr	r3, [r7, #12]
 8014266:	889b      	ldrh	r3, [r3, #4]
 8014268:	4618      	mov	r0, r3
 801426a:	897b      	ldrh	r3, [r7, #10]
 801426c:	9300      	str	r3, [sp, #0]
 801426e:	4603      	mov	r3, r0
 8014270:	482a      	ldr	r0, [pc, #168]	; (801431c <VendorModel_PID1_ProcessMessageCb+0xd8>)
 8014272:	f015 f981 	bl	8029578 <iprintf>

            #define VENDOR_CMD_RESPONSE                          0x20
            #define VENDOR_CMD_READ_nWRITE                       0x10
  */
  
  command = (MOBLEUINT8) (opcode & 0x0F);
 8014276:	897b      	ldrh	r3, [r7, #10]
 8014278:	b2db      	uxtb	r3, r3
 801427a:	f003 030f 	and.w	r3, r3, #15
 801427e:	757b      	strb	r3, [r7, #21]
  if (opcode & VENDOR_CMD_RESPONSE)
 8014280:	897b      	ldrh	r3, [r7, #10]
 8014282:	f003 0320 	and.w	r3, r3, #32
 8014286:	2b00      	cmp	r3, #0
 8014288:	d002      	beq.n	8014290 <VendorModel_PID1_ProcessMessageCb+0x4c>
  {
    cmd_response = MOBLE_TRUE;
 801428a:	2301      	movs	r3, #1
 801428c:	75bb      	strb	r3, [r7, #22]
 801428e:	e001      	b.n	8014294 <VendorModel_PID1_ProcessMessageCb+0x50>
  }
  else
  {
    cmd_response = MOBLE_FALSE;
 8014290:	2300      	movs	r3, #0
 8014292:	75bb      	strb	r3, [r7, #22]
  }
  
    /* Parse the command */
    if( (cmd_response == MOBLE_FALSE) && (opcode & VENDOR_CMD_READ_nWRITE))
 8014294:	7dbb      	ldrb	r3, [r7, #22]
 8014296:	2b00      	cmp	r3, #0
 8014298:	d110      	bne.n	80142bc <VendorModel_PID1_ProcessMessageCb+0x78>
 801429a:	897b      	ldrh	r3, [r7, #10]
 801429c:	f003 0310 	and.w	r3, r3, #16
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d00b      	beq.n	80142bc <VendorModel_PID1_ProcessMessageCb+0x78>
    { /* Response Packet is received */
       TRACE_I(TF_VENDOR_M,"Response received from remote node \n\r");
 80142a4:	481e      	ldr	r0, [pc, #120]	; (8014320 <VendorModel_PID1_ProcessMessageCb+0xdc>)
 80142a6:	f015 f967 	bl	8029578 <iprintf>

       Vendor_OnResponseDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_FALSE);
 80142aa:	7d79      	ldrb	r1, [r7, #21]
 80142ac:	2300      	movs	r3, #0
 80142ae:	9300      	str	r3, [sp, #0]
 80142b0:	683b      	ldr	r3, [r7, #0]
 80142b2:	687a      	ldr	r2, [r7, #4]
 80142b4:	68f8      	ldr	r0, [r7, #12]
 80142b6:	f7ff fe59 	bl	8013f6c <Vendor_OnResponseDataCb>
 80142ba:	e02a      	b.n	8014312 <VendorModel_PID1_ProcessMessageCb+0xce>
    }
    else if ( (cmd_response == MOBLE_TRUE) && (opcode & VENDOR_CMD_READ_nWRITE))
 80142bc:	7dbb      	ldrb	r3, [r7, #22]
 80142be:	2b01      	cmp	r3, #1
 80142c0:	d116      	bne.n	80142f0 <VendorModel_PID1_ProcessMessageCb+0xac>
 80142c2:	897b      	ldrh	r3, [r7, #10]
 80142c4:	f003 0310 	and.w	r3, r3, #16
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d011      	beq.n	80142f0 <VendorModel_PID1_ProcessMessageCb+0xac>
    { /* Read Packet is received */
       TRACE_M(TF_VENDOR_M,"Read Command received   \n\r");
 80142cc:	2100      	movs	r1, #0
 80142ce:	4815      	ldr	r0, [pc, #84]	; (8014324 <VendorModel_PID1_ProcessMessageCb+0xe0>)
 80142d0:	f7f9 f94e 	bl	800d570 <TraceHeader>
 80142d4:	4814      	ldr	r0, [pc, #80]	; (8014328 <VendorModel_PID1_ProcessMessageCb+0xe4>)
 80142d6:	f015 f94f 	bl	8029578 <iprintf>
       result = Vendor_ReadLocalDataCb(pmsgParams, command, pRxData, dataLength, MOBLE_TRUE);
 80142da:	7d79      	ldrb	r1, [r7, #21]
 80142dc:	2301      	movs	r3, #1
 80142de:	9300      	str	r3, [sp, #0]
 80142e0:	683b      	ldr	r3, [r7, #0]
 80142e2:	687a      	ldr	r2, [r7, #4]
 80142e4:	68f8      	ldr	r0, [r7, #12]
 80142e6:	f7ff fd35 	bl	8013d54 <Vendor_ReadLocalDataCb>
 80142ea:	4603      	mov	r3, r0
 80142ec:	75fb      	strb	r3, [r7, #23]
 80142ee:	e010      	b.n	8014312 <VendorModel_PID1_ProcessMessageCb+0xce>
    }
    else 
    {  /* Write Commands with or without response received */
       TRACE_M(TF_VENDOR_M,"Command Write received, process the command\n\r");
 80142f0:	2100      	movs	r1, #0
 80142f2:	480c      	ldr	r0, [pc, #48]	; (8014324 <VendorModel_PID1_ProcessMessageCb+0xe0>)
 80142f4:	f7f9 f93c 	bl	800d570 <TraceHeader>
 80142f8:	480c      	ldr	r0, [pc, #48]	; (801432c <VendorModel_PID1_ProcessMessageCb+0xe8>)
 80142fa:	f015 f93d 	bl	8029578 <iprintf>
       result = Vendor_WriteLocalDataCb(pmsgParams, command, pRxData, dataLength, cmd_response );
 80142fe:	7d79      	ldrb	r1, [r7, #21]
 8014300:	7dbb      	ldrb	r3, [r7, #22]
 8014302:	9300      	str	r3, [sp, #0]
 8014304:	683b      	ldr	r3, [r7, #0]
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	68f8      	ldr	r0, [r7, #12]
 801430a:	f7ff fc71 	bl	8013bf0 <Vendor_WriteLocalDataCb>
 801430e:	4603      	mov	r3, r0
 8014310:	75fb      	strb	r3, [r7, #23]
    }

return result;
 8014312:	7dfb      	ldrb	r3, [r7, #23]
}
 8014314:	4618      	mov	r0, r3
 8014316:	3718      	adds	r7, #24
 8014318:	46bd      	mov	sp, r7
 801431a:	bd80      	pop	{r7, pc}
 801431c:	08031298 	.word	0x08031298
 8014320:	080312e8 	.word	0x080312e8
 8014324:	08033304 	.word	0x08033304
 8014328:	08031310 	.word	0x08031310
 801432c:	0803132c 	.word	0x0803132c

08014330 <Packet_ResponseTimeStamp>:
    
__weak MOBLE_RESULT Packet_ResponseTimeStamp(MOBLEUINT32 rcvTimeStamp)
{
 8014330:	b480      	push	{r7}
 8014332:	b083      	sub	sp, #12
 8014334:	af00      	add	r7, sp, #0
 8014336:	6078      	str	r0, [r7, #4]
  return MOBLE_RESULT_SUCCESS;
 8014338:	2300      	movs	r3, #0
}
 801433a:	4618      	mov	r0, r3
 801433c:	370c      	adds	r7, #12
 801433e:	46bd      	mov	sp, r7
 8014340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014344:	4770      	bx	lr

08014346 <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 8014346:	b580      	push	{r7, lr}
 8014348:	b088      	sub	sp, #32
 801434a:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801434c:	2300      	movs	r3, #0
 801434e:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014350:	f107 0308 	add.w	r3, r7, #8
 8014354:	2218      	movs	r2, #24
 8014356:	2100      	movs	r1, #0
 8014358:	4618      	mov	r0, r3
 801435a:	f001 fbc6 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 801435e:	233f      	movs	r3, #63	; 0x3f
 8014360:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 8014362:	2381      	movs	r3, #129	; 0x81
 8014364:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8014366:	1dfb      	adds	r3, r7, #7
 8014368:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 801436a:	2301      	movs	r3, #1
 801436c:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801436e:	f107 0308 	add.w	r3, r7, #8
 8014372:	2100      	movs	r1, #0
 8014374:	4618      	mov	r0, r3
 8014376:	f001 fd3d 	bl	8015df4 <hci_send_req>
 801437a:	4603      	mov	r3, r0
 801437c:	2b00      	cmp	r3, #0
 801437e:	da01      	bge.n	8014384 <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 8014380:	23ff      	movs	r3, #255	; 0xff
 8014382:	e000      	b.n	8014386 <aci_gap_set_non_discoverable+0x40>
  return status;
 8014384:	79fb      	ldrb	r3, [r7, #7]
}
 8014386:	4618      	mov	r0, r3
 8014388:	3720      	adds	r7, #32
 801438a:	46bd      	mov	sp, r7
 801438c:	bd80      	pop	{r7, pc}

0801438e <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 801438e:	b5b0      	push	{r4, r5, r7, lr}
 8014390:	b0ce      	sub	sp, #312	; 0x138
 8014392:	af00      	add	r7, sp, #0
 8014394:	4605      	mov	r5, r0
 8014396:	460c      	mov	r4, r1
 8014398:	4610      	mov	r0, r2
 801439a:	4619      	mov	r1, r3
 801439c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80143a0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 80143a4:	462a      	mov	r2, r5
 80143a6:	701a      	strb	r2, [r3, #0]
 80143a8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80143ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80143b0:	4622      	mov	r2, r4
 80143b2:	801a      	strh	r2, [r3, #0]
 80143b4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80143b8:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 80143bc:	4602      	mov	r2, r0
 80143be:	801a      	strh	r2, [r3, #0]
 80143c0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80143c4:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 80143c8:	460a      	mov	r2, r1
 80143ca:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 80143cc:	f107 0310 	add.w	r3, r7, #16
 80143d0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 80143d4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80143d8:	3308      	adds	r3, #8
 80143da:	f107 0210 	add.w	r2, r7, #16
 80143de:	4413      	add	r3, r2
 80143e0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 80143e4:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80143e8:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80143ec:	4413      	add	r3, r2
 80143ee:	3309      	adds	r3, #9
 80143f0:	f107 0210 	add.w	r2, r7, #16
 80143f4:	4413      	add	r3, r2
 80143f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80143fa:	f507 739c 	add.w	r3, r7, #312	; 0x138
 80143fe:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014402:	2200      	movs	r2, #0
 8014404:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014406:	2300      	movs	r3, #0
 8014408:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 801440c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014410:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014414:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8014418:	7812      	ldrb	r2, [r2, #0]
 801441a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 801441c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014420:	3301      	adds	r3, #1
 8014422:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 8014426:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801442a:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801442e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8014432:	8812      	ldrh	r2, [r2, #0]
 8014434:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 8014438:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801443c:	3302      	adds	r3, #2
 801443e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 8014442:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014446:	f507 729c 	add.w	r2, r7, #312	; 0x138
 801444a:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 801444e:	8812      	ldrh	r2, [r2, #0]
 8014450:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 8014454:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014458:	3302      	adds	r3, #2
 801445a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 801445e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014462:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014466:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 801446a:	7812      	ldrb	r2, [r2, #0]
 801446c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801446e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014472:	3301      	adds	r3, #1
 8014474:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 8014478:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801447c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8014480:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014482:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014486:	3301      	adds	r3, #1
 8014488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 801448c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014490:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 8014494:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014496:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801449a:	3301      	adds	r3, #1
 801449c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 80144a0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80144a4:	3308      	adds	r3, #8
 80144a6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 80144aa:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 80144ae:	4618      	mov	r0, r3
 80144b0:	f001 fb0b 	bl	8015aca <Osal_MemCpy>
    index_input += Local_Name_Length;
 80144b4:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 80144b8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80144bc:	4413      	add	r3, r2
 80144be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 80144c2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80144c6:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80144ca:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 80144cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80144d0:	3301      	adds	r3, #1
 80144d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 80144d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80144da:	3301      	adds	r3, #1
 80144dc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 80144e0:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 80144e4:	4618      	mov	r0, r3
 80144e6:	f001 faf0 	bl	8015aca <Osal_MemCpy>
    index_input += Service_Uuid_length;
 80144ea:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 80144ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80144f2:	4413      	add	r3, r2
 80144f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 80144f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80144fc:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 8014500:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014502:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014506:	3302      	adds	r3, #2
 8014508:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 801450c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014510:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 8014514:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 8014516:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801451a:	3302      	adds	r3, #2
 801451c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014520:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014524:	2218      	movs	r2, #24
 8014526:	2100      	movs	r1, #0
 8014528:	4618      	mov	r0, r3
 801452a:	f001 fade 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 801452e:	233f      	movs	r3, #63	; 0x3f
 8014530:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 8014534:	2383      	movs	r3, #131	; 0x83
 8014536:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801453a:	f107 0310 	add.w	r3, r7, #16
 801453e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014542:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014546:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801454a:	f107 030f 	add.w	r3, r7, #15
 801454e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014552:	2301      	movs	r3, #1
 8014554:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014558:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801455c:	2100      	movs	r1, #0
 801455e:	4618      	mov	r0, r3
 8014560:	f001 fc48 	bl	8015df4 <hci_send_req>
 8014564:	4603      	mov	r3, r0
 8014566:	2b00      	cmp	r3, #0
 8014568:	da01      	bge.n	801456e <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 801456a:	23ff      	movs	r3, #255	; 0xff
 801456c:	e004      	b.n	8014578 <aci_gap_set_discoverable+0x1ea>
  return status;
 801456e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014572:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8014576:	781b      	ldrb	r3, [r3, #0]
}
 8014578:	4618      	mov	r0, r3
 801457a:	f507 779c 	add.w	r7, r7, #312	; 0x138
 801457e:	46bd      	mov	sp, r7
 8014580:	bdb0      	pop	{r4, r5, r7, pc}

08014582 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 8014582:	b590      	push	{r4, r7, lr}
 8014584:	b0cd      	sub	sp, #308	; 0x134
 8014586:	af00      	add	r7, sp, #0
 8014588:	4604      	mov	r4, r0
 801458a:	4608      	mov	r0, r1
 801458c:	4611      	mov	r1, r2
 801458e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014592:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8014596:	6013      	str	r3, [r2, #0]
 8014598:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801459c:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80145a0:	4622      	mov	r2, r4
 80145a2:	701a      	strb	r2, [r3, #0]
 80145a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80145a8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80145ac:	4602      	mov	r2, r0
 80145ae:	701a      	strb	r2, [r3, #0]
 80145b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80145b4:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80145b8:	460a      	mov	r2, r1
 80145ba:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 80145bc:	f107 0310 	add.w	r3, r7, #16
 80145c0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80145c4:	f107 0308 	add.w	r3, r7, #8
 80145c8:	2207      	movs	r2, #7
 80145ca:	2100      	movs	r1, #0
 80145cc:	4618      	mov	r0, r3
 80145ce:	f001 fa8c 	bl	8015aea <Osal_MemSet>
  int index_input = 0;
 80145d2:	2300      	movs	r3, #0
 80145d4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 80145d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145dc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80145e0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80145e4:	7812      	ldrb	r2, [r2, #0]
 80145e6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80145e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80145ec:	3301      	adds	r3, #1
 80145ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 80145f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80145f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80145fa:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80145fe:	7812      	ldrb	r2, [r2, #0]
 8014600:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8014602:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014606:	3301      	adds	r3, #1
 8014608:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 801460c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014610:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014614:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 8014618:	7812      	ldrb	r2, [r2, #0]
 801461a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801461c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014620:	3301      	adds	r3, #1
 8014622:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014626:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801462a:	2218      	movs	r2, #24
 801462c:	2100      	movs	r1, #0
 801462e:	4618      	mov	r0, r3
 8014630:	f001 fa5b 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8014634:	233f      	movs	r3, #63	; 0x3f
 8014636:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 801463a:	238a      	movs	r3, #138	; 0x8a
 801463c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014640:	f107 0310 	add.w	r3, r7, #16
 8014644:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014648:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801464c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8014650:	f107 0308 	add.w	r3, r7, #8
 8014654:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8014658:	2307      	movs	r3, #7
 801465a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801465e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014662:	2100      	movs	r1, #0
 8014664:	4618      	mov	r0, r3
 8014666:	f001 fbc5 	bl	8015df4 <hci_send_req>
 801466a:	4603      	mov	r3, r0
 801466c:	2b00      	cmp	r3, #0
 801466e:	da01      	bge.n	8014674 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 8014670:	23ff      	movs	r3, #255	; 0xff
 8014672:	e02e      	b.n	80146d2 <aci_gap_init+0x150>
  if ( resp.Status )
 8014674:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014678:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801467c:	781b      	ldrb	r3, [r3, #0]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d005      	beq.n	801468e <aci_gap_init+0x10c>
    return resp.Status;
 8014682:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014686:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	e021      	b.n	80146d2 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 801468e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014692:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8014696:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 801469a:	b29a      	uxth	r2, r3
 801469c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 80146a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146ac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80146b0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80146b4:	b29a      	uxth	r2, r3
 80146b6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80146ba:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 80146bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146c0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80146c4:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80146c8:	b29a      	uxth	r2, r3
 80146ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80146ce:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80146d0:	2300      	movs	r3, #0
}
 80146d2:	4618      	mov	r0, r3
 80146d4:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80146d8:	46bd      	mov	sp, r7
 80146da:	bd90      	pop	{r4, r7, pc}

080146dc <aci_gap_terminate>:
  return status;
}

tBleStatus aci_gap_terminate( uint16_t Connection_Handle,
                              uint8_t Reason )
{
 80146dc:	b580      	push	{r7, lr}
 80146de:	b0cc      	sub	sp, #304	; 0x130
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	4602      	mov	r2, r0
 80146e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146e8:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80146ec:	801a      	strh	r2, [r3, #0]
 80146ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80146f2:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 80146f6:	460a      	mov	r2, r1
 80146f8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_cp0 *cp0 = (aci_gap_terminate_cp0*)(cmd_buffer);
 80146fa:	f107 0310 	add.w	r3, r7, #16
 80146fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014702:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014706:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801470a:	2200      	movs	r2, #0
 801470c:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801470e:	2300      	movs	r3, #0
 8014710:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 8014714:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014718:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801471c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8014720:	8812      	ldrh	r2, [r2, #0]
 8014722:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014724:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014728:	3302      	adds	r3, #2
 801472a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Reason = Reason;
 801472e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014732:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014736:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 801473a:	7812      	ldrb	r2, [r2, #0]
 801473c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 801473e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014742:	3301      	adds	r3, #1
 8014744:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014748:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801474c:	2218      	movs	r2, #24
 801474e:	2100      	movs	r1, #0
 8014750:	4618      	mov	r0, r3
 8014752:	f001 f9ca 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8014756:	233f      	movs	r3, #63	; 0x3f
 8014758:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x093;
 801475c:	2393      	movs	r3, #147	; 0x93
 801475e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8014762:	230f      	movs	r3, #15
 8014764:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8014768:	f107 0310 	add.w	r3, r7, #16
 801476c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014770:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014774:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014778:	f107 030f 	add.w	r3, r7, #15
 801477c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014780:	2301      	movs	r3, #1
 8014782:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014786:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801478a:	2100      	movs	r1, #0
 801478c:	4618      	mov	r0, r3
 801478e:	f001 fb31 	bl	8015df4 <hci_send_req>
 8014792:	4603      	mov	r3, r0
 8014794:	2b00      	cmp	r3, #0
 8014796:	da01      	bge.n	801479c <aci_gap_terminate+0xc0>
    return BLE_STATUS_TIMEOUT;
 8014798:	23ff      	movs	r3, #255	; 0xff
 801479a:	e004      	b.n	80147a6 <aci_gap_terminate+0xca>
  return status;
 801479c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80147a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80147a4:	781b      	ldrb	r3, [r3, #0]
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}

080147b0 <aci_gap_terminate_gap_proc>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_terminate_gap_proc( uint8_t Procedure_Code )
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b0cc      	sub	sp, #304	; 0x130
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	4602      	mov	r2, r0
 80147b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80147bc:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80147c0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_terminate_gap_proc_cp0 *cp0 = (aci_gap_terminate_gap_proc_cp0*)(cmd_buffer);
 80147c2:	f107 0310 	add.w	r3, r7, #16
 80147c6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80147ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80147ce:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80147d2:	2200      	movs	r2, #0
 80147d4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80147d6:	2300      	movs	r3, #0
 80147d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Procedure_Code = Procedure_Code;
 80147dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80147e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80147e4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80147e8:	7812      	ldrb	r2, [r2, #0]
 80147ea:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80147ec:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80147f0:	3301      	adds	r3, #1
 80147f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80147f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80147fa:	2218      	movs	r2, #24
 80147fc:	2100      	movs	r1, #0
 80147fe:	4618      	mov	r0, r3
 8014800:	f001 f973 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8014804:	233f      	movs	r3, #63	; 0x3f
 8014806:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x09d;
 801480a:	239d      	movs	r3, #157	; 0x9d
 801480c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014810:	f107 0310 	add.w	r3, r7, #16
 8014814:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014818:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801481c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014820:	f107 030f 	add.w	r3, r7, #15
 8014824:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014828:	2301      	movs	r3, #1
 801482a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801482e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014832:	2100      	movs	r1, #0
 8014834:	4618      	mov	r0, r3
 8014836:	f001 fadd 	bl	8015df4 <hci_send_req>
 801483a:	4603      	mov	r3, r0
 801483c:	2b00      	cmp	r3, #0
 801483e:	da01      	bge.n	8014844 <aci_gap_terminate_gap_proc+0x94>
    return BLE_STATUS_TIMEOUT;
 8014840:	23ff      	movs	r3, #255	; 0xff
 8014842:	e004      	b.n	801484e <aci_gap_terminate_gap_proc+0x9e>
  return status;
 8014844:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014848:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801484c:	781b      	ldrb	r3, [r3, #0]
}
 801484e:	4618      	mov	r0, r3
 8014850:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014854:	46bd      	mov	sp, r7
 8014856:	bd80      	pop	{r7, pc}

08014858 <aci_gap_start_observation_proc>:
                                           uint16_t LE_Scan_Window,
                                           uint8_t LE_Scan_Type,
                                           uint8_t Own_Address_Type,
                                           uint8_t Filter_Duplicates,
                                           uint8_t Scanning_Filter_Policy )
{
 8014858:	b5b0      	push	{r4, r5, r7, lr}
 801485a:	b0cc      	sub	sp, #304	; 0x130
 801485c:	af00      	add	r7, sp, #0
 801485e:	4605      	mov	r5, r0
 8014860:	460c      	mov	r4, r1
 8014862:	4610      	mov	r0, r2
 8014864:	4619      	mov	r1, r3
 8014866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801486a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801486e:	462a      	mov	r2, r5
 8014870:	801a      	strh	r2, [r3, #0]
 8014872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 801487a:	4622      	mov	r2, r4
 801487c:	801a      	strh	r2, [r3, #0]
 801487e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014882:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8014886:	4602      	mov	r2, r0
 8014888:	701a      	strb	r2, [r3, #0]
 801488a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801488e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014892:	460a      	mov	r2, r1
 8014894:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_start_observation_proc_cp0 *cp0 = (aci_gap_start_observation_proc_cp0*)(cmd_buffer);
 8014896:	f107 0310 	add.w	r3, r7, #16
 801489a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801489e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80148a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80148a6:	2200      	movs	r2, #0
 80148a8:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80148aa:	2300      	movs	r3, #0
 80148ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Interval = LE_Scan_Interval;
 80148b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80148b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80148b8:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80148bc:	8812      	ldrh	r2, [r2, #0]
 80148be:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80148c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148c4:	3302      	adds	r3, #2
 80148c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Window = LE_Scan_Window;
 80148ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80148ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80148d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80148d6:	8812      	ldrh	r2, [r2, #0]
 80148d8:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80148da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148de:	3302      	adds	r3, #2
 80148e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->LE_Scan_Type = LE_Scan_Type;
 80148e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80148e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80148ec:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 80148f0:	7812      	ldrb	r2, [r2, #0]
 80148f2:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 80148f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80148f8:	3301      	adds	r3, #1
 80148fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 80148fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014902:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014906:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 801490a:	7812      	ldrb	r2, [r2, #0]
 801490c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 801490e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014912:	3301      	adds	r3, #1
 8014914:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Filter_Duplicates = Filter_Duplicates;
 8014918:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801491c:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 8014920:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 8014922:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014926:	3301      	adds	r3, #1
 8014928:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scanning_Filter_Policy = Scanning_Filter_Policy;
 801492c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014930:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 8014934:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 8014936:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801493a:	3301      	adds	r3, #1
 801493c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014940:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014944:	2218      	movs	r2, #24
 8014946:	2100      	movs	r1, #0
 8014948:	4618      	mov	r0, r3
 801494a:	f001 f8ce 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 801494e:	233f      	movs	r3, #63	; 0x3f
 8014950:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a2;
 8014954:	23a2      	movs	r3, #162	; 0xa2
 8014956:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 801495a:	230f      	movs	r3, #15
 801495c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8014960:	f107 0310 	add.w	r3, r7, #16
 8014964:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014968:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801496c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014970:	f107 030f 	add.w	r3, r7, #15
 8014974:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014978:	2301      	movs	r3, #1
 801497a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801497e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014982:	2100      	movs	r1, #0
 8014984:	4618      	mov	r0, r3
 8014986:	f001 fa35 	bl	8015df4 <hci_send_req>
 801498a:	4603      	mov	r3, r0
 801498c:	2b00      	cmp	r3, #0
 801498e:	da01      	bge.n	8014994 <aci_gap_start_observation_proc+0x13c>
    return BLE_STATUS_TIMEOUT;
 8014990:	23ff      	movs	r3, #255	; 0xff
 8014992:	e004      	b.n	801499e <aci_gap_start_observation_proc+0x146>
  return status;
 8014994:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014998:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801499c:	781b      	ldrb	r3, [r3, #0]
}
 801499e:	4618      	mov	r0, r3
 80149a0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bdb0      	pop	{r4, r5, r7, pc}

080149a8 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	b088      	sub	sp, #32
 80149ac:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 80149ae:	2300      	movs	r3, #0
 80149b0:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80149b2:	f107 0308 	add.w	r3, r7, #8
 80149b6:	2218      	movs	r2, #24
 80149b8:	2100      	movs	r1, #0
 80149ba:	4618      	mov	r0, r3
 80149bc:	f001 f895 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 80149c0:	233f      	movs	r3, #63	; 0x3f
 80149c2:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 80149c4:	f240 1301 	movw	r3, #257	; 0x101
 80149c8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 80149ca:	1dfb      	adds	r3, r7, #7
 80149cc:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 80149ce:	2301      	movs	r3, #1
 80149d0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 80149d2:	f107 0308 	add.w	r3, r7, #8
 80149d6:	2100      	movs	r1, #0
 80149d8:	4618      	mov	r0, r3
 80149da:	f001 fa0b 	bl	8015df4 <hci_send_req>
 80149de:	4603      	mov	r3, r0
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	da01      	bge.n	80149e8 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 80149e4:	23ff      	movs	r3, #255	; 0xff
 80149e6:	e000      	b.n	80149ea <aci_gatt_init+0x42>
  return status;
 80149e8:	79fb      	ldrb	r3, [r7, #7]
}
 80149ea:	4618      	mov	r0, r3
 80149ec:	3720      	adds	r7, #32
 80149ee:	46bd      	mov	sp, r7
 80149f0:	bd80      	pop	{r7, pc}

080149f2 <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 80149f2:	b590      	push	{r4, r7, lr}
 80149f4:	b0cf      	sub	sp, #316	; 0x13c
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	4604      	mov	r4, r0
 80149fa:	f507 709c 	add.w	r0, r7, #312	; 0x138
 80149fe:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 8014a02:	6001      	str	r1, [r0, #0]
 8014a04:	4610      	mov	r0, r2
 8014a06:	4619      	mov	r1, r3
 8014a08:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a0c:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014a10:	4622      	mov	r2, r4
 8014a12:	701a      	strb	r2, [r3, #0]
 8014a14:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a18:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014a1c:	4602      	mov	r2, r0
 8014a1e:	701a      	strb	r2, [r3, #0]
 8014a20:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a24:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014a28:	460a      	mov	r2, r1
 8014a2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 8014a2c:	f107 0310 	add.w	r3, r7, #16
 8014a30:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 8014a34:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a38:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014a3c:	781b      	ldrb	r3, [r3, #0]
 8014a3e:	2b01      	cmp	r3, #1
 8014a40:	d00a      	beq.n	8014a58 <aci_gatt_add_service+0x66>
 8014a42:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a46:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014a4a:	781b      	ldrb	r3, [r3, #0]
 8014a4c:	2b02      	cmp	r3, #2
 8014a4e:	d101      	bne.n	8014a54 <aci_gatt_add_service+0x62>
 8014a50:	2311      	movs	r3, #17
 8014a52:	e002      	b.n	8014a5a <aci_gatt_add_service+0x68>
 8014a54:	2301      	movs	r3, #1
 8014a56:	e000      	b.n	8014a5a <aci_gatt_add_service+0x68>
 8014a58:	2303      	movs	r3, #3
 8014a5a:	f107 0210 	add.w	r2, r7, #16
 8014a5e:	4413      	add	r3, r2
 8014a60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014a64:	f107 030c 	add.w	r3, r7, #12
 8014a68:	2203      	movs	r2, #3
 8014a6a:	2100      	movs	r1, #0
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f001 f83c 	bl	8015aea <Osal_MemSet>
  int index_input = 0;
 8014a72:	2300      	movs	r3, #0
 8014a74:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 8014a78:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014a7c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014a80:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 8014a84:	7812      	ldrb	r2, [r2, #0]
 8014a86:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8014a88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014a8c:	3301      	adds	r3, #1
 8014a8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 8014a92:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014a96:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 8014a9a:	781b      	ldrb	r3, [r3, #0]
 8014a9c:	2b01      	cmp	r3, #1
 8014a9e:	d002      	beq.n	8014aa6 <aci_gatt_add_service+0xb4>
 8014aa0:	2b02      	cmp	r3, #2
 8014aa2:	d004      	beq.n	8014aae <aci_gatt_add_service+0xbc>
 8014aa4:	e007      	b.n	8014ab6 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 8014aa6:	2302      	movs	r3, #2
 8014aa8:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8014aac:	e005      	b.n	8014aba <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 8014aae:	2310      	movs	r3, #16
 8014ab0:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 8014ab4:	e001      	b.n	8014aba <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 8014ab6:	2397      	movs	r3, #151	; 0x97
 8014ab8:	e06c      	b.n	8014b94 <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 8014aba:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014abe:	1c58      	adds	r0, r3, #1
 8014ac0:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 8014ac4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014ac8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8014acc:	6819      	ldr	r1, [r3, #0]
 8014ace:	f000 fffc 	bl	8015aca <Osal_MemCpy>
    index_input += size;
 8014ad2:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 8014ad6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014ada:	4413      	add	r3, r2
 8014adc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 8014ae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014ae4:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014ae8:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8014aec:	7812      	ldrb	r2, [r2, #0]
 8014aee:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 8014af0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014af4:	3301      	adds	r3, #1
 8014af6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 8014afa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014afe:	f507 729c 	add.w	r2, r7, #312	; 0x138
 8014b02:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8014b06:	7812      	ldrb	r2, [r2, #0]
 8014b08:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 8014b0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b0e:	3301      	adds	r3, #1
 8014b10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014b14:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b18:	2218      	movs	r2, #24
 8014b1a:	2100      	movs	r1, #0
 8014b1c:	4618      	mov	r0, r3
 8014b1e:	f000 ffe4 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8014b22:	233f      	movs	r3, #63	; 0x3f
 8014b24:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 8014b28:	f44f 7381 	mov.w	r3, #258	; 0x102
 8014b2c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014b30:	f107 0310 	add.w	r3, r7, #16
 8014b34:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014b38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014b3c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 8014b40:	f107 030c 	add.w	r3, r7, #12
 8014b44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 8014b48:	2303      	movs	r3, #3
 8014b4a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014b4e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014b52:	2100      	movs	r1, #0
 8014b54:	4618      	mov	r0, r3
 8014b56:	f001 f94d 	bl	8015df4 <hci_send_req>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	da01      	bge.n	8014b64 <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 8014b60:	23ff      	movs	r3, #255	; 0xff
 8014b62:	e017      	b.n	8014b94 <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 8014b64:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b6c:	781b      	ldrb	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d005      	beq.n	8014b7e <aci_gatt_add_service+0x18c>
    return resp.Status;
 8014b72:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b7a:	781b      	ldrb	r3, [r3, #0]
 8014b7c:	e00a      	b.n	8014b94 <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 8014b7e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 8014b82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014b86:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014b8a:	b29a      	uxth	r2, r3
 8014b8c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8014b90:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014b92:	2300      	movs	r3, #0
}
 8014b94:	4618      	mov	r0, r3
 8014b96:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8014b9a:	46bd      	mov	sp, r7
 8014b9c:	bd90      	pop	{r4, r7, pc}

08014b9e <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 8014b9e:	b590      	push	{r4, r7, lr}
 8014ba0:	b0d1      	sub	sp, #324	; 0x144
 8014ba2:	af00      	add	r7, sp, #0
 8014ba4:	4604      	mov	r4, r0
 8014ba6:	4608      	mov	r0, r1
 8014ba8:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 8014bac:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 8014bb0:	600a      	str	r2, [r1, #0]
 8014bb2:	4619      	mov	r1, r3
 8014bb4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bb8:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 8014bbc:	4622      	mov	r2, r4
 8014bbe:	801a      	strh	r2, [r3, #0]
 8014bc0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bc4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014bc8:	4602      	mov	r2, r0
 8014bca:	701a      	strb	r2, [r3, #0]
 8014bcc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bd0:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8014bd4:	460a      	mov	r2, r1
 8014bd6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 8014bd8:	f107 0318 	add.w	r3, r7, #24
 8014bdc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 8014be0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014be4:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014be8:	781b      	ldrb	r3, [r3, #0]
 8014bea:	2b01      	cmp	r3, #1
 8014bec:	d00a      	beq.n	8014c04 <aci_gatt_add_char+0x66>
 8014bee:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014bf2:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014bf6:	781b      	ldrb	r3, [r3, #0]
 8014bf8:	2b02      	cmp	r3, #2
 8014bfa:	d101      	bne.n	8014c00 <aci_gatt_add_char+0x62>
 8014bfc:	2313      	movs	r3, #19
 8014bfe:	e002      	b.n	8014c06 <aci_gatt_add_char+0x68>
 8014c00:	2303      	movs	r3, #3
 8014c02:	e000      	b.n	8014c06 <aci_gatt_add_char+0x68>
 8014c04:	2305      	movs	r3, #5
 8014c06:	f107 0218 	add.w	r2, r7, #24
 8014c0a:	4413      	add	r3, r2
 8014c0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8014c10:	f107 0314 	add.w	r3, r7, #20
 8014c14:	2203      	movs	r2, #3
 8014c16:	2100      	movs	r1, #0
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f000 ff66 	bl	8015aea <Osal_MemSet>
  int index_input = 0;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 8014c24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014c28:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8014c2c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 8014c30:	8812      	ldrh	r2, [r2, #0]
 8014c32:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014c34:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014c38:	3302      	adds	r3, #2
 8014c3a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 8014c3e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014c42:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8014c46:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 8014c4a:	7812      	ldrb	r2, [r2, #0]
 8014c4c:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 8014c4e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014c52:	3301      	adds	r3, #1
 8014c54:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 8014c58:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c5c:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 8014c60:	781b      	ldrb	r3, [r3, #0]
 8014c62:	2b01      	cmp	r3, #1
 8014c64:	d002      	beq.n	8014c6c <aci_gatt_add_char+0xce>
 8014c66:	2b02      	cmp	r3, #2
 8014c68:	d004      	beq.n	8014c74 <aci_gatt_add_char+0xd6>
 8014c6a:	e007      	b.n	8014c7c <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 8014c6c:	2302      	movs	r3, #2
 8014c6e:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8014c72:	e005      	b.n	8014c80 <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 8014c74:	2310      	movs	r3, #16
 8014c76:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 8014c7a:	e001      	b.n	8014c80 <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 8014c7c:	2397      	movs	r3, #151	; 0x97
 8014c7e:	e091      	b.n	8014da4 <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 8014c80:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8014c84:	1cd8      	adds	r0, r3, #3
 8014c86:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 8014c8a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014c8e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8014c92:	6819      	ldr	r1, [r3, #0]
 8014c94:	f000 ff19 	bl	8015aca <Osal_MemCpy>
    index_input += size;
 8014c98:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 8014c9c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8014ca0:	4413      	add	r3, r2
 8014ca2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 8014ca6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014caa:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8014cae:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8014cb2:	8812      	ldrh	r2, [r2, #0]
 8014cb4:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 8014cb6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cba:	3302      	adds	r3, #2
 8014cbc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 8014cc0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014cc4:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 8014cc8:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 8014cca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cce:	3301      	adds	r3, #1
 8014cd0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 8014cd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014cd8:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 8014cdc:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 8014cde:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014ce2:	3301      	adds	r3, #1
 8014ce4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 8014ce8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014cec:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 8014cf0:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 8014cf2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014cf6:	3301      	adds	r3, #1
 8014cf8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 8014cfc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014d00:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 8014d04:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 8014d06:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014d0a:	3301      	adds	r3, #1
 8014d0c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 8014d10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8014d14:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 8014d18:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 8014d1a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014d1e:	3301      	adds	r3, #1
 8014d20:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014d24:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014d28:	2218      	movs	r2, #24
 8014d2a:	2100      	movs	r1, #0
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f000 fedc 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8014d32:	233f      	movs	r3, #63	; 0x3f
 8014d34:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 8014d38:	f44f 7382 	mov.w	r3, #260	; 0x104
 8014d3c:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 8014d40:	f107 0318 	add.w	r3, r7, #24
 8014d44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 8014d48:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8014d4c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 8014d50:	f107 0314 	add.w	r3, r7, #20
 8014d54:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 8014d58:	2303      	movs	r3, #3
 8014d5a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014d5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8014d62:	2100      	movs	r1, #0
 8014d64:	4618      	mov	r0, r3
 8014d66:	f001 f845 	bl	8015df4 <hci_send_req>
 8014d6a:	4603      	mov	r3, r0
 8014d6c:	2b00      	cmp	r3, #0
 8014d6e:	da01      	bge.n	8014d74 <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 8014d70:	23ff      	movs	r3, #255	; 0xff
 8014d72:	e017      	b.n	8014da4 <aci_gatt_add_char+0x206>
  if ( resp.Status )
 8014d74:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d78:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014d7c:	781b      	ldrb	r3, [r3, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d005      	beq.n	8014d8e <aci_gatt_add_char+0x1f0>
    return resp.Status;
 8014d82:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d86:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014d8a:	781b      	ldrb	r3, [r3, #0]
 8014d8c:	e00a      	b.n	8014da4 <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 8014d8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8014d92:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014d96:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8014d9a:	b29a      	uxth	r2, r3
 8014d9c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8014da0:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 8014da2:	2300      	movs	r3, #0
}
 8014da4:	4618      	mov	r0, r3
 8014da6:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd90      	pop	{r4, r7, pc}

08014dae <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 8014dae:	b5b0      	push	{r4, r5, r7, lr}
 8014db0:	b0cc      	sub	sp, #304	; 0x130
 8014db2:	af00      	add	r7, sp, #0
 8014db4:	4605      	mov	r5, r0
 8014db6:	460c      	mov	r4, r1
 8014db8:	4610      	mov	r0, r2
 8014dba:	4619      	mov	r1, r3
 8014dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014dc0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014dc4:	462a      	mov	r2, r5
 8014dc6:	801a      	strh	r2, [r3, #0]
 8014dc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014dcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014dd0:	4622      	mov	r2, r4
 8014dd2:	801a      	strh	r2, [r3, #0]
 8014dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014dd8:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 8014ddc:	4602      	mov	r2, r0
 8014dde:	701a      	strb	r2, [r3, #0]
 8014de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014de4:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014de8:	460a      	mov	r2, r1
 8014dea:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 8014dec:	f107 0310 	add.w	r3, r7, #16
 8014df0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014df4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014df8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014dfc:	2200      	movs	r2, #0
 8014dfe:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014e00:	2300      	movs	r3, #0
 8014e02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8014e06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014e0e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8014e12:	8812      	ldrh	r2, [r2, #0]
 8014e14:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014e16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e1a:	3302      	adds	r3, #2
 8014e1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8014e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014e28:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8014e2c:	8812      	ldrh	r2, [r2, #0]
 8014e2e:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014e30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e34:	3302      	adds	r3, #2
 8014e36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 8014e3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014e42:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 8014e46:	7812      	ldrb	r2, [r2, #0]
 8014e48:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 8014e4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e4e:	3301      	adds	r3, #1
 8014e50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 8014e54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014e5c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8014e60:	7812      	ldrb	r2, [r2, #0]
 8014e62:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 8014e64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014e68:	3301      	adds	r3, #1
 8014e6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 8014e6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014e72:	1d98      	adds	r0, r3, #6
 8014e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014e78:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014e7c:	781b      	ldrb	r3, [r3, #0]
 8014e7e:	461a      	mov	r2, r3
 8014e80:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8014e84:	f000 fe21 	bl	8015aca <Osal_MemCpy>
  index_input += Char_Value_Length;
 8014e88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014e8c:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8014e90:	781b      	ldrb	r3, [r3, #0]
 8014e92:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8014e96:	4413      	add	r3, r2
 8014e98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014e9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014ea0:	2218      	movs	r2, #24
 8014ea2:	2100      	movs	r1, #0
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	f000 fe20 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8014eaa:	233f      	movs	r3, #63	; 0x3f
 8014eac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 8014eb0:	f44f 7383 	mov.w	r3, #262	; 0x106
 8014eb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014eb8:	f107 0310 	add.w	r3, r7, #16
 8014ebc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014ec0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014ec4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014ec8:	f107 030f 	add.w	r3, r7, #15
 8014ecc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014ed0:	2301      	movs	r3, #1
 8014ed2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014ed6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014eda:	2100      	movs	r1, #0
 8014edc:	4618      	mov	r0, r3
 8014ede:	f000 ff89 	bl	8015df4 <hci_send_req>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	da01      	bge.n	8014eec <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 8014ee8:	23ff      	movs	r3, #255	; 0xff
 8014eea:	e004      	b.n	8014ef6 <aci_gatt_update_char_value+0x148>
  return status;
 8014eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014ef0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014ef4:	781b      	ldrb	r3, [r3, #0]
}
 8014ef6:	4618      	mov	r0, r3
 8014ef8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bdb0      	pop	{r4, r5, r7, pc}

08014f00 <aci_gatt_del_char>:

tBleStatus aci_gatt_del_char( uint16_t Serv_Handle,
                              uint16_t Char_Handle )
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b0cc      	sub	sp, #304	; 0x130
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	4602      	mov	r2, r0
 8014f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014f0c:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014f10:	801a      	strh	r2, [r3, #0]
 8014f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8014f1a:	460a      	mov	r2, r1
 8014f1c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_char_cp0 *cp0 = (aci_gatt_del_char_cp0*)(cmd_buffer);
 8014f1e:	f107 0310 	add.w	r3, r7, #16
 8014f22:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014f2a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014f2e:	2200      	movs	r2, #0
 8014f30:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014f32:	2300      	movs	r3, #0
 8014f34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Serv_Handle = Serv_Handle;
 8014f38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014f40:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8014f44:	8812      	ldrh	r2, [r2, #0]
 8014f46:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 8014f48:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f4c:	3302      	adds	r3, #2
 8014f4e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 8014f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8014f56:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8014f5a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8014f5e:	8812      	ldrh	r2, [r2, #0]
 8014f60:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8014f62:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f66:	3302      	adds	r3, #2
 8014f68:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8014f6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014f70:	2218      	movs	r2, #24
 8014f72:	2100      	movs	r1, #0
 8014f74:	4618      	mov	r0, r3
 8014f76:	f000 fdb8 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8014f7a:	233f      	movs	r3, #63	; 0x3f
 8014f7c:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x107;
 8014f80:	f240 1307 	movw	r3, #263	; 0x107
 8014f84:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8014f88:	f107 0310 	add.w	r3, r7, #16
 8014f8c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8014f90:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8014f94:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8014f98:	f107 030f 	add.w	r3, r7, #15
 8014f9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8014fa0:	2301      	movs	r3, #1
 8014fa2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8014fa6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8014faa:	2100      	movs	r1, #0
 8014fac:	4618      	mov	r0, r3
 8014fae:	f000 ff21 	bl	8015df4 <hci_send_req>
 8014fb2:	4603      	mov	r3, r0
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	da01      	bge.n	8014fbc <aci_gatt_del_char+0xbc>
    return BLE_STATUS_TIMEOUT;
 8014fb8:	23ff      	movs	r3, #255	; 0xff
 8014fba:	e004      	b.n	8014fc6 <aci_gatt_del_char+0xc6>
  return status;
 8014fbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014fc0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014fc4:	781b      	ldrb	r3, [r3, #0]
}
 8014fc6:	4618      	mov	r0, r3
 8014fc8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}

08014fd0 <aci_gatt_del_service>:

tBleStatus aci_gatt_del_service( uint16_t Serv_Handle )
{
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b0cc      	sub	sp, #304	; 0x130
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	4602      	mov	r2, r0
 8014fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014fdc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8014fe0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_del_service_cp0 *cp0 = (aci_gatt_del_service_cp0*)(cmd_buffer);
 8014fe2:	f107 0310 	add.w	r3, r7, #16
 8014fe6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8014fea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8014fee:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Serv_Handle = Serv_Handle;
 8014ffc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015000:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015004:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015008:	8812      	ldrh	r2, [r2, #0]
 801500a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801500c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015010:	3302      	adds	r3, #2
 8015012:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015016:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801501a:	2218      	movs	r2, #24
 801501c:	2100      	movs	r1, #0
 801501e:	4618      	mov	r0, r3
 8015020:	f000 fd63 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8015024:	233f      	movs	r3, #63	; 0x3f
 8015026:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x108;
 801502a:	f44f 7384 	mov.w	r3, #264	; 0x108
 801502e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015032:	f107 0310 	add.w	r3, r7, #16
 8015036:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801503a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801503e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015042:	f107 030f 	add.w	r3, r7, #15
 8015046:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801504a:	2301      	movs	r3, #1
 801504c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015050:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015054:	2100      	movs	r1, #0
 8015056:	4618      	mov	r0, r3
 8015058:	f000 fecc 	bl	8015df4 <hci_send_req>
 801505c:	4603      	mov	r3, r0
 801505e:	2b00      	cmp	r3, #0
 8015060:	da01      	bge.n	8015066 <aci_gatt_del_service+0x96>
    return BLE_STATUS_TIMEOUT;
 8015062:	23ff      	movs	r3, #255	; 0xff
 8015064:	e004      	b.n	8015070 <aci_gatt_del_service+0xa0>
  return status;
 8015066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801506a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801506e:	781b      	ldrb	r3, [r3, #0]
}
 8015070:	4618      	mov	r0, r3
 8015072:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}

0801507a <aci_gatt_allow_read>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gatt_allow_read( uint16_t Connection_Handle )
{
 801507a:	b580      	push	{r7, lr}
 801507c:	b0cc      	sub	sp, #304	; 0x130
 801507e:	af00      	add	r7, sp, #0
 8015080:	4602      	mov	r2, r0
 8015082:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015086:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801508a:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_allow_read_cp0 *cp0 = (aci_gatt_allow_read_cp0*)(cmd_buffer);
 801508c:	f107 0310 	add.w	r3, r7, #16
 8015090:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 8015094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015098:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801509c:	2200      	movs	r2, #0
 801509e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80150a0:	2300      	movs	r3, #0
 80150a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80150a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80150aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80150ae:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80150b2:	8812      	ldrh	r2, [r2, #0]
 80150b4:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80150b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80150ba:	3302      	adds	r3, #2
 80150bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80150c0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80150c4:	2218      	movs	r2, #24
 80150c6:	2100      	movs	r1, #0
 80150c8:	4618      	mov	r0, r3
 80150ca:	f000 fd0e 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 80150ce:	233f      	movs	r3, #63	; 0x3f
 80150d0:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x127;
 80150d4:	f240 1327 	movw	r3, #295	; 0x127
 80150d8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80150dc:	f107 0310 	add.w	r3, r7, #16
 80150e0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80150e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80150e8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80150ec:	f107 030f 	add.w	r3, r7, #15
 80150f0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80150f4:	2301      	movs	r3, #1
 80150f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80150fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80150fe:	2100      	movs	r1, #0
 8015100:	4618      	mov	r0, r3
 8015102:	f000 fe77 	bl	8015df4 <hci_send_req>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	da01      	bge.n	8015110 <aci_gatt_allow_read+0x96>
    return BLE_STATUS_TIMEOUT;
 801510c:	23ff      	movs	r3, #255	; 0xff
 801510e:	e004      	b.n	801511a <aci_gatt_allow_read+0xa0>
  return status;
 8015110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015114:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015118:	781b      	ldrb	r3, [r3, #0]
}
 801511a:	4618      	mov	r0, r3
 801511c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}

08015124 <aci_gatt_update_char_value_ext>:
                                           uint8_t Update_Type,
                                           uint16_t Char_Length,
                                           uint16_t Value_Offset,
                                           uint8_t Value_Length,
                                           const uint8_t* Value )
{
 8015124:	b5b0      	push	{r4, r5, r7, lr}
 8015126:	b0cc      	sub	sp, #304	; 0x130
 8015128:	af00      	add	r7, sp, #0
 801512a:	4605      	mov	r5, r0
 801512c:	460c      	mov	r4, r1
 801512e:	4610      	mov	r0, r2
 8015130:	4619      	mov	r1, r3
 8015132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015136:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801513a:	462a      	mov	r2, r5
 801513c:	801a      	strh	r2, [r3, #0]
 801513e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015142:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8015146:	4622      	mov	r2, r4
 8015148:	801a      	strh	r2, [r3, #0]
 801514a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801514e:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 8015152:	4602      	mov	r2, r0
 8015154:	801a      	strh	r2, [r3, #0]
 8015156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801515a:	f2a3 132f 	subw	r3, r3, #303	; 0x12f
 801515e:	460a      	mov	r2, r1
 8015160:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_ext_cp0 *cp0 = (aci_gatt_update_char_value_ext_cp0*)(cmd_buffer);
 8015162:	f107 0310 	add.w	r3, r7, #16
 8015166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801516a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801516e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015172:	2200      	movs	r2, #0
 8015174:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 8015176:	2300      	movs	r3, #0
 8015178:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Handle_To_Notify = Conn_Handle_To_Notify;
 801517c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015180:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015184:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015188:	8812      	ldrh	r2, [r2, #0]
 801518a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 801518c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015190:	3302      	adds	r3, #2
 8015192:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 8015196:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801519a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801519e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80151a2:	8812      	ldrh	r2, [r2, #0]
 80151a4:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 80151a6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151aa:	3302      	adds	r3, #2
 80151ac:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 80151b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80151b8:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 80151bc:	8812      	ldrh	r2, [r2, #0]
 80151be:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 80151c0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151c4:	3302      	adds	r3, #2
 80151c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Update_Type = Update_Type;
 80151ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80151d2:	f2a2 122f 	subw	r2, r2, #303	; 0x12f
 80151d6:	7812      	ldrb	r2, [r2, #0]
 80151d8:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 80151da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151de:	3301      	adds	r3, #1
 80151e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Length = Char_Length;
 80151e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151e8:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 80151ec:	f8a3 2007 	strh.w	r2, [r3, #7]
  index_input += 2;
 80151f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80151f4:	3302      	adds	r3, #2
 80151f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Value_Offset = Value_Offset;
 80151fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80151fe:	f8b7 2144 	ldrh.w	r2, [r7, #324]	; 0x144
 8015202:	f8a3 2009 	strh.w	r2, [r3, #9]
  index_input += 2;
 8015206:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801520a:	3302      	adds	r3, #2
 801520c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Value_Length = Value_Length;
 8015210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015214:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 8015218:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 801521a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801521e:	3301      	adds	r3, #1
 8015220:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Value_Length );
 8015224:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015228:	330c      	adds	r3, #12
 801522a:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 801522e:	f8d7 114c 	ldr.w	r1, [r7, #332]	; 0x14c
 8015232:	4618      	mov	r0, r3
 8015234:	f000 fc49 	bl	8015aca <Osal_MemCpy>
  index_input += Value_Length;
 8015238:	f897 3148 	ldrb.w	r3, [r7, #328]	; 0x148
 801523c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8015240:	4413      	add	r3, r2
 8015242:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015246:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801524a:	2218      	movs	r2, #24
 801524c:	2100      	movs	r1, #0
 801524e:	4618      	mov	r0, r3
 8015250:	f000 fc4b 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8015254:	233f      	movs	r3, #63	; 0x3f
 8015256:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x12c;
 801525a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 801525e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015262:	f107 0310 	add.w	r3, r7, #16
 8015266:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801526a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801526e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015272:	f107 030f 	add.w	r3, r7, #15
 8015276:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801527a:	2301      	movs	r3, #1
 801527c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015280:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015284:	2100      	movs	r1, #0
 8015286:	4618      	mov	r0, r3
 8015288:	f000 fdb4 	bl	8015df4 <hci_send_req>
 801528c:	4603      	mov	r3, r0
 801528e:	2b00      	cmp	r3, #0
 8015290:	da01      	bge.n	8015296 <aci_gatt_update_char_value_ext+0x172>
    return BLE_STATUS_TIMEOUT;
 8015292:	23ff      	movs	r3, #255	; 0xff
 8015294:	e004      	b.n	80152a0 <aci_gatt_update_char_value_ext+0x17c>
  return status;
 8015296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801529a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801529e:	781b      	ldrb	r3, [r3, #0]
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bdb0      	pop	{r4, r5, r7, pc}

080152aa <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 80152aa:	b580      	push	{r7, lr}
 80152ac:	b0cc      	sub	sp, #304	; 0x130
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80152b8:	601a      	str	r2, [r3, #0]
 80152ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152be:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80152c2:	4602      	mov	r2, r0
 80152c4:	701a      	strb	r2, [r3, #0]
 80152c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80152ce:	460a      	mov	r2, r1
 80152d0:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 80152d2:	f107 0310 	add.w	r3, r7, #16
 80152d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80152da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80152de:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80152e2:	2200      	movs	r2, #0
 80152e4:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80152e6:	2300      	movs	r3, #0
 80152e8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 80152ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80152f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80152f4:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80152f8:	7812      	ldrb	r2, [r2, #0]
 80152fa:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80152fc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015300:	3301      	adds	r3, #1
 8015302:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 8015306:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801530a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 801530e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 8015312:	7812      	ldrb	r2, [r2, #0]
 8015314:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801531a:	3301      	adds	r3, #1
 801531c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 8015320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015324:	1c98      	adds	r0, r3, #2
 8015326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801532a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801532e:	781a      	ldrb	r2, [r3, #0]
 8015330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015334:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015338:	6819      	ldr	r1, [r3, #0]
 801533a:	f000 fbc6 	bl	8015aca <Osal_MemCpy>
  index_input += Length;
 801533e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015342:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 8015346:	781b      	ldrb	r3, [r3, #0]
 8015348:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801534c:	4413      	add	r3, r2
 801534e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015352:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015356:	2218      	movs	r2, #24
 8015358:	2100      	movs	r1, #0
 801535a:	4618      	mov	r0, r3
 801535c:	f000 fbc5 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8015360:	233f      	movs	r3, #63	; 0x3f
 8015362:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 8015366:	230c      	movs	r3, #12
 8015368:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 801536c:	f107 0310 	add.w	r3, r7, #16
 8015370:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015374:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015378:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 801537c:	f107 030f 	add.w	r3, r7, #15
 8015380:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015384:	2301      	movs	r3, #1
 8015386:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801538a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801538e:	2100      	movs	r1, #0
 8015390:	4618      	mov	r0, r3
 8015392:	f000 fd2f 	bl	8015df4 <hci_send_req>
 8015396:	4603      	mov	r3, r0
 8015398:	2b00      	cmp	r3, #0
 801539a:	da01      	bge.n	80153a0 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 801539c:	23ff      	movs	r3, #255	; 0xff
 801539e:	e004      	b.n	80153aa <aci_hal_write_config_data+0x100>
  return status;
 80153a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80153a4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80153a8:	781b      	ldrb	r3, [r3, #0]
}
 80153aa:	4618      	mov	r0, r3
 80153ac:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80153b0:	46bd      	mov	sp, r7
 80153b2:	bd80      	pop	{r7, pc}

080153b4 <aci_hal_read_config_data>:

tBleStatus aci_hal_read_config_data( uint8_t Offset,
                                     uint8_t* Data_Length,
                                     uint8_t* Data )
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80153ba:	af00      	add	r7, sp, #0
 80153bc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80153c0:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 80153c4:	6019      	str	r1, [r3, #0]
 80153c6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80153ca:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80153ce:	601a      	str	r2, [r3, #0]
 80153d0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80153d4:	f2a3 2321 	subw	r3, r3, #545	; 0x221
 80153d8:	4602      	mov	r2, r0
 80153da:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_read_config_data_cp0 *cp0 = (aci_hal_read_config_data_cp0*)(cmd_buffer);
 80153dc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80153e0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  aci_hal_read_config_data_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 80153e4:	f107 0314 	add.w	r3, r7, #20
 80153e8:	22fc      	movs	r2, #252	; 0xfc
 80153ea:	2100      	movs	r1, #0
 80153ec:	4618      	mov	r0, r3
 80153ee:	f000 fb7c 	bl	8015aea <Osal_MemSet>
  int index_input = 0;
 80153f2:	2300      	movs	r3, #0
 80153f4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  cp0->Offset = Offset;
 80153f8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80153fc:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8015400:	f2a2 2221 	subw	r2, r2, #545	; 0x221
 8015404:	7812      	ldrb	r2, [r2, #0]
 8015406:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015408:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801540c:	3301      	adds	r3, #1
 801540e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015412:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8015416:	2218      	movs	r2, #24
 8015418:	2100      	movs	r1, #0
 801541a:	4618      	mov	r0, r3
 801541c:	f000 fb65 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8015420:	233f      	movs	r3, #63	; 0x3f
 8015422:	f8a7 3210 	strh.w	r3, [r7, #528]	; 0x210
  rq.ocf = 0x00d;
 8015426:	230d      	movs	r3, #13
 8015428:	f8a7 3212 	strh.w	r3, [r7, #530]	; 0x212
  rq.cparam = cmd_buffer;
 801542c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015430:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
  rq.clen = index_input;
 8015434:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015438:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  rq.rparam = &resp;
 801543c:	f107 0314 	add.w	r3, r7, #20
 8015440:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
  rq.rlen = sizeof(resp);
 8015444:	23fc      	movs	r3, #252	; 0xfc
 8015446:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  if ( hci_send_req(&rq, FALSE) < 0 )
 801544a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801544e:	2100      	movs	r1, #0
 8015450:	4618      	mov	r0, r3
 8015452:	f000 fccf 	bl	8015df4 <hci_send_req>
 8015456:	4603      	mov	r3, r0
 8015458:	2b00      	cmp	r3, #0
 801545a:	da01      	bge.n	8015460 <aci_hal_read_config_data+0xac>
    return BLE_STATUS_TIMEOUT;
 801545c:	23ff      	movs	r3, #255	; 0xff
 801545e:	e029      	b.n	80154b4 <aci_hal_read_config_data+0x100>
  if ( resp.Status )
 8015460:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015464:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015468:	781b      	ldrb	r3, [r3, #0]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d005      	beq.n	801547a <aci_hal_read_config_data+0xc6>
    return resp.Status;
 801546e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015472:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	e01c      	b.n	80154b4 <aci_hal_read_config_data+0x100>
  *Data_Length = resp.Data_Length;
 801547a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 801547e:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8015482:	785a      	ldrb	r2, [r3, #1]
 8015484:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015488:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	701a      	strb	r2, [r3, #0]
  Osal_MemCpy( (void*)Data, (const void*)resp.Data, *Data_Length);
 8015490:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8015494:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	781b      	ldrb	r3, [r3, #0]
 801549c:	461a      	mov	r2, r3
 801549e:	f107 0314 	add.w	r3, r7, #20
 80154a2:	1c99      	adds	r1, r3, #2
 80154a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80154a8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80154ac:	6818      	ldr	r0, [r3, #0]
 80154ae:	f000 fb0c 	bl	8015aca <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 80154b2:	2300      	movs	r3, #0
}
 80154b4:	4618      	mov	r0, r3
 80154b6:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80154ba:	46bd      	mov	sp, r7
 80154bc:	bd80      	pop	{r7, pc}

080154be <aci_hal_set_tx_power_level>:

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 80154be:	b580      	push	{r7, lr}
 80154c0:	b0cc      	sub	sp, #304	; 0x130
 80154c2:	af00      	add	r7, sp, #0
 80154c4:	4602      	mov	r2, r0
 80154c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80154ca:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 80154ce:	701a      	strb	r2, [r3, #0]
 80154d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80154d4:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80154d8:	460a      	mov	r2, r1
 80154da:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 80154dc:	f107 0310 	add.w	r3, r7, #16
 80154e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80154e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80154e8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80154ec:	2200      	movs	r2, #0
 80154ee:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80154f0:	2300      	movs	r3, #0
 80154f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 80154f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80154fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80154fe:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 8015502:	7812      	ldrb	r2, [r2, #0]
 8015504:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015506:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801550a:	3301      	adds	r3, #1
 801550c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 8015510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015514:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015518:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 801551c:	7812      	ldrb	r2, [r2, #0]
 801551e:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 8015520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015524:	3301      	adds	r3, #1
 8015526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801552a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801552e:	2218      	movs	r2, #24
 8015530:	2100      	movs	r1, #0
 8015532:	4618      	mov	r0, r3
 8015534:	f000 fad9 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8015538:	233f      	movs	r3, #63	; 0x3f
 801553a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 801553e:	230f      	movs	r3, #15
 8015540:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015544:	f107 0310 	add.w	r3, r7, #16
 8015548:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801554c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015550:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015554:	f107 030f 	add.w	r3, r7, #15
 8015558:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801555c:	2301      	movs	r3, #1
 801555e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015562:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015566:	2100      	movs	r1, #0
 8015568:	4618      	mov	r0, r3
 801556a:	f000 fc43 	bl	8015df4 <hci_send_req>
 801556e:	4603      	mov	r3, r0
 8015570:	2b00      	cmp	r3, #0
 8015572:	da01      	bge.n	8015578 <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 8015574:	23ff      	movs	r3, #255	; 0xff
 8015576:	e004      	b.n	8015582 <aci_hal_set_tx_power_level+0xc4>
  return status;
 8015578:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801557c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015580:	781b      	ldrb	r3, [r3, #0]
}
 8015582:	4618      	mov	r0, r3
 8015584:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}

0801558c <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b0cc      	sub	sp, #304	; 0x130
 8015590:	af00      	add	r7, sp, #0
 8015592:	4602      	mov	r2, r0
 8015594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015598:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 801559c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 801559e:	f107 0310 	add.w	r3, r7, #16
 80155a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80155a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80155aa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80155ae:	2200      	movs	r2, #0
 80155b0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80155b2:	2300      	movs	r3, #0
 80155b4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 80155b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80155bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80155c0:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80155c4:	8812      	ldrh	r2, [r2, #0]
 80155c6:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80155c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80155cc:	3302      	adds	r3, #2
 80155ce:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80155d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80155d6:	2218      	movs	r2, #24
 80155d8:	2100      	movs	r1, #0
 80155da:	4618      	mov	r0, r3
 80155dc:	f000 fa85 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 80155e0:	233f      	movs	r3, #63	; 0x3f
 80155e2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 80155e6:	2318      	movs	r3, #24
 80155e8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80155ec:	f107 0310 	add.w	r3, r7, #16
 80155f0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80155f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80155f8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80155fc:	f107 030f 	add.w	r3, r7, #15
 8015600:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015604:	2301      	movs	r3, #1
 8015606:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 801560a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 801560e:	2100      	movs	r1, #0
 8015610:	4618      	mov	r0, r3
 8015612:	f000 fbef 	bl	8015df4 <hci_send_req>
 8015616:	4603      	mov	r3, r0
 8015618:	2b00      	cmp	r3, #0
 801561a:	da01      	bge.n	8015620 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 801561c:	23ff      	movs	r3, #255	; 0xff
 801561e:	e004      	b.n	801562a <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 8015620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015624:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015628:	781b      	ldrb	r3, [r3, #0]
}
 801562a:	4618      	mov	r0, r3
 801562c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015630:	46bd      	mov	sp, r7
 8015632:	bd80      	pop	{r7, pc}

08015634 <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 8015634:	b580      	push	{r7, lr}
 8015636:	b088      	sub	sp, #32
 8015638:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 801563a:	2300      	movs	r3, #0
 801563c:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801563e:	f107 0308 	add.w	r3, r7, #8
 8015642:	2218      	movs	r2, #24
 8015644:	2100      	movs	r1, #0
 8015646:	4618      	mov	r0, r3
 8015648:	f000 fa4f 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x03;
 801564c:	2303      	movs	r3, #3
 801564e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 8015650:	2303      	movs	r3, #3
 8015652:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 8015654:	1dfb      	adds	r3, r7, #7
 8015656:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 8015658:	2301      	movs	r3, #1
 801565a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 801565c:	f107 0308 	add.w	r3, r7, #8
 8015660:	2100      	movs	r1, #0
 8015662:	4618      	mov	r0, r3
 8015664:	f000 fbc6 	bl	8015df4 <hci_send_req>
 8015668:	4603      	mov	r3, r0
 801566a:	2b00      	cmp	r3, #0
 801566c:	da01      	bge.n	8015672 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 801566e:	23ff      	movs	r3, #255	; 0xff
 8015670:	e000      	b.n	8015674 <hci_reset+0x40>
  return status;
 8015672:	79fb      	ldrb	r3, [r7, #7]
}
 8015674:	4618      	mov	r0, r3
 8015676:	3720      	adds	r7, #32
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}

0801567c <hci_read_local_version_information>:
tBleStatus hci_read_local_version_information( uint8_t* HCI_Version,
                                               uint16_t* HCI_Subversion,
                                               uint8_t* LMP_Version,
                                               uint16_t* Company_Identifier,
                                               uint16_t* LMP_Subversion )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b08e      	sub	sp, #56	; 0x38
 8015680:	af00      	add	r7, sp, #0
 8015682:	60f8      	str	r0, [r7, #12]
 8015684:	60b9      	str	r1, [r7, #8]
 8015686:	607a      	str	r2, [r7, #4]
 8015688:	603b      	str	r3, [r7, #0]
  struct hci_request rq;
  hci_read_local_version_information_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 801568a:	f107 0314 	add.w	r3, r7, #20
 801568e:	2209      	movs	r2, #9
 8015690:	2100      	movs	r1, #0
 8015692:	4618      	mov	r0, r3
 8015694:	f000 fa29 	bl	8015aea <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015698:	f107 0320 	add.w	r3, r7, #32
 801569c:	2218      	movs	r2, #24
 801569e:	2100      	movs	r1, #0
 80156a0:	4618      	mov	r0, r3
 80156a2:	f000 fa22 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x04;
 80156a6:	2304      	movs	r3, #4
 80156a8:	843b      	strh	r3, [r7, #32]
  rq.ocf = 0x001;
 80156aa:	2301      	movs	r3, #1
 80156ac:	847b      	strh	r3, [r7, #34]	; 0x22
  rq.rparam = &resp;
 80156ae:	f107 0314 	add.w	r3, r7, #20
 80156b2:	633b      	str	r3, [r7, #48]	; 0x30
  rq.rlen = sizeof(resp);
 80156b4:	2309      	movs	r3, #9
 80156b6:	637b      	str	r3, [r7, #52]	; 0x34
  if ( hci_send_req(&rq, FALSE) < 0 )
 80156b8:	f107 0320 	add.w	r3, r7, #32
 80156bc:	2100      	movs	r1, #0
 80156be:	4618      	mov	r0, r3
 80156c0:	f000 fb98 	bl	8015df4 <hci_send_req>
 80156c4:	4603      	mov	r3, r0
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	da01      	bge.n	80156ce <hci_read_local_version_information+0x52>
    return BLE_STATUS_TIMEOUT;
 80156ca:	23ff      	movs	r3, #255	; 0xff
 80156cc:	e018      	b.n	8015700 <hci_read_local_version_information+0x84>
  if ( resp.Status )
 80156ce:	7d3b      	ldrb	r3, [r7, #20]
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d001      	beq.n	80156d8 <hci_read_local_version_information+0x5c>
    return resp.Status;
 80156d4:	7d3b      	ldrb	r3, [r7, #20]
 80156d6:	e013      	b.n	8015700 <hci_read_local_version_information+0x84>
  *HCI_Version = resp.HCI_Version;
 80156d8:	7d7a      	ldrb	r2, [r7, #21]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	701a      	strb	r2, [r3, #0]
  *HCI_Subversion = resp.HCI_Subversion;
 80156de:	8afa      	ldrh	r2, [r7, #22]
 80156e0:	68bb      	ldr	r3, [r7, #8]
 80156e2:	801a      	strh	r2, [r3, #0]
  *LMP_Version = resp.LMP_Version;
 80156e4:	7e3a      	ldrb	r2, [r7, #24]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	701a      	strb	r2, [r3, #0]
  *Company_Identifier = resp.Company_Identifier;
 80156ea:	f8b7 3019 	ldrh.w	r3, [r7, #25]
 80156ee:	b29a      	uxth	r2, r3
 80156f0:	683b      	ldr	r3, [r7, #0]
 80156f2:	801a      	strh	r2, [r3, #0]
  *LMP_Subversion = resp.LMP_Subversion;
 80156f4:	f8b7 301b 	ldrh.w	r3, [r7, #27]
 80156f8:	b29a      	uxth	r2, r3
 80156fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80156fc:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 80156fe:	2300      	movs	r3, #0
}
 8015700:	4618      	mov	r0, r3
 8015702:	3738      	adds	r7, #56	; 0x38
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <hci_read_bd_addr>:
  Osal_MemCpy( (void*)LMP_Features, (const void*)resp.LMP_Features, 8 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_read_bd_addr( uint8_t* BD_ADDR )
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b08a      	sub	sp, #40	; 0x28
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_read_bd_addr_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015710:	f107 0308 	add.w	r3, r7, #8
 8015714:	2207      	movs	r2, #7
 8015716:	2100      	movs	r1, #0
 8015718:	4618      	mov	r0, r3
 801571a:	f000 f9e6 	bl	8015aea <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 801571e:	f107 0310 	add.w	r3, r7, #16
 8015722:	2218      	movs	r2, #24
 8015724:	2100      	movs	r1, #0
 8015726:	4618      	mov	r0, r3
 8015728:	f000 f9df 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x04;
 801572c:	2304      	movs	r3, #4
 801572e:	823b      	strh	r3, [r7, #16]
  rq.ocf = 0x009;
 8015730:	2309      	movs	r3, #9
 8015732:	827b      	strh	r3, [r7, #18]
  rq.rparam = &resp;
 8015734:	f107 0308 	add.w	r3, r7, #8
 8015738:	623b      	str	r3, [r7, #32]
  rq.rlen = sizeof(resp);
 801573a:	2307      	movs	r3, #7
 801573c:	627b      	str	r3, [r7, #36]	; 0x24
  if ( hci_send_req(&rq, FALSE) < 0 )
 801573e:	f107 0310 	add.w	r3, r7, #16
 8015742:	2100      	movs	r1, #0
 8015744:	4618      	mov	r0, r3
 8015746:	f000 fb55 	bl	8015df4 <hci_send_req>
 801574a:	4603      	mov	r3, r0
 801574c:	2b00      	cmp	r3, #0
 801574e:	da01      	bge.n	8015754 <hci_read_bd_addr+0x4c>
    return BLE_STATUS_TIMEOUT;
 8015750:	23ff      	movs	r3, #255	; 0xff
 8015752:	e00d      	b.n	8015770 <hci_read_bd_addr+0x68>
  if ( resp.Status )
 8015754:	7a3b      	ldrb	r3, [r7, #8]
 8015756:	2b00      	cmp	r3, #0
 8015758:	d001      	beq.n	801575e <hci_read_bd_addr+0x56>
    return resp.Status;
 801575a:	7a3b      	ldrb	r3, [r7, #8]
 801575c:	e008      	b.n	8015770 <hci_read_bd_addr+0x68>
  Osal_MemCpy( (void*)BD_ADDR, (const void*)resp.BD_ADDR, 6 );
 801575e:	f107 0308 	add.w	r3, r7, #8
 8015762:	3301      	adds	r3, #1
 8015764:	2206      	movs	r2, #6
 8015766:	4619      	mov	r1, r3
 8015768:	6878      	ldr	r0, [r7, #4]
 801576a:	f000 f9ae 	bl	8015aca <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 801576e:	2300      	movs	r3, #0
}
 8015770:	4618      	mov	r0, r3
 8015772:	3728      	adds	r7, #40	; 0x28
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <hci_le_set_advertising_data>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_set_advertising_data( uint8_t Advertising_Data_Length,
                                        const uint8_t* Advertising_Data )
{
 8015778:	b580      	push	{r7, lr}
 801577a:	b0cc      	sub	sp, #304	; 0x130
 801577c:	af00      	add	r7, sp, #0
 801577e:	4602      	mov	r2, r0
 8015780:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015784:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8015788:	6019      	str	r1, [r3, #0]
 801578a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801578e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015792:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_advertising_data_cp0 *cp0 = (hci_le_set_advertising_data_cp0*)(cmd_buffer);
 8015794:	f107 0310 	add.w	r3, r7, #16
 8015798:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801579c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80157a0:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80157a4:	2200      	movs	r2, #0
 80157a6:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80157a8:	2300      	movs	r3, #0
 80157aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Data_Length = Advertising_Data_Length;
 80157ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80157b2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80157b6:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 80157ba:	7812      	ldrb	r2, [r2, #0]
 80157bc:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 80157be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157c2:	3301      	adds	r3, #1
 80157c4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Advertising_Data, (const void*)Advertising_Data, 31 );
 80157c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80157cc:	1c58      	adds	r0, r3, #1
 80157ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80157d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80157d6:	221f      	movs	r2, #31
 80157d8:	6819      	ldr	r1, [r3, #0]
 80157da:	f000 f976 	bl	8015aca <Osal_MemCpy>
  index_input += 31;
 80157de:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80157e2:	331f      	adds	r3, #31
 80157e4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80157e8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80157ec:	2218      	movs	r2, #24
 80157ee:	2100      	movs	r1, #0
 80157f0:	4618      	mov	r0, r3
 80157f2:	f000 f97a 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x08;
 80157f6:	2308      	movs	r3, #8
 80157f8:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x008;
 80157fc:	2308      	movs	r3, #8
 80157fe:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 8015802:	f107 0310 	add.w	r3, r7, #16
 8015806:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 801580a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801580e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015812:	f107 030f 	add.w	r3, r7, #15
 8015816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 801581a:	2301      	movs	r3, #1
 801581c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015820:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015824:	2100      	movs	r1, #0
 8015826:	4618      	mov	r0, r3
 8015828:	f000 fae4 	bl	8015df4 <hci_send_req>
 801582c:	4603      	mov	r3, r0
 801582e:	2b00      	cmp	r3, #0
 8015830:	da01      	bge.n	8015836 <hci_le_set_advertising_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8015832:	23ff      	movs	r3, #255	; 0xff
 8015834:	e004      	b.n	8015840 <hci_le_set_advertising_data+0xc8>
  return status;
 8015836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801583a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 801583e:	781b      	ldrb	r3, [r3, #0]
}
 8015840:	4618      	mov	r0, r3
 8015842:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015846:	46bd      	mov	sp, r7
 8015848:	bd80      	pop	{r7, pc}

0801584a <hci_le_set_scan_response_data>:

tBleStatus hci_le_set_scan_response_data( uint8_t Scan_Response_Data_Length,
                                          const uint8_t* Scan_Response_Data )
{
 801584a:	b580      	push	{r7, lr}
 801584c:	b0cc      	sub	sp, #304	; 0x130
 801584e:	af00      	add	r7, sp, #0
 8015850:	4602      	mov	r2, r0
 8015852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 801585a:	6019      	str	r1, [r3, #0]
 801585c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015860:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 8015864:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_scan_response_data_cp0 *cp0 = (hci_le_set_scan_response_data_cp0*)(cmd_buffer);
 8015866:	f107 0310 	add.w	r3, r7, #16
 801586a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 801586e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015872:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015876:	2200      	movs	r2, #0
 8015878:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 801587a:	2300      	movs	r3, #0
 801587c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Scan_Response_Data_Length = Scan_Response_Data_Length;
 8015880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015884:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015888:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 801588c:	7812      	ldrb	r2, [r2, #0]
 801588e:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 8015890:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015894:	3301      	adds	r3, #1
 8015896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Scan_Response_Data, (const void*)Scan_Response_Data, 31 );
 801589a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801589e:	1c58      	adds	r0, r3, #1
 80158a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80158a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80158a8:	221f      	movs	r2, #31
 80158aa:	6819      	ldr	r1, [r3, #0]
 80158ac:	f000 f90d 	bl	8015aca <Osal_MemCpy>
  index_input += 31;
 80158b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80158b4:	331f      	adds	r3, #31
 80158b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 80158ba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80158be:	2218      	movs	r2, #24
 80158c0:	2100      	movs	r1, #0
 80158c2:	4618      	mov	r0, r3
 80158c4:	f000 f911 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x08;
 80158c8:	2308      	movs	r3, #8
 80158ca:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x009;
 80158ce:	2309      	movs	r3, #9
 80158d0:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 80158d4:	f107 0310 	add.w	r3, r7, #16
 80158d8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 80158dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80158e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 80158e4:	f107 030f 	add.w	r3, r7, #15
 80158e8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 80158ec:	2301      	movs	r3, #1
 80158ee:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 80158f2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80158f6:	2100      	movs	r1, #0
 80158f8:	4618      	mov	r0, r3
 80158fa:	f000 fa7b 	bl	8015df4 <hci_send_req>
 80158fe:	4603      	mov	r3, r0
 8015900:	2b00      	cmp	r3, #0
 8015902:	da01      	bge.n	8015908 <hci_le_set_scan_response_data+0xbe>
    return BLE_STATUS_TIMEOUT;
 8015904:	23ff      	movs	r3, #255	; 0xff
 8015906:	e004      	b.n	8015912 <hci_le_set_scan_response_data+0xc8>
  return status;
 8015908:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801590c:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015910:	781b      	ldrb	r3, [r3, #0]
}
 8015912:	4618      	mov	r0, r3
 8015914:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}

0801591c <hci_le_rand>:
  Osal_MemCpy( (void*)Encrypted_Data, (const void*)resp.Encrypted_Data, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus hci_le_rand( uint8_t* Random_Number )
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b08c      	sub	sp, #48	; 0x30
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
  struct hci_request rq;
  hci_le_rand_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 8015924:	f107 030c 	add.w	r3, r7, #12
 8015928:	2209      	movs	r2, #9
 801592a:	2100      	movs	r1, #0
 801592c:	4618      	mov	r0, r3
 801592e:	f000 f8dc 	bl	8015aea <Osal_MemSet>
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015932:	f107 0318 	add.w	r3, r7, #24
 8015936:	2218      	movs	r2, #24
 8015938:	2100      	movs	r1, #0
 801593a:	4618      	mov	r0, r3
 801593c:	f000 f8d5 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x08;
 8015940:	2308      	movs	r3, #8
 8015942:	833b      	strh	r3, [r7, #24]
  rq.ocf = 0x018;
 8015944:	2318      	movs	r3, #24
 8015946:	837b      	strh	r3, [r7, #26]
  rq.rparam = &resp;
 8015948:	f107 030c 	add.w	r3, r7, #12
 801594c:	62bb      	str	r3, [r7, #40]	; 0x28
  rq.rlen = sizeof(resp);
 801594e:	2309      	movs	r3, #9
 8015950:	62fb      	str	r3, [r7, #44]	; 0x2c
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015952:	f107 0318 	add.w	r3, r7, #24
 8015956:	2100      	movs	r1, #0
 8015958:	4618      	mov	r0, r3
 801595a:	f000 fa4b 	bl	8015df4 <hci_send_req>
 801595e:	4603      	mov	r3, r0
 8015960:	2b00      	cmp	r3, #0
 8015962:	da01      	bge.n	8015968 <hci_le_rand+0x4c>
    return BLE_STATUS_TIMEOUT;
 8015964:	23ff      	movs	r3, #255	; 0xff
 8015966:	e00d      	b.n	8015984 <hci_le_rand+0x68>
  if ( resp.Status )
 8015968:	7b3b      	ldrb	r3, [r7, #12]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d001      	beq.n	8015972 <hci_le_rand+0x56>
    return resp.Status;
 801596e:	7b3b      	ldrb	r3, [r7, #12]
 8015970:	e008      	b.n	8015984 <hci_le_rand+0x68>
  Osal_MemCpy( (void*)Random_Number, (const void*)resp.Random_Number, 8 );
 8015972:	f107 030c 	add.w	r3, r7, #12
 8015976:	3301      	adds	r3, #1
 8015978:	2208      	movs	r2, #8
 801597a:	4619      	mov	r1, r3
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f000 f8a4 	bl	8015aca <Osal_MemCpy>
  return BLE_STATUS_SUCCESS;
 8015982:	2300      	movs	r3, #0
}
 8015984:	4618      	mov	r0, r3
 8015986:	3730      	adds	r7, #48	; 0x30
 8015988:	46bd      	mov	sp, r7
 801598a:	bd80      	pop	{r7, pc}

0801598c <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 801598c:	b5b0      	push	{r4, r5, r7, lr}
 801598e:	b0cc      	sub	sp, #304	; 0x130
 8015990:	af00      	add	r7, sp, #0
 8015992:	4605      	mov	r5, r0
 8015994:	460c      	mov	r4, r1
 8015996:	4610      	mov	r0, r2
 8015998:	4619      	mov	r1, r3
 801599a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 801599e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 80159a2:	462a      	mov	r2, r5
 80159a4:	801a      	strh	r2, [r3, #0]
 80159a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80159ae:	4622      	mov	r2, r4
 80159b0:	801a      	strh	r2, [r3, #0]
 80159b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159b6:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 80159ba:	4602      	mov	r2, r0
 80159bc:	801a      	strh	r2, [r3, #0]
 80159be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80159c6:	460a      	mov	r2, r1
 80159c8:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 80159ca:	f107 0310 	add.w	r3, r7, #16
 80159ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 80159d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80159d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 80159da:	2200      	movs	r2, #0
 80159dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 80159de:	2300      	movs	r3, #0
 80159e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 80159e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80159e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80159ec:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 80159f0:	8812      	ldrh	r2, [r2, #0]
 80159f2:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 80159f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80159f8:	3302      	adds	r3, #2
 80159fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 80159fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a02:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a06:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8015a0a:	8812      	ldrh	r2, [r2, #0]
 8015a0c:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 8015a0e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a12:	3302      	adds	r3, #2
 8015a14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 8015a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a20:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 8015a24:	8812      	ldrh	r2, [r2, #0]
 8015a26:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 8015a28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a2c:	3302      	adds	r3, #2
 8015a2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 8015a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8015a3a:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 8015a3e:	8812      	ldrh	r2, [r2, #0]
 8015a40:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 8015a42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a46:	3302      	adds	r3, #2
 8015a48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 8015a4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8015a50:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 8015a54:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 8015a56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a5a:	3302      	adds	r3, #2
 8015a5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 8015a60:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015a64:	2218      	movs	r2, #24
 8015a66:	2100      	movs	r1, #0
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f000 f83e 	bl	8015aea <Osal_MemSet>
  rq.ogf = 0x3f;
 8015a6e:	233f      	movs	r3, #63	; 0x3f
 8015a70:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 8015a74:	f240 1381 	movw	r3, #385	; 0x181
 8015a78:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 8015a7c:	230f      	movs	r3, #15
 8015a7e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 8015a82:	f107 0310 	add.w	r3, r7, #16
 8015a86:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 8015a8a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8015a8e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 8015a92:	f107 030f 	add.w	r3, r7, #15
 8015a96:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 8015aa0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8015aa4:	2100      	movs	r1, #0
 8015aa6:	4618      	mov	r0, r3
 8015aa8:	f000 f9a4 	bl	8015df4 <hci_send_req>
 8015aac:	4603      	mov	r3, r0
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	da01      	bge.n	8015ab6 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 8015ab2:	23ff      	movs	r3, #255	; 0xff
 8015ab4:	e004      	b.n	8015ac0 <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 8015ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8015aba:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 8015abe:	781b      	ldrb	r3, [r3, #0]
}
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bdb0      	pop	{r4, r5, r7, pc}

08015aca <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 8015aca:	b580      	push	{r7, lr}
 8015acc:	b084      	sub	sp, #16
 8015ace:	af00      	add	r7, sp, #0
 8015ad0:	60f8      	str	r0, [r7, #12]
 8015ad2:	60b9      	str	r1, [r7, #8]
 8015ad4:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 8015ad6:	687a      	ldr	r2, [r7, #4]
 8015ad8:	68b9      	ldr	r1, [r7, #8]
 8015ada:	68f8      	ldr	r0, [r7, #12]
 8015adc:	f013 ff7b 	bl	80299d6 <memcpy>
 8015ae0:	4603      	mov	r3, r0
}
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	3710      	adds	r7, #16
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}

08015aea <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 8015aea:	b580      	push	{r7, lr}
 8015aec:	b084      	sub	sp, #16
 8015aee:	af00      	add	r7, sp, #0
 8015af0:	60f8      	str	r0, [r7, #12]
 8015af2:	60b9      	str	r1, [r7, #8]
 8015af4:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 8015af6:	687a      	ldr	r2, [r7, #4]
 8015af8:	68b9      	ldr	r1, [r7, #8]
 8015afa:	68f8      	ldr	r0, [r7, #12]
 8015afc:	f013 feda 	bl	80298b4 <memset>
 8015b00:	4603      	mov	r3, r0
}
 8015b02:	4618      	mov	r0, r3
 8015b04:	3710      	adds	r7, #16
 8015b06:	46bd      	mov	sp, r7
 8015b08:	bd80      	pop	{r7, pc}

08015b0a <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 8015b0a:	b580      	push	{r7, lr}
 8015b0c:	b088      	sub	sp, #32
 8015b0e:	af00      	add	r7, sp, #0
 8015b10:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015b12:	f107 030c 	add.w	r3, r7, #12
 8015b16:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	212e      	movs	r1, #46	; 0x2e
 8015b22:	f64f 4066 	movw	r0, #64614	; 0xfc66
 8015b26:	f000 fb01 	bl	801612c <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b2a:	69fb      	ldr	r3, [r7, #28]
 8015b2c:	330b      	adds	r3, #11
 8015b2e:	78db      	ldrb	r3, [r3, #3]
}
 8015b30:	4618      	mov	r0, r3
 8015b32:	3720      	adds	r7, #32
 8015b34:	46bd      	mov	sp, r7
 8015b36:	bd80      	pop	{r7, pc}

08015b38 <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b088      	sub	sp, #32
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015b40:	f107 030c 	add.w	r3, r7, #12
 8015b44:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 8015b4c:	69fb      	ldr	r3, [r7, #28]
 8015b4e:	210f      	movs	r1, #15
 8015b50:	f64f 4068 	movw	r0, #64616	; 0xfc68
 8015b54:	f000 faea 	bl	801612c <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b58:	69fb      	ldr	r3, [r7, #28]
 8015b5a:	330b      	adds	r3, #11
 8015b5c:	78db      	ldrb	r3, [r3, #3]
}
 8015b5e:	4618      	mov	r0, r3
 8015b60:	3720      	adds	r7, #32
 8015b62:	46bd      	mov	sp, r7
 8015b64:	bd80      	pop	{r7, pc}

08015b66 <SHCI_C2_FLASH_EraseActivity>:

SHCI_CmdStatus_t SHCI_C2_FLASH_EraseActivity( SHCI_EraseActivity_t erase_activity )
{
 8015b66:	b580      	push	{r7, lr}
 8015b68:	b088      	sub	sp, #32
 8015b6a:	af00      	add	r7, sp, #0
 8015b6c:	4603      	mov	r3, r0
 8015b6e:	71fb      	strb	r3, [r7, #7]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015b70:	f107 030c 	add.w	r3, r7, #12
 8015b74:	61fb      	str	r3, [r7, #28]

  local_buffer[0] = erase_activity;
 8015b76:	79fb      	ldrb	r3, [r7, #7]
 8015b78:	733b      	strb	r3, [r7, #12]

  shci_send( SHCI_OPCODE_C2_FLASH_ERASE_ACTIVITY,
 8015b7a:	f107 020c 	add.w	r2, r7, #12
 8015b7e:	69fb      	ldr	r3, [r7, #28]
 8015b80:	2101      	movs	r1, #1
 8015b82:	f64f 4069 	movw	r0, #64617	; 0xfc69
 8015b86:	f000 fad1 	bl	801612c <shci_send>
             1,
             local_buffer,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015b8a:	69fb      	ldr	r3, [r7, #28]
 8015b8c:	330b      	adds	r3, #11
 8015b8e:	78db      	ldrb	r3, [r3, #3]
}
 8015b90:	4618      	mov	r0, r3
 8015b92:	3720      	adds	r7, #32
 8015b94:	46bd      	mov	sp, r7
 8015b96:	bd80      	pop	{r7, pc}

08015b98 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 8015b98:	b580      	push	{r7, lr}
 8015b9a:	b088      	sub	sp, #32
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 8015ba0:	f107 030c 	add.w	r3, r7, #12
 8015ba4:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 8015ba6:	69fb      	ldr	r3, [r7, #28]
 8015ba8:	687a      	ldr	r2, [r7, #4]
 8015baa:	2110      	movs	r1, #16
 8015bac:	f64f 4075 	movw	r0, #64629	; 0xfc75
 8015bb0:	f000 fabc 	bl	801612c <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 8015bb4:	69fb      	ldr	r3, [r7, #28]
 8015bb6:	330b      	adds	r3, #11
 8015bb8:	78db      	ldrb	r3, [r3, #3]
}
 8015bba:	4618      	mov	r0, r3
 8015bbc:	3720      	adds	r7, #32
 8015bbe:	46bd      	mov	sp, r7
 8015bc0:	bd80      	pop	{r7, pc}
	...

08015bc4 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 8015bc4:	b480      	push	{r7}
 8015bc6:	b08b      	sub	sp, #44	; 0x2c
 8015bc8:	af00      	add	r7, sp, #0
 8015bca:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 8015bcc:	2300      	movs	r3, #0
 8015bce:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 8015bd0:	2300      	movs	r3, #0
 8015bd2:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 8015bd4:	2300      	movs	r3, #0
 8015bd6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 8015bd8:	2300      	movs	r3, #0
 8015bda:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 8015bdc:	2300      	movs	r3, #0
 8015bde:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 8015be0:	2300      	movs	r3, #0
 8015be2:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 8015be4:	2300      	movs	r3, #0
 8015be6:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 8015be8:	2300      	movs	r3, #0
 8015bea:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 8015bec:	4b4a      	ldr	r3, [pc, #296]	; (8015d18 <SHCI_GetWirelessFwInfo+0x154>)
 8015bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015bf0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015bf4:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 8015bf6:	693b      	ldr	r3, [r7, #16]
 8015bf8:	009b      	lsls	r3, r3, #2
 8015bfa:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015bfe:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 8015c06:	68bb      	ldr	r3, [r7, #8]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a44      	ldr	r2, [pc, #272]	; (8015d1c <SHCI_GetWirelessFwInfo+0x158>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d10f      	bne.n	8015c30 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 8015c10:	68bb      	ldr	r3, [r7, #8]
 8015c12:	695b      	ldr	r3, [r3, #20]
 8015c14:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 8015c16:	68bb      	ldr	r3, [r7, #8]
 8015c18:	699b      	ldr	r3, [r3, #24]
 8015c1a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 8015c1c:	68bb      	ldr	r3, [r7, #8]
 8015c1e:	69db      	ldr	r3, [r3, #28]
 8015c20:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 8015c22:	68bb      	ldr	r3, [r7, #8]
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 8015c28:	68bb      	ldr	r3, [r7, #8]
 8015c2a:	691b      	ldr	r3, [r3, #16]
 8015c2c:	617b      	str	r3, [r7, #20]
 8015c2e:	e01a      	b.n	8015c66 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 8015c30:	693b      	ldr	r3, [r7, #16]
 8015c32:	009b      	lsls	r3, r3, #2
 8015c34:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8015c38:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8015c3c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	691b      	ldr	r3, [r3, #16]
 8015c44:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 8015c46:	68fb      	ldr	r3, [r7, #12]
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	695b      	ldr	r3, [r3, #20]
 8015c4c:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	699b      	ldr	r3, [r3, #24]
 8015c54:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	681b      	ldr	r3, [r3, #0]
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	689b      	ldr	r3, [r3, #8]
 8015c64:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c68:	0e1b      	lsrs	r3, r3, #24
 8015c6a:	b2da      	uxtb	r2, r3
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c72:	0c1b      	lsrs	r3, r3, #16
 8015c74:	b2da      	uxtb	r2, r3
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7c:	0a1b      	lsrs	r3, r3, #8
 8015c7e:	b2da      	uxtb	r2, r3
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 8015c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c86:	091b      	lsrs	r3, r3, #4
 8015c88:	b2db      	uxtb	r3, r3
 8015c8a:	f003 030f 	and.w	r3, r3, #15
 8015c8e:	b2da      	uxtb	r2, r3
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 8015c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c96:	b2db      	uxtb	r3, r3
 8015c98:	f003 030f 	and.w	r3, r3, #15
 8015c9c:	b2da      	uxtb	r2, r3
 8015c9e:	687b      	ldr	r3, [r7, #4]
 8015ca0:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015ca2:	6a3b      	ldr	r3, [r7, #32]
 8015ca4:	0e1b      	lsrs	r3, r3, #24
 8015ca6:	b2da      	uxtb	r2, r3
 8015ca8:	687b      	ldr	r3, [r7, #4]
 8015caa:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015cac:	6a3b      	ldr	r3, [r7, #32]
 8015cae:	0c1b      	lsrs	r3, r3, #16
 8015cb0:	b2da      	uxtb	r2, r3
 8015cb2:	687b      	ldr	r3, [r7, #4]
 8015cb4:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 8015cb6:	6a3b      	ldr	r3, [r7, #32]
 8015cb8:	0a1b      	lsrs	r3, r3, #8
 8015cba:	b2da      	uxtb	r2, r3
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015cc0:	6a3b      	ldr	r3, [r7, #32]
 8015cc2:	b2da      	uxtb	r2, r3
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	b2da      	uxtb	r2, r3
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 8015cd0:	69bb      	ldr	r3, [r7, #24]
 8015cd2:	0e1b      	lsrs	r3, r3, #24
 8015cd4:	b2da      	uxtb	r2, r3
 8015cd6:	687b      	ldr	r3, [r7, #4]
 8015cd8:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 8015cda:	69bb      	ldr	r3, [r7, #24]
 8015cdc:	0c1b      	lsrs	r3, r3, #16
 8015cde:	b2da      	uxtb	r2, r3
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 8015ce4:	69bb      	ldr	r3, [r7, #24]
 8015ce6:	0a1b      	lsrs	r3, r3, #8
 8015ce8:	b2da      	uxtb	r2, r3
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 8015cee:	697b      	ldr	r3, [r7, #20]
 8015cf0:	0e1b      	lsrs	r3, r3, #24
 8015cf2:	b2da      	uxtb	r2, r3
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 8015cf8:	697b      	ldr	r3, [r7, #20]
 8015cfa:	0c1b      	lsrs	r3, r3, #16
 8015cfc:	b2da      	uxtb	r2, r3
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 8015d02:	697b      	ldr	r3, [r7, #20]
 8015d04:	b2da      	uxtb	r2, r3
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 8015d0a:	2300      	movs	r3, #0
}
 8015d0c:	4618      	mov	r0, r3
 8015d0e:	372c      	adds	r7, #44	; 0x2c
 8015d10:	46bd      	mov	sp, r7
 8015d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d16:	4770      	bx	lr
 8015d18:	58004000 	.word	0x58004000
 8015d1c:	a94656b9 	.word	0xa94656b9

08015d20 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8015d20:	b580      	push	{r7, lr}
 8015d22:	b082      	sub	sp, #8
 8015d24:	af00      	add	r7, sp, #0
 8015d26:	6078      	str	r0, [r7, #4]
 8015d28:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8015d2a:	683b      	ldr	r3, [r7, #0]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	4a08      	ldr	r2, [pc, #32]	; (8015d50 <hci_init+0x30>)
 8015d30:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 8015d32:	4a08      	ldr	r2, [pc, #32]	; (8015d54 <hci_init+0x34>)
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 8015d38:	4806      	ldr	r0, [pc, #24]	; (8015d54 <hci_init+0x34>)
 8015d3a:	f000 f979 	bl	8016030 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8015d3e:	683b      	ldr	r3, [r7, #0]
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f000 f8da 	bl	8015efc <TlInit>

  return;
 8015d48:	bf00      	nop
}
 8015d4a:	3708      	adds	r7, #8
 8015d4c:	46bd      	mov	sp, r7
 8015d4e:	bd80      	pop	{r7, pc}
 8015d50:	20006ea4 	.word	0x20006ea4
 8015d54:	20006e7c 	.word	0x20006e7c

08015d58 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8015d5e:	4822      	ldr	r0, [pc, #136]	; (8015de8 <hci_user_evt_proc+0x90>)
 8015d60:	f001 f898 	bl	8016e94 <LST_is_empty>
 8015d64:	4603      	mov	r3, r0
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d12b      	bne.n	8015dc2 <hci_user_evt_proc+0x6a>
 8015d6a:	4b20      	ldr	r3, [pc, #128]	; (8015dec <hci_user_evt_proc+0x94>)
 8015d6c:	781b      	ldrb	r3, [r3, #0]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d027      	beq.n	8015dc2 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 8015d72:	f107 030c 	add.w	r3, r7, #12
 8015d76:	4619      	mov	r1, r3
 8015d78:	481b      	ldr	r0, [pc, #108]	; (8015de8 <hci_user_evt_proc+0x90>)
 8015d7a:	f001 f91a 	bl	8016fb2 <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 8015d7e:	4b1c      	ldr	r3, [pc, #112]	; (8015df0 <hci_user_evt_proc+0x98>)
 8015d80:	69db      	ldr	r3, [r3, #28]
 8015d82:	2b00      	cmp	r3, #0
 8015d84:	d00c      	beq.n	8015da0 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 8015d8a:	2301      	movs	r3, #1
 8015d8c:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 8015d8e:	4b18      	ldr	r3, [pc, #96]	; (8015df0 <hci_user_evt_proc+0x98>)
 8015d90:	69db      	ldr	r3, [r3, #28]
 8015d92:	1d3a      	adds	r2, r7, #4
 8015d94:	4610      	mov	r0, r2
 8015d96:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 8015d98:	793a      	ldrb	r2, [r7, #4]
 8015d9a:	4b14      	ldr	r3, [pc, #80]	; (8015dec <hci_user_evt_proc+0x94>)
 8015d9c:	701a      	strb	r2, [r3, #0]
 8015d9e:	e002      	b.n	8015da6 <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8015da0:	4b12      	ldr	r3, [pc, #72]	; (8015dec <hci_user_evt_proc+0x94>)
 8015da2:	2201      	movs	r2, #1
 8015da4:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 8015da6:	4b11      	ldr	r3, [pc, #68]	; (8015dec <hci_user_evt_proc+0x94>)
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d004      	beq.n	8015db8 <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	4618      	mov	r0, r3
 8015db2:	f000 fc0d 	bl	80165d0 <TL_MM_EvtDone>
 8015db6:	e004      	b.n	8015dc2 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	4619      	mov	r1, r3
 8015dbc:	480a      	ldr	r0, [pc, #40]	; (8015de8 <hci_user_evt_proc+0x90>)
 8015dbe:	f001 f88b 	bl	8016ed8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 8015dc2:	4809      	ldr	r0, [pc, #36]	; (8015de8 <hci_user_evt_proc+0x90>)
 8015dc4:	f001 f866 	bl	8016e94 <LST_is_empty>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	2b00      	cmp	r3, #0
 8015dcc:	d107      	bne.n	8015dde <hci_user_evt_proc+0x86>
 8015dce:	4b07      	ldr	r3, [pc, #28]	; (8015dec <hci_user_evt_proc+0x94>)
 8015dd0:	781b      	ldrb	r3, [r3, #0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d003      	beq.n	8015dde <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 8015dd6:	4804      	ldr	r0, [pc, #16]	; (8015de8 <hci_user_evt_proc+0x90>)
 8015dd8:	f7ed fd04 	bl	80037e4 <hci_notify_asynch_evt>
  }


  return;
 8015ddc:	bf00      	nop
 8015dde:	bf00      	nop
}
 8015de0:	3710      	adds	r7, #16
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	200002e4 	.word	0x200002e4
 8015dec:	200002f0 	.word	0x200002f0
 8015df0:	20006e7c 	.word	0x20006e7c

08015df4 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 8015df4:	b580      	push	{r7, lr}
 8015df6:	b088      	sub	sp, #32
 8015df8:	af00      	add	r7, sp, #0
 8015dfa:	6078      	str	r0, [r7, #4]
 8015dfc:	460b      	mov	r3, r1
 8015dfe:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 8015e00:	2000      	movs	r0, #0
 8015e02:	f000 f8d1 	bl	8015fa8 <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 8015e06:	2300      	movs	r3, #0
 8015e08:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	885b      	ldrh	r3, [r3, #2]
 8015e0e:	b21b      	sxth	r3, r3
 8015e10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8015e14:	b21a      	sxth	r2, r3
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	881b      	ldrh	r3, [r3, #0]
 8015e1a:	029b      	lsls	r3, r3, #10
 8015e1c:	b21b      	sxth	r3, r3
 8015e1e:	4313      	orrs	r3, r2
 8015e20:	b21b      	sxth	r3, r3
 8015e22:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 8015e24:	4b33      	ldr	r3, [pc, #204]	; (8015ef4 <hci_send_req+0x100>)
 8015e26:	2201      	movs	r2, #1
 8015e28:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	68db      	ldr	r3, [r3, #12]
 8015e2e:	b2d9      	uxtb	r1, r3
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	689a      	ldr	r2, [r3, #8]
 8015e34:	8bbb      	ldrh	r3, [r7, #28]
 8015e36:	4618      	mov	r0, r3
 8015e38:	f000 f890 	bl	8015f5c <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 8015e3c:	e04e      	b.n	8015edc <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 8015e3e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 8015e42:	f7ed fce7 	bl	8003814 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8015e46:	e043      	b.n	8015ed0 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 8015e48:	f107 030c 	add.w	r3, r7, #12
 8015e4c:	4619      	mov	r1, r3
 8015e4e:	482a      	ldr	r0, [pc, #168]	; (8015ef8 <hci_send_req+0x104>)
 8015e50:	f001 f8af 	bl	8016fb2 <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 8015e54:	68fb      	ldr	r3, [r7, #12]
 8015e56:	7a5b      	ldrb	r3, [r3, #9]
 8015e58:	2b0f      	cmp	r3, #15
 8015e5a:	d114      	bne.n	8015e86 <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 8015e5c:	68fb      	ldr	r3, [r7, #12]
 8015e5e:	330b      	adds	r3, #11
 8015e60:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	885b      	ldrh	r3, [r3, #2]
 8015e66:	b29b      	uxth	r3, r3
 8015e68:	8bba      	ldrh	r2, [r7, #28]
 8015e6a:	429a      	cmp	r2, r3
 8015e6c:	d104      	bne.n	8015e78 <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	691b      	ldr	r3, [r3, #16]
 8015e72:	693a      	ldr	r2, [r7, #16]
 8015e74:	7812      	ldrb	r2, [r2, #0]
 8015e76:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	785b      	ldrb	r3, [r3, #1]
 8015e7c:	2b00      	cmp	r3, #0
 8015e7e:	d027      	beq.n	8015ed0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8015e80:	2301      	movs	r3, #1
 8015e82:	77fb      	strb	r3, [r7, #31]
 8015e84:	e024      	b.n	8015ed0 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 8015e86:	68fb      	ldr	r3, [r7, #12]
 8015e88:	330b      	adds	r3, #11
 8015e8a:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 8015e8c:	69bb      	ldr	r3, [r7, #24]
 8015e8e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8015e92:	b29b      	uxth	r3, r3
 8015e94:	8bba      	ldrh	r2, [r7, #28]
 8015e96:	429a      	cmp	r2, r3
 8015e98:	d114      	bne.n	8015ec4 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	7a9b      	ldrb	r3, [r3, #10]
 8015e9e:	3b03      	subs	r3, #3
 8015ea0:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	695a      	ldr	r2, [r3, #20]
 8015ea6:	7dfb      	ldrb	r3, [r7, #23]
 8015ea8:	429a      	cmp	r2, r3
 8015eaa:	bfa8      	it	ge
 8015eac:	461a      	movge	r2, r3
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6918      	ldr	r0, [r3, #16]
 8015eb6:	69bb      	ldr	r3, [r7, #24]
 8015eb8:	1cd9      	adds	r1, r3, #3
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	695b      	ldr	r3, [r3, #20]
 8015ebe:	461a      	mov	r2, r3
 8015ec0:	f013 fd89 	bl	80299d6 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 8015ec4:	69bb      	ldr	r3, [r7, #24]
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d001      	beq.n	8015ed0 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 8015ecc:	2301      	movs	r3, #1
 8015ece:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 8015ed0:	4809      	ldr	r0, [pc, #36]	; (8015ef8 <hci_send_req+0x104>)
 8015ed2:	f000 ffdf 	bl	8016e94 <LST_is_empty>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d0b5      	beq.n	8015e48 <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 8015edc:	7ffb      	ldrb	r3, [r7, #31]
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d0ad      	beq.n	8015e3e <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 8015ee2:	2001      	movs	r0, #1
 8015ee4:	f000 f860 	bl	8015fa8 <NotifyCmdStatus>

  return 0;
 8015ee8:	2300      	movs	r3, #0
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3720      	adds	r7, #32
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop
 8015ef4:	20006ea8 	.word	0x20006ea8
 8015ef8:	20006e9c 	.word	0x20006e9c

08015efc <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b086      	sub	sp, #24
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 8015f04:	480f      	ldr	r0, [pc, #60]	; (8015f44 <TlInit+0x48>)
 8015f06:	f000 ffb5 	bl	8016e74 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 8015f0a:	4a0f      	ldr	r2, [pc, #60]	; (8015f48 <TlInit+0x4c>)
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 8015f10:	480e      	ldr	r0, [pc, #56]	; (8015f4c <TlInit+0x50>)
 8015f12:	f000 ffaf 	bl	8016e74 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 8015f16:	4b0e      	ldr	r3, [pc, #56]	; (8015f50 <TlInit+0x54>)
 8015f18:	2201      	movs	r2, #1
 8015f1a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 8015f1c:	4b0d      	ldr	r3, [pc, #52]	; (8015f54 <TlInit+0x58>)
 8015f1e:	681b      	ldr	r3, [r3, #0]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d00a      	beq.n	8015f3a <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 8015f28:	4b0b      	ldr	r3, [pc, #44]	; (8015f58 <TlInit+0x5c>)
 8015f2a:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 8015f2c:	4b09      	ldr	r3, [pc, #36]	; (8015f54 <TlInit+0x58>)
 8015f2e:	681b      	ldr	r3, [r3, #0]
 8015f30:	f107 0208 	add.w	r2, r7, #8
 8015f34:	4610      	mov	r0, r2
 8015f36:	4798      	blx	r3
  }

  return;
 8015f38:	bf00      	nop
 8015f3a:	bf00      	nop
}
 8015f3c:	3718      	adds	r7, #24
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	bd80      	pop	{r7, pc}
 8015f42:	bf00      	nop
 8015f44:	20006e9c 	.word	0x20006e9c
 8015f48:	200002ec 	.word	0x200002ec
 8015f4c:	200002e4 	.word	0x200002e4
 8015f50:	200002f0 	.word	0x200002f0
 8015f54:	20006e7c 	.word	0x20006e7c
 8015f58:	08015fe9 	.word	0x08015fe9

08015f5c <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b082      	sub	sp, #8
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	4603      	mov	r3, r0
 8015f64:	603a      	str	r2, [r7, #0]
 8015f66:	80fb      	strh	r3, [r7, #6]
 8015f68:	460b      	mov	r3, r1
 8015f6a:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 8015f6c:	4b0c      	ldr	r3, [pc, #48]	; (8015fa0 <SendCmd+0x44>)
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	88fa      	ldrh	r2, [r7, #6]
 8015f72:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 8015f76:	4b0a      	ldr	r3, [pc, #40]	; (8015fa0 <SendCmd+0x44>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	797a      	ldrb	r2, [r7, #5]
 8015f7c:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 8015f7e:	4b08      	ldr	r3, [pc, #32]	; (8015fa0 <SendCmd+0x44>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	330c      	adds	r3, #12
 8015f84:	797a      	ldrb	r2, [r7, #5]
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	4618      	mov	r0, r3
 8015f8a:	f013 fd24 	bl	80299d6 <memcpy>

  hciContext.io.Send(0,0);
 8015f8e:	4b05      	ldr	r3, [pc, #20]	; (8015fa4 <SendCmd+0x48>)
 8015f90:	691b      	ldr	r3, [r3, #16]
 8015f92:	2100      	movs	r1, #0
 8015f94:	2000      	movs	r0, #0
 8015f96:	4798      	blx	r3

  return;
 8015f98:	bf00      	nop
}
 8015f9a:	3708      	adds	r7, #8
 8015f9c:	46bd      	mov	sp, r7
 8015f9e:	bd80      	pop	{r7, pc}
 8015fa0:	200002ec 	.word	0x200002ec
 8015fa4:	20006e7c 	.word	0x20006e7c

08015fa8 <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 8015fa8:	b580      	push	{r7, lr}
 8015faa:	b082      	sub	sp, #8
 8015fac:	af00      	add	r7, sp, #0
 8015fae:	4603      	mov	r3, r0
 8015fb0:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 8015fb2:	79fb      	ldrb	r3, [r7, #7]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d108      	bne.n	8015fca <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 8015fb8:	4b0a      	ldr	r3, [pc, #40]	; (8015fe4 <NotifyCmdStatus+0x3c>)
 8015fba:	681b      	ldr	r3, [r3, #0]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d00d      	beq.n	8015fdc <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 8015fc0:	4b08      	ldr	r3, [pc, #32]	; (8015fe4 <NotifyCmdStatus+0x3c>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	2000      	movs	r0, #0
 8015fc6:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 8015fc8:	e008      	b.n	8015fdc <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 8015fca:	4b06      	ldr	r3, [pc, #24]	; (8015fe4 <NotifyCmdStatus+0x3c>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d004      	beq.n	8015fdc <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 8015fd2:	4b04      	ldr	r3, [pc, #16]	; (8015fe4 <NotifyCmdStatus+0x3c>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	2001      	movs	r0, #1
 8015fd8:	4798      	blx	r3
  return;
 8015fda:	bf00      	nop
 8015fdc:	bf00      	nop
}
 8015fde:	3708      	adds	r7, #8
 8015fe0:	46bd      	mov	sp, r7
 8015fe2:	bd80      	pop	{r7, pc}
 8015fe4:	20006ea4 	.word	0x20006ea4

08015fe8 <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 8015fe8:	b580      	push	{r7, lr}
 8015fea:	b082      	sub	sp, #8
 8015fec:	af00      	add	r7, sp, #0
 8015fee:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	7a5b      	ldrb	r3, [r3, #9]
 8015ff4:	2b0f      	cmp	r3, #15
 8015ff6:	d003      	beq.n	8016000 <TlEvtReceived+0x18>
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	7a5b      	ldrb	r3, [r3, #9]
 8015ffc:	2b0e      	cmp	r3, #14
 8015ffe:	d107      	bne.n	8016010 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 8016000:	6879      	ldr	r1, [r7, #4]
 8016002:	4809      	ldr	r0, [pc, #36]	; (8016028 <TlEvtReceived+0x40>)
 8016004:	f000 ff8e 	bl	8016f24 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 8016008:	2000      	movs	r0, #0
 801600a:	f7ed fbf8 	bl	80037fe <hci_cmd_resp_release>
 801600e:	e006      	b.n	801601e <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 8016010:	6879      	ldr	r1, [r7, #4]
 8016012:	4806      	ldr	r0, [pc, #24]	; (801602c <TlEvtReceived+0x44>)
 8016014:	f000 ff86 	bl	8016f24 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 8016018:	4804      	ldr	r0, [pc, #16]	; (801602c <TlEvtReceived+0x44>)
 801601a:	f7ed fbe3 	bl	80037e4 <hci_notify_asynch_evt>
  }

  return;
 801601e:	bf00      	nop
}
 8016020:	3708      	adds	r7, #8
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	20006e9c 	.word	0x20006e9c
 801602c:	200002e4 	.word	0x200002e4

08016030 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 8016030:	b480      	push	{r7}
 8016032:	b083      	sub	sp, #12
 8016034:	af00      	add	r7, sp, #0
 8016036:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	4a05      	ldr	r2, [pc, #20]	; (8016050 <hci_register_io_bus+0x20>)
 801603c:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	4a04      	ldr	r2, [pc, #16]	; (8016054 <hci_register_io_bus+0x24>)
 8016042:	611a      	str	r2, [r3, #16]

  return;
 8016044:	bf00      	nop
}
 8016046:	370c      	adds	r7, #12
 8016048:	46bd      	mov	sp, r7
 801604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801604e:	4770      	bx	lr
 8016050:	08016349 	.word	0x08016349
 8016054:	080163b1 	.word	0x080163b1

08016058 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b082      	sub	sp, #8
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	685b      	ldr	r3, [r3, #4]
 8016066:	4a08      	ldr	r2, [pc, #32]	; (8016088 <shci_init+0x30>)
 8016068:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 801606a:	4a08      	ldr	r2, [pc, #32]	; (801608c <shci_init+0x34>)
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 8016070:	4806      	ldr	r0, [pc, #24]	; (801608c <shci_init+0x34>)
 8016072:	f000 f915 	bl	80162a0 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 8016076:	683b      	ldr	r3, [r7, #0]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	4618      	mov	r0, r3
 801607c:	f000 f898 	bl	80161b0 <TlInit>

  return;
 8016080:	bf00      	nop
}
 8016082:	3708      	adds	r7, #8
 8016084:	46bd      	mov	sp, r7
 8016086:	bd80      	pop	{r7, pc}
 8016088:	20006ecc 	.word	0x20006ecc
 801608c:	20006eac 	.word	0x20006eac

08016090 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 8016090:	b580      	push	{r7, lr}
 8016092:	b084      	sub	sp, #16
 8016094:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 8016096:	4822      	ldr	r0, [pc, #136]	; (8016120 <shci_user_evt_proc+0x90>)
 8016098:	f000 fefc 	bl	8016e94 <LST_is_empty>
 801609c:	4603      	mov	r3, r0
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d12b      	bne.n	80160fa <shci_user_evt_proc+0x6a>
 80160a2:	4b20      	ldr	r3, [pc, #128]	; (8016124 <shci_user_evt_proc+0x94>)
 80160a4:	781b      	ldrb	r3, [r3, #0]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d027      	beq.n	80160fa <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 80160aa:	f107 030c 	add.w	r3, r7, #12
 80160ae:	4619      	mov	r1, r3
 80160b0:	481b      	ldr	r0, [pc, #108]	; (8016120 <shci_user_evt_proc+0x90>)
 80160b2:	f000 ff7e 	bl	8016fb2 <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 80160b6:	4b1c      	ldr	r3, [pc, #112]	; (8016128 <shci_user_evt_proc+0x98>)
 80160b8:	69db      	ldr	r3, [r3, #28]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	d00c      	beq.n	80160d8 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 80160c2:	2301      	movs	r3, #1
 80160c4:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 80160c6:	4b18      	ldr	r3, [pc, #96]	; (8016128 <shci_user_evt_proc+0x98>)
 80160c8:	69db      	ldr	r3, [r3, #28]
 80160ca:	1d3a      	adds	r2, r7, #4
 80160cc:	4610      	mov	r0, r2
 80160ce:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 80160d0:	793a      	ldrb	r2, [r7, #4]
 80160d2:	4b14      	ldr	r3, [pc, #80]	; (8016124 <shci_user_evt_proc+0x94>)
 80160d4:	701a      	strb	r2, [r3, #0]
 80160d6:	e002      	b.n	80160de <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80160d8:	4b12      	ldr	r3, [pc, #72]	; (8016124 <shci_user_evt_proc+0x94>)
 80160da:	2201      	movs	r2, #1
 80160dc:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 80160de:	4b11      	ldr	r3, [pc, #68]	; (8016124 <shci_user_evt_proc+0x94>)
 80160e0:	781b      	ldrb	r3, [r3, #0]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d004      	beq.n	80160f0 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	4618      	mov	r0, r3
 80160ea:	f000 fa71 	bl	80165d0 <TL_MM_EvtDone>
 80160ee:	e004      	b.n	80160fa <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	4619      	mov	r1, r3
 80160f4:	480a      	ldr	r0, [pc, #40]	; (8016120 <shci_user_evt_proc+0x90>)
 80160f6:	f000 feef 	bl	8016ed8 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 80160fa:	4809      	ldr	r0, [pc, #36]	; (8016120 <shci_user_evt_proc+0x90>)
 80160fc:	f000 feca 	bl	8016e94 <LST_is_empty>
 8016100:	4603      	mov	r3, r0
 8016102:	2b00      	cmp	r3, #0
 8016104:	d107      	bne.n	8016116 <shci_user_evt_proc+0x86>
 8016106:	4b07      	ldr	r3, [pc, #28]	; (8016124 <shci_user_evt_proc+0x94>)
 8016108:	781b      	ldrb	r3, [r3, #0]
 801610a:	2b00      	cmp	r3, #0
 801610c:	d003      	beq.n	8016116 <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 801610e:	4804      	ldr	r0, [pc, #16]	; (8016120 <shci_user_evt_proc+0x90>)
 8016110:	f7eb fc32 	bl	8001978 <shci_notify_asynch_evt>
  }


  return;
 8016114:	bf00      	nop
 8016116:	bf00      	nop
}
 8016118:	3710      	adds	r7, #16
 801611a:	46bd      	mov	sp, r7
 801611c:	bd80      	pop	{r7, pc}
 801611e:	bf00      	nop
 8016120:	200002f4 	.word	0x200002f4
 8016124:	20000304 	.word	0x20000304
 8016128:	20006eac 	.word	0x20006eac

0801612c <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 801612c:	b580      	push	{r7, lr}
 801612e:	b084      	sub	sp, #16
 8016130:	af00      	add	r7, sp, #0
 8016132:	60ba      	str	r2, [r7, #8]
 8016134:	607b      	str	r3, [r7, #4]
 8016136:	4603      	mov	r3, r0
 8016138:	81fb      	strh	r3, [r7, #14]
 801613a:	460b      	mov	r3, r1
 801613c:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 801613e:	2000      	movs	r0, #0
 8016140:	f000 f868 	bl	8016214 <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 8016144:	4b17      	ldr	r3, [pc, #92]	; (80161a4 <shci_send+0x78>)
 8016146:	681b      	ldr	r3, [r3, #0]
 8016148:	89fa      	ldrh	r2, [r7, #14]
 801614a:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 801614e:	4b15      	ldr	r3, [pc, #84]	; (80161a4 <shci_send+0x78>)
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	7b7a      	ldrb	r2, [r7, #13]
 8016154:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 8016156:	4b13      	ldr	r3, [pc, #76]	; (80161a4 <shci_send+0x78>)
 8016158:	681b      	ldr	r3, [r3, #0]
 801615a:	330c      	adds	r3, #12
 801615c:	7b7a      	ldrb	r2, [r7, #13]
 801615e:	68b9      	ldr	r1, [r7, #8]
 8016160:	4618      	mov	r0, r3
 8016162:	f013 fc38 	bl	80299d6 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 8016166:	4b10      	ldr	r3, [pc, #64]	; (80161a8 <shci_send+0x7c>)
 8016168:	2201      	movs	r2, #1
 801616a:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 801616c:	4b0f      	ldr	r3, [pc, #60]	; (80161ac <shci_send+0x80>)
 801616e:	691b      	ldr	r3, [r3, #16]
 8016170:	2100      	movs	r1, #0
 8016172:	2000      	movs	r0, #0
 8016174:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 8016176:	f248 00e8 	movw	r0, #33000	; 0x80e8
 801617a:	f7eb fc15 	bl	80019a8 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 801617e:	687b      	ldr	r3, [r7, #4]
 8016180:	f103 0008 	add.w	r0, r3, #8
 8016184:	4b07      	ldr	r3, [pc, #28]	; (80161a4 <shci_send+0x78>)
 8016186:	6819      	ldr	r1, [r3, #0]
 8016188:	4b06      	ldr	r3, [pc, #24]	; (80161a4 <shci_send+0x78>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	789b      	ldrb	r3, [r3, #2]
 801618e:	3303      	adds	r3, #3
 8016190:	461a      	mov	r2, r3
 8016192:	f013 fc20 	bl	80299d6 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 8016196:	2001      	movs	r0, #1
 8016198:	f000 f83c 	bl	8016214 <Cmd_SetStatus>

  return;
 801619c:	bf00      	nop
}
 801619e:	3710      	adds	r7, #16
 80161a0:	46bd      	mov	sp, r7
 80161a2:	bd80      	pop	{r7, pc}
 80161a4:	20000300 	.word	0x20000300
 80161a8:	20006ed0 	.word	0x20006ed0
 80161ac:	20006eac 	.word	0x20006eac

080161b0 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b086      	sub	sp, #24
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 80161b8:	4a10      	ldr	r2, [pc, #64]	; (80161fc <TlInit+0x4c>)
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 80161be:	4810      	ldr	r0, [pc, #64]	; (8016200 <TlInit+0x50>)
 80161c0:	f000 fe58 	bl	8016e74 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 80161c4:	2001      	movs	r0, #1
 80161c6:	f000 f825 	bl	8016214 <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 80161ca:	4b0e      	ldr	r3, [pc, #56]	; (8016204 <TlInit+0x54>)
 80161cc:	2201      	movs	r2, #1
 80161ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 80161d0:	4b0d      	ldr	r3, [pc, #52]	; (8016208 <TlInit+0x58>)
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d00c      	beq.n	80161f2 <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 80161dc:	4b0b      	ldr	r3, [pc, #44]	; (801620c <TlInit+0x5c>)
 80161de:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 80161e0:	4b0b      	ldr	r3, [pc, #44]	; (8016210 <TlInit+0x60>)
 80161e2:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 80161e4:	4b08      	ldr	r3, [pc, #32]	; (8016208 <TlInit+0x58>)
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	f107 020c 	add.w	r2, r7, #12
 80161ec:	4610      	mov	r0, r2
 80161ee:	4798      	blx	r3
  }

  return;
 80161f0:	bf00      	nop
 80161f2:	bf00      	nop
}
 80161f4:	3718      	adds	r7, #24
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	20000300 	.word	0x20000300
 8016200:	200002f4 	.word	0x200002f4
 8016204:	20000304 	.word	0x20000304
 8016208:	20006eac 	.word	0x20006eac
 801620c:	08016265 	.word	0x08016265
 8016210:	0801627d 	.word	0x0801627d

08016214 <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b082      	sub	sp, #8
 8016218:	af00      	add	r7, sp, #0
 801621a:	4603      	mov	r3, r0
 801621c:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 801621e:	79fb      	ldrb	r3, [r7, #7]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d10b      	bne.n	801623c <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 8016224:	4b0d      	ldr	r3, [pc, #52]	; (801625c <Cmd_SetStatus+0x48>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d003      	beq.n	8016234 <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 801622c:	4b0b      	ldr	r3, [pc, #44]	; (801625c <Cmd_SetStatus+0x48>)
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	2000      	movs	r0, #0
 8016232:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 8016234:	4b0a      	ldr	r3, [pc, #40]	; (8016260 <Cmd_SetStatus+0x4c>)
 8016236:	2200      	movs	r2, #0
 8016238:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 801623a:	e00b      	b.n	8016254 <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 801623c:	4b08      	ldr	r3, [pc, #32]	; (8016260 <Cmd_SetStatus+0x4c>)
 801623e:	2201      	movs	r2, #1
 8016240:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 8016242:	4b06      	ldr	r3, [pc, #24]	; (801625c <Cmd_SetStatus+0x48>)
 8016244:	681b      	ldr	r3, [r3, #0]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d004      	beq.n	8016254 <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 801624a:	4b04      	ldr	r3, [pc, #16]	; (801625c <Cmd_SetStatus+0x48>)
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	2001      	movs	r0, #1
 8016250:	4798      	blx	r3
  return;
 8016252:	bf00      	nop
 8016254:	bf00      	nop
}
 8016256:	3708      	adds	r7, #8
 8016258:	46bd      	mov	sp, r7
 801625a:	bd80      	pop	{r7, pc}
 801625c:	20006ecc 	.word	0x20006ecc
 8016260:	200002fc 	.word	0x200002fc

08016264 <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 801626c:	2000      	movs	r0, #0
 801626e:	f7eb fb90 	bl	8001992 <shci_cmd_resp_release>

  return;
 8016272:	bf00      	nop
}
 8016274:	3708      	adds	r7, #8
 8016276:	46bd      	mov	sp, r7
 8016278:	bd80      	pop	{r7, pc}
	...

0801627c <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b082      	sub	sp, #8
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 8016284:	6879      	ldr	r1, [r7, #4]
 8016286:	4805      	ldr	r0, [pc, #20]	; (801629c <TlUserEvtReceived+0x20>)
 8016288:	f000 fe4c 	bl	8016f24 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 801628c:	4803      	ldr	r0, [pc, #12]	; (801629c <TlUserEvtReceived+0x20>)
 801628e:	f7eb fb73 	bl	8001978 <shci_notify_asynch_evt>

  return;
 8016292:	bf00      	nop
}
 8016294:	3708      	adds	r7, #8
 8016296:	46bd      	mov	sp, r7
 8016298:	bd80      	pop	{r7, pc}
 801629a:	bf00      	nop
 801629c:	200002f4 	.word	0x200002f4

080162a0 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 80162a0:	b480      	push	{r7}
 80162a2:	b083      	sub	sp, #12
 80162a4:	af00      	add	r7, sp, #0
 80162a6:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 80162a8:	687b      	ldr	r3, [r7, #4]
 80162aa:	4a05      	ldr	r2, [pc, #20]	; (80162c0 <shci_register_io_bus+0x20>)
 80162ac:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	4a04      	ldr	r2, [pc, #16]	; (80162c4 <shci_register_io_bus+0x24>)
 80162b2:	611a      	str	r2, [r3, #16]

  return;
 80162b4:	bf00      	nop
}
 80162b6:	370c      	adds	r7, #12
 80162b8:	46bd      	mov	sp, r7
 80162ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162be:	4770      	bx	lr
 80162c0:	0801645d 	.word	0x0801645d
 80162c4:	080164b1 	.word	0x080164b1

080162c8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 80162c8:	b580      	push	{r7, lr}
 80162ca:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 80162cc:	f7f1 facc 	bl	8007868 <HW_IPCC_Enable>

  return;
 80162d0:	bf00      	nop
}
 80162d2:	bd80      	pop	{r7, pc}

080162d4 <TL_Init>:


void TL_Init( void )
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 80162d8:	4b10      	ldr	r3, [pc, #64]	; (801631c <TL_Init+0x48>)
 80162da:	4a11      	ldr	r2, [pc, #68]	; (8016320 <TL_Init+0x4c>)
 80162dc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 80162de:	4b0f      	ldr	r3, [pc, #60]	; (801631c <TL_Init+0x48>)
 80162e0:	4a10      	ldr	r2, [pc, #64]	; (8016324 <TL_Init+0x50>)
 80162e2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 80162e4:	4b0d      	ldr	r3, [pc, #52]	; (801631c <TL_Init+0x48>)
 80162e6:	4a10      	ldr	r2, [pc, #64]	; (8016328 <TL_Init+0x54>)
 80162e8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 80162ea:	4b0c      	ldr	r3, [pc, #48]	; (801631c <TL_Init+0x48>)
 80162ec:	4a0f      	ldr	r2, [pc, #60]	; (801632c <TL_Init+0x58>)
 80162ee:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 80162f0:	4b0a      	ldr	r3, [pc, #40]	; (801631c <TL_Init+0x48>)
 80162f2:	4a0f      	ldr	r2, [pc, #60]	; (8016330 <TL_Init+0x5c>)
 80162f4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 80162f6:	4b09      	ldr	r3, [pc, #36]	; (801631c <TL_Init+0x48>)
 80162f8:	4a0e      	ldr	r2, [pc, #56]	; (8016334 <TL_Init+0x60>)
 80162fa:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 80162fc:	4b07      	ldr	r3, [pc, #28]	; (801631c <TL_Init+0x48>)
 80162fe:	4a0e      	ldr	r2, [pc, #56]	; (8016338 <TL_Init+0x64>)
 8016300:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 8016302:	4b06      	ldr	r3, [pc, #24]	; (801631c <TL_Init+0x48>)
 8016304:	4a0d      	ldr	r2, [pc, #52]	; (801633c <TL_Init+0x68>)
 8016306:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 8016308:	4b04      	ldr	r3, [pc, #16]	; (801631c <TL_Init+0x48>)
 801630a:	4a0d      	ldr	r2, [pc, #52]	; (8016340 <TL_Init+0x6c>)
 801630c:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 801630e:	4b03      	ldr	r3, [pc, #12]	; (801631c <TL_Init+0x48>)
 8016310:	4a0c      	ldr	r2, [pc, #48]	; (8016344 <TL_Init+0x70>)
 8016312:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 8016314:	f7f1 fabc 	bl	8007890 <HW_IPCC_Init>

  return;
 8016318:	bf00      	nop
}
 801631a:	bd80      	pop	{r7, pc}
 801631c:	20030000 	.word	0x20030000
 8016320:	20030134 	.word	0x20030134
 8016324:	20030154 	.word	0x20030154
 8016328:	20030164 	.word	0x20030164
 801632c:	20030174 	.word	0x20030174
 8016330:	2003017c 	.word	0x2003017c
 8016334:	20030184 	.word	0x20030184
 8016338:	2003018c 	.word	0x2003018c
 801633c:	200301a8 	.word	0x200301a8
 8016340:	200301ac 	.word	0x200301ac
 8016344:	200301b8 	.word	0x200301b8

08016348 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 8016348:	b580      	push	{r7, lr}
 801634a:	b084      	sub	sp, #16
 801634c:	af00      	add	r7, sp, #0
 801634e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 8016354:	4811      	ldr	r0, [pc, #68]	; (801639c <TL_BLE_Init+0x54>)
 8016356:	f000 fd8d 	bl	8016e74 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 801635a:	4b11      	ldr	r3, [pc, #68]	; (80163a0 <TL_BLE_Init+0x58>)
 801635c:	685b      	ldr	r3, [r3, #4]
 801635e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016360:	68fb      	ldr	r3, [r7, #12]
 8016362:	689a      	ldr	r2, [r3, #8]
 8016364:	68bb      	ldr	r3, [r7, #8]
 8016366:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 8016368:	68fb      	ldr	r3, [r7, #12]
 801636a:	68da      	ldr	r2, [r3, #12]
 801636c:	68bb      	ldr	r3, [r7, #8]
 801636e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 8016370:	68bb      	ldr	r3, [r7, #8]
 8016372:	4a0c      	ldr	r2, [pc, #48]	; (80163a4 <TL_BLE_Init+0x5c>)
 8016374:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 8016376:	68bb      	ldr	r3, [r7, #8]
 8016378:	4a08      	ldr	r2, [pc, #32]	; (801639c <TL_BLE_Init+0x54>)
 801637a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 801637c:	f7f1 fa9e 	bl	80078bc <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 8016380:	68fb      	ldr	r3, [r7, #12]
 8016382:	681b      	ldr	r3, [r3, #0]
 8016384:	4a08      	ldr	r2, [pc, #32]	; (80163a8 <TL_BLE_Init+0x60>)
 8016386:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	4a07      	ldr	r2, [pc, #28]	; (80163ac <TL_BLE_Init+0x64>)
 801638e:	6013      	str	r3, [r2, #0]

  return 0;
 8016390:	2300      	movs	r3, #0
}
 8016392:	4618      	mov	r0, r3
 8016394:	3710      	adds	r7, #16
 8016396:	46bd      	mov	sp, r7
 8016398:	bd80      	pop	{r7, pc}
 801639a:	bf00      	nop
 801639c:	200301d4 	.word	0x200301d4
 80163a0:	20030000 	.word	0x20030000
 80163a4:	20030a58 	.word	0x20030a58
 80163a8:	20006edc 	.word	0x20006edc
 80163ac:	20006ee0 	.word	0x20006ee0

080163b0 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]
 80163b8:	460b      	mov	r3, r1
 80163ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 80163bc:	4b09      	ldr	r3, [pc, #36]	; (80163e4 <TL_BLE_SendCmd+0x34>)
 80163be:	685b      	ldr	r3, [r3, #4]
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	2201      	movs	r2, #1
 80163c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 80163c6:	4b07      	ldr	r3, [pc, #28]	; (80163e4 <TL_BLE_SendCmd+0x34>)
 80163c8:	685b      	ldr	r3, [r3, #4]
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	4619      	mov	r1, r3
 80163ce:	2001      	movs	r0, #1
 80163d0:	f000 f96c 	bl	80166ac <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 80163d4:	f7f1 fa7c 	bl	80078d0 <HW_IPCC_BLE_SendCmd>

  return 0;
 80163d8:	2300      	movs	r3, #0
}
 80163da:	4618      	mov	r0, r3
 80163dc:	3708      	adds	r7, #8
 80163de:	46bd      	mov	sp, r7
 80163e0:	bd80      	pop	{r7, pc}
 80163e2:	bf00      	nop
 80163e4:	20030000 	.word	0x20030000

080163e8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 80163e8:	b580      	push	{r7, lr}
 80163ea:	b082      	sub	sp, #8
 80163ec:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 80163ee:	e01c      	b.n	801642a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 80163f0:	1d3b      	adds	r3, r7, #4
 80163f2:	4619      	mov	r1, r3
 80163f4:	4812      	ldr	r0, [pc, #72]	; (8016440 <HW_IPCC_BLE_RxEvtNot+0x58>)
 80163f6:	f000 fddc 	bl	8016fb2 <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	7a5b      	ldrb	r3, [r3, #9]
 80163fe:	2b0f      	cmp	r3, #15
 8016400:	d003      	beq.n	801640a <HW_IPCC_BLE_RxEvtNot+0x22>
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	7a5b      	ldrb	r3, [r3, #9]
 8016406:	2b0e      	cmp	r3, #14
 8016408:	d105      	bne.n	8016416 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	4619      	mov	r1, r3
 801640e:	2002      	movs	r0, #2
 8016410:	f000 f94c 	bl	80166ac <OutputDbgTrace>
 8016414:	e004      	b.n	8016420 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	4619      	mov	r1, r3
 801641a:	2003      	movs	r0, #3
 801641c:	f000 f946 	bl	80166ac <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 8016420:	4b08      	ldr	r3, [pc, #32]	; (8016444 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	687a      	ldr	r2, [r7, #4]
 8016426:	4610      	mov	r0, r2
 8016428:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 801642a:	4805      	ldr	r0, [pc, #20]	; (8016440 <HW_IPCC_BLE_RxEvtNot+0x58>)
 801642c:	f000 fd32 	bl	8016e94 <LST_is_empty>
 8016430:	4603      	mov	r3, r0
 8016432:	2b00      	cmp	r3, #0
 8016434:	d0dc      	beq.n	80163f0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 8016436:	bf00      	nop
}
 8016438:	3708      	adds	r7, #8
 801643a:	46bd      	mov	sp, r7
 801643c:	bd80      	pop	{r7, pc}
 801643e:	bf00      	nop
 8016440:	200301d4 	.word	0x200301d4
 8016444:	20006edc 	.word	0x20006edc

08016448 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 801644c:	4b02      	ldr	r3, [pc, #8]	; (8016458 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	4798      	blx	r3

  return;
 8016452:	bf00      	nop
}
 8016454:	bd80      	pop	{r7, pc}
 8016456:	bf00      	nop
 8016458:	20006ee0 	.word	0x20006ee0

0801645c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 801645c:	b580      	push	{r7, lr}
 801645e:	b084      	sub	sp, #16
 8016460:	af00      	add	r7, sp, #0
 8016462:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 8016468:	480d      	ldr	r0, [pc, #52]	; (80164a0 <TL_SYS_Init+0x44>)
 801646a:	f000 fd03 	bl	8016e74 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 801646e:	4b0d      	ldr	r3, [pc, #52]	; (80164a4 <TL_SYS_Init+0x48>)
 8016470:	68db      	ldr	r3, [r3, #12]
 8016472:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 8016474:	68fb      	ldr	r3, [r7, #12]
 8016476:	689a      	ldr	r2, [r3, #8]
 8016478:	68bb      	ldr	r3, [r7, #8]
 801647a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 801647c:	68bb      	ldr	r3, [r7, #8]
 801647e:	4a08      	ldr	r2, [pc, #32]	; (80164a0 <TL_SYS_Init+0x44>)
 8016480:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 8016482:	f7f1 fa47 	bl	8007914 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 8016486:	68fb      	ldr	r3, [r7, #12]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	4a07      	ldr	r2, [pc, #28]	; (80164a8 <TL_SYS_Init+0x4c>)
 801648c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 801648e:	68fb      	ldr	r3, [r7, #12]
 8016490:	685b      	ldr	r3, [r3, #4]
 8016492:	4a06      	ldr	r2, [pc, #24]	; (80164ac <TL_SYS_Init+0x50>)
 8016494:	6013      	str	r3, [r2, #0]

  return 0;
 8016496:	2300      	movs	r3, #0
}
 8016498:	4618      	mov	r0, r3
 801649a:	3710      	adds	r7, #16
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}
 80164a0:	200301dc 	.word	0x200301dc
 80164a4:	20030000 	.word	0x20030000
 80164a8:	20006ee4 	.word	0x20006ee4
 80164ac:	20006ee8 	.word	0x20006ee8

080164b0 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b082      	sub	sp, #8
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
 80164b8:	460b      	mov	r3, r1
 80164ba:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 80164bc:	4b09      	ldr	r3, [pc, #36]	; (80164e4 <TL_SYS_SendCmd+0x34>)
 80164be:	68db      	ldr	r3, [r3, #12]
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	2210      	movs	r2, #16
 80164c4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 80164c6:	4b07      	ldr	r3, [pc, #28]	; (80164e4 <TL_SYS_SendCmd+0x34>)
 80164c8:	68db      	ldr	r3, [r3, #12]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	4619      	mov	r1, r3
 80164ce:	2004      	movs	r0, #4
 80164d0:	f000 f8ec 	bl	80166ac <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 80164d4:	f7f1 fa28 	bl	8007928 <HW_IPCC_SYS_SendCmd>

  return 0;
 80164d8:	2300      	movs	r3, #0
}
 80164da:	4618      	mov	r0, r3
 80164dc:	3708      	adds	r7, #8
 80164de:	46bd      	mov	sp, r7
 80164e0:	bd80      	pop	{r7, pc}
 80164e2:	bf00      	nop
 80164e4:	20030000 	.word	0x20030000

080164e8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 80164e8:	b580      	push	{r7, lr}
 80164ea:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80164ec:	4b07      	ldr	r3, [pc, #28]	; (801650c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 80164ee:	68db      	ldr	r3, [r3, #12]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	4619      	mov	r1, r3
 80164f4:	2005      	movs	r0, #5
 80164f6:	f000 f8d9 	bl	80166ac <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 80164fa:	4b05      	ldr	r3, [pc, #20]	; (8016510 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	4a03      	ldr	r2, [pc, #12]	; (801650c <HW_IPCC_SYS_CmdEvtNot+0x24>)
 8016500:	68d2      	ldr	r2, [r2, #12]
 8016502:	6812      	ldr	r2, [r2, #0]
 8016504:	4610      	mov	r0, r2
 8016506:	4798      	blx	r3

  return;
 8016508:	bf00      	nop
}
 801650a:	bd80      	pop	{r7, pc}
 801650c:	20030000 	.word	0x20030000
 8016510:	20006ee4 	.word	0x20006ee4

08016514 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 8016514:	b580      	push	{r7, lr}
 8016516:	b082      	sub	sp, #8
 8016518:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801651a:	e00e      	b.n	801653a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 801651c:	1d3b      	adds	r3, r7, #4
 801651e:	4619      	mov	r1, r3
 8016520:	480b      	ldr	r0, [pc, #44]	; (8016550 <HW_IPCC_SYS_EvtNot+0x3c>)
 8016522:	f000 fd46 	bl	8016fb2 <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 8016526:	687b      	ldr	r3, [r7, #4]
 8016528:	4619      	mov	r1, r3
 801652a:	2006      	movs	r0, #6
 801652c:	f000 f8be 	bl	80166ac <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 8016530:	4b08      	ldr	r3, [pc, #32]	; (8016554 <HW_IPCC_SYS_EvtNot+0x40>)
 8016532:	681b      	ldr	r3, [r3, #0]
 8016534:	687a      	ldr	r2, [r7, #4]
 8016536:	4610      	mov	r0, r2
 8016538:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 801653a:	4805      	ldr	r0, [pc, #20]	; (8016550 <HW_IPCC_SYS_EvtNot+0x3c>)
 801653c:	f000 fcaa 	bl	8016e94 <LST_is_empty>
 8016540:	4603      	mov	r3, r0
 8016542:	2b00      	cmp	r3, #0
 8016544:	d0ea      	beq.n	801651c <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 8016546:	bf00      	nop
}
 8016548:	3708      	adds	r7, #8
 801654a:	46bd      	mov	sp, r7
 801654c:	bd80      	pop	{r7, pc}
 801654e:	bf00      	nop
 8016550:	200301dc 	.word	0x200301dc
 8016554:	20006ee8 	.word	0x20006ee8

08016558 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 8016558:	b580      	push	{r7, lr}
 801655a:	b082      	sub	sp, #8
 801655c:	af00      	add	r7, sp, #0
 801655e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 8016560:	4817      	ldr	r0, [pc, #92]	; (80165c0 <TL_MM_Init+0x68>)
 8016562:	f000 fc87 	bl	8016e74 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 8016566:	4817      	ldr	r0, [pc, #92]	; (80165c4 <TL_MM_Init+0x6c>)
 8016568:	f000 fc84 	bl	8016e74 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 801656c:	4b16      	ldr	r3, [pc, #88]	; (80165c8 <TL_MM_Init+0x70>)
 801656e:	691b      	ldr	r3, [r3, #16]
 8016570:	4a16      	ldr	r2, [pc, #88]	; (80165cc <TL_MM_Init+0x74>)
 8016572:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 8016574:	4b15      	ldr	r3, [pc, #84]	; (80165cc <TL_MM_Init+0x74>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	6892      	ldr	r2, [r2, #8]
 801657c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 801657e:	4b13      	ldr	r3, [pc, #76]	; (80165cc <TL_MM_Init+0x74>)
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	687a      	ldr	r2, [r7, #4]
 8016584:	68d2      	ldr	r2, [r2, #12]
 8016586:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 8016588:	4b10      	ldr	r3, [pc, #64]	; (80165cc <TL_MM_Init+0x74>)
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	4a0c      	ldr	r2, [pc, #48]	; (80165c0 <TL_MM_Init+0x68>)
 801658e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 8016590:	4b0e      	ldr	r3, [pc, #56]	; (80165cc <TL_MM_Init+0x74>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	687a      	ldr	r2, [r7, #4]
 8016596:	6812      	ldr	r2, [r2, #0]
 8016598:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 801659a:	4b0c      	ldr	r3, [pc, #48]	; (80165cc <TL_MM_Init+0x74>)
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	687a      	ldr	r2, [r7, #4]
 80165a0:	6852      	ldr	r2, [r2, #4]
 80165a2:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 80165a4:	4b09      	ldr	r3, [pc, #36]	; (80165cc <TL_MM_Init+0x74>)
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	687a      	ldr	r2, [r7, #4]
 80165aa:	6912      	ldr	r2, [r2, #16]
 80165ac:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 80165ae:	4b07      	ldr	r3, [pc, #28]	; (80165cc <TL_MM_Init+0x74>)
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	687a      	ldr	r2, [r7, #4]
 80165b4:	6952      	ldr	r2, [r2, #20]
 80165b6:	619a      	str	r2, [r3, #24]

  return;
 80165b8:	bf00      	nop
}
 80165ba:	3708      	adds	r7, #8
 80165bc:	46bd      	mov	sp, r7
 80165be:	bd80      	pop	{r7, pc}
 80165c0:	200301c4 	.word	0x200301c4
 80165c4:	20006ed4 	.word	0x20006ed4
 80165c8:	20030000 	.word	0x20030000
 80165cc:	20006eec 	.word	0x20006eec

080165d0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 80165d0:	b580      	push	{r7, lr}
 80165d2:	b082      	sub	sp, #8
 80165d4:	af00      	add	r7, sp, #0
 80165d6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 80165d8:	6879      	ldr	r1, [r7, #4]
 80165da:	4807      	ldr	r0, [pc, #28]	; (80165f8 <TL_MM_EvtDone+0x28>)
 80165dc:	f000 fca2 	bl	8016f24 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 80165e0:	6879      	ldr	r1, [r7, #4]
 80165e2:	2000      	movs	r0, #0
 80165e4:	f000 f862 	bl	80166ac <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 80165e8:	4804      	ldr	r0, [pc, #16]	; (80165fc <TL_MM_EvtDone+0x2c>)
 80165ea:	f7f1 f9c3 	bl	8007974 <HW_IPCC_MM_SendFreeBuf>

  return;
 80165ee:	bf00      	nop
}
 80165f0:	3708      	adds	r7, #8
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd80      	pop	{r7, pc}
 80165f6:	bf00      	nop
 80165f8:	20006ed4 	.word	0x20006ed4
 80165fc:	08016601 	.word	0x08016601

08016600 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016606:	e00c      	b.n	8016622 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 8016608:	1d3b      	adds	r3, r7, #4
 801660a:	4619      	mov	r1, r3
 801660c:	480a      	ldr	r0, [pc, #40]	; (8016638 <SendFreeBuf+0x38>)
 801660e:	f000 fcd0 	bl	8016fb2 <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 8016612:	4b0a      	ldr	r3, [pc, #40]	; (801663c <SendFreeBuf+0x3c>)
 8016614:	691b      	ldr	r3, [r3, #16]
 8016616:	691b      	ldr	r3, [r3, #16]
 8016618:	687a      	ldr	r2, [r7, #4]
 801661a:	4611      	mov	r1, r2
 801661c:	4618      	mov	r0, r3
 801661e:	f000 fc81 	bl	8016f24 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 8016622:	4805      	ldr	r0, [pc, #20]	; (8016638 <SendFreeBuf+0x38>)
 8016624:	f000 fc36 	bl	8016e94 <LST_is_empty>
 8016628:	4603      	mov	r3, r0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d0ec      	beq.n	8016608 <SendFreeBuf+0x8>
  }

  return;
 801662e:	bf00      	nop
}
 8016630:	3708      	adds	r7, #8
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	20006ed4 	.word	0x20006ed4
 801663c:	20030000 	.word	0x20030000

08016640 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 8016640:	b580      	push	{r7, lr}
 8016642:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 8016644:	4805      	ldr	r0, [pc, #20]	; (801665c <TL_TRACES_Init+0x1c>)
 8016646:	f000 fc15 	bl	8016e74 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 801664a:	4b05      	ldr	r3, [pc, #20]	; (8016660 <TL_TRACES_Init+0x20>)
 801664c:	695b      	ldr	r3, [r3, #20]
 801664e:	4a03      	ldr	r2, [pc, #12]	; (801665c <TL_TRACES_Init+0x1c>)
 8016650:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 8016652:	f7f1 f9c5 	bl	80079e0 <HW_IPCC_TRACES_Init>

  return;
 8016656:	bf00      	nop
}
 8016658:	bd80      	pop	{r7, pc}
 801665a:	bf00      	nop
 801665c:	200301cc 	.word	0x200301cc
 8016660:	20030000 	.word	0x20030000

08016664 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b082      	sub	sp, #8
 8016668:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801666a:	e008      	b.n	801667e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 801666c:	1d3b      	adds	r3, r7, #4
 801666e:	4619      	mov	r1, r3
 8016670:	4808      	ldr	r0, [pc, #32]	; (8016694 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016672:	f000 fc9e 	bl	8016fb2 <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	4618      	mov	r0, r3
 801667a:	f000 f80d 	bl	8016698 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 801667e:	4805      	ldr	r0, [pc, #20]	; (8016694 <HW_IPCC_TRACES_EvtNot+0x30>)
 8016680:	f000 fc08 	bl	8016e94 <LST_is_empty>
 8016684:	4603      	mov	r3, r0
 8016686:	2b00      	cmp	r3, #0
 8016688:	d0f0      	beq.n	801666c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 801668a:	bf00      	nop
}
 801668c:	3708      	adds	r7, #8
 801668e:	46bd      	mov	sp, r7
 8016690:	bd80      	pop	{r7, pc}
 8016692:	bf00      	nop
 8016694:	200301cc 	.word	0x200301cc

08016698 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 8016698:	b480      	push	{r7}
 801669a:	b083      	sub	sp, #12
 801669c:	af00      	add	r7, sp, #0
 801669e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 80166a0:	bf00      	nop
 80166a2:	370c      	adds	r7, #12
 80166a4:	46bd      	mov	sp, r7
 80166a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166aa:	4770      	bx	lr

080166ac <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 80166ac:	b480      	push	{r7}
 80166ae:	b085      	sub	sp, #20
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	4603      	mov	r3, r0
 80166b4:	6039      	str	r1, [r7, #0]
 80166b6:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 80166b8:	79fb      	ldrb	r3, [r7, #7]
 80166ba:	2b06      	cmp	r3, #6
 80166bc:	d845      	bhi.n	801674a <OutputDbgTrace+0x9e>
 80166be:	a201      	add	r2, pc, #4	; (adr r2, 80166c4 <OutputDbgTrace+0x18>)
 80166c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166c4:	080166e1 	.word	0x080166e1
 80166c8:	08016705 	.word	0x08016705
 80166cc:	0801670b 	.word	0x0801670b
 80166d0:	0801671f 	.word	0x0801671f
 80166d4:	0801672b 	.word	0x0801672b
 80166d8:	08016731 	.word	0x08016731
 80166dc:	0801673f 	.word	0x0801673f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 80166e4:	68fb      	ldr	r3, [r7, #12]
 80166e6:	7a5b      	ldrb	r3, [r3, #9]
 80166e8:	2bff      	cmp	r3, #255	; 0xff
 80166ea:	d005      	beq.n	80166f8 <OutputDbgTrace+0x4c>
 80166ec:	2bff      	cmp	r3, #255	; 0xff
 80166ee:	dc05      	bgt.n	80166fc <OutputDbgTrace+0x50>
 80166f0:	2b0e      	cmp	r3, #14
 80166f2:	d005      	beq.n	8016700 <OutputDbgTrace+0x54>
 80166f4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 80166f6:	e001      	b.n	80166fc <OutputDbgTrace+0x50>
          break;
 80166f8:	bf00      	nop
 80166fa:	e027      	b.n	801674c <OutputDbgTrace+0xa0>
          break;
 80166fc:	bf00      	nop
 80166fe:	e025      	b.n	801674c <OutputDbgTrace+0xa0>
          break;
 8016700:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 8016702:	e023      	b.n	801674c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 8016708:	e020      	b.n	801674c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801670a:	683b      	ldr	r3, [r7, #0]
 801670c:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	7a5b      	ldrb	r3, [r3, #9]
 8016712:	2b0e      	cmp	r3, #14
 8016714:	d001      	beq.n	801671a <OutputDbgTrace+0x6e>
 8016716:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 8016718:	e000      	b.n	801671c <OutputDbgTrace+0x70>
          break;
 801671a:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801671c:	e016      	b.n	801674c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801671e:	683b      	ldr	r3, [r7, #0]
 8016720:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	7a5b      	ldrb	r3, [r3, #9]
 8016726:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016728:	e010      	b.n	801674c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 801672a:	683b      	ldr	r3, [r7, #0]
 801672c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 801672e:	e00d      	b.n	801674c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	7a5b      	ldrb	r3, [r3, #9]
 8016738:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 801673a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 801673c:	e006      	b.n	801674c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	7a5b      	ldrb	r3, [r3, #9]
 8016746:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 8016748:	e000      	b.n	801674c <OutputDbgTrace+0xa0>

    default:
      break;
 801674a:	bf00      	nop
  }

  return;
 801674c:	bf00      	nop
}
 801674e:	3714      	adds	r7, #20
 8016750:	46bd      	mov	sp, r7
 8016752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016756:	4770      	bx	lr

08016758 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 8016758:	b580      	push	{r7, lr}
 801675a:	b086      	sub	sp, #24
 801675c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801675e:	f3ef 8310 	mrs	r3, PRIMASK
 8016762:	60fb      	str	r3, [r7, #12]
  return(result);
 8016764:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 8016766:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016768:	b672      	cpsid	i
}
 801676a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 801676c:	1cbb      	adds	r3, r7, #2
 801676e:	4619      	mov	r1, r3
 8016770:	4812      	ldr	r0, [pc, #72]	; (80167bc <DbgTrace_TxCpltCallback+0x64>)
 8016772:	f000 fe96 	bl	80174a2 <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 8016776:	1cbb      	adds	r3, r7, #2
 8016778:	4619      	mov	r1, r3
 801677a:	4810      	ldr	r0, [pc, #64]	; (80167bc <DbgTrace_TxCpltCallback+0x64>)
 801677c:	f000 ff82 	bl	8017684 <CircularQueue_Sense>
 8016780:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 8016782:	693b      	ldr	r3, [r7, #16]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d00c      	beq.n	80167a2 <DbgTrace_TxCpltCallback+0x4a>
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801678c:	68bb      	ldr	r3, [r7, #8]
 801678e:	f383 8810 	msr	PRIMASK, r3
}
 8016792:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 8016794:	887b      	ldrh	r3, [r7, #2]
 8016796:	4a0a      	ldr	r2, [pc, #40]	; (80167c0 <DbgTrace_TxCpltCallback+0x68>)
 8016798:	4619      	mov	r1, r3
 801679a:	6938      	ldr	r0, [r7, #16]
 801679c:	f7ea fcd2 	bl	8001144 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 80167a0:	e008      	b.n	80167b4 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 80167a2:	4b08      	ldr	r3, [pc, #32]	; (80167c4 <DbgTrace_TxCpltCallback+0x6c>)
 80167a4:	2201      	movs	r2, #1
 80167a6:	701a      	strb	r2, [r3, #0]
 80167a8:	697b      	ldr	r3, [r7, #20]
 80167aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	f383 8810 	msr	PRIMASK, r3
}
 80167b2:	bf00      	nop
}
 80167b4:	bf00      	nop
 80167b6:	3718      	adds	r7, #24
 80167b8:	46bd      	mov	sp, r7
 80167ba:	bd80      	pop	{r7, pc}
 80167bc:	20006ef0 	.word	0x20006ef0
 80167c0:	08016759 	.word	0x08016759
 80167c4:	200000c0 	.word	0x200000c0

080167c8 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b082      	sub	sp, #8
 80167cc:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 80167ce:	f7ea fcb2 	bl	8001136 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 80167d2:	2302      	movs	r3, #2
 80167d4:	9300      	str	r3, [sp, #0]
 80167d6:	2300      	movs	r3, #0
 80167d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80167dc:	4903      	ldr	r1, [pc, #12]	; (80167ec <DbgTraceInit+0x24>)
 80167de:	4804      	ldr	r0, [pc, #16]	; (80167f0 <DbgTraceInit+0x28>)
 80167e0:	f000 fc06 	bl	8016ff0 <CircularQueue_Init>
#endif 
#endif
  return;
 80167e4:	bf00      	nop
}
 80167e6:	46bd      	mov	sp, r7
 80167e8:	bd80      	pop	{r7, pc}
 80167ea:	bf00      	nop
 80167ec:	20006f10 	.word	0x20006f10
 80167f0:	20006ef0 	.word	0x20006ef0

080167f4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 80167f4:	b580      	push	{r7, lr}
 80167f6:	b084      	sub	sp, #16
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	60f8      	str	r0, [r7, #12]
 80167fc:	60b9      	str	r1, [r7, #8]
 80167fe:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 8016800:	687a      	ldr	r2, [r7, #4]
 8016802:	68b9      	ldr	r1, [r7, #8]
 8016804:	68f8      	ldr	r0, [r7, #12]
 8016806:	f000 f805 	bl	8016814 <DbgTraceWrite>
 801680a:	4603      	mov	r3, r0
}
 801680c:	4618      	mov	r0, r3
 801680e:	3710      	adds	r7, #16
 8016810:	46bd      	mov	sp, r7
 8016812:	bd80      	pop	{r7, pc}

08016814 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 8016814:	b580      	push	{r7, lr}
 8016816:	b08a      	sub	sp, #40	; 0x28
 8016818:	af00      	add	r7, sp, #0
 801681a:	60f8      	str	r0, [r7, #12]
 801681c:	60b9      	str	r1, [r7, #8]
 801681e:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 8016820:	2300      	movs	r3, #0
 8016822:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016824:	f3ef 8310 	mrs	r3, PRIMASK
 8016828:	61bb      	str	r3, [r7, #24]
  return(result);
 801682a:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 801682c:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 801682e:	68fb      	ldr	r3, [r7, #12]
 8016830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016834:	d102      	bne.n	801683c <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 8016836:	2300      	movs	r3, #0
 8016838:	627b      	str	r3, [r7, #36]	; 0x24
 801683a:	e037      	b.n	80168ac <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	2b01      	cmp	r3, #1
 8016840:	d006      	beq.n	8016850 <DbgTraceWrite+0x3c>
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	2b02      	cmp	r3, #2
 8016846:	d003      	beq.n	8016850 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 8016848:	f04f 33ff 	mov.w	r3, #4294967295
 801684c:	627b      	str	r3, [r7, #36]	; 0x24
 801684e:	e02d      	b.n	80168ac <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	2b00      	cmp	r3, #0
 8016854:	d02a      	beq.n	80168ac <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 801685a:	b672      	cpsid	i
}
 801685c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	b29a      	uxth	r2, r3
 8016862:	2301      	movs	r3, #1
 8016864:	68b9      	ldr	r1, [r7, #8]
 8016866:	4814      	ldr	r0, [pc, #80]	; (80168b8 <DbgTraceWrite+0xa4>)
 8016868:	f000 fbf4 	bl	8017054 <CircularQueue_Add>
 801686c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 801686e:	69fb      	ldr	r3, [r7, #28]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d015      	beq.n	80168a0 <DbgTraceWrite+0x8c>
 8016874:	4b11      	ldr	r3, [pc, #68]	; (80168bc <DbgTraceWrite+0xa8>)
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	b2db      	uxtb	r3, r3
 801687a:	2b00      	cmp	r3, #0
 801687c:	d010      	beq.n	80168a0 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 801687e:	4b0f      	ldr	r3, [pc, #60]	; (80168bc <DbgTraceWrite+0xa8>)
 8016880:	2200      	movs	r2, #0
 8016882:	701a      	strb	r2, [r3, #0]
 8016884:	6a3b      	ldr	r3, [r7, #32]
 8016886:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016888:	697b      	ldr	r3, [r7, #20]
 801688a:	f383 8810 	msr	PRIMASK, r3
}
 801688e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	b29b      	uxth	r3, r3
 8016894:	4a0a      	ldr	r2, [pc, #40]	; (80168c0 <DbgTraceWrite+0xac>)
 8016896:	4619      	mov	r1, r3
 8016898:	69f8      	ldr	r0, [r7, #28]
 801689a:	f7ea fc53 	bl	8001144 <DbgOutputTraces>
 801689e:	e005      	b.n	80168ac <DbgTraceWrite+0x98>
 80168a0:	6a3b      	ldr	r3, [r7, #32]
 80168a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80168a4:	693b      	ldr	r3, [r7, #16]
 80168a6:	f383 8810 	msr	PRIMASK, r3
}
 80168aa:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 80168ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80168ae:	4618      	mov	r0, r3
 80168b0:	3728      	adds	r7, #40	; 0x28
 80168b2:	46bd      	mov	sp, r7
 80168b4:	bd80      	pop	{r7, pc}
 80168b6:	bf00      	nop
 80168b8:	20006ef0 	.word	0x20006ef0
 80168bc:	200000c0 	.word	0x200000c0
 80168c0:	08016759 	.word	0x08016759

080168c4 <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 80168c4:	b480      	push	{r7}
 80168c6:	b085      	sub	sp, #20
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	4603      	mov	r3, r0
 80168cc:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 80168ce:	4b0f      	ldr	r3, [pc, #60]	; (801690c <OTP_Read+0x48>)
 80168d0:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80168d2:	e002      	b.n	80168da <OTP_Read+0x16>
  {
    p_id -= 8 ;
 80168d4:	68fb      	ldr	r3, [r7, #12]
 80168d6:	3b08      	subs	r3, #8
 80168d8:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	3307      	adds	r3, #7
 80168de:	781b      	ldrb	r3, [r3, #0]
 80168e0:	79fa      	ldrb	r2, [r7, #7]
 80168e2:	429a      	cmp	r2, r3
 80168e4:	d003      	beq.n	80168ee <OTP_Read+0x2a>
 80168e6:	68fb      	ldr	r3, [r7, #12]
 80168e8:	4a09      	ldr	r2, [pc, #36]	; (8016910 <OTP_Read+0x4c>)
 80168ea:	4293      	cmp	r3, r2
 80168ec:	d1f2      	bne.n	80168d4 <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 80168ee:	68fb      	ldr	r3, [r7, #12]
 80168f0:	3307      	adds	r3, #7
 80168f2:	781b      	ldrb	r3, [r3, #0]
 80168f4:	79fa      	ldrb	r2, [r7, #7]
 80168f6:	429a      	cmp	r2, r3
 80168f8:	d001      	beq.n	80168fe <OTP_Read+0x3a>
  {
    p_id = 0 ;
 80168fa:	2300      	movs	r3, #0
 80168fc:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 80168fe:	68fb      	ldr	r3, [r7, #12]
}
 8016900:	4618      	mov	r0, r3
 8016902:	3714      	adds	r7, #20
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr
 801690c:	1fff73f8 	.word	0x1fff73f8
 8016910:	1fff7000 	.word	0x1fff7000

08016914 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8016914:	b480      	push	{r7}
 8016916:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8016918:	4b05      	ldr	r3, [pc, #20]	; (8016930 <UTIL_LPM_Init+0x1c>)
 801691a:	2200      	movs	r2, #0
 801691c:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 801691e:	4b05      	ldr	r3, [pc, #20]	; (8016934 <UTIL_LPM_Init+0x20>)
 8016920:	2200      	movs	r2, #0
 8016922:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8016924:	bf00      	nop
 8016926:	46bd      	mov	sp, r7
 8016928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801692c:	4770      	bx	lr
 801692e:	bf00      	nop
 8016930:	20007f10 	.word	0x20007f10
 8016934:	20007f14 	.word	0x20007f14

08016938 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8016938:	b480      	push	{r7}
 801693a:	b087      	sub	sp, #28
 801693c:	af00      	add	r7, sp, #0
 801693e:	6078      	str	r0, [r7, #4]
 8016940:	460b      	mov	r3, r1
 8016942:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016944:	f3ef 8310 	mrs	r3, PRIMASK
 8016948:	613b      	str	r3, [r7, #16]
  return(result);
 801694a:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 801694c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801694e:	b672      	cpsid	i
}
 8016950:	bf00      	nop
  
  switch( state )
 8016952:	78fb      	ldrb	r3, [r7, #3]
 8016954:	2b00      	cmp	r3, #0
 8016956:	d008      	beq.n	801696a <UTIL_LPM_SetStopMode+0x32>
 8016958:	2b01      	cmp	r3, #1
 801695a:	d10e      	bne.n	801697a <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 801695c:	4b0d      	ldr	r3, [pc, #52]	; (8016994 <UTIL_LPM_SetStopMode+0x5c>)
 801695e:	681a      	ldr	r2, [r3, #0]
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	4313      	orrs	r3, r2
 8016964:	4a0b      	ldr	r2, [pc, #44]	; (8016994 <UTIL_LPM_SetStopMode+0x5c>)
 8016966:	6013      	str	r3, [r2, #0]
      break;
 8016968:	e008      	b.n	801697c <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	43da      	mvns	r2, r3
 801696e:	4b09      	ldr	r3, [pc, #36]	; (8016994 <UTIL_LPM_SetStopMode+0x5c>)
 8016970:	681b      	ldr	r3, [r3, #0]
 8016972:	4013      	ands	r3, r2
 8016974:	4a07      	ldr	r2, [pc, #28]	; (8016994 <UTIL_LPM_SetStopMode+0x5c>)
 8016976:	6013      	str	r3, [r2, #0]
      break;
 8016978:	e000      	b.n	801697c <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 801697a:	bf00      	nop
 801697c:	697b      	ldr	r3, [r7, #20]
 801697e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	f383 8810 	msr	PRIMASK, r3
}
 8016986:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8016988:	bf00      	nop
 801698a:	371c      	adds	r7, #28
 801698c:	46bd      	mov	sp, r7
 801698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016992:	4770      	bx	lr
 8016994:	20007f10 	.word	0x20007f10

08016998 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8016998:	b480      	push	{r7}
 801699a:	b087      	sub	sp, #28
 801699c:	af00      	add	r7, sp, #0
 801699e:	6078      	str	r0, [r7, #4]
 80169a0:	460b      	mov	r3, r1
 80169a2:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80169a4:	f3ef 8310 	mrs	r3, PRIMASK
 80169a8:	613b      	str	r3, [r7, #16]
  return(result);
 80169aa:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 80169ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80169ae:	b672      	cpsid	i
}
 80169b0:	bf00      	nop
  
  switch(state)
 80169b2:	78fb      	ldrb	r3, [r7, #3]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d008      	beq.n	80169ca <UTIL_LPM_SetOffMode+0x32>
 80169b8:	2b01      	cmp	r3, #1
 80169ba:	d10e      	bne.n	80169da <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 80169bc:	4b0d      	ldr	r3, [pc, #52]	; (80169f4 <UTIL_LPM_SetOffMode+0x5c>)
 80169be:	681a      	ldr	r2, [r3, #0]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	4313      	orrs	r3, r2
 80169c4:	4a0b      	ldr	r2, [pc, #44]	; (80169f4 <UTIL_LPM_SetOffMode+0x5c>)
 80169c6:	6013      	str	r3, [r2, #0]
      break;
 80169c8:	e008      	b.n	80169dc <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 80169ca:	687b      	ldr	r3, [r7, #4]
 80169cc:	43da      	mvns	r2, r3
 80169ce:	4b09      	ldr	r3, [pc, #36]	; (80169f4 <UTIL_LPM_SetOffMode+0x5c>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	4013      	ands	r3, r2
 80169d4:	4a07      	ldr	r2, [pc, #28]	; (80169f4 <UTIL_LPM_SetOffMode+0x5c>)
 80169d6:	6013      	str	r3, [r2, #0]
      break;
 80169d8:	e000      	b.n	80169dc <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 80169da:	bf00      	nop
 80169dc:	697b      	ldr	r3, [r7, #20]
 80169de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80169e0:	68fb      	ldr	r3, [r7, #12]
 80169e2:	f383 8810 	msr	PRIMASK, r3
}
 80169e6:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80169e8:	bf00      	nop
 80169ea:	371c      	adds	r7, #28
 80169ec:	46bd      	mov	sp, r7
 80169ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f2:	4770      	bx	lr
 80169f4:	20007f14 	.word	0x20007f14

080169f8 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 80169f8:	b580      	push	{r7, lr}
 80169fa:	b090      	sub	sp, #64	; 0x40
 80169fc:	af00      	add	r7, sp, #0
 80169fe:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 8016a00:	4b73      	ldr	r3, [pc, #460]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 8016a06:	4b72      	ldr	r3, [pc, #456]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	4013      	ands	r3, r2
 8016a0e:	4a70      	ldr	r2, [pc, #448]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016a10:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 8016a12:	4b70      	ldr	r3, [pc, #448]	; (8016bd4 <UTIL_SEQ_Run+0x1dc>)
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8016a18:	4b6f      	ldr	r3, [pc, #444]	; (8016bd8 <UTIL_SEQ_Run+0x1e0>)
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8016a1e:	4b6f      	ldr	r3, [pc, #444]	; (8016bdc <UTIL_SEQ_Run+0x1e4>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 8016a24:	4b6e      	ldr	r3, [pc, #440]	; (8016be0 <UTIL_SEQ_Run+0x1e8>)
 8016a26:	681b      	ldr	r3, [r3, #0]
 8016a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016a2a:	e08d      	b.n	8016b48 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 8016a2c:	2300      	movs	r3, #0
 8016a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016a30:	e002      	b.n	8016a38 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 8016a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a34:	3301      	adds	r3, #1
 8016a36:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8016a38:	4a6a      	ldr	r2, [pc, #424]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016a3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a3c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a42:	401a      	ands	r2, r3
 8016a44:	4b62      	ldr	r3, [pc, #392]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4013      	ands	r3, r2
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d0f1      	beq.n	8016a32 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8016a4e:	4a65      	ldr	r2, [pc, #404]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016a50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a58:	401a      	ands	r2, r3
 8016a5a:	4b5d      	ldr	r3, [pc, #372]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	4013      	ands	r3, r2
 8016a60:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8016a62:	4a60      	ldr	r2, [pc, #384]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016a64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a66:	00db      	lsls	r3, r3, #3
 8016a68:	4413      	add	r3, r2
 8016a6a:	685a      	ldr	r2, [r3, #4]
 8016a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a6e:	4013      	ands	r3, r2
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d106      	bne.n	8016a82 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8016a74:	4a5b      	ldr	r2, [pc, #364]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a78:	00db      	lsls	r3, r3, #3
 8016a7a:	4413      	add	r3, r2
 8016a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8016a80:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8016a82:	4a58      	ldr	r2, [pc, #352]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a86:	00db      	lsls	r3, r3, #3
 8016a88:	4413      	add	r3, r2
 8016a8a:	685a      	ldr	r2, [r3, #4]
 8016a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a8e:	4013      	ands	r3, r2
 8016a90:	4618      	mov	r0, r3
 8016a92:	f000 f9b3 	bl	8016dfc <SEQ_BitPosition>
 8016a96:	4603      	mov	r3, r0
 8016a98:	461a      	mov	r2, r3
 8016a9a:	4b53      	ldr	r3, [pc, #332]	; (8016be8 <UTIL_SEQ_Run+0x1f0>)
 8016a9c:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 8016a9e:	4a51      	ldr	r2, [pc, #324]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016aa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aa2:	00db      	lsls	r3, r3, #3
 8016aa4:	4413      	add	r3, r2
 8016aa6:	685a      	ldr	r2, [r3, #4]
 8016aa8:	4b4f      	ldr	r3, [pc, #316]	; (8016be8 <UTIL_SEQ_Run+0x1f0>)
 8016aaa:	681b      	ldr	r3, [r3, #0]
 8016aac:	2101      	movs	r1, #1
 8016aae:	fa01 f303 	lsl.w	r3, r1, r3
 8016ab2:	43db      	mvns	r3, r3
 8016ab4:	401a      	ands	r2, r3
 8016ab6:	494b      	ldr	r1, [pc, #300]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016ab8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aba:	00db      	lsls	r3, r3, #3
 8016abc:	440b      	add	r3, r1
 8016abe:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8016ac4:	61bb      	str	r3, [r7, #24]
  return(result);
 8016ac6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016ac8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8016aca:	b672      	cpsid	i
}
 8016acc:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 8016ace:	4b46      	ldr	r3, [pc, #280]	; (8016be8 <UTIL_SEQ_Run+0x1f0>)
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	2201      	movs	r2, #1
 8016ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8016ad8:	43da      	mvns	r2, r3
 8016ada:	4b3e      	ldr	r3, [pc, #248]	; (8016bd4 <UTIL_SEQ_Run+0x1dc>)
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	4013      	ands	r3, r2
 8016ae0:	4a3c      	ldr	r2, [pc, #240]	; (8016bd4 <UTIL_SEQ_Run+0x1dc>)
 8016ae2:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016ae4:	2302      	movs	r3, #2
 8016ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016ae8:	e013      	b.n	8016b12 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 8016aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aec:	3b01      	subs	r3, #1
 8016aee:	4a3d      	ldr	r2, [pc, #244]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016af0:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 8016af4:	4b3c      	ldr	r3, [pc, #240]	; (8016be8 <UTIL_SEQ_Run+0x1f0>)
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	2201      	movs	r2, #1
 8016afa:	fa02 f303 	lsl.w	r3, r2, r3
 8016afe:	43da      	mvns	r2, r3
 8016b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b02:	3b01      	subs	r3, #1
 8016b04:	400a      	ands	r2, r1
 8016b06:	4937      	ldr	r1, [pc, #220]	; (8016be4 <UTIL_SEQ_Run+0x1ec>)
 8016b08:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8016b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b0e:	3b01      	subs	r3, #1
 8016b10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8016b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016b14:	2b00      	cmp	r3, #0
 8016b16:	d1e8      	bne.n	8016aea <UTIL_SEQ_Run+0xf2>
 8016b18:	6a3b      	ldr	r3, [r7, #32]
 8016b1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016b1c:	697b      	ldr	r3, [r7, #20]
 8016b1e:	f383 8810 	msr	PRIMASK, r3
}
 8016b22:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 8016b24:	4b30      	ldr	r3, [pc, #192]	; (8016be8 <UTIL_SEQ_Run+0x1f0>)
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	4a30      	ldr	r2, [pc, #192]	; (8016bec <UTIL_SEQ_Run+0x1f4>)
 8016b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016b2e:	4798      	blx	r3

    local_taskset = TaskSet;
 8016b30:	4b28      	ldr	r3, [pc, #160]	; (8016bd4 <UTIL_SEQ_Run+0x1dc>)
 8016b32:	681b      	ldr	r3, [r3, #0]
 8016b34:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 8016b36:	4b28      	ldr	r3, [pc, #160]	; (8016bd8 <UTIL_SEQ_Run+0x1e0>)
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 8016b3c:	4b27      	ldr	r3, [pc, #156]	; (8016bdc <UTIL_SEQ_Run+0x1e4>)
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 8016b42:	4b27      	ldr	r3, [pc, #156]	; (8016be0 <UTIL_SEQ_Run+0x1e8>)
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8016b48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b4c:	401a      	ands	r2, r3
 8016b4e:	4b20      	ldr	r3, [pc, #128]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016b50:	681b      	ldr	r3, [r3, #0]
 8016b52:	4013      	ands	r3, r2
 8016b54:	2b00      	cmp	r3, #0
 8016b56:	d005      	beq.n	8016b64 <UTIL_SEQ_Run+0x16c>
 8016b58:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8016b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b5c:	4013      	ands	r3, r2
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	f43f af64 	beq.w	8016a2c <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8016b64:	4b20      	ldr	r3, [pc, #128]	; (8016be8 <UTIL_SEQ_Run+0x1f0>)
 8016b66:	f04f 32ff 	mov.w	r2, #4294967295
 8016b6a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8016b6c:	f000 f938 	bl	8016de0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016b70:	f3ef 8310 	mrs	r3, PRIMASK
 8016b74:	613b      	str	r3, [r7, #16]
  return(result);
 8016b76:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 8016b78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016b7a:	b672      	cpsid	i
}
 8016b7c:	bf00      	nop
  local_taskset = TaskSet;
 8016b7e:	4b15      	ldr	r3, [pc, #84]	; (8016bd4 <UTIL_SEQ_Run+0x1dc>)
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 8016b84:	4b14      	ldr	r3, [pc, #80]	; (8016bd8 <UTIL_SEQ_Run+0x1e0>)
 8016b86:	681b      	ldr	r3, [r3, #0]
 8016b88:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 8016b8a:	4b14      	ldr	r3, [pc, #80]	; (8016bdc <UTIL_SEQ_Run+0x1e4>)
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 8016b90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016b94:	401a      	ands	r2, r3
 8016b96:	4b0e      	ldr	r3, [pc, #56]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	4013      	ands	r3, r2
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d107      	bne.n	8016bb0 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 8016ba0:	4b0f      	ldr	r3, [pc, #60]	; (8016be0 <UTIL_SEQ_Run+0x1e8>)
 8016ba2:	681a      	ldr	r2, [r3, #0]
 8016ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016ba6:	4013      	ands	r3, r2
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d101      	bne.n	8016bb0 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 8016bac:	f7ea fed0 	bl	8001950 <UTIL_SEQ_Idle>
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	f383 8810 	msr	PRIMASK, r3
}
 8016bba:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 8016bbc:	f000 f917 	bl	8016dee <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 8016bc0:	4a03      	ldr	r2, [pc, #12]	; (8016bd0 <UTIL_SEQ_Run+0x1d8>)
 8016bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bc4:	6013      	str	r3, [r2, #0]

  return;
 8016bc6:	bf00      	nop
}
 8016bc8:	3740      	adds	r7, #64	; 0x40
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}
 8016bce:	bf00      	nop
 8016bd0:	200000c8 	.word	0x200000c8
 8016bd4:	20007f18 	.word	0x20007f18
 8016bd8:	20007f1c 	.word	0x20007f1c
 8016bdc:	200000c4 	.word	0x200000c4
 8016be0:	20007f20 	.word	0x20007f20
 8016be4:	20007fa8 	.word	0x20007fa8
 8016be8:	20007f24 	.word	0x20007f24
 8016bec:	20007f28 	.word	0x20007f28

08016bf0 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b088      	sub	sp, #32
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	60f8      	str	r0, [r7, #12]
 8016bf8:	60b9      	str	r1, [r7, #8]
 8016bfa:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8016c00:	617b      	str	r3, [r7, #20]
  return(result);
 8016c02:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 8016c04:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c06:	b672      	cpsid	i
}
 8016c08:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8016c0a:	68f8      	ldr	r0, [r7, #12]
 8016c0c:	f000 f8f6 	bl	8016dfc <SEQ_BitPosition>
 8016c10:	4603      	mov	r3, r0
 8016c12:	4619      	mov	r1, r3
 8016c14:	4a06      	ldr	r2, [pc, #24]	; (8016c30 <UTIL_SEQ_RegTask+0x40>)
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8016c1c:	69fb      	ldr	r3, [r7, #28]
 8016c1e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c20:	69bb      	ldr	r3, [r7, #24]
 8016c22:	f383 8810 	msr	PRIMASK, r3
}
 8016c26:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 8016c28:	bf00      	nop
}
 8016c2a:	3720      	adds	r7, #32
 8016c2c:	46bd      	mov	sp, r7
 8016c2e:	bd80      	pop	{r7, pc}
 8016c30:	20007f28 	.word	0x20007f28

08016c34 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 8016c34:	b480      	push	{r7}
 8016c36:	b087      	sub	sp, #28
 8016c38:	af00      	add	r7, sp, #0
 8016c3a:	6078      	str	r0, [r7, #4]
 8016c3c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8016c42:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c44:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016c46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c48:	b672      	cpsid	i
}
 8016c4a:	bf00      	nop

  TaskSet |= TaskId_bm;
 8016c4c:	4b0d      	ldr	r3, [pc, #52]	; (8016c84 <UTIL_SEQ_SetTask+0x50>)
 8016c4e:	681a      	ldr	r2, [r3, #0]
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	4313      	orrs	r3, r2
 8016c54:	4a0b      	ldr	r2, [pc, #44]	; (8016c84 <UTIL_SEQ_SetTask+0x50>)
 8016c56:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 8016c58:	4a0b      	ldr	r2, [pc, #44]	; (8016c88 <UTIL_SEQ_SetTask+0x54>)
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	431a      	orrs	r2, r3
 8016c64:	4908      	ldr	r1, [pc, #32]	; (8016c88 <UTIL_SEQ_SetTask+0x54>)
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016c70:	693b      	ldr	r3, [r7, #16]
 8016c72:	f383 8810 	msr	PRIMASK, r3
}
 8016c76:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016c78:	bf00      	nop
}
 8016c7a:	371c      	adds	r7, #28
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr
 8016c84:	20007f18 	.word	0x20007f18
 8016c88:	20007fa8 	.word	0x20007fa8

08016c8c <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	b087      	sub	sp, #28
 8016c90:	af00      	add	r7, sp, #0
 8016c92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016c94:	f3ef 8310 	mrs	r3, PRIMASK
 8016c98:	60fb      	str	r3, [r7, #12]
  return(result);
 8016c9a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016c9c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016c9e:	b672      	cpsid	i
}
 8016ca0:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	43da      	mvns	r2, r3
 8016ca6:	4b08      	ldr	r3, [pc, #32]	; (8016cc8 <UTIL_SEQ_PauseTask+0x3c>)
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	4013      	ands	r3, r2
 8016cac:	4a06      	ldr	r2, [pc, #24]	; (8016cc8 <UTIL_SEQ_PauseTask+0x3c>)
 8016cae:	6013      	str	r3, [r2, #0]
 8016cb0:	697b      	ldr	r3, [r7, #20]
 8016cb2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cb4:	693b      	ldr	r3, [r7, #16]
 8016cb6:	f383 8810 	msr	PRIMASK, r3
}
 8016cba:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016cbc:	bf00      	nop
}
 8016cbe:	371c      	adds	r7, #28
 8016cc0:	46bd      	mov	sp, r7
 8016cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cc6:	4770      	bx	lr
 8016cc8:	200000c4 	.word	0x200000c4

08016ccc <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 8016ccc:	b480      	push	{r7}
 8016cce:	b087      	sub	sp, #28
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016cd4:	f3ef 8310 	mrs	r3, PRIMASK
 8016cd8:	60fb      	str	r3, [r7, #12]
  return(result);
 8016cda:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016cdc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016cde:	b672      	cpsid	i
}
 8016ce0:	bf00      	nop

  TaskMask |= TaskId_bm;
 8016ce2:	4b09      	ldr	r3, [pc, #36]	; (8016d08 <UTIL_SEQ_ResumeTask+0x3c>)
 8016ce4:	681a      	ldr	r2, [r3, #0]
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	4313      	orrs	r3, r2
 8016cea:	4a07      	ldr	r2, [pc, #28]	; (8016d08 <UTIL_SEQ_ResumeTask+0x3c>)
 8016cec:	6013      	str	r3, [r2, #0]
 8016cee:	697b      	ldr	r3, [r7, #20]
 8016cf0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016cf2:	693b      	ldr	r3, [r7, #16]
 8016cf4:	f383 8810 	msr	PRIMASK, r3
}
 8016cf8:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016cfa:	bf00      	nop
}
 8016cfc:	371c      	adds	r7, #28
 8016cfe:	46bd      	mov	sp, r7
 8016d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d04:	4770      	bx	lr
 8016d06:	bf00      	nop
 8016d08:	200000c4 	.word	0x200000c4

08016d0c <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	b087      	sub	sp, #28
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d14:	f3ef 8310 	mrs	r3, PRIMASK
 8016d18:	60fb      	str	r3, [r7, #12]
  return(result);
 8016d1a:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016d1c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016d1e:	b672      	cpsid	i
}
 8016d20:	bf00      	nop

  EvtSet |= EvtId_bm;
 8016d22:	4b09      	ldr	r3, [pc, #36]	; (8016d48 <UTIL_SEQ_SetEvt+0x3c>)
 8016d24:	681a      	ldr	r2, [r3, #0]
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	4313      	orrs	r3, r2
 8016d2a:	4a07      	ldr	r2, [pc, #28]	; (8016d48 <UTIL_SEQ_SetEvt+0x3c>)
 8016d2c:	6013      	str	r3, [r2, #0]
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016d32:	693b      	ldr	r3, [r7, #16]
 8016d34:	f383 8810 	msr	PRIMASK, r3
}
 8016d38:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 8016d3a:	bf00      	nop
}
 8016d3c:	371c      	adds	r7, #28
 8016d3e:	46bd      	mov	sp, r7
 8016d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d44:	4770      	bx	lr
 8016d46:	bf00      	nop
 8016d48:	20007f1c 	.word	0x20007f1c

08016d4c <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 8016d4c:	b580      	push	{r7, lr}
 8016d4e:	b088      	sub	sp, #32
 8016d50:	af00      	add	r7, sp, #0
 8016d52:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 8016d54:	4b1f      	ldr	r3, [pc, #124]	; (8016dd4 <UTIL_SEQ_WaitEvt+0x88>)
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 8016d5a:	4b1e      	ldr	r3, [pc, #120]	; (8016dd4 <UTIL_SEQ_WaitEvt+0x88>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016d62:	d102      	bne.n	8016d6a <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 8016d64:	2300      	movs	r3, #0
 8016d66:	61fb      	str	r3, [r7, #28]
 8016d68:	e005      	b.n	8016d76 <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 8016d6a:	4b1a      	ldr	r3, [pc, #104]	; (8016dd4 <UTIL_SEQ_WaitEvt+0x88>)
 8016d6c:	681b      	ldr	r3, [r3, #0]
 8016d6e:	2201      	movs	r2, #1
 8016d70:	fa02 f303 	lsl.w	r3, r2, r3
 8016d74:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 8016d76:	4b18      	ldr	r3, [pc, #96]	; (8016dd8 <UTIL_SEQ_WaitEvt+0x8c>)
 8016d78:	681b      	ldr	r3, [r3, #0]
 8016d7a:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 8016d7c:	4a16      	ldr	r2, [pc, #88]	; (8016dd8 <UTIL_SEQ_WaitEvt+0x8c>)
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 8016d82:	e003      	b.n	8016d8c <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 8016d84:	6879      	ldr	r1, [r7, #4]
 8016d86:	69f8      	ldr	r0, [r7, #28]
 8016d88:	f7ea fde9 	bl	800195e <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 8016d8c:	4b13      	ldr	r3, [pc, #76]	; (8016ddc <UTIL_SEQ_WaitEvt+0x90>)
 8016d8e:	681a      	ldr	r2, [r3, #0]
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	4013      	ands	r3, r2
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	d0f5      	beq.n	8016d84 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 8016d98:	4a0e      	ldr	r2, [pc, #56]	; (8016dd4 <UTIL_SEQ_WaitEvt+0x88>)
 8016d9a:	69bb      	ldr	r3, [r7, #24]
 8016d9c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016d9e:	f3ef 8310 	mrs	r3, PRIMASK
 8016da2:	60bb      	str	r3, [r7, #8]
  return(result);
 8016da4:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 8016da6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016da8:	b672      	cpsid	i
}
 8016daa:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	43da      	mvns	r2, r3
 8016db0:	4b0a      	ldr	r3, [pc, #40]	; (8016ddc <UTIL_SEQ_WaitEvt+0x90>)
 8016db2:	681b      	ldr	r3, [r3, #0]
 8016db4:	4013      	ands	r3, r2
 8016db6:	4a09      	ldr	r2, [pc, #36]	; (8016ddc <UTIL_SEQ_WaitEvt+0x90>)
 8016db8:	6013      	str	r3, [r2, #0]
 8016dba:	693b      	ldr	r3, [r7, #16]
 8016dbc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	f383 8810 	msr	PRIMASK, r3
}
 8016dc4:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 8016dc6:	4a04      	ldr	r2, [pc, #16]	; (8016dd8 <UTIL_SEQ_WaitEvt+0x8c>)
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	6013      	str	r3, [r2, #0]
  return;
 8016dcc:	bf00      	nop
}
 8016dce:	3720      	adds	r7, #32
 8016dd0:	46bd      	mov	sp, r7
 8016dd2:	bd80      	pop	{r7, pc}
 8016dd4:	20007f24 	.word	0x20007f24
 8016dd8:	20007f20 	.word	0x20007f20
 8016ddc:	20007f1c 	.word	0x20007f1c

08016de0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 8016de0:	b480      	push	{r7}
 8016de2:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016de4:	bf00      	nop
}
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr

08016dee <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 8016dee:	b480      	push	{r7}
 8016df0:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 8016df2:	bf00      	nop
}
 8016df4:	46bd      	mov	sp, r7
 8016df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dfa:	4770      	bx	lr

08016dfc <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 8016dfc:	b480      	push	{r7}
 8016dfe:	b085      	sub	sp, #20
 8016e00:	af00      	add	r7, sp, #0
 8016e02:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 8016e04:	2300      	movs	r3, #0
 8016e06:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8016e0c:	68bb      	ldr	r3, [r7, #8]
 8016e0e:	0c1b      	lsrs	r3, r3, #16
 8016e10:	041b      	lsls	r3, r3, #16
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d104      	bne.n	8016e20 <SEQ_BitPosition+0x24>
 8016e16:	2310      	movs	r3, #16
 8016e18:	73fb      	strb	r3, [r7, #15]
 8016e1a:	68bb      	ldr	r3, [r7, #8]
 8016e1c:	041b      	lsls	r3, r3, #16
 8016e1e:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8016e20:	68bb      	ldr	r3, [r7, #8]
 8016e22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d105      	bne.n	8016e36 <SEQ_BitPosition+0x3a>
 8016e2a:	7bfb      	ldrb	r3, [r7, #15]
 8016e2c:	3308      	adds	r3, #8
 8016e2e:	73fb      	strb	r3, [r7, #15]
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	021b      	lsls	r3, r3, #8
 8016e34:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 8016e36:	68bb      	ldr	r3, [r7, #8]
 8016e38:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d105      	bne.n	8016e4c <SEQ_BitPosition+0x50>
 8016e40:	7bfb      	ldrb	r3, [r7, #15]
 8016e42:	3304      	adds	r3, #4
 8016e44:	73fb      	strb	r3, [r7, #15]
 8016e46:	68bb      	ldr	r3, [r7, #8]
 8016e48:	011b      	lsls	r3, r3, #4
 8016e4a:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	0f1b      	lsrs	r3, r3, #28
 8016e50:	4a07      	ldr	r2, [pc, #28]	; (8016e70 <SEQ_BitPosition+0x74>)
 8016e52:	5cd2      	ldrb	r2, [r2, r3]
 8016e54:	7bfb      	ldrb	r3, [r7, #15]
 8016e56:	4413      	add	r3, r2
 8016e58:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 8016e5a:	7bfb      	ldrb	r3, [r7, #15]
 8016e5c:	f1c3 031f 	rsb	r3, r3, #31
 8016e60:	b2db      	uxtb	r3, r3
}
 8016e62:	4618      	mov	r0, r3
 8016e64:	3714      	adds	r7, #20
 8016e66:	46bd      	mov	sp, r7
 8016e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e6c:	4770      	bx	lr
 8016e6e:	bf00      	nop
 8016e70:	08033328 	.word	0x08033328

08016e74 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 8016e74:	b480      	push	{r7}
 8016e76:	b083      	sub	sp, #12
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 8016e7c:	687b      	ldr	r3, [r7, #4]
 8016e7e:	687a      	ldr	r2, [r7, #4]
 8016e80:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	687a      	ldr	r2, [r7, #4]
 8016e86:	605a      	str	r2, [r3, #4]
}
 8016e88:	bf00      	nop
 8016e8a:	370c      	adds	r7, #12
 8016e8c:	46bd      	mov	sp, r7
 8016e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e92:	4770      	bx	lr

08016e94 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 8016e94:	b480      	push	{r7}
 8016e96:	b087      	sub	sp, #28
 8016e98:	af00      	add	r7, sp, #0
 8016e9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8016ea0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ea2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016ea4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8016ea6:	b672      	cpsid	i
}
 8016ea8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	687a      	ldr	r2, [r7, #4]
 8016eb0:	429a      	cmp	r2, r3
 8016eb2:	d102      	bne.n	8016eba <LST_is_empty+0x26>
  {
    return_value = TRUE;
 8016eb4:	2301      	movs	r3, #1
 8016eb6:	75fb      	strb	r3, [r7, #23]
 8016eb8:	e001      	b.n	8016ebe <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 8016eba:	2300      	movs	r3, #0
 8016ebc:	75fb      	strb	r3, [r7, #23]
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016ec2:	68bb      	ldr	r3, [r7, #8]
 8016ec4:	f383 8810 	msr	PRIMASK, r3
}
 8016ec8:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 8016eca:	7dfb      	ldrb	r3, [r7, #23]
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	371c      	adds	r7, #28
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ed6:	4770      	bx	lr

08016ed8 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 8016ed8:	b480      	push	{r7}
 8016eda:	b087      	sub	sp, #28
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6078      	str	r0, [r7, #4]
 8016ee0:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8016ee6:	60fb      	str	r3, [r7, #12]
  return(result);
 8016ee8:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016eea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016eec:	b672      	cpsid	i
}
 8016eee:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681a      	ldr	r2, [r3, #0]
 8016ef4:	683b      	ldr	r3, [r7, #0]
 8016ef6:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 8016ef8:	683b      	ldr	r3, [r7, #0]
 8016efa:	687a      	ldr	r2, [r7, #4]
 8016efc:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	683a      	ldr	r2, [r7, #0]
 8016f02:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 8016f04:	683b      	ldr	r3, [r7, #0]
 8016f06:	681b      	ldr	r3, [r3, #0]
 8016f08:	683a      	ldr	r2, [r7, #0]
 8016f0a:	605a      	str	r2, [r3, #4]
 8016f0c:	697b      	ldr	r3, [r7, #20]
 8016f0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f10:	693b      	ldr	r3, [r7, #16]
 8016f12:	f383 8810 	msr	PRIMASK, r3
}
 8016f16:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f18:	bf00      	nop
 8016f1a:	371c      	adds	r7, #28
 8016f1c:	46bd      	mov	sp, r7
 8016f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f22:	4770      	bx	lr

08016f24 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 8016f24:	b480      	push	{r7}
 8016f26:	b087      	sub	sp, #28
 8016f28:	af00      	add	r7, sp, #0
 8016f2a:	6078      	str	r0, [r7, #4]
 8016f2c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f2e:	f3ef 8310 	mrs	r3, PRIMASK
 8016f32:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f34:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f38:	b672      	cpsid	i
}
 8016f3a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 8016f3c:	683b      	ldr	r3, [r7, #0]
 8016f3e:	687a      	ldr	r2, [r7, #4]
 8016f40:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	685a      	ldr	r2, [r3, #4]
 8016f46:	683b      	ldr	r3, [r7, #0]
 8016f48:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	683a      	ldr	r2, [r7, #0]
 8016f4e:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	685b      	ldr	r3, [r3, #4]
 8016f54:	683a      	ldr	r2, [r7, #0]
 8016f56:	601a      	str	r2, [r3, #0]
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f5c:	693b      	ldr	r3, [r7, #16]
 8016f5e:	f383 8810 	msr	PRIMASK, r3
}
 8016f62:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016f64:	bf00      	nop
 8016f66:	371c      	adds	r7, #28
 8016f68:	46bd      	mov	sp, r7
 8016f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f6e:	4770      	bx	lr

08016f70 <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 8016f70:	b480      	push	{r7}
 8016f72:	b087      	sub	sp, #28
 8016f74:	af00      	add	r7, sp, #0
 8016f76:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016f78:	f3ef 8310 	mrs	r3, PRIMASK
 8016f7c:	60fb      	str	r3, [r7, #12]
  return(result);
 8016f7e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016f80:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016f82:	b672      	cpsid	i
}
 8016f84:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	685b      	ldr	r3, [r3, #4]
 8016f8a:	687a      	ldr	r2, [r7, #4]
 8016f8c:	6812      	ldr	r2, [r2, #0]
 8016f8e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 8016f90:	687b      	ldr	r3, [r7, #4]
 8016f92:	681b      	ldr	r3, [r3, #0]
 8016f94:	687a      	ldr	r2, [r7, #4]
 8016f96:	6852      	ldr	r2, [r2, #4]
 8016f98:	605a      	str	r2, [r3, #4]
 8016f9a:	697b      	ldr	r3, [r7, #20]
 8016f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016f9e:	693b      	ldr	r3, [r7, #16]
 8016fa0:	f383 8810 	msr	PRIMASK, r3
}
 8016fa4:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016fa6:	bf00      	nop
 8016fa8:	371c      	adds	r7, #28
 8016faa:	46bd      	mov	sp, r7
 8016fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fb0:	4770      	bx	lr

08016fb2 <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 8016fb2:	b580      	push	{r7, lr}
 8016fb4:	b086      	sub	sp, #24
 8016fb6:	af00      	add	r7, sp, #0
 8016fb8:	6078      	str	r0, [r7, #4]
 8016fba:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016fbc:	f3ef 8310 	mrs	r3, PRIMASK
 8016fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8016fc2:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8016fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8016fc6:	b672      	cpsid	i
}
 8016fc8:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	681a      	ldr	r2, [r3, #0]
 8016fce:	683b      	ldr	r3, [r7, #0]
 8016fd0:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	f7ff ffca 	bl	8016f70 <LST_remove_node>
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8016fe0:	693b      	ldr	r3, [r7, #16]
 8016fe2:	f383 8810 	msr	PRIMASK, r3
}
 8016fe6:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 8016fe8:	bf00      	nop
 8016fea:	3718      	adds	r7, #24
 8016fec:	46bd      	mov	sp, r7
 8016fee:	bd80      	pop	{r7, pc}

08016ff0 <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 8016ff0:	b480      	push	{r7}
 8016ff2:	b085      	sub	sp, #20
 8016ff4:	af00      	add	r7, sp, #0
 8016ff6:	60f8      	str	r0, [r7, #12]
 8016ff8:	60b9      	str	r1, [r7, #8]
 8016ffa:	607a      	str	r2, [r7, #4]
 8016ffc:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	68ba      	ldr	r2, [r7, #8]
 8017002:	601a      	str	r2, [r3, #0]
  q->first = 0;
 8017004:	68fb      	ldr	r3, [r7, #12]
 8017006:	2200      	movs	r2, #0
 8017008:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 801700a:	68fb      	ldr	r3, [r7, #12]
 801700c:	2200      	movs	r2, #0
 801700e:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 8017010:	68fb      	ldr	r3, [r7, #12]
 8017012:	2200      	movs	r2, #0
 8017014:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	2200      	movs	r2, #0
 801701a:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 801701c:	68fb      	ldr	r3, [r7, #12]
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 8017022:	68fb      	ldr	r3, [r7, #12]
 8017024:	887a      	ldrh	r2, [r7, #2]
 8017026:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 8017028:	68fb      	ldr	r3, [r7, #12]
 801702a:	7e3a      	ldrb	r2, [r7, #24]
 801702c:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 801702e:	7e3b      	ldrb	r3, [r7, #24]
 8017030:	f003 0302 	and.w	r3, r3, #2
 8017034:	2b00      	cmp	r3, #0
 8017036:	d006      	beq.n	8017046 <CircularQueue_Init+0x56>
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	891b      	ldrh	r3, [r3, #8]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d002      	beq.n	8017046 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 8017040:	f04f 33ff 	mov.w	r3, #4294967295
 8017044:	e000      	b.n	8017048 <CircularQueue_Init+0x58>
  }
  return 0;
 8017046:	2300      	movs	r3, #0
}
 8017048:	4618      	mov	r0, r3
 801704a:	3714      	adds	r7, #20
 801704c:	46bd      	mov	sp, r7
 801704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017052:	4770      	bx	lr

08017054 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b08e      	sub	sp, #56	; 0x38
 8017058:	af00      	add	r7, sp, #0
 801705a:	60f8      	str	r0, [r7, #12]
 801705c:	60b9      	str	r1, [r7, #8]
 801705e:	603b      	str	r3, [r7, #0]
 8017060:	4613      	mov	r3, r2
 8017062:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 8017064:	2300      	movs	r3, #0
 8017066:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 8017068:	2300      	movs	r3, #0
 801706a:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 801706c:	2300      	movs	r3, #0
 801706e:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 8017070:	2300      	movs	r3, #0
 8017072:	62bb      	str	r3, [r7, #40]	; 0x28
 8017074:	2300      	movs	r3, #0
 8017076:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 8017078:	2300      	movs	r3, #0
 801707a:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 801707c:	2300      	movs	r3, #0
 801707e:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	891b      	ldrh	r3, [r3, #8]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d101      	bne.n	801708c <CircularQueue_Add+0x38>
 8017088:	2302      	movs	r3, #2
 801708a:	e000      	b.n	801708e <CircularQueue_Add+0x3a>
 801708c:	2300      	movs	r3, #0
 801708e:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	695b      	ldr	r3, [r3, #20]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d02a      	beq.n	80170ee <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	891b      	ldrh	r3, [r3, #8]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d123      	bne.n	80170e8 <CircularQueue_Add+0x94>
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	691b      	ldr	r3, [r3, #16]
 80170a8:	4413      	add	r3, r2
 80170aa:	781b      	ldrb	r3, [r3, #0]
 80170ac:	b29a      	uxth	r2, r3
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	6819      	ldr	r1, [r3, #0]
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	691b      	ldr	r3, [r3, #16]
 80170b6:	1c58      	adds	r0, r3, #1
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	685b      	ldr	r3, [r3, #4]
 80170bc:	4298      	cmp	r0, r3
 80170be:	d306      	bcc.n	80170ce <CircularQueue_Add+0x7a>
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	6918      	ldr	r0, [r3, #16]
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	685b      	ldr	r3, [r3, #4]
 80170c8:	1ac3      	subs	r3, r0, r3
 80170ca:	3301      	adds	r3, #1
 80170cc:	e002      	b.n	80170d4 <CircularQueue_Add+0x80>
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	691b      	ldr	r3, [r3, #16]
 80170d2:	3301      	adds	r3, #1
 80170d4:	440b      	add	r3, r1
 80170d6:	781b      	ldrb	r3, [r3, #0]
 80170d8:	b29b      	uxth	r3, r3
 80170da:	021b      	lsls	r3, r3, #8
 80170dc:	b29b      	uxth	r3, r3
 80170de:	4413      	add	r3, r2
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	3302      	adds	r3, #2
 80170e4:	b29b      	uxth	r3, r3
 80170e6:	e001      	b.n	80170ec <CircularQueue_Add+0x98>
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	891b      	ldrh	r3, [r3, #8]
 80170ec:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 80170ee:	68fb      	ldr	r3, [r7, #12]
 80170f0:	891b      	ldrh	r3, [r3, #8]
 80170f2:	2b00      	cmp	r3, #0
 80170f4:	d002      	beq.n	80170fc <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	891b      	ldrh	r3, [r3, #8]
 80170fa:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	691a      	ldr	r2, [r3, #16]
 8017100:	68fb      	ldr	r3, [r7, #12]
 8017102:	68db      	ldr	r3, [r3, #12]
 8017104:	429a      	cmp	r2, r3
 8017106:	d307      	bcc.n	8017118 <CircularQueue_Add+0xc4>
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	685a      	ldr	r2, [r3, #4]
 801710c:	68fb      	ldr	r3, [r7, #12]
 801710e:	6919      	ldr	r1, [r3, #16]
 8017110:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017112:	440b      	add	r3, r1
 8017114:	1ad3      	subs	r3, r2, r3
 8017116:	e000      	b.n	801711a <CircularQueue_Add+0xc6>
 8017118:	2300      	movs	r3, #0
 801711a:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 801711c:	88fa      	ldrh	r2, [r7, #6]
 801711e:	7ffb      	ldrb	r3, [r7, #31]
 8017120:	4413      	add	r3, r2
 8017122:	461a      	mov	r2, r3
 8017124:	683b      	ldr	r3, [r7, #0]
 8017126:	fb02 f303 	mul.w	r3, r2, r3
 801712a:	69ba      	ldr	r2, [r7, #24]
 801712c:	429a      	cmp	r2, r3
 801712e:	d80b      	bhi.n	8017148 <CircularQueue_Add+0xf4>
 8017130:	88fa      	ldrh	r2, [r7, #6]
 8017132:	7ffb      	ldrb	r3, [r7, #31]
 8017134:	4413      	add	r3, r2
 8017136:	461a      	mov	r2, r3
 8017138:	69bb      	ldr	r3, [r7, #24]
 801713a:	fbb3 f1f2 	udiv	r1, r3, r2
 801713e:	fb01 f202 	mul.w	r2, r1, r2
 8017142:	1a9b      	subs	r3, r3, r2
 8017144:	b2db      	uxtb	r3, r3
 8017146:	e000      	b.n	801714a <CircularQueue_Add+0xf6>
 8017148:	2300      	movs	r3, #0
 801714a:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 801714c:	7dfa      	ldrb	r2, [r7, #23]
 801714e:	7ffb      	ldrb	r3, [r7, #31]
 8017150:	429a      	cmp	r2, r3
 8017152:	bf8c      	ite	hi
 8017154:	2301      	movhi	r3, #1
 8017156:	2300      	movls	r3, #0
 8017158:	b2db      	uxtb	r3, r3
 801715a:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 801715c:	7fbb      	ldrb	r3, [r7, #30]
 801715e:	2b00      	cmp	r3, #0
 8017160:	d008      	beq.n	8017174 <CircularQueue_Add+0x120>
 8017162:	68fb      	ldr	r3, [r7, #12]
 8017164:	7f1b      	ldrb	r3, [r3, #28]
 8017166:	f003 0301 	and.w	r3, r3, #1
 801716a:	2b00      	cmp	r3, #0
 801716c:	d002      	beq.n	8017174 <CircularQueue_Add+0x120>
 801716e:	7dfb      	ldrb	r3, [r7, #23]
 8017170:	b29b      	uxth	r3, r3
 8017172:	e000      	b.n	8017176 <CircularQueue_Add+0x122>
 8017174:	8bbb      	ldrh	r3, [r7, #28]
 8017176:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 8017178:	7fbb      	ldrb	r3, [r7, #30]
 801717a:	2b00      	cmp	r3, #0
 801717c:	d008      	beq.n	8017190 <CircularQueue_Add+0x13c>
 801717e:	68fb      	ldr	r3, [r7, #12]
 8017180:	7f1b      	ldrb	r3, [r3, #28]
 8017182:	f003 0302 	and.w	r3, r3, #2
 8017186:	2b00      	cmp	r3, #0
 8017188:	d002      	beq.n	8017190 <CircularQueue_Add+0x13c>
 801718a:	7ffb      	ldrb	r3, [r7, #31]
 801718c:	b29b      	uxth	r3, r3
 801718e:	e000      	b.n	8017192 <CircularQueue_Add+0x13e>
 8017190:	8bbb      	ldrh	r3, [r7, #28]
 8017192:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 8017194:	88fb      	ldrh	r3, [r7, #6]
 8017196:	2b00      	cmp	r3, #0
 8017198:	f000 817e 	beq.w	8017498 <CircularQueue_Add+0x444>
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	695a      	ldr	r2, [r3, #20]
 80171a0:	88f9      	ldrh	r1, [r7, #6]
 80171a2:	7ffb      	ldrb	r3, [r7, #31]
 80171a4:	440b      	add	r3, r1
 80171a6:	4619      	mov	r1, r3
 80171a8:	683b      	ldr	r3, [r7, #0]
 80171aa:	fb01 f303 	mul.w	r3, r1, r3
 80171ae:	441a      	add	r2, r3
 80171b0:	8bbb      	ldrh	r3, [r7, #28]
 80171b2:	441a      	add	r2, r3
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	685b      	ldr	r3, [r3, #4]
 80171b8:	429a      	cmp	r2, r3
 80171ba:	f200 816d 	bhi.w	8017498 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 80171be:	2300      	movs	r3, #0
 80171c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80171c2:	e14a      	b.n	801745a <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	691a      	ldr	r2, [r3, #16]
 80171c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80171ca:	441a      	add	r2, r3
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	685b      	ldr	r3, [r3, #4]
 80171d0:	429a      	cmp	r2, r3
 80171d2:	d307      	bcc.n	80171e4 <CircularQueue_Add+0x190>
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	691a      	ldr	r2, [r3, #16]
 80171d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80171da:	441a      	add	r2, r3
 80171dc:	68fb      	ldr	r3, [r7, #12]
 80171de:	685b      	ldr	r3, [r3, #4]
 80171e0:	1ad3      	subs	r3, r2, r3
 80171e2:	e003      	b.n	80171ec <CircularQueue_Add+0x198>
 80171e4:	68fb      	ldr	r3, [r7, #12]
 80171e6:	691a      	ldr	r2, [r3, #16]
 80171e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80171ea:	4413      	add	r3, r2
 80171ec:	68fa      	ldr	r2, [r7, #12]
 80171ee:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	691b      	ldr	r3, [r3, #16]
 80171f4:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 80171f6:	68fb      	ldr	r3, [r7, #12]
 80171f8:	891b      	ldrh	r3, [r3, #8]
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d130      	bne.n	8017260 <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	681a      	ldr	r2, [r3, #0]
 8017202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017204:	1c59      	adds	r1, r3, #1
 8017206:	6339      	str	r1, [r7, #48]	; 0x30
 8017208:	4413      	add	r3, r2
 801720a:	88fa      	ldrh	r2, [r7, #6]
 801720c:	b2d2      	uxtb	r2, r2
 801720e:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 8017210:	68fb      	ldr	r3, [r7, #12]
 8017212:	685b      	ldr	r3, [r3, #4]
 8017214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017216:	429a      	cmp	r2, r3
 8017218:	d304      	bcc.n	8017224 <CircularQueue_Add+0x1d0>
 801721a:	68fb      	ldr	r3, [r7, #12]
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017220:	1ad3      	subs	r3, r2, r3
 8017222:	e000      	b.n	8017226 <CircularQueue_Add+0x1d2>
 8017224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017226:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 8017228:	88fb      	ldrh	r3, [r7, #6]
 801722a:	0a1b      	lsrs	r3, r3, #8
 801722c:	b298      	uxth	r0, r3
 801722e:	68fb      	ldr	r3, [r7, #12]
 8017230:	681a      	ldr	r2, [r3, #0]
 8017232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017234:	1c59      	adds	r1, r3, #1
 8017236:	6339      	str	r1, [r7, #48]	; 0x30
 8017238:	4413      	add	r3, r2
 801723a:	b2c2      	uxtb	r2, r0
 801723c:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 801723e:	68fb      	ldr	r3, [r7, #12]
 8017240:	685b      	ldr	r3, [r3, #4]
 8017242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017244:	429a      	cmp	r2, r3
 8017246:	d304      	bcc.n	8017252 <CircularQueue_Add+0x1fe>
 8017248:	68fb      	ldr	r3, [r7, #12]
 801724a:	685b      	ldr	r3, [r3, #4]
 801724c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801724e:	1ad3      	subs	r3, r2, r3
 8017250:	e000      	b.n	8017254 <CircularQueue_Add+0x200>
 8017252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017254:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 8017256:	68fb      	ldr	r3, [r7, #12]
 8017258:	695b      	ldr	r3, [r3, #20]
 801725a:	1c9a      	adds	r2, r3, #2
 801725c:	68fb      	ldr	r3, [r7, #12]
 801725e:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 8017260:	88fa      	ldrh	r2, [r7, #6]
 8017262:	68fb      	ldr	r3, [r7, #12]
 8017264:	6859      	ldr	r1, [r3, #4]
 8017266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017268:	1acb      	subs	r3, r1, r3
 801726a:	4293      	cmp	r3, r2
 801726c:	bf28      	it	cs
 801726e:	4613      	movcs	r3, r2
 8017270:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 8017272:	88fb      	ldrh	r3, [r7, #6]
 8017274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017276:	429a      	cmp	r2, r3
 8017278:	d007      	beq.n	801728a <CircularQueue_Add+0x236>
 801727a:	88fb      	ldrh	r3, [r7, #6]
 801727c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801727e:	429a      	cmp	r2, r3
 8017280:	d225      	bcs.n	80172ce <CircularQueue_Add+0x27a>
 8017282:	68fb      	ldr	r3, [r7, #12]
 8017284:	7f1b      	ldrb	r3, [r3, #28]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d121      	bne.n	80172ce <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801728a:	68fb      	ldr	r3, [r7, #12]
 801728c:	681a      	ldr	r2, [r3, #0]
 801728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017290:	18d0      	adds	r0, r2, r3
 8017292:	88fb      	ldrh	r3, [r7, #6]
 8017294:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017296:	fb02 f303 	mul.w	r3, r2, r3
 801729a:	68ba      	ldr	r2, [r7, #8]
 801729c:	4413      	add	r3, r2
 801729e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80172a0:	4619      	mov	r1, r3
 80172a2:	f012 fb98 	bl	80299d6 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 80172a6:	68fb      	ldr	r3, [r7, #12]
 80172a8:	695a      	ldr	r2, [r3, #20]
 80172aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ac:	441a      	add	r2, r3
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 80172b2:	2300      	movs	r3, #0
 80172b4:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 80172b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172b8:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 80172ba:	88fa      	ldrh	r2, [r7, #6]
 80172bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172be:	1ad3      	subs	r3, r2, r3
 80172c0:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 80172c2:	7ffb      	ldrb	r3, [r7, #31]
 80172c4:	b29a      	uxth	r2, r3
 80172c6:	88fb      	ldrh	r3, [r7, #6]
 80172c8:	4413      	add	r3, r2
 80172ca:	86fb      	strh	r3, [r7, #54]	; 0x36
 80172cc:	e0a4      	b.n	8017418 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 80172ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	f000 80a1 	beq.w	8017418 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	7f1b      	ldrb	r3, [r3, #28]
 80172da:	f003 0301 	and.w	r3, r3, #1
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d03a      	beq.n	8017358 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 80172e2:	68fb      	ldr	r3, [r7, #12]
 80172e4:	891b      	ldrh	r3, [r3, #8]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d10d      	bne.n	8017306 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 80172ea:	68fb      	ldr	r3, [r7, #12]
 80172ec:	681a      	ldr	r2, [r3, #0]
 80172ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f0:	3b02      	subs	r3, #2
 80172f2:	4413      	add	r3, r2
 80172f4:	22ff      	movs	r2, #255	; 0xff
 80172f6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 80172f8:	68fb      	ldr	r3, [r7, #12]
 80172fa:	681a      	ldr	r2, [r3, #0]
 80172fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172fe:	3b01      	subs	r3, #1
 8017300:	4413      	add	r3, r2
 8017302:	22ff      	movs	r2, #255	; 0xff
 8017304:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 8017306:	68fb      	ldr	r3, [r7, #12]
 8017308:	695a      	ldr	r2, [r3, #20]
 801730a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801730c:	441a      	add	r2, r3
 801730e:	68fb      	ldr	r3, [r7, #12]
 8017310:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 8017312:	2300      	movs	r3, #0
 8017314:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 8017316:	88fb      	ldrh	r3, [r7, #6]
 8017318:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 801731a:	2300      	movs	r3, #0
 801731c:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	891b      	ldrh	r3, [r3, #8]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d16f      	bne.n	8017406 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 8017326:	68fb      	ldr	r3, [r7, #12]
 8017328:	681a      	ldr	r2, [r3, #0]
 801732a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801732c:	1c59      	adds	r1, r3, #1
 801732e:	6339      	str	r1, [r7, #48]	; 0x30
 8017330:	4413      	add	r3, r2
 8017332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017334:	b2d2      	uxtb	r2, r2
 8017336:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 8017338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733a:	0a18      	lsrs	r0, r3, #8
 801733c:	68fb      	ldr	r3, [r7, #12]
 801733e:	681a      	ldr	r2, [r3, #0]
 8017340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017342:	1c59      	adds	r1, r3, #1
 8017344:	6339      	str	r1, [r7, #48]	; 0x30
 8017346:	4413      	add	r3, r2
 8017348:	b2c2      	uxtb	r2, r0
 801734a:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	695b      	ldr	r3, [r3, #20]
 8017350:	1c9a      	adds	r2, r3, #2
 8017352:	68fb      	ldr	r3, [r7, #12]
 8017354:	615a      	str	r2, [r3, #20]
 8017356:	e056      	b.n	8017406 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	7f1b      	ldrb	r3, [r3, #28]
 801735c:	f003 0302 	and.w	r3, r3, #2
 8017360:	2b00      	cmp	r3, #0
 8017362:	d050      	beq.n	8017406 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	891b      	ldrh	r3, [r3, #8]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d14a      	bne.n	8017402 <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 801736c:	68fb      	ldr	r3, [r7, #12]
 801736e:	681a      	ldr	r2, [r3, #0]
 8017370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017372:	3b02      	subs	r3, #2
 8017374:	4413      	add	r3, r2
 8017376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017378:	b2d2      	uxtb	r2, r2
 801737a:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 801737c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801737e:	0a19      	lsrs	r1, r3, #8
 8017380:	68fb      	ldr	r3, [r7, #12]
 8017382:	681a      	ldr	r2, [r3, #0]
 8017384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017386:	3b01      	subs	r3, #1
 8017388:	4413      	add	r3, r2
 801738a:	b2ca      	uxtb	r2, r1
 801738c:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	681a      	ldr	r2, [r3, #0]
 8017392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017394:	18d0      	adds	r0, r2, r3
 8017396:	88fb      	ldrh	r3, [r7, #6]
 8017398:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801739a:	fb02 f303 	mul.w	r3, r2, r3
 801739e:	68ba      	ldr	r2, [r7, #8]
 80173a0:	4413      	add	r3, r2
 80173a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173a4:	4619      	mov	r1, r3
 80173a6:	f012 fb16 	bl	80299d6 <memcpy>
             q->byteCount += NbBytesToCopy; 
 80173aa:	68fb      	ldr	r3, [r7, #12]
 80173ac:	695a      	ldr	r2, [r3, #20]
 80173ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b0:	441a      	add	r2, r3
 80173b2:	68fb      	ldr	r3, [r7, #12]
 80173b4:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 80173b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173b8:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 80173ba:	88fa      	ldrh	r2, [r7, #6]
 80173bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173be:	1ad3      	subs	r3, r2, r3
 80173c0:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 80173c2:	68fb      	ldr	r3, [r7, #12]
 80173c4:	699b      	ldr	r3, [r3, #24]
 80173c6:	1c5a      	adds	r2, r3, #1
 80173c8:	68fb      	ldr	r3, [r7, #12]
 80173ca:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 80173cc:	2300      	movs	r3, #0
 80173ce:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 80173d0:	68fb      	ldr	r3, [r7, #12]
 80173d2:	681a      	ldr	r2, [r3, #0]
 80173d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173d6:	1c59      	adds	r1, r3, #1
 80173d8:	6339      	str	r1, [r7, #48]	; 0x30
 80173da:	4413      	add	r3, r2
 80173dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80173de:	b2d2      	uxtb	r2, r2
 80173e0:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 80173e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e4:	0a18      	lsrs	r0, r3, #8
 80173e6:	68fb      	ldr	r3, [r7, #12]
 80173e8:	681a      	ldr	r2, [r3, #0]
 80173ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80173ec:	1c59      	adds	r1, r3, #1
 80173ee:	6339      	str	r1, [r7, #48]	; 0x30
 80173f0:	4413      	add	r3, r2
 80173f2:	b2c2      	uxtb	r2, r0
 80173f4:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 80173f6:	68fb      	ldr	r3, [r7, #12]
 80173f8:	695b      	ldr	r3, [r3, #20]
 80173fa:	1c9a      	adds	r2, r3, #2
 80173fc:	68fb      	ldr	r3, [r7, #12]
 80173fe:	615a      	str	r2, [r3, #20]
 8017400:	e001      	b.n	8017406 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 8017402:	2300      	movs	r3, #0
 8017404:	e049      	b.n	801749a <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 8017406:	7ffb      	ldrb	r3, [r7, #31]
 8017408:	b29a      	uxth	r2, r3
 801740a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801740c:	b29b      	uxth	r3, r3
 801740e:	4413      	add	r3, r2
 8017410:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 8017412:	68fb      	ldr	r3, [r7, #12]
 8017414:	2200      	movs	r2, #0
 8017416:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 8017418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801741a:	2b00      	cmp	r3, #0
 801741c:	d015      	beq.n	801744a <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 801741e:	68fb      	ldr	r3, [r7, #12]
 8017420:	681a      	ldr	r2, [r3, #0]
 8017422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017424:	18d0      	adds	r0, r2, r3
 8017426:	88fb      	ldrh	r3, [r7, #6]
 8017428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801742a:	fb03 f202 	mul.w	r2, r3, r2
 801742e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017430:	4413      	add	r3, r2
 8017432:	68ba      	ldr	r2, [r7, #8]
 8017434:	4413      	add	r3, r2
 8017436:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017438:	4619      	mov	r1, r3
 801743a:	f012 facc 	bl	80299d6 <memcpy>
        q->byteCount += NbBytesToCopy;
 801743e:	68fb      	ldr	r3, [r7, #12]
 8017440:	695a      	ldr	r2, [r3, #20]
 8017442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017444:	441a      	add	r2, r3
 8017446:	68fb      	ldr	r3, [r7, #12]
 8017448:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 801744a:	68fb      	ldr	r3, [r7, #12]
 801744c:	699b      	ldr	r3, [r3, #24]
 801744e:	1c5a      	adds	r2, r3, #1
 8017450:	68fb      	ldr	r3, [r7, #12]
 8017452:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 8017454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017456:	3301      	adds	r3, #1
 8017458:	62fb      	str	r3, [r7, #44]	; 0x2c
 801745a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801745c:	683b      	ldr	r3, [r7, #0]
 801745e:	429a      	cmp	r2, r3
 8017460:	f4ff aeb0 	bcc.w	80171c4 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	681a      	ldr	r2, [r3, #0]
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	6919      	ldr	r1, [r3, #16]
 801746c:	7ffb      	ldrb	r3, [r7, #31]
 801746e:	4419      	add	r1, r3
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	685b      	ldr	r3, [r3, #4]
 8017474:	4299      	cmp	r1, r3
 8017476:	d307      	bcc.n	8017488 <CircularQueue_Add+0x434>
 8017478:	68fb      	ldr	r3, [r7, #12]
 801747a:	6919      	ldr	r1, [r3, #16]
 801747c:	7ffb      	ldrb	r3, [r7, #31]
 801747e:	4419      	add	r1, r3
 8017480:	68fb      	ldr	r3, [r7, #12]
 8017482:	685b      	ldr	r3, [r3, #4]
 8017484:	1acb      	subs	r3, r1, r3
 8017486:	e003      	b.n	8017490 <CircularQueue_Add+0x43c>
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	6919      	ldr	r1, [r3, #16]
 801748c:	7ffb      	ldrb	r3, [r7, #31]
 801748e:	440b      	add	r3, r1
 8017490:	4413      	add	r3, r2
 8017492:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 8017494:	6a3b      	ldr	r3, [r7, #32]
 8017496:	e000      	b.n	801749a <CircularQueue_Add+0x446>
    return NULL;
 8017498:	2300      	movs	r3, #0
}
 801749a:	4618      	mov	r0, r3
 801749c:	3738      	adds	r7, #56	; 0x38
 801749e:	46bd      	mov	sp, r7
 80174a0:	bd80      	pop	{r7, pc}

080174a2 <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 80174a2:	b480      	push	{r7}
 80174a4:	b085      	sub	sp, #20
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	6078      	str	r0, [r7, #4]
 80174aa:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 80174ac:	2300      	movs	r3, #0
 80174ae:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 80174b0:	2300      	movs	r3, #0
 80174b2:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	891b      	ldrh	r3, [r3, #8]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d101      	bne.n	80174c0 <CircularQueue_Remove+0x1e>
 80174bc:	2302      	movs	r3, #2
 80174be:	e000      	b.n	80174c2 <CircularQueue_Remove+0x20>
 80174c0:	2300      	movs	r3, #0
 80174c2:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 80174c4:	2300      	movs	r3, #0
 80174c6:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	695b      	ldr	r3, [r3, #20]
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	f000 80cc 	beq.w	801766a <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	891b      	ldrh	r3, [r3, #8]
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d121      	bne.n	801751e <CircularQueue_Remove+0x7c>
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	681a      	ldr	r2, [r3, #0]
 80174de:	687b      	ldr	r3, [r7, #4]
 80174e0:	68db      	ldr	r3, [r3, #12]
 80174e2:	4413      	add	r3, r2
 80174e4:	781b      	ldrb	r3, [r3, #0]
 80174e6:	b29a      	uxth	r2, r3
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6819      	ldr	r1, [r3, #0]
 80174ec:	687b      	ldr	r3, [r7, #4]
 80174ee:	68db      	ldr	r3, [r3, #12]
 80174f0:	1c58      	adds	r0, r3, #1
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	685b      	ldr	r3, [r3, #4]
 80174f6:	4298      	cmp	r0, r3
 80174f8:	d306      	bcc.n	8017508 <CircularQueue_Remove+0x66>
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	68d8      	ldr	r0, [r3, #12]
 80174fe:	687b      	ldr	r3, [r7, #4]
 8017500:	685b      	ldr	r3, [r3, #4]
 8017502:	1ac3      	subs	r3, r0, r3
 8017504:	3301      	adds	r3, #1
 8017506:	e002      	b.n	801750e <CircularQueue_Remove+0x6c>
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	68db      	ldr	r3, [r3, #12]
 801750c:	3301      	adds	r3, #1
 801750e:	440b      	add	r3, r1
 8017510:	781b      	ldrb	r3, [r3, #0]
 8017512:	b29b      	uxth	r3, r3
 8017514:	021b      	lsls	r3, r3, #8
 8017516:	b29b      	uxth	r3, r3
 8017518:	4413      	add	r3, r2
 801751a:	b29b      	uxth	r3, r3
 801751c:	e001      	b.n	8017522 <CircularQueue_Remove+0x80>
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	891b      	ldrh	r3, [r3, #8]
 8017522:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	7f1b      	ldrb	r3, [r3, #28]
 8017528:	f003 0301 	and.w	r3, r3, #1
 801752c:	2b00      	cmp	r3, #0
 801752e:	d057      	beq.n	80175e0 <CircularQueue_Remove+0x13e>
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	7f1b      	ldrb	r3, [r3, #28]
 8017534:	f003 0302 	and.w	r3, r3, #2
 8017538:	2b00      	cmp	r3, #0
 801753a:	d151      	bne.n	80175e0 <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 801753c:	897b      	ldrh	r3, [r7, #10]
 801753e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017542:	4293      	cmp	r3, r2
 8017544:	d103      	bne.n	801754e <CircularQueue_Remove+0xac>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	891b      	ldrh	r3, [r3, #8]
 801754a:	2b00      	cmp	r3, #0
 801754c:	d012      	beq.n	8017574 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	68da      	ldr	r2, [r3, #12]
 8017552:	687b      	ldr	r3, [r7, #4]
 8017554:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8017556:	429a      	cmp	r2, r3
 8017558:	d942      	bls.n	80175e0 <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801755a:	687b      	ldr	r3, [r7, #4]
 801755c:	891b      	ldrh	r3, [r3, #8]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d03e      	beq.n	80175e0 <CircularQueue_Remove+0x13e>
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	685a      	ldr	r2, [r3, #4]
 8017566:	687b      	ldr	r3, [r7, #4]
 8017568:	68db      	ldr	r3, [r3, #12]
 801756a:	1ad3      	subs	r3, r2, r3
 801756c:	687a      	ldr	r2, [r7, #4]
 801756e:	8912      	ldrh	r2, [r2, #8]
 8017570:	4293      	cmp	r3, r2
 8017572:	d235      	bcs.n	80175e0 <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 8017574:	687b      	ldr	r3, [r7, #4]
 8017576:	695a      	ldr	r2, [r3, #20]
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	68d9      	ldr	r1, [r3, #12]
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	1acb      	subs	r3, r1, r3
 8017582:	441a      	add	r2, r3
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 8017588:	687b      	ldr	r3, [r7, #4]
 801758a:	2200      	movs	r2, #0
 801758c:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 801758e:	687b      	ldr	r3, [r7, #4]
 8017590:	891b      	ldrh	r3, [r3, #8]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d121      	bne.n	80175da <CircularQueue_Remove+0x138>
 8017596:	687b      	ldr	r3, [r7, #4]
 8017598:	681a      	ldr	r2, [r3, #0]
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	68db      	ldr	r3, [r3, #12]
 801759e:	4413      	add	r3, r2
 80175a0:	781b      	ldrb	r3, [r3, #0]
 80175a2:	b29a      	uxth	r2, r3
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	6819      	ldr	r1, [r3, #0]
 80175a8:	687b      	ldr	r3, [r7, #4]
 80175aa:	68db      	ldr	r3, [r3, #12]
 80175ac:	1c58      	adds	r0, r3, #1
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	685b      	ldr	r3, [r3, #4]
 80175b2:	4298      	cmp	r0, r3
 80175b4:	d306      	bcc.n	80175c4 <CircularQueue_Remove+0x122>
 80175b6:	687b      	ldr	r3, [r7, #4]
 80175b8:	68d8      	ldr	r0, [r3, #12]
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	685b      	ldr	r3, [r3, #4]
 80175be:	1ac3      	subs	r3, r0, r3
 80175c0:	3301      	adds	r3, #1
 80175c2:	e002      	b.n	80175ca <CircularQueue_Remove+0x128>
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	68db      	ldr	r3, [r3, #12]
 80175c8:	3301      	adds	r3, #1
 80175ca:	440b      	add	r3, r1
 80175cc:	781b      	ldrb	r3, [r3, #0]
 80175ce:	b29b      	uxth	r3, r3
 80175d0:	021b      	lsls	r3, r3, #8
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	4413      	add	r3, r2
 80175d6:	b29b      	uxth	r3, r3
 80175d8:	e001      	b.n	80175de <CircularQueue_Remove+0x13c>
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	891b      	ldrh	r3, [r3, #8]
 80175de:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	681a      	ldr	r2, [r3, #0]
 80175e4:	687b      	ldr	r3, [r7, #4]
 80175e6:	68d9      	ldr	r1, [r3, #12]
 80175e8:	7a7b      	ldrb	r3, [r7, #9]
 80175ea:	4419      	add	r1, r3
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	685b      	ldr	r3, [r3, #4]
 80175f0:	4299      	cmp	r1, r3
 80175f2:	d307      	bcc.n	8017604 <CircularQueue_Remove+0x162>
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	68d9      	ldr	r1, [r3, #12]
 80175f8:	7a7b      	ldrb	r3, [r7, #9]
 80175fa:	4419      	add	r1, r3
 80175fc:	687b      	ldr	r3, [r7, #4]
 80175fe:	685b      	ldr	r3, [r3, #4]
 8017600:	1acb      	subs	r3, r1, r3
 8017602:	e003      	b.n	801760c <CircularQueue_Remove+0x16a>
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	68d9      	ldr	r1, [r3, #12]
 8017608:	7a7b      	ldrb	r3, [r7, #9]
 801760a:	440b      	add	r3, r1
 801760c:	4413      	add	r3, r2
 801760e:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	695b      	ldr	r3, [r3, #20]
 8017614:	8979      	ldrh	r1, [r7, #10]
 8017616:	7a7a      	ldrb	r2, [r7, #9]
 8017618:	440a      	add	r2, r1
 801761a:	1a9a      	subs	r2, r3, r2
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	695b      	ldr	r3, [r3, #20]
 8017624:	2b00      	cmp	r3, #0
 8017626:	d01b      	beq.n	8017660 <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	68da      	ldr	r2, [r3, #12]
 801762c:	897b      	ldrh	r3, [r7, #10]
 801762e:	441a      	add	r2, r3
 8017630:	7a7b      	ldrb	r3, [r7, #9]
 8017632:	441a      	add	r2, r3
 8017634:	687b      	ldr	r3, [r7, #4]
 8017636:	685b      	ldr	r3, [r3, #4]
 8017638:	429a      	cmp	r2, r3
 801763a:	d309      	bcc.n	8017650 <CircularQueue_Remove+0x1ae>
 801763c:	687b      	ldr	r3, [r7, #4]
 801763e:	68da      	ldr	r2, [r3, #12]
 8017640:	897b      	ldrh	r3, [r7, #10]
 8017642:	441a      	add	r2, r3
 8017644:	7a7b      	ldrb	r3, [r7, #9]
 8017646:	441a      	add	r2, r3
 8017648:	687b      	ldr	r3, [r7, #4]
 801764a:	685b      	ldr	r3, [r3, #4]
 801764c:	1ad3      	subs	r3, r2, r3
 801764e:	e005      	b.n	801765c <CircularQueue_Remove+0x1ba>
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	68da      	ldr	r2, [r3, #12]
 8017654:	897b      	ldrh	r3, [r7, #10]
 8017656:	441a      	add	r2, r3
 8017658:	7a7b      	ldrb	r3, [r7, #9]
 801765a:	4413      	add	r3, r2
 801765c:	687a      	ldr	r2, [r7, #4]
 801765e:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 8017660:	687b      	ldr	r3, [r7, #4]
 8017662:	699b      	ldr	r3, [r3, #24]
 8017664:	1e5a      	subs	r2, r3, #1
 8017666:	687b      	ldr	r3, [r7, #4]
 8017668:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 801766a:	683b      	ldr	r3, [r7, #0]
 801766c:	2b00      	cmp	r3, #0
 801766e:	d002      	beq.n	8017676 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 8017670:	683b      	ldr	r3, [r7, #0]
 8017672:	897a      	ldrh	r2, [r7, #10]
 8017674:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 8017676:	68fb      	ldr	r3, [r7, #12]
}
 8017678:	4618      	mov	r0, r3
 801767a:	3714      	adds	r7, #20
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 8017684:	b480      	push	{r7}
 8017686:	b087      	sub	sp, #28
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
 801768c:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 801768e:	2300      	movs	r3, #0
 8017690:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 8017692:	2300      	movs	r3, #0
 8017694:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	891b      	ldrh	r3, [r3, #8]
 801769a:	2b00      	cmp	r3, #0
 801769c:	d101      	bne.n	80176a2 <CircularQueue_Sense+0x1e>
 801769e:	2302      	movs	r3, #2
 80176a0:	e000      	b.n	80176a4 <CircularQueue_Sense+0x20>
 80176a2:	2300      	movs	r3, #0
 80176a4:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 80176a6:	2300      	movs	r3, #0
 80176a8:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 80176aa:	2300      	movs	r3, #0
 80176ac:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	695b      	ldr	r3, [r3, #20]
 80176b2:	2b00      	cmp	r3, #0
 80176b4:	f000 8090 	beq.w	80177d8 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	68db      	ldr	r3, [r3, #12]
 80176bc:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	891b      	ldrh	r3, [r3, #8]
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	d121      	bne.n	801770a <CircularQueue_Sense+0x86>
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	681a      	ldr	r2, [r3, #0]
 80176ca:	687b      	ldr	r3, [r7, #4]
 80176cc:	68db      	ldr	r3, [r3, #12]
 80176ce:	4413      	add	r3, r2
 80176d0:	781b      	ldrb	r3, [r3, #0]
 80176d2:	b29a      	uxth	r2, r3
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	6819      	ldr	r1, [r3, #0]
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	68db      	ldr	r3, [r3, #12]
 80176dc:	1c58      	adds	r0, r3, #1
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	685b      	ldr	r3, [r3, #4]
 80176e2:	4298      	cmp	r0, r3
 80176e4:	d306      	bcc.n	80176f4 <CircularQueue_Sense+0x70>
 80176e6:	687b      	ldr	r3, [r7, #4]
 80176e8:	68d8      	ldr	r0, [r3, #12]
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	685b      	ldr	r3, [r3, #4]
 80176ee:	1ac3      	subs	r3, r0, r3
 80176f0:	3301      	adds	r3, #1
 80176f2:	e002      	b.n	80176fa <CircularQueue_Sense+0x76>
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	68db      	ldr	r3, [r3, #12]
 80176f8:	3301      	adds	r3, #1
 80176fa:	440b      	add	r3, r1
 80176fc:	781b      	ldrb	r3, [r3, #0]
 80176fe:	b29b      	uxth	r3, r3
 8017700:	021b      	lsls	r3, r3, #8
 8017702:	b29b      	uxth	r3, r3
 8017704:	4413      	add	r3, r2
 8017706:	b29b      	uxth	r3, r3
 8017708:	e001      	b.n	801770e <CircularQueue_Sense+0x8a>
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	891b      	ldrh	r3, [r3, #8]
 801770e:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 8017710:	687b      	ldr	r3, [r7, #4]
 8017712:	7f1b      	ldrb	r3, [r3, #28]
 8017714:	f003 0301 	and.w	r3, r3, #1
 8017718:	2b00      	cmp	r3, #0
 801771a:	d048      	beq.n	80177ae <CircularQueue_Sense+0x12a>
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	7f1b      	ldrb	r3, [r3, #28]
 8017720:	f003 0302 	and.w	r3, r3, #2
 8017724:	2b00      	cmp	r3, #0
 8017726:	d142      	bne.n	80177ae <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8017728:	8a7b      	ldrh	r3, [r7, #18]
 801772a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801772e:	4293      	cmp	r3, r2
 8017730:	d103      	bne.n	801773a <CircularQueue_Sense+0xb6>
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	891b      	ldrh	r3, [r3, #8]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d012      	beq.n	8017760 <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 801773a:	687b      	ldr	r3, [r7, #4]
 801773c:	68da      	ldr	r2, [r3, #12]
 801773e:	687b      	ldr	r3, [r7, #4]
 8017740:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 8017742:	429a      	cmp	r2, r3
 8017744:	d933      	bls.n	80177ae <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	891b      	ldrh	r3, [r3, #8]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d02f      	beq.n	80177ae <CircularQueue_Sense+0x12a>
 801774e:	687b      	ldr	r3, [r7, #4]
 8017750:	685a      	ldr	r2, [r3, #4]
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	68db      	ldr	r3, [r3, #12]
 8017756:	1ad3      	subs	r3, r2, r3
 8017758:	687a      	ldr	r2, [r7, #4]
 801775a:	8912      	ldrh	r2, [r2, #8]
 801775c:	4293      	cmp	r3, r2
 801775e:	d226      	bcs.n	80177ae <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 8017760:	2300      	movs	r3, #0
 8017762:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 8017764:	687b      	ldr	r3, [r7, #4]
 8017766:	891b      	ldrh	r3, [r3, #8]
 8017768:	2b00      	cmp	r3, #0
 801776a:	d11d      	bne.n	80177a8 <CircularQueue_Sense+0x124>
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	681a      	ldr	r2, [r3, #0]
 8017770:	68fb      	ldr	r3, [r7, #12]
 8017772:	4413      	add	r3, r2
 8017774:	781b      	ldrb	r3, [r3, #0]
 8017776:	b29a      	uxth	r2, r3
 8017778:	687b      	ldr	r3, [r7, #4]
 801777a:	6819      	ldr	r1, [r3, #0]
 801777c:	68fb      	ldr	r3, [r7, #12]
 801777e:	1c58      	adds	r0, r3, #1
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	685b      	ldr	r3, [r3, #4]
 8017784:	4298      	cmp	r0, r3
 8017786:	d305      	bcc.n	8017794 <CircularQueue_Sense+0x110>
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	685b      	ldr	r3, [r3, #4]
 801778c:	68f8      	ldr	r0, [r7, #12]
 801778e:	1ac3      	subs	r3, r0, r3
 8017790:	3301      	adds	r3, #1
 8017792:	e001      	b.n	8017798 <CircularQueue_Sense+0x114>
 8017794:	68fb      	ldr	r3, [r7, #12]
 8017796:	3301      	adds	r3, #1
 8017798:	440b      	add	r3, r1
 801779a:	781b      	ldrb	r3, [r3, #0]
 801779c:	b29b      	uxth	r3, r3
 801779e:	021b      	lsls	r3, r3, #8
 80177a0:	b29b      	uxth	r3, r3
 80177a2:	4413      	add	r3, r2
 80177a4:	b29b      	uxth	r3, r3
 80177a6:	e001      	b.n	80177ac <CircularQueue_Sense+0x128>
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	891b      	ldrh	r3, [r3, #8]
 80177ac:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	681a      	ldr	r2, [r3, #0]
 80177b2:	7af9      	ldrb	r1, [r7, #11]
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	4419      	add	r1, r3
 80177b8:	687b      	ldr	r3, [r7, #4]
 80177ba:	685b      	ldr	r3, [r3, #4]
 80177bc:	4299      	cmp	r1, r3
 80177be:	d306      	bcc.n	80177ce <CircularQueue_Sense+0x14a>
 80177c0:	7af9      	ldrb	r1, [r7, #11]
 80177c2:	68fb      	ldr	r3, [r7, #12]
 80177c4:	4419      	add	r1, r3
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	685b      	ldr	r3, [r3, #4]
 80177ca:	1acb      	subs	r3, r1, r3
 80177cc:	e002      	b.n	80177d4 <CircularQueue_Sense+0x150>
 80177ce:	7af9      	ldrb	r1, [r7, #11]
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	440b      	add	r3, r1
 80177d4:	4413      	add	r3, r2
 80177d6:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 80177d8:	683b      	ldr	r3, [r7, #0]
 80177da:	2b00      	cmp	r3, #0
 80177dc:	d002      	beq.n	80177e4 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 80177de:	683b      	ldr	r3, [r7, #0]
 80177e0:	8a7a      	ldrh	r2, [r7, #18]
 80177e2:	801a      	strh	r2, [r3, #0]
  }
  return x;
 80177e4:	697b      	ldr	r3, [r7, #20]
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	371c      	adds	r7, #28
 80177ea:	46bd      	mov	sp, r7
 80177ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f0:	4770      	bx	lr

080177f2 <htobe32>:
 80177f2:	ba00      	rev	r0, r0
 80177f4:	4770      	bx	lr

080177f6 <BAES_CmacKeyRoll>:
 80177f6:	b530      	push	{r4, r5, lr}
 80177f8:	e9d0 3500 	ldrd	r3, r5, [r0]
 80177fc:	6884      	ldr	r4, [r0, #8]
 80177fe:	0fe1      	lsrs	r1, r4, #31
 8017800:	ea41 0145 	orr.w	r1, r1, r5, lsl #1
 8017804:	0fea      	lsrs	r2, r5, #31
 8017806:	6041      	str	r1, [r0, #4]
 8017808:	68c1      	ldr	r1, [r0, #12]
 801780a:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 801780e:	6002      	str	r2, [r0, #0]
 8017810:	0fca      	lsrs	r2, r1, #31
 8017812:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
 8017816:	6082      	str	r2, [r0, #8]
 8017818:	0fdb      	lsrs	r3, r3, #31
 801781a:	2287      	movs	r2, #135	; 0x87
 801781c:	4353      	muls	r3, r2
 801781e:	ea83 0341 	eor.w	r3, r3, r1, lsl #1
 8017822:	60c3      	str	r3, [r0, #12]
 8017824:	bd30      	pop	{r4, r5, pc}
	...

08017828 <HW_AES_WaitComplete>:
 8017828:	4b04      	ldr	r3, [pc, #16]	; (801783c <HW_AES_WaitComplete+0x14>)
 801782a:	685a      	ldr	r2, [r3, #4]
 801782c:	07d2      	lsls	r2, r2, #31
 801782e:	d5fc      	bpl.n	801782a <HW_AES_WaitComplete+0x2>
 8017830:	681a      	ldr	r2, [r3, #0]
 8017832:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8017836:	601a      	str	r2, [r3, #0]
 8017838:	4770      	bx	lr
 801783a:	bf00      	nop
 801783c:	50060000 	.word	0x50060000

08017840 <HW_AES_Input>:
 8017840:	4b04      	ldr	r3, [pc, #16]	; (8017854 <HW_AES_Input+0x14>)
 8017842:	6802      	ldr	r2, [r0, #0]
 8017844:	609a      	str	r2, [r3, #8]
 8017846:	6842      	ldr	r2, [r0, #4]
 8017848:	609a      	str	r2, [r3, #8]
 801784a:	6882      	ldr	r2, [r0, #8]
 801784c:	609a      	str	r2, [r3, #8]
 801784e:	68c2      	ldr	r2, [r0, #12]
 8017850:	609a      	str	r2, [r3, #8]
 8017852:	4770      	bx	lr
 8017854:	50060000 	.word	0x50060000

08017858 <HW_AES_CcmGenerateTag>:
 8017858:	4909      	ldr	r1, [pc, #36]	; (8017880 <HW_AES_CcmGenerateTag+0x28>)
 801785a:	b508      	push	{r3, lr}
 801785c:	680b      	ldr	r3, [r1, #0]
 801785e:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 8017862:	f043 0301 	orr.w	r3, r3, #1
 8017866:	600b      	str	r3, [r1, #0]
 8017868:	f7ff ffde 	bl	8017828 <HW_AES_WaitComplete>
 801786c:	68cb      	ldr	r3, [r1, #12]
 801786e:	6003      	str	r3, [r0, #0]
 8017870:	68cb      	ldr	r3, [r1, #12]
 8017872:	6043      	str	r3, [r0, #4]
 8017874:	68cb      	ldr	r3, [r1, #12]
 8017876:	6083      	str	r3, [r0, #8]
 8017878:	68cb      	ldr	r3, [r1, #12]
 801787a:	60c3      	str	r3, [r0, #12]
 801787c:	bd08      	pop	{r3, pc}
 801787e:	bf00      	nop
 8017880:	50060000 	.word	0x50060000

08017884 <Appli_StartProvisioningCb>:
 8017884:	2301      	movs	r3, #1
 8017886:	7003      	strb	r3, [r0, #0]
 8017888:	2300      	movs	r3, #0
 801788a:	7043      	strb	r3, [r0, #1]
 801788c:	7083      	strb	r3, [r0, #2]
 801788e:	70c3      	strb	r3, [r0, #3]
 8017890:	7103      	strb	r3, [r0, #4]
 8017892:	4770      	bx	lr

08017894 <Appli_PubKeyCb>:
 8017894:	4b01      	ldr	r3, [pc, #4]	; (801789c <Appli_PubKeyCb+0x8>)
 8017896:	681b      	ldr	r3, [r3, #0]
 8017898:	6858      	ldr	r0, [r3, #4]
 801789a:	4770      	bx	lr
 801789c:	20000324 	.word	0x20000324

080178a0 <Appli_StaticOobCb>:
 80178a0:	4b01      	ldr	r3, [pc, #4]	; (80178a8 <Appli_StaticOobCb+0x8>)
 80178a2:	681b      	ldr	r3, [r3, #0]
 80178a4:	6918      	ldr	r0, [r3, #16]
 80178a6:	4770      	bx	lr
 80178a8:	20000324 	.word	0x20000324

080178ac <Appli_UnprovisionedIdentifyCb>:
 80178ac:	4b01      	ldr	r3, [pc, #4]	; (80178b4 <Appli_UnprovisionedIdentifyCb+0x8>)
 80178ae:	685b      	ldr	r3, [r3, #4]
 80178b0:	691b      	ldr	r3, [r3, #16]
 80178b2:	4718      	bx	r3
 80178b4:	20000324 	.word	0x20000324

080178b8 <BnrgmProxyProtocol_SetDataInCharacteristic>:
 80178b8:	4b01      	ldr	r3, [pc, #4]	; (80178c0 <BnrgmProxyProtocol_SetDataInCharacteristic+0x8>)
 80178ba:	f8a3 008a 	strh.w	r0, [r3, #138]	; 0x8a
 80178be:	4770      	bx	lr
 80178c0:	20000324 	.word	0x20000324

080178c4 <BnrgmProxyProtocol_SetDataOutCharacteristic>:
 80178c4:	4b01      	ldr	r3, [pc, #4]	; (80178cc <BnrgmProxyProtocol_SetDataOutCharacteristic+0x8>)
 80178c6:	f8a3 008c 	strh.w	r0, [r3, #140]	; 0x8c
 80178ca:	4770      	bx	lr
 80178cc:	20000324 	.word	0x20000324

080178d0 <MobleProvisionBearerGatt_RepeatTimerCallback>:
 80178d0:	4770      	bx	lr

080178d2 <MobleConfigModelGetNetIdx>:
 80178d2:	7843      	ldrb	r3, [r0, #1]
 80178d4:	7800      	ldrb	r0, [r0, #0]
 80178d6:	021b      	lsls	r3, r3, #8
 80178d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80178dc:	4418      	add	r0, r3
 80178de:	4770      	bx	lr

080178e0 <MobleConfigModelPutKeyIdxs>:
 80178e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80178e4:	2500      	movs	r5, #0
 80178e6:	4607      	mov	r7, r0
 80178e8:	4628      	mov	r0, r5
 80178ea:	b2ee      	uxtb	r6, r5
 80178ec:	428e      	cmp	r6, r1
 80178ee:	d301      	bcc.n	80178f4 <MobleConfigModelPutKeyIdxs+0x14>
 80178f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80178f4:	eb06 0807 	add.w	r8, r6, r7
 80178f8:	eb08 0448 	add.w	r4, r8, r8, lsl #1
 80178fc:	1064      	asrs	r4, r4, #1
 80178fe:	f018 0f01 	tst.w	r8, #1
 8017902:	f833 9016 	ldrh.w	r9, [r3, r6, lsl #1]
 8017906:	f104 0e01 	add.w	lr, r4, #1
 801790a:	d10b      	bne.n	8017924 <MobleConfigModelPutKeyIdxs+0x44>
 801790c:	f802 9004 	strb.w	r9, [r2, r4]
 8017910:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8017914:	f3c4 2403 	ubfx	r4, r4, #8, #4
 8017918:	f802 400e 	strb.w	r4, [r2, lr]
 801791c:	3002      	adds	r0, #2
 801791e:	b280      	uxth	r0, r0
 8017920:	3501      	adds	r5, #1
 8017922:	e7e2      	b.n	80178ea <MobleConfigModelPutKeyIdxs+0xa>
 8017924:	f812 c004 	ldrb.w	ip, [r2, r4]
 8017928:	ea4c 1c09 	orr.w	ip, ip, r9, lsl #4
 801792c:	f802 c004 	strb.w	ip, [r2, r4]
 8017930:	f833 4016 	ldrh.w	r4, [r3, r6, lsl #1]
 8017934:	0924      	lsrs	r4, r4, #4
 8017936:	f802 400e 	strb.w	r4, [r2, lr]
 801793a:	3001      	adds	r0, #1
 801793c:	e7ef      	b.n	801791e <MobleConfigModelPutKeyIdxs+0x3e>

0801793e <BnrgmHealthModelAttention_TimerCallback>:
 801793e:	680b      	ldr	r3, [r1, #0]
 8017940:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017942:	f892 306e 	ldrb.w	r3, [r2, #110]	; 0x6e
 8017946:	b133      	cbz	r3, 8017956 <BnrgmHealthModelAttention_TimerCallback+0x18>
 8017948:	3b01      	subs	r3, #1
 801794a:	f882 306e 	strb.w	r3, [r2, #110]	; 0x6e
 801794e:	f8d1 31f4 	ldr.w	r3, [r1, #500]	; 0x1f4
 8017952:	b113      	cbz	r3, 801795a <BnrgmHealthModelAttention_TimerCallback+0x1c>
 8017954:	4718      	bx	r3
 8017956:	b100      	cbz	r0, 801795a <BnrgmHealthModelAttention_TimerCallback+0x1c>
 8017958:	7003      	strb	r3, [r0, #0]
 801795a:	4770      	bx	lr

0801795c <Test_UpperTester_Set08>:
 801795c:	4b02      	ldr	r3, [pc, #8]	; (8017968 <Test_UpperTester_Set08+0xc>)
 801795e:	2201      	movs	r2, #1
 8017960:	801a      	strh	r2, [r3, #0]
 8017962:	2000      	movs	r0, #0
 8017964:	4770      	bx	lr
 8017966:	bf00      	nop
 8017968:	20000008 	.word	0x20000008

0801796c <Test_UpperTester_Set09>:
 801796c:	4b02      	ldr	r3, [pc, #8]	; (8017978 <Test_UpperTester_Set09+0xc>)
 801796e:	2000      	movs	r0, #0
 8017970:	f8a3 00e4 	strh.w	r0, [r3, #228]	; 0xe4
 8017974:	4770      	bx	lr
 8017976:	bf00      	nop
 8017978:	20000324 	.word	0x20000324

0801797c <Test_UpperTester_Set14>:
 801797c:	4b02      	ldr	r3, [pc, #8]	; (8017988 <Test_UpperTester_Set14+0xc>)
 801797e:	2203      	movs	r2, #3
 8017980:	801a      	strh	r2, [r3, #0]
 8017982:	2000      	movs	r0, #0
 8017984:	4770      	bx	lr
 8017986:	bf00      	nop
 8017988:	20000008 	.word	0x20000008

0801798c <MobleGattReadCallback>:
 801798c:	b538      	push	{r3, r4, r5, lr}
 801798e:	b928      	cbnz	r0, 801799c <MobleGattReadCallback+0x10>
 8017990:	4b16      	ldr	r3, [pc, #88]	; (80179ec <MobleGattReadCallback+0x60>)
 8017992:	4a17      	ldr	r2, [pc, #92]	; (80179f0 <MobleGattReadCallback+0x64>)
 8017994:	215d      	movs	r1, #93	; 0x5d
 8017996:	4817      	ldr	r0, [pc, #92]	; (80179f4 <MobleGattReadCallback+0x68>)
 8017998:	f011 f896 	bl	8028ac8 <__assert_func>
 801799c:	b91a      	cbnz	r2, 80179a6 <MobleGattReadCallback+0x1a>
 801799e:	4b16      	ldr	r3, [pc, #88]	; (80179f8 <MobleGattReadCallback+0x6c>)
 80179a0:	4a13      	ldr	r2, [pc, #76]	; (80179f0 <MobleGattReadCallback+0x64>)
 80179a2:	215e      	movs	r1, #94	; 0x5e
 80179a4:	e7f7      	b.n	8017996 <MobleGattReadCallback+0xa>
 80179a6:	b91b      	cbnz	r3, 80179b0 <MobleGattReadCallback+0x24>
 80179a8:	4b14      	ldr	r3, [pc, #80]	; (80179fc <MobleGattReadCallback+0x70>)
 80179aa:	4a11      	ldr	r2, [pc, #68]	; (80179f0 <MobleGattReadCallback+0x64>)
 80179ac:	215f      	movs	r1, #95	; 0x5f
 80179ae:	e7f2      	b.n	8017996 <MobleGattReadCallback+0xa>
 80179b0:	f8d0 0164 	ldr.w	r0, [r0, #356]	; 0x164
 80179b4:	b1c0      	cbz	r0, 80179e8 <MobleGattReadCallback+0x5c>
 80179b6:	6842      	ldr	r2, [r0, #4]
 80179b8:	b1b2      	cbz	r2, 80179e8 <MobleGattReadCallback+0x5c>
 80179ba:	7885      	ldrb	r5, [r0, #2]
 80179bc:	b1a5      	cbz	r5, 80179e8 <MobleGattReadCallback+0x5c>
 80179be:	2400      	movs	r4, #0
 80179c0:	68d0      	ldr	r0, [r2, #12]
 80179c2:	3001      	adds	r0, #1
 80179c4:	b280      	uxth	r0, r0
 80179c6:	4281      	cmp	r1, r0
 80179c8:	d106      	bne.n	80179d8 <MobleGattReadCallback+0x4c>
 80179ca:	7910      	ldrb	r0, [r2, #4]
 80179cc:	781b      	ldrb	r3, [r3, #0]
 80179ce:	4298      	cmp	r0, r3
 80179d0:	bf94      	ite	ls
 80179d2:	2002      	movls	r0, #2
 80179d4:	2003      	movhi	r0, #3
 80179d6:	bd38      	pop	{r3, r4, r5, pc}
 80179d8:	3401      	adds	r4, #1
 80179da:	b2e0      	uxtb	r0, r4
 80179dc:	4285      	cmp	r5, r0
 80179de:	f102 0210 	add.w	r2, r2, #16
 80179e2:	d8ed      	bhi.n	80179c0 <MobleGattReadCallback+0x34>
 80179e4:	2001      	movs	r0, #1
 80179e6:	e7f6      	b.n	80179d6 <MobleGattReadCallback+0x4a>
 80179e8:	2002      	movs	r0, #2
 80179ea:	e7f4      	b.n	80179d6 <MobleGattReadCallback+0x4a>
 80179ec:	08033338 	.word	0x08033338
 80179f0:	0803135c 	.word	0x0803135c
 80179f4:	0803333e 	.word	0x0803333e
 80179f8:	0803337a 	.word	0x0803337a
 80179fc:	08033af0 	.word	0x08033af0

08017a00 <BPKA_Reverse>:
 8017a00:	6803      	ldr	r3, [r0, #0]
 8017a02:	69c2      	ldr	r2, [r0, #28]
 8017a04:	ba1b      	rev	r3, r3
 8017a06:	ba12      	rev	r2, r2
 8017a08:	6002      	str	r2, [r0, #0]
 8017a0a:	61c3      	str	r3, [r0, #28]
 8017a0c:	6982      	ldr	r2, [r0, #24]
 8017a0e:	6843      	ldr	r3, [r0, #4]
 8017a10:	ba12      	rev	r2, r2
 8017a12:	ba1b      	rev	r3, r3
 8017a14:	6042      	str	r2, [r0, #4]
 8017a16:	6183      	str	r3, [r0, #24]
 8017a18:	6942      	ldr	r2, [r0, #20]
 8017a1a:	6883      	ldr	r3, [r0, #8]
 8017a1c:	ba12      	rev	r2, r2
 8017a1e:	ba1b      	rev	r3, r3
 8017a20:	6082      	str	r2, [r0, #8]
 8017a22:	6143      	str	r3, [r0, #20]
 8017a24:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8017a28:	ba12      	rev	r2, r2
 8017a2a:	ba1b      	rev	r3, r3
 8017a2c:	60c2      	str	r2, [r0, #12]
 8017a2e:	6103      	str	r3, [r0, #16]
 8017a30:	4770      	bx	lr

08017a32 <MoblePBADVEraseTransaction>:
 8017a32:	2100      	movs	r1, #0
 8017a34:	6041      	str	r1, [r0, #4]
 8017a36:	228a      	movs	r2, #138	; 0x8a
 8017a38:	3008      	adds	r0, #8
 8017a3a:	f011 bf3b 	b.w	80298b4 <memset>
	...

08017a40 <BnrgmConfigModelProcessHeartbeat>:
 8017a40:	b530      	push	{r4, r5, lr}
 8017a42:	4c16      	ldr	r4, [pc, #88]	; (8017a9c <BnrgmConfigModelProcessHeartbeat+0x5c>)
 8017a44:	f8d4 50e8 	ldr.w	r5, [r4, #232]	; 0xe8
 8017a48:	3d01      	subs	r5, #1
 8017a4a:	f1b5 7f7a 	cmp.w	r5, #65536000	; 0x3e80000
 8017a4e:	d223      	bcs.n	8017a98 <BnrgmConfigModelProcessHeartbeat+0x58>
 8017a50:	4293      	cmp	r3, r2
 8017a52:	d821      	bhi.n	8017a98 <BnrgmConfigModelProcessHeartbeat+0x58>
 8017a54:	f8b4 50e0 	ldrh.w	r5, [r4, #224]	; 0xe0
 8017a58:	4285      	cmp	r5, r0
 8017a5a:	d11d      	bne.n	8017a98 <BnrgmConfigModelProcessHeartbeat+0x58>
 8017a5c:	f8a4 10e2 	strh.w	r1, [r4, #226]	; 0xe2
 8017a60:	f8b4 10e4 	ldrh.w	r1, [r4, #228]	; 0xe4
 8017a64:	3201      	adds	r2, #1
 8017a66:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8017a6a:	4281      	cmp	r1, r0
 8017a6c:	eba2 0303 	sub.w	r3, r2, r3
 8017a70:	f894 20e6 	ldrb.w	r2, [r4, #230]	; 0xe6
 8017a74:	bf1c      	itt	ne
 8017a76:	3101      	addne	r1, #1
 8017a78:	f8a4 10e4 	strhne.w	r1, [r4, #228]	; 0xe4
 8017a7c:	b2db      	uxtb	r3, r3
 8017a7e:	b10a      	cbz	r2, 8017a84 <BnrgmConfigModelProcessHeartbeat+0x44>
 8017a80:	4293      	cmp	r3, r2
 8017a82:	d201      	bcs.n	8017a88 <BnrgmConfigModelProcessHeartbeat+0x48>
 8017a84:	f884 30e6 	strb.w	r3, [r4, #230]	; 0xe6
 8017a88:	f894 20e7 	ldrb.w	r2, [r4, #231]	; 0xe7
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	d201      	bcs.n	8017a94 <BnrgmConfigModelProcessHeartbeat+0x54>
 8017a90:	f884 30e7 	strb.w	r3, [r4, #231]	; 0xe7
 8017a94:	2000      	movs	r0, #0
 8017a96:	e000      	b.n	8017a9a <BnrgmConfigModelProcessHeartbeat+0x5a>
 8017a98:	2002      	movs	r0, #2
 8017a9a:	bd30      	pop	{r4, r5, pc}
 8017a9c:	20000324 	.word	0x20000324

08017aa0 <BnrgmHealthModel_ProcessFaultClearUnack>:
 8017aa0:	4a09      	ldr	r2, [pc, #36]	; (8017ac8 <BnrgmHealthModel_ProcessFaultClearUnack+0x28>)
 8017aa2:	681b      	ldr	r3, [r3, #0]
 8017aa4:	8852      	ldrh	r2, [r2, #2]
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d10a      	bne.n	8017ac2 <BnrgmHealthModel_ProcessFaultClearUnack+0x22>
 8017aac:	6803      	ldr	r3, [r0, #0]
 8017aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	6553      	str	r3, [r2, #84]	; 0x54
 8017ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8017ab6:	6802      	ldr	r2, [r0, #0]
 8017ab8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017aba:	4618      	mov	r0, r3
 8017abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8017abe:	6513      	str	r3, [r2, #80]	; 0x50
 8017ac0:	4770      	bx	lr
 8017ac2:	2003      	movs	r0, #3
 8017ac4:	4770      	bx	lr
 8017ac6:	bf00      	nop
 8017ac8:	20000008 	.word	0x20000008

08017acc <BnrgmHealthModel_ProcessFaultTestUnack>:
 8017acc:	4a0a      	ldr	r2, [pc, #40]	; (8017af8 <BnrgmHealthModel_ProcessFaultTestUnack+0x2c>)
 8017ace:	7819      	ldrb	r1, [r3, #0]
 8017ad0:	f892 2f20 	ldrb.w	r2, [r2, #3872]	; 0xf20
 8017ad4:	428a      	cmp	r2, r1
 8017ad6:	d001      	beq.n	8017adc <BnrgmHealthModel_ProcessFaultTestUnack+0x10>
 8017ad8:	2003      	movs	r0, #3
 8017ada:	4770      	bx	lr
 8017adc:	4907      	ldr	r1, [pc, #28]	; (8017afc <BnrgmHealthModel_ProcessFaultTestUnack+0x30>)
 8017ade:	f8d3 3001 	ldr.w	r3, [r3, #1]
 8017ae2:	8849      	ldrh	r1, [r1, #2]
 8017ae4:	b29b      	uxth	r3, r3
 8017ae6:	4299      	cmp	r1, r3
 8017ae8:	d1f6      	bne.n	8017ad8 <BnrgmHealthModel_ProcessFaultTestUnack+0xc>
 8017aea:	6803      	ldr	r3, [r0, #0]
 8017aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017aee:	2000      	movs	r0, #0
 8017af0:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8017af4:	4770      	bx	lr
 8017af6:	bf00      	nop
 8017af8:	20000324 	.word	0x20000324
 8017afc:	20000008 	.word	0x20000008

08017b00 <MoblePalTimerFindFreeSlot>:
 8017b00:	4b06      	ldr	r3, [pc, #24]	; (8017b1c <MoblePalTimerFindFreeSlot+0x1c>)
 8017b02:	2000      	movs	r0, #0
 8017b04:	2218      	movs	r2, #24
 8017b06:	fb02 f100 	mul.w	r1, r2, r0
 8017b0a:	5cc9      	ldrb	r1, [r1, r3]
 8017b0c:	b121      	cbz	r1, 8017b18 <MoblePalTimerFindFreeSlot+0x18>
 8017b0e:	3001      	adds	r0, #1
 8017b10:	2832      	cmp	r0, #50	; 0x32
 8017b12:	d1f8      	bne.n	8017b06 <MoblePalTimerFindFreeSlot+0x6>
 8017b14:	f04f 30ff 	mov.w	r0, #4294967295
 8017b18:	4770      	bx	lr
 8017b1a:	bf00      	nop
 8017b1c:	20001248 	.word	0x20001248

08017b20 <MoblePalTimerInit>:
 8017b20:	2300      	movs	r3, #0
 8017b22:	4a06      	ldr	r2, [pc, #24]	; (8017b3c <MoblePalTimerInit+0x1c>)
 8017b24:	b510      	push	{r4, lr}
 8017b26:	4618      	mov	r0, r3
 8017b28:	2418      	movs	r4, #24
 8017b2a:	fb04 f103 	mul.w	r1, r4, r3
 8017b2e:	3301      	adds	r3, #1
 8017b30:	2b32      	cmp	r3, #50	; 0x32
 8017b32:	5488      	strb	r0, [r1, r2]
 8017b34:	d1f9      	bne.n	8017b2a <MoblePalTimerInit+0xa>
 8017b36:	2000      	movs	r0, #0
 8017b38:	bd10      	pop	{r4, pc}
 8017b3a:	bf00      	nop
 8017b3c:	20001248 	.word	0x20001248

08017b40 <MoblePalTimerCreate>:
 8017b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017b42:	460e      	mov	r6, r1
 8017b44:	4617      	mov	r7, r2
 8017b46:	4605      	mov	r5, r0
 8017b48:	b1a8      	cbz	r0, 8017b76 <MoblePalTimerCreate+0x36>
 8017b4a:	b1a1      	cbz	r1, 8017b76 <MoblePalTimerCreate+0x36>
 8017b4c:	f7ff ffd8 	bl	8017b00 <MoblePalTimerFindFreeSlot>
 8017b50:	1e03      	subs	r3, r0, #0
 8017b52:	db12      	blt.n	8017b7a <MoblePalTimerCreate+0x3a>
 8017b54:	4c0a      	ldr	r4, [pc, #40]	; (8017b80 <MoblePalTimerCreate+0x40>)
 8017b56:	2018      	movs	r0, #24
 8017b58:	4343      	muls	r3, r0
 8017b5a:	18e1      	adds	r1, r4, r3
 8017b5c:	f604 7424 	addw	r4, r4, #3876	; 0xf24
 8017b60:	2201      	movs	r2, #1
 8017b62:	4423      	add	r3, r4
 8017b64:	f881 2f24 	strb.w	r2, [r1, #3876]	; 0xf24
 8017b68:	f8c1 6f34 	str.w	r6, [r1, #3892]	; 0xf34
 8017b6c:	f8c1 7f38 	str.w	r7, [r1, #3896]	; 0xf38
 8017b70:	2000      	movs	r0, #0
 8017b72:	602b      	str	r3, [r5, #0]
 8017b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017b76:	2003      	movs	r0, #3
 8017b78:	e7fc      	b.n	8017b74 <MoblePalTimerCreate+0x34>
 8017b7a:	2004      	movs	r0, #4
 8017b7c:	e7fa      	b.n	8017b74 <MoblePalTimerCreate+0x34>
 8017b7e:	bf00      	nop
 8017b80:	20000324 	.word	0x20000324

08017b84 <MoblePalTimerSetup>:
 8017b84:	b570      	push	{r4, r5, r6, lr}
 8017b86:	460d      	mov	r5, r1
 8017b88:	4616      	mov	r6, r2
 8017b8a:	4604      	mov	r4, r0
 8017b8c:	b168      	cbz	r0, 8017baa <MoblePalTimerSetup+0x26>
 8017b8e:	b161      	cbz	r1, 8017baa <MoblePalTimerSetup+0x26>
 8017b90:	7803      	ldrb	r3, [r0, #0]
 8017b92:	2b01      	cmp	r3, #1
 8017b94:	d10b      	bne.n	8017bae <MoblePalTimerSetup+0x2a>
 8017b96:	f7f0 f965 	bl	8007e64 <HAL_GetTick>
 8017b9a:	2302      	movs	r3, #2
 8017b9c:	4405      	add	r5, r0
 8017b9e:	6060      	str	r0, [r4, #4]
 8017ba0:	60a5      	str	r5, [r4, #8]
 8017ba2:	7326      	strb	r6, [r4, #12]
 8017ba4:	7023      	strb	r3, [r4, #0]
 8017ba6:	2000      	movs	r0, #0
 8017ba8:	bd70      	pop	{r4, r5, r6, pc}
 8017baa:	2003      	movs	r0, #3
 8017bac:	e7fc      	b.n	8017ba8 <MoblePalTimerSetup+0x24>
 8017bae:	2002      	movs	r0, #2
 8017bb0:	e7fa      	b.n	8017ba8 <MoblePalTimerSetup+0x24>

08017bb2 <MoblePalTimerStart>:
 8017bb2:	2200      	movs	r2, #0
 8017bb4:	f7ff bfe6 	b.w	8017b84 <MoblePalTimerSetup>

08017bb8 <BnrgmHealthModelSetAttentionTimer>:
 8017bb8:	6803      	ldr	r3, [r0, #0]
 8017bba:	b510      	push	{r4, lr}
 8017bbc:	4604      	mov	r4, r0
 8017bbe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017bc0:	f8d4 31f4 	ldr.w	r3, [r4, #500]	; 0x1f4
 8017bc4:	b91b      	cbnz	r3, 8017bce <BnrgmHealthModelSetAttentionTimer+0x16>
 8017bc6:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
 8017bca:	4618      	mov	r0, r3
 8017bcc:	bd10      	pop	{r4, pc}
 8017bce:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d0f9      	beq.n	8017bca <BnrgmHealthModelSetAttentionTimer+0x12>
 8017bd6:	4909      	ldr	r1, [pc, #36]	; (8017bfc <BnrgmHealthModelSetAttentionTimer+0x44>)
 8017bd8:	4622      	mov	r2, r4
 8017bda:	3070      	adds	r0, #112	; 0x70
 8017bdc:	f7ff ffb0 	bl	8017b40 <MoblePalTimerCreate>
 8017be0:	2801      	cmp	r0, #1
 8017be2:	d808      	bhi.n	8017bf6 <BnrgmHealthModelSetAttentionTimer+0x3e>
 8017be4:	6823      	ldr	r3, [r4, #0]
 8017be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017bec:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8017bee:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8017bf2:	f7ff bfde 	b.w	8017bb2 <MoblePalTimerStart>
 8017bf6:	2304      	movs	r3, #4
 8017bf8:	e7e7      	b.n	8017bca <BnrgmHealthModelSetAttentionTimer+0x12>
 8017bfa:	bf00      	nop
 8017bfc:	0801793f 	.word	0x0801793f

08017c00 <BnrgmHealthModel_ProcessAttentionSetUnack>:
 8017c00:	b508      	push	{r3, lr}
 8017c02:	781a      	ldrb	r2, [r3, #0]
 8017c04:	6803      	ldr	r3, [r0, #0]
 8017c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c08:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8017c0c:	f7ff ffd4 	bl	8017bb8 <BnrgmHealthModelSetAttentionTimer>
 8017c10:	2000      	movs	r0, #0
 8017c12:	bd08      	pop	{r3, pc}

08017c14 <MoblePalTimerStartOnce>:
 8017c14:	2201      	movs	r2, #1
 8017c16:	f7ff bfb5 	b.w	8017b84 <MoblePalTimerSetup>
	...

08017c1c <MoblePBADVRaiseTransTimeoutTimer>:
 8017c1c:	b510      	push	{r4, lr}
 8017c1e:	4604      	mov	r4, r0
 8017c20:	4906      	ldr	r1, [pc, #24]	; (8017c3c <MoblePBADVRaiseTransTimeoutTimer+0x20>)
 8017c22:	4602      	mov	r2, r0
 8017c24:	f500 70a8 	add.w	r0, r0, #336	; 0x150
 8017c28:	f7ff ff8a 	bl	8017b40 <MoblePalTimerCreate>
 8017c2c:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
 8017c30:	f64e 2160 	movw	r1, #60000	; 0xea60
 8017c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c38:	f7ff bfec 	b.w	8017c14 <MoblePalTimerStartOnce>
 8017c3c:	080271b5 	.word	0x080271b5

08017c40 <MoblePBADVRaiseLinkIdleTimer>:
 8017c40:	b510      	push	{r4, lr}
 8017c42:	4604      	mov	r4, r0
 8017c44:	4906      	ldr	r1, [pc, #24]	; (8017c60 <MoblePBADVRaiseLinkIdleTimer+0x20>)
 8017c46:	4602      	mov	r2, r0
 8017c48:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
 8017c4c:	f7ff ff78 	bl	8017b40 <MoblePalTimerCreate>
 8017c50:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 8017c54:	f64e 2160 	movw	r1, #60000	; 0xea60
 8017c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017c5c:	f7ff bfda 	b.w	8017c14 <MoblePalTimerStartOnce>
 8017c60:	080271bd 	.word	0x080271bd

08017c64 <MoblePalTimerStop>:
 8017c64:	b130      	cbz	r0, 8017c74 <MoblePalTimerStop+0x10>
 8017c66:	7803      	ldrb	r3, [r0, #0]
 8017c68:	2b02      	cmp	r3, #2
 8017c6a:	d105      	bne.n	8017c78 <MoblePalTimerStop+0x14>
 8017c6c:	2301      	movs	r3, #1
 8017c6e:	7003      	strb	r3, [r0, #0]
 8017c70:	2000      	movs	r0, #0
 8017c72:	4770      	bx	lr
 8017c74:	2003      	movs	r0, #3
 8017c76:	4770      	bx	lr
 8017c78:	2002      	movs	r0, #2
 8017c7a:	4770      	bx	lr

08017c7c <BnrgmConfigModelHeartbeatSubscription_TimerCallback>:
 8017c7c:	4a08      	ldr	r2, [pc, #32]	; (8017ca0 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x24>)
 8017c7e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	; 0xe8
 8017c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017c86:	d204      	bcs.n	8017c92 <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x16>
 8017c88:	2300      	movs	r3, #0
 8017c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8017c8e:	f7ff bfe9 	b.w	8017c64 <MoblePalTimerStop>
 8017c92:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 8017c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d0f7      	beq.n	8017c8e <BnrgmConfigModelHeartbeatSubscription_TimerCallback+0x12>
 8017c9e:	4770      	bx	lr
 8017ca0:	20000324 	.word	0x20000324

08017ca4 <MoblePalTimerDestroy>:
 8017ca4:	b118      	cbz	r0, 8017cae <MoblePalTimerDestroy+0xa>
 8017ca6:	2300      	movs	r3, #0
 8017ca8:	7003      	strb	r3, [r0, #0]
 8017caa:	4618      	mov	r0, r3
 8017cac:	4770      	bx	lr
 8017cae:	2003      	movs	r0, #3
 8017cb0:	4770      	bx	lr
	...

08017cb4 <MobleTransEraseTimer>:
 8017cb4:	4602      	mov	r2, r0
 8017cb6:	6800      	ldr	r0, [r0, #0]
 8017cb8:	b570      	push	{r4, r5, r6, lr}
 8017cba:	b170      	cbz	r0, 8017cda <MobleTransEraseTimer+0x26>
 8017cbc:	4b0a      	ldr	r3, [pc, #40]	; (8017ce8 <MobleTransEraseTimer+0x34>)
 8017cbe:	f893 52dc 	ldrb.w	r5, [r3, #732]	; 0x2dc
 8017cc2:	f8d3 32e4 	ldr.w	r3, [r3, #740]	; 0x2e4
 8017cc6:	2100      	movs	r1, #0
 8017cc8:	3314      	adds	r3, #20
 8017cca:	460e      	mov	r6, r1
 8017ccc:	b2cc      	uxtb	r4, r1
 8017cce:	42a5      	cmp	r5, r4
 8017cd0:	d804      	bhi.n	8017cdc <MobleTransEraseTimer+0x28>
 8017cd2:	f7ff ffe7 	bl	8017ca4 <MoblePalTimerDestroy>
 8017cd6:	2300      	movs	r3, #0
 8017cd8:	6013      	str	r3, [r2, #0]
 8017cda:	bd70      	pop	{r4, r5, r6, pc}
 8017cdc:	429a      	cmp	r2, r3
 8017cde:	bf08      	it	eq
 8017ce0:	7416      	strbeq	r6, [r2, #16]
 8017ce2:	3101      	adds	r1, #1
 8017ce4:	332c      	adds	r3, #44	; 0x2c
 8017ce6:	e7f1      	b.n	8017ccc <MobleTransEraseTimer+0x18>
 8017ce8:	2000141c 	.word	0x2000141c

08017cec <MobleTransSarOnTimeout>:
 8017cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017cee:	f101 0014 	add.w	r0, r1, #20
 8017cf2:	460c      	mov	r4, r1
 8017cf4:	f7ff ffde 	bl	8017cb4 <MobleTransEraseTimer>
 8017cf8:	f104 0020 	add.w	r0, r4, #32
 8017cfc:	f7ff ffda 	bl	8017cb4 <MobleTransEraseTimer>
 8017d00:	490f      	ldr	r1, [pc, #60]	; (8017d40 <MobleTransSarOnTimeout+0x54>)
 8017d02:	e9d1 36b8 	ldrd	r3, r6, [r1, #736]	; 0x2e0
 8017d06:	2200      	movs	r2, #0
 8017d08:	4610      	mov	r0, r2
 8017d0a:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
 8017d0e:	f891 52dc 	ldrb.w	r5, [r1, #732]	; 0x2dc
 8017d12:	4295      	cmp	r5, r2
 8017d14:	dc02      	bgt.n	8017d1c <MobleTransSarOnTimeout+0x30>
 8017d16:	2300      	movs	r3, #0
 8017d18:	7023      	strb	r3, [r4, #0]
 8017d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d1c:	781d      	ldrb	r5, [r3, #0]
 8017d1e:	b15d      	cbz	r5, 8017d38 <MobleTransSarOnTimeout+0x4c>
 8017d20:	885f      	ldrh	r7, [r3, #2]
 8017d22:	88a5      	ldrh	r5, [r4, #4]
 8017d24:	42af      	cmp	r7, r5
 8017d26:	d107      	bne.n	8017d38 <MobleTransSarOnTimeout+0x4c>
 8017d28:	68e5      	ldr	r5, [r4, #12]
 8017d2a:	685f      	ldr	r7, [r3, #4]
 8017d2c:	42af      	cmp	r7, r5
 8017d2e:	bf02      	ittt	eq
 8017d30:	fb0c f502 	muleq.w	r5, ip, r2
 8017d34:	7018      	strbeq	r0, [r3, #0]
 8017d36:	5570      	strbeq	r0, [r6, r5]
 8017d38:	3201      	adds	r2, #1
 8017d3a:	332c      	adds	r3, #44	; 0x2c
 8017d3c:	e7e7      	b.n	8017d0e <MobleTransSarOnTimeout+0x22>
 8017d3e:	bf00      	nop
 8017d40:	2000141c 	.word	0x2000141c

08017d44 <MoblePBADVEraseTimer>:
 8017d44:	4602      	mov	r2, r0
 8017d46:	6800      	ldr	r0, [r0, #0]
 8017d48:	b508      	push	{r3, lr}
 8017d4a:	b118      	cbz	r0, 8017d54 <MoblePBADVEraseTimer+0x10>
 8017d4c:	f7ff ffaa 	bl	8017ca4 <MoblePalTimerDestroy>
 8017d50:	2300      	movs	r3, #0
 8017d52:	6013      	str	r3, [r2, #0]
 8017d54:	bd08      	pop	{r3, pc}

08017d56 <MoblePBADVClearTimers>:
 8017d56:	b508      	push	{r3, lr}
 8017d58:	4601      	mov	r1, r0
 8017d5a:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 8017d5e:	f7ff fff1 	bl	8017d44 <MoblePBADVEraseTimer>
 8017d62:	f501 70a8 	add.w	r0, r1, #336	; 0x150
 8017d66:	f7ff ffed 	bl	8017d44 <MoblePBADVEraseTimer>
 8017d6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017d6e:	f501 70a6 	add.w	r0, r1, #332	; 0x14c
 8017d72:	f7ff bfe7 	b.w	8017d44 <MoblePBADVEraseTimer>
	...

08017d78 <BnrgmStackNodeIdentityTimerCallback>:
 8017d78:	4b03      	ldr	r3, [pc, #12]	; (8017d88 <BnrgmStackNodeIdentityTimerCallback+0x10>)
 8017d7a:	f8d1 017c 	ldr.w	r0, [r1, #380]	; 0x17c
 8017d7e:	2200      	movs	r2, #0
 8017d80:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
 8017d84:	f7ff bf8e 	b.w	8017ca4 <MoblePalTimerDestroy>
 8017d88:	20000324 	.word	0x20000324

08017d8c <BnrgmHealthModelSetPublishTimer.isra.0>:
 8017d8c:	b538      	push	{r3, r4, r5, lr}
 8017d8e:	6803      	ldr	r3, [r0, #0]
 8017d90:	4a1e      	ldr	r2, [pc, #120]	; (8017e0c <BnrgmHealthModelSetPublishTimer.isra.0+0x80>)
 8017d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d94:	f8b2 110a 	ldrh.w	r1, [r2, #266]	; 0x10a
 8017d98:	f8a3 105e 	strh.w	r1, [r3, #94]	; 0x5e
 8017d9c:	f892 110f 	ldrb.w	r1, [r2, #271]	; 0x10f
 8017da0:	f8b2 2108 	ldrh.w	r2, [r2, #264]	; 0x108
 8017da4:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
 8017da8:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8017dac:	4605      	mov	r5, r0
 8017dae:	f002 043f 	and.w	r4, r2, #63	; 0x3f
 8017db2:	f3c2 1181 	ubfx	r1, r2, #6, #2
 8017db6:	d11c      	bne.n	8017df2 <BnrgmHealthModelSetPublishTimer.isra.0+0x66>
 8017db8:	2264      	movs	r2, #100	; 0x64
 8017dba:	fb14 f402 	smulbb	r4, r4, r2
 8017dbe:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
 8017dc2:	b112      	cbz	r2, 8017dca <BnrgmHealthModelSetPublishTimer.isra.0+0x3e>
 8017dc4:	f893 206d 	ldrb.w	r2, [r3, #109]	; 0x6d
 8017dc8:	40d4      	lsrs	r4, r2
 8017dca:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8017dcc:	4910      	ldr	r1, [pc, #64]	; (8017e10 <BnrgmHealthModelSetPublishTimer.isra.0+0x84>)
 8017dce:	f7ff ff69 	bl	8017ca4 <MoblePalTimerDestroy>
 8017dd2:	682b      	ldr	r3, [r5, #0]
 8017dd4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8017dd6:	462a      	mov	r2, r5
 8017dd8:	3074      	adds	r0, #116	; 0x74
 8017dda:	f7ff feb1 	bl	8017b40 <MoblePalTimerCreate>
 8017dde:	2801      	cmp	r0, #1
 8017de0:	d813      	bhi.n	8017e0a <BnrgmHealthModelSetPublishTimer.isra.0+0x7e>
 8017de2:	682b      	ldr	r3, [r5, #0]
 8017de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017de6:	b2a1      	uxth	r1, r4
 8017de8:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8017dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017dee:	f7ff bee0 	b.w	8017bb2 <MoblePalTimerStart>
 8017df2:	2901      	cmp	r1, #1
 8017df4:	d103      	bne.n	8017dfe <BnrgmHealthModelSetPublishTimer.isra.0+0x72>
 8017df6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8017dfa:	4354      	muls	r4, r2
 8017dfc:	e7df      	b.n	8017dbe <BnrgmHealthModelSetPublishTimer.isra.0+0x32>
 8017dfe:	2902      	cmp	r1, #2
 8017e00:	bf14      	ite	ne
 8017e02:	4a04      	ldrne	r2, [pc, #16]	; (8017e14 <BnrgmHealthModelSetPublishTimer.isra.0+0x88>)
 8017e04:	f242 7210 	movweq	r2, #10000	; 0x2710
 8017e08:	e7f7      	b.n	8017dfa <BnrgmHealthModelSetPublishTimer.isra.0+0x6e>
 8017e0a:	bd38      	pop	{r3, r4, r5, pc}
 8017e0c:	20000324 	.word	0x20000324
 8017e10:	080252a1 	.word	0x080252a1
 8017e14:	000927c0 	.word	0x000927c0

08017e18 <BnrgmHealthModel_ProcessPeriodSetUnack>:
 8017e18:	b508      	push	{r3, lr}
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	2b0f      	cmp	r3, #15
 8017e1e:	d807      	bhi.n	8017e30 <BnrgmHealthModel_ProcessPeriodSetUnack+0x18>
 8017e20:	6802      	ldr	r2, [r0, #0]
 8017e22:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8017e24:	f882 306d 	strb.w	r3, [r2, #109]	; 0x6d
 8017e28:	f7ff ffb0 	bl	8017d8c <BnrgmHealthModelSetPublishTimer.isra.0>
 8017e2c:	2000      	movs	r0, #0
 8017e2e:	bd08      	pop	{r3, pc}
 8017e30:	2003      	movs	r0, #3
 8017e32:	e7fc      	b.n	8017e2e <BnrgmHealthModel_ProcessPeriodSetUnack+0x16>

08017e34 <MoblePalTimerProcess>:
 8017e34:	b570      	push	{r4, r5, r6, lr}
 8017e36:	4c13      	ldr	r4, [pc, #76]	; (8017e84 <MoblePalTimerProcess+0x50>)
 8017e38:	2600      	movs	r6, #0
 8017e3a:	2501      	movs	r5, #1
 8017e3c:	7823      	ldrb	r3, [r4, #0]
 8017e3e:	2b02      	cmp	r3, #2
 8017e40:	d117      	bne.n	8017e72 <MoblePalTimerProcess+0x3e>
 8017e42:	f7f0 f80f 	bl	8007e64 <HAL_GetTick>
 8017e46:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8017e4a:	429a      	cmp	r2, r3
 8017e4c:	d20f      	bcs.n	8017e6e <MoblePalTimerProcess+0x3a>
 8017e4e:	4298      	cmp	r0, r3
 8017e50:	d201      	bcs.n	8017e56 <MoblePalTimerProcess+0x22>
 8017e52:	4290      	cmp	r0, r2
 8017e54:	d20d      	bcs.n	8017e72 <MoblePalTimerProcess+0x3e>
 8017e56:	7b21      	ldrb	r1, [r4, #12]
 8017e58:	b991      	cbnz	r1, 8017e80 <MoblePalTimerProcess+0x4c>
 8017e5a:	1a9a      	subs	r2, r3, r2
 8017e5c:	4402      	add	r2, r0
 8017e5e:	6060      	str	r0, [r4, #4]
 8017e60:	60a2      	str	r2, [r4, #8]
 8017e62:	6923      	ldr	r3, [r4, #16]
 8017e64:	b12b      	cbz	r3, 8017e72 <MoblePalTimerProcess+0x3e>
 8017e66:	6961      	ldr	r1, [r4, #20]
 8017e68:	4620      	mov	r0, r4
 8017e6a:	4798      	blx	r3
 8017e6c:	e001      	b.n	8017e72 <MoblePalTimerProcess+0x3e>
 8017e6e:	4298      	cmp	r0, r3
 8017e70:	d2ef      	bcs.n	8017e52 <MoblePalTimerProcess+0x1e>
 8017e72:	3601      	adds	r6, #1
 8017e74:	2e32      	cmp	r6, #50	; 0x32
 8017e76:	f104 0418 	add.w	r4, r4, #24
 8017e7a:	d1df      	bne.n	8017e3c <MoblePalTimerProcess+0x8>
 8017e7c:	2000      	movs	r0, #0
 8017e7e:	bd70      	pop	{r4, r5, r6, pc}
 8017e80:	7025      	strb	r5, [r4, #0]
 8017e82:	e7ee      	b.n	8017e62 <MoblePalTimerProcess+0x2e>
 8017e84:	20001248 	.word	0x20001248

08017e88 <MoblePalBluetoothCheckManufacturerID>:
 8017e88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017e8a:	f10d 030e 	add.w	r3, sp, #14
 8017e8e:	9300      	str	r3, [sp, #0]
 8017e90:	f10d 0209 	add.w	r2, sp, #9
 8017e94:	ab03      	add	r3, sp, #12
 8017e96:	f10d 010a 	add.w	r1, sp, #10
 8017e9a:	a802      	add	r0, sp, #8
 8017e9c:	f7fd fbee 	bl	801567c <hci_read_local_version_information>
 8017ea0:	2800      	cmp	r0, #0
 8017ea2:	bf18      	it	ne
 8017ea4:	2002      	movne	r0, #2
 8017ea6:	b005      	add	sp, #20
 8017ea8:	f85d fb04 	ldr.w	pc, [sp], #4

08017eac <MoblePalBluetoothSetConnectionInterval>:
 8017eac:	f240 43e2 	movw	r3, #1250	; 0x4e2
 8017eb0:	4358      	muls	r0, r3
 8017eb2:	4b04      	ldr	r3, [pc, #16]	; (8017ec4 <MoblePalBluetoothSetConnectionInterval+0x18>)
 8017eb4:	f8d3 2350 	ldr.w	r2, [r3, #848]	; 0x350
 8017eb8:	4282      	cmp	r2, r0
 8017eba:	bf18      	it	ne
 8017ebc:	f8c3 0350 	strne.w	r0, [r3, #848]	; 0x350
 8017ec0:	4770      	bx	lr
 8017ec2:	bf00      	nop
 8017ec4:	2000141c 	.word	0x2000141c

08017ec8 <MoblePalBluetoothGattAddService>:
 8017ec8:	b510      	push	{r4, lr}
 8017eca:	b086      	sub	sp, #24
 8017ecc:	461c      	mov	r4, r3
 8017ece:	f8ad 100e 	strh.w	r1, [sp, #14]
 8017ed2:	b1ab      	cbz	r3, 8017f00 <MoblePalBluetoothGattAddService+0x38>
 8017ed4:	2801      	cmp	r0, #1
 8017ed6:	f10d 0316 	add.w	r3, sp, #22
 8017eda:	9300      	str	r3, [sp, #0]
 8017edc:	f10d 010e 	add.w	r1, sp, #14
 8017ee0:	4613      	mov	r3, r2
 8017ee2:	bf0c      	ite	eq
 8017ee4:	4602      	moveq	r2, r0
 8017ee6:	2202      	movne	r2, #2
 8017ee8:	2001      	movs	r0, #1
 8017eea:	f7fc fd82 	bl	80149f2 <aci_gatt_add_service>
 8017eee:	b948      	cbnz	r0, 8017f04 <MoblePalBluetoothGattAddService+0x3c>
 8017ef0:	4a05      	ldr	r2, [pc, #20]	; (8017f08 <MoblePalBluetoothGattAddService+0x40>)
 8017ef2:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8017ef6:	6023      	str	r3, [r4, #0]
 8017ef8:	f8a2 3340 	strh.w	r3, [r2, #832]	; 0x340
 8017efc:	b006      	add	sp, #24
 8017efe:	bd10      	pop	{r4, pc}
 8017f00:	2003      	movs	r0, #3
 8017f02:	e7fb      	b.n	8017efc <MoblePalBluetoothGattAddService+0x34>
 8017f04:	2002      	movs	r0, #2
 8017f06:	e7f9      	b.n	8017efc <MoblePalBluetoothGattAddService+0x34>
 8017f08:	2000141c 	.word	0x2000141c

08017f0c <MoblePalBluetoothGattDelService>:
 8017f0c:	b508      	push	{r3, lr}
 8017f0e:	b280      	uxth	r0, r0
 8017f10:	f7fd f85e 	bl	8014fd0 <aci_gatt_del_service>
 8017f14:	2800      	cmp	r0, #0
 8017f16:	bf18      	it	ne
 8017f18:	2002      	movne	r0, #2
 8017f1a:	bd08      	pop	{r3, pc}

08017f1c <MoblePalBluetoothGattAddCharacteristic>:
 8017f1c:	b570      	push	{r4, r5, r6, lr}
 8017f1e:	b08a      	sub	sp, #40	; 0x28
 8017f20:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8017f22:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
 8017f26:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
 8017f2a:	f8ad 101e 	strh.w	r1, [sp, #30]
 8017f2e:	2e00      	cmp	r6, #0
 8017f30:	d037      	beq.n	8017fa2 <MoblePalBluetoothGattAddCharacteristic+0x86>
 8017f32:	f014 0101 	ands.w	r1, r4, #1
 8017f36:	bf1c      	itt	ne
 8017f38:	f084 0401 	eorne.w	r4, r4, #1
 8017f3c:	2102      	movne	r1, #2
 8017f3e:	f014 0f02 	tst.w	r4, #2
 8017f42:	bf1c      	itt	ne
 8017f44:	f084 0402 	eorne.w	r4, r4, #2
 8017f48:	f041 0104 	orrne.w	r1, r1, #4
 8017f4c:	f014 0f04 	tst.w	r4, #4
 8017f50:	bf1c      	itt	ne
 8017f52:	f084 0404 	eorne.w	r4, r4, #4
 8017f56:	f041 0108 	orrne.w	r1, r1, #8
 8017f5a:	f014 0f08 	tst.w	r4, #8
 8017f5e:	bf1c      	itt	ne
 8017f60:	f084 0408 	eorne.w	r4, r4, #8
 8017f64:	f041 0110 	orrne.w	r1, r1, #16
 8017f68:	432c      	orrs	r4, r5
 8017f6a:	d11a      	bne.n	8017fa2 <MoblePalBluetoothGattAddCharacteristic+0x86>
 8017f6c:	f10d 0526 	add.w	r5, sp, #38	; 0x26
 8017f70:	9505      	str	r5, [sp, #20]
 8017f72:	1e5d      	subs	r5, r3, #1
 8017f74:	426b      	negs	r3, r5
 8017f76:	416b      	adcs	r3, r5
 8017f78:	9304      	str	r3, [sp, #16]
 8017f7a:	2310      	movs	r3, #16
 8017f7c:	9303      	str	r3, [sp, #12]
 8017f7e:	f3c1 0380 	ubfx	r3, r1, #2, #1
 8017f82:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8017f86:	9100      	str	r1, [sp, #0]
 8017f88:	4613      	mov	r3, r2
 8017f8a:	2101      	movs	r1, #1
 8017f8c:	f10d 021e 	add.w	r2, sp, #30
 8017f90:	b280      	uxth	r0, r0
 8017f92:	f7fc fe04 	bl	8014b9e <aci_gatt_add_char>
 8017f96:	b930      	cbnz	r0, 8017fa6 <MoblePalBluetoothGattAddCharacteristic+0x8a>
 8017f98:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8017f9c:	6033      	str	r3, [r6, #0]
 8017f9e:	b00a      	add	sp, #40	; 0x28
 8017fa0:	bd70      	pop	{r4, r5, r6, pc}
 8017fa2:	2003      	movs	r0, #3
 8017fa4:	e7fb      	b.n	8017f9e <MoblePalBluetoothGattAddCharacteristic+0x82>
 8017fa6:	2002      	movs	r0, #2
 8017fa8:	e7f9      	b.n	8017f9e <MoblePalBluetoothGattAddCharacteristic+0x82>

08017faa <MoblePalBluetoothGattDelCharacteristic>:
 8017faa:	b508      	push	{r3, lr}
 8017fac:	b289      	uxth	r1, r1
 8017fae:	b280      	uxth	r0, r0
 8017fb0:	f7fc ffa6 	bl	8014f00 <aci_gatt_del_char>
 8017fb4:	2800      	cmp	r0, #0
 8017fb6:	bf18      	it	ne
 8017fb8:	2002      	movne	r0, #2
 8017fba:	bd08      	pop	{r3, pc}

08017fbc <MoblePalBluetoothGetConnectionState>:
 8017fbc:	4b06      	ldr	r3, [pc, #24]	; (8017fd8 <MoblePalBluetoothGetConnectionState+0x1c>)
 8017fbe:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 8017fc2:	f013 0f34 	tst.w	r3, #52	; 0x34
 8017fc6:	d105      	bne.n	8017fd4 <MoblePalBluetoothGetConnectionState+0x18>
 8017fc8:	f013 0f08 	tst.w	r3, #8
 8017fcc:	bf14      	ite	ne
 8017fce:	2001      	movne	r0, #1
 8017fd0:	2002      	moveq	r0, #2
 8017fd2:	4770      	bx	lr
 8017fd4:	2000      	movs	r0, #0
 8017fd6:	4770      	bx	lr
 8017fd8:	2000141c 	.word	0x2000141c

08017fdc <MoblePalBluetoothSetBluetoothAddress>:
 8017fdc:	4b06      	ldr	r3, [pc, #24]	; (8017ff8 <MoblePalBluetoothSetBluetoothAddress+0x1c>)
 8017fde:	6802      	ldr	r2, [r0, #0]
 8017fe0:	f8c3 235c 	str.w	r2, [r3, #860]	; 0x35c
 8017fe4:	8882      	ldrh	r2, [r0, #4]
 8017fe6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 8017fea:	2201      	movs	r2, #1
 8017fec:	f883 2362 	strb.w	r2, [r3, #866]	; 0x362
 8017ff0:	f883 1363 	strb.w	r1, [r3, #867]	; 0x363
 8017ff4:	2000      	movs	r0, #0
 8017ff6:	4770      	bx	lr
 8017ff8:	2000141c 	.word	0x2000141c

08017ffc <MoblePalBluetoothGetBluetoothAddress>:
 8017ffc:	b508      	push	{r3, lr}
 8017ffe:	b188      	cbz	r0, 8018024 <MoblePalBluetoothGetBluetoothAddress+0x28>
 8018000:	4909      	ldr	r1, [pc, #36]	; (8018028 <MoblePalBluetoothGetBluetoothAddress+0x2c>)
 8018002:	f891 3362 	ldrb.w	r3, [r1, #866]	; 0x362
 8018006:	2b01      	cmp	r3, #1
 8018008:	d106      	bne.n	8018018 <MoblePalBluetoothGetBluetoothAddress+0x1c>
 801800a:	2206      	movs	r2, #6
 801800c:	f501 7157 	add.w	r1, r1, #860	; 0x35c
 8018010:	f011 fc36 	bl	8029880 <memmove>
 8018014:	2000      	movs	r0, #0
 8018016:	bd08      	pop	{r3, pc}
 8018018:	f7fd fb76 	bl	8015708 <hci_read_bd_addr>
 801801c:	2800      	cmp	r0, #0
 801801e:	bf18      	it	ne
 8018020:	2002      	movne	r0, #2
 8018022:	e7f8      	b.n	8018016 <MoblePalBluetoothGetBluetoothAddress+0x1a>
 8018024:	2003      	movs	r0, #3
 8018026:	e7f6      	b.n	8018016 <MoblePalBluetoothGetBluetoothAddress+0x1a>
 8018028:	2000141c 	.word	0x2000141c

0801802c <MoblePalBluetoothInit>:
 801802c:	b570      	push	{r4, r5, r6, lr}
 801802e:	4c12      	ldr	r4, [pc, #72]	; (8018078 <MoblePalBluetoothInit+0x4c>)
 8018030:	4606      	mov	r6, r0
 8018032:	461d      	mov	r5, r3
 8018034:	f884 1364 	strb.w	r1, [r4, #868]	; 0x364
 8018038:	f8c4 2368 	str.w	r2, [r4, #872]	; 0x368
 801803c:	f7ff ff24 	bl	8017e88 <MoblePalBluetoothCheckManufacturerID>
 8018040:	2801      	cmp	r0, #1
 8018042:	d818      	bhi.n	8018076 <MoblePalBluetoothInit+0x4a>
 8018044:	79e9      	ldrb	r1, [r5, #7]
 8018046:	4628      	mov	r0, r5
 8018048:	f7ff ffc8 	bl	8017fdc <MoblePalBluetoothSetBluetoothAddress>
 801804c:	2801      	cmp	r0, #1
 801804e:	d812      	bhi.n	8018076 <MoblePalBluetoothInit+0x4a>
 8018050:	9b05      	ldr	r3, [sp, #20]
 8018052:	f8c4 3370 	str.w	r3, [r4, #880]	; 0x370
 8018056:	9b04      	ldr	r3, [sp, #16]
 8018058:	f8c4 3374 	str.w	r3, [r4, #884]	; 0x374
 801805c:	f894 3363 	ldrb.w	r3, [r4, #867]	; 0x363
 8018060:	f8c4 636c 	str.w	r6, [r4, #876]	; 0x36c
 8018064:	2b01      	cmp	r3, #1
 8018066:	bf01      	itttt	eq
 8018068:	f8d4 335c 	ldreq.w	r3, [r4, #860]	; 0x35c
 801806c:	602b      	streq	r3, [r5, #0]
 801806e:	f8b4 3360 	ldrheq.w	r3, [r4, #864]	; 0x360
 8018072:	80ab      	strheq	r3, [r5, #4]
 8018074:	2000      	movs	r0, #0
 8018076:	bd70      	pop	{r4, r5, r6, pc}
 8018078:	2000141c 	.word	0x2000141c

0801807c <MoblePalBluetoothRandom>:
 801807c:	b507      	push	{r0, r1, r2, lr}
 801807e:	4668      	mov	r0, sp
 8018080:	f7fd fc4c 	bl	801591c <hci_le_rand>
 8018084:	466a      	mov	r2, sp
 8018086:	2308      	movs	r3, #8
 8018088:	f812 0b01 	ldrb.w	r0, [r2], #1
 801808c:	b920      	cbnz	r0, 8018098 <MoblePalBluetoothRandom+0x1c>
 801808e:	3b01      	subs	r3, #1
 8018090:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8018094:	d1f8      	bne.n	8018088 <MoblePalBluetoothRandom+0xc>
 8018096:	e7f2      	b.n	801807e <MoblePalBluetoothRandom+0x2>
 8018098:	b003      	add	sp, #12
 801809a:	f85d fb04 	ldr.w	pc, [sp], #4

0801809e <MoblePBADVRandom>:
 801809e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80180a0:	2400      	movs	r4, #0
 80180a2:	ad01      	add	r5, sp, #4
 80180a4:	f7ff ffea 	bl	801807c <MoblePalBluetoothRandom>
 80180a8:	3401      	adds	r4, #1
 80180aa:	2c04      	cmp	r4, #4
 80180ac:	f805 0b01 	strb.w	r0, [r5], #1
 80180b0:	d1f8      	bne.n	80180a4 <MoblePBADVRandom+0x6>
 80180b2:	9801      	ldr	r0, [sp, #4]
 80180b4:	b003      	add	sp, #12
 80180b6:	bd30      	pop	{r4, r5, pc}

080180b8 <MoblePBADVGetNewLink>:
 80180b8:	b570      	push	{r4, r5, r6, lr}
 80180ba:	7a04      	ldrb	r4, [r0, #8]
 80180bc:	4605      	mov	r5, r0
 80180be:	b11c      	cbz	r4, 80180c8 <MoblePBADVGetNewLink+0x10>
 80180c0:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
 80180c4:	bbc3      	cbnz	r3, 8018138 <MoblePBADVGetNewLink+0x80>
 80180c6:	2401      	movs	r4, #1
 80180c8:	f44f 76ba 	mov.w	r6, #372	; 0x174
 80180cc:	fb06 5304 	mla	r3, r6, r4, r5
 80180d0:	60dd      	str	r5, [r3, #12]
 80180d2:	f7ff ffe4 	bl	801809e <MoblePBADVRandom>
 80180d6:	2300      	movs	r3, #0
 80180d8:	fb06 5203 	mla	r2, r6, r3, r5
 80180dc:	7a11      	ldrb	r1, [r2, #8]
 80180de:	b131      	cbz	r1, 80180ee <MoblePBADVGetNewLink+0x36>
 80180e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80180e2:	4282      	cmp	r2, r0
 80180e4:	d103      	bne.n	80180ee <MoblePBADVGetNewLink+0x36>
 80180e6:	f7ff ffda 	bl	801809e <MoblePBADVRandom>
 80180ea:	f04f 33ff 	mov.w	r3, #4294967295
 80180ee:	3301      	adds	r3, #1
 80180f0:	2b02      	cmp	r3, #2
 80180f2:	d1f1      	bne.n	80180d8 <MoblePBADVGetNewLink+0x20>
 80180f4:	f44f 73ba 	mov.w	r3, #372	; 0x174
 80180f8:	435c      	muls	r4, r3
 80180fa:	192b      	adds	r3, r5, r4
 80180fc:	f104 0608 	add.w	r6, r4, #8
 8018100:	2100      	movs	r1, #0
 8018102:	2201      	movs	r2, #1
 8018104:	442e      	add	r6, r5
 8018106:	f504 74b4 	add.w	r4, r4, #360	; 0x168
 801810a:	6258      	str	r0, [r3, #36]	; 0x24
 801810c:	721a      	strb	r2, [r3, #8]
 801810e:	e9c3 1155 	strd	r1, r1, [r3, #340]	; 0x154
 8018112:	e9c3 1157 	strd	r1, r1, [r3, #348]	; 0x15c
 8018116:	f883 1029 	strb.w	r1, [r3, #41]	; 0x29
 801811a:	f883 102c 	strb.w	r1, [r3, #44]	; 0x2c
 801811e:	631e      	str	r6, [r3, #48]	; 0x30
 8018120:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
 8018124:	f8c3 10c4 	str.w	r1, [r3, #196]	; 0xc4
 8018128:	f883 1164 	strb.w	r1, [r3, #356]	; 0x164
 801812c:	2210      	movs	r2, #16
 801812e:	1928      	adds	r0, r5, r4
 8018130:	f011 fbc0 	bl	80298b4 <memset>
 8018134:	4630      	mov	r0, r6
 8018136:	bd70      	pop	{r4, r5, r6, pc}
 8018138:	2600      	movs	r6, #0
 801813a:	e7fb      	b.n	8018134 <MoblePBADVGetNewLink+0x7c>

0801813c <MoblePalBluetoothPrvnCmpltReset>:
 801813c:	b538      	push	{r3, r4, r5, lr}
 801813e:	4c13      	ldr	r4, [pc, #76]	; (801818c <MoblePalBluetoothPrvnCmpltReset+0x50>)
 8018140:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 8018144:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 8018148:	d014      	beq.n	8018174 <MoblePalBluetoothPrvnCmpltReset+0x38>
 801814a:	f8d4 2350 	ldr.w	r2, [r4, #848]	; 0x350
 801814e:	4b10      	ldr	r3, [pc, #64]	; (8018190 <MoblePalBluetoothPrvnCmpltReset+0x54>)
 8018150:	2501      	movs	r5, #1
 8018152:	429a      	cmp	r2, r3
 8018154:	f884 5378 	strb.w	r5, [r4, #888]	; 0x378
 8018158:	d80d      	bhi.n	8018176 <MoblePalBluetoothPrvnCmpltReset+0x3a>
 801815a:	f7ef fe83 	bl	8007e64 <HAL_GetTick>
 801815e:	f8d4 3350 	ldr.w	r3, [r4, #848]	; 0x350
 8018162:	220a      	movs	r2, #10
 8018164:	fbb3 f3f2 	udiv	r3, r3, r2
 8018168:	4403      	add	r3, r0
 801816a:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 801816e:	4b09      	ldr	r3, [pc, #36]	; (8018194 <MoblePalBluetoothPrvnCmpltReset+0x58>)
 8018170:	2201      	movs	r2, #1
 8018172:	701a      	strb	r2, [r3, #0]
 8018174:	bd38      	pop	{r3, r4, r5, pc}
 8018176:	f7ef fe75 	bl	8007e64 <HAL_GetTick>
 801817a:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 801817e:	3008      	adds	r0, #8
 8018180:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 8018184:	f884 5380 	strb.w	r5, [r4, #896]	; 0x380
 8018188:	e7f1      	b.n	801816e <MoblePalBluetoothPrvnCmpltReset+0x32>
 801818a:	bf00      	nop
 801818c:	2000141c 	.word	0x2000141c
 8018190:	0001869f 	.word	0x0001869f
 8018194:	20004445 	.word	0x20004445

08018198 <MoblePalBluetoothProcessDisconnection>:
 8018198:	b510      	push	{r4, lr}
 801819a:	4c0a      	ldr	r4, [pc, #40]	; (80181c4 <MoblePalBluetoothProcessDisconnection+0x2c>)
 801819c:	f894 3380 	ldrb.w	r3, [r4, #896]	; 0x380
 80181a0:	2b01      	cmp	r3, #1
 80181a2:	d10d      	bne.n	80181c0 <MoblePalBluetoothProcessDisconnection+0x28>
 80181a4:	f7ef fe5e 	bl	8007e64 <HAL_GetTick>
 80181a8:	f8d4 337c 	ldr.w	r3, [r4, #892]	; 0x37c
 80181ac:	4283      	cmp	r3, r0
 80181ae:	d207      	bcs.n	80181c0 <MoblePalBluetoothProcessDisconnection+0x28>
 80181b0:	f8b4 0382 	ldrh.w	r0, [r4, #898]	; 0x382
 80181b4:	2116      	movs	r1, #22
 80181b6:	f7fc fa91 	bl	80146dc <aci_gap_terminate>
 80181ba:	2300      	movs	r3, #0
 80181bc:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
 80181c0:	bd10      	pop	{r4, pc}
 80181c2:	bf00      	nop
 80181c4:	2000141c 	.word	0x2000141c

080181c8 <MoblePalBluetoothNvmSave>:
 80181c8:	4b4e      	ldr	r3, [pc, #312]	; (8018304 <MoblePalBluetoothNvmSave+0x13c>)
 80181ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80181ce:	f8a3 1388 	strh.w	r1, [r3, #904]	; 0x388
 80181d2:	f8c3 0384 	str.w	r0, [r3, #900]	; 0x384
 80181d6:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 80181da:	4688      	mov	r8, r1
 80181dc:	0799      	lsls	r1, r3, #30
 80181de:	4606      	mov	r6, r0
 80181e0:	d145      	bne.n	801826e <MoblePalBluetoothNvmSave+0xa6>
 80181e2:	4b49      	ldr	r3, [pc, #292]	; (8018308 <MoblePalBluetoothNvmSave+0x140>)
 80181e4:	691d      	ldr	r5, [r3, #16]
 80181e6:	f415 2580 	ands.w	r5, r5, #262144	; 0x40000
 80181ea:	d140      	bne.n	801826e <MoblePalBluetoothNvmSave+0xa6>
 80181ec:	4f47      	ldr	r7, [pc, #284]	; (801830c <MoblePalBluetoothNvmSave+0x144>)
 80181ee:	783b      	ldrb	r3, [r7, #0]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d03c      	beq.n	801826e <MoblePalBluetoothNvmSave+0xa6>
 80181f4:	4c46      	ldr	r4, [pc, #280]	; (8018310 <MoblePalBluetoothNvmSave+0x148>)
 80181f6:	462b      	mov	r3, r5
 80181f8:	2208      	movs	r2, #8
 80181fa:	6820      	ldr	r0, [r4, #0]
 80181fc:	4669      	mov	r1, sp
 80181fe:	f7ef f89f 	bl	8007340 <PalNvmRead>
 8018202:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018206:	f1b3 3fff 	cmp.w	r3, #4294967295
 801820a:	bf08      	it	eq
 801820c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8018210:	d130      	bne.n	8018274 <MoblePalBluetoothNvmSave+0xac>
 8018212:	4b40      	ldr	r3, [pc, #256]	; (8018314 <MoblePalBluetoothNvmSave+0x14c>)
 8018214:	2201      	movs	r2, #1
 8018216:	701a      	strb	r2, [r3, #0]
 8018218:	783a      	ldrb	r2, [r7, #0]
 801821a:	f012 0302 	ands.w	r3, r2, #2
 801821e:	d068      	beq.n	80182f2 <MoblePalBluetoothNvmSave+0x12a>
 8018220:	4d3c      	ldr	r5, [pc, #240]	; (8018314 <MoblePalBluetoothNvmSave+0x14c>)
 8018222:	6820      	ldr	r0, [r4, #0]
 8018224:	782b      	ldrb	r3, [r5, #0]
 8018226:	4642      	mov	r2, r8
 8018228:	4631      	mov	r1, r6
 801822a:	b90b      	cbnz	r3, 8018230 <MoblePalBluetoothNvmSave+0x68>
 801822c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8018230:	f7ef f944 	bl	80074bc <PalNvmWrite>
 8018234:	2801      	cmp	r0, #1
 8018236:	d818      	bhi.n	801826a <MoblePalBluetoothNvmSave+0xa2>
 8018238:	782b      	ldrb	r3, [r5, #0]
 801823a:	6820      	ldr	r0, [r4, #0]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d13e      	bne.n	80182be <MoblePalBluetoothNvmSave+0xf6>
 8018240:	2208      	movs	r2, #8
 8018242:	4669      	mov	r1, sp
 8018244:	f7ef f87c 	bl	8007340 <PalNvmRead>
 8018248:	e9dd 2300 	ldrd	r2, r3, [sp]
 801824c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018250:	bf08      	it	eq
 8018252:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8018256:	d005      	beq.n	8018264 <MoblePalBluetoothNvmSave+0x9c>
 8018258:	6820      	ldr	r0, [r4, #0]
 801825a:	2101      	movs	r1, #1
 801825c:	f7ef f914 	bl	8007488 <PalNvmErase>
 8018260:	2801      	cmp	r0, #1
 8018262:	d802      	bhi.n	801826a <MoblePalBluetoothNvmSave+0xa2>
 8018264:	4b2b      	ldr	r3, [pc, #172]	; (8018314 <MoblePalBluetoothNvmSave+0x14c>)
 8018266:	2201      	movs	r2, #1
 8018268:	701a      	strb	r2, [r3, #0]
 801826a:	2300      	movs	r3, #0
 801826c:	703b      	strb	r3, [r7, #0]
 801826e:	b002      	add	sp, #8
 8018270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018274:	6820      	ldr	r0, [r4, #0]
 8018276:	462b      	mov	r3, r5
 8018278:	2208      	movs	r2, #8
 801827a:	4669      	mov	r1, sp
 801827c:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8018280:	f7ef f85e 	bl	8007340 <PalNvmRead>
 8018284:	e9dd 2300 	ldrd	r2, r3, [sp]
 8018288:	f1b3 3fff 	cmp.w	r3, #4294967295
 801828c:	bf08      	it	eq
 801828e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8018292:	d102      	bne.n	801829a <MoblePalBluetoothNvmSave+0xd2>
 8018294:	4b1f      	ldr	r3, [pc, #124]	; (8018314 <MoblePalBluetoothNvmSave+0x14c>)
 8018296:	701d      	strb	r5, [r3, #0]
 8018298:	e7be      	b.n	8018218 <MoblePalBluetoothNvmSave+0x50>
 801829a:	6820      	ldr	r0, [r4, #0]
 801829c:	2101      	movs	r1, #1
 801829e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80182a2:	f7ef f8f1 	bl	8007488 <PalNvmErase>
 80182a6:	2801      	cmp	r0, #1
 80182a8:	bf98      	it	ls
 80182aa:	4b1a      	ldrls	r3, [pc, #104]	; (8018314 <MoblePalBluetoothNvmSave+0x14c>)
 80182ac:	6820      	ldr	r0, [r4, #0]
 80182ae:	bf98      	it	ls
 80182b0:	701d      	strbls	r5, [r3, #0]
 80182b2:	2101      	movs	r1, #1
 80182b4:	f7ef f8e8 	bl	8007488 <PalNvmErase>
 80182b8:	2801      	cmp	r0, #1
 80182ba:	d8ad      	bhi.n	8018218 <MoblePalBluetoothNvmSave+0x50>
 80182bc:	e7a9      	b.n	8018212 <MoblePalBluetoothNvmSave+0x4a>
 80182be:	2300      	movs	r3, #0
 80182c0:	2208      	movs	r2, #8
 80182c2:	4669      	mov	r1, sp
 80182c4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80182c8:	f7ef f83a 	bl	8007340 <PalNvmRead>
 80182cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80182d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80182d4:	bf08      	it	eq
 80182d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80182da:	d007      	beq.n	80182ec <MoblePalBluetoothNvmSave+0x124>
 80182dc:	6820      	ldr	r0, [r4, #0]
 80182de:	2101      	movs	r1, #1
 80182e0:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 80182e4:	f7ef f8d0 	bl	8007488 <PalNvmErase>
 80182e8:	2801      	cmp	r0, #1
 80182ea:	d8be      	bhi.n	801826a <MoblePalBluetoothNvmSave+0xa2>
 80182ec:	4b09      	ldr	r3, [pc, #36]	; (8018314 <MoblePalBluetoothNvmSave+0x14c>)
 80182ee:	2200      	movs	r2, #0
 80182f0:	e7ba      	b.n	8018268 <MoblePalBluetoothNvmSave+0xa0>
 80182f2:	07d2      	lsls	r2, r2, #31
 80182f4:	d5b9      	bpl.n	801826a <MoblePalBluetoothNvmSave+0xa2>
 80182f6:	4a07      	ldr	r2, [pc, #28]	; (8018314 <MoblePalBluetoothNvmSave+0x14c>)
 80182f8:	6820      	ldr	r0, [r4, #0]
 80182fa:	7812      	ldrb	r2, [r2, #0]
 80182fc:	2a00      	cmp	r2, #0
 80182fe:	d1df      	bne.n	80182c0 <MoblePalBluetoothNvmSave+0xf8>
 8018300:	4613      	mov	r3, r2
 8018302:	e79d      	b.n	8018240 <MoblePalBluetoothNvmSave+0x78>
 8018304:	2000141c 	.word	0x2000141c
 8018308:	58004000 	.word	0x58004000
 801830c:	20004443 	.word	0x20004443
 8018310:	20004454 	.word	0x20004454
 8018314:	20004444 	.word	0x20004444

08018318 <MoblePalBluetoothModeStopAdv>:
 8018318:	b538      	push	{r3, r4, r5, lr}
 801831a:	4d0d      	ldr	r5, [pc, #52]	; (8018350 <MoblePalBluetoothModeStopAdv+0x38>)
 801831c:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018320:	07db      	lsls	r3, r3, #31
 8018322:	d511      	bpl.n	8018348 <MoblePalBluetoothModeStopAdv+0x30>
 8018324:	f7fc f80f 	bl	8014346 <aci_gap_set_non_discoverable>
 8018328:	4604      	mov	r4, r0
 801832a:	b978      	cbnz	r0, 801834c <MoblePalBluetoothModeStopAdv+0x34>
 801832c:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018330:	f8b5 1388 	ldrh.w	r1, [r5, #904]	; 0x388
 8018334:	f8d5 0384 	ldr.w	r0, [r5, #900]	; 0x384
 8018338:	f083 0301 	eor.w	r3, r3, #1
 801833c:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 8018340:	f7ff ff42 	bl	80181c8 <MoblePalBluetoothNvmSave>
 8018344:	4620      	mov	r0, r4
 8018346:	bd38      	pop	{r3, r4, r5, pc}
 8018348:	2401      	movs	r4, #1
 801834a:	e7fb      	b.n	8018344 <MoblePalBluetoothModeStopAdv+0x2c>
 801834c:	2402      	movs	r4, #2
 801834e:	e7f9      	b.n	8018344 <MoblePalBluetoothModeStopAdv+0x2c>
 8018350:	2000141c 	.word	0x2000141c

08018354 <MoblePalBluetoothModeStartAdv>:
 8018354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018358:	4680      	mov	r8, r0
 801835a:	b088      	sub	sp, #32
 801835c:	4616      	mov	r6, r2
 801835e:	461c      	mov	r4, r3
 8018360:	460f      	mov	r7, r1
 8018362:	b931      	cbnz	r1, 8018372 <MoblePalBluetoothModeStartAdv+0x1e>
 8018364:	4b31      	ldr	r3, [pc, #196]	; (801842c <MoblePalBluetoothModeStartAdv+0xd8>)
 8018366:	4a32      	ldr	r2, [pc, #200]	; (8018430 <MoblePalBluetoothModeStartAdv+0xdc>)
 8018368:	f240 61e9 	movw	r1, #1769	; 0x6e9
 801836c:	4831      	ldr	r0, [pc, #196]	; (8018434 <MoblePalBluetoothModeStartAdv+0xe0>)
 801836e:	f010 fbab 	bl	8028ac8 <__assert_func>
 8018372:	b922      	cbnz	r2, 801837e <MoblePalBluetoothModeStartAdv+0x2a>
 8018374:	4b30      	ldr	r3, [pc, #192]	; (8018438 <MoblePalBluetoothModeStartAdv+0xe4>)
 8018376:	4a2e      	ldr	r2, [pc, #184]	; (8018430 <MoblePalBluetoothModeStartAdv+0xdc>)
 8018378:	f240 61ea 	movw	r1, #1770	; 0x6ea
 801837c:	e7f6      	b.n	801836c <MoblePalBluetoothModeStartAdv+0x18>
 801837e:	4d2f      	ldr	r5, [pc, #188]	; (801843c <MoblePalBluetoothModeStartAdv+0xe8>)
 8018380:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018384:	079a      	lsls	r2, r3, #30
 8018386:	d504      	bpl.n	8018392 <MoblePalBluetoothModeStartAdv+0x3e>
 8018388:	2402      	movs	r4, #2
 801838a:	4620      	mov	r0, r4
 801838c:	b008      	add	sp, #32
 801838e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018392:	07db      	lsls	r3, r3, #31
 8018394:	d509      	bpl.n	80183aa <MoblePalBluetoothModeStartAdv+0x56>
 8018396:	f7fb ffd6 	bl	8014346 <aci_gap_set_non_discoverable>
 801839a:	2800      	cmp	r0, #0
 801839c:	d1f4      	bne.n	8018388 <MoblePalBluetoothModeStartAdv+0x34>
 801839e:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 80183a2:	f083 0301 	eor.w	r3, r3, #1
 80183a6:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 80183aa:	2e1f      	cmp	r6, #31
 80183ac:	d83c      	bhi.n	8018428 <MoblePalBluetoothModeStartAdv+0xd4>
 80183ae:	f1a4 020a 	sub.w	r2, r4, #10
 80183b2:	f242 73f6 	movw	r3, #10230	; 0x27f6
 80183b6:	429a      	cmp	r2, r3
 80183b8:	d836      	bhi.n	8018428 <MoblePalBluetoothModeStartAdv+0xd4>
 80183ba:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 80183be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80183c2:	f1b8 0f01 	cmp.w	r8, #1
 80183c6:	e9cd 1105 	strd	r1, r1, [sp, #20]
 80183ca:	f103 31ff 	add.w	r1, r3, #4294967295
 80183ce:	bf0c      	ite	eq
 80183d0:	2000      	moveq	r0, #0
 80183d2:	2003      	movne	r0, #3
 80183d4:	2205      	movs	r2, #5
 80183d6:	424b      	negs	r3, r1
 80183d8:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 80183dc:	fbb4 f4f2 	udiv	r4, r4, r2
 80183e0:	b2a2      	uxth	r2, r4
 80183e2:	f04f 0400 	mov.w	r4, #0
 80183e6:	414b      	adcs	r3, r1
 80183e8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80183ec:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80183f0:	9400      	str	r4, [sp, #0]
 80183f2:	4611      	mov	r1, r2
 80183f4:	f7fb ffcb 	bl	801438e <aci_gap_set_discoverable>
 80183f8:	2800      	cmp	r0, #0
 80183fa:	d1c5      	bne.n	8018388 <MoblePalBluetoothModeStartAdv+0x34>
 80183fc:	4639      	mov	r1, r7
 80183fe:	4630      	mov	r0, r6
 8018400:	f7fd f9ba 	bl	8015778 <hci_le_set_advertising_data>
 8018404:	4604      	mov	r4, r0
 8018406:	2800      	cmp	r0, #0
 8018408:	d1be      	bne.n	8018388 <MoblePalBluetoothModeStartAdv+0x34>
 801840a:	f895 0364 	ldrb.w	r0, [r5, #868]	; 0x364
 801840e:	f8d5 1368 	ldr.w	r1, [r5, #872]	; 0x368
 8018412:	3002      	adds	r0, #2
 8018414:	b2c0      	uxtb	r0, r0
 8018416:	f7fd fa18 	bl	801584a <hci_le_set_scan_response_data>
 801841a:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 801841e:	f043 0301 	orr.w	r3, r3, #1
 8018422:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 8018426:	e7b0      	b.n	801838a <MoblePalBluetoothModeStartAdv+0x36>
 8018428:	2403      	movs	r4, #3
 801842a:	e7ae      	b.n	801838a <MoblePalBluetoothModeStartAdv+0x36>
 801842c:	080333d8 	.word	0x080333d8
 8018430:	08031393 	.word	0x08031393
 8018434:	080333dd 	.word	0x080333dd
 8018438:	08033424 	.word	0x08033424
 801843c:	2000141c 	.word	0x2000141c

08018440 <MoblePalBluetoothModeStopScan>:
 8018440:	b538      	push	{r3, r4, r5, lr}
 8018442:	4d0d      	ldr	r5, [pc, #52]	; (8018478 <MoblePalBluetoothModeStopScan+0x38>)
 8018444:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018448:	079b      	lsls	r3, r3, #30
 801844a:	d402      	bmi.n	8018452 <MoblePalBluetoothModeStopScan+0x12>
 801844c:	2401      	movs	r4, #1
 801844e:	4620      	mov	r0, r4
 8018450:	bd38      	pop	{r3, r4, r5, pc}
 8018452:	2080      	movs	r0, #128	; 0x80
 8018454:	f7fc f9ac 	bl	80147b0 <aci_gap_terminate_gap_proc>
 8018458:	4604      	mov	r4, r0
 801845a:	2800      	cmp	r0, #0
 801845c:	d1f6      	bne.n	801844c <MoblePalBluetoothModeStopScan+0xc>
 801845e:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 8018462:	f8b5 1388 	ldrh.w	r1, [r5, #904]	; 0x388
 8018466:	f8d5 0384 	ldr.w	r0, [r5, #900]	; 0x384
 801846a:	f083 0302 	eor.w	r3, r3, #2
 801846e:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 8018472:	f7ff fea9 	bl	80181c8 <MoblePalBluetoothNvmSave>
 8018476:	e7ea      	b.n	801844e <MoblePalBluetoothModeStopScan+0xe>
 8018478:	2000141c 	.word	0x2000141c

0801847c <MoblePalBluetoothModeStartScan>:
 801847c:	f1a1 020a 	sub.w	r2, r1, #10
 8018480:	f242 73f6 	movw	r3, #10230	; 0x27f6
 8018484:	429a      	cmp	r2, r3
 8018486:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018488:	d822      	bhi.n	80184d0 <MoblePalBluetoothModeStartScan+0x54>
 801848a:	4281      	cmp	r1, r0
 801848c:	d320      	bcc.n	80184d0 <MoblePalBluetoothModeStartScan+0x54>
 801848e:	4d13      	ldr	r5, [pc, #76]	; (80184dc <MoblePalBluetoothModeStartScan+0x60>)
 8018490:	f8d5 2354 	ldr.w	r2, [r5, #852]	; 0x354
 8018494:	f012 0202 	ands.w	r2, r2, #2
 8018498:	d11c      	bne.n	80184d4 <MoblePalBluetoothModeStartScan+0x58>
 801849a:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 801849e:	00c0      	lsls	r0, r0, #3
 80184a0:	2605      	movs	r6, #5
 80184a2:	fbb0 f4f6 	udiv	r4, r0, r6
 80184a6:	00c8      	lsls	r0, r1, #3
 80184a8:	1e59      	subs	r1, r3, #1
 80184aa:	424b      	negs	r3, r1
 80184ac:	414b      	adcs	r3, r1
 80184ae:	fbb0 f0f6 	udiv	r0, r0, r6
 80184b2:	e9cd 2200 	strd	r2, r2, [sp]
 80184b6:	b2a1      	uxth	r1, r4
 80184b8:	b280      	uxth	r0, r0
 80184ba:	f7fc f9cd 	bl	8014858 <aci_gap_start_observation_proc>
 80184be:	b958      	cbnz	r0, 80184d8 <MoblePalBluetoothModeStartScan+0x5c>
 80184c0:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 80184c4:	f043 0302 	orr.w	r3, r3, #2
 80184c8:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 80184cc:	b002      	add	sp, #8
 80184ce:	bd70      	pop	{r4, r5, r6, pc}
 80184d0:	2003      	movs	r0, #3
 80184d2:	e7fb      	b.n	80184cc <MoblePalBluetoothModeStartScan+0x50>
 80184d4:	2001      	movs	r0, #1
 80184d6:	e7f9      	b.n	80184cc <MoblePalBluetoothModeStartScan+0x50>
 80184d8:	2002      	movs	r0, #2
 80184da:	e7f7      	b.n	80184cc <MoblePalBluetoothModeStartScan+0x50>
 80184dc:	2000141c 	.word	0x2000141c

080184e0 <BPKA_ReadP256Key>:
 80184e0:	4601      	mov	r1, r0
 80184e2:	480b      	ldr	r0, [pc, #44]	; (8018510 <BPKA_ReadP256Key+0x30>)
 80184e4:	b538      	push	{r3, r4, r5, lr}
 80184e6:	f7ff fa8b 	bl	8017a00 <BPKA_Reverse>
 80184ea:	3020      	adds	r0, #32
 80184ec:	f7ff fa88 	bl	8017a00 <BPKA_Reverse>
 80184f0:	f1a0 0420 	sub.w	r4, r0, #32
 80184f4:	460b      	mov	r3, r1
 80184f6:	f100 0520 	add.w	r5, r0, #32
 80184fa:	4622      	mov	r2, r4
 80184fc:	ca03      	ldmia	r2!, {r0, r1}
 80184fe:	42aa      	cmp	r2, r5
 8018500:	6018      	str	r0, [r3, #0]
 8018502:	6059      	str	r1, [r3, #4]
 8018504:	4614      	mov	r4, r2
 8018506:	f103 0308 	add.w	r3, r3, #8
 801850a:	d1f6      	bne.n	80184fa <BPKA_ReadP256Key+0x1a>
 801850c:	bd38      	pop	{r3, r4, r5, pc}
 801850e:	bf00      	nop
 8018510:	200017a8 	.word	0x200017a8

08018514 <BPKA_ReadDhKey>:
 8018514:	b538      	push	{r3, r4, r5, lr}
 8018516:	4c0f      	ldr	r4, [pc, #60]	; (8018554 <BPKA_ReadDhKey+0x40>)
 8018518:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 801851c:	4601      	mov	r1, r0
 801851e:	b133      	cbz	r3, 801852e <BPKA_ReadDhKey+0x1a>
 8018520:	2220      	movs	r2, #32
 8018522:	21ff      	movs	r1, #255	; 0xff
 8018524:	f011 f9c6 	bl	80298b4 <memset>
 8018528:	f06f 0002 	mvn.w	r0, #2
 801852c:	bd38      	pop	{r3, r4, r5, pc}
 801852e:	f504 7063 	add.w	r0, r4, #908	; 0x38c
 8018532:	f7ff fa65 	bl	8017a00 <BPKA_Reverse>
 8018536:	4605      	mov	r5, r0
 8018538:	460b      	mov	r3, r1
 801853a:	f504 746b 	add.w	r4, r4, #940	; 0x3ac
 801853e:	462a      	mov	r2, r5
 8018540:	ca03      	ldmia	r2!, {r0, r1}
 8018542:	42a2      	cmp	r2, r4
 8018544:	6018      	str	r0, [r3, #0]
 8018546:	6059      	str	r1, [r3, #4]
 8018548:	4615      	mov	r5, r2
 801854a:	f103 0308 	add.w	r3, r3, #8
 801854e:	d1f6      	bne.n	801853e <BPKA_ReadDhKey+0x2a>
 8018550:	2000      	movs	r0, #0
 8018552:	e7eb      	b.n	801852c <BPKA_ReadDhKey+0x18>
 8018554:	2000141c 	.word	0x2000141c

08018558 <HW_AES_Enable>:
 8018558:	4b0d      	ldr	r3, [pc, #52]	; (8018590 <HW_AES_Enable+0x38>)
 801855a:	f893 23ed 	ldrb.w	r2, [r3, #1005]	; 0x3ed
 801855e:	b082      	sub	sp, #8
 8018560:	b9a2      	cbnz	r2, 801858c <HW_AES_Enable+0x34>
 8018562:	2001      	movs	r0, #1
 8018564:	f883 03ed 	strb.w	r0, [r3, #1005]	; 0x3ed
 8018568:	f3ef 8110 	mrs	r1, PRIMASK
 801856c:	b672      	cpsid	i
 801856e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018572:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018574:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018578:	64da      	str	r2, [r3, #76]	; 0x4c
 801857a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801857c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018580:	9301      	str	r3, [sp, #4]
 8018582:	9b01      	ldr	r3, [sp, #4]
 8018584:	f381 8810 	msr	PRIMASK, r1
 8018588:	b002      	add	sp, #8
 801858a:	4770      	bx	lr
 801858c:	2000      	movs	r0, #0
 801858e:	e7fb      	b.n	8018588 <HW_AES_Enable+0x30>
 8018590:	2000141c 	.word	0x2000141c

08018594 <HW_AES_Disable>:
 8018594:	b510      	push	{r4, lr}
 8018596:	4a0a      	ldr	r2, [pc, #40]	; (80185c0 <HW_AES_Disable+0x2c>)
 8018598:	f892 33ed 	ldrb.w	r3, [r2, #1005]	; 0x3ed
 801859c:	b17b      	cbz	r3, 80185be <HW_AES_Disable+0x2a>
 801859e:	4b09      	ldr	r3, [pc, #36]	; (80185c4 <HW_AES_Disable+0x30>)
 80185a0:	2100      	movs	r1, #0
 80185a2:	6019      	str	r1, [r3, #0]
 80185a4:	f3ef 8410 	mrs	r4, PRIMASK
 80185a8:	b672      	cpsid	i
 80185aa:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 80185ae:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80185b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80185b4:	64c3      	str	r3, [r0, #76]	; 0x4c
 80185b6:	f384 8810 	msr	PRIMASK, r4
 80185ba:	f882 13ed 	strb.w	r1, [r2, #1005]	; 0x3ed
 80185be:	bd10      	pop	{r4, pc}
 80185c0:	2000141c 	.word	0x2000141c
 80185c4:	50060000 	.word	0x50060000

080185c8 <HW_AES_SetKey>:
 80185c8:	b530      	push	{r4, r5, lr}
 80185ca:	4b0f      	ldr	r3, [pc, #60]	; (8018608 <HW_AES_SetKey+0x40>)
 80185cc:	b085      	sub	sp, #20
 80185ce:	2200      	movs	r2, #0
 80185d0:	601a      	str	r2, [r3, #0]
 80185d2:	466c      	mov	r4, sp
 80185d4:	4603      	mov	r3, r0
 80185d6:	f100 0510 	add.w	r5, r0, #16
 80185da:	6818      	ldr	r0, [r3, #0]
 80185dc:	6859      	ldr	r1, [r3, #4]
 80185de:	4622      	mov	r2, r4
 80185e0:	c203      	stmia	r2!, {r0, r1}
 80185e2:	3308      	adds	r3, #8
 80185e4:	42ab      	cmp	r3, r5
 80185e6:	4614      	mov	r4, r2
 80185e8:	d1f7      	bne.n	80185da <HW_AES_SetKey+0x12>
 80185ea:	9b00      	ldr	r3, [sp, #0]
 80185ec:	ba1a      	rev	r2, r3
 80185ee:	4b06      	ldr	r3, [pc, #24]	; (8018608 <HW_AES_SetKey+0x40>)
 80185f0:	61da      	str	r2, [r3, #28]
 80185f2:	9a01      	ldr	r2, [sp, #4]
 80185f4:	ba12      	rev	r2, r2
 80185f6:	619a      	str	r2, [r3, #24]
 80185f8:	9a02      	ldr	r2, [sp, #8]
 80185fa:	ba12      	rev	r2, r2
 80185fc:	615a      	str	r2, [r3, #20]
 80185fe:	9a03      	ldr	r2, [sp, #12]
 8018600:	ba12      	rev	r2, r2
 8018602:	611a      	str	r2, [r3, #16]
 8018604:	b005      	add	sp, #20
 8018606:	bd30      	pop	{r4, r5, pc}
 8018608:	50060000 	.word	0x50060000

0801860c <HW_AES_Crypt>:
 801860c:	b508      	push	{r3, lr}
 801860e:	f7ff f917 	bl	8017840 <HW_AES_Input>
 8018612:	f7ff f909 	bl	8017828 <HW_AES_WaitComplete>
 8018616:	4b05      	ldr	r3, [pc, #20]	; (801862c <HW_AES_Crypt+0x20>)
 8018618:	68da      	ldr	r2, [r3, #12]
 801861a:	600a      	str	r2, [r1, #0]
 801861c:	68da      	ldr	r2, [r3, #12]
 801861e:	604a      	str	r2, [r1, #4]
 8018620:	68da      	ldr	r2, [r3, #12]
 8018622:	608a      	str	r2, [r1, #8]
 8018624:	68db      	ldr	r3, [r3, #12]
 8018626:	60cb      	str	r3, [r1, #12]
 8018628:	bd08      	pop	{r3, pc}
 801862a:	bf00      	nop
 801862c:	50060000 	.word	0x50060000

08018630 <BAES_CmacCompute>:
 8018630:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018634:	460d      	mov	r5, r1
 8018636:	b089      	sub	sp, #36	; 0x24
 8018638:	4614      	mov	r4, r2
 801863a:	461e      	mov	r6, r3
 801863c:	4607      	mov	r7, r0
 801863e:	b168      	cbz	r0, 801865c <BAES_CmacCompute+0x2c>
 8018640:	f7ff ff8a 	bl	8018558 <HW_AES_Enable>
 8018644:	4638      	mov	r0, r7
 8018646:	f7ff ffbf 	bl	80185c8 <HW_AES_SetKey>
 801864a:	4b5d      	ldr	r3, [pc, #372]	; (80187c0 <BAES_CmacCompute+0x190>)
 801864c:	2201      	movs	r2, #1
 801864e:	601a      	str	r2, [r3, #0]
 8018650:	4b5c      	ldr	r3, [pc, #368]	; (80187c4 <BAES_CmacCompute+0x194>)
 8018652:	2200      	movs	r2, #0
 8018654:	e9c3 22fe 	strd	r2, r2, [r3, #1016]	; 0x3f8
 8018658:	e9c3 22fc 	strd	r2, r2, [r3, #1008]	; 0x3f0
 801865c:	2e00      	cmp	r6, #0
 801865e:	f000 809a 	beq.w	8018796 <BAES_CmacCompute+0x166>
 8018662:	f004 070f 	and.w	r7, r4, #15
 8018666:	b114      	cbz	r4, 801866e <BAES_CmacCompute+0x3e>
 8018668:	2f00      	cmp	r7, #0
 801866a:	bf08      	it	eq
 801866c:	2710      	moveq	r7, #16
 801866e:	1be4      	subs	r4, r4, r7
 8018670:	f8df 8150 	ldr.w	r8, [pc, #336]	; 80187c4 <BAES_CmacCompute+0x194>
 8018674:	442c      	add	r4, r5
 8018676:	f508 797c 	add.w	r9, r8, #1008	; 0x3f0
 801867a:	e026      	b.n	80186ca <BAES_CmacCompute+0x9a>
 801867c:	466a      	mov	r2, sp
 801867e:	f105 0c10 	add.w	ip, r5, #16
 8018682:	6828      	ldr	r0, [r5, #0]
 8018684:	6869      	ldr	r1, [r5, #4]
 8018686:	4613      	mov	r3, r2
 8018688:	c303      	stmia	r3!, {r0, r1}
 801868a:	3508      	adds	r5, #8
 801868c:	4565      	cmp	r5, ip
 801868e:	461a      	mov	r2, r3
 8018690:	d1f7      	bne.n	8018682 <BAES_CmacCompute+0x52>
 8018692:	9b00      	ldr	r3, [sp, #0]
 8018694:	ba1a      	rev	r2, r3
 8018696:	f8d8 33f0 	ldr.w	r3, [r8, #1008]	; 0x3f0
 801869a:	4053      	eors	r3, r2
 801869c:	9300      	str	r3, [sp, #0]
 801869e:	9b01      	ldr	r3, [sp, #4]
 80186a0:	ba1a      	rev	r2, r3
 80186a2:	f8d8 33f4 	ldr.w	r3, [r8, #1012]	; 0x3f4
 80186a6:	4053      	eors	r3, r2
 80186a8:	9301      	str	r3, [sp, #4]
 80186aa:	9b02      	ldr	r3, [sp, #8]
 80186ac:	ba1a      	rev	r2, r3
 80186ae:	f8d8 33f8 	ldr.w	r3, [r8, #1016]	; 0x3f8
 80186b2:	4053      	eors	r3, r2
 80186b4:	9302      	str	r3, [sp, #8]
 80186b6:	9b03      	ldr	r3, [sp, #12]
 80186b8:	ba1a      	rev	r2, r3
 80186ba:	f8d8 33fc 	ldr.w	r3, [r8, #1020]	; 0x3fc
 80186be:	4649      	mov	r1, r9
 80186c0:	4053      	eors	r3, r2
 80186c2:	4668      	mov	r0, sp
 80186c4:	9303      	str	r3, [sp, #12]
 80186c6:	f7ff ffa1 	bl	801860c <HW_AES_Crypt>
 80186ca:	42a5      	cmp	r5, r4
 80186cc:	d1d6      	bne.n	801867c <BAES_CmacCompute+0x4c>
 80186ce:	2e00      	cmp	r6, #0
 80186d0:	d05e      	beq.n	8018790 <BAES_CmacCompute+0x160>
 80186d2:	2400      	movs	r4, #0
 80186d4:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80186d8:	e9cd 4400 	strd	r4, r4, [sp]
 80186dc:	42bc      	cmp	r4, r7
 80186de:	d15c      	bne.n	801879a <BAES_CmacCompute+0x16a>
 80186e0:	ad04      	add	r5, sp, #16
 80186e2:	2300      	movs	r3, #0
 80186e4:	4629      	mov	r1, r5
 80186e6:	4628      	mov	r0, r5
 80186e8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80186ec:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80186f0:	f7ff ff8c 	bl	801860c <HW_AES_Crypt>
 80186f4:	f7ff f87f 	bl	80177f6 <BAES_CmacKeyRoll>
 80186f8:	2c10      	cmp	r4, #16
 80186fa:	d013      	beq.n	8018724 <BAES_CmacCompute+0xf4>
 80186fc:	f024 0203 	bic.w	r2, r4, #3
 8018700:	f102 0320 	add.w	r3, r2, #32
 8018704:	43e4      	mvns	r4, r4
 8018706:	eb0d 0203 	add.w	r2, sp, r3
 801870a:	f004 0403 	and.w	r4, r4, #3
 801870e:	2380      	movs	r3, #128	; 0x80
 8018710:	00e4      	lsls	r4, r4, #3
 8018712:	fa03 f404 	lsl.w	r4, r3, r4
 8018716:	f852 3c20 	ldr.w	r3, [r2, #-32]
 801871a:	431c      	orrs	r4, r3
 801871c:	f842 4c20 	str.w	r4, [r2, #-32]
 8018720:	f7ff f869 	bl	80177f6 <BAES_CmacKeyRoll>
 8018724:	466a      	mov	r2, sp
 8018726:	4f28      	ldr	r7, [pc, #160]	; (80187c8 <BAES_CmacCompute+0x198>)
 8018728:	4628      	mov	r0, r5
 801872a:	f04f 0e04 	mov.w	lr, #4
 801872e:	4614      	mov	r4, r2
 8018730:	6811      	ldr	r1, [r2, #0]
 8018732:	f857 3b04 	ldr.w	r3, [r7], #4
 8018736:	f850 cb04 	ldr.w	ip, [r0], #4
 801873a:	404b      	eors	r3, r1
 801873c:	ea83 030c 	eor.w	r3, r3, ip
 8018740:	f1be 0e01 	subs.w	lr, lr, #1
 8018744:	f842 3b04 	str.w	r3, [r2], #4
 8018748:	d1f2      	bne.n	8018730 <BAES_CmacCompute+0x100>
 801874a:	4f1e      	ldr	r7, [pc, #120]	; (80187c4 <BAES_CmacCompute+0x194>)
 801874c:	4620      	mov	r0, r4
 801874e:	f507 717c 	add.w	r1, r7, #1008	; 0x3f0
 8018752:	f7ff ff5b 	bl	801860c <HW_AES_Crypt>
 8018756:	f7ff ff1d 	bl	8018594 <HW_AES_Disable>
 801875a:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 801875e:	ba1b      	rev	r3, r3
 8018760:	9300      	str	r3, [sp, #0]
 8018762:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8018766:	ba1b      	rev	r3, r3
 8018768:	9301      	str	r3, [sp, #4]
 801876a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	; 0x3f8
 801876e:	ba1b      	rev	r3, r3
 8018770:	9302      	str	r3, [sp, #8]
 8018772:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8018776:	ba1b      	rev	r3, r3
 8018778:	9303      	str	r3, [sp, #12]
 801877a:	4622      	mov	r2, r4
 801877c:	4633      	mov	r3, r6
 801877e:	4614      	mov	r4, r2
 8018780:	cc03      	ldmia	r4!, {r0, r1}
 8018782:	42ac      	cmp	r4, r5
 8018784:	6018      	str	r0, [r3, #0]
 8018786:	6059      	str	r1, [r3, #4]
 8018788:	4622      	mov	r2, r4
 801878a:	f103 0308 	add.w	r3, r3, #8
 801878e:	d1f6      	bne.n	801877e <BAES_CmacCompute+0x14e>
 8018790:	b009      	add	sp, #36	; 0x24
 8018792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018796:	4637      	mov	r7, r6
 8018798:	e76a      	b.n	8018670 <BAES_CmacCompute+0x40>
 801879a:	f024 0103 	bic.w	r1, r4, #3
 801879e:	f101 0320 	add.w	r3, r1, #32
 80187a2:	43e2      	mvns	r2, r4
 80187a4:	eb0d 0103 	add.w	r1, sp, r3
 80187a8:	f002 0203 	and.w	r2, r2, #3
 80187ac:	5d2b      	ldrb	r3, [r5, r4]
 80187ae:	00d2      	lsls	r2, r2, #3
 80187b0:	4093      	lsls	r3, r2
 80187b2:	f851 2c20 	ldr.w	r2, [r1, #-32]
 80187b6:	4313      	orrs	r3, r2
 80187b8:	f841 3c20 	str.w	r3, [r1, #-32]
 80187bc:	3401      	adds	r4, #1
 80187be:	e78d      	b.n	80186dc <BAES_CmacCompute+0xac>
 80187c0:	50060000 	.word	0x50060000
 80187c4:	2000141c 	.word	0x2000141c
 80187c8:	2000180c 	.word	0x2000180c

080187cc <MoblePalCryptoK1.part.0>:
 80187cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187ce:	4616      	mov	r6, r2
 80187d0:	b089      	sub	sp, #36	; 0x24
 80187d2:	2210      	movs	r2, #16
 80187d4:	461f      	mov	r7, r3
 80187d6:	4604      	mov	r4, r0
 80187d8:	460d      	mov	r5, r1
 80187da:	eb0d 0002 	add.w	r0, sp, r2
 80187de:	2100      	movs	r1, #0
 80187e0:	f011 f868 	bl	80298b4 <memset>
 80187e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80187e6:	4639      	mov	r1, r7
 80187e8:	a804      	add	r0, sp, #16
 80187ea:	f011 f8f4 	bl	80299d6 <memcpy>
 80187ee:	466b      	mov	r3, sp
 80187f0:	4632      	mov	r2, r6
 80187f2:	4629      	mov	r1, r5
 80187f4:	a804      	add	r0, sp, #16
 80187f6:	f7ff ff1b 	bl	8018630 <BAES_CmacCompute>
 80187fa:	4668      	mov	r0, sp
 80187fc:	e9dd 120f 	ldrd	r1, r2, [sp, #60]	; 0x3c
 8018800:	4623      	mov	r3, r4
 8018802:	f7ff ff15 	bl	8018630 <BAES_CmacCompute>
 8018806:	2000      	movs	r0, #0
 8018808:	b009      	add	sp, #36	; 0x24
 801880a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801880c <BAES_EcbEncrypt>:
 801880c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801880e:	4606      	mov	r6, r0
 8018810:	460c      	mov	r4, r1
 8018812:	4615      	mov	r5, r2
 8018814:	f7ff fea0 	bl	8018558 <HW_AES_Enable>
 8018818:	4630      	mov	r0, r6
 801881a:	f7ff fed5 	bl	80185c8 <HW_AES_SetKey>
 801881e:	4b11      	ldr	r3, [pc, #68]	; (8018864 <BAES_EcbEncrypt+0x58>)
 8018820:	2205      	movs	r2, #5
 8018822:	601a      	str	r2, [r3, #0]
 8018824:	4623      	mov	r3, r4
 8018826:	f103 0610 	add.w	r6, r3, #16
 801882a:	466c      	mov	r4, sp
 801882c:	6818      	ldr	r0, [r3, #0]
 801882e:	6859      	ldr	r1, [r3, #4]
 8018830:	4622      	mov	r2, r4
 8018832:	c203      	stmia	r2!, {r0, r1}
 8018834:	3308      	adds	r3, #8
 8018836:	42b3      	cmp	r3, r6
 8018838:	4614      	mov	r4, r2
 801883a:	d1f7      	bne.n	801882c <BAES_EcbEncrypt+0x20>
 801883c:	4669      	mov	r1, sp
 801883e:	4668      	mov	r0, sp
 8018840:	f7ff fee4 	bl	801860c <HW_AES_Crypt>
 8018844:	f7ff fea6 	bl	8018594 <HW_AES_Disable>
 8018848:	462a      	mov	r2, r5
 801884a:	466b      	mov	r3, sp
 801884c:	ad04      	add	r5, sp, #16
 801884e:	461c      	mov	r4, r3
 8018850:	cc03      	ldmia	r4!, {r0, r1}
 8018852:	42ac      	cmp	r4, r5
 8018854:	6010      	str	r0, [r2, #0]
 8018856:	6051      	str	r1, [r2, #4]
 8018858:	4623      	mov	r3, r4
 801885a:	f102 0208 	add.w	r2, r2, #8
 801885e:	d1f6      	bne.n	801884e <BAES_EcbEncrypt+0x42>
 8018860:	b004      	add	sp, #16
 8018862:	bd70      	pop	{r4, r5, r6, pc}
 8018864:	50060000 	.word	0x50060000

08018868 <HW_AES_CcmStart>:
 8018868:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801886c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 801886e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8018870:	3e02      	subs	r6, #2
 8018872:	1e1c      	subs	r4, r3, #0
 8018874:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8018878:	f1c1 030e 	rsb	r3, r1, #14
 801887c:	4615      	mov	r5, r2
 801887e:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8018882:	bf14      	ite	ne
 8018884:	2240      	movne	r2, #64	; 0x40
 8018886:	2200      	moveq	r2, #0
 8018888:	4313      	orrs	r3, r2
 801888a:	f1c1 080f 	rsb	r8, r1, #15
 801888e:	460a      	mov	r2, r1
 8018890:	4601      	mov	r1, r0
 8018892:	f10d 0001 	add.w	r0, sp, #1
 8018896:	f88d 3000 	strb.w	r3, [sp]
 801889a:	f011 f89c 	bl	80299d6 <memcpy>
 801889e:	aa04      	add	r2, sp, #16
 80188a0:	2300      	movs	r3, #0
 80188a2:	4543      	cmp	r3, r8
 80188a4:	d154      	bne.n	8018950 <HW_AES_CcmStart+0xe8>
 80188a6:	9b00      	ldr	r3, [sp, #0]
 80188a8:	4835      	ldr	r0, [pc, #212]	; (8018980 <HW_AES_CcmStart+0x118>)
 80188aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80188ac:	4935      	ldr	r1, [pc, #212]	; (8018984 <HW_AES_CcmStart+0x11c>)
 80188ae:	ba1b      	rev	r3, r3
 80188b0:	62c3      	str	r3, [r0, #44]	; 0x2c
 80188b2:	9b01      	ldr	r3, [sp, #4]
 80188b4:	ba1b      	rev	r3, r3
 80188b6:	6283      	str	r3, [r0, #40]	; 0x28
 80188b8:	9b02      	ldr	r3, [sp, #8]
 80188ba:	ba1b      	rev	r3, r3
 80188bc:	6243      	str	r3, [r0, #36]	; 0x24
 80188be:	9b03      	ldr	r3, [sp, #12]
 80188c0:	ba1b      	rev	r3, r3
 80188c2:	6203      	str	r3, [r0, #32]
 80188c4:	4b30      	ldr	r3, [pc, #192]	; (8018988 <HW_AES_CcmStart+0x120>)
 80188c6:	2a00      	cmp	r2, #0
 80188c8:	bf08      	it	eq
 80188ca:	4619      	moveq	r1, r3
 80188cc:	6001      	str	r1, [r0, #0]
 80188ce:	f7fe ffab 	bl	8017828 <HW_AES_WaitComplete>
 80188d2:	b3d4      	cbz	r4, 801894a <HW_AES_CcmStart+0xe2>
 80188d4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 80188d8:	6001      	str	r1, [r0, #0]
 80188da:	2210      	movs	r2, #16
 80188dc:	2100      	movs	r1, #0
 80188de:	4668      	mov	r0, sp
 80188e0:	f010 ffe8 	bl	80298b4 <memset>
 80188e4:	2c0e      	cmp	r4, #14
 80188e6:	4626      	mov	r6, r4
 80188e8:	bf28      	it	cs
 80188ea:	260e      	movcs	r6, #14
 80188ec:	ba63      	rev16	r3, r4
 80188ee:	4632      	mov	r2, r6
 80188f0:	4629      	mov	r1, r5
 80188f2:	f10d 0002 	add.w	r0, sp, #2
 80188f6:	f8ad 3000 	strh.w	r3, [sp]
 80188fa:	f011 f86c 	bl	80299d6 <memcpy>
 80188fe:	4668      	mov	r0, sp
 8018900:	f7fe ff9e 	bl	8017840 <HW_AES_Input>
 8018904:	f7fe ff90 	bl	8017828 <HW_AES_WaitComplete>
 8018908:	4435      	add	r5, r6
 801890a:	1ba4      	subs	r4, r4, r6
 801890c:	4626      	mov	r6, r4
 801890e:	eb05 0804 	add.w	r8, r5, r4
 8018912:	2e0f      	cmp	r6, #15
 8018914:	eba8 0306 	sub.w	r3, r8, r6
 8018918:	d81f      	bhi.n	801895a <HW_AES_CcmStart+0xf2>
 801891a:	f024 030f 	bic.w	r3, r4, #15
 801891e:	0922      	lsrs	r2, r4, #4
 8018920:	441d      	add	r5, r3
 8018922:	f06f 030f 	mvn.w	r3, #15
 8018926:	fb03 4402 	mla	r4, r3, r2, r4
 801892a:	b174      	cbz	r4, 801894a <HW_AES_CcmStart+0xe2>
 801892c:	2210      	movs	r2, #16
 801892e:	2100      	movs	r1, #0
 8018930:	4668      	mov	r0, sp
 8018932:	f010 ffbf 	bl	80298b4 <memset>
 8018936:	4622      	mov	r2, r4
 8018938:	4629      	mov	r1, r5
 801893a:	4668      	mov	r0, sp
 801893c:	f011 f84b 	bl	80299d6 <memcpy>
 8018940:	4668      	mov	r0, sp
 8018942:	f7fe ff7d 	bl	8017840 <HW_AES_Input>
 8018946:	f7fe ff6f 	bl	8017828 <HW_AES_WaitComplete>
 801894a:	b004      	add	sp, #16
 801894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018950:	f802 7d01 	strb.w	r7, [r2, #-1]!
 8018954:	3301      	adds	r3, #1
 8018956:	0a3f      	lsrs	r7, r7, #8
 8018958:	e7a3      	b.n	80188a2 <HW_AES_CcmStart+0x3a>
 801895a:	46ec      	mov	ip, sp
 801895c:	f103 0210 	add.w	r2, r3, #16
 8018960:	6818      	ldr	r0, [r3, #0]
 8018962:	6859      	ldr	r1, [r3, #4]
 8018964:	4667      	mov	r7, ip
 8018966:	c703      	stmia	r7!, {r0, r1}
 8018968:	3308      	adds	r3, #8
 801896a:	4293      	cmp	r3, r2
 801896c:	46bc      	mov	ip, r7
 801896e:	d1f7      	bne.n	8018960 <HW_AES_CcmStart+0xf8>
 8018970:	4668      	mov	r0, sp
 8018972:	f7fe ff65 	bl	8017840 <HW_AES_Input>
 8018976:	3e10      	subs	r6, #16
 8018978:	f7fe ff56 	bl	8017828 <HW_AES_WaitComplete>
 801897c:	e7c9      	b.n	8018912 <HW_AES_CcmStart+0xaa>
 801897e:	bf00      	nop
 8018980:	50060000 	.word	0x50060000
 8018984:	00010005 	.word	0x00010005
 8018988:	00010015 	.word	0x00010015

0801898c <HW_AES_CcmCrypt>:
 801898c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018990:	4681      	mov	r9, r0
 8018992:	b085      	sub	sp, #20
 8018994:	4616      	mov	r6, r2
 8018996:	460d      	mov	r5, r1
 8018998:	2900      	cmp	r1, #0
 801899a:	d03c      	beq.n	8018a16 <HW_AES_CcmCrypt+0x8a>
 801899c:	4b2d      	ldr	r3, [pc, #180]	; (8018a54 <HW_AES_CcmCrypt+0xc8>)
 801899e:	f8d3 8000 	ldr.w	r8, [r3]
 80189a2:	f428 44c0 	bic.w	r4, r8, #24576	; 0x6000
 80189a6:	f024 0401 	bic.w	r4, r4, #1
 80189aa:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80189ae:	f044 0401 	orr.w	r4, r4, #1
 80189b2:	601c      	str	r4, [r3, #0]
 80189b4:	2700      	movs	r7, #0
 80189b6:	f10d 0a10 	add.w	sl, sp, #16
 80189ba:	1bea      	subs	r2, r5, r7
 80189bc:	2a0f      	cmp	r2, #15
 80189be:	eb06 0b07 	add.w	fp, r6, r7
 80189c2:	eb09 0307 	add.w	r3, r9, r7
 80189c6:	d829      	bhi.n	8018a1c <HW_AES_CcmCrypt+0x90>
 80189c8:	0929      	lsrs	r1, r5, #4
 80189ca:	f06f 030f 	mvn.w	r3, #15
 80189ce:	f025 020f 	bic.w	r2, r5, #15
 80189d2:	fb03 5501 	mla	r5, r3, r1, r5
 80189d6:	4491      	add	r9, r2
 80189d8:	4416      	add	r6, r2
 80189da:	b1e5      	cbz	r5, 8018a16 <HW_AES_CcmCrypt+0x8a>
 80189dc:	f018 0f10 	tst.w	r8, #16
 80189e0:	bf1e      	ittt	ne
 80189e2:	f1c5 0310 	rsbne	r3, r5, #16
 80189e6:	ea44 5403 	orrne.w	r4, r4, r3, lsl #20
 80189ea:	4b1a      	ldrne	r3, [pc, #104]	; (8018a54 <HW_AES_CcmCrypt+0xc8>)
 80189ec:	f04f 0210 	mov.w	r2, #16
 80189f0:	bf18      	it	ne
 80189f2:	601c      	strne	r4, [r3, #0]
 80189f4:	2100      	movs	r1, #0
 80189f6:	4668      	mov	r0, sp
 80189f8:	f010 ff5c 	bl	80298b4 <memset>
 80189fc:	462a      	mov	r2, r5
 80189fe:	4649      	mov	r1, r9
 8018a00:	4668      	mov	r0, sp
 8018a02:	f010 ffe8 	bl	80299d6 <memcpy>
 8018a06:	4669      	mov	r1, sp
 8018a08:	4608      	mov	r0, r1
 8018a0a:	f7ff fdff 	bl	801860c <HW_AES_Crypt>
 8018a0e:	462a      	mov	r2, r5
 8018a10:	4630      	mov	r0, r6
 8018a12:	f010 ffe0 	bl	80299d6 <memcpy>
 8018a16:	b005      	add	sp, #20
 8018a18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a1c:	46ec      	mov	ip, sp
 8018a1e:	f103 0e10 	add.w	lr, r3, #16
 8018a22:	6818      	ldr	r0, [r3, #0]
 8018a24:	6859      	ldr	r1, [r3, #4]
 8018a26:	4662      	mov	r2, ip
 8018a28:	c203      	stmia	r2!, {r0, r1}
 8018a2a:	3308      	adds	r3, #8
 8018a2c:	4573      	cmp	r3, lr
 8018a2e:	4694      	mov	ip, r2
 8018a30:	d1f7      	bne.n	8018a22 <HW_AES_CcmCrypt+0x96>
 8018a32:	4669      	mov	r1, sp
 8018a34:	4668      	mov	r0, sp
 8018a36:	f7ff fde9 	bl	801860c <HW_AES_Crypt>
 8018a3a:	46ec      	mov	ip, sp
 8018a3c:	465a      	mov	r2, fp
 8018a3e:	4663      	mov	r3, ip
 8018a40:	cb03      	ldmia	r3!, {r0, r1}
 8018a42:	4553      	cmp	r3, sl
 8018a44:	6010      	str	r0, [r2, #0]
 8018a46:	6051      	str	r1, [r2, #4]
 8018a48:	469c      	mov	ip, r3
 8018a4a:	f102 0208 	add.w	r2, r2, #8
 8018a4e:	d1f6      	bne.n	8018a3e <HW_AES_CcmCrypt+0xb2>
 8018a50:	3710      	adds	r7, #16
 8018a52:	e7b2      	b.n	80189ba <HW_AES_CcmCrypt+0x2e>
 8018a54:	50060000 	.word	0x50060000

08018a58 <HW_AES_CcmGetTag>:
 8018a58:	b510      	push	{r4, lr}
 8018a5a:	b086      	sub	sp, #24
 8018a5c:	4604      	mov	r4, r0
 8018a5e:	a802      	add	r0, sp, #8
 8018a60:	9101      	str	r1, [sp, #4]
 8018a62:	f7fe fef9 	bl	8017858 <HW_AES_CcmGenerateTag>
 8018a66:	4601      	mov	r1, r0
 8018a68:	9a01      	ldr	r2, [sp, #4]
 8018a6a:	4620      	mov	r0, r4
 8018a6c:	f010 ffb3 	bl	80299d6 <memcpy>
 8018a70:	b006      	add	sp, #24
 8018a72:	bd10      	pop	{r4, pc}

08018a74 <BAES_CcmEncrypt>:
 8018a74:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8018a78:	461f      	mov	r7, r3
 8018a7a:	4614      	mov	r4, r2
 8018a7c:	460d      	mov	r5, r1
 8018a7e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8018a82:	4606      	mov	r6, r0
 8018a84:	f7ff fd68 	bl	8018558 <HW_AES_Enable>
 8018a88:	4638      	mov	r0, r7
 8018a8a:	f7ff fd9d 	bl	80185c8 <HW_AES_SetKey>
 8018a8e:	2301      	movs	r3, #1
 8018a90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018a94:	e9cd 4301 	strd	r4, r3, [sp, #4]
 8018a98:	f8cd 8000 	str.w	r8, [sp]
 8018a9c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8018aa0:	f7ff fee2 	bl	8018868 <HW_AES_CcmStart>
 8018aa4:	4632      	mov	r2, r6
 8018aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018aa8:	4641      	mov	r1, r8
 8018aaa:	f7ff ff6f 	bl	801898c <HW_AES_CcmCrypt>
 8018aae:	4628      	mov	r0, r5
 8018ab0:	4621      	mov	r1, r4
 8018ab2:	f7ff ffd1 	bl	8018a58 <HW_AES_CcmGetTag>
 8018ab6:	f7ff fd6d 	bl	8018594 <HW_AES_Disable>
 8018aba:	2000      	movs	r0, #0
 8018abc:	b004      	add	sp, #16
 8018abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ac2 <HW_AES_CcmCheckTag>:
 8018ac2:	b530      	push	{r4, r5, lr}
 8018ac4:	b085      	sub	sp, #20
 8018ac6:	4604      	mov	r4, r0
 8018ac8:	460d      	mov	r5, r1
 8018aca:	4668      	mov	r0, sp
 8018acc:	f7fe fec4 	bl	8017858 <HW_AES_CcmGenerateTag>
 8018ad0:	4425      	add	r5, r4
 8018ad2:	4623      	mov	r3, r4
 8018ad4:	2200      	movs	r2, #0
 8018ad6:	42ab      	cmp	r3, r5
 8018ad8:	d104      	bne.n	8018ae4 <HW_AES_CcmCheckTag+0x22>
 8018ada:	1e10      	subs	r0, r2, #0
 8018adc:	bf18      	it	ne
 8018ade:	2001      	movne	r0, #1
 8018ae0:	b005      	add	sp, #20
 8018ae2:	bd30      	pop	{r4, r5, pc}
 8018ae4:	f813 1b01 	ldrb.w	r1, [r3], #1
 8018ae8:	f810 4b01 	ldrb.w	r4, [r0], #1
 8018aec:	4061      	eors	r1, r4
 8018aee:	430a      	orrs	r2, r1
 8018af0:	e7f1      	b.n	8018ad6 <HW_AES_CcmCheckTag+0x14>

08018af2 <BAES_CcmDecrypt>:
 8018af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018af6:	b086      	sub	sp, #24
 8018af8:	460e      	mov	r6, r1
 8018afa:	4615      	mov	r5, r2
 8018afc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8018afe:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8018b02:	9305      	str	r3, [sp, #20]
 8018b04:	4604      	mov	r4, r0
 8018b06:	f7ff fd27 	bl	8018558 <HW_AES_Enable>
 8018b0a:	4630      	mov	r0, r6
 8018b0c:	f7ff fd5c 	bl	80185c8 <HW_AES_SetKey>
 8018b10:	2300      	movs	r3, #0
 8018b12:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8018b16:	9905      	ldr	r1, [sp, #20]
 8018b18:	f8cd 8000 	str.w	r8, [sp]
 8018b1c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8018b20:	4628      	mov	r0, r5
 8018b22:	f7ff fea1 	bl	8018868 <HW_AES_CcmStart>
 8018b26:	4622      	mov	r2, r4
 8018b28:	980e      	ldr	r0, [sp, #56]	; 0x38
 8018b2a:	4641      	mov	r1, r8
 8018b2c:	f7ff ff2e 	bl	801898c <HW_AES_CcmCrypt>
 8018b30:	4639      	mov	r1, r7
 8018b32:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018b34:	f7ff ffc5 	bl	8018ac2 <HW_AES_CcmCheckTag>
 8018b38:	9005      	str	r0, [sp, #20]
 8018b3a:	f7ff fd2b 	bl	8018594 <HW_AES_Disable>
 8018b3e:	9805      	ldr	r0, [sp, #20]
 8018b40:	b006      	add	sp, #24
 8018b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08018b48 <HW_PKA_Enable>:
 8018b48:	4b12      	ldr	r3, [pc, #72]	; (8018b94 <HW_PKA_Enable+0x4c>)
 8018b4a:	f893 0400 	ldrb.w	r0, [r3, #1024]	; 0x400
 8018b4e:	b082      	sub	sp, #8
 8018b50:	b9f0      	cbnz	r0, 8018b90 <HW_PKA_Enable+0x48>
 8018b52:	4a11      	ldr	r2, [pc, #68]	; (8018b98 <HW_PKA_Enable+0x50>)
 8018b54:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8018b58:	4a10      	ldr	r2, [pc, #64]	; (8018b9c <HW_PKA_Enable+0x54>)
 8018b5a:	4291      	cmp	r1, r2
 8018b5c:	d116      	bne.n	8018b8c <HW_PKA_Enable+0x44>
 8018b5e:	2001      	movs	r0, #1
 8018b60:	f883 0400 	strb.w	r0, [r3, #1024]	; 0x400
 8018b64:	f3ef 8110 	mrs	r1, PRIMASK
 8018b68:	b672      	cpsid	i
 8018b6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8018b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018b70:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8018b74:	651a      	str	r2, [r3, #80]	; 0x50
 8018b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018b7c:	9301      	str	r3, [sp, #4]
 8018b7e:	9b01      	ldr	r3, [sp, #4]
 8018b80:	f381 8810 	msr	PRIMASK, r1
 8018b84:	4a06      	ldr	r2, [pc, #24]	; (8018ba0 <HW_PKA_Enable+0x58>)
 8018b86:	6813      	ldr	r3, [r2, #0]
 8018b88:	4303      	orrs	r3, r0
 8018b8a:	6013      	str	r3, [r2, #0]
 8018b8c:	b002      	add	sp, #8
 8018b8e:	4770      	bx	lr
 8018b90:	2000      	movs	r0, #0
 8018b92:	e7fb      	b.n	8018b8c <HW_PKA_Enable+0x44>
 8018b94:	2000141c 	.word	0x2000141c
 8018b98:	58001400 	.word	0x58001400
 8018b9c:	80000400 	.word	0x80000400
 8018ba0:	58002000 	.word	0x58002000

08018ba4 <HW_PKA_WriteOperand>:
 8018ba4:	0080      	lsls	r0, r0, #2
 8018ba6:	f100 40b0 	add.w	r0, r0, #1476395008	; 0x58000000
 8018baa:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 8018bae:	b530      	push	{r4, r5, lr}
 8018bb0:	460b      	mov	r3, r1
 8018bb2:	1f04      	subs	r4, r0, #4
 8018bb4:	2b00      	cmp	r3, #0
 8018bb6:	dc05      	bgt.n	8018bc4 <HW_PKA_WriteOperand+0x20>
 8018bb8:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8018bbc:	2300      	movs	r3, #0
 8018bbe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
 8018bc2:	bd30      	pop	{r4, r5, pc}
 8018bc4:	f852 5b04 	ldr.w	r5, [r2], #4
 8018bc8:	f844 5f04 	str.w	r5, [r4, #4]!
 8018bcc:	3b01      	subs	r3, #1
 8018bce:	e7f1      	b.n	8018bb4 <HW_PKA_WriteOperand+0x10>

08018bd0 <HW_PKA_Start>:
 8018bd0:	4b07      	ldr	r3, [pc, #28]	; (8018bf0 <HW_PKA_Start+0x20>)
 8018bd2:	681a      	ldr	r2, [r3, #0]
 8018bd4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8018bd8:	ea42 2000 	orr.w	r0, r2, r0, lsl #8
 8018bdc:	6018      	str	r0, [r3, #0]
 8018bde:	689a      	ldr	r2, [r3, #8]
 8018be0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8018be4:	609a      	str	r2, [r3, #8]
 8018be6:	681a      	ldr	r2, [r3, #0]
 8018be8:	f042 0202 	orr.w	r2, r2, #2
 8018bec:	601a      	str	r2, [r3, #0]
 8018bee:	4770      	bx	lr
 8018bf0:	58002000 	.word	0x58002000

08018bf4 <HW_PKA_EndOfOperation>:
 8018bf4:	4b02      	ldr	r3, [pc, #8]	; (8018c00 <HW_PKA_EndOfOperation+0xc>)
 8018bf6:	6858      	ldr	r0, [r3, #4]
 8018bf8:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8018bfc:	4770      	bx	lr
 8018bfe:	bf00      	nop
 8018c00:	58002000 	.word	0x58002000

08018c04 <HW_PKA_ReadResult>:
 8018c04:	0080      	lsls	r0, r0, #2
 8018c06:	f100 40b0 	add.w	r0, r0, #1476395008	; 0x58000000
 8018c0a:	f500 5010 	add.w	r0, r0, #9216	; 0x2400
 8018c0e:	3a04      	subs	r2, #4
 8018c10:	2900      	cmp	r1, #0
 8018c12:	dc00      	bgt.n	8018c16 <HW_PKA_ReadResult+0x12>
 8018c14:	4770      	bx	lr
 8018c16:	f850 3b04 	ldr.w	r3, [r0], #4
 8018c1a:	f842 3f04 	str.w	r3, [r2, #4]!
 8018c1e:	3901      	subs	r1, #1
 8018c20:	e7f6      	b.n	8018c10 <HW_PKA_ReadResult+0xc>
	...

08018c24 <HW_PKA_Disable>:
 8018c24:	4a0d      	ldr	r2, [pc, #52]	; (8018c5c <HW_PKA_Disable+0x38>)
 8018c26:	f892 3400 	ldrb.w	r3, [r2, #1024]	; 0x400
 8018c2a:	b1b3      	cbz	r3, 8018c5a <HW_PKA_Disable+0x36>
 8018c2c:	490c      	ldr	r1, [pc, #48]	; (8018c60 <HW_PKA_Disable+0x3c>)
 8018c2e:	680b      	ldr	r3, [r1, #0]
 8018c30:	f023 0301 	bic.w	r3, r3, #1
 8018c34:	600b      	str	r3, [r1, #0]
 8018c36:	f3ef 8010 	mrs	r0, PRIMASK
 8018c3a:	b672      	cpsid	i
 8018c3c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8018c40:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8018c42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018c46:	650b      	str	r3, [r1, #80]	; 0x50
 8018c48:	f380 8810 	msr	PRIMASK, r0
 8018c4c:	4b05      	ldr	r3, [pc, #20]	; (8018c64 <HW_PKA_Disable+0x40>)
 8018c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8018c52:	6059      	str	r1, [r3, #4]
 8018c54:	2300      	movs	r3, #0
 8018c56:	f882 3400 	strb.w	r3, [r2, #1024]	; 0x400
 8018c5a:	4770      	bx	lr
 8018c5c:	2000141c 	.word	0x2000141c
 8018c60:	58002000 	.word	0x58002000
 8018c64:	58001400 	.word	0x58001400

08018c68 <HW_PKA_P256_StartRangeCheck>:
 8018c68:	b508      	push	{r3, lr}
 8018c6a:	4b0b      	ldr	r3, [pc, #44]	; (8018c98 <HW_PKA_P256_StartRangeCheck+0x30>)
 8018c6c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8018c70:	f8c3 1404 	str.w	r1, [r3, #1028]	; 0x404
 8018c74:	4602      	mov	r2, r0
 8018c76:	2108      	movs	r1, #8
 8018c78:	f240 102d 	movw	r0, #301	; 0x12d
 8018c7c:	f7ff ff92 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018c80:	f240 1091 	movw	r0, #401	; 0x191
 8018c84:	4a05      	ldr	r2, [pc, #20]	; (8018c9c <HW_PKA_P256_StartRangeCheck+0x34>)
 8018c86:	2108      	movs	r1, #8
 8018c88:	f7ff ff8c 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018c90:	200c      	movs	r0, #12
 8018c92:	f7ff bf9d 	b.w	8018bd0 <HW_PKA_Start>
 8018c96:	bf00      	nop
 8018c98:	58002000 	.word	0x58002000
 8018c9c:	080313b4 	.word	0x080313b4

08018ca0 <BPKA_StartDhKey>:
 8018ca0:	b570      	push	{r4, r5, r6, lr}
 8018ca2:	4605      	mov	r5, r0
 8018ca4:	460c      	mov	r4, r1
 8018ca6:	f7ff ff4f 	bl	8018b48 <HW_PKA_Enable>
 8018caa:	b378      	cbz	r0, 8018d0c <BPKA_StartDhKey+0x6c>
 8018cac:	462b      	mov	r3, r5
 8018cae:	4d19      	ldr	r5, [pc, #100]	; (8018d14 <BPKA_StartDhKey+0x74>)
 8018cb0:	f103 0620 	add.w	r6, r3, #32
 8018cb4:	6818      	ldr	r0, [r3, #0]
 8018cb6:	6859      	ldr	r1, [r3, #4]
 8018cb8:	462a      	mov	r2, r5
 8018cba:	c203      	stmia	r2!, {r0, r1}
 8018cbc:	3308      	adds	r3, #8
 8018cbe:	42b3      	cmp	r3, r6
 8018cc0:	4615      	mov	r5, r2
 8018cc2:	d1f7      	bne.n	8018cb4 <BPKA_StartDhKey+0x14>
 8018cc4:	4a14      	ldr	r2, [pc, #80]	; (8018d18 <BPKA_StartDhKey+0x78>)
 8018cc6:	4623      	mov	r3, r4
 8018cc8:	f104 0640 	add.w	r6, r4, #64	; 0x40
 8018ccc:	4615      	mov	r5, r2
 8018cce:	6818      	ldr	r0, [r3, #0]
 8018cd0:	6859      	ldr	r1, [r3, #4]
 8018cd2:	4614      	mov	r4, r2
 8018cd4:	c403      	stmia	r4!, {r0, r1}
 8018cd6:	3308      	adds	r3, #8
 8018cd8:	42b3      	cmp	r3, r6
 8018cda:	4622      	mov	r2, r4
 8018cdc:	d1f7      	bne.n	8018cce <BPKA_StartDhKey+0x2e>
 8018cde:	4c0f      	ldr	r4, [pc, #60]	; (8018d1c <BPKA_StartDhKey+0x7c>)
 8018ce0:	f504 7063 	add.w	r0, r4, #908	; 0x38c
 8018ce4:	f7fe fe8c 	bl	8017a00 <BPKA_Reverse>
 8018ce8:	4628      	mov	r0, r5
 8018cea:	f7fe fe89 	bl	8017a00 <BPKA_Reverse>
 8018cee:	f504 7073 	add.w	r0, r4, #972	; 0x3cc
 8018cf2:	f7fe fe85 	bl	8017a00 <BPKA_Reverse>
 8018cf6:	4628      	mov	r0, r5
 8018cf8:	f7ff ffb6 	bl	8018c68 <HW_PKA_P256_StartRangeCheck>
 8018cfc:	2302      	movs	r3, #2
 8018cfe:	f884 3401 	strb.w	r3, [r4, #1025]	; 0x401
 8018d02:	2301      	movs	r3, #1
 8018d04:	f884 33ec 	strb.w	r3, [r4, #1004]	; 0x3ec
 8018d08:	2000      	movs	r0, #0
 8018d0a:	bd70      	pop	{r4, r5, r6, pc}
 8018d0c:	f06f 0001 	mvn.w	r0, #1
 8018d10:	e7fb      	b.n	8018d0a <BPKA_StartDhKey+0x6a>
 8018d12:	bf00      	nop
 8018d14:	200017a8 	.word	0x200017a8
 8018d18:	200017c8 	.word	0x200017c8
 8018d1c:	2000141c 	.word	0x2000141c

08018d20 <HW_PKA_P256_StartPointCheck>:
 8018d20:	4b16      	ldr	r3, [pc, #88]	; (8018d7c <HW_PKA_P256_StartPointCheck+0x5c>)
 8018d22:	b570      	push	{r4, r5, r6, lr}
 8018d24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d28:	4c15      	ldr	r4, [pc, #84]	; (8018d80 <HW_PKA_P256_StartPointCheck+0x60>)
 8018d2a:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8018d2e:	2201      	movs	r2, #1
 8018d30:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8018d34:	4606      	mov	r6, r0
 8018d36:	460d      	mov	r5, r1
 8018d38:	f104 0278 	add.w	r2, r4, #120	; 0x78
 8018d3c:	2108      	movs	r1, #8
 8018d3e:	2003      	movs	r0, #3
 8018d40:	f7ff ff30 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018d44:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8018d48:	2108      	movs	r1, #8
 8018d4a:	2018      	movs	r0, #24
 8018d4c:	f7ff ff2a 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018d50:	4632      	mov	r2, r6
 8018d52:	2108      	movs	r1, #8
 8018d54:	2057      	movs	r0, #87	; 0x57
 8018d56:	f7ff ff25 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018d5a:	462a      	mov	r2, r5
 8018d5c:	2108      	movs	r1, #8
 8018d5e:	206c      	movs	r0, #108	; 0x6c
 8018d60:	f7ff ff20 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018d64:	f104 0298 	add.w	r2, r4, #152	; 0x98
 8018d68:	20ff      	movs	r0, #255	; 0xff
 8018d6a:	2108      	movs	r1, #8
 8018d6c:	f7ff ff1a 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018d74:	2028      	movs	r0, #40	; 0x28
 8018d76:	f7ff bf2b 	b.w	8018bd0 <HW_PKA_Start>
 8018d7a:	bf00      	nop
 8018d7c:	58002000 	.word	0x58002000
 8018d80:	0803135c 	.word	0x0803135c

08018d84 <HW_PKA_P256_StartEccScalarMul>:
 8018d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d86:	4b1e      	ldr	r3, [pc, #120]	; (8018e00 <HW_PKA_P256_StartEccScalarMul+0x7c>)
 8018d88:	4c1e      	ldr	r4, [pc, #120]	; (8018e04 <HW_PKA_P256_StartEccScalarMul+0x80>)
 8018d8a:	4615      	mov	r5, r2
 8018d8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018d90:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
 8018d94:	f8c3 2404 	str.w	r2, [r3, #1028]	; 0x404
 8018d98:	2201      	movs	r2, #1
 8018d9a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8018d9e:	4607      	mov	r7, r0
 8018da0:	460e      	mov	r6, r1
 8018da2:	f104 0278 	add.w	r2, r4, #120	; 0x78
 8018da6:	2108      	movs	r1, #8
 8018da8:	2003      	movs	r0, #3
 8018daa:	f7ff fefb 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018dae:	f104 0258 	add.w	r2, r4, #88	; 0x58
 8018db2:	2108      	movs	r1, #8
 8018db4:	2018      	movs	r0, #24
 8018db6:	f7ff fef5 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018dba:	f104 02f8 	add.w	r2, r4, #248	; 0xf8
 8018dbe:	2108      	movs	r1, #8
 8018dc0:	202d      	movs	r0, #45	; 0x2d
 8018dc2:	f7ff feef 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018dc6:	463a      	mov	r2, r7
 8018dc8:	2108      	movs	r1, #8
 8018dca:	2042      	movs	r0, #66	; 0x42
 8018dcc:	f7ff feea 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018dd0:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
 8018dd4:	2e00      	cmp	r6, #0
 8018dd6:	bf18      	it	ne
 8018dd8:	4632      	movne	r2, r6
 8018dda:	2108      	movs	r1, #8
 8018ddc:	2057      	movs	r0, #87	; 0x57
 8018dde:	34d8      	adds	r4, #216	; 0xd8
 8018de0:	f7ff fee0 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018de4:	2d00      	cmp	r5, #0
 8018de6:	bf14      	ite	ne
 8018de8:	462a      	movne	r2, r5
 8018dea:	4622      	moveq	r2, r4
 8018dec:	206c      	movs	r0, #108	; 0x6c
 8018dee:	2108      	movs	r1, #8
 8018df0:	f7ff fed8 	bl	8018ba4 <HW_PKA_WriteOperand>
 8018df4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018df8:	2022      	movs	r0, #34	; 0x22
 8018dfa:	f7ff bee9 	b.w	8018bd0 <HW_PKA_Start>
 8018dfe:	bf00      	nop
 8018e00:	58002000 	.word	0x58002000
 8018e04:	0803135c 	.word	0x0803135c

08018e08 <BPKA_StartP256Key>:
 8018e08:	b530      	push	{r4, r5, lr}
 8018e0a:	b089      	sub	sp, #36	; 0x24
 8018e0c:	4604      	mov	r4, r0
 8018e0e:	f7ff fe9b 	bl	8018b48 <HW_PKA_Enable>
 8018e12:	b1c8      	cbz	r0, 8018e48 <BPKA_StartP256Key+0x40>
 8018e14:	4623      	mov	r3, r4
 8018e16:	f103 0520 	add.w	r5, r3, #32
 8018e1a:	466c      	mov	r4, sp
 8018e1c:	6818      	ldr	r0, [r3, #0]
 8018e1e:	6859      	ldr	r1, [r3, #4]
 8018e20:	4622      	mov	r2, r4
 8018e22:	c203      	stmia	r2!, {r0, r1}
 8018e24:	3308      	adds	r3, #8
 8018e26:	42ab      	cmp	r3, r5
 8018e28:	4614      	mov	r4, r2
 8018e2a:	d1f7      	bne.n	8018e1c <BPKA_StartP256Key+0x14>
 8018e2c:	4668      	mov	r0, sp
 8018e2e:	f7fe fde7 	bl	8017a00 <BPKA_Reverse>
 8018e32:	2200      	movs	r2, #0
 8018e34:	4611      	mov	r1, r2
 8018e36:	f7ff ffa5 	bl	8018d84 <HW_PKA_P256_StartEccScalarMul>
 8018e3a:	4b05      	ldr	r3, [pc, #20]	; (8018e50 <BPKA_StartP256Key+0x48>)
 8018e3c:	2201      	movs	r2, #1
 8018e3e:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
 8018e42:	2000      	movs	r0, #0
 8018e44:	b009      	add	sp, #36	; 0x24
 8018e46:	bd30      	pop	{r4, r5, pc}
 8018e48:	f06f 0001 	mvn.w	r0, #1
 8018e4c:	e7fa      	b.n	8018e44 <BPKA_StartP256Key+0x3c>
 8018e4e:	bf00      	nop
 8018e50:	2000141c 	.word	0x2000141c

08018e54 <HW_PKA_P256_ReadEccScalarMul>:
 8018e54:	b510      	push	{r4, lr}
 8018e56:	4602      	mov	r2, r0
 8018e58:	460c      	mov	r4, r1
 8018e5a:	b118      	cbz	r0, 8018e64 <HW_PKA_P256_ReadEccScalarMul+0x10>
 8018e5c:	2108      	movs	r1, #8
 8018e5e:	2057      	movs	r0, #87	; 0x57
 8018e60:	f7ff fed0 	bl	8018c04 <HW_PKA_ReadResult>
 8018e64:	b134      	cbz	r4, 8018e74 <HW_PKA_P256_ReadEccScalarMul+0x20>
 8018e66:	4622      	mov	r2, r4
 8018e68:	2108      	movs	r1, #8
 8018e6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018e6e:	206c      	movs	r0, #108	; 0x6c
 8018e70:	f7ff bec8 	b.w	8018c04 <HW_PKA_ReadResult>
 8018e74:	bd10      	pop	{r4, pc}
	...

08018e78 <BPKA_Status>:
 8018e78:	b510      	push	{r4, lr}
 8018e7a:	f7ff febb 	bl	8018bf4 <HW_PKA_EndOfOperation>
 8018e7e:	b300      	cbz	r0, 8018ec2 <BPKA_Status+0x4a>
 8018e80:	4c23      	ldr	r4, [pc, #140]	; (8018f10 <BPKA_Status+0x98>)
 8018e82:	f894 3401 	ldrb.w	r3, [r4, #1025]	; 0x401
 8018e86:	3b01      	subs	r3, #1
 8018e88:	2b04      	cmp	r3, #4
 8018e8a:	d83f      	bhi.n	8018f0c <BPKA_Status+0x94>
 8018e8c:	e8df f003 	tbb	[pc, r3]
 8018e90:	281c0e03 	.word	0x281c0e03
 8018e94:	36          	.byte	0x36
 8018e95:	00          	.byte	0x00
 8018e96:	491f      	ldr	r1, [pc, #124]	; (8018f14 <BPKA_Status+0x9c>)
 8018e98:	f1a1 0020 	sub.w	r0, r1, #32
 8018e9c:	f7ff ffda 	bl	8018e54 <HW_PKA_P256_ReadEccScalarMul>
 8018ea0:	f7ff fec0 	bl	8018c24 <HW_PKA_Disable>
 8018ea4:	2000      	movs	r0, #0
 8018ea6:	f884 0401 	strb.w	r0, [r4, #1025]	; 0x401
 8018eaa:	e00c      	b.n	8018ec6 <BPKA_Status+0x4e>
 8018eac:	4b1a      	ldr	r3, [pc, #104]	; (8018f18 <BPKA_Status+0xa0>)
 8018eae:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	; 0xbd0
 8018eb2:	2b02      	cmp	r3, #2
 8018eb4:	d1f4      	bne.n	8018ea0 <BPKA_Status+0x28>
 8018eb6:	4819      	ldr	r0, [pc, #100]	; (8018f1c <BPKA_Status+0xa4>)
 8018eb8:	f7ff fed6 	bl	8018c68 <HW_PKA_P256_StartRangeCheck>
 8018ebc:	2303      	movs	r3, #3
 8018ebe:	f884 3401 	strb.w	r3, [r4, #1025]	; 0x401
 8018ec2:	f06f 0001 	mvn.w	r0, #1
 8018ec6:	bd10      	pop	{r4, pc}
 8018ec8:	4b13      	ldr	r3, [pc, #76]	; (8018f18 <BPKA_Status+0xa0>)
 8018eca:	f8d3 3bd0 	ldr.w	r3, [r3, #3024]	; 0xbd0
 8018ece:	2b02      	cmp	r3, #2
 8018ed0:	d1e6      	bne.n	8018ea0 <BPKA_Status+0x28>
 8018ed2:	4912      	ldr	r1, [pc, #72]	; (8018f1c <BPKA_Status+0xa4>)
 8018ed4:	f1a1 0020 	sub.w	r0, r1, #32
 8018ed8:	f7ff ff22 	bl	8018d20 <HW_PKA_P256_StartPointCheck>
 8018edc:	2304      	movs	r3, #4
 8018ede:	e7ee      	b.n	8018ebe <BPKA_Status+0x46>
 8018ee0:	4b0d      	ldr	r3, [pc, #52]	; (8018f18 <BPKA_Status+0xa0>)
 8018ee2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8018ee6:	2b00      	cmp	r3, #0
 8018ee8:	d1da      	bne.n	8018ea0 <BPKA_Status+0x28>
 8018eea:	4a0c      	ldr	r2, [pc, #48]	; (8018f1c <BPKA_Status+0xa4>)
 8018eec:	f1a2 0120 	sub.w	r1, r2, #32
 8018ef0:	f1a2 0040 	sub.w	r0, r2, #64	; 0x40
 8018ef4:	f7ff ff46 	bl	8018d84 <HW_PKA_P256_StartEccScalarMul>
 8018ef8:	2305      	movs	r3, #5
 8018efa:	e7e0      	b.n	8018ebe <BPKA_Status+0x46>
 8018efc:	4808      	ldr	r0, [pc, #32]	; (8018f20 <BPKA_Status+0xa8>)
 8018efe:	2100      	movs	r1, #0
 8018f00:	f7ff ffa8 	bl	8018e54 <HW_PKA_P256_ReadEccScalarMul>
 8018f04:	2300      	movs	r3, #0
 8018f06:	f884 33ec 	strb.w	r3, [r4, #1004]	; 0x3ec
 8018f0a:	e7c9      	b.n	8018ea0 <BPKA_Status+0x28>
 8018f0c:	2000      	movs	r0, #0
 8018f0e:	e7da      	b.n	8018ec6 <BPKA_Status+0x4e>
 8018f10:	2000141c 	.word	0x2000141c
 8018f14:	200017c8 	.word	0x200017c8
 8018f18:	58002000 	.word	0x58002000
 8018f1c:	200017e8 	.word	0x200017e8
 8018f20:	200017a8 	.word	0x200017a8

08018f24 <MoblePalCryptoGetEccPublicKey.part.0>:
 8018f24:	b538      	push	{r3, r4, r5, lr}
 8018f26:	4605      	mov	r5, r0
 8018f28:	4807      	ldr	r0, [pc, #28]	; (8018f48 <MoblePalCryptoGetEccPublicKey.part.0+0x24>)
 8018f2a:	f7ff ff6d 	bl	8018e08 <BPKA_StartP256Key>
 8018f2e:	2800      	cmp	r0, #0
 8018f30:	d1fa      	bne.n	8018f28 <MoblePalCryptoGetEccPublicKey.part.0+0x4>
 8018f32:	f7ff ffa1 	bl	8018e78 <BPKA_Status>
 8018f36:	4604      	mov	r4, r0
 8018f38:	2800      	cmp	r0, #0
 8018f3a:	d1fa      	bne.n	8018f32 <MoblePalCryptoGetEccPublicKey.part.0+0xe>
 8018f3c:	4628      	mov	r0, r5
 8018f3e:	f7ff facf 	bl	80184e0 <BPKA_ReadP256Key>
 8018f42:	4620      	mov	r0, r4
 8018f44:	bd38      	pop	{r3, r4, r5, pc}
 8018f46:	bf00      	nop
 8018f48:	2000181f 	.word	0x2000181f

08018f4c <MoblePalCryptoInit>:
 8018f4c:	4919      	ldr	r1, [pc, #100]	; (8018fb4 <MoblePalCryptoInit+0x68>)
 8018f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018f50:	2300      	movs	r3, #0
 8018f52:	880c      	ldrh	r4, [r1, #0]
 8018f54:	4d18      	ldr	r5, [pc, #96]	; (8018fb8 <MoblePalCryptoInit+0x6c>)
 8018f56:	277c      	movs	r7, #124	; 0x7c
 8018f58:	4618      	mov	r0, r3
 8018f5a:	b2da      	uxtb	r2, r3
 8018f5c:	42a2      	cmp	r2, r4
 8018f5e:	f103 0601 	add.w	r6, r3, #1
 8018f62:	d318      	bcc.n	8018f96 <MoblePalCryptoInit+0x4a>
 8018f64:	2300      	movs	r3, #0
 8018f66:	8909      	ldrh	r1, [r1, #8]
 8018f68:	242c      	movs	r4, #44	; 0x2c
 8018f6a:	461e      	mov	r6, r3
 8018f6c:	b2da      	uxtb	r2, r3
 8018f6e:	428a      	cmp	r2, r1
 8018f70:	f103 0001 	add.w	r0, r3, #1
 8018f74:	d317      	bcc.n	8018fa6 <MoblePalCryptoInit+0x5a>
 8018f76:	2400      	movs	r4, #0
 8018f78:	2228      	movs	r2, #40	; 0x28
 8018f7a:	4621      	mov	r1, r4
 8018f7c:	480f      	ldr	r0, [pc, #60]	; (8018fbc <MoblePalCryptoInit+0x70>)
 8018f7e:	f8c5 4658 	str.w	r4, [r5, #1624]	; 0x658
 8018f82:	f885 465c 	strb.w	r4, [r5, #1628]	; 0x65c
 8018f86:	f010 fc95 	bl	80298b4 <memset>
 8018f8a:	f8a5 461c 	strh.w	r4, [r5, #1564]	; 0x61c
 8018f8e:	f885 461e 	strb.w	r4, [r5, #1566]	; 0x61e
 8018f92:	4620      	mov	r0, r4
 8018f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f96:	fb07 5302 	mla	r3, r7, r2, r5
 8018f9a:	f883 0445 	strb.w	r0, [r3, #1093]	; 0x445
 8018f9e:	f883 0446 	strb.w	r0, [r3, #1094]	; 0x446
 8018fa2:	4633      	mov	r3, r6
 8018fa4:	e7d9      	b.n	8018f5a <MoblePalCryptoInit+0xe>
 8018fa6:	fb04 5202 	mla	r2, r4, r2, r5
 8018faa:	4603      	mov	r3, r0
 8018fac:	f8a2 65b8 	strh.w	r6, [r2, #1464]	; 0x5b8
 8018fb0:	e7dc      	b.n	8018f6c <MoblePalCryptoInit+0x20>
 8018fb2:	bf00      	nop
 8018fb4:	20000008 	.word	0x20000008
 8018fb8:	2000141c 	.word	0x2000141c
 8018fbc:	20001a4c 	.word	0x20001a4c

08018fc0 <MoblePalCryptoHasNewNetworkKey>:
 8018fc0:	4b0a      	ldr	r3, [pc, #40]	; (8018fec <MoblePalCryptoHasNewNetworkKey+0x2c>)
 8018fc2:	b570      	push	{r4, r5, r6, lr}
 8018fc4:	4d0a      	ldr	r5, [pc, #40]	; (8018ff0 <MoblePalCryptoHasNewNetworkKey+0x30>)
 8018fc6:	8819      	ldrh	r1, [r3, #0]
 8018fc8:	267c      	movs	r6, #124	; 0x7c
 8018fca:	2300      	movs	r3, #0
 8018fcc:	b2da      	uxtb	r2, r3
 8018fce:	428a      	cmp	r2, r1
 8018fd0:	d301      	bcc.n	8018fd6 <MoblePalCryptoHasNewNetworkKey+0x16>
 8018fd2:	2000      	movs	r0, #0
 8018fd4:	e008      	b.n	8018fe8 <MoblePalCryptoHasNewNetworkKey+0x28>
 8018fd6:	fb06 5202 	mla	r2, r6, r2, r5
 8018fda:	3301      	adds	r3, #1
 8018fdc:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	; 0x448
 8018fe0:	4284      	cmp	r4, r0
 8018fe2:	d1f3      	bne.n	8018fcc <MoblePalCryptoHasNewNetworkKey+0xc>
 8018fe4:	f892 0446 	ldrb.w	r0, [r2, #1094]	; 0x446
 8018fe8:	bd70      	pop	{r4, r5, r6, pc}
 8018fea:	bf00      	nop
 8018fec:	20000008 	.word	0x20000008
 8018ff0:	2000141c 	.word	0x2000141c

08018ff4 <MoblePalCryptoHasNetworkKey>:
 8018ff4:	4b0a      	ldr	r3, [pc, #40]	; (8019020 <MoblePalCryptoHasNetworkKey+0x2c>)
 8018ff6:	b570      	push	{r4, r5, r6, lr}
 8018ff8:	4d0a      	ldr	r5, [pc, #40]	; (8019024 <MoblePalCryptoHasNetworkKey+0x30>)
 8018ffa:	8819      	ldrh	r1, [r3, #0]
 8018ffc:	267c      	movs	r6, #124	; 0x7c
 8018ffe:	2300      	movs	r3, #0
 8019000:	b2da      	uxtb	r2, r3
 8019002:	428a      	cmp	r2, r1
 8019004:	d301      	bcc.n	801900a <MoblePalCryptoHasNetworkKey+0x16>
 8019006:	2000      	movs	r0, #0
 8019008:	e008      	b.n	801901c <MoblePalCryptoHasNetworkKey+0x28>
 801900a:	fb06 5202 	mla	r2, r6, r2, r5
 801900e:	3301      	adds	r3, #1
 8019010:	f8b2 4448 	ldrh.w	r4, [r2, #1096]	; 0x448
 8019014:	4284      	cmp	r4, r0
 8019016:	d1f3      	bne.n	8019000 <MoblePalCryptoHasNetworkKey+0xc>
 8019018:	f892 0445 	ldrb.w	r0, [r2, #1093]	; 0x445
 801901c:	bd70      	pop	{r4, r5, r6, pc}
 801901e:	bf00      	nop
 8019020:	20000008 	.word	0x20000008
 8019024:	2000141c 	.word	0x2000141c

08019028 <MoblePalCryptoHasAppKey>:
 8019028:	4b0a      	ldr	r3, [pc, #40]	; (8019054 <MoblePalCryptoHasAppKey+0x2c>)
 801902a:	b570      	push	{r4, r5, r6, lr}
 801902c:	4d0a      	ldr	r5, [pc, #40]	; (8019058 <MoblePalCryptoHasAppKey+0x30>)
 801902e:	8919      	ldrh	r1, [r3, #8]
 8019030:	262c      	movs	r6, #44	; 0x2c
 8019032:	2300      	movs	r3, #0
 8019034:	b2da      	uxtb	r2, r3
 8019036:	428a      	cmp	r2, r1
 8019038:	d301      	bcc.n	801903e <MoblePalCryptoHasAppKey+0x16>
 801903a:	2000      	movs	r0, #0
 801903c:	e008      	b.n	8019050 <MoblePalCryptoHasAppKey+0x28>
 801903e:	fb06 5202 	mla	r2, r6, r2, r5
 8019042:	3301      	adds	r3, #1
 8019044:	f8b2 45ba 	ldrh.w	r4, [r2, #1466]	; 0x5ba
 8019048:	4284      	cmp	r4, r0
 801904a:	d1f3      	bne.n	8019034 <MoblePalCryptoHasAppKey+0xc>
 801904c:	f892 05b8 	ldrb.w	r0, [r2, #1464]	; 0x5b8
 8019050:	bd70      	pop	{r4, r5, r6, pc}
 8019052:	bf00      	nop
 8019054:	20000008 	.word	0x20000008
 8019058:	2000141c 	.word	0x2000141c

0801905c <MoblePalCryptoSetNodeIdntyState>:
 801905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801905e:	4605      	mov	r5, r0
 8019060:	460c      	mov	r4, r1
 8019062:	f7ff ffc7 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 8019066:	b1c8      	cbz	r0, 801909c <MoblePalCryptoSetNodeIdntyState+0x40>
 8019068:	2c01      	cmp	r4, #1
 801906a:	d817      	bhi.n	801909c <MoblePalCryptoSetNodeIdntyState+0x40>
 801906c:	4b0c      	ldr	r3, [pc, #48]	; (80190a0 <MoblePalCryptoSetNodeIdntyState+0x44>)
 801906e:	4e0d      	ldr	r6, [pc, #52]	; (80190a4 <MoblePalCryptoSetNodeIdntyState+0x48>)
 8019070:	8819      	ldrh	r1, [r3, #0]
 8019072:	2200      	movs	r2, #0
 8019074:	277c      	movs	r7, #124	; 0x7c
 8019076:	b2d3      	uxtb	r3, r2
 8019078:	428b      	cmp	r3, r1
 801907a:	d301      	bcc.n	8019080 <MoblePalCryptoSetNodeIdntyState+0x24>
 801907c:	2000      	movs	r0, #0
 801907e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019080:	fb07 6303 	mla	r3, r7, r3, r6
 8019084:	f893 0445 	ldrb.w	r0, [r3, #1093]	; 0x445
 8019088:	2801      	cmp	r0, #1
 801908a:	d105      	bne.n	8019098 <MoblePalCryptoSetNodeIdntyState+0x3c>
 801908c:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	; 0x448
 8019090:	42a8      	cmp	r0, r5
 8019092:	bf08      	it	eq
 8019094:	f883 4444 	strbeq.w	r4, [r3, #1092]	; 0x444
 8019098:	3201      	adds	r2, #1
 801909a:	e7ec      	b.n	8019076 <MoblePalCryptoSetNodeIdntyState+0x1a>
 801909c:	2003      	movs	r0, #3
 801909e:	e7ee      	b.n	801907e <MoblePalCryptoSetNodeIdntyState+0x22>
 80190a0:	20000008 	.word	0x20000008
 80190a4:	2000141c 	.word	0x2000141c

080190a8 <MoblePalCryptoGetNodeIdntyState>:
 80190a8:	4b0c      	ldr	r3, [pc, #48]	; (80190dc <MoblePalCryptoGetNodeIdntyState+0x34>)
 80190aa:	b570      	push	{r4, r5, r6, lr}
 80190ac:	8819      	ldrh	r1, [r3, #0]
 80190ae:	4d0c      	ldr	r5, [pc, #48]	; (80190e0 <MoblePalCryptoGetNodeIdntyState+0x38>)
 80190b0:	2200      	movs	r2, #0
 80190b2:	267c      	movs	r6, #124	; 0x7c
 80190b4:	b2d3      	uxtb	r3, r2
 80190b6:	428b      	cmp	r3, r1
 80190b8:	d301      	bcc.n	80190be <MoblePalCryptoGetNodeIdntyState+0x16>
 80190ba:	2000      	movs	r0, #0
 80190bc:	e00b      	b.n	80190d6 <MoblePalCryptoGetNodeIdntyState+0x2e>
 80190be:	fb06 5303 	mla	r3, r6, r3, r5
 80190c2:	f893 4445 	ldrb.w	r4, [r3, #1093]	; 0x445
 80190c6:	2c01      	cmp	r4, #1
 80190c8:	d106      	bne.n	80190d8 <MoblePalCryptoGetNodeIdntyState+0x30>
 80190ca:	f8b3 4448 	ldrh.w	r4, [r3, #1096]	; 0x448
 80190ce:	4284      	cmp	r4, r0
 80190d0:	d102      	bne.n	80190d8 <MoblePalCryptoGetNodeIdntyState+0x30>
 80190d2:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
 80190d6:	bd70      	pop	{r4, r5, r6, pc}
 80190d8:	3201      	adds	r2, #1
 80190da:	e7eb      	b.n	80190b4 <MoblePalCryptoGetNodeIdntyState+0xc>
 80190dc:	20000008 	.word	0x20000008
 80190e0:	2000141c 	.word	0x2000141c

080190e4 <MoblePalCryptoGetNodeIdntyToBeAdvt>:
 80190e4:	b530      	push	{r4, r5, lr}
 80190e6:	4b11      	ldr	r3, [pc, #68]	; (801912c <MoblePalCryptoGetNodeIdntyToBeAdvt+0x48>)
 80190e8:	8819      	ldrh	r1, [r3, #0]
 80190ea:	4b11      	ldr	r3, [pc, #68]	; (8019130 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x4c>)
 80190ec:	f893 265d 	ldrb.w	r2, [r3, #1629]	; 0x65d
 80190f0:	428a      	cmp	r2, r1
 80190f2:	bf24      	itt	cs
 80190f4:	2200      	movcs	r2, #0
 80190f6:	f883 265d 	strbcs.w	r2, [r3, #1629]	; 0x65d
 80190fa:	f893 065d 	ldrb.w	r0, [r3, #1629]	; 0x65d
 80190fe:	257c      	movs	r5, #124	; 0x7c
 8019100:	b284      	uxth	r4, r0
 8019102:	4602      	mov	r2, r0
 8019104:	42a1      	cmp	r1, r4
 8019106:	f100 0001 	add.w	r0, r0, #1
 801910a:	b2c0      	uxtb	r0, r0
 801910c:	d905      	bls.n	801911a <MoblePalCryptoGetNodeIdntyToBeAdvt+0x36>
 801910e:	fb05 3202 	mla	r2, r5, r2, r3
 8019112:	f892 2444 	ldrb.w	r2, [r2, #1092]	; 0x444
 8019116:	2a01      	cmp	r2, #1
 8019118:	d1f2      	bne.n	8019100 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x1c>
 801911a:	f883 065d 	strb.w	r0, [r3, #1629]	; 0x65d
 801911e:	4b05      	ldr	r3, [pc, #20]	; (8019134 <MoblePalCryptoGetNodeIdntyToBeAdvt+0x50>)
 8019120:	227c      	movs	r2, #124	; 0x7c
 8019122:	3801      	subs	r0, #1
 8019124:	fb02 3000 	mla	r0, r2, r0, r3
 8019128:	bd30      	pop	{r4, r5, pc}
 801912a:	bf00      	nop
 801912c:	20000008 	.word	0x20000008
 8019130:	2000141c 	.word	0x2000141c
 8019134:	20001840 	.word	0x20001840

08019138 <MoblePalCryptoGetNetworkIdToBeAdvt>:
 8019138:	b5f0      	push	{r4, r5, r6, r7, lr}
 801913a:	4d1c      	ldr	r5, [pc, #112]	; (80191ac <MoblePalCryptoGetNetworkIdToBeAdvt+0x74>)
 801913c:	4c1c      	ldr	r4, [pc, #112]	; (80191b0 <MoblePalCryptoGetNetworkIdToBeAdvt+0x78>)
 801913e:	f895 365e 	ldrb.w	r3, [r5, #1630]	; 0x65e
 8019142:	f895 661c 	ldrb.w	r6, [r5, #1564]	; 0x61c
 8019146:	481b      	ldr	r0, [pc, #108]	; (80191b4 <MoblePalCryptoGetNetworkIdToBeAdvt+0x7c>)
 8019148:	42b3      	cmp	r3, r6
 801914a:	bf24      	itt	cs
 801914c:	2300      	movcs	r3, #0
 801914e:	f885 365e 	strbcs.w	r3, [r5, #1630]	; 0x65e
 8019152:	f895 265e 	ldrb.w	r2, [r5, #1630]	; 0x65e
 8019156:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
 801915a:	4414      	add	r4, r2
 801915c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019160:	b2d3      	uxtb	r3, r2
 8019162:	429e      	cmp	r6, r3
 8019164:	d810      	bhi.n	8019188 <MoblePalCryptoGetNetworkIdToBeAdvt+0x50>
 8019166:	3301      	adds	r3, #1
 8019168:	b2db      	uxtb	r3, r3
 801916a:	f885 365e 	strb.w	r3, [r5, #1630]	; 0x65e
 801916e:	217c      	movs	r1, #124	; 0x7c
 8019170:	3b01      	subs	r3, #1
 8019172:	434b      	muls	r3, r1
 8019174:	4910      	ldr	r1, [pc, #64]	; (80191b8 <MoblePalCryptoGetNetworkIdToBeAdvt+0x80>)
 8019176:	440a      	add	r2, r1
 8019178:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 801917c:	2a02      	cmp	r2, #2
 801917e:	bf0c      	ite	eq
 8019180:	3330      	addeq	r3, #48	; 0x30
 8019182:	3328      	addne	r3, #40	; 0x28
 8019184:	4418      	add	r0, r3
 8019186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019188:	f891 7021 	ldrb.w	r7, [r1, #33]	; 0x21
 801918c:	2f01      	cmp	r7, #1
 801918e:	d102      	bne.n	8019196 <MoblePalCryptoGetNetworkIdToBeAdvt+0x5e>
 8019190:	7827      	ldrb	r7, [r4, #0]
 8019192:	2f02      	cmp	r7, #2
 8019194:	d1e7      	bne.n	8019166 <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 8019196:	f891 7022 	ldrb.w	r7, [r1, #34]	; 0x22
 801919a:	2f01      	cmp	r7, #1
 801919c:	d102      	bne.n	80191a4 <MoblePalCryptoGetNetworkIdToBeAdvt+0x6c>
 801919e:	7827      	ldrb	r7, [r4, #0]
 80191a0:	2f02      	cmp	r7, #2
 80191a2:	d0e0      	beq.n	8019166 <MoblePalCryptoGetNetworkIdToBeAdvt+0x2e>
 80191a4:	3201      	adds	r2, #1
 80191a6:	3401      	adds	r4, #1
 80191a8:	317c      	adds	r1, #124	; 0x7c
 80191aa:	e7d9      	b.n	8019160 <MoblePalCryptoGetNetworkIdToBeAdvt+0x28>
 80191ac:	2000141c 	.word	0x2000141c
 80191b0:	200003e4 	.word	0x200003e4
 80191b4:	20001840 	.word	0x20001840
 80191b8:	20000324 	.word	0x20000324

080191bc <MoblePalCrypto_GetNetKeyIndexes>:
 80191bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80191be:	2300      	movs	r3, #0
 80191c0:	f8df c038 	ldr.w	ip, [pc, #56]	; 80191fc <MoblePalCrypto_GetNetKeyIndexes+0x40>
 80191c4:	4e0c      	ldr	r6, [pc, #48]	; (80191f8 <MoblePalCrypto_GetNetKeyIndexes+0x3c>)
 80191c6:	461a      	mov	r2, r3
 80191c8:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 80191cc:	f8bc 7000 	ldrh.w	r7, [ip]
 80191d0:	b2dc      	uxtb	r4, r3
 80191d2:	42bc      	cmp	r4, r7
 80191d4:	d303      	bcc.n	80191de <MoblePalCrypto_GetNetKeyIndexes+0x22>
 80191d6:	f896 361c 	ldrb.w	r3, [r6, #1564]	; 0x61c
 80191da:	800b      	strh	r3, [r1, #0]
 80191dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191de:	fb0e 6404 	mla	r4, lr, r4, r6
 80191e2:	f894 5445 	ldrb.w	r5, [r4, #1093]	; 0x445
 80191e6:	b12d      	cbz	r5, 80191f4 <MoblePalCrypto_GetNetKeyIndexes+0x38>
 80191e8:	f8b4 4448 	ldrh.w	r4, [r4, #1096]	; 0x448
 80191ec:	f820 4012 	strh.w	r4, [r0, r2, lsl #1]
 80191f0:	3201      	adds	r2, #1
 80191f2:	b2d2      	uxtb	r2, r2
 80191f4:	3301      	adds	r3, #1
 80191f6:	e7e9      	b.n	80191cc <MoblePalCrypto_GetNetKeyIndexes+0x10>
 80191f8:	2000141c 	.word	0x2000141c
 80191fc:	20000008 	.word	0x20000008

08019200 <MoblePalCrypto_isPrimarySubnet>:
 8019200:	4b0b      	ldr	r3, [pc, #44]	; (8019230 <MoblePalCrypto_isPrimarySubnet+0x30>)
 8019202:	b530      	push	{r4, r5, lr}
 8019204:	4c0b      	ldr	r4, [pc, #44]	; (8019234 <MoblePalCrypto_isPrimarySubnet+0x34>)
 8019206:	8819      	ldrh	r1, [r3, #0]
 8019208:	257c      	movs	r5, #124	; 0x7c
 801920a:	2300      	movs	r3, #0
 801920c:	b2da      	uxtb	r2, r3
 801920e:	428a      	cmp	r2, r1
 8019210:	d301      	bcc.n	8019216 <MoblePalCrypto_isPrimarySubnet+0x16>
 8019212:	2000      	movs	r0, #0
 8019214:	bd30      	pop	{r4, r5, pc}
 8019216:	fb05 4202 	mla	r2, r5, r2, r4
 801921a:	f892 0445 	ldrb.w	r0, [r2, #1093]	; 0x445
 801921e:	b110      	cbz	r0, 8019226 <MoblePalCrypto_isPrimarySubnet+0x26>
 8019220:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 8019224:	b10a      	cbz	r2, 801922a <MoblePalCrypto_isPrimarySubnet+0x2a>
 8019226:	3301      	adds	r3, #1
 8019228:	e7f0      	b.n	801920c <MoblePalCrypto_isPrimarySubnet+0xc>
 801922a:	2001      	movs	r0, #1
 801922c:	e7f2      	b.n	8019214 <MoblePalCrypto_isPrimarySubnet+0x14>
 801922e:	bf00      	nop
 8019230:	20000008 	.word	0x20000008
 8019234:	2000141c 	.word	0x2000141c

08019238 <MoblePalCryptoSetDevKey>:
 8019238:	b510      	push	{r4, lr}
 801923a:	4c05      	ldr	r4, [pc, #20]	; (8019250 <MoblePalCryptoSetDevKey+0x18>)
 801923c:	4601      	mov	r1, r0
 801923e:	2210      	movs	r2, #16
 8019240:	f504 60c4 	add.w	r0, r4, #1568	; 0x620
 8019244:	f010 fb1c 	bl	8029880 <memmove>
 8019248:	2301      	movs	r3, #1
 801924a:	f884 361e 	strb.w	r3, [r4, #1566]	; 0x61e
 801924e:	bd10      	pop	{r4, pc}
 8019250:	2000141c 	.word	0x2000141c

08019254 <MoblePalCryptoForgetAllKeys>:
 8019254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019258:	4e36      	ldr	r6, [pc, #216]	; (8019334 <MoblePalCryptoForgetAllKeys+0xe0>)
 801925a:	4c37      	ldr	r4, [pc, #220]	; (8019338 <MoblePalCryptoForgetAllKeys+0xe4>)
 801925c:	2500      	movs	r5, #0
 801925e:	8833      	ldrh	r3, [r6, #0]
 8019260:	b2ef      	uxtb	r7, r5
 8019262:	429f      	cmp	r7, r3
 8019264:	d314      	bcc.n	8019290 <MoblePalCryptoForgetAllKeys+0x3c>
 8019266:	f04f 0a00 	mov.w	sl, #0
 801926a:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8019340 <MoblePalCryptoForgetAllKeys+0xec>
 801926e:	272c      	movs	r7, #44	; 0x2c
 8019270:	46d0      	mov	r8, sl
 8019272:	8932      	ldrh	r2, [r6, #8]
 8019274:	fa5f f58a 	uxtb.w	r5, sl
 8019278:	4295      	cmp	r5, r2
 801927a:	d32e      	bcc.n	80192da <MoblePalCryptoForgetAllKeys+0x86>
 801927c:	2210      	movs	r2, #16
 801927e:	2100      	movs	r1, #0
 8019280:	482e      	ldr	r0, [pc, #184]	; (801933c <MoblePalCryptoForgetAllKeys+0xe8>)
 8019282:	f010 fb17 	bl	80298b4 <memset>
 8019286:	2000      	movs	r0, #0
 8019288:	f884 061e 	strb.w	r0, [r4, #1566]	; 0x61e
 801928c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019290:	207c      	movs	r0, #124	; 0x7c
 8019292:	4378      	muls	r0, r7
 8019294:	1823      	adds	r3, r4, r0
 8019296:	f893 2445 	ldrb.w	r2, [r3, #1093]	; 0x445
 801929a:	2a01      	cmp	r2, #1
 801929c:	d10c      	bne.n	80192b8 <MoblePalCryptoForgetAllKeys+0x64>
 801929e:	2100      	movs	r1, #0
 80192a0:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
 80192a4:	4b26      	ldr	r3, [pc, #152]	; (8019340 <MoblePalCryptoForgetAllKeys+0xec>)
 80192a6:	2210      	movs	r2, #16
 80192a8:	4418      	add	r0, r3
 80192aa:	f010 fb03 	bl	80298b4 <memset>
 80192ae:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 80192b2:	3b01      	subs	r3, #1
 80192b4:	f884 361c 	strb.w	r3, [r4, #1564]	; 0x61c
 80192b8:	237c      	movs	r3, #124	; 0x7c
 80192ba:	437b      	muls	r3, r7
 80192bc:	18e2      	adds	r2, r4, r3
 80192be:	f892 1446 	ldrb.w	r1, [r2, #1094]	; 0x446
 80192c2:	2901      	cmp	r1, #1
 80192c4:	d107      	bne.n	80192d6 <MoblePalCryptoForgetAllKeys+0x82>
 80192c6:	481f      	ldr	r0, [pc, #124]	; (8019344 <MoblePalCryptoForgetAllKeys+0xf0>)
 80192c8:	2100      	movs	r1, #0
 80192ca:	f882 1446 	strb.w	r1, [r2, #1094]	; 0x446
 80192ce:	4418      	add	r0, r3
 80192d0:	2210      	movs	r2, #16
 80192d2:	f010 faef 	bl	80298b4 <memset>
 80192d6:	3501      	adds	r5, #1
 80192d8:	e7c1      	b.n	801925e <MoblePalCryptoForgetAllKeys+0xa>
 80192da:	fb07 f005 	mul.w	r0, r7, r5
 80192de:	1823      	adds	r3, r4, r0
 80192e0:	f893 25b8 	ldrb.w	r2, [r3, #1464]	; 0x5b8
 80192e4:	2a01      	cmp	r2, #1
 80192e6:	d10d      	bne.n	8019304 <MoblePalCryptoForgetAllKeys+0xb0>
 80192e8:	f500 70ba 	add.w	r0, r0, #372	; 0x174
 80192ec:	f883 85b8 	strb.w	r8, [r3, #1464]	; 0x5b8
 80192f0:	2210      	movs	r2, #16
 80192f2:	2100      	movs	r1, #0
 80192f4:	4448      	add	r0, r9
 80192f6:	f010 fadd 	bl	80298b4 <memset>
 80192fa:	f894 361d 	ldrb.w	r3, [r4, #1565]	; 0x61d
 80192fe:	3b01      	subs	r3, #1
 8019300:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 8019304:	437d      	muls	r5, r7
 8019306:	1963      	adds	r3, r4, r5
 8019308:	f893 25b9 	ldrb.w	r2, [r3, #1465]	; 0x5b9
 801930c:	2a01      	cmp	r2, #1
 801930e:	d10e      	bne.n	801932e <MoblePalCryptoForgetAllKeys+0xda>
 8019310:	f505 75c2 	add.w	r5, r5, #388	; 0x184
 8019314:	f883 85b9 	strb.w	r8, [r3, #1465]	; 0x5b9
 8019318:	2210      	movs	r2, #16
 801931a:	2100      	movs	r1, #0
 801931c:	eb09 0005 	add.w	r0, r9, r5
 8019320:	f010 fac8 	bl	80298b4 <memset>
 8019324:	f894 361d 	ldrb.w	r3, [r4, #1565]	; 0x61d
 8019328:	3b01      	subs	r3, #1
 801932a:	f884 361d 	strb.w	r3, [r4, #1565]	; 0x61d
 801932e:	f10a 0a01 	add.w	sl, sl, #1
 8019332:	e79e      	b.n	8019272 <MoblePalCryptoForgetAllKeys+0x1e>
 8019334:	20000008 	.word	0x20000008
 8019338:	2000141c 	.word	0x2000141c
 801933c:	20001a3c 	.word	0x20001a3c
 8019340:	20001840 	.word	0x20001840
 8019344:	20001850 	.word	0x20001850

08019348 <MoblePalCryptoModelsDeInit>:
 8019348:	b570      	push	{r4, r5, r6, lr}
 801934a:	4c1e      	ldr	r4, [pc, #120]	; (80193c4 <MoblePalCryptoModelsDeInit+0x7c>)
 801934c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801934e:	b09e      	sub	sp, #120	; 0x78
 8019350:	ad0e      	add	r5, sp, #56	; 0x38
 8019352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8019356:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801935a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801935c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8019360:	f104 0610 	add.w	r6, r4, #16
 8019364:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8019368:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801936a:	ad01      	add	r5, sp, #4
 801936c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801936e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019372:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8019374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8019376:	6833      	ldr	r3, [r6, #0]
 8019378:	602b      	str	r3, [r5, #0]
 801937a:	3c34      	subs	r4, #52	; 0x34
 801937c:	2500      	movs	r5, #0
 801937e:	4620      	mov	r0, r4
 8019380:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8019384:	2100      	movs	r1, #0
 8019386:	3501      	adds	r5, #1
 8019388:	f010 fa94 	bl	80298b4 <memset>
 801938c:	2d05      	cmp	r5, #5
 801938e:	f504 7439 	add.w	r4, r4, #740	; 0x2e4
 8019392:	d1f4      	bne.n	801937e <MoblePalCryptoModelsDeInit+0x36>
 8019394:	ad0e      	add	r5, sp, #56	; 0x38
 8019396:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8019398:	4c0a      	ldr	r4, [pc, #40]	; (80193c4 <MoblePalCryptoModelsDeInit+0x7c>)
 801939a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801939c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801939e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193a4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80193a8:	ad01      	add	r5, sp, #4
 80193aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80193ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193b0:	3410      	adds	r4, #16
 80193b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80193ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80193bc:	682b      	ldr	r3, [r5, #0]
 80193be:	6023      	str	r3, [r4, #0]
 80193c0:	b01e      	add	sp, #120	; 0x78
 80193c2:	bd70      	pop	{r4, r5, r6, pc}
 80193c4:	200003d4 	.word	0x200003d4

080193c8 <MoblePalCryptoGetNetworkSecurityKeys>:
 80193c8:	4b09      	ldr	r3, [pc, #36]	; (80193f0 <MoblePalCryptoGetNetworkSecurityKeys+0x28>)
 80193ca:	227c      	movs	r2, #124	; 0x7c
 80193cc:	fb02 3301 	mla	r3, r2, r1, r3
 80193d0:	b958      	cbnz	r0, 80193ea <MoblePalCryptoGetNetworkSecurityKeys+0x22>
 80193d2:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 80193d6:	4807      	ldr	r0, [pc, #28]	; (80193f4 <MoblePalCryptoGetNetworkSecurityKeys+0x2c>)
 80193d8:	2b01      	cmp	r3, #1
 80193da:	bf18      	it	ne
 80193dc:	2100      	movne	r1, #0
 80193de:	b209      	sxth	r1, r1
 80193e0:	ebc1 1141 	rsb	r1, r1, r1, lsl #5
 80193e4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80193e8:	4770      	bx	lr
 80193ea:	f893 3446 	ldrb.w	r3, [r3, #1094]	; 0x446
 80193ee:	e7f2      	b.n	80193d6 <MoblePalCryptoGetNetworkSecurityKeys+0xe>
 80193f0:	2000141c 	.word	0x2000141c
 80193f4:	20001840 	.word	0x20001840

080193f8 <MoblePalCryptoGetApplicationSecurityKeys>:
 80193f8:	4b0a      	ldr	r3, [pc, #40]	; (8019424 <MoblePalCryptoGetApplicationSecurityKeys+0x2c>)
 80193fa:	222c      	movs	r2, #44	; 0x2c
 80193fc:	fb02 3301 	mla	r3, r2, r1, r3
 8019400:	b960      	cbnz	r0, 801941c <MoblePalCryptoGetApplicationSecurityKeys+0x24>
 8019402:	f893 35b8 	ldrb.w	r3, [r3, #1464]	; 0x5b8
 8019406:	2b01      	cmp	r3, #1
 8019408:	bf18      	it	ne
 801940a:	2100      	movne	r1, #0
 801940c:	202c      	movs	r0, #44	; 0x2c
 801940e:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8019412:	fb10 3101 	smlabb	r1, r0, r1, r3
 8019416:	4804      	ldr	r0, [pc, #16]	; (8019428 <MoblePalCryptoGetApplicationSecurityKeys+0x30>)
 8019418:	4408      	add	r0, r1
 801941a:	4770      	bx	lr
 801941c:	f893 35b9 	ldrb.w	r3, [r3, #1465]	; 0x5b9
 8019420:	e7f1      	b.n	8019406 <MoblePalCryptoGetApplicationSecurityKeys+0xe>
 8019422:	bf00      	nop
 8019424:	2000141c 	.word	0x2000141c
 8019428:	20001840 	.word	0x20001840

0801942c <MoblePalCryptoGetSecurityKeys_Beacon>:
 801942c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019430:	4c18      	ldr	r4, [pc, #96]	; (8019494 <MoblePalCryptoGetSecurityKeys_Beacon+0x68>)
 8019432:	f8df 9068 	ldr.w	r9, [pc, #104]	; 801949c <MoblePalCryptoGetSecurityKeys_Beacon+0x70>
 8019436:	f894 861c 	ldrb.w	r8, [r4, #1564]	; 0x61c
 801943a:	4607      	mov	r7, r0
 801943c:	f204 4454 	addw	r4, r4, #1108	; 0x454
 8019440:	2600      	movs	r6, #0
 8019442:	b2f5      	uxtb	r5, r6
 8019444:	45a8      	cmp	r8, r5
 8019446:	d807      	bhi.n	8019458 <MoblePalCryptoGetSecurityKeys_Beacon+0x2c>
 8019448:	2500      	movs	r5, #0
 801944a:	4813      	ldr	r0, [pc, #76]	; (8019498 <MoblePalCryptoGetSecurityKeys_Beacon+0x6c>)
 801944c:	ebc5 1545 	rsb	r5, r5, r5, lsl #5
 8019450:	eb00 0085 	add.w	r0, r0, r5, lsl #2
 8019454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019458:	f814 3c0f 	ldrb.w	r3, [r4, #-15]
 801945c:	b163      	cbz	r3, 8019478 <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 801945e:	eb06 0309 	add.w	r3, r6, r9
 8019462:	7d1b      	ldrb	r3, [r3, #20]
 8019464:	2b02      	cmp	r3, #2
 8019466:	d007      	beq.n	8019478 <MoblePalCryptoGetSecurityKeys_Beacon+0x4c>
 8019468:	2208      	movs	r2, #8
 801946a:	f1a4 0108 	sub.w	r1, r4, #8
 801946e:	4638      	mov	r0, r7
 8019470:	f010 f9f6 	bl	8029860 <memcmp>
 8019474:	2800      	cmp	r0, #0
 8019476:	d0e8      	beq.n	801944a <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 8019478:	f814 3c0e 	ldrb.w	r3, [r4, #-14]
 801947c:	b133      	cbz	r3, 801948c <MoblePalCryptoGetSecurityKeys_Beacon+0x60>
 801947e:	2208      	movs	r2, #8
 8019480:	4621      	mov	r1, r4
 8019482:	4638      	mov	r0, r7
 8019484:	f010 f9ec 	bl	8029860 <memcmp>
 8019488:	2800      	cmp	r0, #0
 801948a:	d0de      	beq.n	801944a <MoblePalCryptoGetSecurityKeys_Beacon+0x1e>
 801948c:	3601      	adds	r6, #1
 801948e:	347c      	adds	r4, #124	; 0x7c
 8019490:	e7d7      	b.n	8019442 <MoblePalCryptoGetSecurityKeys_Beacon+0x16>
 8019492:	bf00      	nop
 8019494:	2000141c 	.word	0x2000141c
 8019498:	20001840 	.word	0x20001840
 801949c:	200003d0 	.word	0x200003d0

080194a0 <MoblePalCryptoS1>:
 80194a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80194a2:	2400      	movs	r4, #0
 80194a4:	4603      	mov	r3, r0
 80194a6:	4668      	mov	r0, sp
 80194a8:	e9cd 4400 	strd	r4, r4, [sp]
 80194ac:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80194b0:	f7ff f8be 	bl	8018630 <BAES_CmacCompute>
 80194b4:	4620      	mov	r0, r4
 80194b6:	b004      	add	sp, #16
 80194b8:	bd10      	pop	{r4, pc}
	...

080194bc <MobleConfigModelGetAddressFromVirtual>:
 80194bc:	b510      	push	{r4, lr}
 80194be:	b088      	sub	sp, #32
 80194c0:	4604      	mov	r4, r0
 80194c2:	490b      	ldr	r1, [pc, #44]	; (80194f0 <MobleConfigModelGetAddressFromVirtual+0x34>)
 80194c4:	2204      	movs	r2, #4
 80194c6:	4668      	mov	r0, sp
 80194c8:	f7ff ffea 	bl	80194a0 <MoblePalCryptoS1>
 80194cc:	ab04      	add	r3, sp, #16
 80194ce:	4668      	mov	r0, sp
 80194d0:	2210      	movs	r2, #16
 80194d2:	4621      	mov	r1, r4
 80194d4:	f7ff f8ac 	bl	8018630 <BAES_CmacCompute>
 80194d8:	f89d 001e 	ldrb.w	r0, [sp, #30]
 80194dc:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80194e0:	0200      	lsls	r0, r0, #8
 80194e2:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
 80194e6:	4318      	orrs	r0, r3
 80194e8:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80194ec:	b008      	add	sp, #32
 80194ee:	bd10      	pop	{r4, pc}
 80194f0:	0803342b 	.word	0x0803342b

080194f4 <MoblePalCryptoK2>:
 80194f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80194f8:	b098      	sub	sp, #96	; 0x60
 80194fa:	ae0f      	add	r6, sp, #60	; 0x3c
 80194fc:	460d      	mov	r5, r1
 80194fe:	4680      	mov	r8, r0
 8019500:	2100      	movs	r1, #0
 8019502:	4691      	mov	r9, r2
 8019504:	4630      	mov	r0, r6
 8019506:	2221      	movs	r2, #33	; 0x21
 8019508:	e9dd a421 	ldrd	sl, r4, [sp, #132]	; 0x84
 801950c:	461f      	mov	r7, r3
 801950e:	f010 f9d1 	bl	80298b4 <memset>
 8019512:	2210      	movs	r2, #16
 8019514:	2100      	movs	r1, #0
 8019516:	a803      	add	r0, sp, #12
 8019518:	f010 f9cc 	bl	80298b4 <memset>
 801951c:	4929      	ldr	r1, [pc, #164]	; (80195c4 <MoblePalCryptoK2+0xd0>)
 801951e:	2204      	movs	r2, #4
 8019520:	a80b      	add	r0, sp, #44	; 0x2c
 8019522:	f7ff ffbd 	bl	80194a0 <MoblePalCryptoS1>
 8019526:	ab03      	add	r3, sp, #12
 8019528:	4639      	mov	r1, r7
 801952a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801952c:	a80b      	add	r0, sp, #44	; 0x2c
 801952e:	f7ff f87f 	bl	8018630 <BAES_CmacCompute>
 8019532:	4622      	mov	r2, r4
 8019534:	4651      	mov	r1, sl
 8019536:	4630      	mov	r0, r6
 8019538:	f010 fa4d 	bl	80299d6 <memcpy>
 801953c:	f104 0360 	add.w	r3, r4, #96	; 0x60
 8019540:	446b      	add	r3, sp
 8019542:	af07      	add	r7, sp, #28
 8019544:	2201      	movs	r2, #1
 8019546:	f803 2c24 	strb.w	r2, [r3, #-36]
 801954a:	4631      	mov	r1, r6
 801954c:	463b      	mov	r3, r7
 801954e:	18a2      	adds	r2, r4, r2
 8019550:	a803      	add	r0, sp, #12
 8019552:	f7ff f86d 	bl	8018630 <BAES_CmacCompute>
 8019556:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801955a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 801955e:	4622      	mov	r2, r4
 8019560:	4651      	mov	r1, sl
 8019562:	a813      	add	r0, sp, #76	; 0x4c
 8019564:	f010 fa37 	bl	80299d6 <memcpy>
 8019568:	f104 0370 	add.w	r3, r4, #112	; 0x70
 801956c:	eb0d 0703 	add.w	r7, sp, r3
 8019570:	2302      	movs	r3, #2
 8019572:	f104 0211 	add.w	r2, r4, #17
 8019576:	f807 3c24 	strb.w	r3, [r7, #-36]
 801957a:	4631      	mov	r1, r6
 801957c:	462b      	mov	r3, r5
 801957e:	a803      	add	r0, sp, #12
 8019580:	9201      	str	r2, [sp, #4]
 8019582:	f7ff f855 	bl	8018630 <BAES_CmacCompute>
 8019586:	9a01      	ldr	r2, [sp, #4]
 8019588:	46b4      	mov	ip, r6
 801958a:	f105 0410 	add.w	r4, r5, #16
 801958e:	6828      	ldr	r0, [r5, #0]
 8019590:	6869      	ldr	r1, [r5, #4]
 8019592:	4663      	mov	r3, ip
 8019594:	c303      	stmia	r3!, {r0, r1}
 8019596:	3508      	adds	r5, #8
 8019598:	42a5      	cmp	r5, r4
 801959a:	469c      	mov	ip, r3
 801959c:	d1f7      	bne.n	801958e <MoblePalCryptoK2+0x9a>
 801959e:	2303      	movs	r3, #3
 80195a0:	f807 3c24 	strb.w	r3, [r7, #-36]
 80195a4:	a803      	add	r0, sp, #12
 80195a6:	464b      	mov	r3, r9
 80195a8:	4631      	mov	r1, r6
 80195aa:	f7ff f841 	bl	8018630 <BAES_CmacCompute>
 80195ae:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 80195b2:	2000      	movs	r0, #0
 80195b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80195b8:	f888 3000 	strb.w	r3, [r8]
 80195bc:	b018      	add	sp, #96	; 0x60
 80195be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80195c2:	bf00      	nop
 80195c4:	08033430 	.word	0x08033430

080195c8 <MoblePalCryptoK3>:
 80195c8:	b530      	push	{r4, r5, lr}
 80195ca:	4b12      	ldr	r3, [pc, #72]	; (8019614 <MoblePalCryptoK3+0x4c>)
 80195cc:	b08f      	sub	sp, #60	; 0x3c
 80195ce:	4604      	mov	r4, r0
 80195d0:	6818      	ldr	r0, [r3, #0]
 80195d2:	9000      	str	r0, [sp, #0]
 80195d4:	791b      	ldrb	r3, [r3, #4]
 80195d6:	f88d 3004 	strb.w	r3, [sp, #4]
 80195da:	460d      	mov	r5, r1
 80195dc:	2204      	movs	r2, #4
 80195de:	490e      	ldr	r1, [pc, #56]	; (8019618 <MoblePalCryptoK3+0x50>)
 80195e0:	a802      	add	r0, sp, #8
 80195e2:	f7ff ff5d 	bl	80194a0 <MoblePalCryptoS1>
 80195e6:	2801      	cmp	r0, #1
 80195e8:	d812      	bhi.n	8019610 <MoblePalCryptoK3+0x48>
 80195ea:	ab06      	add	r3, sp, #24
 80195ec:	2210      	movs	r2, #16
 80195ee:	4629      	mov	r1, r5
 80195f0:	a802      	add	r0, sp, #8
 80195f2:	f7ff f81d 	bl	8018630 <BAES_CmacCompute>
 80195f6:	ab0a      	add	r3, sp, #40	; 0x28
 80195f8:	4669      	mov	r1, sp
 80195fa:	a806      	add	r0, sp, #24
 80195fc:	2205      	movs	r2, #5
 80195fe:	f7ff f817 	bl	8018630 <BAES_CmacCompute>
 8019602:	ab0c      	add	r3, sp, #48	; 0x30
 8019604:	cb03      	ldmia	r3!, {r0, r1}
 8019606:	6020      	str	r0, [r4, #0]
 8019608:	6061      	str	r1, [r4, #4]
 801960a:	2000      	movs	r0, #0
 801960c:	b00f      	add	sp, #60	; 0x3c
 801960e:	bd30      	pop	{r4, r5, pc}
 8019610:	2002      	movs	r0, #2
 8019612:	e7fb      	b.n	801960c <MoblePalCryptoK3+0x44>
 8019614:	0803343a 	.word	0x0803343a
 8019618:	08033435 	.word	0x08033435

0801961c <MoblePalCryptoK4>:
 801961c:	b530      	push	{r4, r5, lr}
 801961e:	b08f      	sub	sp, #60	; 0x3c
 8019620:	4b10      	ldr	r3, [pc, #64]	; (8019664 <MoblePalCryptoK4+0x48>)
 8019622:	9301      	str	r3, [sp, #4]
 8019624:	4604      	mov	r4, r0
 8019626:	460d      	mov	r5, r1
 8019628:	2204      	movs	r2, #4
 801962a:	490f      	ldr	r1, [pc, #60]	; (8019668 <MoblePalCryptoK4+0x4c>)
 801962c:	a802      	add	r0, sp, #8
 801962e:	f7ff ff37 	bl	80194a0 <MoblePalCryptoS1>
 8019632:	2801      	cmp	r0, #1
 8019634:	d814      	bhi.n	8019660 <MoblePalCryptoK4+0x44>
 8019636:	ab06      	add	r3, sp, #24
 8019638:	2210      	movs	r2, #16
 801963a:	4629      	mov	r1, r5
 801963c:	a802      	add	r0, sp, #8
 801963e:	f7fe fff7 	bl	8018630 <BAES_CmacCompute>
 8019642:	2204      	movs	r2, #4
 8019644:	ab0a      	add	r3, sp, #40	; 0x28
 8019646:	a806      	add	r0, sp, #24
 8019648:	eb0d 0102 	add.w	r1, sp, r2
 801964c:	f7fe fff0 	bl	8018630 <BAES_CmacCompute>
 8019650:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
 8019654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019658:	7023      	strb	r3, [r4, #0]
 801965a:	2000      	movs	r0, #0
 801965c:	b00f      	add	sp, #60	; 0x3c
 801965e:	bd30      	pop	{r4, r5, pc}
 8019660:	2002      	movs	r0, #2
 8019662:	e7fb      	b.n	801965c <MoblePalCryptoK4+0x40>
 8019664:	01366469 	.word	0x01366469
 8019668:	08033440 	.word	0x08033440

0801966c <MoblePalCryptoSetNewAppKey>:
 801966c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019670:	4f41      	ldr	r7, [pc, #260]	; (8019778 <MoblePalCryptoSetNewAppKey+0x10c>)
 8019672:	4c42      	ldr	r4, [pc, #264]	; (801977c <MoblePalCryptoSetNewAppKey+0x110>)
 8019674:	883e      	ldrh	r6, [r7, #0]
 8019676:	4603      	mov	r3, r0
 8019678:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 801967c:	2000      	movs	r0, #0
 801967e:	b2c5      	uxtb	r5, r0
 8019680:	42b5      	cmp	r5, r6
 8019682:	d301      	bcc.n	8019688 <MoblePalCryptoSetNewAppKey+0x1c>
 8019684:	2600      	movs	r6, #0
 8019686:	e029      	b.n	80196dc <MoblePalCryptoSetNewAppKey+0x70>
 8019688:	fb0e 4505 	mla	r5, lr, r5, r4
 801968c:	3001      	adds	r0, #1
 801968e:	f8b5 5448 	ldrh.w	r5, [r5, #1096]	; 0x448
 8019692:	4295      	cmp	r5, r2
 8019694:	d1f3      	bne.n	801967e <MoblePalCryptoSetNewAppKey+0x12>
 8019696:	2500      	movs	r5, #0
 8019698:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 801969c:	4628      	mov	r0, r5
 801969e:	f04f 092c 	mov.w	r9, #44	; 0x2c
 80196a2:	b2ee      	uxtb	r6, r5
 80196a4:	4546      	cmp	r6, r8
 80196a6:	d302      	bcc.n	80196ae <MoblePalCryptoSetNewAppKey+0x42>
 80196a8:	b1c0      	cbz	r0, 80196dc <MoblePalCryptoSetNewAppKey+0x70>
 80196aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80196ae:	fb09 f006 	mul.w	r0, r9, r6
 80196b2:	eb04 0c00 	add.w	ip, r4, r0
 80196b6:	f89c e5b9 	ldrb.w	lr, [ip, #1465]	; 0x5b9
 80196ba:	f1be 0f00 	cmp.w	lr, #0
 80196be:	d11d      	bne.n	80196fc <MoblePalCryptoSetNewAppKey+0x90>
 80196c0:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	; 0x5be
 80196c4:	4596      	cmp	lr, r2
 80196c6:	d131      	bne.n	801972c <MoblePalCryptoSetNewAppKey+0xc0>
 80196c8:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	; 0x5ba
 80196cc:	458c      	cmp	ip, r1
 80196ce:	d12d      	bne.n	801972c <MoblePalCryptoSetNewAppKey+0xc0>
 80196d0:	4619      	mov	r1, r3
 80196d2:	4b2b      	ldr	r3, [pc, #172]	; (8019780 <MoblePalCryptoSetNewAppKey+0x114>)
 80196d4:	2210      	movs	r2, #16
 80196d6:	4418      	add	r0, r3
 80196d8:	f010 f8d2 	bl	8029880 <memmove>
 80196dc:	222c      	movs	r2, #44	; 0x2c
 80196de:	f8b7 e008 	ldrh.w	lr, [r7, #8]
 80196e2:	4828      	ldr	r0, [pc, #160]	; (8019784 <MoblePalCryptoSetNewAppKey+0x118>)
 80196e4:	f894 c61d 	ldrb.w	ip, [r4, #1565]	; 0x61d
 80196e8:	fb16 f702 	smulbb	r7, r6, r2
 80196ec:	f507 71c2 	add.w	r1, r7, #388	; 0x184
 80196f0:	4401      	add	r1, r0
 80196f2:	460d      	mov	r5, r1
 80196f4:	2310      	movs	r3, #16
 80196f6:	fb02 4406 	mla	r4, r2, r6, r4
 80196fa:	e022      	b.n	8019742 <MoblePalCryptoSetNewAppKey+0xd6>
 80196fc:	f1be 0f01 	cmp.w	lr, #1
 8019700:	d114      	bne.n	801972c <MoblePalCryptoSetNewAppKey+0xc0>
 8019702:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	; 0x5be
 8019706:	4596      	cmp	lr, r2
 8019708:	d110      	bne.n	801972c <MoblePalCryptoSetNewAppKey+0xc0>
 801970a:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	; 0x5ba
 801970e:	458c      	cmp	ip, r1
 8019710:	d10c      	bne.n	801972c <MoblePalCryptoSetNewAppKey+0xc0>
 8019712:	4a1b      	ldr	r2, [pc, #108]	; (8019780 <MoblePalCryptoSetNewAppKey+0x114>)
 8019714:	4410      	add	r0, r2
 8019716:	1e5a      	subs	r2, r3, #1
 8019718:	330f      	adds	r3, #15
 801971a:	f810 1b01 	ldrb.w	r1, [r0], #1
 801971e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8019722:	428d      	cmp	r5, r1
 8019724:	d125      	bne.n	8019772 <MoblePalCryptoSetNewAppKey+0x106>
 8019726:	429a      	cmp	r2, r3
 8019728:	d1f7      	bne.n	801971a <MoblePalCryptoSetNewAppKey+0xae>
 801972a:	e7d7      	b.n	80196dc <MoblePalCryptoSetNewAppKey+0x70>
 801972c:	3501      	adds	r5, #1
 801972e:	2001      	movs	r0, #1
 8019730:	e7b7      	b.n	80196a2 <MoblePalCryptoSetNewAppKey+0x36>
 8019732:	f886 8000 	strb.w	r8, [r6]
 8019736:	2002      	movs	r0, #2
 8019738:	e7b7      	b.n	80196aa <MoblePalCryptoSetNewAppKey+0x3e>
 801973a:	3b01      	subs	r3, #1
 801973c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019740:	d015      	beq.n	801976e <MoblePalCryptoSetNewAppKey+0x102>
 8019742:	f815 2b01 	ldrb.w	r2, [r5], #1
 8019746:	2a00      	cmp	r2, #0
 8019748:	d0f7      	beq.n	801973a <MoblePalCryptoSetNewAppKey+0xce>
 801974a:	45f4      	cmp	ip, lr
 801974c:	d8f5      	bhi.n	801973a <MoblePalCryptoSetNewAppKey+0xce>
 801974e:	f894 85b9 	ldrb.w	r8, [r4, #1465]	; 0x5b9
 8019752:	f204 56b9 	addw	r6, r4, #1465	; 0x5b9
 8019756:	f1b8 0f00 	cmp.w	r8, #0
 801975a:	d1ee      	bne.n	801973a <MoblePalCryptoSetNewAppKey+0xce>
 801975c:	2301      	movs	r3, #1
 801975e:	f207 1799 	addw	r7, r7, #409	; 0x199
 8019762:	7033      	strb	r3, [r6, #0]
 8019764:	4438      	add	r0, r7
 8019766:	f7ff ff59 	bl	801961c <MoblePalCryptoK4>
 801976a:	2801      	cmp	r0, #1
 801976c:	d8e1      	bhi.n	8019732 <MoblePalCryptoSetNewAppKey+0xc6>
 801976e:	2000      	movs	r0, #0
 8019770:	e79b      	b.n	80196aa <MoblePalCryptoSetNewAppKey+0x3e>
 8019772:	2003      	movs	r0, #3
 8019774:	e799      	b.n	80196aa <MoblePalCryptoSetNewAppKey+0x3e>
 8019776:	bf00      	nop
 8019778:	20000008 	.word	0x20000008
 801977c:	2000141c 	.word	0x2000141c
 8019780:	200019c4 	.word	0x200019c4
 8019784:	20001840 	.word	0x20001840

08019788 <MoblePalCryptoSetAppKey>:
 8019788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801978c:	4f43      	ldr	r7, [pc, #268]	; (801989c <MoblePalCryptoSetAppKey+0x114>)
 801978e:	4d44      	ldr	r5, [pc, #272]	; (80198a0 <MoblePalCryptoSetAppKey+0x118>)
 8019790:	883c      	ldrh	r4, [r7, #0]
 8019792:	4616      	mov	r6, r2
 8019794:	4603      	mov	r3, r0
 8019796:	2200      	movs	r2, #0
 8019798:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 801979c:	b2d0      	uxtb	r0, r2
 801979e:	42a0      	cmp	r0, r4
 80197a0:	d301      	bcc.n	80197a6 <MoblePalCryptoSetAppKey+0x1e>
 80197a2:	2400      	movs	r4, #0
 80197a4:	e026      	b.n	80197f4 <MoblePalCryptoSetAppKey+0x6c>
 80197a6:	fb0e 5000 	mla	r0, lr, r0, r5
 80197aa:	3201      	adds	r2, #1
 80197ac:	f8b0 0448 	ldrh.w	r0, [r0, #1096]	; 0x448
 80197b0:	42b0      	cmp	r0, r6
 80197b2:	d1f3      	bne.n	801979c <MoblePalCryptoSetAppKey+0x14>
 80197b4:	2200      	movs	r2, #0
 80197b6:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80197ba:	4610      	mov	r0, r2
 80197bc:	f04f 092c 	mov.w	r9, #44	; 0x2c
 80197c0:	b2d4      	uxtb	r4, r2
 80197c2:	4544      	cmp	r4, r8
 80197c4:	d302      	bcc.n	80197cc <MoblePalCryptoSetAppKey+0x44>
 80197c6:	b1a8      	cbz	r0, 80197f4 <MoblePalCryptoSetAppKey+0x6c>
 80197c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80197cc:	fb09 f004 	mul.w	r0, r9, r4
 80197d0:	eb05 0c00 	add.w	ip, r5, r0
 80197d4:	f89c e5b8 	ldrb.w	lr, [ip, #1464]	; 0x5b8
 80197d8:	f1be 0f00 	cmp.w	lr, #0
 80197dc:	d11a      	bne.n	8019814 <MoblePalCryptoSetAppKey+0x8c>
 80197de:	f8ac 15ba 	strh.w	r1, [ip, #1466]	; 0x5ba
 80197e2:	4619      	mov	r1, r3
 80197e4:	4b2f      	ldr	r3, [pc, #188]	; (80198a4 <MoblePalCryptoSetAppKey+0x11c>)
 80197e6:	2210      	movs	r2, #16
 80197e8:	4418      	add	r0, r3
 80197ea:	f010 f849 	bl	8029880 <memmove>
 80197ee:	1c63      	adds	r3, r4, #1
 80197f0:	f885 361d 	strb.w	r3, [r5, #1565]	; 0x61d
 80197f4:	f8b7 8008 	ldrh.w	r8, [r7, #8]
 80197f8:	482b      	ldr	r0, [pc, #172]	; (80198a8 <MoblePalCryptoSetAppKey+0x120>)
 80197fa:	f895 e61d 	ldrb.w	lr, [r5, #1565]	; 0x61d
 80197fe:	272c      	movs	r7, #44	; 0x2c
 8019800:	fb14 f207 	smulbb	r2, r4, r7
 8019804:	f502 71ba 	add.w	r1, r2, #372	; 0x174
 8019808:	4401      	add	r1, r0
 801980a:	468c      	mov	ip, r1
 801980c:	2310      	movs	r3, #16
 801980e:	fb07 5404 	mla	r4, r7, r4, r5
 8019812:	e025      	b.n	8019860 <MoblePalCryptoSetAppKey+0xd8>
 8019814:	f1be 0f01 	cmp.w	lr, #1
 8019818:	d114      	bne.n	8019844 <MoblePalCryptoSetAppKey+0xbc>
 801981a:	f8bc e5be 	ldrh.w	lr, [ip, #1470]	; 0x5be
 801981e:	45b6      	cmp	lr, r6
 8019820:	d110      	bne.n	8019844 <MoblePalCryptoSetAppKey+0xbc>
 8019822:	f8bc c5ba 	ldrh.w	ip, [ip, #1466]	; 0x5ba
 8019826:	458c      	cmp	ip, r1
 8019828:	d10c      	bne.n	8019844 <MoblePalCryptoSetAppKey+0xbc>
 801982a:	4a1e      	ldr	r2, [pc, #120]	; (80198a4 <MoblePalCryptoSetAppKey+0x11c>)
 801982c:	4410      	add	r0, r2
 801982e:	1e5a      	subs	r2, r3, #1
 8019830:	330f      	adds	r3, #15
 8019832:	f810 1b01 	ldrb.w	r1, [r0], #1
 8019836:	f812 cf01 	ldrb.w	ip, [r2, #1]!
 801983a:	458c      	cmp	ip, r1
 801983c:	d12b      	bne.n	8019896 <MoblePalCryptoSetAppKey+0x10e>
 801983e:	429a      	cmp	r2, r3
 8019840:	d1f7      	bne.n	8019832 <MoblePalCryptoSetAppKey+0xaa>
 8019842:	e7d7      	b.n	80197f4 <MoblePalCryptoSetAppKey+0x6c>
 8019844:	3201      	adds	r2, #1
 8019846:	2001      	movs	r0, #1
 8019848:	e7ba      	b.n	80197c0 <MoblePalCryptoSetAppKey+0x38>
 801984a:	703d      	strb	r5, [r7, #0]
 801984c:	f8a4 55be 	strh.w	r5, [r4, #1470]	; 0x5be
 8019850:	f884 55c0 	strb.w	r5, [r4, #1472]	; 0x5c0
 8019854:	2002      	movs	r0, #2
 8019856:	e7b7      	b.n	80197c8 <MoblePalCryptoSetAppKey+0x40>
 8019858:	3b01      	subs	r3, #1
 801985a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801985e:	d018      	beq.n	8019892 <MoblePalCryptoSetAppKey+0x10a>
 8019860:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8019864:	2d00      	cmp	r5, #0
 8019866:	d0f7      	beq.n	8019858 <MoblePalCryptoSetAppKey+0xd0>
 8019868:	45c6      	cmp	lr, r8
 801986a:	d8f5      	bhi.n	8019858 <MoblePalCryptoSetAppKey+0xd0>
 801986c:	f894 55b8 	ldrb.w	r5, [r4, #1464]	; 0x5b8
 8019870:	f504 67b7 	add.w	r7, r4, #1464	; 0x5b8
 8019874:	2d00      	cmp	r5, #0
 8019876:	d1ef      	bne.n	8019858 <MoblePalCryptoSetAppKey+0xd0>
 8019878:	2301      	movs	r3, #1
 801987a:	f502 72cc 	add.w	r2, r2, #408	; 0x198
 801987e:	703b      	strb	r3, [r7, #0]
 8019880:	f8a4 65be 	strh.w	r6, [r4, #1470]	; 0x5be
 8019884:	f884 35c0 	strb.w	r3, [r4, #1472]	; 0x5c0
 8019888:	4410      	add	r0, r2
 801988a:	f7ff fec7 	bl	801961c <MoblePalCryptoK4>
 801988e:	2801      	cmp	r0, #1
 8019890:	d8db      	bhi.n	801984a <MoblePalCryptoSetAppKey+0xc2>
 8019892:	2000      	movs	r0, #0
 8019894:	e798      	b.n	80197c8 <MoblePalCryptoSetAppKey+0x40>
 8019896:	2003      	movs	r0, #3
 8019898:	e796      	b.n	80197c8 <MoblePalCryptoSetAppKey+0x40>
 801989a:	bf00      	nop
 801989c:	20000008 	.word	0x20000008
 80198a0:	2000141c 	.word	0x2000141c
 80198a4:	200019b4 	.word	0x200019b4
 80198a8:	20001840 	.word	0x20001840

080198ac <MoblePalCryptoBeaconKey>:
 80198ac:	b530      	push	{r4, r5, lr}
 80198ae:	4b11      	ldr	r3, [pc, #68]	; (80198f4 <MoblePalCryptoBeaconKey+0x48>)
 80198b0:	b08b      	sub	sp, #44	; 0x2c
 80198b2:	4604      	mov	r4, r0
 80198b4:	6818      	ldr	r0, [r3, #0]
 80198b6:	9004      	str	r0, [sp, #16]
 80198b8:	889b      	ldrh	r3, [r3, #4]
 80198ba:	f8ad 3014 	strh.w	r3, [sp, #20]
 80198be:	460d      	mov	r5, r1
 80198c0:	2204      	movs	r2, #4
 80198c2:	490d      	ldr	r1, [pc, #52]	; (80198f8 <MoblePalCryptoBeaconKey+0x4c>)
 80198c4:	a806      	add	r0, sp, #24
 80198c6:	f7ff fdeb 	bl	80194a0 <MoblePalCryptoS1>
 80198ca:	2801      	cmp	r0, #1
 80198cc:	d80c      	bhi.n	80198e8 <MoblePalCryptoBeaconKey+0x3c>
 80198ce:	2306      	movs	r3, #6
 80198d0:	9302      	str	r3, [sp, #8]
 80198d2:	2210      	movs	r2, #16
 80198d4:	ab04      	add	r3, sp, #16
 80198d6:	9301      	str	r3, [sp, #4]
 80198d8:	9200      	str	r2, [sp, #0]
 80198da:	ab06      	add	r3, sp, #24
 80198dc:	4629      	mov	r1, r5
 80198de:	4620      	mov	r0, r4
 80198e0:	f7fe ff74 	bl	80187cc <MoblePalCryptoK1.part.0>
 80198e4:	2801      	cmp	r0, #1
 80198e6:	d902      	bls.n	80198ee <MoblePalCryptoBeaconKey+0x42>
 80198e8:	2002      	movs	r0, #2
 80198ea:	b00b      	add	sp, #44	; 0x2c
 80198ec:	bd30      	pop	{r4, r5, pc}
 80198ee:	2000      	movs	r0, #0
 80198f0:	e7fb      	b.n	80198ea <MoblePalCryptoBeaconKey+0x3e>
 80198f2:	bf00      	nop
 80198f4:	0803344a 	.word	0x0803344a
 80198f8:	08033445 	.word	0x08033445

080198fc <MoblePalCryptoIdentityKey>:
 80198fc:	b530      	push	{r4, r5, lr}
 80198fe:	4b11      	ldr	r3, [pc, #68]	; (8019944 <MoblePalCryptoIdentityKey+0x48>)
 8019900:	b08b      	sub	sp, #44	; 0x2c
 8019902:	4604      	mov	r4, r0
 8019904:	6818      	ldr	r0, [r3, #0]
 8019906:	9004      	str	r0, [sp, #16]
 8019908:	889b      	ldrh	r3, [r3, #4]
 801990a:	f8ad 3014 	strh.w	r3, [sp, #20]
 801990e:	460d      	mov	r5, r1
 8019910:	2204      	movs	r2, #4
 8019912:	490d      	ldr	r1, [pc, #52]	; (8019948 <MoblePalCryptoIdentityKey+0x4c>)
 8019914:	a806      	add	r0, sp, #24
 8019916:	f7ff fdc3 	bl	80194a0 <MoblePalCryptoS1>
 801991a:	2801      	cmp	r0, #1
 801991c:	d80c      	bhi.n	8019938 <MoblePalCryptoIdentityKey+0x3c>
 801991e:	2306      	movs	r3, #6
 8019920:	9302      	str	r3, [sp, #8]
 8019922:	2210      	movs	r2, #16
 8019924:	ab04      	add	r3, sp, #16
 8019926:	9301      	str	r3, [sp, #4]
 8019928:	9200      	str	r2, [sp, #0]
 801992a:	ab06      	add	r3, sp, #24
 801992c:	4629      	mov	r1, r5
 801992e:	4620      	mov	r0, r4
 8019930:	f7fe ff4c 	bl	80187cc <MoblePalCryptoK1.part.0>
 8019934:	2801      	cmp	r0, #1
 8019936:	d902      	bls.n	801993e <MoblePalCryptoIdentityKey+0x42>
 8019938:	2002      	movs	r0, #2
 801993a:	b00b      	add	sp, #44	; 0x2c
 801993c:	bd30      	pop	{r4, r5, pc}
 801993e:	2000      	movs	r0, #0
 8019940:	e7fb      	b.n	801993a <MoblePalCryptoIdentityKey+0x3e>
 8019942:	bf00      	nop
 8019944:	0803344a 	.word	0x0803344a
 8019948:	08033451 	.word	0x08033451

0801994c <MoblePalCryptoAesCcmEncrypt>:
 801994c:	b510      	push	{r4, lr}
 801994e:	b086      	sub	sp, #24
 8019950:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8019952:	9405      	str	r4, [sp, #20]
 8019954:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019956:	9404      	str	r4, [sp, #16]
 8019958:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801995a:	9403      	str	r4, [sp, #12]
 801995c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801995e:	9402      	str	r4, [sp, #8]
 8019960:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8019962:	9401      	str	r4, [sp, #4]
 8019964:	9c08      	ldr	r4, [sp, #32]
 8019966:	9400      	str	r4, [sp, #0]
 8019968:	f7ff f884 	bl	8018a74 <BAES_CcmEncrypt>
 801996c:	2800      	cmp	r0, #0
 801996e:	bf14      	ite	ne
 8019970:	2003      	movne	r0, #3
 8019972:	2000      	moveq	r0, #0
 8019974:	b006      	add	sp, #24
 8019976:	bd10      	pop	{r4, pc}

08019978 <MoblePalCryptoAesCcmDecrypt>:
 8019978:	b510      	push	{r4, lr}
 801997a:	b086      	sub	sp, #24
 801997c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801997e:	9405      	str	r4, [sp, #20]
 8019980:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8019982:	9404      	str	r4, [sp, #16]
 8019984:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8019986:	9403      	str	r4, [sp, #12]
 8019988:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801998a:	9402      	str	r4, [sp, #8]
 801998c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801998e:	9401      	str	r4, [sp, #4]
 8019990:	9c08      	ldr	r4, [sp, #32]
 8019992:	9400      	str	r4, [sp, #0]
 8019994:	f7ff f8ad 	bl	8018af2 <BAES_CcmDecrypt>
 8019998:	2800      	cmp	r0, #0
 801999a:	bf14      	ite	ne
 801999c:	2003      	movne	r0, #3
 801999e:	2000      	moveq	r0, #0
 80199a0:	b006      	add	sp, #24
 80199a2:	bd10      	pop	{r4, pc}

080199a4 <MoblePalCryptoAesEcb>:
 80199a4:	b538      	push	{r3, r4, r5, lr}
 80199a6:	460d      	mov	r5, r1
 80199a8:	4611      	mov	r1, r2
 80199aa:	4602      	mov	r2, r0
 80199ac:	b148      	cbz	r0, 80199c2 <MoblePalCryptoAesEcb+0x1e>
 80199ae:	b145      	cbz	r5, 80199c2 <MoblePalCryptoAesEcb+0x1e>
 80199b0:	b139      	cbz	r1, 80199c2 <MoblePalCryptoAesEcb+0x1e>
 80199b2:	f013 040f 	ands.w	r4, r3, #15
 80199b6:	d104      	bne.n	80199c2 <MoblePalCryptoAesEcb+0x1e>
 80199b8:	4628      	mov	r0, r5
 80199ba:	f7fe ff27 	bl	801880c <BAES_EcbEncrypt>
 80199be:	4620      	mov	r0, r4
 80199c0:	bd38      	pop	{r3, r4, r5, pc}
 80199c2:	2003      	movs	r0, #3
 80199c4:	e7fc      	b.n	80199c0 <MoblePalCryptoAesEcb+0x1c>

080199c6 <MoblePalCryptoXor>:
 80199c6:	b510      	push	{r4, lr}
 80199c8:	3901      	subs	r1, #1
 80199ca:	4402      	add	r2, r0
 80199cc:	4290      	cmp	r0, r2
 80199ce:	d100      	bne.n	80199d2 <MoblePalCryptoXor+0xc>
 80199d0:	bd10      	pop	{r4, pc}
 80199d2:	7803      	ldrb	r3, [r0, #0]
 80199d4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80199d8:	4063      	eors	r3, r4
 80199da:	f800 3b01 	strb.w	r3, [r0], #1
 80199de:	e7f5      	b.n	80199cc <MoblePalCryptoXor+0x6>

080199e0 <MoblePalCryptoUpdateNetKeyVectors>:
 80199e0:	b510      	push	{r4, lr}
 80199e2:	b088      	sub	sp, #32
 80199e4:	2300      	movs	r3, #0
 80199e6:	f88d 301f 	strb.w	r3, [sp, #31]
 80199ea:	4604      	mov	r4, r0
 80199ec:	b930      	cbnz	r0, 80199fc <MoblePalCryptoUpdateNetKeyVectors+0x1c>
 80199ee:	4b22      	ldr	r3, [pc, #136]	; (8019a78 <MoblePalCryptoUpdateNetKeyVectors+0x98>)
 80199f0:	4a22      	ldr	r2, [pc, #136]	; (8019a7c <MoblePalCryptoUpdateNetKeyVectors+0x9c>)
 80199f2:	4823      	ldr	r0, [pc, #140]	; (8019a80 <MoblePalCryptoUpdateNetKeyVectors+0xa0>)
 80199f4:	f240 5185 	movw	r1, #1413	; 0x585
 80199f8:	f00f f866 	bl	8028ac8 <__assert_func>
 80199fc:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8019a00:	b913      	cbnz	r3, 8019a08 <MoblePalCryptoUpdateNetKeyVectors+0x28>
 8019a02:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8019a06:	b1e3      	cbz	r3, 8019a42 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 8019a08:	b1e9      	cbz	r1, 8019a46 <MoblePalCryptoUpdateNetKeyVectors+0x66>
 8019a0a:	4621      	mov	r1, r4
 8019a0c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8019a10:	f7ff fdda 	bl	80195c8 <MoblePalCryptoK3>
 8019a14:	2801      	cmp	r0, #1
 8019a16:	d814      	bhi.n	8019a42 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 8019a18:	2301      	movs	r3, #1
 8019a1a:	9302      	str	r3, [sp, #8]
 8019a1c:	f10d 031f 	add.w	r3, sp, #31
 8019a20:	9301      	str	r3, [sp, #4]
 8019a22:	2310      	movs	r3, #16
 8019a24:	9300      	str	r3, [sp, #0]
 8019a26:	f104 025c 	add.w	r2, r4, #92	; 0x5c
 8019a2a:	4623      	mov	r3, r4
 8019a2c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 8019a30:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8019a34:	f7ff fd5e 	bl	80194f4 <MoblePalCryptoK2>
 8019a38:	2801      	cmp	r0, #1
 8019a3a:	d802      	bhi.n	8019a42 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 8019a3c:	2000      	movs	r0, #0
 8019a3e:	b008      	add	sp, #32
 8019a40:	bd10      	pop	{r4, pc}
 8019a42:	2002      	movs	r0, #2
 8019a44:	e7fb      	b.n	8019a3e <MoblePalCryptoUpdateNetKeyVectors+0x5e>
 8019a46:	f104 0310 	add.w	r3, r4, #16
 8019a4a:	4619      	mov	r1, r3
 8019a4c:	f104 0030 	add.w	r0, r4, #48	; 0x30
 8019a50:	9305      	str	r3, [sp, #20]
 8019a52:	f7ff fdb9 	bl	80195c8 <MoblePalCryptoK3>
 8019a56:	2801      	cmp	r0, #1
 8019a58:	d8f3      	bhi.n	8019a42 <MoblePalCryptoUpdateNetKeyVectors+0x62>
 8019a5a:	2201      	movs	r2, #1
 8019a5c:	9202      	str	r2, [sp, #8]
 8019a5e:	f10d 021f 	add.w	r2, sp, #31
 8019a62:	9201      	str	r2, [sp, #4]
 8019a64:	2210      	movs	r2, #16
 8019a66:	9200      	str	r2, [sp, #0]
 8019a68:	9b05      	ldr	r3, [sp, #20]
 8019a6a:	f104 026c 	add.w	r2, r4, #108	; 0x6c
 8019a6e:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 8019a72:	f104 0039 	add.w	r0, r4, #57	; 0x39
 8019a76:	e7dd      	b.n	8019a34 <MoblePalCryptoUpdateNetKeyVectors+0x54>
 8019a78:	08033456 	.word	0x08033456
 8019a7c:	08031474 	.word	0x08031474
 8019a80:	0803345b 	.word	0x0803345b

08019a84 <MoblePalCryptoSetNewNetworkKey>:
 8019a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019a88:	4b2f      	ldr	r3, [pc, #188]	; (8019b48 <MoblePalCryptoSetNewNetworkKey+0xc4>)
 8019a8a:	4c30      	ldr	r4, [pc, #192]	; (8019b4c <MoblePalCryptoSetNewNetworkKey+0xc8>)
 8019a8c:	f8b3 e000 	ldrh.w	lr, [r3]
 8019a90:	2700      	movs	r7, #0
 8019a92:	463b      	mov	r3, r7
 8019a94:	f04f 087c 	mov.w	r8, #124	; 0x7c
 8019a98:	b2fd      	uxtb	r5, r7
 8019a9a:	fb08 fc05 	mul.w	ip, r8, r5
 8019a9e:	eb04 020c 	add.w	r2, r4, ip
 8019aa2:	4575      	cmp	r5, lr
 8019aa4:	f892 6446 	ldrb.w	r6, [r2, #1094]	; 0x446
 8019aa8:	d210      	bcs.n	8019acc <MoblePalCryptoSetNewNetworkKey+0x48>
 8019aaa:	bb4e      	cbnz	r6, 8019b00 <MoblePalCryptoSetNewNetworkKey+0x7c>
 8019aac:	f892 9445 	ldrb.w	r9, [r2, #1093]	; 0x445
 8019ab0:	f1b9 0f01 	cmp.w	r9, #1
 8019ab4:	d138      	bne.n	8019b28 <MoblePalCryptoSetNewNetworkKey+0xa4>
 8019ab6:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 8019aba:	428a      	cmp	r2, r1
 8019abc:	d134      	bne.n	8019b28 <MoblePalCryptoSetNewNetworkKey+0xa4>
 8019abe:	4601      	mov	r1, r0
 8019ac0:	4823      	ldr	r0, [pc, #140]	; (8019b50 <MoblePalCryptoSetNewNetworkKey+0xcc>)
 8019ac2:	2210      	movs	r2, #16
 8019ac4:	4460      	add	r0, ip
 8019ac6:	f00f fedb 	bl	8029880 <memmove>
 8019aca:	2300      	movs	r3, #0
 8019acc:	267c      	movs	r6, #124	; 0x7c
 8019ace:	436e      	muls	r6, r5
 8019ad0:	19a2      	adds	r2, r4, r6
 8019ad2:	f892 2446 	ldrb.w	r2, [r2, #1094]	; 0x446
 8019ad6:	431a      	orrs	r2, r3
 8019ad8:	d10f      	bne.n	8019afa <MoblePalCryptoSetNewNetworkKey+0x76>
 8019ada:	481e      	ldr	r0, [pc, #120]	; (8019b54 <MoblePalCryptoSetNewNetworkKey+0xd0>)
 8019adc:	f894 161c 	ldrb.w	r1, [r4, #1564]	; 0x61c
 8019ae0:	f106 0210 	add.w	r2, r6, #16
 8019ae4:	4402      	add	r2, r0
 8019ae6:	2310      	movs	r3, #16
 8019ae8:	f812 7b01 	ldrb.w	r7, [r2], #1
 8019aec:	b10f      	cbz	r7, 8019af2 <MoblePalCryptoSetNewNetworkKey+0x6e>
 8019aee:	2903      	cmp	r1, #3
 8019af0:	d91e      	bls.n	8019b30 <MoblePalCryptoSetNewNetworkKey+0xac>
 8019af2:	3b01      	subs	r3, #1
 8019af4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019af8:	d1f6      	bne.n	8019ae8 <MoblePalCryptoSetNewNetworkKey+0x64>
 8019afa:	4618      	mov	r0, r3
 8019afc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b00:	2e01      	cmp	r6, #1
 8019b02:	d111      	bne.n	8019b28 <MoblePalCryptoSetNewNetworkKey+0xa4>
 8019b04:	f8b2 3448 	ldrh.w	r3, [r2, #1096]	; 0x448
 8019b08:	428b      	cmp	r3, r1
 8019b0a:	d10c      	bne.n	8019b26 <MoblePalCryptoSetNewNetworkKey+0xa2>
 8019b0c:	4b10      	ldr	r3, [pc, #64]	; (8019b50 <MoblePalCryptoSetNewNetworkKey+0xcc>)
 8019b0e:	1e42      	subs	r2, r0, #1
 8019b10:	4463      	add	r3, ip
 8019b12:	300f      	adds	r0, #15
 8019b14:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019b18:	f812 6f01 	ldrb.w	r6, [r2, #1]!
 8019b1c:	428e      	cmp	r6, r1
 8019b1e:	d105      	bne.n	8019b2c <MoblePalCryptoSetNewNetworkKey+0xa8>
 8019b20:	4282      	cmp	r2, r0
 8019b22:	d1f7      	bne.n	8019b14 <MoblePalCryptoSetNewNetworkKey+0x90>
 8019b24:	e7d1      	b.n	8019aca <MoblePalCryptoSetNewNetworkKey+0x46>
 8019b26:	4633      	mov	r3, r6
 8019b28:	3701      	adds	r7, #1
 8019b2a:	e7b5      	b.n	8019a98 <MoblePalCryptoSetNewNetworkKey+0x14>
 8019b2c:	2303      	movs	r3, #3
 8019b2e:	e7cd      	b.n	8019acc <MoblePalCryptoSetNewNetworkKey+0x48>
 8019b30:	237c      	movs	r3, #124	; 0x7c
 8019b32:	fb03 4405 	mla	r4, r3, r5, r4
 8019b36:	2301      	movs	r3, #1
 8019b38:	f884 3446 	strb.w	r3, [r4, #1094]	; 0x446
 8019b3c:	4430      	add	r0, r6
 8019b3e:	2100      	movs	r1, #0
 8019b40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b44:	f7ff bf4c 	b.w	80199e0 <MoblePalCryptoUpdateNetKeyVectors>
 8019b48:	20000008 	.word	0x20000008
 8019b4c:	2000141c 	.word	0x2000141c
 8019b50:	20001850 	.word	0x20001850
 8019b54:	20001840 	.word	0x20001840

08019b58 <MoblePalCryptoSetNetworkKey>:
 8019b58:	4b2e      	ldr	r3, [pc, #184]	; (8019c14 <MoblePalCryptoSetNetworkKey+0xbc>)
 8019b5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019b5e:	2200      	movs	r2, #0
 8019b60:	4c2d      	ldr	r4, [pc, #180]	; (8019c18 <MoblePalCryptoSetNetworkKey+0xc0>)
 8019b62:	881e      	ldrh	r6, [r3, #0]
 8019b64:	f04f 087c 	mov.w	r8, #124	; 0x7c
 8019b68:	4613      	mov	r3, r2
 8019b6a:	b2d5      	uxtb	r5, r2
 8019b6c:	fb08 fe05 	mul.w	lr, r8, r5
 8019b70:	eb04 0c0e 	add.w	ip, r4, lr
 8019b74:	42b5      	cmp	r5, r6
 8019b76:	f89c 7445 	ldrb.w	r7, [ip, #1093]	; 0x445
 8019b7a:	d20c      	bcs.n	8019b96 <MoblePalCryptoSetNetworkKey+0x3e>
 8019b7c:	bb2f      	cbnz	r7, 8019bca <MoblePalCryptoSetNetworkKey+0x72>
 8019b7e:	f8ac 1448 	strh.w	r1, [ip, #1096]	; 0x448
 8019b82:	4601      	mov	r1, r0
 8019b84:	4825      	ldr	r0, [pc, #148]	; (8019c1c <MoblePalCryptoSetNetworkKey+0xc4>)
 8019b86:	2210      	movs	r2, #16
 8019b88:	4470      	add	r0, lr
 8019b8a:	f00f fe79 	bl	8029880 <memmove>
 8019b8e:	1c6b      	adds	r3, r5, #1
 8019b90:	f884 361c 	strb.w	r3, [r4, #1564]	; 0x61c
 8019b94:	2300      	movs	r3, #0
 8019b96:	207c      	movs	r0, #124	; 0x7c
 8019b98:	fb00 f105 	mul.w	r1, r0, r5
 8019b9c:	1862      	adds	r2, r4, r1
 8019b9e:	f892 2445 	ldrb.w	r2, [r2, #1093]	; 0x445
 8019ba2:	431a      	orrs	r2, r3
 8019ba4:	d10e      	bne.n	8019bc4 <MoblePalCryptoSetNetworkKey+0x6c>
 8019ba6:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8019baa:	42b3      	cmp	r3, r6
 8019bac:	d825      	bhi.n	8019bfa <MoblePalCryptoSetNetworkKey+0xa2>
 8019bae:	481b      	ldr	r0, [pc, #108]	; (8019c1c <MoblePalCryptoSetNetworkKey+0xc4>)
 8019bb0:	4408      	add	r0, r1
 8019bb2:	4602      	mov	r2, r0
 8019bb4:	2310      	movs	r3, #16
 8019bb6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8019bba:	bb01      	cbnz	r1, 8019bfe <MoblePalCryptoSetNetworkKey+0xa6>
 8019bbc:	3b01      	subs	r3, #1
 8019bbe:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 8019bc2:	d1f8      	bne.n	8019bb6 <MoblePalCryptoSetNetworkKey+0x5e>
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019bca:	2f01      	cmp	r7, #1
 8019bcc:	d111      	bne.n	8019bf2 <MoblePalCryptoSetNetworkKey+0x9a>
 8019bce:	f8bc 3448 	ldrh.w	r3, [ip, #1096]	; 0x448
 8019bd2:	428b      	cmp	r3, r1
 8019bd4:	d10c      	bne.n	8019bf0 <MoblePalCryptoSetNetworkKey+0x98>
 8019bd6:	4b11      	ldr	r3, [pc, #68]	; (8019c1c <MoblePalCryptoSetNetworkKey+0xc4>)
 8019bd8:	1e42      	subs	r2, r0, #1
 8019bda:	4473      	add	r3, lr
 8019bdc:	300f      	adds	r0, #15
 8019bde:	f813 1b01 	ldrb.w	r1, [r3], #1
 8019be2:	f812 7f01 	ldrb.w	r7, [r2, #1]!
 8019be6:	428f      	cmp	r7, r1
 8019be8:	d105      	bne.n	8019bf6 <MoblePalCryptoSetNetworkKey+0x9e>
 8019bea:	4282      	cmp	r2, r0
 8019bec:	d1f7      	bne.n	8019bde <MoblePalCryptoSetNetworkKey+0x86>
 8019bee:	e7d1      	b.n	8019b94 <MoblePalCryptoSetNetworkKey+0x3c>
 8019bf0:	463b      	mov	r3, r7
 8019bf2:	3201      	adds	r2, #1
 8019bf4:	e7b9      	b.n	8019b6a <MoblePalCryptoSetNetworkKey+0x12>
 8019bf6:	2303      	movs	r3, #3
 8019bf8:	e7cd      	b.n	8019b96 <MoblePalCryptoSetNetworkKey+0x3e>
 8019bfa:	4613      	mov	r3, r2
 8019bfc:	e7e2      	b.n	8019bc4 <MoblePalCryptoSetNetworkKey+0x6c>
 8019bfe:	237c      	movs	r3, #124	; 0x7c
 8019c00:	fb03 4405 	mla	r4, r3, r5, r4
 8019c04:	2101      	movs	r1, #1
 8019c06:	f884 1445 	strb.w	r1, [r4, #1093]	; 0x445
 8019c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019c0e:	f7ff bee7 	b.w	80199e0 <MoblePalCryptoUpdateNetKeyVectors>
 8019c12:	bf00      	nop
 8019c14:	20000008 	.word	0x20000008
 8019c18:	2000141c 	.word	0x2000141c
 8019c1c:	20001840 	.word	0x20001840

08019c20 <MoblePalCryptoSetIvIndex>:
 8019c20:	b508      	push	{r3, lr}
 8019c22:	4b05      	ldr	r3, [pc, #20]	; (8019c38 <MoblePalCryptoSetIvIndex+0x18>)
 8019c24:	2101      	movs	r1, #1
 8019c26:	f8c3 0658 	str.w	r0, [r3, #1624]	; 0x658
 8019c2a:	f203 4024 	addw	r0, r3, #1060	; 0x424
 8019c2e:	f7ff fed7 	bl	80199e0 <MoblePalCryptoUpdateNetKeyVectors>
 8019c32:	2000      	movs	r0, #0
 8019c34:	bd08      	pop	{r3, pc}
 8019c36:	bf00      	nop
 8019c38:	2000141c 	.word	0x2000141c

08019c3c <MoblePalCryptoParseNetHdr>:
 8019c3c:	7803      	ldrb	r3, [r0, #0]
 8019c3e:	09db      	lsrs	r3, r3, #7
 8019c40:	700b      	strb	r3, [r1, #0]
 8019c42:	7803      	ldrb	r3, [r0, #0]
 8019c44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c48:	704b      	strb	r3, [r1, #1]
 8019c4a:	7843      	ldrb	r3, [r0, #1]
 8019c4c:	09db      	lsrs	r3, r3, #7
 8019c4e:	708b      	strb	r3, [r1, #2]
 8019c50:	7843      	ldrb	r3, [r0, #1]
 8019c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019c56:	70cb      	strb	r3, [r1, #3]
 8019c58:	78c3      	ldrb	r3, [r0, #3]
 8019c5a:	7882      	ldrb	r2, [r0, #2]
 8019c5c:	021b      	lsls	r3, r3, #8
 8019c5e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8019c62:	7902      	ldrb	r2, [r0, #4]
 8019c64:	4413      	add	r3, r2
 8019c66:	604b      	str	r3, [r1, #4]
 8019c68:	f8b0 3005 	ldrh.w	r3, [r0, #5]
 8019c6c:	810b      	strh	r3, [r1, #8]
 8019c6e:	f8b0 2007 	ldrh.w	r2, [r0, #7]
 8019c72:	ba5b      	rev16	r3, r3
 8019c74:	ba52      	rev16	r2, r2
 8019c76:	810b      	strh	r3, [r1, #8]
 8019c78:	814a      	strh	r2, [r1, #10]
 8019c7a:	4770      	bx	lr

08019c7c <MoblePalCryptoAuthenticateSecureNetworkBeacon>:
 8019c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019c80:	460c      	mov	r4, r1
 8019c82:	b08a      	sub	sp, #40	; 0x28
 8019c84:	4617      	mov	r7, r2
 8019c86:	4698      	mov	r8, r3
 8019c88:	4605      	mov	r5, r0
 8019c8a:	2800      	cmp	r0, #0
 8019c8c:	d035      	beq.n	8019cfa <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 8019c8e:	2900      	cmp	r1, #0
 8019c90:	d033      	beq.n	8019cfa <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x7e>
 8019c92:	f8d1 0001 	ldr.w	r0, [r1, #1]
 8019c96:	f8d1 1005 	ldr.w	r1, [r1, #5]
 8019c9a:	466e      	mov	r6, sp
 8019c9c:	c603      	stmia	r6!, {r0, r1}
 8019c9e:	2108      	movs	r1, #8
 8019ca0:	4668      	mov	r0, sp
 8019ca2:	f7ff fbc3 	bl	801942c <MoblePalCryptoGetSecurityKeys_Beacon>
 8019ca6:	4601      	mov	r1, r0
 8019ca8:	b930      	cbnz	r0, 8019cb8 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x3c>
 8019caa:	4b15      	ldr	r3, [pc, #84]	; (8019d00 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x84>)
 8019cac:	4a15      	ldr	r2, [pc, #84]	; (8019d04 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x88>)
 8019cae:	4816      	ldr	r0, [pc, #88]	; (8019d08 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x8c>)
 8019cb0:	f640 1116 	movw	r1, #2326	; 0x916
 8019cb4:	f00e ff08 	bl	8028ac8 <__assert_func>
 8019cb8:	f1b8 0f00 	cmp.w	r8, #0
 8019cbc:	d018      	beq.n	8019cf0 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x74>
 8019cbe:	f890 3022 	ldrb.w	r3, [r0, #34]	; 0x22
 8019cc2:	b91b      	cbnz	r3, 8019ccc <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x50>
 8019cc4:	2002      	movs	r0, #2
 8019cc6:	b00a      	add	sp, #40	; 0x28
 8019cc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019ccc:	3110      	adds	r1, #16
 8019cce:	a802      	add	r0, sp, #8
 8019cd0:	f7ff fdec 	bl	80198ac <MoblePalCryptoBeaconKey>
 8019cd4:	2801      	cmp	r0, #1
 8019cd6:	d8f5      	bhi.n	8019cc4 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 8019cd8:	ab06      	add	r3, sp, #24
 8019cda:	4621      	mov	r1, r4
 8019cdc:	a802      	add	r0, sp, #8
 8019cde:	463a      	mov	r2, r7
 8019ce0:	f7fe fca6 	bl	8018630 <BAES_CmacCompute>
 8019ce4:	ab06      	add	r3, sp, #24
 8019ce6:	cb03      	ldmia	r3!, {r0, r1}
 8019ce8:	6028      	str	r0, [r5, #0]
 8019cea:	6069      	str	r1, [r5, #4]
 8019cec:	2000      	movs	r0, #0
 8019cee:	e7ea      	b.n	8019cc6 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 8019cf0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	d1ea      	bne.n	8019cce <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x52>
 8019cf8:	e7e4      	b.n	8019cc4 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x48>
 8019cfa:	2003      	movs	r0, #3
 8019cfc:	e7e3      	b.n	8019cc6 <MoblePalCryptoAuthenticateSecureNetworkBeacon+0x4a>
 8019cfe:	bf00      	nop
 8019d00:	08033456 	.word	0x08033456
 8019d04:	08031496 	.word	0x08031496
 8019d08:	0803345b 	.word	0x0803345b

08019d0c <MoblePalCryptoInitEcc>:
 8019d0c:	4b07      	ldr	r3, [pc, #28]	; (8019d2c <MoblePalCryptoInitEcc+0x20>)
 8019d0e:	f100 0220 	add.w	r2, r0, #32
 8019d12:	f850 1b04 	ldr.w	r1, [r0], #4
 8019d16:	f843 1b04 	str.w	r1, [r3], #4
 8019d1a:	4290      	cmp	r0, r2
 8019d1c:	d1f9      	bne.n	8019d12 <MoblePalCryptoInitEcc+0x6>
 8019d1e:	4b04      	ldr	r3, [pc, #16]	; (8019d30 <MoblePalCryptoInitEcc+0x24>)
 8019d20:	2201      	movs	r2, #1
 8019d22:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
 8019d26:	2000      	movs	r0, #0
 8019d28:	4770      	bx	lr
 8019d2a:	bf00      	nop
 8019d2c:	2000181f 	.word	0x2000181f
 8019d30:	2000141c 	.word	0x2000141c

08019d34 <MoblePalCryptoGetEccGenSecret>:
 8019d34:	b510      	push	{r4, lr}
 8019d36:	4604      	mov	r4, r0
 8019d38:	4807      	ldr	r0, [pc, #28]	; (8019d58 <MoblePalCryptoGetEccGenSecret+0x24>)
 8019d3a:	4621      	mov	r1, r4
 8019d3c:	f7fe ffb0 	bl	8018ca0 <BPKA_StartDhKey>
 8019d40:	2800      	cmp	r0, #0
 8019d42:	d1f9      	bne.n	8019d38 <MoblePalCryptoGetEccGenSecret+0x4>
 8019d44:	f7ff f898 	bl	8018e78 <BPKA_Status>
 8019d48:	2800      	cmp	r0, #0
 8019d4a:	d1fb      	bne.n	8019d44 <MoblePalCryptoGetEccGenSecret+0x10>
 8019d4c:	4803      	ldr	r0, [pc, #12]	; (8019d5c <MoblePalCryptoGetEccGenSecret+0x28>)
 8019d4e:	f7fe fbe1 	bl	8018514 <BPKA_ReadDhKey>
 8019d52:	4802      	ldr	r0, [pc, #8]	; (8019d5c <MoblePalCryptoGetEccGenSecret+0x28>)
 8019d54:	bd10      	pop	{r4, pc}
 8019d56:	bf00      	nop
 8019d58:	2000181f 	.word	0x2000181f
 8019d5c:	20001a7b 	.word	0x20001a7b

08019d60 <MoblePalCryptoFreeEcc>:
 8019d60:	4b04      	ldr	r3, [pc, #16]	; (8019d74 <MoblePalCryptoFreeEcc+0x14>)
 8019d62:	f893 2402 	ldrb.w	r2, [r3, #1026]	; 0x402
 8019d66:	b11a      	cbz	r2, 8019d70 <MoblePalCryptoFreeEcc+0x10>
 8019d68:	2000      	movs	r0, #0
 8019d6a:	f883 0402 	strb.w	r0, [r3, #1026]	; 0x402
 8019d6e:	4770      	bx	lr
 8019d70:	2002      	movs	r0, #2
 8019d72:	4770      	bx	lr
 8019d74:	2000141c 	.word	0x2000141c

08019d78 <MoblePalCrypto_PK_convert_le>:
 8019d78:	b510      	push	{r4, lr}
 8019d7a:	f100 0320 	add.w	r3, r0, #32
 8019d7e:	1e4a      	subs	r2, r1, #1
 8019d80:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019d84:	f802 4f01 	strb.w	r4, [r2, #1]!
 8019d88:	4283      	cmp	r3, r0
 8019d8a:	d1f9      	bne.n	8019d80 <MoblePalCrypto_PK_convert_le+0x8>
 8019d8c:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8019d90:	311f      	adds	r1, #31
 8019d92:	3320      	adds	r3, #32
 8019d94:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
 8019d98:	f801 0f01 	strb.w	r0, [r1, #1]!
 8019d9c:	429a      	cmp	r2, r3
 8019d9e:	d1f9      	bne.n	8019d94 <MoblePalCrypto_PK_convert_le+0x1c>
 8019da0:	bd10      	pop	{r4, pc}
	...

08019da4 <MoblePalCryptoGetAppKeyIndexes>:
 8019da4:	f8df c074 	ldr.w	ip, [pc, #116]	; 8019e1c <MoblePalCryptoGetAppKeyIndexes+0x78>
 8019da8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dac:	4606      	mov	r6, r0
 8019dae:	f8df e070 	ldr.w	lr, [pc, #112]	; 8019e20 <MoblePalCryptoGetAppKeyIndexes+0x7c>
 8019db2:	f8bc 0000 	ldrh.w	r0, [ip]
 8019db6:	2300      	movs	r3, #0
 8019db8:	277c      	movs	r7, #124	; 0x7c
 8019dba:	b2dc      	uxtb	r4, r3
 8019dbc:	4284      	cmp	r4, r0
 8019dbe:	d302      	bcc.n	8019dc6 <MoblePalCryptoGetAppKeyIndexes+0x22>
 8019dc0:	2300      	movs	r3, #0
 8019dc2:	2002      	movs	r0, #2
 8019dc4:	e025      	b.n	8019e12 <MoblePalCryptoGetAppKeyIndexes+0x6e>
 8019dc6:	fb07 e404 	mla	r4, r7, r4, lr
 8019dca:	f8b4 5448 	ldrh.w	r5, [r4, #1096]	; 0x448
 8019dce:	4295      	cmp	r5, r2
 8019dd0:	d122      	bne.n	8019e18 <MoblePalCryptoGetAppKeyIndexes+0x74>
 8019dd2:	f894 4445 	ldrb.w	r4, [r4, #1093]	; 0x445
 8019dd6:	2c01      	cmp	r4, #1
 8019dd8:	d11e      	bne.n	8019e18 <MoblePalCryptoGetAppKeyIndexes+0x74>
 8019dda:	2400      	movs	r4, #0
 8019ddc:	4623      	mov	r3, r4
 8019dde:	2002      	movs	r0, #2
 8019de0:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8019de4:	e010      	b.n	8019e08 <MoblePalCryptoGetAppKeyIndexes+0x64>
 8019de6:	fb09 e505 	mla	r5, r9, r5, lr
 8019dea:	f8b5 75be 	ldrh.w	r7, [r5, #1470]	; 0x5be
 8019dee:	4297      	cmp	r7, r2
 8019df0:	d109      	bne.n	8019e06 <MoblePalCryptoGetAppKeyIndexes+0x62>
 8019df2:	f895 75c0 	ldrb.w	r7, [r5, #1472]	; 0x5c0
 8019df6:	b137      	cbz	r7, 8019e06 <MoblePalCryptoGetAppKeyIndexes+0x62>
 8019df8:	f8b5 05ba 	ldrh.w	r0, [r5, #1466]	; 0x5ba
 8019dfc:	f826 0013 	strh.w	r0, [r6, r3, lsl #1]
 8019e00:	3301      	adds	r3, #1
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	2000      	movs	r0, #0
 8019e06:	3401      	adds	r4, #1
 8019e08:	f8bc 8008 	ldrh.w	r8, [ip, #8]
 8019e0c:	b2e5      	uxtb	r5, r4
 8019e0e:	4545      	cmp	r5, r8
 8019e10:	d3e9      	bcc.n	8019de6 <MoblePalCryptoGetAppKeyIndexes+0x42>
 8019e12:	800b      	strh	r3, [r1, #0]
 8019e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019e18:	3301      	adds	r3, #1
 8019e1a:	e7ce      	b.n	8019dba <MoblePalCryptoGetAppKeyIndexes+0x16>
 8019e1c:	20000008 	.word	0x20000008
 8019e20:	2000141c 	.word	0x2000141c

08019e24 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>:
 8019e24:	4b0c      	ldr	r3, [pc, #48]	; (8019e58 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x34>)
 8019e26:	b570      	push	{r4, r5, r6, lr}
 8019e28:	8919      	ldrh	r1, [r3, #8]
 8019e2a:	4d0c      	ldr	r5, [pc, #48]	; (8019e5c <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x38>)
 8019e2c:	2200      	movs	r2, #0
 8019e2e:	262c      	movs	r6, #44	; 0x2c
 8019e30:	b2d3      	uxtb	r3, r2
 8019e32:	428b      	cmp	r3, r1
 8019e34:	d301      	bcc.n	8019e3a <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x16>
 8019e36:	2000      	movs	r0, #0
 8019e38:	e00a      	b.n	8019e50 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2c>
 8019e3a:	fb06 5303 	mla	r3, r6, r3, r5
 8019e3e:	f8b3 45ba 	ldrh.w	r4, [r3, #1466]	; 0x5ba
 8019e42:	4284      	cmp	r4, r0
 8019e44:	d105      	bne.n	8019e52 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 8019e46:	f893 45c0 	ldrb.w	r4, [r3, #1472]	; 0x5c0
 8019e4a:	b114      	cbz	r4, 8019e52 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0x2e>
 8019e4c:	f8b3 05be 	ldrh.w	r0, [r3, #1470]	; 0x5be
 8019e50:	bd70      	pop	{r4, r5, r6, pc}
 8019e52:	3201      	adds	r2, #1
 8019e54:	e7ec      	b.n	8019e30 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex+0xc>
 8019e56:	bf00      	nop
 8019e58:	20000008 	.word	0x20000008
 8019e5c:	2000141c 	.word	0x2000141c

08019e60 <MoblePalCryptoModelAppBindDelete>:
 8019e60:	4b2d      	ldr	r3, [pc, #180]	; (8019f18 <MoblePalCryptoModelAppBindDelete+0xb8>)
 8019e62:	f8df c0bc 	ldr.w	ip, [pc, #188]	; 8019f20 <MoblePalCryptoModelAppBindDelete+0xc0>
 8019e66:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e6a:	4d2c      	ldr	r5, [pc, #176]	; (8019f1c <MoblePalCryptoModelAppBindDelete+0xbc>)
 8019e6c:	891f      	ldrh	r7, [r3, #8]
 8019e6e:	2100      	movs	r1, #0
 8019e70:	4604      	mov	r4, r0
 8019e72:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 8019e76:	4608      	mov	r0, r1
 8019e78:	f1a5 06ac 	sub.w	r6, r5, #172	; 0xac
 8019e7c:	f04f 0a00 	mov.w	sl, #0
 8019e80:	e012      	b.n	8019ea8 <MoblePalCryptoModelAppBindDelete+0x48>
 8019e82:	b92b      	cbnz	r3, 8019e90 <MoblePalCryptoModelAppBindDelete+0x30>
 8019e84:	f83a b002 	ldrh.w	fp, [sl, r2]
 8019e88:	45a3      	cmp	fp, r4
 8019e8a:	d102      	bne.n	8019e92 <MoblePalCryptoModelAppBindDelete+0x32>
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	e03d      	b.n	8019f0c <MoblePalCryptoModelAppBindDelete+0xac>
 8019e90:	2002      	movs	r0, #2
 8019e92:	f109 0901 	add.w	r9, r9, #1
 8019e96:	f1b9 0f0b 	cmp.w	r9, #11
 8019e9a:	f10a 0a38 	add.w	sl, sl, #56	; 0x38
 8019e9e:	d119      	bne.n	8019ed4 <MoblePalCryptoModelAppBindDelete+0x74>
 8019ea0:	e034      	b.n	8019f0c <MoblePalCryptoModelAppBindDelete+0xac>
 8019ea2:	f10a 0a01 	add.w	sl, sl, #1
 8019ea6:	2003      	movs	r0, #3
 8019ea8:	fa5f f88a 	uxtb.w	r8, sl
 8019eac:	45b8      	cmp	r8, r7
 8019eae:	d22d      	bcs.n	8019f0c <MoblePalCryptoModelAppBindDelete+0xac>
 8019eb0:	fb0e c208 	mla	r2, lr, r8, ip
 8019eb4:	f892 35b8 	ldrb.w	r3, [r2, #1464]	; 0x5b8
 8019eb8:	2b00      	cmp	r3, #0
 8019eba:	d1f2      	bne.n	8019ea2 <MoblePalCryptoModelAppBindDelete+0x42>
 8019ebc:	f8b2 25ba 	ldrh.w	r2, [r2, #1466]	; 0x5ba
 8019ec0:	42a2      	cmp	r2, r4
 8019ec2:	d1ee      	bne.n	8019ea2 <MoblePalCryptoModelAppBindDelete+0x42>
 8019ec4:	f44f 7a39 	mov.w	sl, #740	; 0x2e4
 8019ec8:	fb0a 8a01 	mla	sl, sl, r1, r8
 8019ecc:	44aa      	add	sl, r5
 8019ece:	4699      	mov	r9, r3
 8019ed0:	f108 02a0 	add.w	r2, r8, #160	; 0xa0
 8019ed4:	f89a 30a6 	ldrb.w	r3, [sl, #166]	; 0xa6
 8019ed8:	2b01      	cmp	r3, #1
 8019eda:	d1d2      	bne.n	8019e82 <MoblePalCryptoModelAppBindDelete+0x22>
 8019edc:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 8019ee0:	2338      	movs	r3, #56	; 0x38
 8019ee2:	4348      	muls	r0, r1
 8019ee4:	fb03 0009 	mla	r0, r3, r9, r0
 8019ee8:	4430      	add	r0, r6
 8019eea:	4440      	add	r0, r8
 8019eec:	2200      	movs	r2, #0
 8019eee:	f44f 73b9 	mov.w	r3, #370	; 0x172
 8019ef2:	f880 2152 	strb.w	r2, [r0, #338]	; 0x152
 8019ef6:	434b      	muls	r3, r1
 8019ef8:	201c      	movs	r0, #28
 8019efa:	fb00 3309 	mla	r3, r0, r9, r3
 8019efe:	4443      	add	r3, r8
 8019f00:	3350      	adds	r3, #80	; 0x50
 8019f02:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019f06:	4610      	mov	r0, r2
 8019f08:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8019f0c:	3101      	adds	r1, #1
 8019f0e:	2905      	cmp	r1, #5
 8019f10:	d1b4      	bne.n	8019e7c <MoblePalCryptoModelAppBindDelete+0x1c>
 8019f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f16:	bf00      	nop
 8019f18:	20000008 	.word	0x20000008
 8019f1c:	200003d0 	.word	0x200003d0
 8019f20:	2000141c 	.word	0x2000141c

08019f24 <MoblePalCryptoDeleteAppKey>:
 8019f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f26:	4604      	mov	r4, r0
 8019f28:	481b      	ldr	r0, [pc, #108]	; (8019f98 <MoblePalCryptoDeleteAppKey+0x74>)
 8019f2a:	4d1c      	ldr	r5, [pc, #112]	; (8019f9c <MoblePalCryptoDeleteAppKey+0x78>)
 8019f2c:	8806      	ldrh	r6, [r0, #0]
 8019f2e:	2300      	movs	r3, #0
 8019f30:	f04f 0c7c 	mov.w	ip, #124	; 0x7c
 8019f34:	b2da      	uxtb	r2, r3
 8019f36:	42b2      	cmp	r2, r6
 8019f38:	d20c      	bcs.n	8019f54 <MoblePalCryptoDeleteAppKey+0x30>
 8019f3a:	fb0c 5202 	mla	r2, ip, r2, r5
 8019f3e:	3301      	adds	r3, #1
 8019f40:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 8019f44:	428a      	cmp	r2, r1
 8019f46:	d1f5      	bne.n	8019f34 <MoblePalCryptoDeleteAppKey+0x10>
 8019f48:	8901      	ldrh	r1, [r0, #8]
 8019f4a:	2300      	movs	r3, #0
 8019f4c:	262c      	movs	r6, #44	; 0x2c
 8019f4e:	b2d8      	uxtb	r0, r3
 8019f50:	4288      	cmp	r0, r1
 8019f52:	d301      	bcc.n	8019f58 <MoblePalCryptoDeleteAppKey+0x34>
 8019f54:	2001      	movs	r0, #1
 8019f56:	e01d      	b.n	8019f94 <MoblePalCryptoDeleteAppKey+0x70>
 8019f58:	4370      	muls	r0, r6
 8019f5a:	182a      	adds	r2, r5, r0
 8019f5c:	3301      	adds	r3, #1
 8019f5e:	f8b2 75ba 	ldrh.w	r7, [r2, #1466]	; 0x5ba
 8019f62:	42a7      	cmp	r7, r4
 8019f64:	d1f3      	bne.n	8019f4e <MoblePalCryptoDeleteAppKey+0x2a>
 8019f66:	f892 35b8 	ldrb.w	r3, [r2, #1464]	; 0x5b8
 8019f6a:	2b01      	cmp	r3, #1
 8019f6c:	d10e      	bne.n	8019f8c <MoblePalCryptoDeleteAppKey+0x68>
 8019f6e:	4b0c      	ldr	r3, [pc, #48]	; (8019fa0 <MoblePalCryptoDeleteAppKey+0x7c>)
 8019f70:	2100      	movs	r1, #0
 8019f72:	f882 15b8 	strb.w	r1, [r2, #1464]	; 0x5b8
 8019f76:	f882 15c0 	strb.w	r1, [r2, #1472]	; 0x5c0
 8019f7a:	4418      	add	r0, r3
 8019f7c:	2210      	movs	r2, #16
 8019f7e:	f00f fc99 	bl	80298b4 <memset>
 8019f82:	f895 361d 	ldrb.w	r3, [r5, #1565]	; 0x61d
 8019f86:	3b01      	subs	r3, #1
 8019f88:	f885 361d 	strb.w	r3, [r5, #1565]	; 0x61d
 8019f8c:	4620      	mov	r0, r4
 8019f8e:	f7ff ff67 	bl	8019e60 <MoblePalCryptoModelAppBindDelete>
 8019f92:	2000      	movs	r0, #0
 8019f94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019f96:	bf00      	nop
 8019f98:	20000008 	.word	0x20000008
 8019f9c:	2000141c 	.word	0x2000141c
 8019fa0:	200019b4 	.word	0x200019b4

08019fa4 <MoblePalCryptoDeleteNetworkKey>:
 8019fa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019fa8:	4f2a      	ldr	r7, [pc, #168]	; (801a054 <MoblePalCryptoDeleteNetworkKey+0xb0>)
 8019faa:	4d2b      	ldr	r5, [pc, #172]	; (801a058 <MoblePalCryptoDeleteNetworkKey+0xb4>)
 8019fac:	8839      	ldrh	r1, [r7, #0]
 8019fae:	f895 c61c 	ldrb.w	ip, [r5, #1564]	; 0x61c
 8019fb2:	2200      	movs	r2, #0
 8019fb4:	4604      	mov	r4, r0
 8019fb6:	4613      	mov	r3, r2
 8019fb8:	f04f 0e7c 	mov.w	lr, #124	; 0x7c
 8019fbc:	b2d0      	uxtb	r0, r2
 8019fbe:	4288      	cmp	r0, r1
 8019fc0:	d303      	bcc.n	8019fca <MoblePalCryptoDeleteNetworkKey+0x26>
 8019fc2:	b313      	cbz	r3, 801a00a <MoblePalCryptoDeleteNetworkKey+0x66>
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019fca:	fb0e f000 	mul.w	r0, lr, r0
 8019fce:	182e      	adds	r6, r5, r0
 8019fd0:	f8b6 8448 	ldrh.w	r8, [r6, #1096]	; 0x448
 8019fd4:	45a0      	cmp	r8, r4
 8019fd6:	d124      	bne.n	801a022 <MoblePalCryptoDeleteNetworkKey+0x7e>
 8019fd8:	f896 8445 	ldrb.w	r8, [r6, #1093]	; 0x445
 8019fdc:	f1b8 0f01 	cmp.w	r8, #1
 8019fe0:	d120      	bne.n	801a024 <MoblePalCryptoDeleteNetworkKey+0x80>
 8019fe2:	f1bc 0f01 	cmp.w	ip, #1
 8019fe6:	d919      	bls.n	801a01c <MoblePalCryptoDeleteNetworkKey+0x78>
 8019fe8:	4b1c      	ldr	r3, [pc, #112]	; (801a05c <MoblePalCryptoDeleteNetworkKey+0xb8>)
 8019fea:	f04f 0800 	mov.w	r8, #0
 8019fee:	4418      	add	r0, r3
 8019ff0:	f886 8445 	strb.w	r8, [r6, #1093]	; 0x445
 8019ff4:	2210      	movs	r2, #16
 8019ff6:	4641      	mov	r1, r8
 8019ff8:	f00f fc5c 	bl	80298b4 <memset>
 8019ffc:	f895 361c 	ldrb.w	r3, [r5, #1564]	; 0x61c
 801a000:	f886 8444 	strb.w	r8, [r6, #1092]	; 0x444
 801a004:	3b01      	subs	r3, #1
 801a006:	f885 361c 	strb.w	r3, [r5, #1564]	; 0x61c
 801a00a:	2600      	movs	r6, #0
 801a00c:	f04f 082c 	mov.w	r8, #44	; 0x2c
 801a010:	8939      	ldrh	r1, [r7, #8]
 801a012:	b2f3      	uxtb	r3, r6
 801a014:	428b      	cmp	r3, r1
 801a016:	d307      	bcc.n	801a028 <MoblePalCryptoDeleteNetworkKey+0x84>
 801a018:	2300      	movs	r3, #0
 801a01a:	e7d3      	b.n	8019fc4 <MoblePalCryptoDeleteNetworkKey+0x20>
 801a01c:	d102      	bne.n	801a024 <MoblePalCryptoDeleteNetworkKey+0x80>
 801a01e:	2303      	movs	r3, #3
 801a020:	e7d0      	b.n	8019fc4 <MoblePalCryptoDeleteNetworkKey+0x20>
 801a022:	2301      	movs	r3, #1
 801a024:	3201      	adds	r2, #1
 801a026:	e7c9      	b.n	8019fbc <MoblePalCryptoDeleteNetworkKey+0x18>
 801a028:	fb08 5303 	mla	r3, r8, r3, r5
 801a02c:	f893 25b8 	ldrb.w	r2, [r3, #1464]	; 0x5b8
 801a030:	2a01      	cmp	r2, #1
 801a032:	d10c      	bne.n	801a04e <MoblePalCryptoDeleteNetworkKey+0xaa>
 801a034:	f893 25c0 	ldrb.w	r2, [r3, #1472]	; 0x5c0
 801a038:	2a01      	cmp	r2, #1
 801a03a:	d108      	bne.n	801a04e <MoblePalCryptoDeleteNetworkKey+0xaa>
 801a03c:	f8b3 25be 	ldrh.w	r2, [r3, #1470]	; 0x5be
 801a040:	42a2      	cmp	r2, r4
 801a042:	d104      	bne.n	801a04e <MoblePalCryptoDeleteNetworkKey+0xaa>
 801a044:	f8b3 05ba 	ldrh.w	r0, [r3, #1466]	; 0x5ba
 801a048:	4621      	mov	r1, r4
 801a04a:	f7ff ff6b 	bl	8019f24 <MoblePalCryptoDeleteAppKey>
 801a04e:	3601      	adds	r6, #1
 801a050:	e7de      	b.n	801a010 <MoblePalCryptoDeleteNetworkKey+0x6c>
 801a052:	bf00      	nop
 801a054:	20000008 	.word	0x20000008
 801a058:	2000141c 	.word	0x2000141c
 801a05c:	20001840 	.word	0x20001840

0801a060 <MoblePalCrypto_GetAppBind_VendorModel>:
 801a060:	4b20      	ldr	r3, [pc, #128]	; (801a0e4 <MoblePalCrypto_GetAppBind_VendorModel+0x84>)
 801a062:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a064:	2400      	movs	r4, #0
 801a066:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a06a:	fb06 f504 	mul.w	r5, r6, r4
 801a06e:	5aef      	ldrh	r7, [r5, r3]
 801a070:	4287      	cmp	r7, r0
 801a072:	d133      	bne.n	801a0dc <MoblePalCrypto_GetAppBind_VendorModel+0x7c>
 801a074:	1958      	adds	r0, r3, r5
 801a076:	2500      	movs	r5, #0
 801a078:	f890 3099 	ldrb.w	r3, [r0, #153]	; 0x99
 801a07c:	2b01      	cmp	r3, #1
 801a07e:	d127      	bne.n	801a0d0 <MoblePalCrypto_GetAppBind_VendorModel+0x70>
 801a080:	4b19      	ldr	r3, [pc, #100]	; (801a0e8 <MoblePalCrypto_GetAppBind_VendorModel+0x88>)
 801a082:	4f1a      	ldr	r7, [pc, #104]	; (801a0ec <MoblePalCrypto_GetAppBind_VendorModel+0x8c>)
 801a084:	891b      	ldrh	r3, [r3, #8]
 801a086:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 801a08a:	4360      	muls	r0, r4
 801a08c:	f04f 0c38 	mov.w	ip, #56	; 0x38
 801a090:	fb0c 0005 	mla	r0, ip, r5, r0
 801a094:	2600      	movs	r6, #0
 801a096:	4438      	add	r0, r7
 801a098:	fa5f fc86 	uxtb.w	ip, r6
 801a09c:	459c      	cmp	ip, r3
 801a09e:	46e6      	mov	lr, ip
 801a0a0:	d215      	bcs.n	801a0ce <MoblePalCrypto_GetAppBind_VendorModel+0x6e>
 801a0a2:	eb00 0e0c 	add.w	lr, r0, ip
 801a0a6:	3601      	adds	r6, #1
 801a0a8:	f89e e152 	ldrb.w	lr, [lr, #338]	; 0x152
 801a0ac:	f1be 0f01 	cmp.w	lr, #1
 801a0b0:	d1f2      	bne.n	801a098 <MoblePalCrypto_GetAppBind_VendorModel+0x38>
 801a0b2:	f44f 73b9 	mov.w	r3, #370	; 0x172
 801a0b6:	4363      	muls	r3, r4
 801a0b8:	201c      	movs	r0, #28
 801a0ba:	fb00 3305 	mla	r3, r0, r5, r3
 801a0be:	4463      	add	r3, ip
 801a0c0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a0c4:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 801a0c8:	800b      	strh	r3, [r1, #0]
 801a0ca:	f8a2 e000 	strh.w	lr, [r2]
 801a0ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a0d0:	3501      	adds	r5, #1
 801a0d2:	2d0b      	cmp	r5, #11
 801a0d4:	f100 0038 	add.w	r0, r0, #56	; 0x38
 801a0d8:	d1ce      	bne.n	801a078 <MoblePalCrypto_GetAppBind_VendorModel+0x18>
 801a0da:	e7f8      	b.n	801a0ce <MoblePalCrypto_GetAppBind_VendorModel+0x6e>
 801a0dc:	3401      	adds	r4, #1
 801a0de:	2c05      	cmp	r4, #5
 801a0e0:	d1c3      	bne.n	801a06a <MoblePalCrypto_GetAppBind_VendorModel+0xa>
 801a0e2:	e7f4      	b.n	801a0ce <MoblePalCrypto_GetAppBind_VendorModel+0x6e>
 801a0e4:	200003d0 	.word	0x200003d0
 801a0e8:	20000008 	.word	0x20000008
 801a0ec:	20000324 	.word	0x20000324

0801a0f0 <MoblePalCrypto_GetAppBind_SIGModel>:
 801a0f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a0f2:	4c1f      	ldr	r4, [pc, #124]	; (801a170 <MoblePalCrypto_GetAppBind_SIGModel+0x80>)
 801a0f4:	2500      	movs	r5, #0
 801a0f6:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a0fa:	fb06 f305 	mul.w	r3, r6, r5
 801a0fe:	5b1f      	ldrh	r7, [r3, r4]
 801a100:	4287      	cmp	r7, r0
 801a102:	d131      	bne.n	801a168 <MoblePalCrypto_GetAppBind_SIGModel+0x78>
 801a104:	441c      	add	r4, r3
 801a106:	2600      	movs	r6, #0
 801a108:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
 801a10c:	bb30      	cbnz	r0, 801a15c <MoblePalCrypto_GetAppBind_SIGModel+0x6c>
 801a10e:	4b19      	ldr	r3, [pc, #100]	; (801a174 <MoblePalCrypto_GetAppBind_SIGModel+0x84>)
 801a110:	4f19      	ldr	r7, [pc, #100]	; (801a178 <MoblePalCrypto_GetAppBind_SIGModel+0x88>)
 801a112:	891b      	ldrh	r3, [r3, #8]
 801a114:	f44f 7439 	mov.w	r4, #740	; 0x2e4
 801a118:	436c      	muls	r4, r5
 801a11a:	f04f 0c38 	mov.w	ip, #56	; 0x38
 801a11e:	fb0c 4406 	mla	r4, ip, r6, r4
 801a122:	443c      	add	r4, r7
 801a124:	fa5f fc80 	uxtb.w	ip, r0
 801a128:	459c      	cmp	ip, r3
 801a12a:	46e6      	mov	lr, ip
 801a12c:	d215      	bcs.n	801a15a <MoblePalCrypto_GetAppBind_SIGModel+0x6a>
 801a12e:	eb04 0e0c 	add.w	lr, r4, ip
 801a132:	3001      	adds	r0, #1
 801a134:	f89e e152 	ldrb.w	lr, [lr, #338]	; 0x152
 801a138:	f1be 0f01 	cmp.w	lr, #1
 801a13c:	d1f2      	bne.n	801a124 <MoblePalCrypto_GetAppBind_SIGModel+0x34>
 801a13e:	f44f 73b9 	mov.w	r3, #370	; 0x172
 801a142:	436b      	muls	r3, r5
 801a144:	201c      	movs	r0, #28
 801a146:	fb00 3306 	mla	r3, r0, r6, r3
 801a14a:	4463      	add	r3, ip
 801a14c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a150:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 801a154:	800b      	strh	r3, [r1, #0]
 801a156:	f8a2 e000 	strh.w	lr, [r2]
 801a15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a15c:	3601      	adds	r6, #1
 801a15e:	2e0b      	cmp	r6, #11
 801a160:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801a164:	d1d0      	bne.n	801a108 <MoblePalCrypto_GetAppBind_SIGModel+0x18>
 801a166:	e7f8      	b.n	801a15a <MoblePalCrypto_GetAppBind_SIGModel+0x6a>
 801a168:	3501      	adds	r5, #1
 801a16a:	2d05      	cmp	r5, #5
 801a16c:	d1c5      	bne.n	801a0fa <MoblePalCrypto_GetAppBind_SIGModel+0xa>
 801a16e:	e7f4      	b.n	801a15a <MoblePalCrypto_GetAppBind_SIGModel+0x6a>
 801a170:	200003d0 	.word	0x200003d0
 801a174:	20000008 	.word	0x20000008
 801a178:	20000324 	.word	0x20000324

0801a17c <MoblePalCryptoHasAppKeyBind>:
 801a17c:	4b22      	ldr	r3, [pc, #136]	; (801a208 <MoblePalCryptoHasAppKeyBind+0x8c>)
 801a17e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a180:	4604      	mov	r4, r0
 801a182:	2500      	movs	r5, #0
 801a184:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a188:	fb06 f005 	mul.w	r0, r6, r5
 801a18c:	5ac7      	ldrh	r7, [r0, r3]
 801a18e:	428f      	cmp	r7, r1
 801a190:	d134      	bne.n	801a1fc <MoblePalCryptoHasAppKeyBind+0x80>
 801a192:	4403      	add	r3, r0
 801a194:	2100      	movs	r1, #0
 801a196:	2001      	movs	r0, #1
 801a198:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 801a19a:	42a6      	cmp	r6, r4
 801a19c:	d126      	bne.n	801a1ec <MoblePalCryptoHasAppKeyBind+0x70>
 801a19e:	4b1b      	ldr	r3, [pc, #108]	; (801a20c <MoblePalCryptoHasAppKeyBind+0x90>)
 801a1a0:	4f1b      	ldr	r7, [pc, #108]	; (801a210 <MoblePalCryptoHasAppKeyBind+0x94>)
 801a1a2:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 801a1a6:	f44f 7439 	mov.w	r4, #740	; 0x2e4
 801a1aa:	2338      	movs	r3, #56	; 0x38
 801a1ac:	436c      	muls	r4, r5
 801a1ae:	fb03 4401 	mla	r4, r3, r1, r4
 801a1b2:	231c      	movs	r3, #28
 801a1b4:	2600      	movs	r6, #0
 801a1b6:	443c      	add	r4, r7
 801a1b8:	4359      	muls	r1, r3
 801a1ba:	fa5f fe86 	uxtb.w	lr, r6
 801a1be:	45e6      	cmp	lr, ip
 801a1c0:	d300      	bcc.n	801a1c4 <MoblePalCryptoHasAppKeyBind+0x48>
 801a1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a1c4:	eb04 030e 	add.w	r3, r4, lr
 801a1c8:	f893 0152 	ldrb.w	r0, [r3, #338]	; 0x152
 801a1cc:	2801      	cmp	r0, #1
 801a1ce:	d10a      	bne.n	801a1e6 <MoblePalCryptoHasAppKeyBind+0x6a>
 801a1d0:	f44f 73b9 	mov.w	r3, #370	; 0x172
 801a1d4:	fb03 1305 	mla	r3, r3, r5, r1
 801a1d8:	4473      	add	r3, lr
 801a1da:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a1de:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 801a1e2:	4293      	cmp	r3, r2
 801a1e4:	d0ed      	beq.n	801a1c2 <MoblePalCryptoHasAppKeyBind+0x46>
 801a1e6:	3601      	adds	r6, #1
 801a1e8:	2000      	movs	r0, #0
 801a1ea:	e7e6      	b.n	801a1ba <MoblePalCryptoHasAppKeyBind+0x3e>
 801a1ec:	3101      	adds	r1, #1
 801a1ee:	290b      	cmp	r1, #11
 801a1f0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801a1f4:	f04f 0000 	mov.w	r0, #0
 801a1f8:	d1ce      	bne.n	801a198 <MoblePalCryptoHasAppKeyBind+0x1c>
 801a1fa:	e7e2      	b.n	801a1c2 <MoblePalCryptoHasAppKeyBind+0x46>
 801a1fc:	3501      	adds	r5, #1
 801a1fe:	2d05      	cmp	r5, #5
 801a200:	d1c2      	bne.n	801a188 <MoblePalCryptoHasAppKeyBind+0xc>
 801a202:	2001      	movs	r0, #1
 801a204:	e7dd      	b.n	801a1c2 <MoblePalCryptoHasAppKeyBind+0x46>
 801a206:	bf00      	nop
 801a208:	200003d0 	.word	0x200003d0
 801a20c:	20000008 	.word	0x20000008
 801a210:	20000324 	.word	0x20000324

0801a214 <MoblePalCryptoHasAppKeyIndex>:
 801a214:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a216:	4c17      	ldr	r4, [pc, #92]	; (801a274 <MoblePalCryptoHasAppKeyIndex+0x60>)
 801a218:	4d17      	ldr	r5, [pc, #92]	; (801a278 <MoblePalCryptoHasAppKeyIndex+0x64>)
 801a21a:	8826      	ldrh	r6, [r4, #0]
 801a21c:	2300      	movs	r3, #0
 801a21e:	f04f 0c7c 	mov.w	ip, #124	; 0x7c
 801a222:	b2da      	uxtb	r2, r3
 801a224:	42b2      	cmp	r2, r6
 801a226:	d20c      	bcs.n	801a242 <MoblePalCryptoHasAppKeyIndex+0x2e>
 801a228:	fb0c 5202 	mla	r2, ip, r2, r5
 801a22c:	3301      	adds	r3, #1
 801a22e:	f8b2 2448 	ldrh.w	r2, [r2, #1096]	; 0x448
 801a232:	4282      	cmp	r2, r0
 801a234:	d1f5      	bne.n	801a222 <MoblePalCryptoHasAppKeyIndex+0xe>
 801a236:	8926      	ldrh	r6, [r4, #8]
 801a238:	2200      	movs	r2, #0
 801a23a:	272c      	movs	r7, #44	; 0x2c
 801a23c:	b2d3      	uxtb	r3, r2
 801a23e:	42b3      	cmp	r3, r6
 801a240:	d301      	bcc.n	801a246 <MoblePalCryptoHasAppKeyIndex+0x32>
 801a242:	2001      	movs	r0, #1
 801a244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a246:	fb07 5303 	mla	r3, r7, r3, r5
 801a24a:	f8b3 c5ba 	ldrh.w	ip, [r3, #1466]	; 0x5ba
 801a24e:	f893 45b8 	ldrb.w	r4, [r3, #1464]	; 0x5b8
 801a252:	458c      	cmp	ip, r1
 801a254:	d107      	bne.n	801a266 <MoblePalCryptoHasAppKeyIndex+0x52>
 801a256:	2c01      	cmp	r4, #1
 801a258:	d107      	bne.n	801a26a <MoblePalCryptoHasAppKeyIndex+0x56>
 801a25a:	f8b3 35be 	ldrh.w	r3, [r3, #1470]	; 0x5be
 801a25e:	4283      	cmp	r3, r0
 801a260:	d103      	bne.n	801a26a <MoblePalCryptoHasAppKeyIndex+0x56>
 801a262:	2000      	movs	r0, #0
 801a264:	e7ee      	b.n	801a244 <MoblePalCryptoHasAppKeyIndex+0x30>
 801a266:	2c01      	cmp	r4, #1
 801a268:	d001      	beq.n	801a26e <MoblePalCryptoHasAppKeyIndex+0x5a>
 801a26a:	3201      	adds	r2, #1
 801a26c:	e7e6      	b.n	801a23c <MoblePalCryptoHasAppKeyIndex+0x28>
 801a26e:	2003      	movs	r0, #3
 801a270:	e7e8      	b.n	801a244 <MoblePalCryptoHasAppKeyIndex+0x30>
 801a272:	bf00      	nop
 801a274:	20000008 	.word	0x20000008
 801a278:	2000141c 	.word	0x2000141c

0801a27c <BnrgmPalCryptoMatchAid>:
 801a27c:	4b18      	ldr	r3, [pc, #96]	; (801a2e0 <BnrgmPalCryptoMatchAid+0x64>)
 801a27e:	b570      	push	{r4, r5, r6, lr}
 801a280:	891e      	ldrh	r6, [r3, #8]
 801a282:	4b18      	ldr	r3, [pc, #96]	; (801a2e4 <BnrgmPalCryptoMatchAid+0x68>)
 801a284:	2400      	movs	r4, #0
 801a286:	b2a5      	uxth	r5, r4
 801a288:	42ae      	cmp	r6, r5
 801a28a:	7802      	ldrb	r2, [r0, #0]
 801a28c:	d805      	bhi.n	801a29a <BnrgmPalCryptoMatchAid+0x1e>
 801a28e:	bb22      	cbnz	r2, 801a2da <BnrgmPalCryptoMatchAid+0x5e>
 801a290:	7900      	ldrb	r0, [r0, #4]
 801a292:	fab0 f080 	clz	r0, r0
 801a296:	0940      	lsrs	r0, r0, #5
 801a298:	bd70      	pop	{r4, r5, r6, pc}
 801a29a:	f893 5194 	ldrb.w	r5, [r3, #404]	; 0x194
 801a29e:	b155      	cbz	r5, 801a2b6 <BnrgmPalCryptoMatchAid+0x3a>
 801a2a0:	f893 5198 	ldrb.w	r5, [r3, #408]	; 0x198
 801a2a4:	428d      	cmp	r5, r1
 801a2a6:	d106      	bne.n	801a2b6 <BnrgmPalCryptoMatchAid+0x3a>
 801a2a8:	f893 519c 	ldrb.w	r5, [r3, #412]	; 0x19c
 801a2ac:	b11d      	cbz	r5, 801a2b6 <BnrgmPalCryptoMatchAid+0x3a>
 801a2ae:	1885      	adds	r5, r0, r2
 801a2b0:	3201      	adds	r2, #1
 801a2b2:	706c      	strb	r4, [r5, #1]
 801a2b4:	7002      	strb	r2, [r0, #0]
 801a2b6:	f893 2195 	ldrb.w	r2, [r3, #405]	; 0x195
 801a2ba:	b15a      	cbz	r2, 801a2d4 <BnrgmPalCryptoMatchAid+0x58>
 801a2bc:	f893 2199 	ldrb.w	r2, [r3, #409]	; 0x199
 801a2c0:	428a      	cmp	r2, r1
 801a2c2:	d107      	bne.n	801a2d4 <BnrgmPalCryptoMatchAid+0x58>
 801a2c4:	f893 219c 	ldrb.w	r2, [r3, #412]	; 0x19c
 801a2c8:	b122      	cbz	r2, 801a2d4 <BnrgmPalCryptoMatchAid+0x58>
 801a2ca:	7902      	ldrb	r2, [r0, #4]
 801a2cc:	1885      	adds	r5, r0, r2
 801a2ce:	3201      	adds	r2, #1
 801a2d0:	716c      	strb	r4, [r5, #5]
 801a2d2:	7102      	strb	r2, [r0, #4]
 801a2d4:	3401      	adds	r4, #1
 801a2d6:	332c      	adds	r3, #44	; 0x2c
 801a2d8:	e7d5      	b.n	801a286 <BnrgmPalCryptoMatchAid+0xa>
 801a2da:	2000      	movs	r0, #0
 801a2dc:	e7dc      	b.n	801a298 <BnrgmPalCryptoMatchAid+0x1c>
 801a2de:	bf00      	nop
 801a2e0:	20000008 	.word	0x20000008
 801a2e4:	20001840 	.word	0x20001840

0801a2e8 <BnrgmPalCryptoMatchNid>:
 801a2e8:	4b2b      	ldr	r3, [pc, #172]	; (801a398 <BnrgmPalCryptoMatchNid+0xb0>)
 801a2ea:	4a2c      	ldr	r2, [pc, #176]	; (801a39c <BnrgmPalCryptoMatchNid+0xb4>)
 801a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2ee:	881e      	ldrh	r6, [r3, #0]
 801a2f0:	2400      	movs	r4, #0
 801a2f2:	b2a5      	uxth	r5, r4
 801a2f4:	42ae      	cmp	r6, r5
 801a2f6:	7803      	ldrb	r3, [r0, #0]
 801a2f8:	d80c      	bhi.n	801a314 <BnrgmPalCryptoMatchNid+0x2c>
 801a2fa:	4d29      	ldr	r5, [pc, #164]	; (801a3a0 <BnrgmPalCryptoMatchNid+0xb8>)
 801a2fc:	2200      	movs	r2, #0
 801a2fe:	f5a5 67c6 	sub.w	r7, r5, #1584	; 0x630
 801a302:	f04f 0c7c 	mov.w	ip, #124	; 0x7c
 801a306:	f855 6b04 	ldr.w	r6, [r5], #4
 801a30a:	b9ee      	cbnz	r6, 801a348 <BnrgmPalCryptoMatchNid+0x60>
 801a30c:	2b00      	cmp	r3, #0
 801a30e:	d038      	beq.n	801a382 <BnrgmPalCryptoMatchNid+0x9a>
 801a310:	2300      	movs	r3, #0
 801a312:	e03e      	b.n	801a392 <BnrgmPalCryptoMatchNid+0xaa>
 801a314:	f892 5021 	ldrb.w	r5, [r2, #33]	; 0x21
 801a318:	b19d      	cbz	r5, 801a342 <BnrgmPalCryptoMatchNid+0x5a>
 801a31a:	f892 5038 	ldrb.w	r5, [r2, #56]	; 0x38
 801a31e:	428d      	cmp	r5, r1
 801a320:	bf01      	itttt	eq
 801a322:	18c5      	addeq	r5, r0, r3
 801a324:	3301      	addeq	r3, #1
 801a326:	706c      	strbeq	r4, [r5, #1]
 801a328:	7003      	strbeq	r3, [r0, #0]
 801a32a:	f892 3022 	ldrb.w	r3, [r2, #34]	; 0x22
 801a32e:	b143      	cbz	r3, 801a342 <BnrgmPalCryptoMatchNid+0x5a>
 801a330:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 801a334:	428b      	cmp	r3, r1
 801a336:	d104      	bne.n	801a342 <BnrgmPalCryptoMatchNid+0x5a>
 801a338:	7903      	ldrb	r3, [r0, #4]
 801a33a:	18c5      	adds	r5, r0, r3
 801a33c:	3301      	adds	r3, #1
 801a33e:	716c      	strb	r4, [r5, #5]
 801a340:	7103      	strb	r3, [r0, #4]
 801a342:	3401      	adds	r4, #1
 801a344:	327c      	adds	r2, #124	; 0x7c
 801a346:	e7d4      	b.n	801a2f2 <BnrgmPalCryptoMatchNid+0xa>
 801a348:	f896 4040 	ldrb.w	r4, [r6, #64]	; 0x40
 801a34c:	b1a4      	cbz	r4, 801a378 <BnrgmPalCryptoMatchNid+0x90>
 801a34e:	428c      	cmp	r4, r1
 801a350:	d106      	bne.n	801a360 <BnrgmPalCryptoMatchNid+0x78>
 801a352:	7a04      	ldrb	r4, [r0, #8]
 801a354:	eb00 0e04 	add.w	lr, r0, r4
 801a358:	3401      	adds	r4, #1
 801a35a:	f88e 2009 	strb.w	r2, [lr, #9]
 801a35e:	7204      	strb	r4, [r0, #8]
 801a360:	f896 4042 	ldrb.w	r4, [r6, #66]	; 0x42
 801a364:	fb0c 7404 	mla	r4, ip, r4, r7
 801a368:	f894 4446 	ldrb.w	r4, [r4, #1094]	; 0x446
 801a36c:	b124      	cbz	r4, 801a378 <BnrgmPalCryptoMatchNid+0x90>
 801a36e:	7cc4      	ldrb	r4, [r0, #19]
 801a370:	1906      	adds	r6, r0, r4
 801a372:	3401      	adds	r4, #1
 801a374:	7532      	strb	r2, [r6, #20]
 801a376:	74c4      	strb	r4, [r0, #19]
 801a378:	3201      	adds	r2, #1
 801a37a:	b2d2      	uxtb	r2, r2
 801a37c:	2a0a      	cmp	r2, #10
 801a37e:	d1c2      	bne.n	801a306 <BnrgmPalCryptoMatchNid+0x1e>
 801a380:	e7c4      	b.n	801a30c <BnrgmPalCryptoMatchNid+0x24>
 801a382:	7902      	ldrb	r2, [r0, #4]
 801a384:	b92a      	cbnz	r2, 801a392 <BnrgmPalCryptoMatchNid+0xaa>
 801a386:	7a02      	ldrb	r2, [r0, #8]
 801a388:	b91a      	cbnz	r2, 801a392 <BnrgmPalCryptoMatchNid+0xaa>
 801a38a:	7cc3      	ldrb	r3, [r0, #19]
 801a38c:	fab3 f383 	clz	r3, r3
 801a390:	095b      	lsrs	r3, r3, #5
 801a392:	4618      	mov	r0, r3
 801a394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a396:	bf00      	nop
 801a398:	20000008 	.word	0x20000008
 801a39c:	20001840 	.word	0x20001840
 801a3a0:	20001a4c 	.word	0x20001a4c

0801a3a4 <BnrgmPalCryptoInitFriendshipKeysP>:
 801a3a4:	280a      	cmp	r0, #10
 801a3a6:	d80b      	bhi.n	801a3c0 <BnrgmPalCryptoInitFriendshipKeysP+0x1c>
 801a3a8:	4b06      	ldr	r3, [pc, #24]	; (801a3c4 <BnrgmPalCryptoInitFriendshipKeysP+0x20>)
 801a3aa:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 801a3ae:	4281      	cmp	r1, r0
 801a3b0:	d101      	bne.n	801a3b6 <BnrgmPalCryptoInitFriendshipKeysP+0x12>
 801a3b2:	2000      	movs	r0, #0
 801a3b4:	4770      	bx	lr
 801a3b6:	f851 2b04 	ldr.w	r2, [r1], #4
 801a3ba:	f843 2b04 	str.w	r2, [r3], #4
 801a3be:	e7f6      	b.n	801a3ae <BnrgmPalCryptoInitFriendshipKeysP+0xa>
 801a3c0:	2002      	movs	r0, #2
 801a3c2:	4770      	bx	lr
 801a3c4:	20001a4c 	.word	0x20001a4c

0801a3c8 <BnrgmPalCryptoSetFriendshipNetKeyOffset>:
 801a3c8:	280a      	cmp	r0, #10
 801a3ca:	d80d      	bhi.n	801a3e8 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 801a3cc:	4b07      	ldr	r3, [pc, #28]	; (801a3ec <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x24>)
 801a3ce:	881b      	ldrh	r3, [r3, #0]
 801a3d0:	428b      	cmp	r3, r1
 801a3d2:	d309      	bcc.n	801a3e8 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x20>
 801a3d4:	4b06      	ldr	r3, [pc, #24]	; (801a3f0 <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x28>)
 801a3d6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a3da:	f8d0 0630 	ldr.w	r0, [r0, #1584]	; 0x630
 801a3de:	b120      	cbz	r0, 801a3ea <BnrgmPalCryptoSetFriendshipNetKeyOffset+0x22>
 801a3e0:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
 801a3e4:	2000      	movs	r0, #0
 801a3e6:	4770      	bx	lr
 801a3e8:	2003      	movs	r0, #3
 801a3ea:	4770      	bx	lr
 801a3ec:	20000008 	.word	0x20000008
 801a3f0:	2000141c 	.word	0x2000141c

0801a3f4 <BnrgmPalCryptoSetFriendshipKeys>:
 801a3f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a3f8:	b089      	sub	sp, #36	; 0x24
 801a3fa:	2501      	movs	r5, #1
 801a3fc:	f8bd 4040 	ldrh.w	r4, [sp, #64]	; 0x40
 801a400:	f88d 5014 	strb.w	r5, [sp, #20]
 801a404:	f88d 1016 	strb.w	r1, [sp, #22]
 801a408:	0a0d      	lsrs	r5, r1, #8
 801a40a:	f88d 2018 	strb.w	r2, [sp, #24]
 801a40e:	0a11      	lsrs	r1, r2, #8
 801a410:	f88d 301a 	strb.w	r3, [sp, #26]
 801a414:	0a1a      	lsrs	r2, r3, #8
 801a416:	280a      	cmp	r0, #10
 801a418:	ea4f 2314 	mov.w	r3, r4, lsr #8
 801a41c:	f88d 5015 	strb.w	r5, [sp, #21]
 801a420:	f88d 1017 	strb.w	r1, [sp, #23]
 801a424:	f88d 2019 	strb.w	r2, [sp, #25]
 801a428:	f88d 301b 	strb.w	r3, [sp, #27]
 801a42c:	f88d 401c 	strb.w	r4, [sp, #28]
 801a430:	d838      	bhi.n	801a4a4 <BnrgmPalCryptoSetFriendshipKeys+0xb0>
 801a432:	4e1d      	ldr	r6, [pc, #116]	; (801a4a8 <BnrgmPalCryptoSetFriendshipKeys+0xb4>)
 801a434:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 801a438:	f206 4824 	addw	r8, r6, #1060	; 0x424
 801a43c:	f8d0 4630 	ldr.w	r4, [r0, #1584]	; 0x630
 801a440:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801a444:	f04f 0909 	mov.w	r9, #9
 801a448:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
 801a44c:	ad05      	add	r5, sp, #20
 801a44e:	2710      	movs	r7, #16
 801a450:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 801a454:	f104 0220 	add.w	r2, r4, #32
 801a458:	4621      	mov	r1, r4
 801a45a:	f8cd 9008 	str.w	r9, [sp, #8]
 801a45e:	9501      	str	r5, [sp, #4]
 801a460:	9700      	str	r7, [sp, #0]
 801a462:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801a466:	f7ff f845 	bl	80194f4 <MoblePalCryptoK2>
 801a46a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 801a46e:	237c      	movs	r3, #124	; 0x7c
 801a470:	fb03 6602 	mla	r6, r3, r2, r6
 801a474:	f896 1446 	ldrb.w	r1, [r6, #1094]	; 0x446
 801a478:	2901      	cmp	r1, #1
 801a47a:	d10c      	bne.n	801a496 <BnrgmPalCryptoSetFriendshipKeys+0xa2>
 801a47c:	fb13 7302 	smlabb	r3, r3, r2, r7
 801a480:	e9cd 5901 	strd	r5, r9, [sp, #4]
 801a484:	9700      	str	r7, [sp, #0]
 801a486:	4443      	add	r3, r8
 801a488:	f104 0230 	add.w	r2, r4, #48	; 0x30
 801a48c:	19e1      	adds	r1, r4, r7
 801a48e:	f104 0041 	add.w	r0, r4, #65	; 0x41
 801a492:	f7ff f82f 	bl	80194f4 <MoblePalCryptoK2>
 801a496:	2802      	cmp	r0, #2
 801a498:	bf34      	ite	cc
 801a49a:	2000      	movcc	r0, #0
 801a49c:	2002      	movcs	r0, #2
 801a49e:	b009      	add	sp, #36	; 0x24
 801a4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a4a4:	2003      	movs	r0, #3
 801a4a6:	e7fa      	b.n	801a49e <BnrgmPalCryptoSetFriendshipKeys+0xaa>
 801a4a8:	2000141c 	.word	0x2000141c

0801a4ac <BnrgmPalCryptoSwitchFriendshipKeys>:
 801a4ac:	280a      	cmp	r0, #10
 801a4ae:	b570      	push	{r4, r5, r6, lr}
 801a4b0:	d830      	bhi.n	801a514 <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 801a4b2:	4b19      	ldr	r3, [pc, #100]	; (801a518 <BnrgmPalCryptoSwitchFriendshipKeys+0x6c>)
 801a4b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a4b8:	f8d0 3630 	ldr.w	r3, [r0, #1584]	; 0x630
 801a4bc:	b353      	cbz	r3, 801a514 <BnrgmPalCryptoSwitchFriendshipKeys+0x68>
 801a4be:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 801a4c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801a4c6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801a4ca:	4602      	mov	r2, r0
 801a4cc:	f103 0120 	add.w	r1, r3, #32
 801a4d0:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801a4d4:	f852 5b04 	ldr.w	r5, [r2], #4
 801a4d8:	f841 5b04 	str.w	r5, [r1], #4
 801a4dc:	42a2      	cmp	r2, r4
 801a4de:	d1f9      	bne.n	801a4d4 <BnrgmPalCryptoSwitchFriendshipKeys+0x28>
 801a4e0:	f103 0510 	add.w	r5, r3, #16
 801a4e4:	462a      	mov	r2, r5
 801a4e6:	4619      	mov	r1, r3
 801a4e8:	f105 0410 	add.w	r4, r5, #16
 801a4ec:	f852 6b04 	ldr.w	r6, [r2], #4
 801a4f0:	f841 6b04 	str.w	r6, [r1], #4
 801a4f4:	42a2      	cmp	r2, r4
 801a4f6:	d1f9      	bne.n	801a4ec <BnrgmPalCryptoSwitchFriendshipKeys+0x40>
 801a4f8:	2400      	movs	r4, #0
 801a4fa:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
 801a4fe:	2210      	movs	r2, #16
 801a500:	4621      	mov	r1, r4
 801a502:	f00f f9d7 	bl	80298b4 <memset>
 801a506:	2210      	movs	r2, #16
 801a508:	4621      	mov	r1, r4
 801a50a:	4628      	mov	r0, r5
 801a50c:	f00f f9d2 	bl	80298b4 <memset>
 801a510:	4620      	mov	r0, r4
 801a512:	bd70      	pop	{r4, r5, r6, pc}
 801a514:	2003      	movs	r0, #3
 801a516:	e7fc      	b.n	801a512 <BnrgmPalCryptoSwitchFriendshipKeys+0x66>
 801a518:	2000141c 	.word	0x2000141c

0801a51c <BnrgmPalCryptoDeleteFriendshipKeys>:
 801a51c:	280a      	cmp	r0, #10
 801a51e:	b508      	push	{r3, lr}
 801a520:	d80b      	bhi.n	801a53a <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 801a522:	4b07      	ldr	r3, [pc, #28]	; (801a540 <BnrgmPalCryptoDeleteFriendshipKeys+0x24>)
 801a524:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801a528:	f8d0 0630 	ldr.w	r0, [r0, #1584]	; 0x630
 801a52c:	b128      	cbz	r0, 801a53a <BnrgmPalCryptoDeleteFriendshipKeys+0x1e>
 801a52e:	2244      	movs	r2, #68	; 0x44
 801a530:	2100      	movs	r1, #0
 801a532:	f00f f9bf 	bl	80298b4 <memset>
 801a536:	2000      	movs	r0, #0
 801a538:	bd08      	pop	{r3, pc}
 801a53a:	2003      	movs	r0, #3
 801a53c:	e7fc      	b.n	801a538 <BnrgmPalCryptoDeleteFriendshipKeys+0x1c>
 801a53e:	bf00      	nop
 801a540:	2000141c 	.word	0x2000141c

0801a544 <MoblePalCrypto_UpdateModelPublicationParameters>:
 801a544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a546:	b931      	cbnz	r1, 801a556 <MoblePalCrypto_UpdateModelPublicationParameters+0x12>
 801a548:	4b25      	ldr	r3, [pc, #148]	; (801a5e0 <MoblePalCrypto_UpdateModelPublicationParameters+0x9c>)
 801a54a:	4a26      	ldr	r2, [pc, #152]	; (801a5e4 <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 801a54c:	f640 31c6 	movw	r1, #3014	; 0xbc6
 801a550:	4825      	ldr	r0, [pc, #148]	; (801a5e8 <MoblePalCrypto_UpdateModelPublicationParameters+0xa4>)
 801a552:	f00e fab9 	bl	8028ac8 <__assert_func>
 801a556:	b952      	cbnz	r2, 801a56e <MoblePalCrypto_UpdateModelPublicationParameters+0x2a>
 801a558:	4b24      	ldr	r3, [pc, #144]	; (801a5ec <MoblePalCrypto_UpdateModelPublicationParameters+0xa8>)
 801a55a:	4a22      	ldr	r2, [pc, #136]	; (801a5e4 <MoblePalCrypto_UpdateModelPublicationParameters+0xa0>)
 801a55c:	f640 31c7 	movw	r1, #3015	; 0xbc7
 801a560:	e7f6      	b.n	801a550 <MoblePalCrypto_UpdateModelPublicationParameters+0xc>
 801a562:	3001      	adds	r0, #1
 801a564:	280b      	cmp	r0, #11
 801a566:	f101 0138 	add.w	r1, r1, #56	; 0x38
 801a56a:	d114      	bne.n	801a596 <MoblePalCrypto_UpdateModelPublicationParameters+0x52>
 801a56c:	e034      	b.n	801a5d8 <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 801a56e:	4b20      	ldr	r3, [pc, #128]	; (801a5f0 <MoblePalCrypto_UpdateModelPublicationParameters+0xac>)
 801a570:	2400      	movs	r4, #0
 801a572:	f44f 7539 	mov.w	r5, #740	; 0x2e4
 801a576:	f5a3 7739 	sub.w	r7, r3, #740	; 0x2e4
 801a57a:	b2e6      	uxtb	r6, r4
 801a57c:	42b0      	cmp	r0, r6
 801a57e:	d92b      	bls.n	801a5d8 <MoblePalCrypto_UpdateModelPublicationParameters+0x94>
 801a580:	fb04 5c05 	mla	ip, r4, r5, r5
 801a584:	1c66      	adds	r6, r4, #1
 801a586:	f83c c007 	ldrh.w	ip, [ip, r7]
 801a58a:	458c      	cmp	ip, r1
 801a58c:	d125      	bne.n	801a5da <MoblePalCrypto_UpdateModelPublicationParameters+0x96>
 801a58e:	6816      	ldr	r6, [r2, #0]
 801a590:	fb05 3104 	mla	r1, r5, r4, r3
 801a594:	2000      	movs	r0, #0
 801a596:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801a598:	42b3      	cmp	r3, r6
 801a59a:	d1e2      	bne.n	801a562 <MoblePalCrypto_UpdateModelPublicationParameters+0x1e>
 801a59c:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 801a5a0:	435c      	muls	r4, r3
 801a5a2:	2338      	movs	r3, #56	; 0x38
 801a5a4:	fb03 4400 	mla	r4, r3, r0, r4
 801a5a8:	4b12      	ldr	r3, [pc, #72]	; (801a5f4 <MoblePalCrypto_UpdateModelPublicationParameters+0xb0>)
 801a5aa:	8891      	ldrh	r1, [r2, #4]
 801a5ac:	4423      	add	r3, r4
 801a5ae:	f8a3 1128 	strh.w	r1, [r3, #296]	; 0x128
 801a5b2:	88d1      	ldrh	r1, [r2, #6]
 801a5b4:	f8a3 112a 	strh.w	r1, [r3, #298]	; 0x12a
 801a5b8:	7f11      	ldrb	r1, [r2, #28]
 801a5ba:	f883 1140 	strb.w	r1, [r3, #320]	; 0x140
 801a5be:	7f51      	ldrb	r1, [r2, #29]
 801a5c0:	f883 1141 	strb.w	r1, [r3, #321]	; 0x141
 801a5c4:	7f91      	ldrb	r1, [r2, #30]
 801a5c6:	f883 1142 	strb.w	r1, [r3, #322]	; 0x142
 801a5ca:	7fd1      	ldrb	r1, [r2, #31]
 801a5cc:	f883 1143 	strb.w	r1, [r3, #323]	; 0x143
 801a5d0:	f892 2020 	ldrb.w	r2, [r2, #32]
 801a5d4:	f883 2144 	strb.w	r2, [r3, #324]	; 0x144
 801a5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a5da:	4634      	mov	r4, r6
 801a5dc:	e7cd      	b.n	801a57a <MoblePalCrypto_UpdateModelPublicationParameters+0x36>
 801a5de:	bf00      	nop
 801a5e0:	0803349f 	.word	0x0803349f
 801a5e4:	080314c4 	.word	0x080314c4
 801a5e8:	0803345b 	.word	0x0803345b
 801a5ec:	080334ae 	.word	0x080334ae
 801a5f0:	200003d0 	.word	0x200003d0
 801a5f4:	20000324 	.word	0x20000324

0801a5f8 <MoblePalCrypto_UpdateHealthModelPublicationParameters>:
 801a5f8:	b508      	push	{r3, lr}
 801a5fa:	b930      	cbnz	r0, 801a60a <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x12>
 801a5fc:	4b12      	ldr	r3, [pc, #72]	; (801a648 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x50>)
 801a5fe:	4a13      	ldr	r2, [pc, #76]	; (801a64c <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 801a600:	f640 31ed 	movw	r1, #3053	; 0xbed
 801a604:	4812      	ldr	r0, [pc, #72]	; (801a650 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x58>)
 801a606:	f00e fa5f 	bl	8028ac8 <__assert_func>
 801a60a:	b921      	cbnz	r1, 801a616 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x1e>
 801a60c:	4b11      	ldr	r3, [pc, #68]	; (801a654 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x5c>)
 801a60e:	4a0f      	ldr	r2, [pc, #60]	; (801a64c <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x54>)
 801a610:	f640 31ee 	movw	r1, #3054	; 0xbee
 801a614:	e7f6      	b.n	801a604 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0xc>
 801a616:	4b10      	ldr	r3, [pc, #64]	; (801a658 <MoblePalCrypto_UpdateHealthModelPublicationParameters+0x60>)
 801a618:	888a      	ldrh	r2, [r1, #4]
 801a61a:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
 801a61e:	88ca      	ldrh	r2, [r1, #6]
 801a620:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
 801a624:	7f0a      	ldrb	r2, [r1, #28]
 801a626:	f883 210f 	strb.w	r2, [r3, #271]	; 0x10f
 801a62a:	7f4a      	ldrb	r2, [r1, #29]
 801a62c:	f883 210e 	strb.w	r2, [r3, #270]	; 0x10e
 801a630:	7f8a      	ldrb	r2, [r1, #30]
 801a632:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
 801a636:	7fca      	ldrb	r2, [r1, #31]
 801a638:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 801a63c:	f891 2020 	ldrb.w	r2, [r1, #32]
 801a640:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
 801a644:	bd08      	pop	{r3, pc}
 801a646:	bf00      	nop
 801a648:	0803349f 	.word	0x0803349f
 801a64c:	080314f4 	.word	0x080314f4
 801a650:	0803345b 	.word	0x0803345b
 801a654:	080334ae 	.word	0x080334ae
 801a658:	20000324 	.word	0x20000324

0801a65c <MoblePalCrypto_GetModelPublicationParameters>:
 801a65c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a65e:	b931      	cbnz	r1, 801a66e <MoblePalCrypto_GetModelPublicationParameters+0x12>
 801a660:	4b1b      	ldr	r3, [pc, #108]	; (801a6d0 <MoblePalCrypto_GetModelPublicationParameters+0x74>)
 801a662:	4a1c      	ldr	r2, [pc, #112]	; (801a6d4 <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 801a664:	f640 4162 	movw	r1, #3170	; 0xc62
 801a668:	481b      	ldr	r0, [pc, #108]	; (801a6d8 <MoblePalCrypto_GetModelPublicationParameters+0x7c>)
 801a66a:	f00e fa2d 	bl	8028ac8 <__assert_func>
 801a66e:	b922      	cbnz	r2, 801a67a <MoblePalCrypto_GetModelPublicationParameters+0x1e>
 801a670:	4b1a      	ldr	r3, [pc, #104]	; (801a6dc <MoblePalCrypto_GetModelPublicationParameters+0x80>)
 801a672:	4a18      	ldr	r2, [pc, #96]	; (801a6d4 <MoblePalCrypto_GetModelPublicationParameters+0x78>)
 801a674:	f640 4163 	movw	r1, #3171	; 0xc63
 801a678:	e7f6      	b.n	801a668 <MoblePalCrypto_GetModelPublicationParameters+0xc>
 801a67a:	4d19      	ldr	r5, [pc, #100]	; (801a6e0 <MoblePalCrypto_GetModelPublicationParameters+0x84>)
 801a67c:	2300      	movs	r3, #0
 801a67e:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801a682:	f5a5 7739 	sub.w	r7, r5, #740	; 0x2e4
 801a686:	b2dc      	uxtb	r4, r3
 801a688:	42a0      	cmp	r0, r4
 801a68a:	d913      	bls.n	801a6b4 <MoblePalCrypto_GetModelPublicationParameters+0x58>
 801a68c:	fb03 6e06 	mla	lr, r3, r6, r6
 801a690:	f103 0c01 	add.w	ip, r3, #1
 801a694:	f83e e007 	ldrh.w	lr, [lr, r7]
 801a698:	458e      	cmp	lr, r1
 801a69a:	d116      	bne.n	801a6ca <MoblePalCrypto_GetModelPublicationParameters+0x6e>
 801a69c:	fb06 5303 	mla	r3, r6, r3, r5
 801a6a0:	2100      	movs	r1, #0
 801a6a2:	6f9e      	ldr	r6, [r3, #120]	; 0x78
 801a6a4:	4296      	cmp	r6, r2
 801a6a6:	b2c8      	uxtb	r0, r1
 801a6a8:	d006      	beq.n	801a6b8 <MoblePalCrypto_GetModelPublicationParameters+0x5c>
 801a6aa:	3101      	adds	r1, #1
 801a6ac:	290b      	cmp	r1, #11
 801a6ae:	f103 0338 	add.w	r3, r3, #56	; 0x38
 801a6b2:	d1f6      	bne.n	801a6a2 <MoblePalCrypto_GetModelPublicationParameters+0x46>
 801a6b4:	2400      	movs	r4, #0
 801a6b6:	4620      	mov	r0, r4
 801a6b8:	f44f 7339 	mov.w	r3, #740	; 0x2e4
 801a6bc:	435c      	muls	r4, r3
 801a6be:	2338      	movs	r3, #56	; 0x38
 801a6c0:	fb13 4400 	smlabb	r4, r3, r0, r4
 801a6c4:	3478      	adds	r4, #120	; 0x78
 801a6c6:	1928      	adds	r0, r5, r4
 801a6c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a6ca:	4663      	mov	r3, ip
 801a6cc:	e7db      	b.n	801a686 <MoblePalCrypto_GetModelPublicationParameters+0x2a>
 801a6ce:	bf00      	nop
 801a6d0:	0803349f 	.word	0x0803349f
 801a6d4:	0803152a 	.word	0x0803152a
 801a6d8:	0803345b 	.word	0x0803345b
 801a6dc:	080334be 	.word	0x080334be
 801a6e0:	200003d0 	.word	0x200003d0

0801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>:
 801a6e4:	4b0b      	ldr	r3, [pc, #44]	; (801a714 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x30>)
 801a6e6:	f8b3 2448 	ldrh.w	r2, [r3, #1096]	; 0x448
 801a6ea:	4282      	cmp	r2, r0
 801a6ec:	d00a      	beq.n	801a704 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x20>
 801a6ee:	f8b3 24c4 	ldrh.w	r2, [r3, #1220]	; 0x4c4
 801a6f2:	4282      	cmp	r2, r0
 801a6f4:	d008      	beq.n	801a708 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x24>
 801a6f6:	f8b3 3540 	ldrh.w	r3, [r3, #1344]	; 0x540
 801a6fa:	4283      	cmp	r3, r0
 801a6fc:	d106      	bne.n	801a70c <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x28>
 801a6fe:	2002      	movs	r0, #2
 801a700:	b240      	sxtb	r0, r0
 801a702:	4770      	bx	lr
 801a704:	2000      	movs	r0, #0
 801a706:	e7fb      	b.n	801a700 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 801a708:	2001      	movs	r0, #1
 801a70a:	e7f9      	b.n	801a700 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex+0x1c>
 801a70c:	f04f 30ff 	mov.w	r0, #4294967295
 801a710:	4770      	bx	lr
 801a712:	bf00      	nop
 801a714:	2000141c 	.word	0x2000141c

0801a718 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>:
 801a718:	4b0b      	ldr	r3, [pc, #44]	; (801a748 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x30>)
 801a71a:	f8b3 25ba 	ldrh.w	r2, [r3, #1466]	; 0x5ba
 801a71e:	4282      	cmp	r2, r0
 801a720:	d00a      	beq.n	801a738 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x20>
 801a722:	f8b3 25e6 	ldrh.w	r2, [r3, #1510]	; 0x5e6
 801a726:	4282      	cmp	r2, r0
 801a728:	d008      	beq.n	801a73c <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x24>
 801a72a:	f8b3 3612 	ldrh.w	r3, [r3, #1554]	; 0x612
 801a72e:	4283      	cmp	r3, r0
 801a730:	d106      	bne.n	801a740 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x28>
 801a732:	2002      	movs	r0, #2
 801a734:	b240      	sxtb	r0, r0
 801a736:	4770      	bx	lr
 801a738:	2000      	movs	r0, #0
 801a73a:	e7fb      	b.n	801a734 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 801a73c:	2001      	movs	r0, #1
 801a73e:	e7f9      	b.n	801a734 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex+0x1c>
 801a740:	f04f 30ff 	mov.w	r0, #4294967295
 801a744:	4770      	bx	lr
 801a746:	bf00      	nop
 801a748:	2000141c 	.word	0x2000141c

0801a74c <MoblePalCryptoSwitchKeys>:
 801a74c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a750:	b085      	sub	sp, #20
 801a752:	4602      	mov	r2, r0
 801a754:	4607      	mov	r7, r0
 801a756:	460d      	mov	r5, r1
 801a758:	2400      	movs	r4, #0
 801a75a:	f10d 0102 	add.w	r1, sp, #2
 801a75e:	a802      	add	r0, sp, #8
 801a760:	f10d 0804 	add.w	r8, sp, #4
 801a764:	f8ad 4002 	strh.w	r4, [sp, #2]
 801a768:	ae02      	add	r6, sp, #8
 801a76a:	f7ff fb1b 	bl	8019da4 <MoblePalCryptoGetAppKeyIndexes>
 801a76e:	4641      	mov	r1, r8
 801a770:	f836 0b02 	ldrh.w	r0, [r6], #2
 801a774:	f7ff ffd0 	bl	801a718 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 801a778:	3401      	adds	r4, #1
 801a77a:	b2e4      	uxtb	r4, r4
 801a77c:	2c03      	cmp	r4, #3
 801a77e:	f801 0b01 	strb.w	r0, [r1], #1
 801a782:	d1f5      	bne.n	801a770 <MoblePalCryptoSwitchKeys+0x24>
 801a784:	4e1d      	ldr	r6, [pc, #116]	; (801a7fc <MoblePalCryptoSwitchKeys+0xb0>)
 801a786:	207c      	movs	r0, #124	; 0x7c
 801a788:	fb00 6405 	mla	r4, r0, r5, r6
 801a78c:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 801a790:	2b01      	cmp	r3, #1
 801a792:	d10a      	bne.n	801a7aa <MoblePalCryptoSwitchKeys+0x5e>
 801a794:	f04f 0900 	mov.w	r9, #0
 801a798:	f884 9445 	strb.w	r9, [r4, #1093]	; 0x445
 801a79c:	4639      	mov	r1, r7
 801a79e:	f204 4034 	addw	r0, r4, #1076	; 0x434
 801a7a2:	f7ff f9d9 	bl	8019b58 <MoblePalCryptoSetNetworkKey>
 801a7a6:	f884 9446 	strb.w	r9, [r4, #1094]	; 0x446
 801a7aa:	2300      	movs	r3, #0
 801a7ac:	222c      	movs	r2, #44	; 0x2c
 801a7ae:	f918 1b01 	ldrsb.w	r1, [r8], #1
 801a7b2:	fb02 6401 	mla	r4, r2, r1, r6
 801a7b6:	f504 60b7 	add.w	r0, r4, #1464	; 0x5b8
 801a7ba:	f894 55b8 	ldrb.w	r5, [r4, #1464]	; 0x5b8
 801a7be:	2d01      	cmp	r5, #1
 801a7c0:	d118      	bne.n	801a7f4 <MoblePalCryptoSwitchKeys+0xa8>
 801a7c2:	f204 55b9 	addw	r5, r4, #1465	; 0x5b9
 801a7c6:	f894 45b9 	ldrb.w	r4, [r4, #1465]	; 0x5b9
 801a7ca:	2c01      	cmp	r4, #1
 801a7cc:	d112      	bne.n	801a7f4 <MoblePalCryptoSwitchKeys+0xa8>
 801a7ce:	2400      	movs	r4, #0
 801a7d0:	7004      	strb	r4, [r0, #0]
 801a7d2:	a804      	add	r0, sp, #16
 801a7d4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a7d8:	4809      	ldr	r0, [pc, #36]	; (801a800 <MoblePalCryptoSwitchKeys+0xb4>)
 801a7da:	fb02 0001 	mla	r0, r2, r1, r0
 801a7de:	f500 70c2 	add.w	r0, r0, #388	; 0x184
 801a7e2:	f833 1c08 	ldrh.w	r1, [r3, #-8]
 801a7e6:	463a      	mov	r2, r7
 801a7e8:	f7fe ffce 	bl	8019788 <MoblePalCryptoSetAppKey>
 801a7ec:	702c      	strb	r4, [r5, #0]
 801a7ee:	b005      	add	sp, #20
 801a7f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a7f4:	3301      	adds	r3, #1
 801a7f6:	2b03      	cmp	r3, #3
 801a7f8:	d1d9      	bne.n	801a7ae <MoblePalCryptoSwitchKeys+0x62>
 801a7fa:	e7f8      	b.n	801a7ee <MoblePalCryptoSwitchKeys+0xa2>
 801a7fc:	2000141c 	.word	0x2000141c
 801a800:	20001840 	.word	0x20001840

0801a804 <MoblePalCryptoIsSubscriptionExists>:
 801a804:	4a15      	ldr	r2, [pc, #84]	; (801a85c <MoblePalCryptoIsSubscriptionExists+0x58>)
 801a806:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a808:	4605      	mov	r5, r0
 801a80a:	2400      	movs	r4, #0
 801a80c:	2002      	movs	r0, #2
 801a80e:	8813      	ldrh	r3, [r2, #0]
 801a810:	b303      	cbz	r3, 801a854 <MoblePalCryptoIsSubscriptionExists+0x50>
 801a812:	4611      	mov	r1, r2
 801a814:	2600      	movs	r6, #0
 801a816:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 801a818:	b1b3      	cbz	r3, 801a848 <MoblePalCryptoIsSubscriptionExists+0x44>
 801a81a:	b178      	cbz	r0, 801a83c <MoblePalCryptoIsSubscriptionExists+0x38>
 801a81c:	f101 0780 	add.w	r7, r1, #128	; 0x80
 801a820:	230a      	movs	r3, #10
 801a822:	f837 cb02 	ldrh.w	ip, [r7], #2
 801a826:	45ac      	cmp	ip, r5
 801a828:	d012      	beq.n	801a850 <MoblePalCryptoIsSubscriptionExists+0x4c>
 801a82a:	3b01      	subs	r3, #1
 801a82c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801a830:	d1f7      	bne.n	801a822 <MoblePalCryptoIsSubscriptionExists+0x1e>
 801a832:	360e      	adds	r6, #14
 801a834:	2e9a      	cmp	r6, #154	; 0x9a
 801a836:	f101 0138 	add.w	r1, r1, #56	; 0x38
 801a83a:	d1ec      	bne.n	801a816 <MoblePalCryptoIsSubscriptionExists+0x12>
 801a83c:	3401      	adds	r4, #1
 801a83e:	2c05      	cmp	r4, #5
 801a840:	f502 7239 	add.w	r2, r2, #740	; 0x2e4
 801a844:	d1e3      	bne.n	801a80e <MoblePalCryptoIsSubscriptionExists+0xa>
 801a846:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a848:	2800      	cmp	r0, #0
 801a84a:	d0f7      	beq.n	801a83c <MoblePalCryptoIsSubscriptionExists+0x38>
 801a84c:	2002      	movs	r0, #2
 801a84e:	e7f0      	b.n	801a832 <MoblePalCryptoIsSubscriptionExists+0x2e>
 801a850:	2000      	movs	r0, #0
 801a852:	e7ee      	b.n	801a832 <MoblePalCryptoIsSubscriptionExists+0x2e>
 801a854:	2800      	cmp	r0, #0
 801a856:	d0f6      	beq.n	801a846 <MoblePalCryptoIsSubscriptionExists+0x42>
 801a858:	2002      	movs	r0, #2
 801a85a:	e7ef      	b.n	801a83c <MoblePalCryptoIsSubscriptionExists+0x38>
 801a85c:	200003d0 	.word	0x200003d0

0801a860 <BnrgmTransmitQueueInit>:
 801a860:	4a08      	ldr	r2, [pc, #32]	; (801a884 <BnrgmTransmitQueueInit+0x24>)
 801a862:	2300      	movs	r3, #0
 801a864:	7013      	strb	r3, [r2, #0]
 801a866:	7413      	strb	r3, [r2, #16]
 801a868:	f882 3020 	strb.w	r3, [r2, #32]
 801a86c:	4619      	mov	r1, r3
 801a86e:	3301      	adds	r3, #1
 801a870:	2b64      	cmp	r3, #100	; 0x64
 801a872:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
 801a876:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 801a87a:	d1f8      	bne.n	801a86e <BnrgmTransmitQueueInit+0xe>
 801a87c:	4b02      	ldr	r3, [pc, #8]	; (801a888 <BnrgmTransmitQueueInit+0x28>)
 801a87e:	f8c3 1164 	str.w	r1, [r3, #356]	; 0x164
 801a882:	4770      	bx	lr
 801a884:	20002f64 	.word	0x20002f64
 801a888:	20003f64 	.word	0x20003f64

0801a88c <BnrgmTransmitQueuePush>:
 801a88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a88e:	4d1f      	ldr	r5, [pc, #124]	; (801a90c <BnrgmTransmitQueuePush+0x80>)
 801a890:	460e      	mov	r6, r1
 801a892:	4619      	mov	r1, r3
 801a894:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
 801a898:	2b63      	cmp	r3, #99	; 0x63
 801a89a:	4617      	mov	r7, r2
 801a89c:	f89d 2018 	ldrb.w	r2, [sp, #24]
 801a8a0:	d831      	bhi.n	801a906 <BnrgmTransmitQueuePush+0x7a>
 801a8a2:	f895 c165 	ldrb.w	ip, [r5, #357]	; 0x165
 801a8a6:	232c      	movs	r3, #44	; 0x2c
 801a8a8:	f5a5 647d 	sub.w	r4, r5, #4048	; 0xfd0
 801a8ac:	fb0c 4403 	mla	r4, ip, r3, r4
 801a8b0:	2301      	movs	r3, #1
 801a8b2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 801a8b6:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801a8ba:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801a8be:	f884 0020 	strb.w	r0, [r4, #32]
 801a8c2:	2600      	movs	r6, #0
 801a8c4:	8463      	strh	r3, [r4, #34]	; 0x22
 801a8c6:	77e2      	strb	r2, [r4, #31]
 801a8c8:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
 801a8cc:	62a6      	str	r6, [r4, #40]	; 0x28
 801a8ce:	4620      	mov	r0, r4
 801a8d0:	f00f f881 	bl	80299d6 <memcpy>
 801a8d4:	f895 3165 	ldrb.w	r3, [r5, #357]	; 0x165
 801a8d8:	2264      	movs	r2, #100	; 0x64
 801a8da:	3301      	adds	r3, #1
 801a8dc:	fbb3 f1f2 	udiv	r1, r3, r2
 801a8e0:	fb02 3311 	mls	r3, r2, r1, r3
 801a8e4:	f885 3165 	strb.w	r3, [r5, #357]	; 0x165
 801a8e8:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
 801a8ec:	2f01      	cmp	r7, #1
 801a8ee:	f103 0301 	add.w	r3, r3, #1
 801a8f2:	f885 3166 	strb.w	r3, [r5, #358]	; 0x166
 801a8f6:	d104      	bne.n	801a902 <BnrgmTransmitQueuePush+0x76>
 801a8f8:	f895 3167 	ldrb.w	r3, [r5, #359]	; 0x167
 801a8fc:	3301      	adds	r3, #1
 801a8fe:	f885 3167 	strb.w	r3, [r5, #359]	; 0x167
 801a902:	4630      	mov	r0, r6
 801a904:	e000      	b.n	801a908 <BnrgmTransmitQueuePush+0x7c>
 801a906:	2004      	movs	r0, #4
 801a908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a90a:	bf00      	nop
 801a90c:	20003f64 	.word	0x20003f64

0801a910 <BnrgmTransmitQueDecreasePktCount>:
 801a910:	b510      	push	{r4, lr}
 801a912:	4604      	mov	r4, r0
 801a914:	b188      	cbz	r0, 801a93a <BnrgmTransmitQueDecreasePktCount+0x2a>
 801a916:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 801a91a:	2b01      	cmp	r3, #1
 801a91c:	d10d      	bne.n	801a93a <BnrgmTransmitQueDecreasePktCount+0x2a>
 801a91e:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
 801a922:	b910      	cbnz	r0, 801a92a <BnrgmTransmitQueDecreasePktCount+0x1a>
 801a924:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
 801a928:	bd10      	pop	{r4, pc}
 801a92a:	1e43      	subs	r3, r0, #1
 801a92c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 801a930:	f7ed fa98 	bl	8007e64 <HAL_GetTick>
 801a934:	62a0      	str	r0, [r4, #40]	; 0x28
 801a936:	2000      	movs	r0, #0
 801a938:	e7f6      	b.n	801a928 <BnrgmTransmitQueDecreasePktCount+0x18>
 801a93a:	2002      	movs	r0, #2
 801a93c:	e7f4      	b.n	801a928 <BnrgmTransmitQueDecreasePktCount+0x18>
	...

0801a940 <BnrgmTransmitQueuePrepNextItem>:
 801a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a944:	4d25      	ldr	r5, [pc, #148]	; (801a9dc <BnrgmTransmitQueuePrepNextItem+0x9c>)
 801a946:	f895 2167 	ldrb.w	r2, [r5, #359]	; 0x167
 801a94a:	2300      	movs	r3, #0
 801a94c:	f8c5 3160 	str.w	r3, [r5, #352]	; 0x160
 801a950:	b1e2      	cbz	r2, 801a98c <BnrgmTransmitQueuePrepNextItem+0x4c>
 801a952:	f895 4164 	ldrb.w	r4, [r5, #356]	; 0x164
 801a956:	2064      	movs	r0, #100	; 0x64
 801a958:	262c      	movs	r6, #44	; 0x2c
 801a95a:	f5a5 617d 	sub.w	r1, r5, #4048	; 0xfd0
 801a95e:	f240 1701 	movw	r7, #257	; 0x101
 801a962:	18e2      	adds	r2, r4, r3
 801a964:	fbb2 fcf0 	udiv	ip, r2, r0
 801a968:	fb00 221c 	mls	r2, r0, ip, r2
 801a96c:	fb06 1202 	mla	r2, r6, r2, r1
 801a970:	f8b2 c024 	ldrh.w	ip, [r2, #36]	; 0x24
 801a974:	45bc      	cmp	ip, r7
 801a976:	d106      	bne.n	801a986 <BnrgmTransmitQueuePrepNextItem+0x46>
 801a978:	f501 617d 	add.w	r1, r1, #4048	; 0xfd0
 801a97c:	f8c1 2160 	str.w	r2, [r1, #352]	; 0x160
 801a980:	2000      	movs	r0, #0
 801a982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a986:	3301      	adds	r3, #1
 801a988:	2b64      	cmp	r3, #100	; 0x64
 801a98a:	d1ea      	bne.n	801a962 <BnrgmTransmitQueuePrepNextItem+0x22>
 801a98c:	f895 3166 	ldrb.w	r3, [r5, #358]	; 0x166
 801a990:	b30b      	cbz	r3, 801a9d6 <BnrgmTransmitQueuePrepNextItem+0x96>
 801a992:	f8df 904c 	ldr.w	r9, [pc, #76]	; 801a9e0 <BnrgmTransmitQueuePrepNextItem+0xa0>
 801a996:	2600      	movs	r6, #0
 801a998:	2764      	movs	r7, #100	; 0x64
 801a99a:	f04f 082c 	mov.w	r8, #44	; 0x2c
 801a99e:	f895 4164 	ldrb.w	r4, [r5, #356]	; 0x164
 801a9a2:	4434      	add	r4, r6
 801a9a4:	fbb4 f3f7 	udiv	r3, r4, r7
 801a9a8:	fb07 4413 	mls	r4, r7, r3, r4
 801a9ac:	fb08 9404 	mla	r4, r8, r4, r9
 801a9b0:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801a9b4:	2b01      	cmp	r3, #1
 801a9b6:	d10b      	bne.n	801a9d0 <BnrgmTransmitQueuePrepNextItem+0x90>
 801a9b8:	f8b4 a022 	ldrh.w	sl, [r4, #34]	; 0x22
 801a9bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a9be:	449a      	add	sl, r3
 801a9c0:	f7ed fa50 	bl	8007e64 <HAL_GetTick>
 801a9c4:	3014      	adds	r0, #20
 801a9c6:	4582      	cmp	sl, r0
 801a9c8:	d802      	bhi.n	801a9d0 <BnrgmTransmitQueuePrepNextItem+0x90>
 801a9ca:	f8c5 4160 	str.w	r4, [r5, #352]	; 0x160
 801a9ce:	e7d7      	b.n	801a980 <BnrgmTransmitQueuePrepNextItem+0x40>
 801a9d0:	3601      	adds	r6, #1
 801a9d2:	2e64      	cmp	r6, #100	; 0x64
 801a9d4:	d1e3      	bne.n	801a99e <BnrgmTransmitQueuePrepNextItem+0x5e>
 801a9d6:	2001      	movs	r0, #1
 801a9d8:	e7d3      	b.n	801a982 <BnrgmTransmitQueuePrepNextItem+0x42>
 801a9da:	bf00      	nop
 801a9dc:	20003f64 	.word	0x20003f64
 801a9e0:	20002f94 	.word	0x20002f94

0801a9e4 <BnrgmTransmitQueueAlign>:
 801a9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9e8:	4f2f      	ldr	r7, [pc, #188]	; (801aaa8 <BnrgmTransmitQueueAlign+0xc4>)
 801a9ea:	f897 4165 	ldrb.w	r4, [r7, #357]	; 0x165
 801a9ee:	2c00      	cmp	r4, #0
 801a9f0:	d044      	beq.n	801aa7c <BnrgmTransmitQueueAlign+0x98>
 801a9f2:	3c01      	subs	r4, #1
 801a9f4:	b2e4      	uxtb	r4, r4
 801a9f6:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 801aaac <BnrgmTransmitQueueAlign+0xc8>
 801a9fa:	46a4      	mov	ip, r4
 801a9fc:	f04f 0864 	mov.w	r8, #100	; 0x64
 801aa00:	f04f 092c 	mov.w	r9, #44	; 0x2c
 801aa04:	f04f 0b00 	mov.w	fp, #0
 801aa08:	f897 3166 	ldrb.w	r3, [r7, #358]	; 0x166
 801aa0c:	b343      	cbz	r3, 801aa60 <BnrgmTransmitQueueAlign+0x7c>
 801aa0e:	fb1c fe09 	smulbb	lr, ip, r9
 801aa12:	44d6      	add	lr, sl
 801aa14:	f89e 2025 	ldrb.w	r2, [lr, #37]	; 0x25
 801aa18:	2a01      	cmp	r2, #1
 801aa1a:	d131      	bne.n	801aa80 <BnrgmTransmitQueueAlign+0x9c>
 801aa1c:	4564      	cmp	r4, ip
 801aa1e:	d00c      	beq.n	801aa3a <BnrgmTransmitQueueAlign+0x56>
 801aa20:	4676      	mov	r6, lr
 801aa22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801aa24:	fb04 a509 	mla	r5, r4, r9, sl
 801aa28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aa2a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 801aa2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 801aa2e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801aa32:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 801aa36:	f88e b025 	strb.w	fp, [lr, #37]	; 0x25
 801aa3a:	b384      	cbz	r4, 801aa9e <BnrgmTransmitQueueAlign+0xba>
 801aa3c:	3c01      	subs	r4, #1
 801aa3e:	b2e4      	uxtb	r4, r4
 801aa40:	f897 3164 	ldrb.w	r3, [r7, #356]	; 0x164
 801aa44:	4563      	cmp	r3, ip
 801aa46:	d00b      	beq.n	801aa60 <BnrgmTransmitQueueAlign+0x7c>
 801aa48:	f1bc 0f00 	cmp.w	ip, #0
 801aa4c:	d029      	beq.n	801aaa2 <BnrgmTransmitQueueAlign+0xbe>
 801aa4e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801aa52:	fa5f fc8c 	uxtb.w	ip, ip
 801aa56:	f108 38ff 	add.w	r8, r8, #4294967295
 801aa5a:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 801aa5e:	d1d3      	bne.n	801aa08 <BnrgmTransmitQueueAlign+0x24>
 801aa60:	f897 3165 	ldrb.w	r3, [r7, #357]	; 0x165
 801aa64:	f897 2166 	ldrb.w	r2, [r7, #358]	; 0x166
 801aa68:	429a      	cmp	r2, r3
 801aa6a:	bf88      	it	hi
 801aa6c:	3364      	addhi	r3, #100	; 0x64
 801aa6e:	1a9b      	subs	r3, r3, r2
 801aa70:	b2db      	uxtb	r3, r3
 801aa72:	f887 3164 	strb.w	r3, [r7, #356]	; 0x164
 801aa76:	2000      	movs	r0, #0
 801aa78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa7c:	2463      	movs	r4, #99	; 0x63
 801aa7e:	e7ba      	b.n	801a9f6 <BnrgmTransmitQueueAlign+0x12>
 801aa80:	3b01      	subs	r3, #1
 801aa82:	f887 3166 	strb.w	r3, [r7, #358]	; 0x166
 801aa86:	f89e 3024 	ldrb.w	r3, [lr, #36]	; 0x24
 801aa8a:	2b01      	cmp	r3, #1
 801aa8c:	d1d8      	bne.n	801aa40 <BnrgmTransmitQueueAlign+0x5c>
 801aa8e:	f897 3167 	ldrb.w	r3, [r7, #359]	; 0x167
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d0d4      	beq.n	801aa40 <BnrgmTransmitQueueAlign+0x5c>
 801aa96:	3b01      	subs	r3, #1
 801aa98:	f887 3167 	strb.w	r3, [r7, #359]	; 0x167
 801aa9c:	e7d0      	b.n	801aa40 <BnrgmTransmitQueueAlign+0x5c>
 801aa9e:	2463      	movs	r4, #99	; 0x63
 801aaa0:	e7ce      	b.n	801aa40 <BnrgmTransmitQueueAlign+0x5c>
 801aaa2:	f04f 0c63 	mov.w	ip, #99	; 0x63
 801aaa6:	e7d6      	b.n	801aa56 <BnrgmTransmitQueueAlign+0x72>
 801aaa8:	20003f64 	.word	0x20003f64
 801aaac:	20002f94 	.word	0x20002f94

0801aab0 <MobleTransmitNow>:
 801aab0:	b470      	push	{r4, r5, r6}
 801aab2:	4604      	mov	r4, r0
 801aab4:	f89d 600c 	ldrb.w	r6, [sp, #12]
 801aab8:	f8bd 5010 	ldrh.w	r5, [sp, #16]
 801aabc:	4618      	mov	r0, r3
 801aabe:	460b      	mov	r3, r1
 801aac0:	b159      	cbz	r1, 801aada <MobleTransmitNow+0x2a>
 801aac2:	2a1f      	cmp	r2, #31
 801aac4:	d809      	bhi.n	801aada <MobleTransmitNow+0x2a>
 801aac6:	2d13      	cmp	r5, #19
 801aac8:	d907      	bls.n	801aada <MobleTransmitNow+0x2a>
 801aaca:	e9cd 2503 	strd	r2, r5, [sp, #12]
 801aace:	4631      	mov	r1, r6
 801aad0:	f3c4 1200 	ubfx	r2, r4, #4, #1
 801aad4:	bc70      	pop	{r4, r5, r6}
 801aad6:	f7ff bed9 	b.w	801a88c <BnrgmTransmitQueuePush>
 801aada:	2003      	movs	r0, #3
 801aadc:	bc70      	pop	{r4, r5, r6}
 801aade:	4770      	bx	lr

0801aae0 <MobleTransmitTimerCallback>:
 801aae0:	b570      	push	{r4, r5, r6, lr}
 801aae2:	684b      	ldr	r3, [r1, #4]
 801aae4:	b092      	sub	sp, #72	; 0x48
 801aae6:	881e      	ldrh	r6, [r3, #0]
 801aae8:	4605      	mov	r5, r0
 801aaea:	460c      	mov	r4, r1
 801aaec:	f7fd fac6 	bl	801807c <MoblePalBluetoothRandom>
 801aaf0:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801aaf4:	1831      	adds	r1, r6, r0
 801aaf6:	b289      	uxth	r1, r1
 801aaf8:	4628      	mov	r0, r5
 801aafa:	f7fd f88b 	bl	8017c14 <MoblePalTimerStartOnce>
 801aafe:	4b0f      	ldr	r3, [pc, #60]	; (801ab3c <MobleTransmitTimerCallback+0x5c>)
 801ab00:	f893 2168 	ldrb.w	r2, [r3, #360]	; 0x168
 801ab04:	2a01      	cmp	r2, #1
 801ab06:	d016      	beq.n	801ab36 <MobleTransmitTimerCallback+0x56>
 801ab08:	78a2      	ldrb	r2, [r4, #2]
 801ab0a:	2a01      	cmp	r2, #1
 801ab0c:	d102      	bne.n	801ab14 <MobleTransmitTimerCallback+0x34>
 801ab0e:	f893 3166 	ldrb.w	r3, [r3, #358]	; 0x166
 801ab12:	b983      	cbnz	r3, 801ab36 <MobleTransmitTimerCallback+0x56>
 801ab14:	68a3      	ldr	r3, [r4, #8]
 801ab16:	211f      	movs	r1, #31
 801ab18:	a802      	add	r0, sp, #8
 801ab1a:	4798      	blx	r3
 801ab1c:	1e02      	subs	r2, r0, #0
 801ab1e:	dd0a      	ble.n	801ab36 <MobleTransmitTimerCallback+0x56>
 801ab20:	6863      	ldr	r3, [r4, #4]
 801ab22:	881b      	ldrh	r3, [r3, #0]
 801ab24:	9301      	str	r3, [sp, #4]
 801ab26:	78e3      	ldrb	r3, [r4, #3]
 801ab28:	9300      	str	r3, [sp, #0]
 801ab2a:	b2d2      	uxtb	r2, r2
 801ab2c:	7863      	ldrb	r3, [r4, #1]
 801ab2e:	a902      	add	r1, sp, #8
 801ab30:	2000      	movs	r0, #0
 801ab32:	f7ff ffbd 	bl	801aab0 <MobleTransmitNow>
 801ab36:	b012      	add	sp, #72	; 0x48
 801ab38:	bd70      	pop	{r4, r5, r6, pc}
 801ab3a:	bf00      	nop
 801ab3c:	20003f64 	.word	0x20003f64

0801ab40 <MobleTransmitOutOfTurn>:
 801ab40:	2802      	cmp	r0, #2
 801ab42:	b508      	push	{r3, lr}
 801ab44:	d80a      	bhi.n	801ab5c <MobleTransmitOutOfTurn+0x1c>
 801ab46:	4b07      	ldr	r3, [pc, #28]	; (801ab64 <MobleTransmitOutOfTurn+0x24>)
 801ab48:	0102      	lsls	r2, r0, #4
 801ab4a:	eb03 1100 	add.w	r1, r3, r0, lsl #4
 801ab4e:	5cd3      	ldrb	r3, [r2, r3]
 801ab50:	b133      	cbz	r3, 801ab60 <MobleTransmitOutOfTurn+0x20>
 801ab52:	2000      	movs	r0, #0
 801ab54:	f7ff ffc4 	bl	801aae0 <MobleTransmitTimerCallback>
 801ab58:	2000      	movs	r0, #0
 801ab5a:	bd08      	pop	{r3, pc}
 801ab5c:	2003      	movs	r0, #3
 801ab5e:	e7fc      	b.n	801ab5a <MobleTransmitOutOfTurn+0x1a>
 801ab60:	2002      	movs	r0, #2
 801ab62:	e7fa      	b.n	801ab5a <MobleTransmitOutOfTurn+0x1a>
 801ab64:	20002f64 	.word	0x20002f64

0801ab68 <MobleTransmitFindFreeSlot>:
 801ab68:	4b07      	ldr	r3, [pc, #28]	; (801ab88 <MobleTransmitFindFreeSlot+0x20>)
 801ab6a:	7818      	ldrb	r0, [r3, #0]
 801ab6c:	b150      	cbz	r0, 801ab84 <MobleTransmitFindFreeSlot+0x1c>
 801ab6e:	7c1a      	ldrb	r2, [r3, #16]
 801ab70:	b13a      	cbz	r2, 801ab82 <MobleTransmitFindFreeSlot+0x1a>
 801ab72:	f893 3020 	ldrb.w	r3, [r3, #32]
 801ab76:	2b00      	cmp	r3, #0
 801ab78:	bf0c      	ite	eq
 801ab7a:	2002      	moveq	r0, #2
 801ab7c:	f04f 30ff 	movne.w	r0, #4294967295
 801ab80:	4770      	bx	lr
 801ab82:	2001      	movs	r0, #1
 801ab84:	4770      	bx	lr
 801ab86:	bf00      	nop
 801ab88:	20002f64 	.word	0x20002f64

0801ab8c <MobleTransmitSetup>:
 801ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab90:	4682      	mov	sl, r0
 801ab92:	4615      	mov	r5, r2
 801ab94:	461f      	mov	r7, r3
 801ab96:	b1f3      	cbz	r3, 801abd6 <MobleTransmitSetup+0x4a>
 801ab98:	b1ea      	cbz	r2, 801abd6 <MobleTransmitSetup+0x4a>
 801ab9a:	f7ff ffe5 	bl	801ab68 <MobleTransmitFindFreeSlot>
 801ab9e:	1e06      	subs	r6, r0, #0
 801aba0:	db1b      	blt.n	801abda <MobleTransmitSetup+0x4e>
 801aba2:	f8df 8040 	ldr.w	r8, [pc, #64]	; 801abe4 <MobleTransmitSetup+0x58>
 801aba6:	b234      	sxth	r4, r6
 801aba8:	eb08 1204 	add.w	r2, r8, r4, lsl #4
 801abac:	3d01      	subs	r5, #1
 801abae:	7091      	strb	r1, [r2, #2]
 801abb0:	f882 a001 	strb.w	sl, [r2, #1]
 801abb4:	490a      	ldr	r1, [pc, #40]	; (801abe0 <MobleTransmitSetup+0x54>)
 801abb6:	70d5      	strb	r5, [r2, #3]
 801abb8:	f102 000c 	add.w	r0, r2, #12
 801abbc:	f7fc ffc0 	bl	8017b40 <MoblePalTimerCreate>
 801abc0:	2801      	cmp	r0, #1
 801abc2:	ea4f 1904 	mov.w	r9, r4, lsl #4
 801abc6:	d804      	bhi.n	801abd2 <MobleTransmitSetup+0x46>
 801abc8:	2301      	movs	r3, #1
 801abca:	f809 3008 	strb.w	r3, [r9, r8]
 801abce:	2000      	movs	r0, #0
 801abd0:	603e      	str	r6, [r7, #0]
 801abd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abd6:	2003      	movs	r0, #3
 801abd8:	e7fb      	b.n	801abd2 <MobleTransmitSetup+0x46>
 801abda:	2004      	movs	r0, #4
 801abdc:	e7f9      	b.n	801abd2 <MobleTransmitSetup+0x46>
 801abde:	bf00      	nop
 801abe0:	0801aae1 	.word	0x0801aae1
 801abe4:	20002f64 	.word	0x20002f64

0801abe8 <BnrgmTransmitDisableRegularlyGeneratedBeacon>:
 801abe8:	b508      	push	{r3, lr}
 801abea:	0102      	lsls	r2, r0, #4
 801abec:	4b06      	ldr	r3, [pc, #24]	; (801ac08 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x20>)
 801abee:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 801abf2:	5cd3      	ldrb	r3, [r2, r3]
 801abf4:	2b01      	cmp	r3, #1
 801abf6:	d104      	bne.n	801ac02 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x1a>
 801abf8:	68c0      	ldr	r0, [r0, #12]
 801abfa:	f7fd f833 	bl	8017c64 <MoblePalTimerStop>
 801abfe:	2000      	movs	r0, #0
 801ac00:	bd08      	pop	{r3, pc}
 801ac02:	2002      	movs	r0, #2
 801ac04:	e7fc      	b.n	801ac00 <BnrgmTransmitDisableRegularlyGeneratedBeacon+0x18>
 801ac06:	bf00      	nop
 801ac08:	20002f64 	.word	0x20002f64

0801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>:
 801ac0c:	b538      	push	{r3, r4, r5, lr}
 801ac0e:	0101      	lsls	r1, r0, #4
 801ac10:	4b0c      	ldr	r3, [pc, #48]	; (801ac44 <BnrgmTransmitChangeRegularlyGeneratedInterval+0x38>)
 801ac12:	eb03 1200 	add.w	r2, r3, r0, lsl #4
 801ac16:	5ccb      	ldrb	r3, [r1, r3]
 801ac18:	2b01      	cmp	r3, #1
 801ac1a:	d110      	bne.n	801ac3e <BnrgmTransmitChangeRegularlyGeneratedInterval+0x32>
 801ac1c:	68d0      	ldr	r0, [r2, #12]
 801ac1e:	f7fd f821 	bl	8017c64 <MoblePalTimerStop>
 801ac22:	6853      	ldr	r3, [r2, #4]
 801ac24:	68d5      	ldr	r5, [r2, #12]
 801ac26:	881c      	ldrh	r4, [r3, #0]
 801ac28:	f7fd fa28 	bl	801807c <MoblePalBluetoothRandom>
 801ac2c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801ac30:	1821      	adds	r1, r4, r0
 801ac32:	b289      	uxth	r1, r1
 801ac34:	4628      	mov	r0, r5
 801ac36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ac3a:	f7fc bfeb 	b.w	8017c14 <MoblePalTimerStartOnce>
 801ac3e:	2002      	movs	r0, #2
 801ac40:	bd38      	pop	{r3, r4, r5, pc}
 801ac42:	bf00      	nop
 801ac44:	20002f64 	.word	0x20002f64

0801ac48 <MobleStackFastAdvTimeoutTimerCallback>:
 801ac48:	4a09      	ldr	r2, [pc, #36]	; (801ac70 <MobleStackFastAdvTimeoutTimerCallback+0x28>)
 801ac4a:	f8d2 07f8 	ldr.w	r0, [r2, #2040]	; 0x7f8
 801ac4e:	b508      	push	{r3, lr}
 801ac50:	b108      	cbz	r0, 801ac56 <MobleStackFastAdvTimeoutTimerCallback+0xe>
 801ac52:	f7fd f827 	bl	8017ca4 <MoblePalTimerDestroy>
 801ac56:	2300      	movs	r3, #0
 801ac58:	f8c2 37f8 	str.w	r3, [r2, #2040]	; 0x7f8
 801ac5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801ac60:	f8a2 3864 	strh.w	r3, [r2, #2148]	; 0x864
 801ac64:	f8d2 0860 	ldr.w	r0, [r2, #2144]	; 0x860
 801ac68:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801ac6c:	f7ff bfce 	b.w	801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801ac70:	2000141c 	.word	0x2000141c

0801ac74 <MobleTransmitRegularlyGenerated>:
 801ac74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ac76:	9f06      	ldr	r7, [sp, #24]
 801ac78:	460e      	mov	r6, r1
 801ac7a:	461d      	mov	r5, r3
 801ac7c:	4611      	mov	r1, r2
 801ac7e:	4604      	mov	r4, r0
 801ac80:	b178      	cbz	r0, 801aca2 <MobleTransmitRegularlyGenerated+0x2e>
 801ac82:	b173      	cbz	r3, 801aca2 <MobleTransmitRegularlyGenerated+0x2e>
 801ac84:	463b      	mov	r3, r7
 801ac86:	2201      	movs	r2, #1
 801ac88:	4630      	mov	r0, r6
 801ac8a:	f7ff ff7f 	bl	801ab8c <MobleTransmitSetup>
 801ac8e:	2801      	cmp	r0, #1
 801ac90:	d806      	bhi.n	801aca0 <MobleTransmitRegularlyGenerated+0x2c>
 801ac92:	683b      	ldr	r3, [r7, #0]
 801ac94:	4a04      	ldr	r2, [pc, #16]	; (801aca8 <MobleTransmitRegularlyGenerated+0x34>)
 801ac96:	eb02 1203 	add.w	r2, r2, r3, lsl #4
 801ac9a:	e9c2 5401 	strd	r5, r4, [r2, #4]
 801ac9e:	2000      	movs	r0, #0
 801aca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aca2:	2003      	movs	r0, #3
 801aca4:	e7fc      	b.n	801aca0 <MobleTransmitRegularlyGenerated+0x2c>
 801aca6:	bf00      	nop
 801aca8:	20002f64 	.word	0x20002f64

0801acac <BnrgmTransmitSend>:
 801acac:	b470      	push	{r4, r5, r6}
 801acae:	f89d 400c 	ldrb.w	r4, [sp, #12]
 801acb2:	f8bd 6010 	ldrh.w	r6, [sp, #16]
 801acb6:	b159      	cbz	r1, 801acd0 <BnrgmTransmitSend+0x24>
 801acb8:	2a1f      	cmp	r2, #31
 801acba:	d809      	bhi.n	801acd0 <BnrgmTransmitSend+0x24>
 801acbc:	2e13      	cmp	r6, #19
 801acbe:	d907      	bls.n	801acd0 <BnrgmTransmitSend+0x24>
 801acc0:	b134      	cbz	r4, 801acd0 <BnrgmTransmitSend+0x24>
 801acc2:	3c01      	subs	r4, #1
 801acc4:	b2e4      	uxtb	r4, r4
 801acc6:	9604      	str	r6, [sp, #16]
 801acc8:	9403      	str	r4, [sp, #12]
 801acca:	bc70      	pop	{r4, r5, r6}
 801accc:	f7ff bef0 	b.w	801aab0 <MobleTransmitNow>
 801acd0:	2003      	movs	r0, #3
 801acd2:	bc70      	pop	{r4, r5, r6}
 801acd4:	4770      	bx	lr
	...

0801acd8 <MoblePBADVSendControl.isra.0>:
 801acd8:	b570      	push	{r4, r5, r6, lr}
 801acda:	460d      	mov	r5, r1
 801acdc:	f015 0ffd 	tst.w	r5, #253	; 0xfd
 801ace0:	b088      	sub	sp, #32
 801ace2:	461e      	mov	r6, r3
 801ace4:	4611      	mov	r1, r2
 801ace6:	bf0c      	ite	eq
 801ace8:	f890 30b8 	ldrbeq.w	r3, [r0, #184]	; 0xb8
 801acec:	f890 3024 	ldrbne.w	r3, [r0, #36]	; 0x24
 801acf0:	69c2      	ldr	r2, [r0, #28]
 801acf2:	bf08      	it	eq
 801acf4:	f8c0 00bc 	streq.w	r0, [r0, #188]	; 0xbc
 801acf8:	2d03      	cmp	r5, #3
 801acfa:	4604      	mov	r4, r0
 801acfc:	f8cd 200a 	str.w	r2, [sp, #10]
 801ad00:	f88d 300e 	strb.w	r3, [sp, #14]
 801ad04:	d139      	bne.n	801ad7a <MoblePBADVSendControl.isra.0+0xa2>
 801ad06:	2301      	movs	r3, #1
 801ad08:	f88d 300f 	strb.w	r3, [sp, #15]
 801ad0c:	1df3      	adds	r3, r6, #7
 801ad0e:	f88d 3008 	strb.w	r3, [sp, #8]
 801ad12:	2329      	movs	r3, #41	; 0x29
 801ad14:	f88d 3009 	strb.w	r3, [sp, #9]
 801ad18:	b11e      	cbz	r6, 801ad22 <MoblePBADVSendControl.isra.0+0x4a>
 801ad1a:	4632      	mov	r2, r6
 801ad1c:	a804      	add	r0, sp, #16
 801ad1e:	f00e fe5a 	bl	80299d6 <memcpy>
 801ad22:	2303      	movs	r3, #3
 801ad24:	2114      	movs	r1, #20
 801ad26:	e9cd 3100 	strd	r3, r1, [sp]
 801ad2a:	f106 0208 	add.w	r2, r6, #8
 801ad2e:	2300      	movs	r3, #0
 801ad30:	b2d2      	uxtb	r2, r2
 801ad32:	a902      	add	r1, sp, #8
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7ff ffb9 	bl	801acac <BnrgmTransmitSend>
 801ad3a:	bb2d      	cbnz	r5, 801ad88 <MoblePBADVSendControl.isra.0+0xb0>
 801ad3c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 801ad40:	b913      	cbnz	r3, 801ad48 <MoblePBADVSendControl.isra.0+0x70>
 801ad42:	4620      	mov	r0, r4
 801ad44:	f7fc ff6a 	bl	8017c1c <MoblePBADVRaiseTransTimeoutTimer>
 801ad48:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
 801ad4c:	4910      	ldr	r1, [pc, #64]	; (801ad90 <MoblePBADVSendControl.isra.0+0xb8>)
 801ad4e:	3301      	adds	r3, #1
 801ad50:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 801ad54:	4622      	mov	r2, r4
 801ad56:	f504 70aa 	add.w	r0, r4, #340	; 0x154
 801ad5a:	f7fc fef1 	bl	8017b40 <MoblePalTimerCreate>
 801ad5e:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
 801ad62:	f44f 7196 	mov.w	r1, #300	; 0x12c
 801ad66:	f7fc ff55 	bl	8017c14 <MoblePalTimerStartOnce>
 801ad6a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 801ad6e:	f7fc ffe9 	bl	8017d44 <MoblePBADVEraseTimer>
 801ad72:	4620      	mov	r0, r4
 801ad74:	f7fc ff64 	bl	8017c40 <MoblePBADVRaiseLinkIdleTimer>
 801ad78:	e008      	b.n	801ad8c <MoblePBADVSendControl.isra.0+0xb4>
 801ad7a:	2d01      	cmp	r5, #1
 801ad7c:	bf16      	itet	ne
 801ad7e:	00ab      	lslne	r3, r5, #2
 801ad80:	2307      	moveq	r3, #7
 801ad82:	f043 0303 	orrne.w	r3, r3, #3
 801ad86:	e7bf      	b.n	801ad08 <MoblePBADVSendControl.isra.0+0x30>
 801ad88:	2d01      	cmp	r5, #1
 801ad8a:	d0ee      	beq.n	801ad6a <MoblePBADVSendControl.isra.0+0x92>
 801ad8c:	b008      	add	sp, #32
 801ad8e:	bd70      	pop	{r4, r5, r6, pc}
 801ad90:	08027185 	.word	0x08027185

0801ad94 <BnrgmTransmitStartAdv>:
 801ad94:	4b07      	ldr	r3, [pc, #28]	; (801adb4 <BnrgmTransmitStartAdv+0x20>)
 801ad96:	f8d3 1160 	ldr.w	r1, [r3, #352]	; 0x160
 801ad9a:	b149      	cbz	r1, 801adb0 <BnrgmTransmitStartAdv+0x1c>
 801ad9c:	f891 0020 	ldrb.w	r0, [r1, #32]
 801ada0:	7fca      	ldrb	r2, [r1, #31]
 801ada2:	3800      	subs	r0, #0
 801ada4:	f04f 0314 	mov.w	r3, #20
 801ada8:	bf18      	it	ne
 801adaa:	2001      	movne	r0, #1
 801adac:	f7fd bad2 	b.w	8018354 <MoblePalBluetoothModeStartAdv>
 801adb0:	2002      	movs	r0, #2
 801adb2:	4770      	bx	lr
 801adb4:	20003f64 	.word	0x20003f64

0801adb8 <BnrgmTransmitStartScan>:
 801adb8:	2802      	cmp	r0, #2
 801adba:	d903      	bls.n	801adc4 <BnrgmTransmitStartScan+0xc>
 801adbc:	2902      	cmp	r1, #2
 801adbe:	d901      	bls.n	801adc4 <BnrgmTransmitStartScan+0xc>
 801adc0:	f7fd bb5c 	b.w	801847c <MoblePalBluetoothModeStartScan>
 801adc4:	2002      	movs	r0, #2
 801adc6:	4770      	bx	lr

0801adc8 <MobleQIInit>:
 801adc8:	b120      	cbz	r0, 801add4 <MobleQIInit+0xc>
 801adca:	2300      	movs	r3, #0
 801adcc:	e9c0 3300 	strd	r3, r3, [r0]
 801add0:	4618      	mov	r0, r3
 801add2:	4770      	bx	lr
 801add4:	2003      	movs	r0, #3
 801add6:	4770      	bx	lr

0801add8 <MobleQIInsertAfter>:
 801add8:	b140      	cbz	r0, 801adec <MobleQIInsertAfter+0x14>
 801adda:	b139      	cbz	r1, 801adec <MobleQIInsertAfter+0x14>
 801addc:	6803      	ldr	r3, [r0, #0]
 801adde:	b103      	cbz	r3, 801ade2 <MobleQIInsertAfter+0xa>
 801ade0:	6059      	str	r1, [r3, #4]
 801ade2:	6001      	str	r1, [r0, #0]
 801ade4:	e9c1 3000 	strd	r3, r0, [r1]
 801ade8:	2000      	movs	r0, #0
 801adea:	4770      	bx	lr
 801adec:	2003      	movs	r0, #3
 801adee:	4770      	bx	lr

0801adf0 <MoblePalBluetoothPushNotification>:
 801adf0:	4a06      	ldr	r2, [pc, #24]	; (801ae0c <MoblePalBluetoothPushNotification+0x1c>)
 801adf2:	f8d2 3938 	ldr.w	r3, [r2, #2360]	; 0x938
 801adf6:	4601      	mov	r1, r0
 801adf8:	b12b      	cbz	r3, 801ae06 <MoblePalBluetoothPushNotification+0x16>
 801adfa:	4618      	mov	r0, r3
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	2b00      	cmp	r3, #0
 801ae00:	d1fb      	bne.n	801adfa <MoblePalBluetoothPushNotification+0xa>
 801ae02:	f7ff bfe9 	b.w	801add8 <MobleQIInsertAfter>
 801ae06:	f8c2 0938 	str.w	r0, [r2, #2360]	; 0x938
 801ae0a:	4770      	bx	lr
 801ae0c:	2000141c 	.word	0x2000141c

0801ae10 <MobleQIRemove>:
 801ae10:	b150      	cbz	r0, 801ae28 <MobleQIRemove+0x18>
 801ae12:	e9d0 3200 	ldrd	r3, r2, [r0]
 801ae16:	b102      	cbz	r2, 801ae1a <MobleQIRemove+0xa>
 801ae18:	6013      	str	r3, [r2, #0]
 801ae1a:	b103      	cbz	r3, 801ae1e <MobleQIRemove+0xe>
 801ae1c:	605a      	str	r2, [r3, #4]
 801ae1e:	2300      	movs	r3, #0
 801ae20:	e9c0 3300 	strd	r3, r3, [r0]
 801ae24:	4618      	mov	r0, r3
 801ae26:	4770      	bx	lr
 801ae28:	2003      	movs	r0, #3
 801ae2a:	4770      	bx	lr

0801ae2c <MoblePalBluetoothPopNotification>:
 801ae2c:	b508      	push	{r3, lr}
 801ae2e:	4b06      	ldr	r3, [pc, #24]	; (801ae48 <MoblePalBluetoothPopNotification+0x1c>)
 801ae30:	f8d3 1938 	ldr.w	r1, [r3, #2360]	; 0x938
 801ae34:	b129      	cbz	r1, 801ae42 <MoblePalBluetoothPopNotification+0x16>
 801ae36:	680a      	ldr	r2, [r1, #0]
 801ae38:	f8c3 2938 	str.w	r2, [r3, #2360]	; 0x938
 801ae3c:	4608      	mov	r0, r1
 801ae3e:	f7ff ffe7 	bl	801ae10 <MobleQIRemove>
 801ae42:	4608      	mov	r0, r1
 801ae44:	bd08      	pop	{r3, pc}
 801ae46:	bf00      	nop
 801ae48:	2000141c 	.word	0x2000141c

0801ae4c <MobleInitRGN>:
 801ae4c:	b138      	cbz	r0, 801ae5e <MobleInitRGN+0x12>
 801ae4e:	290b      	cmp	r1, #11
 801ae50:	d905      	bls.n	801ae5e <MobleInitRGN+0x12>
 801ae52:	2300      	movs	r3, #0
 801ae54:	e9c0 3300 	strd	r3, r3, [r0]
 801ae58:	6081      	str	r1, [r0, #8]
 801ae5a:	4618      	mov	r0, r3
 801ae5c:	4770      	bx	lr
 801ae5e:	2003      	movs	r0, #3
 801ae60:	4770      	bx	lr

0801ae62 <MobleSplitRGN>:
 801ae62:	b538      	push	{r3, r4, r5, lr}
 801ae64:	460a      	mov	r2, r1
 801ae66:	4604      	mov	r4, r0
 801ae68:	b910      	cbnz	r0, 801ae70 <MobleSplitRGN+0xe>
 801ae6a:	2500      	movs	r5, #0
 801ae6c:	4628      	mov	r0, r5
 801ae6e:	bd38      	pop	{r3, r4, r5, pc}
 801ae70:	290b      	cmp	r1, #11
 801ae72:	d9fa      	bls.n	801ae6a <MobleSplitRGN+0x8>
 801ae74:	078b      	lsls	r3, r1, #30
 801ae76:	d1f8      	bne.n	801ae6a <MobleSplitRGN+0x8>
 801ae78:	6881      	ldr	r1, [r0, #8]
 801ae7a:	f102 0310 	add.w	r3, r2, #16
 801ae7e:	f021 0003 	bic.w	r0, r1, #3
 801ae82:	4298      	cmp	r0, r3
 801ae84:	d9f1      	bls.n	801ae6a <MobleSplitRGN+0x8>
 801ae86:	18a5      	adds	r5, r4, r2
 801ae88:	1a89      	subs	r1, r1, r2
 801ae8a:	4628      	mov	r0, r5
 801ae8c:	f7ff ffde 	bl	801ae4c <MobleInitRGN>
 801ae90:	2801      	cmp	r0, #1
 801ae92:	d8ea      	bhi.n	801ae6a <MobleSplitRGN+0x8>
 801ae94:	60a2      	str	r2, [r4, #8]
 801ae96:	4629      	mov	r1, r5
 801ae98:	4620      	mov	r0, r4
 801ae9a:	f7ff ff9d 	bl	801add8 <MobleQIInsertAfter>
 801ae9e:	e7e5      	b.n	801ae6c <MobleSplitRGN+0xa>

0801aea0 <MobleMemAlloc>:
 801aea0:	b538      	push	{r3, r4, r5, lr}
 801aea2:	b908      	cbnz	r0, 801aea8 <MobleMemAlloc+0x8>
 801aea4:	2000      	movs	r0, #0
 801aea6:	bd38      	pop	{r3, r4, r5, pc}
 801aea8:	4c1e      	ldr	r4, [pc, #120]	; (801af24 <MobleMemAlloc+0x84>)
 801aeaa:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
 801aeae:	3003      	adds	r0, #3
 801aeb0:	f020 0503 	bic.w	r5, r0, #3
 801aeb4:	b973      	cbnz	r3, 801aed4 <MobleMemAlloc+0x34>
 801aeb6:	f8d4 0940 	ldr.w	r0, [r4, #2368]	; 0x940
 801aeba:	f8b4 1944 	ldrh.w	r1, [r4, #2372]	; 0x944
 801aebe:	f8c4 093c 	str.w	r0, [r4, #2364]	; 0x93c
 801aec2:	f7ff ffc3 	bl	801ae4c <MobleInitRGN>
 801aec6:	2801      	cmp	r0, #1
 801aec8:	d8ec      	bhi.n	801aea4 <MobleMemAlloc+0x4>
 801aeca:	f8d4 093c 	ldr.w	r0, [r4, #2364]	; 0x93c
 801aece:	210c      	movs	r1, #12
 801aed0:	f7ff ffc7 	bl	801ae62 <MobleSplitRGN>
 801aed4:	f8d4 393c 	ldr.w	r3, [r4, #2364]	; 0x93c
 801aed8:	f105 010c 	add.w	r1, r5, #12
 801aedc:	2400      	movs	r4, #0
 801aede:	b993      	cbnz	r3, 801af06 <MobleMemAlloc+0x66>
 801aee0:	2c00      	cmp	r4, #0
 801aee2:	d0df      	beq.n	801aea4 <MobleMemAlloc+0x4>
 801aee4:	68a3      	ldr	r3, [r4, #8]
 801aee6:	351c      	adds	r5, #28
 801aee8:	42ab      	cmp	r3, r5
 801aeea:	d302      	bcc.n	801aef2 <MobleMemAlloc+0x52>
 801aeec:	4620      	mov	r0, r4
 801aeee:	f7ff ffb8 	bl	801ae62 <MobleSplitRGN>
 801aef2:	68a3      	ldr	r3, [r4, #8]
 801aef4:	f043 0301 	orr.w	r3, r3, #1
 801aef8:	60a3      	str	r3, [r4, #8]
 801aefa:	4620      	mov	r0, r4
 801aefc:	f7ff ff88 	bl	801ae10 <MobleQIRemove>
 801af00:	f104 000c 	add.w	r0, r4, #12
 801af04:	e7cf      	b.n	801aea6 <MobleMemAlloc+0x6>
 801af06:	689a      	ldr	r2, [r3, #8]
 801af08:	428a      	cmp	r2, r1
 801af0a:	d009      	beq.n	801af20 <MobleMemAlloc+0x80>
 801af0c:	d304      	bcc.n	801af18 <MobleMemAlloc+0x78>
 801af0e:	b12c      	cbz	r4, 801af1c <MobleMemAlloc+0x7c>
 801af10:	68a0      	ldr	r0, [r4, #8]
 801af12:	4282      	cmp	r2, r0
 801af14:	bf38      	it	cc
 801af16:	461c      	movcc	r4, r3
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	e7e0      	b.n	801aede <MobleMemAlloc+0x3e>
 801af1c:	461c      	mov	r4, r3
 801af1e:	e7fb      	b.n	801af18 <MobleMemAlloc+0x78>
 801af20:	461c      	mov	r4, r3
 801af22:	e7df      	b.n	801aee4 <MobleMemAlloc+0x44>
 801af24:	2000141c 	.word	0x2000141c

0801af28 <MoblePalBluetoothGattSendNotification>:
 801af28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801af2c:	461d      	mov	r5, r3
 801af2e:	4b1f      	ldr	r3, [pc, #124]	; (801afac <MoblePalBluetoothGattSendNotification+0x84>)
 801af30:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 801af34:	f8d3 3354 	ldr.w	r3, [r3, #852]	; 0x354
 801af38:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 801af3c:	4680      	mov	r8, r0
 801af3e:	460f      	mov	r7, r1
 801af40:	4616      	mov	r6, r2
 801af42:	d103      	bne.n	801af4c <MoblePalBluetoothGattSendNotification+0x24>
 801af44:	2002      	movs	r0, #2
 801af46:	b003      	add	sp, #12
 801af48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801af4c:	4c18      	ldr	r4, [pc, #96]	; (801afb0 <MoblePalBluetoothGattSendNotification+0x88>)
 801af4e:	7aa3      	ldrb	r3, [r4, #10]
 801af50:	2b01      	cmp	r3, #1
 801af52:	d10e      	bne.n	801af72 <MoblePalBluetoothGattSendNotification+0x4a>
 801af54:	9600      	str	r6, [sp, #0]
 801af56:	462b      	mov	r3, r5
 801af58:	2200      	movs	r2, #0
 801af5a:	4639      	mov	r1, r7
 801af5c:	4640      	mov	r0, r8
 801af5e:	f7f9 ff26 	bl	8014dae <aci_gatt_update_char_value>
 801af62:	2893      	cmp	r0, #147	; 0x93
 801af64:	d0f6      	beq.n	801af54 <MoblePalBluetoothGattSendNotification+0x2c>
 801af66:	2800      	cmp	r0, #0
 801af68:	d0ed      	beq.n	801af46 <MoblePalBluetoothGattSendNotification+0x1e>
 801af6a:	2864      	cmp	r0, #100	; 0x64
 801af6c:	d1ea      	bne.n	801af44 <MoblePalBluetoothGattSendNotification+0x1c>
 801af6e:	2300      	movs	r3, #0
 801af70:	72a3      	strb	r3, [r4, #10]
 801af72:	f1b9 0f00 	cmp.w	r9, #0
 801af76:	d014      	beq.n	801afa2 <MoblePalBluetoothGattSendNotification+0x7a>
 801af78:	f105 0010 	add.w	r0, r5, #16
 801af7c:	f7ff ff90 	bl	801aea0 <MobleMemAlloc>
 801af80:	4604      	mov	r4, r0
 801af82:	b180      	cbz	r0, 801afa6 <MoblePalBluetoothGattSendNotification+0x7e>
 801af84:	f7ff ff20 	bl	801adc8 <MobleQIInit>
 801af88:	462a      	mov	r2, r5
 801af8a:	f8a4 8008 	strh.w	r8, [r4, #8]
 801af8e:	8167      	strh	r7, [r4, #10]
 801af90:	4631      	mov	r1, r6
 801af92:	f104 000d 	add.w	r0, r4, #13
 801af96:	f00e fc73 	bl	8029880 <memmove>
 801af9a:	7325      	strb	r5, [r4, #12]
 801af9c:	4620      	mov	r0, r4
 801af9e:	f7ff ff27 	bl	801adf0 <MoblePalBluetoothPushNotification>
 801afa2:	2001      	movs	r0, #1
 801afa4:	e7cf      	b.n	801af46 <MoblePalBluetoothGattSendNotification+0x1e>
 801afa6:	2004      	movs	r0, #4
 801afa8:	e7cd      	b.n	801af46 <MoblePalBluetoothGattSendNotification+0x1e>
 801afaa:	bf00      	nop
 801afac:	2000141c 	.word	0x2000141c
 801afb0:	20000008 	.word	0x20000008

0801afb4 <MobleMemFree>:
 801afb4:	b570      	push	{r4, r5, r6, lr}
 801afb6:	b388      	cbz	r0, 801b01c <MobleMemFree+0x68>
 801afb8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801afbc:	07da      	lsls	r2, r3, #31
 801afbe:	d52d      	bpl.n	801b01c <MobleMemFree+0x68>
 801afc0:	4d17      	ldr	r5, [pc, #92]	; (801b020 <MobleMemFree+0x6c>)
 801afc2:	f023 0301 	bic.w	r3, r3, #1
 801afc6:	f840 3c04 	str.w	r3, [r0, #-4]
 801afca:	f1a0 010c 	sub.w	r1, r0, #12
 801afce:	f8d5 093c 	ldr.w	r0, [r5, #2364]	; 0x93c
 801afd2:	f7ff ff01 	bl	801add8 <MobleQIInsertAfter>
 801afd6:	f8d5 393c 	ldr.w	r3, [r5, #2364]	; 0x93c
 801afda:	6819      	ldr	r1, [r3, #0]
 801afdc:	2000      	movs	r0, #0
 801afde:	b1d1      	cbz	r1, 801b016 <MobleMemFree+0x62>
 801afe0:	2800      	cmp	r0, #0
 801afe2:	d1f8      	bne.n	801afd6 <MobleMemFree+0x22>
 801afe4:	680c      	ldr	r4, [r1, #0]
 801afe6:	b104      	cbz	r4, 801afea <MobleMemFree+0x36>
 801afe8:	b108      	cbz	r0, 801afee <MobleMemFree+0x3a>
 801afea:	6809      	ldr	r1, [r1, #0]
 801afec:	e7f7      	b.n	801afde <MobleMemFree+0x2a>
 801afee:	688b      	ldr	r3, [r1, #8]
 801aff0:	68a2      	ldr	r2, [r4, #8]
 801aff2:	18ce      	adds	r6, r1, r3
 801aff4:	42b4      	cmp	r4, r6
 801aff6:	d107      	bne.n	801b008 <MobleMemFree+0x54>
 801aff8:	4413      	add	r3, r2
 801affa:	608b      	str	r3, [r1, #8]
 801affc:	4620      	mov	r0, r4
 801affe:	f7ff ff07 	bl	801ae10 <MobleQIRemove>
 801b002:	2001      	movs	r0, #1
 801b004:	6824      	ldr	r4, [r4, #0]
 801b006:	e7ee      	b.n	801afe6 <MobleMemFree+0x32>
 801b008:	18a6      	adds	r6, r4, r2
 801b00a:	42b1      	cmp	r1, r6
 801b00c:	d1fa      	bne.n	801b004 <MobleMemFree+0x50>
 801b00e:	4413      	add	r3, r2
 801b010:	60a3      	str	r3, [r4, #8]
 801b012:	4608      	mov	r0, r1
 801b014:	e7f3      	b.n	801affe <MobleMemFree+0x4a>
 801b016:	2801      	cmp	r0, #1
 801b018:	d0dd      	beq.n	801afd6 <MobleMemFree+0x22>
 801b01a:	bd70      	pop	{r4, r5, r6, pc}
 801b01c:	2003      	movs	r0, #3
 801b01e:	e7fc      	b.n	801b01a <MobleMemFree+0x66>
 801b020:	2000141c 	.word	0x2000141c

0801b024 <MoblePalBluetoothFreeAllNotifications>:
 801b024:	b508      	push	{r3, lr}
 801b026:	f7ff ff01 	bl	801ae2c <MoblePalBluetoothPopNotification>
 801b02a:	b900      	cbnz	r0, 801b02e <MoblePalBluetoothFreeAllNotifications+0xa>
 801b02c:	bd08      	pop	{r3, pc}
 801b02e:	f7ff ffc1 	bl	801afb4 <MobleMemFree>
 801b032:	e7f8      	b.n	801b026 <MoblePalBluetoothFreeAllNotifications+0x2>

0801b034 <MoblePalBluetoothProcessNotifications>:
 801b034:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b036:	4c0a      	ldr	r4, [pc, #40]	; (801b060 <MoblePalBluetoothProcessNotifications+0x2c>)
 801b038:	2500      	movs	r5, #0
 801b03a:	f8d4 2938 	ldr.w	r2, [r4, #2360]	; 0x938
 801b03e:	b90a      	cbnz	r2, 801b044 <MoblePalBluetoothProcessNotifications+0x10>
 801b040:	b003      	add	sp, #12
 801b042:	bd30      	pop	{r4, r5, pc}
 801b044:	7b13      	ldrb	r3, [r2, #12]
 801b046:	8951      	ldrh	r1, [r2, #10]
 801b048:	8910      	ldrh	r0, [r2, #8]
 801b04a:	9500      	str	r5, [sp, #0]
 801b04c:	320d      	adds	r2, #13
 801b04e:	f7ff ff6b 	bl	801af28 <MoblePalBluetoothGattSendNotification>
 801b052:	2800      	cmp	r0, #0
 801b054:	d1f4      	bne.n	801b040 <MoblePalBluetoothProcessNotifications+0xc>
 801b056:	f7ff fee9 	bl	801ae2c <MoblePalBluetoothPopNotification>
 801b05a:	f7ff ffab 	bl	801afb4 <MobleMemFree>
 801b05e:	e7ec      	b.n	801b03a <MoblePalBluetoothProcessNotifications+0x6>
 801b060:	2000141c 	.word	0x2000141c

0801b064 <MoblePalBluetoothProcess>:
 801b064:	b513      	push	{r0, r1, r4, lr}
 801b066:	4c19      	ldr	r4, [pc, #100]	; (801b0cc <MoblePalBluetoothProcess+0x68>)
 801b068:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801b06c:	075b      	lsls	r3, r3, #29
 801b06e:	d525      	bpl.n	801b0bc <MoblePalBluetoothProcess+0x58>
 801b070:	f7ec fef8 	bl	8007e64 <HAL_GetTick>
 801b074:	f8d4 3948 	ldr.w	r3, [r4, #2376]	; 0x948
 801b078:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 801b07c:	4283      	cmp	r3, r0
 801b07e:	d20a      	bcs.n	801b096 <MoblePalBluetoothProcess+0x32>
 801b080:	f8c4 3948 	str.w	r3, [r4, #2376]	; 0x948
 801b084:	23c8      	movs	r3, #200	; 0xc8
 801b086:	9300      	str	r3, [sp, #0]
 801b088:	f8b4 0382 	ldrh.w	r0, [r4, #898]	; 0x382
 801b08c:	2300      	movs	r3, #0
 801b08e:	2278      	movs	r2, #120	; 0x78
 801b090:	2150      	movs	r1, #80	; 0x50
 801b092:	f7fa fc7b 	bl	801598c <aci_l2cap_connection_parameter_update_req>
 801b096:	f8d4 2350 	ldr.w	r2, [r4, #848]	; 0x350
 801b09a:	4b0d      	ldr	r3, [pc, #52]	; (801b0d0 <MoblePalBluetoothProcess+0x6c>)
 801b09c:	429a      	cmp	r2, r3
 801b09e:	d90d      	bls.n	801b0bc <MoblePalBluetoothProcess+0x58>
 801b0a0:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801b0a4:	f023 0304 	bic.w	r3, r3, #4
 801b0a8:	f043 0308 	orr.w	r3, r3, #8
 801b0ac:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 801b0b0:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801b0b4:	b113      	cbz	r3, 801b0bc <MoblePalBluetoothProcess+0x58>
 801b0b6:	f8d4 036c 	ldr.w	r0, [r4, #876]	; 0x36c
 801b0ba:	4798      	blx	r3
 801b0bc:	f7ff ffba 	bl	801b034 <MoblePalBluetoothProcessNotifications>
 801b0c0:	b002      	add	sp, #8
 801b0c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0c6:	f7fd b867 	b.w	8018198 <MoblePalBluetoothProcessDisconnection>
 801b0ca:	bf00      	nop
 801b0cc:	2000141c 	.word	0x2000141c
 801b0d0:	00017317 	.word	0x00017317

0801b0d4 <MoblePalProcess>:
 801b0d4:	b508      	push	{r3, lr}
 801b0d6:	f7fc fead 	bl	8017e34 <MoblePalTimerProcess>
 801b0da:	f7ff ffc3 	bl	801b064 <MoblePalBluetoothProcess>
 801b0de:	f7ec fa45 	bl	800756c <PalNvmProcess>
 801b0e2:	2000      	movs	r0, #0
 801b0e4:	bd08      	pop	{r3, pc}

0801b0e6 <MobleModelBluemeshNewPacket_ExtCall>:
 801b0e6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801b0ea:	4606      	mov	r6, r0
 801b0ec:	200c      	movs	r0, #12
 801b0ee:	460c      	mov	r4, r1
 801b0f0:	461f      	mov	r7, r3
 801b0f2:	f7ff fed5 	bl	801aea0 <MobleMemAlloc>
 801b0f6:	7007      	strb	r7, [r0, #0]
 801b0f8:	8923      	ldrh	r3, [r4, #8]
 801b0fa:	8083      	strh	r3, [r0, #4]
 801b0fc:	8963      	ldrh	r3, [r4, #10]
 801b0fe:	80c3      	strh	r3, [r0, #6]
 801b100:	78e3      	ldrb	r3, [r4, #3]
 801b102:	7203      	strb	r3, [r0, #8]
 801b104:	7da3      	ldrb	r3, [r4, #22]
 801b106:	7243      	strb	r3, [r0, #9]
 801b108:	7c23      	ldrb	r3, [r4, #16]
 801b10a:	72c3      	strb	r3, [r0, #11]
 801b10c:	7b23      	ldrb	r3, [r4, #12]
 801b10e:	7283      	strb	r3, [r0, #10]
 801b110:	69e7      	ldr	r7, [r4, #28]
 801b112:	4605      	mov	r5, r0
 801b114:	2e00      	cmp	r6, #0
 801b116:	d037      	beq.n	801b188 <MobleModelBluemeshNewPacket_ExtCall+0xa2>
 801b118:	2f02      	cmp	r7, #2
 801b11a:	d935      	bls.n	801b188 <MobleModelBluemeshNewPacket_ExtCall+0xa2>
 801b11c:	a802      	add	r0, sp, #8
 801b11e:	a903      	add	r1, sp, #12
 801b120:	f7eb ff4c 	bl	8006fbc <GetApplicationVendorModels>
 801b124:	e9dd c302 	ldrd	ip, r3, [sp, #8]
 801b128:	2200      	movs	r2, #0
 801b12a:	4610      	mov	r0, r2
 801b12c:	f04f 0e0c 	mov.w	lr, #12
 801b130:	4283      	cmp	r3, r0
 801b132:	fb0e c600 	mla	r6, lr, r0, ip
 801b136:	d103      	bne.n	801b140 <MobleModelBluemeshNewPacket_ExtCall+0x5a>
 801b138:	b102      	cbz	r2, 801b13c <MobleModelBluemeshNewPacket_ExtCall+0x56>
 801b13a:	9602      	str	r6, [sp, #8]
 801b13c:	2402      	movs	r4, #2
 801b13e:	e019      	b.n	801b174 <MobleModelBluemeshNewPacket_ExtCall+0x8e>
 801b140:	f894 1020 	ldrb.w	r1, [r4, #32]
 801b144:	f001 08c0 	and.w	r8, r1, #192	; 0xc0
 801b148:	f1b8 0fc0 	cmp.w	r8, #192	; 0xc0
 801b14c:	d119      	bne.n	801b182 <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 801b14e:	f8b4 8021 	ldrh.w	r8, [r4, #33]	; 0x21
 801b152:	f1b8 0f30 	cmp.w	r8, #48	; 0x30
 801b156:	d114      	bne.n	801b182 <MobleModelBluemeshNewPacket_ExtCall+0x9c>
 801b158:	b102      	cbz	r2, 801b15c <MobleModelBluemeshNewPacket_ExtCall+0x76>
 801b15a:	9602      	str	r6, [sp, #8]
 801b15c:	2300      	movs	r3, #0
 801b15e:	9300      	str	r3, [sp, #0]
 801b160:	9b02      	ldr	r3, [sp, #8]
 801b162:	f104 0223 	add.w	r2, r4, #35	; 0x23
 801b166:	689e      	ldr	r6, [r3, #8]
 801b168:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801b16c:	1efb      	subs	r3, r7, #3
 801b16e:	4628      	mov	r0, r5
 801b170:	47b0      	blx	r6
 801b172:	4604      	mov	r4, r0
 801b174:	4628      	mov	r0, r5
 801b176:	f7ff ff1d 	bl	801afb4 <MobleMemFree>
 801b17a:	4620      	mov	r0, r4
 801b17c:	b004      	add	sp, #16
 801b17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b182:	3001      	adds	r0, #1
 801b184:	2201      	movs	r2, #1
 801b186:	e7d3      	b.n	801b130 <MobleModelBluemeshNewPacket_ExtCall+0x4a>
 801b188:	2403      	movs	r4, #3
 801b18a:	e7f6      	b.n	801b17a <MobleModelBluemeshNewPacket_ExtCall+0x94>

0801b18c <mem_alloc_init>:
 801b18c:	6a03      	ldr	r3, [r0, #32]
 801b18e:	4a0e      	ldr	r2, [pc, #56]	; (801b1c8 <mem_alloc_init+0x3c>)
 801b190:	6819      	ldr	r1, [r3, #0]
 801b192:	f8c2 1940 	str.w	r1, [r2, #2368]	; 0x940
 801b196:	8899      	ldrh	r1, [r3, #4]
 801b198:	f8a2 1944 	strh.w	r1, [r2, #2372]	; 0x944
 801b19c:	8919      	ldrh	r1, [r3, #8]
 801b19e:	230c      	movs	r3, #12
 801b1a0:	fbb1 f1f3 	udiv	r1, r1, r3
 801b1a4:	1c4b      	adds	r3, r1, #1
 801b1a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b1aa:	009b      	lsls	r3, r3, #2
 801b1ac:	b29b      	uxth	r3, r3
 801b1ae:	1f18      	subs	r0, r3, #4
 801b1b0:	f8a2 394c 	strh.w	r3, [r2, #2380]	; 0x94c
 801b1b4:	3102      	adds	r1, #2
 801b1b6:	3b05      	subs	r3, #5
 801b1b8:	f8a2 094e 	strh.w	r0, [r2, #2382]	; 0x94e
 801b1bc:	f8a2 3950 	strh.w	r3, [r2, #2384]	; 0x950
 801b1c0:	f882 12dc 	strb.w	r1, [r2, #732]	; 0x2dc
 801b1c4:	4770      	bx	lr
 801b1c6:	bf00      	nop
 801b1c8:	2000141c 	.word	0x2000141c

0801b1cc <MobleInputStreamGetBigEndian>:
 801b1cc:	4603      	mov	r3, r0
 801b1ce:	2000      	movs	r0, #0
 801b1d0:	b530      	push	{r4, r5, lr}
 801b1d2:	6010      	str	r0, [r2, #0]
 801b1d4:	185d      	adds	r5, r3, r1
 801b1d6:	42ab      	cmp	r3, r5
 801b1d8:	d101      	bne.n	801b1de <MobleInputStreamGetBigEndian+0x12>
 801b1da:	4608      	mov	r0, r1
 801b1dc:	bd30      	pop	{r4, r5, pc}
 801b1de:	6810      	ldr	r0, [r2, #0]
 801b1e0:	0200      	lsls	r0, r0, #8
 801b1e2:	6010      	str	r0, [r2, #0]
 801b1e4:	f813 4b01 	ldrb.w	r4, [r3], #1
 801b1e8:	4320      	orrs	r0, r4
 801b1ea:	6010      	str	r0, [r2, #0]
 801b1ec:	e7f3      	b.n	801b1d6 <MobleInputStreamGetBigEndian+0xa>

0801b1ee <MobleInputStreamGetLittleEndian>:
 801b1ee:	b510      	push	{r4, lr}
 801b1f0:	f04f 33ff 	mov.w	r3, #4294967295
 801b1f4:	00cc      	lsls	r4, r1, #3
 801b1f6:	fa03 f404 	lsl.w	r4, r3, r4
 801b1fa:	6803      	ldr	r3, [r0, #0]
 801b1fc:	ea23 0304 	bic.w	r3, r3, r4
 801b200:	6013      	str	r3, [r2, #0]
 801b202:	4608      	mov	r0, r1
 801b204:	bd10      	pop	{r4, pc}

0801b206 <MobleOutputStreamPutArray>:
 801b206:	b538      	push	{r3, r4, r5, lr}
 801b208:	4614      	mov	r4, r2
 801b20a:	b128      	cbz	r0, 801b218 <MobleOutputStreamPutArray+0x12>
 801b20c:	b131      	cbz	r1, 801b21c <MobleOutputStreamPutArray+0x16>
 801b20e:	b10a      	cbz	r2, 801b214 <MobleOutputStreamPutArray+0xe>
 801b210:	f00e fb36 	bl	8029880 <memmove>
 801b214:	4620      	mov	r0, r4
 801b216:	bd38      	pop	{r3, r4, r5, pc}
 801b218:	4604      	mov	r4, r0
 801b21a:	e7fb      	b.n	801b214 <MobleOutputStreamPutArray+0xe>
 801b21c:	460c      	mov	r4, r1
 801b21e:	e7f9      	b.n	801b214 <MobleOutputStreamPutArray+0xe>

0801b220 <MobleOutputStreamPutBigEndian>:
 801b220:	4402      	add	r2, r0
 801b222:	4282      	cmp	r2, r0
 801b224:	d101      	bne.n	801b22a <MobleOutputStreamPutBigEndian+0xa>
 801b226:	2000      	movs	r0, #0
 801b228:	4770      	bx	lr
 801b22a:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801b22e:	0a09      	lsrs	r1, r1, #8
 801b230:	e7f7      	b.n	801b222 <MobleOutputStreamPutBigEndian+0x2>
	...

0801b234 <MoblePalCryptoEncryptNetwork>:
 801b234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b238:	b0a3      	sub	sp, #140	; 0x8c
 801b23a:	4605      	mov	r5, r0
 801b23c:	f89d 60b0 	ldrb.w	r6, [sp, #176]	; 0xb0
 801b240:	4692      	mov	sl, r2
 801b242:	461f      	mov	r7, r3
 801b244:	4689      	mov	r9, r1
 801b246:	b931      	cbnz	r1, 801b256 <MoblePalCryptoEncryptNetwork+0x22>
 801b248:	4ba2      	ldr	r3, [pc, #648]	; (801b4d4 <MoblePalCryptoEncryptNetwork+0x2a0>)
 801b24a:	4aa3      	ldr	r2, [pc, #652]	; (801b4d8 <MoblePalCryptoEncryptNetwork+0x2a4>)
 801b24c:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
 801b250:	48a2      	ldr	r0, [pc, #648]	; (801b4dc <MoblePalCryptoEncryptNetwork+0x2a8>)
 801b252:	f00d fc39 	bl	8028ac8 <__assert_func>
 801b256:	b920      	cbnz	r0, 801b262 <MoblePalCryptoEncryptNetwork+0x2e>
 801b258:	4ba1      	ldr	r3, [pc, #644]	; (801b4e0 <MoblePalCryptoEncryptNetwork+0x2ac>)
 801b25a:	4a9f      	ldr	r2, [pc, #636]	; (801b4d8 <MoblePalCryptoEncryptNetwork+0x2a4>)
 801b25c:	f240 51c1 	movw	r1, #1473	; 0x5c1
 801b260:	e7f6      	b.n	801b250 <MoblePalCryptoEncryptNetwork+0x1c>
 801b262:	2b10      	cmp	r3, #16
 801b264:	d904      	bls.n	801b270 <MoblePalCryptoEncryptNetwork+0x3c>
 801b266:	4b9f      	ldr	r3, [pc, #636]	; (801b4e4 <MoblePalCryptoEncryptNetwork+0x2b0>)
 801b268:	4a9b      	ldr	r2, [pc, #620]	; (801b4d8 <MoblePalCryptoEncryptNetwork+0x2a4>)
 801b26a:	f240 51c2 	movw	r1, #1474	; 0x5c2
 801b26e:	e7ef      	b.n	801b250 <MoblePalCryptoEncryptNetwork+0x1c>
 801b270:	4a9d      	ldr	r2, [pc, #628]	; (801b4e8 <MoblePalCryptoEncryptNetwork+0x2b4>)
 801b272:	2300      	movs	r3, #0
 801b274:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 801b278:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801b27c:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 801b280:	930c      	str	r3, [sp, #48]	; 0x30
 801b282:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 801b286:	f892 365c 	ldrb.w	r3, [r2, #1628]	; 0x65c
 801b28a:	f8d2 8658 	ldr.w	r8, [r2, #1624]	; 0x658
 801b28e:	2b01      	cmp	r3, #1
 801b290:	d108      	bne.n	801b2a4 <MoblePalCryptoEncryptNetwork+0x70>
 801b292:	f1b8 0f00 	cmp.w	r8, #0
 801b296:	d103      	bne.n	801b2a0 <MoblePalCryptoEncryptNetwork+0x6c>
 801b298:	2002      	movs	r0, #2
 801b29a:	b023      	add	sp, #140	; 0x8c
 801b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b2a0:	f108 38ff 	add.w	r8, r8, #4294967295
 801b2a4:	8b6c      	ldrh	r4, [r5, #26]
 801b2a6:	f014 0420 	ands.w	r4, r4, #32
 801b2aa:	f000 80bb 	beq.w	801b424 <MoblePalCryptoEncryptNetwork+0x1f0>
 801b2ae:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
 801b2b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801b2b6:	f8d3 1630 	ldr.w	r1, [r3, #1584]	; 0x630
 801b2ba:	2900      	cmp	r1, #0
 801b2bc:	d0ec      	beq.n	801b298 <MoblePalCryptoEncryptNetwork+0x64>
 801b2be:	f891 4042 	ldrb.w	r4, [r1, #66]	; 0x42
 801b2c2:	237c      	movs	r3, #124	; 0x7c
 801b2c4:	fb03 2404 	mla	r4, r3, r4, r2
 801b2c8:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
 801b2cc:	2b01      	cmp	r3, #1
 801b2ce:	d003      	beq.n	801b2d8 <MoblePalCryptoEncryptNetwork+0xa4>
 801b2d0:	f894 3446 	ldrb.w	r3, [r4, #1094]	; 0x446
 801b2d4:	2b01      	cmp	r3, #1
 801b2d6:	d1df      	bne.n	801b298 <MoblePalCryptoEncryptNetwork+0x64>
 801b2d8:	2e00      	cmp	r6, #0
 801b2da:	f040 809c 	bne.w	801b416 <MoblePalCryptoEncryptNetwork+0x1e2>
 801b2de:	f891 4040 	ldrb.w	r4, [r1, #64]	; 0x40
 801b2e2:	f101 0620 	add.w	r6, r1, #32
 801b2e6:	468b      	mov	fp, r1
 801b2e8:	8ae9      	ldrh	r1, [r5, #22]
 801b2ea:	2202      	movs	r2, #2
 801b2ec:	a816      	add	r0, sp, #88	; 0x58
 801b2ee:	f7ff ff97 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b2f2:	463a      	mov	r2, r7
 801b2f4:	4651      	mov	r1, sl
 801b2f6:	f10d 005a 	add.w	r0, sp, #90	; 0x5a
 801b2fa:	f7ff ff84 	bl	801b206 <MobleOutputStreamPutArray>
 801b2fe:	7baa      	ldrb	r2, [r5, #14]
 801b300:	7be9      	ldrb	r1, [r5, #15]
 801b302:	2a00      	cmp	r2, #0
 801b304:	bf18      	it	ne
 801b306:	2280      	movne	r2, #128	; 0x80
 801b308:	430a      	orrs	r2, r1
 801b30a:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
 801b30e:	8b6a      	ldrh	r2, [r5, #26]
 801b310:	6929      	ldr	r1, [r5, #16]
 801b312:	0613      	lsls	r3, r2, #24
 801b314:	bf41      	itttt	mi
 801b316:	2203      	movmi	r2, #3
 801b318:	f88d 2028 	strbmi.w	r2, [sp, #40]	; 0x28
 801b31c:	2200      	movmi	r2, #0
 801b31e:	f88d 2029 	strbmi.w	r2, [sp, #41]	; 0x29
 801b322:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 801b326:	2203      	movs	r2, #3
 801b328:	f7ff ff7a 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b32c:	8aa9      	ldrh	r1, [r5, #20]
 801b32e:	2202      	movs	r2, #2
 801b330:	f10d 002d 	add.w	r0, sp, #45	; 0x2d
 801b334:	f7ff ff74 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b338:	2204      	movs	r2, #4
 801b33a:	4641      	mov	r1, r8
 801b33c:	f10d 0031 	add.w	r0, sp, #49	; 0x31
 801b340:	f7ff ff6e 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b344:	7baa      	ldrb	r2, [r5, #14]
 801b346:	2a00      	cmp	r2, #0
 801b348:	f04f 020d 	mov.w	r2, #13
 801b34c:	f107 0a02 	add.w	sl, r7, #2
 801b350:	ab16      	add	r3, sp, #88	; 0x58
 801b352:	9201      	str	r2, [sp, #4]
 801b354:	f04f 0700 	mov.w	r7, #0
 801b358:	aa0a      	add	r2, sp, #40	; 0x28
 801b35a:	9200      	str	r2, [sp, #0]
 801b35c:	9302      	str	r3, [sp, #8]
 801b35e:	bf14      	ite	ne
 801b360:	2208      	movne	r2, #8
 801b362:	2204      	moveq	r2, #4
 801b364:	e9cd 7704 	strd	r7, r7, [sp, #16]
 801b368:	f8cd a00c 	str.w	sl, [sp, #12]
 801b36c:	465b      	mov	r3, fp
 801b36e:	a908      	add	r1, sp, #32
 801b370:	a81b      	add	r0, sp, #108	; 0x6c
 801b372:	f7fe faeb 	bl	801994c <MoblePalCryptoAesCcmEncrypt>
 801b376:	2801      	cmp	r0, #1
 801b378:	d88e      	bhi.n	801b298 <MoblePalCryptoEncryptNetwork+0x64>
 801b37a:	7bab      	ldrb	r3, [r5, #14]
 801b37c:	42bb      	cmp	r3, r7
 801b37e:	ab1b      	add	r3, sp, #108	; 0x6c
 801b380:	bf14      	ite	ne
 801b382:	2208      	movne	r2, #8
 801b384:	2204      	moveq	r2, #4
 801b386:	a908      	add	r1, sp, #32
 801b388:	eb03 000a 	add.w	r0, r3, sl
 801b38c:	f00e fb23 	bl	80299d6 <memcpy>
 801b390:	2204      	movs	r2, #4
 801b392:	4641      	mov	r1, r8
 801b394:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 801b398:	f7ff ff42 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b39c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801b39e:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 801b3a2:	f89d 3072 	ldrb.w	r3, [sp, #114]	; 0x72
 801b3a6:	f8cd 0041 	str.w	r0, [sp, #65]	; 0x41
 801b3aa:	f8ad 2045 	strh.w	r2, [sp, #69]	; 0x45
 801b3ae:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
 801b3b2:	aa0e      	add	r2, sp, #56	; 0x38
 801b3b4:	2310      	movs	r3, #16
 801b3b6:	4631      	mov	r1, r6
 801b3b8:	a812      	add	r0, sp, #72	; 0x48
 801b3ba:	f7fe faf3 	bl	80199a4 <MoblePalCryptoAesEcb>
 801b3be:	7baa      	ldrb	r2, [r5, #14]
 801b3c0:	7beb      	ldrb	r3, [r5, #15]
 801b3c2:	6929      	ldr	r1, [r5, #16]
 801b3c4:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801b3c8:	f10d 0019 	add.w	r0, sp, #25
 801b3cc:	2203      	movs	r2, #3
 801b3ce:	f88d 3018 	strb.w	r3, [sp, #24]
 801b3d2:	f7ff ff25 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b3d6:	8aa9      	ldrh	r1, [r5, #20]
 801b3d8:	2202      	movs	r2, #2
 801b3da:	a807      	add	r0, sp, #28
 801b3dc:	f7ff ff20 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b3e0:	2206      	movs	r2, #6
 801b3e2:	a912      	add	r1, sp, #72	; 0x48
 801b3e4:	a806      	add	r0, sp, #24
 801b3e6:	f7fe faee 	bl	80199c6 <MoblePalCryptoXor>
 801b3ea:	4648      	mov	r0, r9
 801b3ec:	ea44 14c8 	orr.w	r4, r4, r8, lsl #7
 801b3f0:	2206      	movs	r2, #6
 801b3f2:	a906      	add	r1, sp, #24
 801b3f4:	f800 4b01 	strb.w	r4, [r0], #1
 801b3f8:	f7ff ff05 	bl	801b206 <MobleOutputStreamPutArray>
 801b3fc:	7bab      	ldrb	r3, [r5, #14]
 801b3fe:	42bb      	cmp	r3, r7
 801b400:	bf14      	ite	ne
 801b402:	2208      	movne	r2, #8
 801b404:	2204      	moveq	r2, #4
 801b406:	4452      	add	r2, sl
 801b408:	a91b      	add	r1, sp, #108	; 0x6c
 801b40a:	f109 0007 	add.w	r0, r9, #7
 801b40e:	f7ff fefa 	bl	801b206 <MobleOutputStreamPutArray>
 801b412:	4638      	mov	r0, r7
 801b414:	e741      	b.n	801b29a <MoblePalCryptoEncryptNetwork+0x66>
 801b416:	f891 4041 	ldrb.w	r4, [r1, #65]	; 0x41
 801b41a:	f101 0630 	add.w	r6, r1, #48	; 0x30
 801b41e:	f101 0b10 	add.w	fp, r1, #16
 801b422:	e761      	b.n	801b2e8 <MoblePalCryptoEncryptNetwork+0xb4>
 801b424:	7f28      	ldrb	r0, [r5, #28]
 801b426:	237c      	movs	r3, #124	; 0x7c
 801b428:	fb03 2300 	mla	r3, r3, r0, r2
 801b42c:	f893 1445 	ldrb.w	r1, [r3, #1093]	; 0x445
 801b430:	2901      	cmp	r1, #1
 801b432:	d003      	beq.n	801b43c <MoblePalCryptoEncryptNetwork+0x208>
 801b434:	f893 3446 	ldrb.w	r3, [r3, #1094]	; 0x446
 801b438:	2b01      	cmp	r3, #1
 801b43a:	d11c      	bne.n	801b476 <MoblePalCryptoEncryptNetwork+0x242>
 801b43c:	ebc0 1140 	rsb	r1, r0, r0, lsl #5
 801b440:	4b2a      	ldr	r3, [pc, #168]	; (801b4ec <MoblePalCryptoEncryptNetwork+0x2b8>)
 801b442:	0089      	lsls	r1, r1, #2
 801b444:	b95e      	cbnz	r6, 801b45e <MoblePalCryptoEncryptNetwork+0x22a>
 801b446:	f101 065c 	add.w	r6, r1, #92	; 0x5c
 801b44a:	247c      	movs	r4, #124	; 0x7c
 801b44c:	313c      	adds	r1, #60	; 0x3c
 801b44e:	441e      	add	r6, r3
 801b450:	eb03 0b01 	add.w	fp, r3, r1
 801b454:	fb04 2400 	mla	r4, r4, r0, r2
 801b458:	f894 445c 	ldrb.w	r4, [r4, #1116]	; 0x45c
 801b45c:	e744      	b.n	801b2e8 <MoblePalCryptoEncryptNetwork+0xb4>
 801b45e:	f101 066c 	add.w	r6, r1, #108	; 0x6c
 801b462:	247c      	movs	r4, #124	; 0x7c
 801b464:	314c      	adds	r1, #76	; 0x4c
 801b466:	441e      	add	r6, r3
 801b468:	eb03 0b01 	add.w	fp, r3, r1
 801b46c:	fb04 2400 	mla	r4, r4, r0, r2
 801b470:	f894 445d 	ldrb.w	r4, [r4, #1117]	; 0x45d
 801b474:	e738      	b.n	801b2e8 <MoblePalCryptoEncryptNetwork+0xb4>
 801b476:	f892 361c 	ldrb.w	r3, [r2, #1564]	; 0x61c
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	f43f af0c 	beq.w	801b298 <MoblePalCryptoEncryptNetwork+0x64>
 801b480:	491a      	ldr	r1, [pc, #104]	; (801b4ec <MoblePalCryptoEncryptNetwork+0x2b8>)
 801b482:	460b      	mov	r3, r1
 801b484:	f891 0021 	ldrb.w	r0, [r1, #33]	; 0x21
 801b488:	2801      	cmp	r0, #1
 801b48a:	d10a      	bne.n	801b4a2 <MoblePalCryptoEncryptNetwork+0x26e>
 801b48c:	217c      	movs	r1, #124	; 0x7c
 801b48e:	434c      	muls	r4, r1
 801b490:	f104 065c 	add.w	r6, r4, #92	; 0x5c
 801b494:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 801b498:	441e      	add	r6, r3
 801b49a:	eb03 0b01 	add.w	fp, r3, r1
 801b49e:	4414      	add	r4, r2
 801b4a0:	e7da      	b.n	801b458 <MoblePalCryptoEncryptNetwork+0x224>
 801b4a2:	f891 0022 	ldrb.w	r0, [r1, #34]	; 0x22
 801b4a6:	2801      	cmp	r0, #1
 801b4a8:	d10a      	bne.n	801b4c0 <MoblePalCryptoEncryptNetwork+0x28c>
 801b4aa:	217c      	movs	r1, #124	; 0x7c
 801b4ac:	434c      	muls	r4, r1
 801b4ae:	f104 066c 	add.w	r6, r4, #108	; 0x6c
 801b4b2:	f104 014c 	add.w	r1, r4, #76	; 0x4c
 801b4b6:	441e      	add	r6, r3
 801b4b8:	eb03 0b01 	add.w	fp, r3, r1
 801b4bc:	4414      	add	r4, r2
 801b4be:	e7d7      	b.n	801b470 <MoblePalCryptoEncryptNetwork+0x23c>
 801b4c0:	3401      	adds	r4, #1
 801b4c2:	2c03      	cmp	r4, #3
 801b4c4:	f101 017c 	add.w	r1, r1, #124	; 0x7c
 801b4c8:	d1dc      	bne.n	801b484 <MoblePalCryptoEncryptNetwork+0x250>
 801b4ca:	2400      	movs	r4, #0
 801b4cc:	46a3      	mov	fp, r4
 801b4ce:	4626      	mov	r6, r4
 801b4d0:	e70a      	b.n	801b2e8 <MoblePalCryptoEncryptNetwork+0xb4>
 801b4d2:	bf00      	nop
 801b4d4:	080334c6 	.word	0x080334c6
 801b4d8:	08031557 	.word	0x08031557
 801b4dc:	0803345b 	.word	0x0803345b
 801b4e0:	080334cd 	.word	0x080334cd
 801b4e4:	080334d7 	.word	0x080334d7
 801b4e8:	2000141c 	.word	0x2000141c
 801b4ec:	20001840 	.word	0x20001840

0801b4f0 <MoblePalCryptoPrepHeaderAndNonceNetwork>:
 801b4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4f4:	4689      	mov	r9, r1
 801b4f6:	b08d      	sub	sp, #52	; 0x34
 801b4f8:	4615      	mov	r5, r2
 801b4fa:	461f      	mov	r7, r3
 801b4fc:	4604      	mov	r4, r0
 801b4fe:	b930      	cbnz	r0, 801b50e <MoblePalCryptoPrepHeaderAndNonceNetwork+0x1e>
 801b500:	4b52      	ldr	r3, [pc, #328]	; (801b64c <MoblePalCryptoPrepHeaderAndNonceNetwork+0x15c>)
 801b502:	4a53      	ldr	r2, [pc, #332]	; (801b650 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b504:	f240 61a4 	movw	r1, #1700	; 0x6a4
 801b508:	4852      	ldr	r0, [pc, #328]	; (801b654 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x164>)
 801b50a:	f00d fadd 	bl	8028ac8 <__assert_func>
 801b50e:	b922      	cbnz	r2, 801b51a <MoblePalCryptoPrepHeaderAndNonceNetwork+0x2a>
 801b510:	4b51      	ldr	r3, [pc, #324]	; (801b658 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x168>)
 801b512:	4a4f      	ldr	r2, [pc, #316]	; (801b650 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b514:	f240 61a5 	movw	r1, #1701	; 0x6a5
 801b518:	e7f6      	b.n	801b508 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b51a:	b923      	cbnz	r3, 801b526 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x36>
 801b51c:	4b4f      	ldr	r3, [pc, #316]	; (801b65c <MoblePalCryptoPrepHeaderAndNonceNetwork+0x16c>)
 801b51e:	4a4c      	ldr	r2, [pc, #304]	; (801b650 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b520:	f240 61a6 	movw	r1, #1702	; 0x6a6
 801b524:	e7f0      	b.n	801b508 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b526:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801b528:	b923      	cbnz	r3, 801b534 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x44>
 801b52a:	4b4d      	ldr	r3, [pc, #308]	; (801b660 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x170>)
 801b52c:	4a48      	ldr	r2, [pc, #288]	; (801b650 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b52e:	f240 61a7 	movw	r1, #1703	; 0x6a7
 801b532:	e7e9      	b.n	801b508 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b534:	b921      	cbnz	r1, 801b540 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x50>
 801b536:	4b4b      	ldr	r3, [pc, #300]	; (801b664 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x174>)
 801b538:	4a45      	ldr	r2, [pc, #276]	; (801b650 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x160>)
 801b53a:	f44f 61d5 	mov.w	r1, #1704	; 0x6a8
 801b53e:	e7e3      	b.n	801b508 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x18>
 801b540:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b544:	4b48      	ldr	r3, [pc, #288]	; (801b668 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x178>)
 801b546:	f100 0a0c 	add.w	sl, r0, #12
 801b54a:	f8d3 6658 	ldr.w	r6, [r3, #1624]	; 0x658
 801b54e:	4651      	mov	r1, sl
 801b550:	4640      	mov	r0, r8
 801b552:	f7fe fb73 	bl	8019c3c <MoblePalCryptoParseNetHdr>
 801b556:	7b22      	ldrb	r2, [r4, #12]
 801b558:	f006 0301 	and.w	r3, r6, #1
 801b55c:	429a      	cmp	r2, r3
 801b55e:	f108 0b07 	add.w	fp, r8, #7
 801b562:	d002      	beq.n	801b56a <MoblePalCryptoPrepHeaderAndNonceNetwork+0x7a>
 801b564:	2e00      	cmp	r6, #0
 801b566:	d06e      	beq.n	801b646 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x156>
 801b568:	3e01      	subs	r6, #1
 801b56a:	2300      	movs	r3, #0
 801b56c:	2204      	movs	r2, #4
 801b56e:	4631      	mov	r1, r6
 801b570:	f10d 0015 	add.w	r0, sp, #21
 801b574:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801b578:	e9cd 3306 	strd	r3, r3, [sp, #24]
 801b57c:	f7ff fe50 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b580:	2207      	movs	r2, #7
 801b582:	4659      	mov	r1, fp
 801b584:	f10d 0019 	add.w	r0, sp, #25
 801b588:	f7ff fe3d 	bl	801b206 <MobleOutputStreamPutArray>
 801b58c:	2310      	movs	r3, #16
 801b58e:	eb0d 0203 	add.w	r2, sp, r3
 801b592:	4649      	mov	r1, r9
 801b594:	a808      	add	r0, sp, #32
 801b596:	f7fe fa05 	bl	80199a4 <MoblePalCryptoAesEcb>
 801b59a:	f8d8 0000 	ldr.w	r0, [r8]
 801b59e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b5a2:	ab01      	add	r3, sp, #4
 801b5a4:	c303      	stmia	r3!, {r0, r1}
 801b5a6:	f898 2008 	ldrb.w	r2, [r8, #8]
 801b5aa:	701a      	strb	r2, [r3, #0]
 801b5ac:	a908      	add	r1, sp, #32
 801b5ae:	2206      	movs	r2, #6
 801b5b0:	f10d 0005 	add.w	r0, sp, #5
 801b5b4:	f7fe fa07 	bl	80199c6 <MoblePalCryptoXor>
 801b5b8:	4651      	mov	r1, sl
 801b5ba:	a801      	add	r0, sp, #4
 801b5bc:	f7fe fb3e 	bl	8019c3c <MoblePalCryptoParseNetHdr>
 801b5c0:	7ba3      	ldrb	r3, [r4, #14]
 801b5c2:	2b01      	cmp	r3, #1
 801b5c4:	d138      	bne.n	801b638 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x148>
 801b5c6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b5ca:	f043 0308 	orr.w	r3, r3, #8
 801b5ce:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b5d2:	f04f 0a08 	mov.w	sl, #8
 801b5d6:	f04f 0900 	mov.w	r9, #0
 801b5da:	f8c7 9000 	str.w	r9, [r7]
 801b5de:	f8c7 9004 	str.w	r9, [r7, #4]
 801b5e2:	7a21      	ldrb	r1, [r4, #8]
 801b5e4:	eba1 010a 	sub.w	r1, r1, sl
 801b5e8:	4652      	mov	r2, sl
 801b5ea:	4441      	add	r1, r8
 801b5ec:	4638      	mov	r0, r7
 801b5ee:	f00e f947 	bl	8029880 <memmove>
 801b5f2:	7a23      	ldrb	r3, [r4, #8]
 801b5f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 801b5f6:	3b07      	subs	r3, #7
 801b5f8:	eba3 030a 	sub.w	r3, r3, sl
 801b5fc:	6013      	str	r3, [r2, #0]
 801b5fe:	4649      	mov	r1, r9
 801b600:	220d      	movs	r2, #13
 801b602:	4628      	mov	r0, r5
 801b604:	f00e f956 	bl	80298b4 <memset>
 801b608:	2206      	movs	r2, #6
 801b60a:	f10d 0105 	add.w	r1, sp, #5
 801b60e:	1c68      	adds	r0, r5, #1
 801b610:	f7ff fdf9 	bl	801b206 <MobleOutputStreamPutArray>
 801b614:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b618:	061b      	lsls	r3, r3, #24
 801b61a:	bf42      	ittt	mi
 801b61c:	2303      	movmi	r3, #3
 801b61e:	702b      	strbmi	r3, [r5, #0]
 801b620:	f885 9001 	strbmi.w	r9, [r5, #1]
 801b624:	2204      	movs	r2, #4
 801b626:	4631      	mov	r1, r6
 801b628:	f105 0009 	add.w	r0, r5, #9
 801b62c:	f7ff fdf8 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b630:	2000      	movs	r0, #0
 801b632:	b00d      	add	sp, #52	; 0x34
 801b634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b638:	2b00      	cmp	r3, #0
 801b63a:	bf14      	ite	ne
 801b63c:	f04f 0a08 	movne.w	sl, #8
 801b640:	f04f 0a04 	moveq.w	sl, #4
 801b644:	e7c7      	b.n	801b5d6 <MoblePalCryptoPrepHeaderAndNonceNetwork+0xe6>
 801b646:	2002      	movs	r0, #2
 801b648:	e7f3      	b.n	801b632 <MoblePalCryptoPrepHeaderAndNonceNetwork+0x142>
 801b64a:	bf00      	nop
 801b64c:	080334cd 	.word	0x080334cd
 801b650:	08031574 	.word	0x08031574
 801b654:	0803345b 	.word	0x0803345b
 801b658:	08033505 	.word	0x08033505
 801b65c:	0803350b 	.word	0x0803350b
 801b660:	0803350f 	.word	0x0803350f
 801b664:	08033522 	.word	0x08033522
 801b668:	2000141c 	.word	0x2000141c

0801b66c <MoblePalCryptoDecryptNetworkEx>:
 801b66c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b670:	460e      	mov	r6, r1
 801b672:	b093      	sub	sp, #76	; 0x4c
 801b674:	4611      	mov	r1, r2
 801b676:	461f      	mov	r7, r3
 801b678:	4605      	mov	r5, r0
 801b67a:	b930      	cbnz	r0, 801b68a <MoblePalCryptoDecryptNetworkEx+0x1e>
 801b67c:	4b2c      	ldr	r3, [pc, #176]	; (801b730 <MoblePalCryptoDecryptNetworkEx+0xc4>)
 801b67e:	4a2d      	ldr	r2, [pc, #180]	; (801b734 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b680:	f240 7102 	movw	r1, #1794	; 0x702
 801b684:	482c      	ldr	r0, [pc, #176]	; (801b738 <MoblePalCryptoDecryptNetworkEx+0xcc>)
 801b686:	f00d fa1f 	bl	8028ac8 <__assert_func>
 801b68a:	b926      	cbnz	r6, 801b696 <MoblePalCryptoDecryptNetworkEx+0x2a>
 801b68c:	4b2b      	ldr	r3, [pc, #172]	; (801b73c <MoblePalCryptoDecryptNetworkEx+0xd0>)
 801b68e:	4a29      	ldr	r2, [pc, #164]	; (801b734 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b690:	f240 7103 	movw	r1, #1795	; 0x703
 801b694:	e7f6      	b.n	801b684 <MoblePalCryptoDecryptNetworkEx+0x18>
 801b696:	b922      	cbnz	r2, 801b6a2 <MoblePalCryptoDecryptNetworkEx+0x36>
 801b698:	4b29      	ldr	r3, [pc, #164]	; (801b740 <MoblePalCryptoDecryptNetworkEx+0xd4>)
 801b69a:	4a26      	ldr	r2, [pc, #152]	; (801b734 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b69c:	f240 7104 	movw	r1, #1796	; 0x704
 801b6a0:	e7f0      	b.n	801b684 <MoblePalCryptoDecryptNetworkEx+0x18>
 801b6a2:	b923      	cbnz	r3, 801b6ae <MoblePalCryptoDecryptNetworkEx+0x42>
 801b6a4:	4b27      	ldr	r3, [pc, #156]	; (801b744 <MoblePalCryptoDecryptNetworkEx+0xd8>)
 801b6a6:	4a23      	ldr	r2, [pc, #140]	; (801b734 <MoblePalCryptoDecryptNetworkEx+0xc8>)
 801b6a8:	f240 7105 	movw	r1, #1797	; 0x705
 801b6ac:	e7ea      	b.n	801b684 <MoblePalCryptoDecryptNetworkEx+0x18>
 801b6ae:	7a03      	ldrb	r3, [r0, #8]
 801b6b0:	f8d0 8004 	ldr.w	r8, [r0, #4]
 801b6b4:	3b0e      	subs	r3, #14
 801b6b6:	2400      	movs	r4, #0
 801b6b8:	2b0f      	cmp	r3, #15
 801b6ba:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 801b6be:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801b6c2:	940b      	str	r4, [sp, #44]	; 0x2c
 801b6c4:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
 801b6c8:	9406      	str	r4, [sp, #24]
 801b6ca:	d82d      	bhi.n	801b728 <MoblePalCryptoDecryptNetworkEx+0xbc>
 801b6cc:	f10d 091c 	add.w	r9, sp, #28
 801b6d0:	ab06      	add	r3, sp, #24
 801b6d2:	9300      	str	r3, [sp, #0]
 801b6d4:	aa09      	add	r2, sp, #36	; 0x24
 801b6d6:	464b      	mov	r3, r9
 801b6d8:	f7ff ff0a 	bl	801b4f0 <MoblePalCryptoPrepHeaderAndNonceNetwork>
 801b6dc:	7bab      	ldrb	r3, [r5, #14]
 801b6de:	9a06      	ldr	r2, [sp, #24]
 801b6e0:	9203      	str	r2, [sp, #12]
 801b6e2:	42a3      	cmp	r3, r4
 801b6e4:	bf14      	ite	ne
 801b6e6:	2308      	movne	r3, #8
 801b6e8:	2304      	moveq	r3, #4
 801b6ea:	f108 0207 	add.w	r2, r8, #7
 801b6ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 801b6f2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 801b6f6:	f8cd 9000 	str.w	r9, [sp]
 801b6fa:	230d      	movs	r3, #13
 801b6fc:	aa09      	add	r2, sp, #36	; 0x24
 801b6fe:	4639      	mov	r1, r7
 801b700:	a80d      	add	r0, sp, #52	; 0x34
 801b702:	f7fe f939 	bl	8019978 <MoblePalCryptoAesCcmDecrypt>
 801b706:	2801      	cmp	r0, #1
 801b708:	d810      	bhi.n	801b72c <MoblePalCryptoDecryptNetworkEx+0xc0>
 801b70a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801b70e:	9a06      	ldr	r2, [sp, #24]
 801b710:	ba5b      	rev16	r3, r3
 801b712:	82eb      	strh	r3, [r5, #22]
 801b714:	3a02      	subs	r2, #2
 801b716:	f10d 0136 	add.w	r1, sp, #54	; 0x36
 801b71a:	4630      	mov	r0, r6
 801b71c:	f00e f95b 	bl	80299d6 <memcpy>
 801b720:	4620      	mov	r0, r4
 801b722:	b013      	add	sp, #76	; 0x4c
 801b724:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b728:	2003      	movs	r0, #3
 801b72a:	e7fa      	b.n	801b722 <MoblePalCryptoDecryptNetworkEx+0xb6>
 801b72c:	2002      	movs	r0, #2
 801b72e:	e7f8      	b.n	801b722 <MoblePalCryptoDecryptNetworkEx+0xb6>
 801b730:	080334cd 	.word	0x080334cd
 801b734:	0803159c 	.word	0x0803159c
 801b738:	0803345b 	.word	0x0803345b
 801b73c:	0803352e 	.word	0x0803352e
 801b740:	08033522 	.word	0x08033522
 801b744:	08033539 	.word	0x08033539

0801b748 <BnrgmPalCryptoDecryptNetwork>:
 801b748:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b74c:	4f4c      	ldr	r7, [pc, #304]	; (801b880 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b74e:	4604      	mov	r4, r0
 801b750:	4689      	mov	r9, r1
 801b752:	2600      	movs	r6, #0
 801b754:	2002      	movs	r0, #2
 801b756:	f207 4824 	addw	r8, r7, #1060	; 0x424
 801b75a:	7ea3      	ldrb	r3, [r4, #26]
 801b75c:	b2f5      	uxtb	r5, r6
 801b75e:	42ab      	cmp	r3, r5
 801b760:	d837      	bhi.n	801b7d2 <BnrgmPalCryptoDecryptNetwork+0x8a>
 801b762:	2801      	cmp	r0, #1
 801b764:	d050      	beq.n	801b808 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b766:	4f46      	ldr	r7, [pc, #280]	; (801b880 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b768:	2600      	movs	r6, #0
 801b76a:	f207 4824 	addw	r8, r7, #1060	; 0x424
 801b76e:	7fa3      	ldrb	r3, [r4, #30]
 801b770:	b2f5      	uxtb	r5, r6
 801b772:	42ab      	cmp	r3, r5
 801b774:	d84a      	bhi.n	801b80c <BnrgmPalCryptoDecryptNetwork+0xc4>
 801b776:	2801      	cmp	r0, #1
 801b778:	d046      	beq.n	801b808 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b77a:	4f41      	ldr	r7, [pc, #260]	; (801b880 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b77c:	2600      	movs	r6, #0
 801b77e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 801b782:	b2f5      	uxtb	r5, r6
 801b784:	42ab      	cmp	r3, r5
 801b786:	d860      	bhi.n	801b84a <BnrgmPalCryptoDecryptNetwork+0x102>
 801b788:	2801      	cmp	r0, #1
 801b78a:	d03d      	beq.n	801b808 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b78c:	4f3c      	ldr	r7, [pc, #240]	; (801b880 <BnrgmPalCryptoDecryptNetwork+0x138>)
 801b78e:	2600      	movs	r6, #0
 801b790:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801b794:	b2f5      	uxtb	r5, r6
 801b796:	42ab      	cmp	r3, r5
 801b798:	d936      	bls.n	801b808 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b79a:	4425      	add	r5, r4
 801b79c:	4649      	mov	r1, r9
 801b79e:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 801b7a2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b7a6:	4620      	mov	r0, r4
 801b7a8:	f8d3 2630 	ldr.w	r2, [r3, #1584]	; 0x630
 801b7ac:	f102 0310 	add.w	r3, r2, #16
 801b7b0:	3230      	adds	r2, #48	; 0x30
 801b7b2:	f7ff ff5b 	bl	801b66c <MoblePalCryptoDecryptNetworkEx>
 801b7b6:	3601      	adds	r6, #1
 801b7b8:	2800      	cmp	r0, #0
 801b7ba:	d1e9      	bne.n	801b790 <BnrgmPalCryptoDecryptNetwork+0x48>
 801b7bc:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b7c0:	f043 0320 	orr.w	r3, r3, #32
 801b7c4:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b7c8:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 801b7cc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801b7d0:	e037      	b.n	801b842 <BnrgmPalCryptoDecryptNetwork+0xfa>
 801b7d2:	4425      	add	r5, r4
 801b7d4:	4649      	mov	r1, r9
 801b7d6:	7eea      	ldrb	r2, [r5, #27]
 801b7d8:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 801b7dc:	0092      	lsls	r2, r2, #2
 801b7de:	f102 033c 	add.w	r3, r2, #60	; 0x3c
 801b7e2:	325c      	adds	r2, #92	; 0x5c
 801b7e4:	4443      	add	r3, r8
 801b7e6:	4442      	add	r2, r8
 801b7e8:	4620      	mov	r0, r4
 801b7ea:	f7ff ff3f 	bl	801b66c <MoblePalCryptoDecryptNetworkEx>
 801b7ee:	3601      	adds	r6, #1
 801b7f0:	2800      	cmp	r0, #0
 801b7f2:	d1b2      	bne.n	801b75a <BnrgmPalCryptoDecryptNetwork+0x12>
 801b7f4:	7eeb      	ldrb	r3, [r5, #27]
 801b7f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b7fa:	227c      	movs	r2, #124	; 0x7c
 801b7fc:	fb02 7303 	mla	r3, r2, r3, r7
 801b800:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 801b804:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801b808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b80c:	4425      	add	r5, r4
 801b80e:	4649      	mov	r1, r9
 801b810:	7fea      	ldrb	r2, [r5, #31]
 801b812:	ebc2 1242 	rsb	r2, r2, r2, lsl #5
 801b816:	0092      	lsls	r2, r2, #2
 801b818:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 801b81c:	326c      	adds	r2, #108	; 0x6c
 801b81e:	4443      	add	r3, r8
 801b820:	4442      	add	r2, r8
 801b822:	4620      	mov	r0, r4
 801b824:	f7ff ff22 	bl	801b66c <MoblePalCryptoDecryptNetworkEx>
 801b828:	3601      	adds	r6, #1
 801b82a:	2800      	cmp	r0, #0
 801b82c:	d19f      	bne.n	801b76e <BnrgmPalCryptoDecryptNetwork+0x26>
 801b82e:	7feb      	ldrb	r3, [r5, #31]
 801b830:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b834:	227c      	movs	r2, #124	; 0x7c
 801b836:	fb02 7303 	mla	r3, r2, r3, r7
 801b83a:	f8b3 3448 	ldrh.w	r3, [r3, #1096]	; 0x448
 801b83e:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
 801b842:	2301      	movs	r3, #1
 801b844:	f884 3049 	strb.w	r3, [r4, #73]	; 0x49
 801b848:	e7de      	b.n	801b808 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b84a:	4425      	add	r5, r4
 801b84c:	4649      	mov	r1, r9
 801b84e:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801b852:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 801b856:	4620      	mov	r0, r4
 801b858:	f8d3 3630 	ldr.w	r3, [r3, #1584]	; 0x630
 801b85c:	f103 0220 	add.w	r2, r3, #32
 801b860:	f7ff ff04 	bl	801b66c <MoblePalCryptoDecryptNetworkEx>
 801b864:	3601      	adds	r6, #1
 801b866:	2800      	cmp	r0, #0
 801b868:	d189      	bne.n	801b77e <BnrgmPalCryptoDecryptNetwork+0x36>
 801b86a:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 801b86e:	f043 0320 	orr.w	r3, r3, #32
 801b872:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801b876:	f895 3023 	ldrb.w	r3, [r5, #35]	; 0x23
 801b87a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
 801b87e:	e7c3      	b.n	801b808 <BnrgmPalCryptoDecryptNetwork+0xc0>
 801b880:	2000141c 	.word	0x2000141c

0801b884 <MoblePalCryptoEncryptApp>:
 801b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b888:	b08f      	sub	sp, #60	; 0x3c
 801b88a:	460d      	mov	r5, r1
 801b88c:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 801b890:	f89d 4068 	ldrb.w	r4, [sp, #104]	; 0x68
 801b894:	4691      	mov	r9, r2
 801b896:	469a      	mov	sl, r3
 801b898:	4606      	mov	r6, r0
 801b89a:	b930      	cbnz	r0, 801b8aa <MoblePalCryptoEncryptApp+0x26>
 801b89c:	4b5c      	ldr	r3, [pc, #368]	; (801ba10 <MoblePalCryptoEncryptApp+0x18c>)
 801b89e:	4a5d      	ldr	r2, [pc, #372]	; (801ba14 <MoblePalCryptoEncryptApp+0x190>)
 801b8a0:	f240 719b 	movw	r1, #1947	; 0x79b
 801b8a4:	485c      	ldr	r0, [pc, #368]	; (801ba18 <MoblePalCryptoEncryptApp+0x194>)
 801b8a6:	f00d f90f 	bl	8028ac8 <__assert_func>
 801b8aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b8ac:	b923      	cbnz	r3, 801b8b8 <MoblePalCryptoEncryptApp+0x34>
 801b8ae:	4b5b      	ldr	r3, [pc, #364]	; (801ba1c <MoblePalCryptoEncryptApp+0x198>)
 801b8b0:	4a58      	ldr	r2, [pc, #352]	; (801ba14 <MoblePalCryptoEncryptApp+0x190>)
 801b8b2:	f240 719c 	movw	r1, #1948	; 0x79c
 801b8b6:	e7f5      	b.n	801b8a4 <MoblePalCryptoEncryptApp+0x20>
 801b8b8:	4f59      	ldr	r7, [pc, #356]	; (801ba20 <MoblePalCryptoEncryptApp+0x19c>)
 801b8ba:	f8b7 394c 	ldrh.w	r3, [r7, #2380]	; 0x94c
 801b8be:	4543      	cmp	r3, r8
 801b8c0:	d204      	bcs.n	801b8cc <MoblePalCryptoEncryptApp+0x48>
 801b8c2:	4b58      	ldr	r3, [pc, #352]	; (801ba24 <MoblePalCryptoEncryptApp+0x1a0>)
 801b8c4:	4a53      	ldr	r2, [pc, #332]	; (801ba14 <MoblePalCryptoEncryptApp+0x190>)
 801b8c6:	f240 719d 	movw	r1, #1949	; 0x79d
 801b8ca:	e7eb      	b.n	801b8a4 <MoblePalCryptoEncryptApp+0x20>
 801b8cc:	8b4b      	ldrh	r3, [r1, #26]
 801b8ce:	f241 0201 	movw	r2, #4097	; 0x1001
 801b8d2:	f04f 0b00 	mov.w	fp, #0
 801b8d6:	4213      	tst	r3, r2
 801b8d8:	e9cd bb06 	strd	fp, fp, [sp, #24]
 801b8dc:	f8cd b020 	str.w	fp, [sp, #32]
 801b8e0:	f88d b024 	strb.w	fp, [sp, #36]	; 0x24
 801b8e4:	d142      	bne.n	801b96c <MoblePalCryptoEncryptApp+0xe8>
 801b8e6:	f891 1020 	ldrb.w	r1, [r1, #32]
 801b8ea:	4620      	mov	r0, r4
 801b8ec:	f7fd fd84 	bl	80193f8 <MoblePalCryptoGetApplicationSecurityKeys>
 801b8f0:	4601      	mov	r1, r0
 801b8f2:	b920      	cbnz	r0, 801b8fe <MoblePalCryptoEncryptApp+0x7a>
 801b8f4:	4b4c      	ldr	r3, [pc, #304]	; (801ba28 <MoblePalCryptoEncryptApp+0x1a4>)
 801b8f6:	4a47      	ldr	r2, [pc, #284]	; (801ba14 <MoblePalCryptoEncryptApp+0x190>)
 801b8f8:	f44f 61f6 	mov.w	r1, #1968	; 0x7b0
 801b8fc:	e7d2      	b.n	801b8a4 <MoblePalCryptoEncryptApp+0x20>
 801b8fe:	b35c      	cbz	r4, 801b958 <MoblePalCryptoEncryptApp+0xd4>
 801b900:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 801b904:	b383      	cbz	r3, 801b968 <MoblePalCryptoEncryptApp+0xe4>
 801b906:	f100 0210 	add.w	r2, r0, #16
 801b90a:	f10d 0c28 	add.w	ip, sp, #40	; 0x28
 801b90e:	f100 0320 	add.w	r3, r0, #32
 801b912:	6810      	ldr	r0, [r2, #0]
 801b914:	6851      	ldr	r1, [r2, #4]
 801b916:	4664      	mov	r4, ip
 801b918:	c403      	stmia	r4!, {r0, r1}
 801b91a:	3208      	adds	r2, #8
 801b91c:	429a      	cmp	r2, r3
 801b91e:	46a4      	mov	ip, r4
 801b920:	d1f7      	bne.n	801b912 <MoblePalCryptoEncryptApp+0x8e>
 801b922:	2400      	movs	r4, #0
 801b924:	2301      	movs	r3, #1
 801b926:	f88d 3018 	strb.w	r3, [sp, #24]
 801b92a:	8aeb      	ldrh	r3, [r5, #22]
 801b92c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801b930:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b934:	bf0c      	ite	eq
 801b936:	f04f 0b10 	moveq.w	fp, #16
 801b93a:	f04f 0b00 	movne.w	fp, #0
 801b93e:	b93c      	cbnz	r4, 801b950 <MoblePalCryptoEncryptApp+0xcc>
 801b940:	f897 265c 	ldrb.w	r2, [r7, #1628]	; 0x65c
 801b944:	f8d7 3658 	ldr.w	r3, [r7, #1624]	; 0x658
 801b948:	2a01      	cmp	r2, #1
 801b94a:	d12f      	bne.n	801b9ac <MoblePalCryptoEncryptApp+0x128>
 801b94c:	bb6b      	cbnz	r3, 801b9aa <MoblePalCryptoEncryptApp+0x126>
 801b94e:	2402      	movs	r4, #2
 801b950:	4620      	mov	r0, r4
 801b952:	b00f      	add	sp, #60	; 0x3c
 801b954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b958:	f890 3020 	ldrb.w	r3, [r0, #32]
 801b95c:	b123      	cbz	r3, 801b968 <MoblePalCryptoEncryptApp+0xe4>
 801b95e:	2210      	movs	r2, #16
 801b960:	a80a      	add	r0, sp, #40	; 0x28
 801b962:	f00d ff8d 	bl	8029880 <memmove>
 801b966:	e7dd      	b.n	801b924 <MoblePalCryptoEncryptApp+0xa0>
 801b968:	2402      	movs	r4, #2
 801b96a:	e7db      	b.n	801b924 <MoblePalCryptoEncryptApp+0xa0>
 801b96c:	f3c3 3400 	ubfx	r4, r3, #12, #1
 801b970:	04db      	lsls	r3, r3, #19
 801b972:	d50c      	bpl.n	801b98e <MoblePalCryptoEncryptApp+0x10a>
 801b974:	6809      	ldr	r1, [r1, #0]
 801b976:	b1b1      	cbz	r1, 801b9a6 <MoblePalCryptoEncryptApp+0x122>
 801b978:	2210      	movs	r2, #16
 801b97a:	a80a      	add	r0, sp, #40	; 0x28
 801b97c:	f00d ff80 	bl	8029880 <memmove>
 801b980:	465c      	mov	r4, fp
 801b982:	2302      	movs	r3, #2
 801b984:	f88d 3018 	strb.w	r3, [sp, #24]
 801b988:	f04f 0b00 	mov.w	fp, #0
 801b98c:	e7d7      	b.n	801b93e <MoblePalCryptoEncryptApp+0xba>
 801b98e:	f897 361e 	ldrb.w	r3, [r7, #1566]	; 0x61e
 801b992:	2b01      	cmp	r3, #1
 801b994:	d107      	bne.n	801b9a6 <MoblePalCryptoEncryptApp+0x122>
 801b996:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 801b99a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801b99c:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 801b9a0:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801b9a4:	e7ed      	b.n	801b982 <MoblePalCryptoEncryptApp+0xfe>
 801b9a6:	2402      	movs	r4, #2
 801b9a8:	e7eb      	b.n	801b982 <MoblePalCryptoEncryptApp+0xfe>
 801b9aa:	3b01      	subs	r3, #1
 801b9ac:	2203      	movs	r2, #3
 801b9ae:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
 801b9b2:	f10d 001a 	add.w	r0, sp, #26
 801b9b6:	f7ff fc33 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b9ba:	8aa9      	ldrh	r1, [r5, #20]
 801b9bc:	2202      	movs	r2, #2
 801b9be:	f10d 001d 	add.w	r0, sp, #29
 801b9c2:	f7ff fc2d 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b9c6:	8ae9      	ldrh	r1, [r5, #22]
 801b9c8:	2202      	movs	r2, #2
 801b9ca:	f10d 001f 	add.w	r0, sp, #31
 801b9ce:	f7ff fc27 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b9d2:	2204      	movs	r2, #4
 801b9d4:	4619      	mov	r1, r3
 801b9d6:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 801b9da:	f7ff fc21 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801b9de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801b9e0:	f8cd b014 	str.w	fp, [sp, #20]
 801b9e4:	e9cd 8303 	strd	r8, r3, [sp, #12]
 801b9e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801b9ea:	9302      	str	r3, [sp, #8]
 801b9ec:	230d      	movs	r3, #13
 801b9ee:	f1b9 0f00 	cmp.w	r9, #0
 801b9f2:	9301      	str	r3, [sp, #4]
 801b9f4:	ab06      	add	r3, sp, #24
 801b9f6:	9300      	str	r3, [sp, #0]
 801b9f8:	bf14      	ite	ne
 801b9fa:	2208      	movne	r2, #8
 801b9fc:	2204      	moveq	r2, #4
 801b9fe:	ab0a      	add	r3, sp, #40	; 0x28
 801ba00:	eb06 0108 	add.w	r1, r6, r8
 801ba04:	4630      	mov	r0, r6
 801ba06:	f7fd ffa1 	bl	801994c <MoblePalCryptoAesCcmEncrypt>
 801ba0a:	2801      	cmp	r0, #1
 801ba0c:	d9a0      	bls.n	801b950 <MoblePalCryptoEncryptApp+0xcc>
 801ba0e:	e79e      	b.n	801b94e <MoblePalCryptoEncryptApp+0xca>
 801ba10:	080334c6 	.word	0x080334c6
 801ba14:	080315bb 	.word	0x080315bb
 801ba18:	0803345b 	.word	0x0803345b
 801ba1c:	08033548 	.word	0x08033548
 801ba20:	2000141c 	.word	0x2000141c
 801ba24:	08033550 	.word	0x08033550
 801ba28:	0803357f 	.word	0x0803357f

0801ba2c <MoblePalCryptoDecryptApp>:
 801ba2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba30:	b097      	sub	sp, #92	; 0x5c
 801ba32:	e9dd 4726 	ldrd	r4, r7, [sp, #152]	; 0x98
 801ba36:	9309      	str	r3, [sp, #36]	; 0x24
 801ba38:	f89d 3094 	ldrb.w	r3, [sp, #148]	; 0x94
 801ba3c:	9306      	str	r3, [sp, #24]
 801ba3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801ba40:	f8bd b080 	ldrh.w	fp, [sp, #128]	; 0x80
 801ba44:	f8bd 8084 	ldrh.w	r8, [sp, #132]	; 0x84
 801ba48:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 801ba4a:	b933      	cbnz	r3, 801ba5a <MoblePalCryptoDecryptApp+0x2e>
 801ba4c:	4b9e      	ldr	r3, [pc, #632]	; (801bcc8 <MoblePalCryptoDecryptApp+0x29c>)
 801ba4e:	4a9f      	ldr	r2, [pc, #636]	; (801bccc <MoblePalCryptoDecryptApp+0x2a0>)
 801ba50:	f640 0131 	movw	r1, #2097	; 0x831
 801ba54:	489e      	ldr	r0, [pc, #632]	; (801bcd0 <MoblePalCryptoDecryptApp+0x2a4>)
 801ba56:	f00d f837 	bl	8028ac8 <__assert_func>
 801ba5a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ba5c:	b923      	cbnz	r3, 801ba68 <MoblePalCryptoDecryptApp+0x3c>
 801ba5e:	4b9d      	ldr	r3, [pc, #628]	; (801bcd4 <MoblePalCryptoDecryptApp+0x2a8>)
 801ba60:	4a9a      	ldr	r2, [pc, #616]	; (801bccc <MoblePalCryptoDecryptApp+0x2a0>)
 801ba62:	f640 0132 	movw	r1, #2098	; 0x832
 801ba66:	e7f5      	b.n	801ba54 <MoblePalCryptoDecryptApp+0x28>
 801ba68:	1f6b      	subs	r3, r5, #5
 801ba6a:	2b9b      	cmp	r3, #155	; 0x9b
 801ba6c:	d904      	bls.n	801ba78 <MoblePalCryptoDecryptApp+0x4c>
 801ba6e:	4b9a      	ldr	r3, [pc, #616]	; (801bcd8 <MoblePalCryptoDecryptApp+0x2ac>)
 801ba70:	4a96      	ldr	r2, [pc, #600]	; (801bccc <MoblePalCryptoDecryptApp+0x2a0>)
 801ba72:	f640 0133 	movw	r1, #2099	; 0x833
 801ba76:	e7ed      	b.n	801ba54 <MoblePalCryptoDecryptApp+0x28>
 801ba78:	2a00      	cmp	r2, #0
 801ba7a:	f04f 0300 	mov.w	r3, #0
 801ba7e:	bf14      	ite	ne
 801ba80:	f04f 0908 	movne.w	r9, #8
 801ba84:	f04f 0904 	moveq.w	r9, #4
 801ba88:	2801      	cmp	r0, #1
 801ba8a:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 801ba8e:	9310      	str	r3, [sp, #64]	; 0x40
 801ba90:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 801ba94:	f040 80b7 	bne.w	801bc06 <MoblePalCryptoDecryptApp+0x1da>
 801ba98:	b2c9      	uxtb	r1, r1
 801ba9a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801ba9e:	9207      	str	r2, [sp, #28]
 801baa0:	f7fe fbec 	bl	801a27c <BnrgmPalCryptoMatchAid>
 801baa4:	4606      	mov	r6, r0
 801baa6:	bb10      	cbnz	r0, 801baee <MoblePalCryptoDecryptApp+0xc2>
 801baa8:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801baac:	b30b      	cbz	r3, 801baf2 <MoblePalCryptoDecryptApp+0xc6>
 801baae:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 801bab2:	9308      	str	r3, [sp, #32]
 801bab4:	01d2      	lsls	r2, r2, #7
 801bab6:	b2d3      	uxtb	r3, r2
 801bab8:	9307      	str	r3, [sp, #28]
 801baba:	f408 4340 	and.w	r3, r8, #49152	; 0xc000
 801babe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bac2:	bf0c      	ite	eq
 801bac4:	2310      	moveq	r3, #16
 801bac6:	2300      	movne	r3, #0
 801bac8:	930a      	str	r3, [sp, #40]	; 0x28
 801baca:	bf0c      	ite	eq
 801bacc:	463b      	moveq	r3, r7
 801bace:	2300      	movne	r3, #0
 801bad0:	930c      	str	r3, [sp, #48]	; 0x30
 801bad2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bad4:	eba5 0509 	sub.w	r5, r5, r9
 801bad8:	442b      	add	r3, r5
 801bada:	f104 0739 	add.w	r7, r4, #57	; 0x39
 801bade:	f04f 0a00 	mov.w	sl, #0
 801bae2:	930d      	str	r3, [sp, #52]	; 0x34
 801bae4:	9a08      	ldr	r2, [sp, #32]
 801bae6:	fa5f f38a 	uxtb.w	r3, sl
 801baea:	4293      	cmp	r3, r2
 801baec:	d304      	bcc.n	801baf8 <MoblePalCryptoDecryptApp+0xcc>
 801baee:	2602      	movs	r6, #2
 801baf0:	e067      	b.n	801bbc2 <MoblePalCryptoDecryptApp+0x196>
 801baf2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801baf6:	e7dc      	b.n	801bab2 <MoblePalCryptoDecryptApp+0x86>
 801baf8:	9b06      	ldr	r3, [sp, #24]
 801bafa:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 801bafe:	222c      	movs	r2, #44	; 0x2c
 801bb00:	2b00      	cmp	r3, #0
 801bb02:	d062      	beq.n	801bbca <MoblePalCryptoDecryptApp+0x19e>
 801bb04:	793b      	ldrb	r3, [r7, #4]
 801bb06:	4975      	ldr	r1, [pc, #468]	; (801bcdc <MoblePalCryptoDecryptApp+0x2b0>)
 801bb08:	fb02 1303 	mla	r3, r2, r3, r1
 801bb0c:	f893 25b9 	ldrb.w	r2, [r3, #1465]	; 0x5b9
 801bb10:	b162      	cbz	r2, 801bb2c <MoblePalCryptoDecryptApp+0x100>
 801bb12:	2201      	movs	r2, #1
 801bb14:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 801bb18:	9a07      	ldr	r2, [sp, #28]
 801bb1a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 801bb1e:	f503 63b5 	add.w	r3, r3, #1448	; 0x5a8
 801bb22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 801bb24:	f10d 0c58 	add.w	ip, sp, #88	; 0x58
 801bb28:	e90c 000f 	stmdb	ip, {r0, r1, r2, r3}
 801bb2c:	4b6b      	ldr	r3, [pc, #428]	; (801bcdc <MoblePalCryptoDecryptApp+0x2b0>)
 801bb2e:	7b21      	ldrb	r1, [r4, #12]
 801bb30:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bb34:	f003 0201 	and.w	r2, r3, #1
 801bb38:	4291      	cmp	r1, r2
 801bb3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bb3c:	f04f 0203 	mov.w	r2, #3
 801bb40:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bb44:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 801bb48:	bf18      	it	ne
 801bb4a:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bb4e:	f7ff fb67 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bb52:	2202      	movs	r2, #2
 801bb54:	4659      	mov	r1, fp
 801bb56:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 801bb5a:	f7ff fb61 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bb5e:	2202      	movs	r2, #2
 801bb60:	4641      	mov	r1, r8
 801bb62:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 801bb66:	f7ff fb5b 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bb6a:	4619      	mov	r1, r3
 801bb6c:	2204      	movs	r2, #4
 801bb6e:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 801bb72:	f7ff fb55 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bb76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bb78:	9305      	str	r3, [sp, #20]
 801bb7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bb7c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bb7e:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801bb82:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bb84:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bb88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801bb8a:	9300      	str	r3, [sp, #0]
 801bb8c:	aa0e      	add	r2, sp, #56	; 0x38
 801bb8e:	230d      	movs	r3, #13
 801bb90:	a912      	add	r1, sp, #72	; 0x48
 801bb92:	f7fd fef1 	bl	8019978 <MoblePalCryptoAesCcmDecrypt>
 801bb96:	2801      	cmp	r0, #1
 801bb98:	f10a 0a01 	add.w	sl, sl, #1
 801bb9c:	f107 0701 	add.w	r7, r7, #1
 801bba0:	d8a0      	bhi.n	801bae4 <MoblePalCryptoDecryptApp+0xb8>
 801bba2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bba4:	9906      	ldr	r1, [sp, #24]
 801bba6:	4b4d      	ldr	r3, [pc, #308]	; (801bcdc <MoblePalCryptoDecryptApp+0x2b0>)
 801bba8:	4422      	add	r2, r4
 801bbaa:	b1f9      	cbz	r1, 801bbec <MoblePalCryptoDecryptApp+0x1c0>
 801bbac:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
 801bbb0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bbb4:	212c      	movs	r1, #44	; 0x2c
 801bbb6:	fb01 3302 	mla	r3, r1, r2, r3
 801bbba:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	; 0x5ba
 801bbbe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801bbc2:	4630      	mov	r0, r6
 801bbc4:	b017      	add	sp, #92	; 0x5c
 801bbc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbca:	783b      	ldrb	r3, [r7, #0]
 801bbcc:	4943      	ldr	r1, [pc, #268]	; (801bcdc <MoblePalCryptoDecryptApp+0x2b0>)
 801bbce:	fb02 1303 	mla	r3, r2, r3, r1
 801bbd2:	f893 25b8 	ldrb.w	r2, [r3, #1464]	; 0x5b8
 801bbd6:	2a00      	cmp	r2, #0
 801bbd8:	d0a8      	beq.n	801bb2c <MoblePalCryptoDecryptApp+0x100>
 801bbda:	2201      	movs	r2, #1
 801bbdc:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
 801bbe0:	9a07      	ldr	r2, [sp, #28]
 801bbe2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 801bbe6:	f503 63b3 	add.w	r3, r3, #1432	; 0x598
 801bbea:	e79a      	b.n	801bb22 <MoblePalCryptoDecryptApp+0xf6>
 801bbec:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 801bbf0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801bbf4:	212c      	movs	r1, #44	; 0x2c
 801bbf6:	fb01 3302 	mla	r3, r1, r2, r3
 801bbfa:	f8b3 35ba 	ldrh.w	r3, [r3, #1466]	; 0x5ba
 801bbfe:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 801bc02:	2600      	movs	r6, #0
 801bc04:	e7dd      	b.n	801bbc2 <MoblePalCryptoDecryptApp+0x196>
 801bc06:	4b35      	ldr	r3, [pc, #212]	; (801bcdc <MoblePalCryptoDecryptApp+0x2b0>)
 801bc08:	f893 161e 	ldrb.w	r1, [r3, #1566]	; 0x61e
 801bc0c:	b129      	cbz	r1, 801bc1a <MoblePalCryptoDecryptApp+0x1ee>
 801bc0e:	2102      	movs	r1, #2
 801bc10:	01d2      	lsls	r2, r2, #7
 801bc12:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
 801bc16:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 801bc1a:	f8d3 3658 	ldr.w	r3, [r3, #1624]	; 0x658
 801bc1e:	7b21      	ldrb	r1, [r4, #12]
 801bc20:	f003 0201 	and.w	r2, r3, #1
 801bc24:	4291      	cmp	r1, r2
 801bc26:	9909      	ldr	r1, [sp, #36]	; 0x24
 801bc28:	f04f 0203 	mov.w	r2, #3
 801bc2c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 801bc30:	f10d 003a 	add.w	r0, sp, #58	; 0x3a
 801bc34:	bf18      	it	ne
 801bc36:	f103 33ff 	addne.w	r3, r3, #4294967295
 801bc3a:	f7ff faf1 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bc3e:	2202      	movs	r2, #2
 801bc40:	4659      	mov	r1, fp
 801bc42:	f10d 003d 	add.w	r0, sp, #61	; 0x3d
 801bc46:	f7ff faeb 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bc4a:	4641      	mov	r1, r8
 801bc4c:	2202      	movs	r2, #2
 801bc4e:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
 801bc52:	f7ff fae5 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bc56:	4619      	mov	r1, r3
 801bc58:	2204      	movs	r2, #4
 801bc5a:	f10d 0041 	add.w	r0, sp, #65	; 0x41
 801bc5e:	f7ff fadf 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801bc62:	f408 4840 	and.w	r8, r8, #49152	; 0xc000
 801bc66:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bc68:	491d      	ldr	r1, [pc, #116]	; (801bce0 <MoblePalCryptoDecryptApp+0x2b4>)
 801bc6a:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bc6c:	9112      	str	r1, [sp, #72]	; 0x48
 801bc6e:	f5b8 4f00 	cmp.w	r8, #32768	; 0x8000
 801bc72:	eba5 0509 	sub.w	r5, r5, r9
 801bc76:	bf18      	it	ne
 801bc78:	2700      	movne	r7, #0
 801bc7a:	eb03 0405 	add.w	r4, r3, r5
 801bc7e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bc80:	9503      	str	r5, [sp, #12]
 801bc82:	bf14      	ite	ne
 801bc84:	463e      	movne	r6, r7
 801bc86:	2610      	moveq	r6, #16
 801bc88:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bc8c:	e9cd 7604 	strd	r7, r6, [sp, #16]
 801bc90:	9400      	str	r4, [sp, #0]
 801bc92:	230d      	movs	r3, #13
 801bc94:	aa0e      	add	r2, sp, #56	; 0x38
 801bc96:	f7fd fe6f 	bl	8019978 <MoblePalCryptoAesCcmDecrypt>
 801bc9a:	2801      	cmp	r0, #1
 801bc9c:	d9b1      	bls.n	801bc02 <MoblePalCryptoDecryptApp+0x1d6>
 801bc9e:	a912      	add	r1, sp, #72	; 0x48
 801bca0:	4658      	mov	r0, fp
 801bca2:	f7f1 fee2 	bl	800da6a <ApplicationGetConfigServerDeviceKey>
 801bca6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801bca8:	9912      	ldr	r1, [sp, #72]	; 0x48
 801bcaa:	9824      	ldr	r0, [sp, #144]	; 0x90
 801bcac:	9503      	str	r5, [sp, #12]
 801bcae:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801bcb2:	e9cd 7604 	strd	r7, r6, [sp, #16]
 801bcb6:	9400      	str	r4, [sp, #0]
 801bcb8:	230d      	movs	r3, #13
 801bcba:	aa0e      	add	r2, sp, #56	; 0x38
 801bcbc:	f7fd fe5c 	bl	8019978 <MoblePalCryptoAesCcmDecrypt>
 801bcc0:	2801      	cmp	r0, #1
 801bcc2:	d99e      	bls.n	801bc02 <MoblePalCryptoDecryptApp+0x1d6>
 801bcc4:	e713      	b.n	801baee <MoblePalCryptoDecryptApp+0xc2>
 801bcc6:	bf00      	nop
 801bcc8:	08033587 	.word	0x08033587
 801bccc:	080315d4 	.word	0x080315d4
 801bcd0:	0803345b 	.word	0x0803345b
 801bcd4:	08033598 	.word	0x08033598
 801bcd8:	080335a6 	.word	0x080335a6
 801bcdc:	2000141c 	.word	0x2000141c
 801bce0:	20001a3c 	.word	0x20001a3c

0801bce4 <MobleOutputStreamPutLittleEndian>:
 801bce4:	1883      	adds	r3, r0, r2
 801bce6:	4298      	cmp	r0, r3
 801bce8:	d101      	bne.n	801bcee <MobleOutputStreamPutLittleEndian+0xa>
 801bcea:	4610      	mov	r0, r2
 801bcec:	4770      	bx	lr
 801bcee:	f800 1b01 	strb.w	r1, [r0], #1
 801bcf2:	0a09      	lsrs	r1, r1, #8
 801bcf4:	e7f7      	b.n	801bce6 <MobleOutputStreamPutLittleEndian+0x2>
	...

0801bcf8 <MobleApplicationProcessPacket>:
 801bcf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bcfc:	9f08      	ldr	r7, [sp, #32]
 801bcfe:	460c      	mov	r4, r1
 801bd00:	4698      	mov	r8, r3
 801bd02:	4691      	mov	r9, r2
 801bd04:	b932      	cbnz	r2, 801bd14 <MobleApplicationProcessPacket+0x1c>
 801bd06:	4b26      	ldr	r3, [pc, #152]	; (801bda0 <MobleApplicationProcessPacket+0xa8>)
 801bd08:	4a26      	ldr	r2, [pc, #152]	; (801bda4 <MobleApplicationProcessPacket+0xac>)
 801bd0a:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 801bd0e:	4826      	ldr	r0, [pc, #152]	; (801bda8 <MobleApplicationProcessPacket+0xb0>)
 801bd10:	f00c feda 	bl	8028ac8 <__assert_func>
 801bd14:	b923      	cbnz	r3, 801bd20 <MobleApplicationProcessPacket+0x28>
 801bd16:	4b25      	ldr	r3, [pc, #148]	; (801bdac <MobleApplicationProcessPacket+0xb4>)
 801bd18:	4a22      	ldr	r2, [pc, #136]	; (801bda4 <MobleApplicationProcessPacket+0xac>)
 801bd1a:	f240 11c5 	movw	r1, #453	; 0x1c5
 801bd1e:	e7f6      	b.n	801bd0e <MobleApplicationProcessPacket+0x16>
 801bd20:	b921      	cbnz	r1, 801bd2c <MobleApplicationProcessPacket+0x34>
 801bd22:	4b23      	ldr	r3, [pc, #140]	; (801bdb0 <MobleApplicationProcessPacket+0xb8>)
 801bd24:	4a1f      	ldr	r2, [pc, #124]	; (801bda4 <MobleApplicationProcessPacket+0xac>)
 801bd26:	f44f 71e3 	mov.w	r1, #454	; 0x1c6
 801bd2a:	e7f0      	b.n	801bd0e <MobleApplicationProcessPacket+0x16>
 801bd2c:	1e7b      	subs	r3, r7, #1
 801bd2e:	2b9b      	cmp	r3, #155	; 0x9b
 801bd30:	d834      	bhi.n	801bd9c <MobleApplicationProcessPacket+0xa4>
 801bd32:	4d20      	ldr	r5, [pc, #128]	; (801bdb4 <MobleApplicationProcessPacket+0xbc>)
 801bd34:	f8d5 6954 	ldr.w	r6, [r5, #2388]	; 0x954
 801bd38:	b116      	cbz	r6, 801bd40 <MobleApplicationProcessPacket+0x48>
 801bd3a:	2002      	movs	r0, #2
 801bd3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd40:	f107 0020 	add.w	r0, r7, #32
 801bd44:	f7ff f8ac 	bl	801aea0 <MobleMemAlloc>
 801bd48:	f8c5 0954 	str.w	r0, [r5, #2388]	; 0x954
 801bd4c:	2800      	cmp	r0, #0
 801bd4e:	d0f4      	beq.n	801bd3a <MobleApplicationProcessPacket+0x42>
 801bd50:	220c      	movs	r2, #12
 801bd52:	18a1      	adds	r1, r4, r2
 801bd54:	f00d fd94 	bl	8029880 <memmove>
 801bd58:	f8d5 5954 	ldr.w	r5, [r5, #2388]	; 0x954
 801bd5c:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801bd60:	732b      	strb	r3, [r5, #12]
 801bd62:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 801bd66:	81eb      	strh	r3, [r5, #14]
 801bd68:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 801bd6c:	742b      	strb	r3, [r5, #16]
 801bd6e:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 801bd72:	826b      	strh	r3, [r5, #18]
 801bd74:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 801bd78:	752b      	strb	r3, [r5, #20]
 801bd7a:	f899 3001 	ldrb.w	r3, [r9, #1]
 801bd7e:	3b00      	subs	r3, #0
 801bd80:	bf18      	it	ne
 801bd82:	2301      	movne	r3, #1
 801bd84:	756b      	strb	r3, [r5, #21]
 801bd86:	463a      	mov	r2, r7
 801bd88:	4641      	mov	r1, r8
 801bd8a:	f105 0020 	add.w	r0, r5, #32
 801bd8e:	f00d fd77 	bl	8029880 <memmove>
 801bd92:	61ef      	str	r7, [r5, #28]
 801bd94:	7e23      	ldrb	r3, [r4, #24]
 801bd96:	75ab      	strb	r3, [r5, #22]
 801bd98:	4630      	mov	r0, r6
 801bd9a:	e7cf      	b.n	801bd3c <MobleApplicationProcessPacket+0x44>
 801bd9c:	2003      	movs	r0, #3
 801bd9e:	e7cd      	b.n	801bd3c <MobleApplicationProcessPacket+0x44>
 801bda0:	08033617 	.word	0x08033617
 801bda4:	080315ed 	.word	0x080315ed
 801bda8:	08033628 	.word	0x08033628
 801bdac:	0803366d 	.word	0x0803366d
 801bdb0:	080334cd 	.word	0x080334cd
 801bdb4:	2000141c 	.word	0x2000141c

0801bdb8 <MobleApplicationPassPacketsToSIGModels>:
 801bdb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdbc:	7d4c      	ldrb	r4, [r1, #21]
 801bdbe:	b089      	sub	sp, #36	; 0x24
 801bdc0:	4605      	mov	r5, r0
 801bdc2:	468b      	mov	fp, r1
 801bdc4:	2c00      	cmp	r4, #0
 801bdc6:	f000 80cd 	beq.w	801bf64 <MobleApplicationPassPacketsToSIGModels+0x1ac>
 801bdca:	6803      	ldr	r3, [r0, #0]
 801bdcc:	4f7c      	ldr	r7, [pc, #496]	; (801bfc0 <MobleApplicationPassPacketsToSIGModels+0x208>)
 801bdce:	7f1b      	ldrb	r3, [r3, #28]
 801bdd0:	9302      	str	r3, [sp, #8]
 801bdd2:	89cb      	ldrh	r3, [r1, #14]
 801bdd4:	9303      	str	r3, [sp, #12]
 801bdd6:	7b0b      	ldrb	r3, [r1, #12]
 801bdd8:	9301      	str	r3, [sp, #4]
 801bdda:	2300      	movs	r3, #0
 801bddc:	9300      	str	r3, [sp, #0]
 801bdde:	9b01      	ldr	r3, [sp, #4]
 801bde0:	33a6      	adds	r3, #166	; 0xa6
 801bde2:	9305      	str	r3, [sp, #20]
 801bde4:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801bde8:	8838      	ldrh	r0, [r7, #0]
 801bdea:	f89d 3000 	ldrb.w	r3, [sp]
 801bdee:	4290      	cmp	r0, r2
 801bdf0:	d149      	bne.n	801be86 <MobleApplicationPassPacketsToSIGModels+0xce>
 801bdf2:	463c      	mov	r4, r7
 801bdf4:	f04f 0900 	mov.w	r9, #0
 801bdf8:	9a05      	ldr	r2, [sp, #20]
 801bdfa:	5ca2      	ldrb	r2, [r4, r2]
 801bdfc:	bb2a      	cbnz	r2, 801be4a <MobleApplicationPassPacketsToSIGModels+0x92>
 801bdfe:	f109 090e 	add.w	r9, r9, #14
 801be02:	f1b9 0f9a 	cmp.w	r9, #154	; 0x9a
 801be06:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801be0a:	d1f5      	bne.n	801bdf8 <MobleApplicationPassPacketsToSIGModels+0x40>
 801be0c:	2002      	movs	r0, #2
 801be0e:	f9bb 300a 	ldrsh.w	r3, [fp, #10]
 801be12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801be16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801be1a:	d106      	bne.n	801be2a <MobleApplicationPassPacketsToSIGModels+0x72>
 801be1c:	9b02      	ldr	r3, [sp, #8]
 801be1e:	2b01      	cmp	r3, #1
 801be20:	d903      	bls.n	801be2a <MobleApplicationPassPacketsToSIGModels+0x72>
 801be22:	9a00      	ldr	r2, [sp, #0]
 801be24:	3b01      	subs	r3, #1
 801be26:	4293      	cmp	r3, r2
 801be28:	d101      	bne.n	801be2e <MobleApplicationPassPacketsToSIGModels+0x76>
 801be2a:	2802      	cmp	r0, #2
 801be2c:	d10a      	bne.n	801be44 <MobleApplicationPassPacketsToSIGModels+0x8c>
 801be2e:	9b00      	ldr	r3, [sp, #0]
 801be30:	9a02      	ldr	r2, [sp, #8]
 801be32:	3301      	adds	r3, #1
 801be34:	9300      	str	r3, [sp, #0]
 801be36:	f89d 3000 	ldrb.w	r3, [sp]
 801be3a:	429a      	cmp	r2, r3
 801be3c:	f507 7739 	add.w	r7, r7, #740	; 0x2e4
 801be40:	d8d0      	bhi.n	801bde4 <MobleApplicationPassPacketsToSIGModels+0x2c>
 801be42:	2002      	movs	r0, #2
 801be44:	b009      	add	sp, #36	; 0x24
 801be46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be4a:	9901      	ldr	r1, [sp, #4]
 801be4c:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801be50:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801be54:	9903      	ldr	r1, [sp, #12]
 801be56:	428a      	cmp	r2, r1
 801be58:	d1d1      	bne.n	801bdfe <MobleApplicationPassPacketsToSIGModels+0x46>
 801be5a:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 801be5e:	2a01      	cmp	r2, #1
 801be60:	d1cd      	bne.n	801bdfe <MobleApplicationPassPacketsToSIGModels+0x46>
 801be62:	f8df 8168 	ldr.w	r8, [pc, #360]	; 801bfcc <MobleApplicationPassPacketsToSIGModels+0x214>
 801be66:	f108 0a0c 	add.w	sl, r8, #12
 801be6a:	f858 2b04 	ldr.w	r2, [r8], #4
 801be6e:	9304      	str	r3, [sp, #16]
 801be70:	4616      	mov	r6, r2
 801be72:	4659      	mov	r1, fp
 801be74:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801be76:	4628      	mov	r0, r5
 801be78:	47b0      	blx	r6
 801be7a:	2801      	cmp	r0, #1
 801be7c:	d9c7      	bls.n	801be0e <MobleApplicationPassPacketsToSIGModels+0x56>
 801be7e:	45c2      	cmp	sl, r8
 801be80:	9b04      	ldr	r3, [sp, #16]
 801be82:	d1f2      	bne.n	801be6a <MobleApplicationPassPacketsToSIGModels+0xb2>
 801be84:	e7bb      	b.n	801bdfe <MobleApplicationPassPacketsToSIGModels+0x46>
 801be86:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 801be8a:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801be8e:	d1bd      	bne.n	801be0c <MobleApplicationPassPacketsToSIGModels+0x54>
 801be90:	2200      	movs	r2, #0
 801be92:	463c      	mov	r4, r7
 801be94:	9204      	str	r2, [sp, #16]
 801be96:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801be98:	b93a      	cbnz	r2, 801beaa <MobleApplicationPassPacketsToSIGModels+0xf2>
 801be9a:	9a04      	ldr	r2, [sp, #16]
 801be9c:	320e      	adds	r2, #14
 801be9e:	2a9a      	cmp	r2, #154	; 0x9a
 801bea0:	9204      	str	r2, [sp, #16]
 801bea2:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801bea6:	d1f6      	bne.n	801be96 <MobleApplicationPassPacketsToSIGModels+0xde>
 801bea8:	e7b0      	b.n	801be0c <MobleApplicationPassPacketsToSIGModels+0x54>
 801beaa:	f8bb 200a 	ldrh.w	r2, [fp, #10]
 801beae:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 801beb2:	428a      	cmp	r2, r1
 801beb4:	d920      	bls.n	801bef8 <MobleApplicationPassPacketsToSIGModels+0x140>
 801beb6:	9a05      	ldr	r2, [sp, #20]
 801beb8:	5ca2      	ldrb	r2, [r4, r2]
 801beba:	2a00      	cmp	r2, #0
 801bebc:	d0ed      	beq.n	801be9a <MobleApplicationPassPacketsToSIGModels+0xe2>
 801bebe:	9901      	ldr	r1, [sp, #4]
 801bec0:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801bec4:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801bec8:	9903      	ldr	r1, [sp, #12]
 801beca:	428a      	cmp	r2, r1
 801becc:	d1e5      	bne.n	801be9a <MobleApplicationPassPacketsToSIGModels+0xe2>
 801bece:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 801bed2:	2a01      	cmp	r2, #1
 801bed4:	d1e1      	bne.n	801be9a <MobleApplicationPassPacketsToSIGModels+0xe2>
 801bed6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 801bfcc <MobleApplicationPassPacketsToSIGModels+0x214>
 801beda:	f108 090c 	add.w	r9, r8, #12
 801bede:	f858 ab04 	ldr.w	sl, [r8], #4
 801bee2:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801bee4:	9306      	str	r3, [sp, #24]
 801bee6:	4659      	mov	r1, fp
 801bee8:	4628      	mov	r0, r5
 801beea:	47d0      	blx	sl
 801beec:	2801      	cmp	r0, #1
 801beee:	d98e      	bls.n	801be0e <MobleApplicationPassPacketsToSIGModels+0x56>
 801bef0:	45c1      	cmp	r9, r8
 801bef2:	9b06      	ldr	r3, [sp, #24]
 801bef4:	d1f3      	bne.n	801bede <MobleApplicationPassPacketsToSIGModels+0x126>
 801bef6:	e7d0      	b.n	801be9a <MobleApplicationPassPacketsToSIGModels+0xe2>
 801bef8:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801befc:	f104 0a80 	add.w	sl, r4, #128	; 0x80
 801bf00:	f04f 0800 	mov.w	r8, #0
 801bf04:	9206      	str	r2, [sp, #24]
 801bf06:	f83a 2b02 	ldrh.w	r2, [sl], #2
 801bf0a:	f8bb 000a 	ldrh.w	r0, [fp, #10]
 801bf0e:	f108 0801 	add.w	r8, r8, #1
 801bf12:	4290      	cmp	r0, r2
 801bf14:	fa5f f888 	uxtb.w	r8, r8
 801bf18:	d003      	beq.n	801bf22 <MobleApplicationPassPacketsToSIGModels+0x16a>
 801bf1a:	f1b8 0f0a 	cmp.w	r8, #10
 801bf1e:	d1f2      	bne.n	801bf06 <MobleApplicationPassPacketsToSIGModels+0x14e>
 801bf20:	e7bb      	b.n	801be9a <MobleApplicationPassPacketsToSIGModels+0xe2>
 801bf22:	9a05      	ldr	r2, [sp, #20]
 801bf24:	5ca2      	ldrb	r2, [r4, r2]
 801bf26:	2a00      	cmp	r2, #0
 801bf28:	d0f7      	beq.n	801bf1a <MobleApplicationPassPacketsToSIGModels+0x162>
 801bf2a:	9901      	ldr	r1, [sp, #4]
 801bf2c:	9a06      	ldr	r2, [sp, #24]
 801bf2e:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 801bf32:	9903      	ldr	r1, [sp, #12]
 801bf34:	428a      	cmp	r2, r1
 801bf36:	d1f0      	bne.n	801bf1a <MobleApplicationPassPacketsToSIGModels+0x162>
 801bf38:	f894 209a 	ldrb.w	r2, [r4, #154]	; 0x9a
 801bf3c:	2a01      	cmp	r2, #1
 801bf3e:	d1ec      	bne.n	801bf1a <MobleApplicationPassPacketsToSIGModels+0x162>
 801bf40:	f8df 9088 	ldr.w	r9, [pc, #136]	; 801bfcc <MobleApplicationPassPacketsToSIGModels+0x214>
 801bf44:	f859 2b04 	ldr.w	r2, [r9], #4
 801bf48:	9307      	str	r3, [sp, #28]
 801bf4a:	4616      	mov	r6, r2
 801bf4c:	4659      	mov	r1, fp
 801bf4e:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801bf50:	4628      	mov	r0, r5
 801bf52:	47b0      	blx	r6
 801bf54:	2801      	cmp	r0, #1
 801bf56:	f67f af5a 	bls.w	801be0e <MobleApplicationPassPacketsToSIGModels+0x56>
 801bf5a:	4b1a      	ldr	r3, [pc, #104]	; (801bfc4 <MobleApplicationPassPacketsToSIGModels+0x20c>)
 801bf5c:	4599      	cmp	r9, r3
 801bf5e:	9b07      	ldr	r3, [sp, #28]
 801bf60:	d1f0      	bne.n	801bf44 <MobleApplicationPassPacketsToSIGModels+0x18c>
 801bf62:	e7da      	b.n	801bf1a <MobleApplicationPassPacketsToSIGModels+0x162>
 801bf64:	f8df 9064 	ldr.w	r9, [pc, #100]	; 801bfcc <MobleApplicationPassPacketsToSIGModels+0x214>
 801bf68:	4e17      	ldr	r6, [pc, #92]	; (801bfc8 <MobleApplicationPassPacketsToSIGModels+0x210>)
 801bf6a:	f04f 0a38 	mov.w	sl, #56	; 0x38
 801bf6e:	f859 8b04 	ldr.w	r8, [r9], #4
 801bf72:	b2e3      	uxtb	r3, r4
 801bf74:	b944      	cbnz	r4, 801bf88 <MobleApplicationPassPacketsToSIGModels+0x1d0>
 801bf76:	f8d6 20b0 	ldr.w	r2, [r6, #176]	; 0xb0
 801bf7a:	4623      	mov	r3, r4
 801bf7c:	4659      	mov	r1, fp
 801bf7e:	4628      	mov	r0, r5
 801bf80:	47c0      	blx	r8
 801bf82:	2801      	cmp	r0, #1
 801bf84:	d818      	bhi.n	801bfb8 <MobleApplicationPassPacketsToSIGModels+0x200>
 801bf86:	e75d      	b.n	801be44 <MobleApplicationPassPacketsToSIGModels+0x8c>
 801bf88:	2b01      	cmp	r3, #1
 801bf8a:	d103      	bne.n	801bf94 <MobleApplicationPassPacketsToSIGModels+0x1dc>
 801bf8c:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
 801bf90:	2300      	movs	r3, #0
 801bf92:	e7f3      	b.n	801bf7c <MobleApplicationPassPacketsToSIGModels+0x1c4>
 801bf94:	2700      	movs	r7, #0
 801bf96:	b2fa      	uxtb	r2, r7
 801bf98:	fb0a 6202 	mla	r2, sl, r2, r6
 801bf9c:	2300      	movs	r3, #0
 801bf9e:	f8d2 2124 	ldr.w	r2, [r2, #292]	; 0x124
 801bfa2:	4659      	mov	r1, fp
 801bfa4:	4628      	mov	r0, r5
 801bfa6:	47c0      	blx	r8
 801bfa8:	2802      	cmp	r0, #2
 801bfaa:	d1ea      	bne.n	801bf82 <MobleApplicationPassPacketsToSIGModels+0x1ca>
 801bfac:	f896 238c 	ldrb.w	r2, [r6, #908]	; 0x38c
 801bfb0:	3701      	adds	r7, #1
 801bfb2:	b2fb      	uxtb	r3, r7
 801bfb4:	429a      	cmp	r2, r3
 801bfb6:	d8ee      	bhi.n	801bf96 <MobleApplicationPassPacketsToSIGModels+0x1de>
 801bfb8:	3401      	adds	r4, #1
 801bfba:	2c03      	cmp	r4, #3
 801bfbc:	d1d7      	bne.n	801bf6e <MobleApplicationPassPacketsToSIGModels+0x1b6>
 801bfbe:	e740      	b.n	801be42 <MobleApplicationPassPacketsToSIGModels+0x8a>
 801bfc0:	200003d0 	.word	0x200003d0
 801bfc4:	08031618 	.word	0x08031618
 801bfc8:	20000324 	.word	0x20000324
 801bfcc:	0803160c 	.word	0x0803160c

0801bfd0 <MobleApplicationPassPacketsToVENDORModelsNew>:
 801bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd4:	6803      	ldr	r3, [r0, #0]
 801bfd6:	f891 900c 	ldrb.w	r9, [r1, #12]
 801bfda:	7f1b      	ldrb	r3, [r3, #28]
 801bfdc:	4f56      	ldr	r7, [pc, #344]	; (801c138 <MobleApplicationPassPacketsToVENDORModelsNew+0x168>)
 801bfde:	b087      	sub	sp, #28
 801bfe0:	4605      	mov	r5, r0
 801bfe2:	9300      	str	r3, [sp, #0]
 801bfe4:	89cb      	ldrh	r3, [r1, #14]
 801bfe6:	9301      	str	r3, [sp, #4]
 801bfe8:	f109 03a6 	add.w	r3, r9, #166	; 0xa6
 801bfec:	468a      	mov	sl, r1
 801bfee:	2600      	movs	r6, #0
 801bff0:	9302      	str	r3, [sp, #8]
 801bff2:	f8ba 200a 	ldrh.w	r2, [sl, #10]
 801bff6:	8838      	ldrh	r0, [r7, #0]
 801bff8:	4290      	cmp	r0, r2
 801bffa:	b2f3      	uxtb	r3, r6
 801bffc:	d13d      	bne.n	801c07a <MobleApplicationPassPacketsToVENDORModelsNew+0xaa>
 801bffe:	463c      	mov	r4, r7
 801c000:	f04f 0801 	mov.w	r8, #1
 801c004:	9a02      	ldr	r2, [sp, #8]
 801c006:	5ca2      	ldrb	r2, [r4, r2]
 801c008:	b19a      	cbz	r2, 801c032 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801c00a:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801c00e:	9901      	ldr	r1, [sp, #4]
 801c010:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 801c014:	428a      	cmp	r2, r1
 801c016:	d10c      	bne.n	801c032 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801c018:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 801c01c:	2a01      	cmp	r2, #1
 801c01e:	d108      	bne.n	801c032 <MobleApplicationPassPacketsToVENDORModelsNew+0x62>
 801c020:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c022:	9303      	str	r3, [sp, #12]
 801c024:	4651      	mov	r1, sl
 801c026:	4628      	mov	r0, r5
 801c028:	f7ff f85d 	bl	801b0e6 <MobleModelBluemeshNewPacket_ExtCall>
 801c02c:	2801      	cmp	r0, #1
 801c02e:	9b03      	ldr	r3, [sp, #12]
 801c030:	d909      	bls.n	801c046 <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801c032:	f108 0801 	add.w	r8, r8, #1
 801c036:	fa5f f888 	uxtb.w	r8, r8
 801c03a:	f1b8 0f0c 	cmp.w	r8, #12
 801c03e:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801c042:	d1df      	bne.n	801c004 <MobleApplicationPassPacketsToVENDORModelsNew+0x34>
 801c044:	2002      	movs	r0, #2
 801c046:	f9ba 300a 	ldrsh.w	r3, [sl, #10]
 801c04a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801c04e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801c052:	d105      	bne.n	801c060 <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 801c054:	9b00      	ldr	r3, [sp, #0]
 801c056:	2b01      	cmp	r3, #1
 801c058:	d902      	bls.n	801c060 <MobleApplicationPassPacketsToVENDORModelsNew+0x90>
 801c05a:	3b01      	subs	r3, #1
 801c05c:	42b3      	cmp	r3, r6
 801c05e:	d101      	bne.n	801c064 <MobleApplicationPassPacketsToVENDORModelsNew+0x94>
 801c060:	2802      	cmp	r0, #2
 801c062:	d107      	bne.n	801c074 <MobleApplicationPassPacketsToVENDORModelsNew+0xa4>
 801c064:	9a00      	ldr	r2, [sp, #0]
 801c066:	3601      	adds	r6, #1
 801c068:	b2f3      	uxtb	r3, r6
 801c06a:	429a      	cmp	r2, r3
 801c06c:	f507 7739 	add.w	r7, r7, #740	; 0x2e4
 801c070:	d8bf      	bhi.n	801bff2 <MobleApplicationPassPacketsToVENDORModelsNew+0x22>
 801c072:	2002      	movs	r0, #2
 801c074:	b007      	add	sp, #28
 801c076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c07a:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 801c07e:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801c082:	d1df      	bne.n	801c044 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 801c084:	463c      	mov	r4, r7
 801c086:	f04f 0b00 	mov.w	fp, #0
 801c08a:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c08c:	b93a      	cbnz	r2, 801c09e <MobleApplicationPassPacketsToVENDORModelsNew+0xce>
 801c08e:	f10b 0b0e 	add.w	fp, fp, #14
 801c092:	f1bb 0f9a 	cmp.w	fp, #154	; 0x9a
 801c096:	f104 0438 	add.w	r4, r4, #56	; 0x38
 801c09a:	d1f6      	bne.n	801c08a <MobleApplicationPassPacketsToVENDORModelsNew+0xba>
 801c09c:	e7d2      	b.n	801c044 <MobleApplicationPassPacketsToVENDORModelsNew+0x74>
 801c09e:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 801c0a2:	f64f 71fb 	movw	r1, #65531	; 0xfffb
 801c0a6:	4288      	cmp	r0, r1
 801c0a8:	d917      	bls.n	801c0da <MobleApplicationPassPacketsToVENDORModelsNew+0x10a>
 801c0aa:	9902      	ldr	r1, [sp, #8]
 801c0ac:	5c60      	ldrb	r0, [r4, r1]
 801c0ae:	2800      	cmp	r0, #0
 801c0b0:	d0ed      	beq.n	801c08e <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c0b2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
 801c0b6:	9901      	ldr	r1, [sp, #4]
 801c0b8:	f830 0019 	ldrh.w	r0, [r0, r9, lsl #1]
 801c0bc:	4288      	cmp	r0, r1
 801c0be:	d1e6      	bne.n	801c08e <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c0c0:	f894 0099 	ldrb.w	r0, [r4, #153]	; 0x99
 801c0c4:	2801      	cmp	r0, #1
 801c0c6:	d1e2      	bne.n	801c08e <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c0c8:	4651      	mov	r1, sl
 801c0ca:	4628      	mov	r0, r5
 801c0cc:	9303      	str	r3, [sp, #12]
 801c0ce:	f7ff f80a 	bl	801b0e6 <MobleModelBluemeshNewPacket_ExtCall>
 801c0d2:	2801      	cmp	r0, #1
 801c0d4:	9b03      	ldr	r3, [sp, #12]
 801c0d6:	d8da      	bhi.n	801c08e <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c0d8:	e7b5      	b.n	801c046 <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801c0da:	f104 0280 	add.w	r2, r4, #128	; 0x80
 801c0de:	9203      	str	r2, [sp, #12]
 801c0e0:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
 801c0e4:	f04f 0801 	mov.w	r8, #1
 801c0e8:	9204      	str	r2, [sp, #16]
 801c0ea:	9903      	ldr	r1, [sp, #12]
 801c0ec:	f8ba 000a 	ldrh.w	r0, [sl, #10]
 801c0f0:	f831 2b02 	ldrh.w	r2, [r1], #2
 801c0f4:	9103      	str	r1, [sp, #12]
 801c0f6:	4290      	cmp	r0, r2
 801c0f8:	d115      	bne.n	801c126 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c0fa:	9a02      	ldr	r2, [sp, #8]
 801c0fc:	5ca2      	ldrb	r2, [r4, r2]
 801c0fe:	b192      	cbz	r2, 801c126 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c100:	9a04      	ldr	r2, [sp, #16]
 801c102:	9901      	ldr	r1, [sp, #4]
 801c104:	f832 2019 	ldrh.w	r2, [r2, r9, lsl #1]
 801c108:	428a      	cmp	r2, r1
 801c10a:	d10c      	bne.n	801c126 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c10c:	f894 2099 	ldrb.w	r2, [r4, #153]	; 0x99
 801c110:	2a01      	cmp	r2, #1
 801c112:	d108      	bne.n	801c126 <MobleApplicationPassPacketsToVENDORModelsNew+0x156>
 801c114:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 801c116:	9305      	str	r3, [sp, #20]
 801c118:	4651      	mov	r1, sl
 801c11a:	4628      	mov	r0, r5
 801c11c:	f7fe ffe3 	bl	801b0e6 <MobleModelBluemeshNewPacket_ExtCall>
 801c120:	2801      	cmp	r0, #1
 801c122:	9b05      	ldr	r3, [sp, #20]
 801c124:	d98f      	bls.n	801c046 <MobleApplicationPassPacketsToVENDORModelsNew+0x76>
 801c126:	f108 0801 	add.w	r8, r8, #1
 801c12a:	fa5f f888 	uxtb.w	r8, r8
 801c12e:	f1b8 0f0b 	cmp.w	r8, #11
 801c132:	d1da      	bne.n	801c0ea <MobleApplicationPassPacketsToVENDORModelsNew+0x11a>
 801c134:	e7ab      	b.n	801c08e <MobleApplicationPassPacketsToVENDORModelsNew+0xbe>
 801c136:	bf00      	nop
 801c138:	200003d0 	.word	0x200003d0

0801c13c <MobleApplicationProcess>:
 801c13c:	b570      	push	{r4, r5, r6, lr}
 801c13e:	4d0d      	ldr	r5, [pc, #52]	; (801c174 <MobleApplicationProcess+0x38>)
 801c140:	f8d5 1954 	ldr.w	r1, [r5, #2388]	; 0x954
 801c144:	4606      	mov	r6, r0
 801c146:	b199      	cbz	r1, 801c170 <MobleApplicationProcess+0x34>
 801c148:	f7ff fe36 	bl	801bdb8 <MobleApplicationPassPacketsToSIGModels>
 801c14c:	2801      	cmp	r0, #1
 801c14e:	4604      	mov	r4, r0
 801c150:	d905      	bls.n	801c15e <MobleApplicationProcess+0x22>
 801c152:	f8d5 1954 	ldr.w	r1, [r5, #2388]	; 0x954
 801c156:	4630      	mov	r0, r6
 801c158:	f7ff ff3a 	bl	801bfd0 <MobleApplicationPassPacketsToVENDORModelsNew>
 801c15c:	4604      	mov	r4, r0
 801c15e:	f8d5 0954 	ldr.w	r0, [r5, #2388]	; 0x954
 801c162:	f7fe ff27 	bl	801afb4 <MobleMemFree>
 801c166:	2300      	movs	r3, #0
 801c168:	f8c5 3954 	str.w	r3, [r5, #2388]	; 0x954
 801c16c:	4620      	mov	r0, r4
 801c16e:	bd70      	pop	{r4, r5, r6, pc}
 801c170:	2401      	movs	r4, #1
 801c172:	e7fb      	b.n	801c16c <MobleApplicationProcess+0x30>
 801c174:	2000141c 	.word	0x2000141c

0801c178 <MobleApplicationGetSigModelList>:
 801c178:	b538      	push	{r3, r4, r5, lr}
 801c17a:	460c      	mov	r4, r1
 801c17c:	b981      	cbnz	r1, 801c1a0 <MobleApplicationGetSigModelList+0x28>
 801c17e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801c182:	f840 3b04 	str.w	r3, [r0], #4
 801c186:	2502      	movs	r5, #2
 801c188:	4621      	mov	r1, r4
 801c18a:	f7f7 f90d 	bl	80133a8 <ApplicationGetSigModelList>
 801c18e:	4428      	add	r0, r5
 801c190:	b240      	sxtb	r0, r0
 801c192:	1e83      	subs	r3, r0, #2
 801c194:	2b0a      	cmp	r3, #10
 801c196:	d905      	bls.n	801c1a4 <MobleApplicationGetSigModelList+0x2c>
 801c198:	b95c      	cbnz	r4, 801c1b2 <MobleApplicationGetSigModelList+0x3a>
 801c19a:	f04f 30ff 	mov.w	r0, #4294967295
 801c19e:	e007      	b.n	801c1b0 <MobleApplicationGetSigModelList+0x38>
 801c1a0:	2500      	movs	r5, #0
 801c1a2:	e7f1      	b.n	801c188 <MobleApplicationGetSigModelList+0x10>
 801c1a4:	280a      	cmp	r0, #10
 801c1a6:	dd03      	ble.n	801c1b0 <MobleApplicationGetSigModelList+0x38>
 801c1a8:	2c00      	cmp	r4, #0
 801c1aa:	bf18      	it	ne
 801c1ac:	f04f 30ff 	movne.w	r0, #4294967295
 801c1b0:	bd38      	pop	{r3, r4, r5, pc}
 801c1b2:	280b      	cmp	r0, #11
 801c1b4:	bfa8      	it	ge
 801c1b6:	f04f 30ff 	movge.w	r0, #4294967295
 801c1ba:	e7f9      	b.n	801c1b0 <MobleApplicationGetSigModelList+0x38>

0801c1bc <MobleApplicationGetVendorModelList>:
 801c1bc:	b508      	push	{r3, lr}
 801c1be:	f7f7 f925 	bl	801340c <ApplicationGetVendorModelList>
 801c1c2:	b240      	sxtb	r0, r0
 801c1c4:	2802      	cmp	r0, #2
 801c1c6:	bfa8      	it	ge
 801c1c8:	f04f 30ff 	movge.w	r0, #4294967295
 801c1cc:	bd08      	pop	{r3, pc}

0801c1ce <MobleApplicationModelSupported>:
 801c1ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c1d0:	f030 0302 	bics.w	r3, r0, #2
 801c1d4:	bf06      	itte	eq
 801c1d6:	fab1 f481 	clzeq	r4, r1
 801c1da:	0964      	lsreq	r4, r4, #5
 801c1dc:	2400      	movne	r4, #0
 801c1de:	4605      	mov	r5, r0
 801c1e0:	9101      	str	r1, [sp, #4]
 801c1e2:	f7f7 f97b 	bl	80134dc <ApplicationChkVendorModelActive>
 801c1e6:	9901      	ldr	r1, [sp, #4]
 801c1e8:	2800      	cmp	r0, #0
 801c1ea:	b2a8      	uxth	r0, r5
 801c1ec:	bf18      	it	ne
 801c1ee:	2401      	movne	r4, #1
 801c1f0:	f7f7 f938 	bl	8013464 <ApplicationChkSigModelActive>
 801c1f4:	2800      	cmp	r0, #0
 801c1f6:	bf0c      	ite	eq
 801c1f8:	4620      	moveq	r0, r4
 801c1fa:	2001      	movne	r0, #1
 801c1fc:	b003      	add	sp, #12
 801c1fe:	bd30      	pop	{r4, r5, pc}

0801c200 <MobleApplicationUpdateSigModelList>:
 801c200:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c202:	4c1c      	ldr	r4, [pc, #112]	; (801c274 <MobleApplicationUpdateSigModelList+0x74>)
 801c204:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801c208:	bb03      	cbnz	r3, 801c24c <MobleApplicationUpdateSigModelList+0x4c>
 801c20a:	f8a4 10ac 	strh.w	r1, [r4, #172]	; 0xac
 801c20e:	8801      	ldrh	r1, [r0, #0]
 801c210:	f8c4 10b0 	str.w	r1, [r4, #176]	; 0xb0
 801c214:	1e95      	subs	r5, r2, #2
 801c216:	8841      	ldrh	r1, [r0, #2]
 801c218:	f8c4 10f0 	str.w	r1, [r4, #240]	; 0xf0
 801c21c:	b2ed      	uxtb	r5, r5
 801c21e:	3004      	adds	r0, #4
 801c220:	4915      	ldr	r1, [pc, #84]	; (801c278 <MobleApplicationUpdateSigModelList+0x78>)
 801c222:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801c226:	fb06 1103 	mla	r1, r6, r3, r1
 801c22a:	f04f 0c01 	mov.w	ip, #1
 801c22e:	2600      	movs	r6, #0
 801c230:	b2f7      	uxtb	r7, r6
 801c232:	42bd      	cmp	r5, r7
 801c234:	d90e      	bls.n	801c254 <MobleApplicationUpdateSigModelList+0x54>
 801c236:	f891 7099 	ldrb.w	r7, [r1, #153]	; 0x99
 801c23a:	b927      	cbnz	r7, 801c246 <MobleApplicationUpdateSigModelList+0x46>
 801c23c:	f830 7b02 	ldrh.w	r7, [r0], #2
 801c240:	678f      	str	r7, [r1, #120]	; 0x78
 801c242:	f881 c09a 	strb.w	ip, [r1, #154]	; 0x9a
 801c246:	3601      	adds	r6, #1
 801c248:	3138      	adds	r1, #56	; 0x38
 801c24a:	e7f1      	b.n	801c230 <MobleApplicationUpdateSigModelList+0x30>
 801c24c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c250:	42ab      	cmp	r3, r5
 801c252:	d306      	bcc.n	801c262 <MobleApplicationUpdateSigModelList+0x62>
 801c254:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 801c258:	fb01 4303 	mla	r3, r1, r3, r4
 801c25c:	f883 238c 	strb.w	r2, [r3, #908]	; 0x38c
 801c260:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c262:	f44f 7539 	mov.w	r5, #740	; 0x2e4
 801c266:	fb05 4503 	mla	r5, r5, r3, r4
 801c26a:	4419      	add	r1, r3
 801c26c:	f8a5 10ac 	strh.w	r1, [r5, #172]	; 0xac
 801c270:	4615      	mov	r5, r2
 801c272:	e7d5      	b.n	801c220 <MobleApplicationUpdateSigModelList+0x20>
 801c274:	20000324 	.word	0x20000324
 801c278:	200003d0 	.word	0x200003d0

0801c27c <MobleApplicationUpdateVendorModelList>:
 801c27c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c27e:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c282:	b9b3      	cbnz	r3, 801c2b2 <MobleApplicationUpdateVendorModelList+0x36>
 801c284:	3902      	subs	r1, #2
 801c286:	4d16      	ldr	r5, [pc, #88]	; (801c2e0 <MobleApplicationUpdateVendorModelList+0x64>)
 801c288:	b2c9      	uxtb	r1, r1
 801c28a:	f8a5 40ac 	strh.w	r4, [r5, #172]	; 0xac
 801c28e:	4c15      	ldr	r4, [pc, #84]	; (801c2e4 <MobleApplicationUpdateVendorModelList+0x68>)
 801c290:	f44f 7539 	mov.w	r5, #740	; 0x2e4
 801c294:	fb05 4403 	mla	r4, r5, r3, r4
 801c298:	2701      	movs	r7, #1
 801c29a:	2500      	movs	r5, #0
 801c29c:	b2ee      	uxtb	r6, r5
 801c29e:	42b1      	cmp	r1, r6
 801c2a0:	d812      	bhi.n	801c2c8 <MobleApplicationUpdateVendorModelList+0x4c>
 801c2a2:	490f      	ldr	r1, [pc, #60]	; (801c2e0 <MobleApplicationUpdateVendorModelList+0x64>)
 801c2a4:	f44f 7039 	mov.w	r0, #740	; 0x2e4
 801c2a8:	fb00 1303 	mla	r3, r0, r3, r1
 801c2ac:	f883 238d 	strb.w	r2, [r3, #909]	; 0x38d
 801c2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2b2:	f89d 5018 	ldrb.w	r5, [sp, #24]
 801c2b6:	42ab      	cmp	r3, r5
 801c2b8:	d2e9      	bcs.n	801c28e <MobleApplicationUpdateVendorModelList+0x12>
 801c2ba:	4d09      	ldr	r5, [pc, #36]	; (801c2e0 <MobleApplicationUpdateVendorModelList+0x64>)
 801c2bc:	f44f 7639 	mov.w	r6, #740	; 0x2e4
 801c2c0:	fb06 5503 	mla	r5, r6, r3, r5
 801c2c4:	441c      	add	r4, r3
 801c2c6:	e7e0      	b.n	801c28a <MobleApplicationUpdateVendorModelList+0xe>
 801c2c8:	f894 609a 	ldrb.w	r6, [r4, #154]	; 0x9a
 801c2cc:	b926      	cbnz	r6, 801c2d8 <MobleApplicationUpdateVendorModelList+0x5c>
 801c2ce:	f850 6b04 	ldr.w	r6, [r0], #4
 801c2d2:	67a6      	str	r6, [r4, #120]	; 0x78
 801c2d4:	f884 7099 	strb.w	r7, [r4, #153]	; 0x99
 801c2d8:	3501      	adds	r5, #1
 801c2da:	3438      	adds	r4, #56	; 0x38
 801c2dc:	e7de      	b.n	801c29c <MobleApplicationUpdateVendorModelList+0x20>
 801c2de:	bf00      	nop
 801c2e0:	20000324 	.word	0x20000324
 801c2e4:	200003d0 	.word	0x200003d0

0801c2e8 <MobleTransportIsBusy>:
 801c2e8:	b508      	push	{r3, lr}
 801c2ea:	b930      	cbnz	r0, 801c2fa <MobleTransportIsBusy+0x12>
 801c2ec:	4b05      	ldr	r3, [pc, #20]	; (801c304 <MobleTransportIsBusy+0x1c>)
 801c2ee:	4a06      	ldr	r2, [pc, #24]	; (801c308 <MobleTransportIsBusy+0x20>)
 801c2f0:	4806      	ldr	r0, [pc, #24]	; (801c30c <MobleTransportIsBusy+0x24>)
 801c2f2:	f240 4152 	movw	r1, #1106	; 0x452
 801c2f6:	f00c fbe7 	bl	8028ac8 <__assert_func>
 801c2fa:	6880      	ldr	r0, [r0, #8]
 801c2fc:	3800      	subs	r0, #0
 801c2fe:	bf18      	it	ne
 801c300:	2001      	movne	r0, #1
 801c302:	bd08      	pop	{r3, pc}
 801c304:	08033338 	.word	0x08033338
 801c308:	08031618 	.word	0x08031618
 801c30c:	08033678 	.word	0x08033678

0801c310 <MobleTransSarInit>:
 801c310:	b510      	push	{r4, lr}
 801c312:	4c1c      	ldr	r4, [pc, #112]	; (801c384 <MobleTransSarInit+0x74>)
 801c314:	f8d4 12e0 	ldr.w	r1, [r4, #736]	; 0x2e0
 801c318:	b319      	cbz	r1, 801c362 <MobleTransSarInit+0x52>
 801c31a:	f8d4 32e4 	ldr.w	r3, [r4, #740]	; 0x2e4
 801c31e:	b943      	cbnz	r3, 801c332 <MobleTransSarInit+0x22>
 801c320:	f894 02dc 	ldrb.w	r0, [r4, #732]	; 0x2dc
 801c324:	232c      	movs	r3, #44	; 0x2c
 801c326:	4358      	muls	r0, r3
 801c328:	f7fe fdba 	bl	801aea0 <MobleMemAlloc>
 801c32c:	f8c4 02e4 	str.w	r0, [r4, #740]	; 0x2e4
 801c330:	b330      	cbz	r0, 801c380 <MobleTransSarInit+0x70>
 801c332:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
 801c336:	b933      	cbnz	r3, 801c346 <MobleTransSarInit+0x36>
 801c338:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	; 0x94c
 801c33c:	f7fe fdb0 	bl	801aea0 <MobleMemAlloc>
 801c340:	f8c4 0300 	str.w	r0, [r4, #768]	; 0x300
 801c344:	b1e0      	cbz	r0, 801c380 <MobleTransSarInit+0x70>
 801c346:	f8d4 332c 	ldr.w	r3, [r4, #812]	; 0x32c
 801c34a:	b933      	cbnz	r3, 801c35a <MobleTransSarInit+0x4a>
 801c34c:	f8b4 094c 	ldrh.w	r0, [r4, #2380]	; 0x94c
 801c350:	f7fe fda6 	bl	801aea0 <MobleMemAlloc>
 801c354:	f8c4 032c 	str.w	r0, [r4, #812]	; 0x32c
 801c358:	b190      	cbz	r0, 801c380 <MobleTransSarInit+0x70>
 801c35a:	2000      	movs	r0, #0
 801c35c:	f8c4 0958 	str.w	r0, [r4, #2392]	; 0x958
 801c360:	e00f      	b.n	801c382 <MobleTransSarInit+0x72>
 801c362:	2260      	movs	r2, #96	; 0x60
 801c364:	f504 7038 	add.w	r0, r4, #736	; 0x2e0
 801c368:	f00d faa4 	bl	80298b4 <memset>
 801c36c:	f894 02dc 	ldrb.w	r0, [r4, #732]	; 0x2dc
 801c370:	232c      	movs	r3, #44	; 0x2c
 801c372:	4358      	muls	r0, r3
 801c374:	f7fe fd94 	bl	801aea0 <MobleMemAlloc>
 801c378:	f8c4 02e0 	str.w	r0, [r4, #736]	; 0x2e0
 801c37c:	2800      	cmp	r0, #0
 801c37e:	d1cc      	bne.n	801c31a <MobleTransSarInit+0xa>
 801c380:	2002      	movs	r0, #2
 801c382:	bd10      	pop	{r4, pc}
 801c384:	2000141c 	.word	0x2000141c

0801c388 <MobleTransportParseHdr>:
 801c388:	b530      	push	{r4, r5, lr}
 801c38a:	6803      	ldr	r3, [r0, #0]
 801c38c:	7889      	ldrb	r1, [r1, #2]
 801c38e:	ba1b      	rev	r3, r3
 801c390:	0fdc      	lsrs	r4, r3, #31
 801c392:	bb01      	cbnz	r1, 801c3d6 <MobleTransportParseHdr+0x4e>
 801c394:	0f99      	lsrs	r1, r3, #30
 801c396:	b93c      	cbnz	r4, 801c3a8 <MobleTransportParseHdr+0x20>
 801c398:	7014      	strb	r4, [r2, #0]
 801c39a:	7054      	strb	r4, [r2, #1]
 801c39c:	7091      	strb	r1, [r2, #2]
 801c39e:	7803      	ldrb	r3, [r0, #0]
 801c3a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801c3a4:	70d3      	strb	r3, [r2, #3]
 801c3a6:	bd30      	pop	{r4, r5, pc}
 801c3a8:	2401      	movs	r4, #1
 801c3aa:	4021      	ands	r1, r4
 801c3ac:	7014      	strb	r4, [r2, #0]
 801c3ae:	7054      	strb	r4, [r2, #1]
 801c3b0:	7091      	strb	r1, [r2, #2]
 801c3b2:	7801      	ldrb	r1, [r0, #0]
 801c3b4:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 801c3b8:	70d1      	strb	r1, [r2, #3]
 801c3ba:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 801c3be:	7111      	strb	r1, [r2, #4]
 801c3c0:	f3c3 218c 	ubfx	r1, r3, #10, #13
 801c3c4:	f8a2 1005 	strh.w	r1, [r2, #5]
 801c3c8:	f3c3 1144 	ubfx	r1, r3, #5, #5
 801c3cc:	f003 031f 	and.w	r3, r3, #31
 801c3d0:	71d1      	strb	r1, [r2, #7]
 801c3d2:	7213      	strb	r3, [r2, #8]
 801c3d4:	e7e7      	b.n	801c3a6 <MobleTransportParseHdr+0x1e>
 801c3d6:	7801      	ldrb	r1, [r0, #0]
 801c3d8:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 801c3dc:	b974      	cbnz	r4, 801c3fc <MobleTransportParseHdr+0x74>
 801c3de:	b94d      	cbnz	r5, 801c3f4 <MobleTransportParseHdr+0x6c>
 801c3e0:	f3c3 51c0 	ubfx	r1, r3, #23, #1
 801c3e4:	2002      	movs	r0, #2
 801c3e6:	f3c3 238c 	ubfx	r3, r3, #10, #13
 801c3ea:	7010      	strb	r0, [r2, #0]
 801c3ec:	7055      	strb	r5, [r2, #1]
 801c3ee:	70d1      	strb	r1, [r2, #3]
 801c3f0:	8093      	strh	r3, [r2, #4]
 801c3f2:	e7d8      	b.n	801c3a6 <MobleTransportParseHdr+0x1e>
 801c3f4:	2303      	movs	r3, #3
 801c3f6:	7013      	strb	r3, [r2, #0]
 801c3f8:	7055      	strb	r5, [r2, #1]
 801c3fa:	e7d4      	b.n	801c3a6 <MobleTransportParseHdr+0x1e>
 801c3fc:	2401      	movs	r4, #1
 801c3fe:	7014      	strb	r4, [r2, #0]
 801c400:	7054      	strb	r4, [r2, #1]
 801c402:	f3c3 7480 	ubfx	r4, r3, #30, #1
 801c406:	7094      	strb	r4, [r2, #2]
 801c408:	7800      	ldrb	r0, [r0, #0]
 801c40a:	7255      	strb	r5, [r2, #9]
 801c40c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801c410:	70d0      	strb	r0, [r2, #3]
 801c412:	f3c3 50c0 	ubfx	r0, r3, #23, #1
 801c416:	7110      	strb	r0, [r2, #4]
 801c418:	e7d2      	b.n	801c3c0 <MobleTransportParseHdr+0x38>
	...

0801c41c <MobleTransportRenderHdr>:
 801c41c:	b538      	push	{r3, r4, r5, lr}
 801c41e:	7803      	ldrb	r3, [r0, #0]
 801c420:	2b04      	cmp	r3, #4
 801c422:	d906      	bls.n	801c432 <MobleTransportRenderHdr+0x16>
 801c424:	4b37      	ldr	r3, [pc, #220]	; (801c504 <MobleTransportRenderHdr+0xe8>)
 801c426:	4a38      	ldr	r2, [pc, #224]	; (801c508 <MobleTransportRenderHdr+0xec>)
 801c428:	4838      	ldr	r0, [pc, #224]	; (801c50c <MobleTransportRenderHdr+0xf0>)
 801c42a:	f240 1121 	movw	r1, #289	; 0x121
 801c42e:	f00c fb4b 	bl	8028ac8 <__assert_func>
 801c432:	3b01      	subs	r3, #1
 801c434:	2b03      	cmp	r3, #3
 801c436:	d803      	bhi.n	801c440 <MobleTransportRenderHdr+0x24>
 801c438:	e8df f003 	tbb	[pc, r3]
 801c43c:	46443411 	.word	0x46443411
 801c440:	7883      	ldrb	r3, [r0, #2]
 801c442:	b153      	cbz	r3, 801c45a <MobleTransportRenderHdr+0x3e>
 801c444:	78c2      	ldrb	r2, [r0, #3]
 801c446:	7840      	ldrb	r0, [r0, #1]
 801c448:	079b      	lsls	r3, r3, #30
 801c44a:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801c44e:	0692      	lsls	r2, r2, #26
 801c450:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801c454:	0e1b      	lsrs	r3, r3, #24
 801c456:	700b      	strb	r3, [r1, #0]
 801c458:	e021      	b.n	801c49e <MobleTransportRenderHdr+0x82>
 801c45a:	461a      	mov	r2, r3
 801c45c:	e7f3      	b.n	801c446 <MobleTransportRenderHdr+0x2a>
 801c45e:	7883      	ldrb	r3, [r0, #2]
 801c460:	b1f3      	cbz	r3, 801c4a0 <MobleTransportRenderHdr+0x84>
 801c462:	78c2      	ldrb	r2, [r0, #3]
 801c464:	7904      	ldrb	r4, [r0, #4]
 801c466:	079b      	lsls	r3, r3, #30
 801c468:	0692      	lsls	r2, r2, #26
 801c46a:	ea43 53c4 	orr.w	r3, r3, r4, lsl #23
 801c46e:	ea43 0392 	orr.w	r3, r3, r2, lsr #2
 801c472:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 801c476:	04d2      	lsls	r2, r2, #19
 801c478:	ea43 2352 	orr.w	r3, r3, r2, lsr #9
 801c47c:	79c2      	ldrb	r2, [r0, #7]
 801c47e:	06d2      	lsls	r2, r2, #27
 801c480:	ea43 5392 	orr.w	r3, r3, r2, lsr #22
 801c484:	7a02      	ldrb	r2, [r0, #8]
 801c486:	f002 021f 	and.w	r2, r2, #31
 801c48a:	4313      	orrs	r3, r2
 801c48c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801c490:	0e1a      	lsrs	r2, r3, #24
 801c492:	700a      	strb	r2, [r1, #0]
 801c494:	0c1a      	lsrs	r2, r3, #16
 801c496:	704a      	strb	r2, [r1, #1]
 801c498:	0a1a      	lsrs	r2, r3, #8
 801c49a:	708a      	strb	r2, [r1, #2]
 801c49c:	70cb      	strb	r3, [r1, #3]
 801c49e:	bd38      	pop	{r3, r4, r5, pc}
 801c4a0:	461a      	mov	r2, r3
 801c4a2:	e7df      	b.n	801c464 <MobleTransportRenderHdr+0x48>
 801c4a4:	78c2      	ldrb	r2, [r0, #3]
 801c4a6:	7843      	ldrb	r3, [r0, #1]
 801c4a8:	05d2      	lsls	r2, r2, #23
 801c4aa:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 801c4ae:	8883      	ldrh	r3, [r0, #4]
 801c4b0:	04db      	lsls	r3, r3, #19
 801c4b2:	ea42 2353 	orr.w	r3, r2, r3, lsr #9
 801c4b6:	0e12      	lsrs	r2, r2, #24
 801c4b8:	700a      	strb	r2, [r1, #0]
 801c4ba:	0c1a      	lsrs	r2, r3, #16
 801c4bc:	0a1b      	lsrs	r3, r3, #8
 801c4be:	704a      	strb	r2, [r1, #1]
 801c4c0:	708b      	strb	r3, [r1, #2]
 801c4c2:	e7ec      	b.n	801c49e <MobleTransportRenderHdr+0x82>
 801c4c4:	7843      	ldrb	r3, [r0, #1]
 801c4c6:	e7c6      	b.n	801c456 <MobleTransportRenderHdr+0x3a>
 801c4c8:	78c4      	ldrb	r4, [r0, #3]
 801c4ca:	7885      	ldrb	r5, [r0, #2]
 801c4cc:	7842      	ldrb	r2, [r0, #1]
 801c4ce:	7900      	ldrb	r0, [r0, #4]
 801c4d0:	f004 033f 	and.w	r3, r4, #63	; 0x3f
 801c4d4:	01db      	lsls	r3, r3, #7
 801c4d6:	ea43 0355 	orr.w	r3, r3, r5, lsr #1
 801c4da:	029b      	lsls	r3, r3, #10
 801c4dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 801c4e0:	f000 0207 	and.w	r2, r0, #7
 801c4e4:	0092      	lsls	r2, r2, #2
 801c4e6:	ea42 1294 	orr.w	r2, r2, r4, lsr #6
 801c4ea:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 801c4ee:	0e1a      	lsrs	r2, r3, #24
 801c4f0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 801c4f4:	700a      	strb	r2, [r1, #0]
 801c4f6:	0c1a      	lsrs	r2, r3, #16
 801c4f8:	0a1b      	lsrs	r3, r3, #8
 801c4fa:	704a      	strb	r2, [r1, #1]
 801c4fc:	708b      	strb	r3, [r1, #2]
 801c4fe:	70c8      	strb	r0, [r1, #3]
 801c500:	e7cd      	b.n	801c49e <MobleTransportRenderHdr+0x82>
 801c502:	bf00      	nop
 801c504:	080336c6 	.word	0x080336c6
 801c508:	0803162d 	.word	0x0803162d
 801c50c:	080337c8 	.word	0x080337c8

0801c510 <MobleNetworkReplayCacheClear>:
 801c510:	b570      	push	{r4, r5, r6, lr}
 801c512:	b928      	cbnz	r0, 801c520 <MobleNetworkReplayCacheClear+0x10>
 801c514:	4b14      	ldr	r3, [pc, #80]	; (801c568 <MobleNetworkReplayCacheClear+0x58>)
 801c516:	4a15      	ldr	r2, [pc, #84]	; (801c56c <MobleNetworkReplayCacheClear+0x5c>)
 801c518:	4815      	ldr	r0, [pc, #84]	; (801c570 <MobleNetworkReplayCacheClear+0x60>)
 801c51a:	2122      	movs	r1, #34	; 0x22
 801c51c:	f00c fad4 	bl	8028ac8 <__assert_func>
 801c520:	23a0      	movs	r3, #160	; 0xa0
 801c522:	f001 0101 	and.w	r1, r1, #1
 801c526:	fb03 0101 	mla	r1, r3, r1, r0
 801c52a:	2300      	movs	r3, #0
 801c52c:	75cb      	strb	r3, [r1, #23]
 801c52e:	77cb      	strb	r3, [r1, #31]
 801c530:	f881 3027 	strb.w	r3, [r1, #39]	; 0x27
 801c534:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
 801c538:	f881 3037 	strb.w	r3, [r1, #55]	; 0x37
 801c53c:	f890 61d0 	ldrb.w	r6, [r0, #464]	; 0x1d0
 801c540:	2505      	movs	r5, #5
 801c542:	461c      	mov	r4, r3
 801c544:	18f2      	adds	r2, r6, r3
 801c546:	fbb2 f1f5 	udiv	r1, r2, r5
 801c54a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801c54e:	1a52      	subs	r2, r2, r1
 801c550:	eb00 1202 	add.w	r2, r0, r2, lsl #4
 801c554:	3301      	adds	r3, #1
 801c556:	2b05      	cmp	r3, #5
 801c558:	f8a2 4180 	strh.w	r4, [r2, #384]	; 0x180
 801c55c:	f8c2 4184 	str.w	r4, [r2, #388]	; 0x184
 801c560:	f882 418d 	strb.w	r4, [r2, #397]	; 0x18d
 801c564:	d1ee      	bne.n	801c544 <MobleNetworkReplayCacheClear+0x34>
 801c566:	bd70      	pop	{r4, r5, r6, pc}
 801c568:	08033338 	.word	0x08033338
 801c56c:	08031645 	.word	0x08031645
 801c570:	08033816 	.word	0x08033816

0801c574 <MobleNetworkReplayCacheClearAll>:
 801c574:	b510      	push	{r4, lr}
 801c576:	2100      	movs	r1, #0
 801c578:	4604      	mov	r4, r0
 801c57a:	f7ff ffc9 	bl	801c510 <MobleNetworkReplayCacheClear>
 801c57e:	4620      	mov	r0, r4
 801c580:	2101      	movs	r1, #1
 801c582:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c586:	f7ff bfc3 	b.w	801c510 <MobleNetworkReplayCacheClear>

0801c58a <Test_UpperTester_Set07>:
 801c58a:	b508      	push	{r3, lr}
 801c58c:	f7ff fff2 	bl	801c574 <MobleNetworkReplayCacheClearAll>
 801c590:	f7ff febe 	bl	801c310 <MobleTransSarInit>
 801c594:	2000      	movs	r0, #0
 801c596:	bd08      	pop	{r3, pc}

0801c598 <BnrgmTransControlProcessHeartbeat>:
 801c598:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c59c:	2b03      	cmp	r3, #3
 801c59e:	b087      	sub	sp, #28
 801c5a0:	4605      	mov	r5, r0
 801c5a2:	d004      	beq.n	801c5ae <BnrgmTransControlProcessHeartbeat+0x16>
 801c5a4:	2402      	movs	r4, #2
 801c5a6:	4620      	mov	r0, r4
 801c5a8:	b007      	add	sp, #28
 801c5aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c5ae:	4610      	mov	r0, r2
 801c5b0:	78cb      	ldrb	r3, [r1, #3]
 801c5b2:	890e      	ldrh	r6, [r1, #8]
 801c5b4:	894f      	ldrh	r7, [r1, #10]
 801c5b6:	f810 8b01 	ldrb.w	r8, [r0], #1
 801c5ba:	9303      	str	r3, [sp, #12]
 801c5bc:	aa05      	add	r2, sp, #20
 801c5be:	2102      	movs	r1, #2
 801c5c0:	f7fe fe04 	bl	801b1cc <MobleInputStreamGetBigEndian>
 801c5c4:	4a10      	ldr	r2, [pc, #64]	; (801c608 <BnrgmTransControlProcessHeartbeat+0x70>)
 801c5c6:	f89d 9014 	ldrb.w	r9, [sp, #20]
 801c5ca:	f8d2 495c 	ldr.w	r4, [r2, #2396]	; 0x95c
 801c5ce:	f008 087f 	and.w	r8, r8, #127	; 0x7f
 801c5d2:	2c00      	cmp	r4, #0
 801c5d4:	d0e6      	beq.n	801c5a4 <BnrgmTransControlProcessHeartbeat+0xc>
 801c5d6:	fa1f f989 	uxth.w	r9, r9
 801c5da:	9b03      	ldr	r3, [sp, #12]
 801c5dc:	f8cd 9000 	str.w	r9, [sp]
 801c5e0:	4642      	mov	r2, r8
 801c5e2:	4639      	mov	r1, r7
 801c5e4:	4630      	mov	r0, r6
 801c5e6:	47a0      	blx	r4
 801c5e8:	4604      	mov	r4, r0
 801c5ea:	2800      	cmp	r0, #0
 801c5ec:	d1da      	bne.n	801c5a4 <BnrgmTransControlProcessHeartbeat+0xc>
 801c5ee:	f8d5 51f0 	ldr.w	r5, [r5, #496]	; 0x1f0
 801c5f2:	2d00      	cmp	r5, #0
 801c5f4:	d0d7      	beq.n	801c5a6 <BnrgmTransControlProcessHeartbeat+0xe>
 801c5f6:	9b03      	ldr	r3, [sp, #12]
 801c5f8:	f8cd 9000 	str.w	r9, [sp]
 801c5fc:	4642      	mov	r2, r8
 801c5fe:	4639      	mov	r1, r7
 801c600:	4630      	mov	r0, r6
 801c602:	47a8      	blx	r5
 801c604:	e7cf      	b.n	801c5a6 <BnrgmTransControlProcessHeartbeat+0xe>
 801c606:	bf00      	nop
 801c608:	2000141c 	.word	0x2000141c

0801c60c <MobleAddressAllocatePeerEntry>:
 801c60c:	b510      	push	{r4, lr}
 801c60e:	b140      	cbz	r0, 801c622 <MobleAddressAllocatePeerEntry+0x16>
 801c610:	b181      	cbz	r1, 801c634 <MobleAddressAllocatePeerEntry+0x28>
 801c612:	2300      	movs	r3, #0
 801c614:	79c4      	ldrb	r4, [r0, #7]
 801c616:	b92c      	cbnz	r4, 801c624 <MobleAddressAllocatePeerEntry+0x18>
 801c618:	f240 137f 	movw	r3, #383	; 0x17f
 801c61c:	8082      	strh	r2, [r0, #4]
 801c61e:	6004      	str	r4, [r0, #0]
 801c620:	80c3      	strh	r3, [r0, #6]
 801c622:	bd10      	pop	{r4, pc}
 801c624:	3301      	adds	r3, #1
 801c626:	b2dc      	uxtb	r4, r3
 801c628:	42a1      	cmp	r1, r4
 801c62a:	f100 0008 	add.w	r0, r0, #8
 801c62e:	d8f1      	bhi.n	801c614 <MobleAddressAllocatePeerEntry+0x8>
 801c630:	2000      	movs	r0, #0
 801c632:	e7f6      	b.n	801c622 <MobleAddressAllocatePeerEntry+0x16>
 801c634:	4608      	mov	r0, r1
 801c636:	e7f4      	b.n	801c622 <MobleAddressAllocatePeerEntry+0x16>

0801c638 <MobleAddressFindPeerEntry>:
 801c638:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c63a:	b908      	cbnz	r0, 801c640 <MobleAddressFindPeerEntry+0x8>
 801c63c:	2000      	movs	r0, #0
 801c63e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c640:	2900      	cmp	r1, #0
 801c642:	d0fb      	beq.n	801c63c <MobleAddressFindPeerEntry+0x4>
 801c644:	4604      	mov	r4, r0
 801c646:	460b      	mov	r3, r1
 801c648:	2500      	movs	r5, #0
 801c64a:	79e6      	ldrb	r6, [r4, #7]
 801c64c:	b2ef      	uxtb	r7, r5
 801c64e:	b13e      	cbz	r6, 801c660 <MobleAddressFindPeerEntry+0x28>
 801c650:	79a6      	ldrb	r6, [r4, #6]
 801c652:	b10e      	cbz	r6, 801c658 <MobleAddressFindPeerEntry+0x20>
 801c654:	3e01      	subs	r6, #1
 801c656:	71a6      	strb	r6, [r4, #6]
 801c658:	88a6      	ldrh	r6, [r4, #4]
 801c65a:	4296      	cmp	r6, r2
 801c65c:	bf08      	it	eq
 801c65e:	463b      	moveq	r3, r7
 801c660:	3501      	adds	r5, #1
 801c662:	b2ee      	uxtb	r6, r5
 801c664:	42b1      	cmp	r1, r6
 801c666:	f104 0408 	add.w	r4, r4, #8
 801c66a:	d8ee      	bhi.n	801c64a <MobleAddressFindPeerEntry+0x12>
 801c66c:	4299      	cmp	r1, r3
 801c66e:	d0e5      	beq.n	801c63c <MobleAddressFindPeerEntry+0x4>
 801c670:	b21b      	sxth	r3, r3
 801c672:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 801c676:	e7e2      	b.n	801c63e <MobleAddressFindPeerEntry+0x6>

0801c678 <MobleAddressIsNew>:
 801c678:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c67a:	461d      	mov	r5, r3
 801c67c:	4b0f      	ldr	r3, [pc, #60]	; (801c6bc <MobleAddressIsNew+0x44>)
 801c67e:	685b      	ldr	r3, [r3, #4]
 801c680:	6a1b      	ldr	r3, [r3, #32]
 801c682:	e9cd 2100 	strd	r2, r1, [sp]
 801c686:	4606      	mov	r6, r0
 801c688:	4798      	blx	r3
 801c68a:	4604      	mov	r4, r0
 801c68c:	b9a0      	cbnz	r0, 801c6b8 <MobleAddressIsNew+0x40>
 801c68e:	e9dd 2100 	ldrd	r2, r1, [sp]
 801c692:	4630      	mov	r0, r6
 801c694:	f7ff ffd0 	bl	801c638 <MobleAddressFindPeerEntry>
 801c698:	b938      	cbnz	r0, 801c6aa <MobleAddressIsNew+0x32>
 801c69a:	4630      	mov	r0, r6
 801c69c:	f7ff ffb6 	bl	801c60c <MobleAddressAllocatePeerEntry>
 801c6a0:	b930      	cbnz	r0, 801c6b0 <MobleAddressIsNew+0x38>
 801c6a2:	2401      	movs	r4, #1
 801c6a4:	4620      	mov	r0, r4
 801c6a6:	b002      	add	sp, #8
 801c6a8:	bd70      	pop	{r4, r5, r6, pc}
 801c6aa:	6803      	ldr	r3, [r0, #0]
 801c6ac:	429d      	cmp	r5, r3
 801c6ae:	d9f8      	bls.n	801c6a2 <MobleAddressIsNew+0x2a>
 801c6b0:	f025 457f 	bic.w	r5, r5, #4278190080	; 0xff000000
 801c6b4:	6005      	str	r5, [r0, #0]
 801c6b6:	e7f5      	b.n	801c6a4 <MobleAddressIsNew+0x2c>
 801c6b8:	2400      	movs	r4, #0
 801c6ba:	e7f3      	b.n	801c6a4 <MobleAddressIsNew+0x2c>
 801c6bc:	20000324 	.word	0x20000324

0801c6c0 <MobleConfigCrc32>:
 801c6c0:	b530      	push	{r4, r5, lr}
 801c6c2:	4d0b      	ldr	r5, [pc, #44]	; (801c6f0 <MobleConfigCrc32+0x30>)
 801c6c4:	4401      	add	r1, r0
 801c6c6:	f04f 33ff 	mov.w	r3, #4294967295
 801c6ca:	4281      	cmp	r1, r0
 801c6cc:	d101      	bne.n	801c6d2 <MobleConfigCrc32+0x12>
 801c6ce:	43d8      	mvns	r0, r3
 801c6d0:	bd30      	pop	{r4, r5, pc}
 801c6d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c6d6:	4053      	eors	r3, r2
 801c6d8:	2210      	movs	r2, #16
 801c6da:	f343 0400 	sbfx	r4, r3, #0, #1
 801c6de:	3a01      	subs	r2, #1
 801c6e0:	402c      	ands	r4, r5
 801c6e2:	b292      	uxth	r2, r2
 801c6e4:	ea84 0353 	eor.w	r3, r4, r3, lsr #1
 801c6e8:	2a00      	cmp	r2, #0
 801c6ea:	d1f6      	bne.n	801c6da <MobleConfigCrc32+0x1a>
 801c6ec:	e7ed      	b.n	801c6ca <MobleConfigCrc32+0xa>
 801c6ee:	bf00      	nop
 801c6f0:	edb88320 	.word	0xedb88320

0801c6f4 <MobleConfigSave>:
 801c6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c6f6:	4d37      	ldr	r5, [pc, #220]	; (801c7d4 <MobleConfigSave+0xe0>)
 801c6f8:	f8b5 379c 	ldrh.w	r3, [r5, #1948]	; 0x79c
 801c6fc:	2000      	movs	r0, #0
 801c6fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c702:	f88d 0006 	strb.w	r0, [sp, #6]
 801c706:	f88d 0007 	strb.w	r0, [sp, #7]
 801c70a:	d10d      	bne.n	801c728 <MobleConfigSave+0x34>
 801c70c:	4b32      	ldr	r3, [pc, #200]	; (801c7d8 <MobleConfigSave+0xe4>)
 801c70e:	6818      	ldr	r0, [r3, #0]
 801c710:	4b32      	ldr	r3, [pc, #200]	; (801c7dc <MobleConfigSave+0xe8>)
 801c712:	781b      	ldrb	r3, [r3, #0]
 801c714:	2b00      	cmp	r3, #0
 801c716:	d13a      	bne.n	801c78e <MobleConfigSave+0x9a>
 801c718:	f10d 0306 	add.w	r3, sp, #6
 801c71c:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c720:	f5a5 61d4 	sub.w	r1, r5, #1696	; 0x6a0
 801c724:	f7ea fe3e 	bl	80073a4 <PalNvmCompare>
 801c728:	f8b5 379c 	ldrh.w	r3, [r5, #1948]	; 0x79c
 801c72c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c730:	4604      	mov	r4, r0
 801c732:	d10d      	bne.n	801c750 <MobleConfigSave+0x5c>
 801c734:	4b28      	ldr	r3, [pc, #160]	; (801c7d8 <MobleConfigSave+0xe4>)
 801c736:	492a      	ldr	r1, [pc, #168]	; (801c7e0 <MobleConfigSave+0xec>)
 801c738:	6818      	ldr	r0, [r3, #0]
 801c73a:	4b28      	ldr	r3, [pc, #160]	; (801c7dc <MobleConfigSave+0xe8>)
 801c73c:	781b      	ldrb	r3, [r3, #0]
 801c73e:	bb7b      	cbnz	r3, 801c7a0 <MobleConfigSave+0xac>
 801c740:	f10d 0307 	add.w	r3, sp, #7
 801c744:	2208      	movs	r2, #8
 801c746:	f500 6064 	add.w	r0, r0, #3648	; 0xe40
 801c74a:	f7ea fe2b 	bl	80073a4 <PalNvmCompare>
 801c74e:	4604      	mov	r4, r0
 801c750:	2c01      	cmp	r4, #1
 801c752:	d839      	bhi.n	801c7c8 <MobleConfigSave+0xd4>
 801c754:	f89d 2006 	ldrb.w	r2, [sp, #6]
 801c758:	2a02      	cmp	r2, #2
 801c75a:	d003      	beq.n	801c764 <MobleConfigSave+0x70>
 801c75c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c760:	2b02      	cmp	r3, #2
 801c762:	d123      	bne.n	801c7ac <MobleConfigSave+0xb8>
 801c764:	491f      	ldr	r1, [pc, #124]	; (801c7e4 <MobleConfigSave+0xf0>)
 801c766:	780b      	ldrb	r3, [r1, #0]
 801c768:	f043 0301 	orr.w	r3, r3, #1
 801c76c:	700b      	strb	r3, [r1, #0]
 801c76e:	f8b5 379c 	ldrh.w	r3, [r5, #1948]	; 0x79c
 801c772:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801c776:	d119      	bne.n	801c7ac <MobleConfigSave+0xb8>
 801c778:	2301      	movs	r3, #1
 801c77a:	f88d 3006 	strb.w	r3, [sp, #6]
 801c77e:	f88d 3007 	strb.w	r3, [sp, #7]
 801c782:	4a18      	ldr	r2, [pc, #96]	; (801c7e4 <MobleConfigSave+0xf0>)
 801c784:	7813      	ldrb	r3, [r2, #0]
 801c786:	f043 0302 	orr.w	r3, r3, #2
 801c78a:	7013      	strb	r3, [r2, #0]
 801c78c:	e014      	b.n	801c7b8 <MobleConfigSave+0xc4>
 801c78e:	f10d 0306 	add.w	r3, sp, #6
 801c792:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c796:	f5a5 61d4 	sub.w	r1, r5, #1696	; 0x6a0
 801c79a:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801c79e:	e7c1      	b.n	801c724 <MobleConfigSave+0x30>
 801c7a0:	f10d 0307 	add.w	r3, sp, #7
 801c7a4:	2208      	movs	r2, #8
 801c7a6:	f500 50f2 	add.w	r0, r0, #7744	; 0x1e40
 801c7aa:	e7ce      	b.n	801c74a <MobleConfigSave+0x56>
 801c7ac:	2a01      	cmp	r2, #1
 801c7ae:	d0e8      	beq.n	801c782 <MobleConfigSave+0x8e>
 801c7b0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 801c7b4:	2b01      	cmp	r3, #1
 801c7b6:	d0e4      	beq.n	801c782 <MobleConfigSave+0x8e>
 801c7b8:	480b      	ldr	r0, [pc, #44]	; (801c7e8 <MobleConfigSave+0xf4>)
 801c7ba:	f640 614c 	movw	r1, #3660	; 0xe4c
 801c7be:	f7fb fd03 	bl	80181c8 <MoblePalBluetoothNvmSave>
 801c7c2:	4620      	mov	r0, r4
 801c7c4:	b003      	add	sp, #12
 801c7c6:	bd30      	pop	{r4, r5, pc}
 801c7c8:	2300      	movs	r3, #0
 801c7ca:	f885 379d 	strb.w	r3, [r5, #1949]	; 0x79d
 801c7ce:	f885 37a8 	strb.w	r3, [r5, #1960]	; 0x7a8
 801c7d2:	e7f1      	b.n	801c7b8 <MobleConfigSave+0xc4>
 801c7d4:	2000241c 	.word	0x2000241c
 801c7d8:	20004454 	.word	0x20004454
 801c7dc:	20004444 	.word	0x20004444
 801c7e0:	20002bbc 	.word	0x20002bbc
 801c7e4:	20004443 	.word	0x20004443
 801c7e8:	20001d7c 	.word	0x20001d7c

0801c7ec <MobleConfigLoad>:
 801c7ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7ee:	4c50      	ldr	r4, [pc, #320]	; (801c930 <MobleConfigLoad+0x144>)
 801c7f0:	f894 379c 	ldrb.w	r3, [r4, #1948]	; 0x79c
 801c7f4:	2b01      	cmp	r3, #1
 801c7f6:	b085      	sub	sp, #20
 801c7f8:	d107      	bne.n	801c80a <MobleConfigLoad+0x1e>
 801c7fa:	2300      	movs	r3, #0
 801c7fc:	f884 379d 	strb.w	r3, [r4, #1949]	; 0x79d
 801c800:	2300      	movs	r3, #0
 801c802:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
 801c806:	b005      	add	sp, #20
 801c808:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c80a:	4d4a      	ldr	r5, [pc, #296]	; (801c934 <MobleConfigLoad+0x148>)
 801c80c:	4e4a      	ldr	r6, [pc, #296]	; (801c938 <MobleConfigLoad+0x14c>)
 801c80e:	6828      	ldr	r0, [r5, #0]
 801c810:	2208      	movs	r2, #8
 801c812:	2300      	movs	r3, #0
 801c814:	eb0d 0102 	add.w	r1, sp, r2
 801c818:	f7ea fd92 	bl	8007340 <PalNvmRead>
 801c81c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 801c820:	ea01 0302 	and.w	r3, r1, r2
 801c824:	1c58      	adds	r0, r3, #1
 801c826:	4243      	negs	r3, r0
 801c828:	4143      	adcs	r3, r0
 801c82a:	7033      	strb	r3, [r6, #0]
 801c82c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801c830:	bf08      	it	eq
 801c832:	f1b1 3fff 	cmpeq.w	r1, #4294967295
 801c836:	f04f 0301 	mov.w	r3, #1
 801c83a:	f884 379d 	strb.w	r3, [r4, #1949]	; 0x79d
 801c83e:	d03b      	beq.n	801c8b8 <MobleConfigLoad+0xcc>
 801c840:	6828      	ldr	r0, [r5, #0]
 801c842:	2300      	movs	r3, #0
 801c844:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c848:	f5a4 61d4 	sub.w	r1, r4, #1696	; 0x6a0
 801c84c:	f7ea fd78 	bl	8007340 <PalNvmRead>
 801c850:	2801      	cmp	r0, #1
 801c852:	d93a      	bls.n	801c8ca <MobleConfigLoad+0xde>
 801c854:	2300      	movs	r3, #0
 801c856:	f884 379d 	strb.w	r3, [r4, #1949]	; 0x79d
 801c85a:	f894 379d 	ldrb.w	r3, [r4, #1949]	; 0x79d
 801c85e:	2b01      	cmp	r3, #1
 801c860:	d1ce      	bne.n	801c800 <MobleConfigLoad+0x14>
 801c862:	f884 37a8 	strb.w	r3, [r4, #1960]	; 0x7a8
 801c866:	7833      	ldrb	r3, [r6, #0]
 801c868:	6828      	ldr	r0, [r5, #0]
 801c86a:	4f34      	ldr	r7, [pc, #208]	; (801c93c <MobleConfigLoad+0x150>)
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d153      	bne.n	801c918 <MobleConfigLoad+0x12c>
 801c870:	2208      	movs	r2, #8
 801c872:	4639      	mov	r1, r7
 801c874:	f500 6064 	add.w	r0, r0, #3648	; 0xe40
 801c878:	f7ea fd62 	bl	8007340 <PalNvmRead>
 801c87c:	2801      	cmp	r0, #1
 801c87e:	d8bf      	bhi.n	801c800 <MobleConfigLoad+0x14>
 801c880:	482e      	ldr	r0, [pc, #184]	; (801c93c <MobleConfigLoad+0x150>)
 801c882:	2104      	movs	r1, #4
 801c884:	f7ff ff1c 	bl	801c6c0 <MobleConfigCrc32>
 801c888:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
 801c88c:	4298      	cmp	r0, r3
 801c88e:	d0ba      	beq.n	801c806 <MobleConfigLoad+0x1a>
 801c890:	7833      	ldrb	r3, [r6, #0]
 801c892:	6828      	ldr	r0, [r5, #0]
 801c894:	2b00      	cmp	r3, #0
 801c896:	d145      	bne.n	801c924 <MobleConfigLoad+0x138>
 801c898:	4928      	ldr	r1, [pc, #160]	; (801c93c <MobleConfigLoad+0x150>)
 801c89a:	2301      	movs	r3, #1
 801c89c:	2208      	movs	r2, #8
 801c89e:	f500 6064 	add.w	r0, r0, #3648	; 0xe40
 801c8a2:	f7ea fd4d 	bl	8007340 <PalNvmRead>
 801c8a6:	2104      	movs	r1, #4
 801c8a8:	4638      	mov	r0, r7
 801c8aa:	f7ff ff09 	bl	801c6c0 <MobleConfigCrc32>
 801c8ae:	f8d4 37a4 	ldr.w	r3, [r4, #1956]	; 0x7a4
 801c8b2:	4298      	cmp	r0, r3
 801c8b4:	d1a4      	bne.n	801c800 <MobleConfigLoad+0x14>
 801c8b6:	e7a6      	b.n	801c806 <MobleConfigLoad+0x1a>
 801c8b8:	6828      	ldr	r0, [r5, #0]
 801c8ba:	2300      	movs	r3, #0
 801c8bc:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c8c0:	f5a4 61d4 	sub.w	r1, r4, #1696	; 0x6a0
 801c8c4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801c8c8:	e7c0      	b.n	801c84c <MobleConfigLoad+0x60>
 801c8ca:	f894 379d 	ldrb.w	r3, [r4, #1949]	; 0x79d
 801c8ce:	9301      	str	r3, [sp, #4]
 801c8d0:	2b01      	cmp	r3, #1
 801c8d2:	d1c2      	bne.n	801c85a <MobleConfigLoad+0x6e>
 801c8d4:	481a      	ldr	r0, [pc, #104]	; (801c940 <MobleConfigLoad+0x154>)
 801c8d6:	f640 6138 	movw	r1, #3640	; 0xe38
 801c8da:	f7ff fef1 	bl	801c6c0 <MobleConfigCrc32>
 801c8de:	f8d4 2798 	ldr.w	r2, [r4, #1944]	; 0x798
 801c8e2:	4290      	cmp	r0, r2
 801c8e4:	d0b9      	beq.n	801c85a <MobleConfigLoad+0x6e>
 801c8e6:	7832      	ldrb	r2, [r6, #0]
 801c8e8:	6828      	ldr	r0, [r5, #0]
 801c8ea:	9b01      	ldr	r3, [sp, #4]
 801c8ec:	b972      	cbnz	r2, 801c90c <MobleConfigLoad+0x120>
 801c8ee:	4914      	ldr	r1, [pc, #80]	; (801c940 <MobleConfigLoad+0x154>)
 801c8f0:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c8f4:	f7ea fd24 	bl	8007340 <PalNvmRead>
 801c8f8:	4811      	ldr	r0, [pc, #68]	; (801c940 <MobleConfigLoad+0x154>)
 801c8fa:	f640 6138 	movw	r1, #3640	; 0xe38
 801c8fe:	f7ff fedf 	bl	801c6c0 <MobleConfigCrc32>
 801c902:	f8d4 3798 	ldr.w	r3, [r4, #1944]	; 0x798
 801c906:	4298      	cmp	r0, r3
 801c908:	d1a4      	bne.n	801c854 <MobleConfigLoad+0x68>
 801c90a:	e7a6      	b.n	801c85a <MobleConfigLoad+0x6e>
 801c90c:	490c      	ldr	r1, [pc, #48]	; (801c940 <MobleConfigLoad+0x154>)
 801c90e:	f640 623c 	movw	r2, #3644	; 0xe3c
 801c912:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 801c916:	e7ed      	b.n	801c8f4 <MobleConfigLoad+0x108>
 801c918:	2300      	movs	r3, #0
 801c91a:	2208      	movs	r2, #8
 801c91c:	4639      	mov	r1, r7
 801c91e:	f500 50f2 	add.w	r0, r0, #7744	; 0x1e40
 801c922:	e7a9      	b.n	801c878 <MobleConfigLoad+0x8c>
 801c924:	2301      	movs	r3, #1
 801c926:	2208      	movs	r2, #8
 801c928:	4639      	mov	r1, r7
 801c92a:	f500 50f2 	add.w	r0, r0, #7744	; 0x1e40
 801c92e:	e7b8      	b.n	801c8a2 <MobleConfigLoad+0xb6>
 801c930:	2000241c 	.word	0x2000241c
 801c934:	20004454 	.word	0x20004454
 801c938:	20004444 	.word	0x20004444
 801c93c:	20002bbc 	.word	0x20002bbc
 801c940:	20001d7c 	.word	0x20001d7c

0801c944 <MobleConfigNetworkEncode>:
 801c944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c946:	4c4c      	ldr	r4, [pc, #304]	; (801ca78 <MobleConfigNetworkEncode+0x134>)
 801c948:	f7fb fb98 	bl	801807c <MoblePalBluetoothRandom>
 801c94c:	f884 0960 	strb.w	r0, [r4, #2400]	; 0x960
 801c950:	2800      	cmp	r0, #0
 801c952:	d0f9      	beq.n	801c948 <MobleConfigNetworkEncode+0x4>
 801c954:	f894 3961 	ldrb.w	r3, [r4, #2401]	; 0x961
 801c958:	f8b4 2962 	ldrh.w	r2, [r4, #2402]	; 0x962
 801c95c:	4043      	eors	r3, r0
 801c95e:	f884 3961 	strb.w	r3, [r4, #2401]	; 0x961
 801c962:	ea40 2300 	orr.w	r3, r0, r0, lsl #8
 801c966:	4053      	eors	r3, r2
 801c968:	f8a4 3962 	strh.w	r3, [r4, #2402]	; 0x962
 801c96c:	4c43      	ldr	r4, [pc, #268]	; (801ca7c <MobleConfigNetworkEncode+0x138>)
 801c96e:	f894 1772 	ldrb.w	r1, [r4, #1906]	; 0x772
 801c972:	f204 558a 	addw	r5, r4, #1418	; 0x58a
 801c976:	2600      	movs	r6, #0
 801c978:	f5a4 62d4 	sub.w	r2, r4, #1696	; 0x6a0
 801c97c:	b2f3      	uxtb	r3, r6
 801c97e:	4299      	cmp	r1, r3
 801c980:	d82c      	bhi.n	801c9dc <MobleConfigNetworkEncode+0x98>
 801c982:	f894 5773 	ldrb.w	r5, [r4, #1907]	; 0x773
 801c986:	f602 569e 	addw	r6, r2, #3486	; 0xd9e
 801c98a:	2700      	movs	r7, #0
 801c98c:	b2fb      	uxtb	r3, r7
 801c98e:	429d      	cmp	r5, r3
 801c990:	d840      	bhi.n	801ca14 <MobleConfigNetworkEncode+0xd0>
 801c992:	f602 6614 	addw	r6, r2, #3604	; 0xe14
 801c996:	2310      	movs	r3, #16
 801c998:	7837      	ldrb	r7, [r6, #0]
 801c99a:	3b01      	subs	r3, #1
 801c99c:	4047      	eors	r7, r0
 801c99e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801c9a2:	f806 7b01 	strb.w	r7, [r6], #1
 801c9a6:	d1f7      	bne.n	801c998 <MobleConfigNetworkEncode+0x54>
 801c9a8:	4045      	eors	r5, r0
 801c9aa:	4041      	eors	r1, r0
 801c9ac:	f884 5773 	strb.w	r5, [r4, #1907]	; 0x773
 801c9b0:	f894 c785 	ldrb.w	ip, [r4, #1925]	; 0x785
 801c9b4:	4d32      	ldr	r5, [pc, #200]	; (801ca80 <MobleConfigNetworkEncode+0x13c>)
 801c9b6:	f884 1772 	strb.w	r1, [r4, #1906]	; 0x772
 801c9ba:	f502 6241 	add.w	r2, r2, #3088	; 0xc10
 801c9be:	b2d9      	uxtb	r1, r3
 801c9c0:	4561      	cmp	r1, ip
 801c9c2:	d343      	bcc.n	801ca4c <MobleConfigNetworkEncode+0x108>
 801c9c4:	ea80 000c 	eor.w	r0, r0, ip
 801c9c8:	f884 0785 	strb.w	r0, [r4, #1925]	; 0x785
 801c9cc:	f640 6138 	movw	r1, #3640	; 0xe38
 801c9d0:	482b      	ldr	r0, [pc, #172]	; (801ca80 <MobleConfigNetworkEncode+0x13c>)
 801c9d2:	f7ff fe75 	bl	801c6c0 <MobleConfigCrc32>
 801c9d6:	f8c4 0798 	str.w	r0, [r4, #1944]	; 0x798
 801c9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c9dc:	f1a5 0710 	sub.w	r7, r5, #16
 801c9e0:	2310      	movs	r3, #16
 801c9e2:	f897 c000 	ldrb.w	ip, [r7]
 801c9e6:	3b01      	subs	r3, #1
 801c9e8:	ea80 0c0c 	eor.w	ip, r0, ip
 801c9ec:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801c9f0:	f807 cb01 	strb.w	ip, [r7], #1
 801c9f4:	d1f5      	bne.n	801c9e2 <MobleConfigNetworkEncode+0x9e>
 801c9f6:	462f      	mov	r7, r5
 801c9f8:	2310      	movs	r3, #16
 801c9fa:	f897 c000 	ldrb.w	ip, [r7]
 801c9fe:	3b01      	subs	r3, #1
 801ca00:	ea80 0c0c 	eor.w	ip, r0, ip
 801ca04:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801ca08:	f807 cb01 	strb.w	ip, [r7], #1
 801ca0c:	d1f5      	bne.n	801c9fa <MobleConfigNetworkEncode+0xb6>
 801ca0e:	3601      	adds	r6, #1
 801ca10:	357c      	adds	r5, #124	; 0x7c
 801ca12:	e7b3      	b.n	801c97c <MobleConfigNetworkEncode+0x38>
 801ca14:	f1a6 0c10 	sub.w	ip, r6, #16
 801ca18:	2310      	movs	r3, #16
 801ca1a:	f89c e000 	ldrb.w	lr, [ip]
 801ca1e:	3b01      	subs	r3, #1
 801ca20:	ea80 0e0e 	eor.w	lr, r0, lr
 801ca24:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801ca28:	f80c eb01 	strb.w	lr, [ip], #1
 801ca2c:	d1f5      	bne.n	801ca1a <MobleConfigNetworkEncode+0xd6>
 801ca2e:	46b4      	mov	ip, r6
 801ca30:	2310      	movs	r3, #16
 801ca32:	f89c e000 	ldrb.w	lr, [ip]
 801ca36:	3b01      	subs	r3, #1
 801ca38:	ea80 0e0e 	eor.w	lr, r0, lr
 801ca3c:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801ca40:	f80c eb01 	strb.w	lr, [ip], #1
 801ca44:	d1f5      	bne.n	801ca32 <MobleConfigNetworkEncode+0xee>
 801ca46:	3701      	adds	r7, #1
 801ca48:	362c      	adds	r6, #44	; 0x2c
 801ca4a:	e79f      	b.n	801c98c <MobleConfigNetworkEncode+0x48>
 801ca4c:	7811      	ldrb	r1, [r2, #0]
 801ca4e:	4041      	eors	r1, r0
 801ca50:	f802 1b01 	strb.w	r1, [r2], #1
 801ca54:	7911      	ldrb	r1, [r2, #4]
 801ca56:	4041      	eors	r1, r0
 801ca58:	7111      	strb	r1, [r2, #4]
 801ca5a:	2600      	movs	r6, #0
 801ca5c:	4629      	mov	r1, r5
 801ca5e:	688f      	ldr	r7, [r1, #8]
 801ca60:	360e      	adds	r6, #14
 801ca62:	4047      	eors	r7, r0
 801ca64:	2e9a      	cmp	r6, #154	; 0x9a
 801ca66:	608f      	str	r7, [r1, #8]
 801ca68:	f101 0138 	add.w	r1, r1, #56	; 0x38
 801ca6c:	d1f7      	bne.n	801ca5e <MobleConfigNetworkEncode+0x11a>
 801ca6e:	3301      	adds	r3, #1
 801ca70:	f505 751a 	add.w	r5, r5, #616	; 0x268
 801ca74:	e7a3      	b.n	801c9be <MobleConfigNetworkEncode+0x7a>
 801ca76:	bf00      	nop
 801ca78:	2000141c 	.word	0x2000141c
 801ca7c:	2000241c 	.word	0x2000241c
 801ca80:	20001d7c 	.word	0x20001d7c

0801ca84 <MobleConfigNetworkDecode>:
 801ca84:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ca86:	4b46      	ldr	r3, [pc, #280]	; (801cba0 <MobleConfigNetworkDecode+0x11c>)
 801ca88:	f893 1960 	ldrb.w	r1, [r3, #2400]	; 0x960
 801ca8c:	f893 2961 	ldrb.w	r2, [r3, #2401]	; 0x961
 801ca90:	f8b3 0962 	ldrh.w	r0, [r3, #2402]	; 0x962
 801ca94:	404a      	eors	r2, r1
 801ca96:	f883 2961 	strb.w	r2, [r3, #2401]	; 0x961
 801ca9a:	ea41 2201 	orr.w	r2, r1, r1, lsl #8
 801ca9e:	4042      	eors	r2, r0
 801caa0:	f503 5080 	add.w	r0, r3, #4096	; 0x1000
 801caa4:	f8a3 2962 	strh.w	r2, [r3, #2402]	; 0x962
 801caa8:	f890 5772 	ldrb.w	r5, [r0, #1906]	; 0x772
 801caac:	f890 4773 	ldrb.w	r4, [r0, #1907]	; 0x773
 801cab0:	404d      	eors	r5, r1
 801cab2:	404c      	eors	r4, r1
 801cab4:	f503 6216 	add.w	r2, r3, #2400	; 0x960
 801cab8:	f880 5772 	strb.w	r5, [r0, #1906]	; 0x772
 801cabc:	f880 4773 	strb.w	r4, [r0, #1907]	; 0x773
 801cac0:	f602 462a 	addw	r6, r2, #3114	; 0xc2a
 801cac4:	2700      	movs	r7, #0
 801cac6:	b2fb      	uxtb	r3, r7
 801cac8:	429d      	cmp	r5, r3
 801caca:	d81c      	bhi.n	801cb06 <MobleConfigNetworkDecode+0x82>
 801cacc:	f602 559e 	addw	r5, r2, #3486	; 0xd9e
 801cad0:	2600      	movs	r6, #0
 801cad2:	b2f3      	uxtb	r3, r6
 801cad4:	429c      	cmp	r4, r3
 801cad6:	d832      	bhi.n	801cb3e <MobleConfigNetworkDecode+0xba>
 801cad8:	f602 6414 	addw	r4, r2, #3604	; 0xe14
 801cadc:	2310      	movs	r3, #16
 801cade:	7825      	ldrb	r5, [r4, #0]
 801cae0:	3b01      	subs	r3, #1
 801cae2:	404d      	eors	r5, r1
 801cae4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cae8:	f804 5b01 	strb.w	r5, [r4], #1
 801caec:	d1f7      	bne.n	801cade <MobleConfigNetworkDecode+0x5a>
 801caee:	f890 4785 	ldrb.w	r4, [r0, #1925]	; 0x785
 801caf2:	4d2c      	ldr	r5, [pc, #176]	; (801cba4 <MobleConfigNetworkDecode+0x120>)
 801caf4:	404c      	eors	r4, r1
 801caf6:	f880 4785 	strb.w	r4, [r0, #1925]	; 0x785
 801cafa:	f502 6241 	add.w	r2, r2, #3088	; 0xc10
 801cafe:	b2d8      	uxtb	r0, r3
 801cb00:	4284      	cmp	r4, r0
 801cb02:	d838      	bhi.n	801cb76 <MobleConfigNetworkDecode+0xf2>
 801cb04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb06:	f1a6 0c10 	sub.w	ip, r6, #16
 801cb0a:	2310      	movs	r3, #16
 801cb0c:	f89c e000 	ldrb.w	lr, [ip]
 801cb10:	3b01      	subs	r3, #1
 801cb12:	ea81 0e0e 	eor.w	lr, r1, lr
 801cb16:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cb1a:	f80c eb01 	strb.w	lr, [ip], #1
 801cb1e:	d1f5      	bne.n	801cb0c <MobleConfigNetworkDecode+0x88>
 801cb20:	46b4      	mov	ip, r6
 801cb22:	2310      	movs	r3, #16
 801cb24:	f89c e000 	ldrb.w	lr, [ip]
 801cb28:	3b01      	subs	r3, #1
 801cb2a:	ea81 0e0e 	eor.w	lr, r1, lr
 801cb2e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cb32:	f80c eb01 	strb.w	lr, [ip], #1
 801cb36:	d1f5      	bne.n	801cb24 <MobleConfigNetworkDecode+0xa0>
 801cb38:	3701      	adds	r7, #1
 801cb3a:	367c      	adds	r6, #124	; 0x7c
 801cb3c:	e7c3      	b.n	801cac6 <MobleConfigNetworkDecode+0x42>
 801cb3e:	f1a5 0710 	sub.w	r7, r5, #16
 801cb42:	2310      	movs	r3, #16
 801cb44:	f897 c000 	ldrb.w	ip, [r7]
 801cb48:	3b01      	subs	r3, #1
 801cb4a:	ea81 0c0c 	eor.w	ip, r1, ip
 801cb4e:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cb52:	f807 cb01 	strb.w	ip, [r7], #1
 801cb56:	d1f5      	bne.n	801cb44 <MobleConfigNetworkDecode+0xc0>
 801cb58:	462f      	mov	r7, r5
 801cb5a:	2310      	movs	r3, #16
 801cb5c:	f897 c000 	ldrb.w	ip, [r7]
 801cb60:	3b01      	subs	r3, #1
 801cb62:	ea81 0c0c 	eor.w	ip, r1, ip
 801cb66:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 801cb6a:	f807 cb01 	strb.w	ip, [r7], #1
 801cb6e:	d1f5      	bne.n	801cb5c <MobleConfigNetworkDecode+0xd8>
 801cb70:	3601      	adds	r6, #1
 801cb72:	352c      	adds	r5, #44	; 0x2c
 801cb74:	e7ad      	b.n	801cad2 <MobleConfigNetworkDecode+0x4e>
 801cb76:	7810      	ldrb	r0, [r2, #0]
 801cb78:	4048      	eors	r0, r1
 801cb7a:	f802 0b01 	strb.w	r0, [r2], #1
 801cb7e:	7910      	ldrb	r0, [r2, #4]
 801cb80:	4048      	eors	r0, r1
 801cb82:	7110      	strb	r0, [r2, #4]
 801cb84:	2600      	movs	r6, #0
 801cb86:	4628      	mov	r0, r5
 801cb88:	6887      	ldr	r7, [r0, #8]
 801cb8a:	360e      	adds	r6, #14
 801cb8c:	404f      	eors	r7, r1
 801cb8e:	2e9a      	cmp	r6, #154	; 0x9a
 801cb90:	6087      	str	r7, [r0, #8]
 801cb92:	f100 0038 	add.w	r0, r0, #56	; 0x38
 801cb96:	d1f7      	bne.n	801cb88 <MobleConfigNetworkDecode+0x104>
 801cb98:	3301      	adds	r3, #1
 801cb9a:	f505 751a 	add.w	r5, r5, #616	; 0x268
 801cb9e:	e7ae      	b.n	801cafe <MobleConfigNetworkDecode+0x7a>
 801cba0:	2000141c 	.word	0x2000141c
 801cba4:	20001d7c 	.word	0x20001d7c

0801cba8 <MobleConfigSavedSeqEncode>:
 801cba8:	b510      	push	{r4, lr}
 801cbaa:	4c05      	ldr	r4, [pc, #20]	; (801cbc0 <MobleConfigSavedSeqEncode+0x18>)
 801cbac:	2104      	movs	r1, #4
 801cbae:	f504 50bd 	add.w	r0, r4, #6048	; 0x17a0
 801cbb2:	f7ff fd85 	bl	801c6c0 <MobleConfigCrc32>
 801cbb6:	f504 5480 	add.w	r4, r4, #4096	; 0x1000
 801cbba:	f8c4 07a4 	str.w	r0, [r4, #1956]	; 0x7a4
 801cbbe:	bd10      	pop	{r4, pc}
 801cbc0:	2000141c 	.word	0x2000141c

0801cbc4 <MobleConfigNetworkLoad>:
 801cbc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cbc8:	4604      	mov	r4, r0
 801cbca:	2800      	cmp	r0, #0
 801cbcc:	d07d      	beq.n	801ccca <MobleConfigNetworkLoad+0x106>
 801cbce:	4e41      	ldr	r6, [pc, #260]	; (801ccd4 <MobleConfigNetworkLoad+0x110>)
 801cbd0:	2500      	movs	r5, #0
 801cbd2:	f506 5780 	add.w	r7, r6, #4096	; 0x1000
 801cbd6:	7005      	strb	r5, [r0, #0]
 801cbd8:	8045      	strh	r5, [r0, #2]
 801cbda:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 801cbde:	f44f 720d 	mov.w	r2, #564	; 0x234
 801cbe2:	6a00      	ldr	r0, [r0, #32]
 801cbe4:	4629      	mov	r1, r5
 801cbe6:	f00c fe65 	bl	80298b4 <memset>
 801cbea:	f8b7 379c 	ldrh.w	r3, [r7, #1948]	; 0x79c
 801cbee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cbf2:	d16c      	bne.n	801ccce <MobleConfigNetworkLoad+0x10a>
 801cbf4:	f7ff ff46 	bl	801ca84 <MobleConfigNetworkDecode>
 801cbf8:	f8b6 3962 	ldrh.w	r3, [r6, #2402]	; 0x962
 801cbfc:	8063      	strh	r3, [r4, #2]
 801cbfe:	f896 3961 	ldrb.w	r3, [r6, #2401]	; 0x961
 801cc02:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 801cc06:	f8d6 3964 	ldr.w	r3, [r6, #2404]	; 0x964
 801cc0a:	6063      	str	r3, [r4, #4]
 801cc0c:	f897 3785 	ldrb.w	r3, [r7, #1925]	; 0x785
 801cc10:	7723      	strb	r3, [r4, #28]
 801cc12:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801cc16:	f207 517a 	addw	r1, r7, #1402	; 0x57a
 801cc1a:	6a20      	ldr	r0, [r4, #32]
 801cc1c:	f00c fe30 	bl	8029880 <memmove>
 801cc20:	6a20      	ldr	r0, [r4, #32]
 801cc22:	2284      	movs	r2, #132	; 0x84
 801cc24:	f207 61ee 	addw	r1, r7, #1774	; 0x6ee
 801cc28:	f500 70ba 	add.w	r0, r0, #372	; 0x174
 801cc2c:	f00c fe28 	bl	8029880 <memmove>
 801cc30:	6a20      	ldr	r0, [r4, #32]
 801cc32:	2210      	movs	r2, #16
 801cc34:	f207 7174 	addw	r1, r7, #1908	; 0x774
 801cc38:	f500 70fe 	add.w	r0, r0, #508	; 0x1fc
 801cc3c:	f00c fe20 	bl	8029880 <memmove>
 801cc40:	6a23      	ldr	r3, [r4, #32]
 801cc42:	f897 2772 	ldrb.w	r2, [r7, #1906]	; 0x772
 801cc46:	f883 21f8 	strb.w	r2, [r3, #504]	; 0x1f8
 801cc4a:	f897 2773 	ldrb.w	r2, [r7, #1907]	; 0x773
 801cc4e:	f883 21f9 	strb.w	r2, [r3, #505]	; 0x1f9
 801cc52:	f897 2784 	ldrb.w	r2, [r7, #1924]	; 0x784
 801cc56:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
 801cc5a:	f506 6816 	add.w	r8, r6, #2400	; 0x960
 801cc5e:	f44f 791a 	mov.w	r9, #616	; 0x268
 801cc62:	f241 5a70 	movw	sl, #5488	; 0x1570
 801cc66:	f241 5b75 	movw	fp, #5493	; 0x1575
 801cc6a:	7f23      	ldrb	r3, [r4, #28]
 801cc6c:	b2ef      	uxtb	r7, r5
 801cc6e:	42bb      	cmp	r3, r7
 801cc70:	d80e      	bhi.n	801cc90 <MobleConfigNetworkLoad+0xcc>
 801cc72:	2210      	movs	r2, #16
 801cc74:	f608 6126 	addw	r1, r8, #3622	; 0xe26
 801cc78:	f104 000c 	add.w	r0, r4, #12
 801cc7c:	f00c fe00 	bl	8029880 <memmove>
 801cc80:	f7ff fe60 	bl	801c944 <MobleConfigNetworkEncode>
 801cc84:	2301      	movs	r3, #1
 801cc86:	8023      	strh	r3, [r4, #0]
 801cc88:	2000      	movs	r0, #0
 801cc8a:	b003      	add	sp, #12
 801cc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc90:	eb04 0387 	add.w	r3, r4, r7, lsl #2
 801cc94:	fb09 8107 	mla	r1, r9, r7, r8
 801cc98:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801cc9a:	9301      	str	r3, [sp, #4]
 801cc9c:	f44f 721a 	mov.w	r2, #616	; 0x268
 801cca0:	3108      	adds	r1, #8
 801cca2:	3078      	adds	r0, #120	; 0x78
 801cca4:	f00c fdec 	bl	8029880 <memmove>
 801cca8:	9b01      	ldr	r3, [sp, #4]
 801ccaa:	19f2      	adds	r2, r6, r7
 801ccac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ccae:	f812 100a 	ldrb.w	r1, [r2, sl]
 801ccb2:	f883 12e0 	strb.w	r1, [r3, #736]	; 0x2e0
 801ccb6:	f812 200b 	ldrb.w	r2, [r2, fp]
 801ccba:	f883 22e1 	strb.w	r2, [r3, #737]	; 0x2e1
 801ccbe:	f8b6 2962 	ldrh.w	r2, [r6, #2402]	; 0x962
 801ccc2:	4417      	add	r7, r2
 801ccc4:	801f      	strh	r7, [r3, #0]
 801ccc6:	3501      	adds	r5, #1
 801ccc8:	e7cf      	b.n	801cc6a <MobleConfigNetworkLoad+0xa6>
 801ccca:	2003      	movs	r0, #3
 801cccc:	e7dd      	b.n	801cc8a <MobleConfigNetworkLoad+0xc6>
 801ccce:	4628      	mov	r0, r5
 801ccd0:	e7db      	b.n	801cc8a <MobleConfigNetworkLoad+0xc6>
 801ccd2:	bf00      	nop
 801ccd4:	2000141c 	.word	0x2000141c

0801ccd8 <MobleConfigSaveSeq>:
 801ccd8:	b508      	push	{r3, lr}
 801ccda:	b160      	cbz	r0, 801ccf6 <MobleConfigSaveSeq+0x1e>
 801ccdc:	4b07      	ldr	r3, [pc, #28]	; (801ccfc <MobleConfigSaveSeq+0x24>)
 801ccde:	6882      	ldr	r2, [r0, #8]
 801cce0:	f8c3 27a0 	str.w	r2, [r3, #1952]	; 0x7a0
 801cce4:	2201      	movs	r2, #1
 801cce6:	f883 27a8 	strb.w	r2, [r3, #1960]	; 0x7a8
 801ccea:	f7ff ff5d 	bl	801cba8 <MobleConfigSavedSeqEncode>
 801ccee:	f7ff fd01 	bl	801c6f4 <MobleConfigSave>
 801ccf2:	2000      	movs	r0, #0
 801ccf4:	bd08      	pop	{r3, pc}
 801ccf6:	2003      	movs	r0, #3
 801ccf8:	e7fc      	b.n	801ccf4 <MobleConfigSaveSeq+0x1c>
 801ccfa:	bf00      	nop
 801ccfc:	2000241c 	.word	0x2000241c

0801cd00 <MobleNetworkSaveSeqNum>:
 801cd00:	b508      	push	{r3, lr}
 801cd02:	b928      	cbnz	r0, 801cd10 <MobleNetworkSaveSeqNum+0x10>
 801cd04:	4b0f      	ldr	r3, [pc, #60]	; (801cd44 <MobleNetworkSaveSeqNum+0x44>)
 801cd06:	4a10      	ldr	r2, [pc, #64]	; (801cd48 <MobleNetworkSaveSeqNum+0x48>)
 801cd08:	2157      	movs	r1, #87	; 0x57
 801cd0a:	4810      	ldr	r0, [pc, #64]	; (801cd4c <MobleNetworkSaveSeqNum+0x4c>)
 801cd0c:	f00b fedc 	bl	8028ac8 <__assert_func>
 801cd10:	6802      	ldr	r2, [r0, #0]
 801cd12:	b91a      	cbnz	r2, 801cd1c <MobleNetworkSaveSeqNum+0x1c>
 801cd14:	4b0e      	ldr	r3, [pc, #56]	; (801cd50 <MobleNetworkSaveSeqNum+0x50>)
 801cd16:	4a0c      	ldr	r2, [pc, #48]	; (801cd48 <MobleNetworkSaveSeqNum+0x48>)
 801cd18:	2158      	movs	r1, #88	; 0x58
 801cd1a:	e7f6      	b.n	801cd0a <MobleNetworkSaveSeqNum+0xa>
 801cd1c:	f8d0 315c 	ldr.w	r3, [r0, #348]	; 0x15c
 801cd20:	6891      	ldr	r1, [r2, #8]
 801cd22:	4299      	cmp	r1, r3
 801cd24:	d80b      	bhi.n	801cd3e <MobleNetworkSaveSeqNum+0x3e>
 801cd26:	f503 53f6 	add.w	r3, r3, #7872	; 0x1ec0
 801cd2a:	330c      	adds	r3, #12
 801cd2c:	6093      	str	r3, [r2, #8]
 801cd2e:	4610      	mov	r0, r2
 801cd30:	f7ff ffd2 	bl	801ccd8 <MobleConfigSaveSeq>
 801cd34:	2801      	cmp	r0, #1
 801cd36:	bf8c      	ite	hi
 801cd38:	2002      	movhi	r0, #2
 801cd3a:	2000      	movls	r0, #0
 801cd3c:	bd08      	pop	{r3, pc}
 801cd3e:	2001      	movs	r0, #1
 801cd40:	e7fc      	b.n	801cd3c <MobleNetworkSaveSeqNum+0x3c>
 801cd42:	bf00      	nop
 801cd44:	080339a1 	.word	0x080339a1
 801cd48:	08031662 	.word	0x08031662
 801cd4c:	08033816 	.word	0x08033816
 801cd50:	0803385c 	.word	0x0803385c

0801cd54 <MobleConfigLoadSeq>:
 801cd54:	4602      	mov	r2, r0
 801cd56:	b1b0      	cbz	r0, 801cd86 <MobleConfigLoadSeq+0x32>
 801cd58:	7800      	ldrb	r0, [r0, #0]
 801cd5a:	b908      	cbnz	r0, 801cd60 <MobleConfigLoadSeq+0xc>
 801cd5c:	6090      	str	r0, [r2, #8]
 801cd5e:	4770      	bx	lr
 801cd60:	490a      	ldr	r1, [pc, #40]	; (801cd8c <MobleConfigLoadSeq+0x38>)
 801cd62:	f8b1 379c 	ldrh.w	r3, [r1, #1948]	; 0x79c
 801cd66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801cd6a:	d10a      	bne.n	801cd82 <MobleConfigLoadSeq+0x2e>
 801cd6c:	f891 37a8 	ldrb.w	r3, [r1, #1960]	; 0x7a8
 801cd70:	2b01      	cmp	r3, #1
 801cd72:	f04f 0000 	mov.w	r0, #0
 801cd76:	d103      	bne.n	801cd80 <MobleConfigLoadSeq+0x2c>
 801cd78:	f8d1 17a0 	ldr.w	r1, [r1, #1952]	; 0x7a0
 801cd7c:	6091      	str	r1, [r2, #8]
 801cd7e:	4770      	bx	lr
 801cd80:	6090      	str	r0, [r2, #8]
 801cd82:	2002      	movs	r0, #2
 801cd84:	4770      	bx	lr
 801cd86:	2003      	movs	r0, #3
 801cd88:	4770      	bx	lr
 801cd8a:	bf00      	nop
 801cd8c:	2000241c 	.word	0x2000241c

0801cd90 <MobleNetworkLayerInit>:
 801cd90:	b538      	push	{r3, r4, r5, lr}
 801cd92:	4604      	mov	r4, r0
 801cd94:	2500      	movs	r5, #0
 801cd96:	f880 5160 	strb.w	r5, [r0, #352]	; 0x160
 801cd9a:	f7ff fbeb 	bl	801c574 <MobleNetworkReplayCacheClearAll>
 801cd9e:	6820      	ldr	r0, [r4, #0]
 801cda0:	f7ff ffd8 	bl	801cd54 <MobleConfigLoadSeq>
 801cda4:	2801      	cmp	r0, #1
 801cda6:	bf9c      	itt	ls
 801cda8:	6823      	ldrls	r3, [r4, #0]
 801cdaa:	689d      	ldrls	r5, [r3, #8]
 801cdac:	f8c4 515c 	str.w	r5, [r4, #348]	; 0x15c
 801cdb0:	2000      	movs	r0, #0
 801cdb2:	bd38      	pop	{r3, r4, r5, pc}

0801cdb4 <MobleTransportInit>:
 801cdb4:	b510      	push	{r4, lr}
 801cdb6:	4604      	mov	r4, r0
 801cdb8:	b928      	cbnz	r0, 801cdc6 <MobleTransportInit+0x12>
 801cdba:	4b0a      	ldr	r3, [pc, #40]	; (801cde4 <MobleTransportInit+0x30>)
 801cdbc:	4a0a      	ldr	r2, [pc, #40]	; (801cde8 <MobleTransportInit+0x34>)
 801cdbe:	480b      	ldr	r0, [pc, #44]	; (801cdec <MobleTransportInit+0x38>)
 801cdc0:	21d4      	movs	r1, #212	; 0xd4
 801cdc2:	f00b fe81 	bl	8028ac8 <__assert_func>
 801cdc6:	f7ff faa3 	bl	801c310 <MobleTransSarInit>
 801cdca:	2300      	movs	r3, #0
 801cdcc:	e9c4 3302 	strd	r3, r3, [r4, #8]
 801cdd0:	7123      	strb	r3, [r4, #4]
 801cdd2:	4620      	mov	r0, r4
 801cdd4:	f7ff ffdc 	bl	801cd90 <MobleNetworkLayerInit>
 801cdd8:	2801      	cmp	r0, #1
 801cdda:	bf8c      	ite	hi
 801cddc:	2003      	movhi	r0, #3
 801cdde:	2000      	movls	r0, #0
 801cde0:	bd10      	pop	{r4, pc}
 801cde2:	bf00      	nop
 801cde4:	08033338 	.word	0x08033338
 801cde8:	08031679 	.word	0x08031679
 801cdec:	08033678 	.word	0x08033678

0801cdf0 <MobleApplicationInit>:
 801cdf0:	b508      	push	{r3, lr}
 801cdf2:	4b05      	ldr	r3, [pc, #20]	; (801ce08 <MobleApplicationInit+0x18>)
 801cdf4:	2200      	movs	r2, #0
 801cdf6:	f8c3 2954 	str.w	r2, [r3, #2388]	; 0x954
 801cdfa:	f7ff ffdb 	bl	801cdb4 <MobleTransportInit>
 801cdfe:	2801      	cmp	r0, #1
 801ce00:	bf8c      	ite	hi
 801ce02:	2003      	movhi	r0, #3
 801ce04:	2000      	movls	r0, #0
 801ce06:	bd08      	pop	{r3, pc}
 801ce08:	2000141c 	.word	0x2000141c

0801ce0c <MobleConfigInit>:
 801ce0c:	4b13      	ldr	r3, [pc, #76]	; (801ce5c <MobleConfigInit+0x50>)
 801ce0e:	4a14      	ldr	r2, [pc, #80]	; (801ce60 <MobleConfigInit+0x54>)
 801ce10:	b510      	push	{r4, lr}
 801ce12:	f503 7139 	add.w	r1, r3, #740	; 0x2e4
 801ce16:	4c13      	ldr	r4, [pc, #76]	; (801ce64 <MobleConfigInit+0x58>)
 801ce18:	f8c2 16dc 	str.w	r1, [r2, #1756]	; 0x6dc
 801ce1c:	f503 61b9 	add.w	r1, r3, #1480	; 0x5c8
 801ce20:	f8c2 46d4 	str.w	r4, [r2, #1748]	; 0x6d4
 801ce24:	f8c2 36d8 	str.w	r3, [r2, #1752]	; 0x6d8
 801ce28:	f8c2 16e0 	str.w	r1, [r2, #1760]	; 0x6e0
 801ce2c:	f604 34dc 	addw	r4, r4, #3036	; 0xbdc
 801ce30:	f603 01ac 	addw	r1, r3, #2220	; 0x8ac
 801ce34:	f503 6339 	add.w	r3, r3, #2960	; 0xb90
 801ce38:	f8c2 36e8 	str.w	r3, [r2, #1768]	; 0x6e8
 801ce3c:	f8c2 16e4 	str.w	r1, [r2, #1764]	; 0x6e4
 801ce40:	2300      	movs	r3, #0
 801ce42:	f884 379c 	strb.w	r3, [r4, #1948]	; 0x79c
 801ce46:	f7ea fa73 	bl	8007330 <PalNvmIsWriteProtected>
 801ce4a:	2801      	cmp	r0, #1
 801ce4c:	d103      	bne.n	801ce56 <MobleConfigInit+0x4a>
 801ce4e:	f884 079c 	strb.w	r0, [r4, #1948]	; 0x79c
 801ce52:	2000      	movs	r0, #0
 801ce54:	bd10      	pop	{r4, pc}
 801ce56:	f7ff fcc9 	bl	801c7ec <MobleConfigLoad>
 801ce5a:	e7fa      	b.n	801ce52 <MobleConfigInit+0x46>
 801ce5c:	200003d0 	.word	0x200003d0
 801ce60:	20002514 	.word	0x20002514
 801ce64:	20001840 	.word	0x20001840

0801ce68 <MobleConfigCheck>:
 801ce68:	b128      	cbz	r0, 801ce76 <MobleConfigCheck+0xe>
 801ce6a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801ce6e:	2800      	cmp	r0, #0
 801ce70:	bfd4      	ite	le
 801ce72:	2000      	movle	r0, #0
 801ce74:	2001      	movgt	r0, #1
 801ce76:	4770      	bx	lr

0801ce78 <MobleConfigNetworkSave>:
 801ce78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce7c:	4604      	mov	r4, r0
 801ce7e:	b920      	cbnz	r0, 801ce8a <MobleConfigNetworkSave+0x12>
 801ce80:	f04f 0803 	mov.w	r8, #3
 801ce84:	4640      	mov	r0, r8
 801ce86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ce8a:	2300      	movs	r3, #0
 801ce8c:	7043      	strb	r3, [r0, #1]
 801ce8e:	f7ff ffeb 	bl	801ce68 <MobleConfigCheck>
 801ce92:	2800      	cmp	r0, #0
 801ce94:	d0f4      	beq.n	801ce80 <MobleConfigNetworkSave+0x8>
 801ce96:	4f39      	ldr	r7, [pc, #228]	; (801cf7c <MobleConfigNetworkSave+0x104>)
 801ce98:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
 801ce9c:	f895 879c 	ldrb.w	r8, [r5, #1948]	; 0x79c
 801cea0:	f1b8 0f00 	cmp.w	r8, #0
 801cea4:	d167      	bne.n	801cf76 <MobleConfigNetworkSave+0xfe>
 801cea6:	8863      	ldrh	r3, [r4, #2]
 801cea8:	f8a7 3962 	strh.w	r3, [r7, #2402]	; 0x962
 801ceac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801ceb0:	6a21      	ldr	r1, [r4, #32]
 801ceb2:	f887 3961 	strb.w	r3, [r7, #2401]	; 0x961
 801ceb6:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801ceba:	6863      	ldr	r3, [r4, #4]
 801cebc:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 801cec0:	f205 507a 	addw	r0, r5, #1402	; 0x57a
 801cec4:	f00c fcdc 	bl	8029880 <memmove>
 801cec8:	6a21      	ldr	r1, [r4, #32]
 801ceca:	2284      	movs	r2, #132	; 0x84
 801cecc:	f501 71ba 	add.w	r1, r1, #372	; 0x174
 801ced0:	f205 60ee 	addw	r0, r5, #1774	; 0x6ee
 801ced4:	f00c fcd4 	bl	8029880 <memmove>
 801ced8:	6a21      	ldr	r1, [r4, #32]
 801ceda:	2210      	movs	r2, #16
 801cedc:	f501 71fe 	add.w	r1, r1, #508	; 0x1fc
 801cee0:	f205 7074 	addw	r0, r5, #1908	; 0x774
 801cee4:	f00c fccc 	bl	8029880 <memmove>
 801cee8:	6a23      	ldr	r3, [r4, #32]
 801ceea:	f893 21f8 	ldrb.w	r2, [r3, #504]	; 0x1f8
 801ceee:	f885 2772 	strb.w	r2, [r5, #1906]	; 0x772
 801cef2:	f893 21f9 	ldrb.w	r2, [r3, #505]	; 0x1f9
 801cef6:	f885 2773 	strb.w	r2, [r5, #1907]	; 0x773
 801cefa:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 801cefe:	f885 3784 	strb.w	r3, [r5, #1924]	; 0x784
 801cf02:	7f23      	ldrb	r3, [r4, #28]
 801cf04:	f885 3785 	strb.w	r3, [r5, #1925]	; 0x785
 801cf08:	46c1      	mov	r9, r8
 801cf0a:	f507 6a16 	add.w	sl, r7, #2400	; 0x960
 801cf0e:	f895 2785 	ldrb.w	r2, [r5, #1925]	; 0x785
 801cf12:	fa5f f689 	uxtb.w	r6, r9
 801cf16:	42b2      	cmp	r2, r6
 801cf18:	d810      	bhi.n	801cf3c <MobleConfigNetworkSave+0xc4>
 801cf1a:	2210      	movs	r2, #16
 801cf1c:	f104 010c 	add.w	r1, r4, #12
 801cf20:	f60a 6026 	addw	r0, sl, #3622	; 0xe26
 801cf24:	f00c fcac 	bl	8029880 <memmove>
 801cf28:	2301      	movs	r3, #1
 801cf2a:	f885 379d 	strb.w	r3, [r5, #1949]	; 0x79d
 801cf2e:	f7ff fd09 	bl	801c944 <MobleConfigNetworkEncode>
 801cf32:	f7ff fe39 	bl	801cba8 <MobleConfigSavedSeqEncode>
 801cf36:	f7ff fbdd 	bl	801c6f4 <MobleConfigSave>
 801cf3a:	e7a3      	b.n	801ce84 <MobleConfigNetworkSave+0xc>
 801cf3c:	eb04 0b86 	add.w	fp, r4, r6, lsl #2
 801cf40:	f44f 731a 	mov.w	r3, #616	; 0x268
 801cf44:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 801cf48:	fb03 a006 	mla	r0, r3, r6, sl
 801cf4c:	461a      	mov	r2, r3
 801cf4e:	3178      	adds	r1, #120	; 0x78
 801cf50:	3008      	adds	r0, #8
 801cf52:	f00c fc95 	bl	8029880 <memmove>
 801cf56:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 801cf5a:	443e      	add	r6, r7
 801cf5c:	f241 5370 	movw	r3, #5488	; 0x1570
 801cf60:	f892 12e0 	ldrb.w	r1, [r2, #736]	; 0x2e0
 801cf64:	54f1      	strb	r1, [r6, r3]
 801cf66:	f241 5375 	movw	r3, #5493	; 0x1575
 801cf6a:	f892 22e1 	ldrb.w	r2, [r2, #737]	; 0x2e1
 801cf6e:	54f2      	strb	r2, [r6, r3]
 801cf70:	f109 0901 	add.w	r9, r9, #1
 801cf74:	e7cb      	b.n	801cf0e <MobleConfigNetworkSave+0x96>
 801cf76:	4698      	mov	r8, r3
 801cf78:	e784      	b.n	801ce84 <MobleConfigNetworkSave+0xc>
 801cf7a:	bf00      	nop
 801cf7c:	2000141c 	.word	0x2000141c

0801cf80 <MobleGattGetAttCount>:
 801cf80:	b510      	push	{r4, lr}
 801cf82:	4602      	mov	r2, r0
 801cf84:	7884      	ldrb	r4, [r0, #2]
 801cf86:	2300      	movs	r3, #0
 801cf88:	2001      	movs	r0, #1
 801cf8a:	b2d9      	uxtb	r1, r3
 801cf8c:	428c      	cmp	r4, r1
 801cf8e:	d800      	bhi.n	801cf92 <MobleGattGetAttCount+0x12>
 801cf90:	bd10      	pop	{r4, pc}
 801cf92:	6851      	ldr	r1, [r2, #4]
 801cf94:	eb01 1103 	add.w	r1, r1, r3, lsl #4
 801cf98:	3301      	adds	r3, #1
 801cf9a:	7889      	ldrb	r1, [r1, #2]
 801cf9c:	0709      	lsls	r1, r1, #28
 801cf9e:	bf54      	ite	pl
 801cfa0:	3002      	addpl	r0, #2
 801cfa2:	3003      	addmi	r0, #3
 801cfa4:	e7f1      	b.n	801cf8a <MobleGattGetAttCount+0xa>
	...

0801cfa8 <MobleGattSetup>:
 801cfa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801cfaa:	4604      	mov	r4, r0
 801cfac:	2800      	cmp	r0, #0
 801cfae:	d06f      	beq.n	801d090 <MobleGattSetup+0xe8>
 801cfb0:	6803      	ldr	r3, [r0, #0]
 801cfb2:	f8d0 5164 	ldr.w	r5, [r0, #356]	; 0x164
 801cfb6:	781e      	ldrb	r6, [r3, #0]
 801cfb8:	882b      	ldrh	r3, [r5, #0]
 801cfba:	bb66      	cbnz	r6, 801d016 <MobleGattSetup+0x6e>
 801cfbc:	f641 0228 	movw	r2, #6184	; 0x1828
 801cfc0:	4293      	cmp	r3, r2
 801cfc2:	d01d      	beq.n	801d000 <MobleGattSetup+0x58>
 801cfc4:	4b33      	ldr	r3, [pc, #204]	; (801d094 <MobleGattSetup+0xec>)
 801cfc6:	f8c4 3164 	str.w	r3, [r4, #356]	; 0x164
 801cfca:	f8d4 5164 	ldr.w	r5, [r4, #356]	; 0x164
 801cfce:	4628      	mov	r0, r5
 801cfd0:	f7ff ffd6 	bl	801cf80 <MobleGattGetAttCount>
 801cfd4:	462b      	mov	r3, r5
 801cfd6:	b2c2      	uxtb	r2, r0
 801cfd8:	f833 1b08 	ldrh.w	r1, [r3], #8
 801cfdc:	2001      	movs	r0, #1
 801cfde:	f7fa ff73 	bl	8017ec8 <MoblePalBluetoothGattAddService>
 801cfe2:	2801      	cmp	r0, #1
 801cfe4:	d815      	bhi.n	801d012 <MobleGattSetup+0x6a>
 801cfe6:	686b      	ldr	r3, [r5, #4]
 801cfe8:	bb83      	cbnz	r3, 801d04c <MobleGattSetup+0xa4>
 801cfea:	2000      	movs	r0, #0
 801cfec:	e011      	b.n	801d012 <MobleGattSetup+0x6a>
 801cfee:	686b      	ldr	r3, [r5, #4]
 801cff0:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801cff4:	3601      	adds	r6, #1
 801cff6:	68d9      	ldr	r1, [r3, #12]
 801cff8:	f7fa ffd7 	bl	8017faa <MoblePalBluetoothGattDelCharacteristic>
 801cffc:	2801      	cmp	r0, #1
 801cffe:	d808      	bhi.n	801d012 <MobleGattSetup+0x6a>
 801d000:	78ab      	ldrb	r3, [r5, #2]
 801d002:	68a8      	ldr	r0, [r5, #8]
 801d004:	b2f2      	uxtb	r2, r6
 801d006:	4293      	cmp	r3, r2
 801d008:	d8f1      	bhi.n	801cfee <MobleGattSetup+0x46>
 801d00a:	f7fa ff7f 	bl	8017f0c <MoblePalBluetoothGattDelService>
 801d00e:	2801      	cmp	r0, #1
 801d010:	d9d8      	bls.n	801cfc4 <MobleGattSetup+0x1c>
 801d012:	b004      	add	sp, #16
 801d014:	bd70      	pop	{r4, r5, r6, pc}
 801d016:	f641 0227 	movw	r2, #6183	; 0x1827
 801d01a:	4293      	cmp	r3, r2
 801d01c:	d014      	beq.n	801d048 <MobleGattSetup+0xa0>
 801d01e:	4b1e      	ldr	r3, [pc, #120]	; (801d098 <MobleGattSetup+0xf0>)
 801d020:	e7d1      	b.n	801cfc6 <MobleGattSetup+0x1e>
 801d022:	686b      	ldr	r3, [r5, #4]
 801d024:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 801d028:	3601      	adds	r6, #1
 801d02a:	68d9      	ldr	r1, [r3, #12]
 801d02c:	f7fa ffbd 	bl	8017faa <MoblePalBluetoothGattDelCharacteristic>
 801d030:	2801      	cmp	r0, #1
 801d032:	d8ee      	bhi.n	801d012 <MobleGattSetup+0x6a>
 801d034:	78ab      	ldrb	r3, [r5, #2]
 801d036:	68a8      	ldr	r0, [r5, #8]
 801d038:	b2f2      	uxtb	r2, r6
 801d03a:	4293      	cmp	r3, r2
 801d03c:	d8f1      	bhi.n	801d022 <MobleGattSetup+0x7a>
 801d03e:	f7fa ff65 	bl	8017f0c <MoblePalBluetoothGattDelService>
 801d042:	2801      	cmp	r0, #1
 801d044:	d9eb      	bls.n	801d01e <MobleGattSetup+0x76>
 801d046:	e7e4      	b.n	801d012 <MobleGattSetup+0x6a>
 801d048:	2600      	movs	r6, #0
 801d04a:	e7f3      	b.n	801d034 <MobleGattSetup+0x8c>
 801d04c:	78ab      	ldrb	r3, [r5, #2]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	d0cb      	beq.n	801cfea <MobleGattSetup+0x42>
 801d052:	2600      	movs	r6, #0
 801d054:	6869      	ldr	r1, [r5, #4]
 801d056:	b2f4      	uxtb	r4, r6
 801d058:	0120      	lsls	r0, r4, #4
 801d05a:	eb01 1404 	add.w	r4, r1, r4, lsl #4
 801d05e:	5a09      	ldrh	r1, [r1, r0]
 801d060:	7963      	ldrb	r3, [r4, #5]
 801d062:	7922      	ldrb	r2, [r4, #4]
 801d064:	f104 000c 	add.w	r0, r4, #12
 801d068:	9002      	str	r0, [sp, #8]
 801d06a:	78e0      	ldrb	r0, [r4, #3]
 801d06c:	9001      	str	r0, [sp, #4]
 801d06e:	78a0      	ldrb	r0, [r4, #2]
 801d070:	9000      	str	r0, [sp, #0]
 801d072:	68a8      	ldr	r0, [r5, #8]
 801d074:	f7fa ff52 	bl	8017f1c <MoblePalBluetoothGattAddCharacteristic>
 801d078:	2801      	cmp	r0, #1
 801d07a:	d8ca      	bhi.n	801d012 <MobleGattSetup+0x6a>
 801d07c:	68a3      	ldr	r3, [r4, #8]
 801d07e:	b10b      	cbz	r3, 801d084 <MobleGattSetup+0xdc>
 801d080:	89a0      	ldrh	r0, [r4, #12]
 801d082:	4798      	blx	r3
 801d084:	78aa      	ldrb	r2, [r5, #2]
 801d086:	3601      	adds	r6, #1
 801d088:	b2f3      	uxtb	r3, r6
 801d08a:	429a      	cmp	r2, r3
 801d08c:	d8e2      	bhi.n	801d054 <MobleGattSetup+0xac>
 801d08e:	e7ac      	b.n	801cfea <MobleGattSetup+0x42>
 801d090:	2003      	movs	r0, #3
 801d092:	e7be      	b.n	801d012 <MobleGattSetup+0x6a>
 801d094:	20000014 	.word	0x20000014
 801d098:	20000020 	.word	0x20000020

0801d09c <MobleStackGattSetup>:
 801d09c:	4801      	ldr	r0, [pc, #4]	; (801d0a4 <MobleStackGattSetup+0x8>)
 801d09e:	f7ff bf83 	b.w	801cfa8 <MobleGattSetup>
 801d0a2:	bf00      	nop
 801d0a4:	20001a9c 	.word	0x20001a9c

0801d0a8 <BLEMesh_GetAddress>:
 801d0a8:	4b06      	ldr	r3, [pc, #24]	; (801d0c4 <BLEMesh_GetAddress+0x1c>)
 801d0aa:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d0ae:	b138      	cbz	r0, 801d0c0 <BLEMesh_GetAddress+0x18>
 801d0b0:	f893 26b4 	ldrb.w	r2, [r3, #1716]	; 0x6b4
 801d0b4:	2a01      	cmp	r2, #1
 801d0b6:	d102      	bne.n	801d0be <BLEMesh_GetAddress+0x16>
 801d0b8:	f8b3 06b6 	ldrh.w	r0, [r3, #1718]	; 0x6b6
 801d0bc:	4770      	bx	lr
 801d0be:	2000      	movs	r0, #0
 801d0c0:	4770      	bx	lr
 801d0c2:	bf00      	nop
 801d0c4:	20002514 	.word	0x20002514

0801d0c8 <BLEMesh_GetPublishAddress>:
 801d0c8:	2804      	cmp	r0, #4
 801d0ca:	b570      	push	{r4, r5, r6, lr}
 801d0cc:	d81b      	bhi.n	801d106 <BLEMesh_GetPublishAddress+0x3e>
 801d0ce:	4a0f      	ldr	r2, [pc, #60]	; (801d10c <BLEMesh_GetPublishAddress+0x44>)
 801d0d0:	f8d2 36f0 	ldr.w	r3, [r2, #1776]	; 0x6f0
 801d0d4:	b1bb      	cbz	r3, 801d106 <BLEMesh_GetPublishAddress+0x3e>
 801d0d6:	f892 36b4 	ldrb.w	r3, [r2, #1716]	; 0x6b4
 801d0da:	2b01      	cmp	r3, #1
 801d0dc:	d113      	bne.n	801d106 <BLEMesh_GetPublishAddress+0x3e>
 801d0de:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801d0e2:	2300      	movs	r3, #0
 801d0e4:	f8d2 26d8 	ldr.w	r2, [r2, #1752]	; 0x6d8
 801d0e8:	2538      	movs	r5, #56	; 0x38
 801d0ea:	f102 0478 	add.w	r4, r2, #120	; 0x78
 801d0ee:	fb05 f003 	mul.w	r0, r5, r3
 801d0f2:	5826      	ldr	r6, [r4, r0]
 801d0f4:	428e      	cmp	r6, r1
 801d0f6:	d103      	bne.n	801d100 <BLEMesh_GetPublishAddress+0x38>
 801d0f8:	4402      	add	r2, r0
 801d0fa:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
 801d0fe:	bd70      	pop	{r4, r5, r6, pc}
 801d100:	3301      	adds	r3, #1
 801d102:	2b0b      	cmp	r3, #11
 801d104:	d1f3      	bne.n	801d0ee <BLEMesh_GetPublishAddress+0x26>
 801d106:	2000      	movs	r0, #0
 801d108:	e7f9      	b.n	801d0fe <BLEMesh_GetPublishAddress+0x36>
 801d10a:	bf00      	nop
 801d10c:	20002514 	.word	0x20002514

0801d110 <BLEMesh_GetTotalModelsCount>:
 801d110:	200b      	movs	r0, #11
 801d112:	4770      	bx	lr

0801d114 <BLEMesh_GetNumberOfElements>:
 801d114:	2005      	movs	r0, #5
 801d116:	4770      	bx	lr

0801d118 <BLEMesh_GetAppKeysCount>:
 801d118:	2003      	movs	r0, #3
 801d11a:	4770      	bx	lr

0801d11c <BLEMesh_GetNetKeysCount>:
 801d11c:	2003      	movs	r0, #3
 801d11e:	4770      	bx	lr

0801d120 <BLEMesh_GetSubscriptionCount>:
 801d120:	200a      	movs	r0, #10
 801d122:	4770      	bx	lr

0801d124 <BLEMesh_GetTTL>:
 801d124:	4b03      	ldr	r3, [pc, #12]	; (801d134 <BLEMesh_GetTTL+0x10>)
 801d126:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d12a:	b110      	cbz	r0, 801d132 <BLEMesh_GetTTL+0xe>
 801d12c:	4b02      	ldr	r3, [pc, #8]	; (801d138 <BLEMesh_GetTTL+0x14>)
 801d12e:	f893 00b5 	ldrb.w	r0, [r3, #181]	; 0xb5
 801d132:	4770      	bx	lr
 801d134:	20002514 	.word	0x20002514
 801d138:	20000324 	.word	0x20000324

0801d13c <BLEMesh_GetNetworkTransmitCount>:
 801d13c:	4b04      	ldr	r3, [pc, #16]	; (801d150 <BLEMesh_GetNetworkTransmitCount+0x14>)
 801d13e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d142:	b120      	cbz	r0, 801d14e <BLEMesh_GetNetworkTransmitCount+0x12>
 801d144:	4b03      	ldr	r3, [pc, #12]	; (801d154 <BLEMesh_GetNetworkTransmitCount+0x18>)
 801d146:	f893 00b6 	ldrb.w	r0, [r3, #182]	; 0xb6
 801d14a:	3001      	adds	r0, #1
 801d14c:	b2c0      	uxtb	r0, r0
 801d14e:	4770      	bx	lr
 801d150:	20002514 	.word	0x20002514
 801d154:	20000324 	.word	0x20000324

0801d158 <BLEMesh_GetRelayRetransmitCount>:
 801d158:	4b04      	ldr	r3, [pc, #16]	; (801d16c <BLEMesh_GetRelayRetransmitCount+0x14>)
 801d15a:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d15e:	b120      	cbz	r0, 801d16a <BLEMesh_GetRelayRetransmitCount+0x12>
 801d160:	4b03      	ldr	r3, [pc, #12]	; (801d170 <BLEMesh_GetRelayRetransmitCount+0x18>)
 801d162:	f893 00b8 	ldrb.w	r0, [r3, #184]	; 0xb8
 801d166:	3001      	adds	r0, #1
 801d168:	b2c0      	uxtb	r0, r0
 801d16a:	4770      	bx	lr
 801d16c:	20002514 	.word	0x20002514
 801d170:	20000324 	.word	0x20000324

0801d174 <BLEMesh_SetAttentionTimerCallback>:
 801d174:	4b04      	ldr	r3, [pc, #16]	; (801d188 <BLEMesh_SetAttentionTimerCallback+0x14>)
 801d176:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 801d17a:	b11b      	cbz	r3, 801d184 <BLEMesh_SetAttentionTimerCallback+0x10>
 801d17c:	f8c3 01f4 	str.w	r0, [r3, #500]	; 0x1f4
 801d180:	2000      	movs	r0, #0
 801d182:	4770      	bx	lr
 801d184:	2002      	movs	r0, #2
 801d186:	4770      	bx	lr
 801d188:	20002514 	.word	0x20002514

0801d18c <BLEMesh_SetUnprovisionedDevBeaconInterval>:
 801d18c:	1e42      	subs	r2, r0, #1
 801d18e:	2a62      	cmp	r2, #98	; 0x62
 801d190:	b508      	push	{r3, lr}
 801d192:	4603      	mov	r3, r0
 801d194:	d801      	bhi.n	801d19a <BLEMesh_SetUnprovisionedDevBeaconInterval+0xe>
 801d196:	2002      	movs	r0, #2
 801d198:	bd08      	pop	{r3, pc}
 801d19a:	490b      	ldr	r1, [pc, #44]	; (801d1c8 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x3c>)
 801d19c:	f8d1 26f0 	ldr.w	r2, [r1, #1776]	; 0x6f0
 801d1a0:	2a00      	cmp	r2, #0
 801d1a2:	d0f8      	beq.n	801d196 <BLEMesh_SetUnprovisionedDevBeaconInterval+0xa>
 801d1a4:	f891 16b4 	ldrb.w	r1, [r1, #1716]	; 0x6b4
 801d1a8:	2901      	cmp	r1, #1
 801d1aa:	d0f4      	beq.n	801d196 <BLEMesh_SetUnprovisionedDevBeaconInterval+0xa>
 801d1ac:	f8d2 01d8 	ldr.w	r0, [r2, #472]	; 0x1d8
 801d1b0:	b92b      	cbnz	r3, 801d1be <BLEMesh_SetUnprovisionedDevBeaconInterval+0x32>
 801d1b2:	f7fd fd19 	bl	801abe8 <BnrgmTransmitDisableRegularlyGeneratedBeacon>
 801d1b6:	2801      	cmp	r0, #1
 801d1b8:	d8ed      	bhi.n	801d196 <BLEMesh_SetUnprovisionedDevBeaconInterval+0xa>
 801d1ba:	2000      	movs	r0, #0
 801d1bc:	e7ec      	b.n	801d198 <BLEMesh_SetUnprovisionedDevBeaconInterval+0xc>
 801d1be:	f8a2 31dc 	strh.w	r3, [r2, #476]	; 0x1dc
 801d1c2:	f7fd fd23 	bl	801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801d1c6:	e7f6      	b.n	801d1b6 <BLEMesh_SetUnprovisionedDevBeaconInterval+0x2a>
 801d1c8:	20002514 	.word	0x20002514

0801d1cc <BnrgmCustomBeaconGenerator>:
 801d1cc:	b507      	push	{r0, r1, r2, lr}
 801d1ce:	2300      	movs	r3, #0
 801d1d0:	291e      	cmp	r1, #30
 801d1d2:	9301      	str	r3, [sp, #4]
 801d1d4:	dc06      	bgt.n	801d1e4 <BnrgmCustomBeaconGenerator+0x18>
 801d1d6:	f04f 33ff 	mov.w	r3, #4294967295
 801d1da:	9301      	str	r3, [sp, #4]
 801d1dc:	9801      	ldr	r0, [sp, #4]
 801d1de:	b003      	add	sp, #12
 801d1e0:	f85d fb04 	ldr.w	pc, [sp], #4
 801d1e4:	a901      	add	r1, sp, #4
 801d1e6:	f7e9 fa5d 	bl	80066a4 <BLEMesh_CustomBeaconGeneratorCallback>
 801d1ea:	9b01      	ldr	r3, [sp, #4]
 801d1ec:	2b1f      	cmp	r3, #31
 801d1ee:	d8f2      	bhi.n	801d1d6 <BnrgmCustomBeaconGenerator+0xa>
 801d1f0:	e7f4      	b.n	801d1dc <BnrgmCustomBeaconGenerator+0x10>

0801d1f2 <BLEMesh_CustomBeaconReceivedCallback>:
 801d1f2:	4770      	bx	lr

0801d1f4 <BLEMesh_TrsptIsBusyState>:
 801d1f4:	4b02      	ldr	r3, [pc, #8]	; (801d200 <BLEMesh_TrsptIsBusyState+0xc>)
 801d1f6:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801d1fa:	f7ff b875 	b.w	801c2e8 <MobleTransportIsBusy>
 801d1fe:	bf00      	nop
 801d200:	20002514 	.word	0x20002514

0801d204 <BnrgmLibraryFnOnFriendshipEstablished>:
 801d204:	b513      	push	{r0, r1, r4, lr}
 801d206:	f8bd 4010 	ldrh.w	r4, [sp, #16]
 801d20a:	9400      	str	r4, [sp, #0]
 801d20c:	2464      	movs	r4, #100	; 0x64
 801d20e:	fbb2 f2f4 	udiv	r2, r2, r4
 801d212:	f7e9 f945 	bl	80064a0 <BLEMesh_FnFriendshipEstablishedCallback>
 801d216:	b002      	add	sp, #8
 801d218:	bd10      	pop	{r4, pc}

0801d21a <BLEMesh_PvnrDataInputCallback>:
 801d21a:	2000      	movs	r0, #0
 801d21c:	4770      	bx	lr
	...

0801d220 <MobleStackCreateStartFastAdvTimer>:
 801d220:	b510      	push	{r4, lr}
 801d222:	4c13      	ldr	r4, [pc, #76]	; (801d270 <MobleStackCreateStartFastAdvTimer+0x50>)
 801d224:	4913      	ldr	r1, [pc, #76]	; (801d274 <MobleStackCreateStartFastAdvTimer+0x54>)
 801d226:	f504 62d0 	add.w	r2, r4, #1664	; 0x680
 801d22a:	f504 60ff 	add.w	r0, r4, #2040	; 0x7f8
 801d22e:	f7fa fc87 	bl	8017b40 <MoblePalTimerCreate>
 801d232:	2801      	cmp	r0, #1
 801d234:	4602      	mov	r2, r0
 801d236:	d909      	bls.n	801d24c <MobleStackCreateStartFastAdvTimer+0x2c>
 801d238:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	; 0x7f8
 801d23c:	b108      	cbz	r0, 801d242 <MobleStackCreateStartFastAdvTimer+0x22>
 801d23e:	f7fa fd31 	bl	8017ca4 <MoblePalTimerDestroy>
 801d242:	2300      	movs	r3, #0
 801d244:	f8c4 37f8 	str.w	r3, [r4, #2040]	; 0x7f8
 801d248:	4610      	mov	r0, r2
 801d24a:	bd10      	pop	{r4, pc}
 801d24c:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	; 0x7f8
 801d250:	f64e 2160 	movw	r1, #60000	; 0xea60
 801d254:	f7fa fcde 	bl	8017c14 <MoblePalTimerStartOnce>
 801d258:	2801      	cmp	r0, #1
 801d25a:	4602      	mov	r2, r0
 801d25c:	d8f4      	bhi.n	801d248 <MobleStackCreateStartFastAdvTimer+0x28>
 801d25e:	23c8      	movs	r3, #200	; 0xc8
 801d260:	f8d4 0860 	ldr.w	r0, [r4, #2144]	; 0x860
 801d264:	f8a4 3864 	strh.w	r3, [r4, #2148]	; 0x864
 801d268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d26c:	f7fd bcce 	b.w	801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>
 801d270:	2000141c 	.word	0x2000141c
 801d274:	0801ac49 	.word	0x0801ac49

0801d278 <MobleStackResetSeq>:
 801d278:	4a04      	ldr	r2, [pc, #16]	; (801d28c <MobleStackResetSeq+0x14>)
 801d27a:	f8d2 0680 	ldr.w	r0, [r2, #1664]	; 0x680
 801d27e:	2300      	movs	r3, #0
 801d280:	f8c2 37dc 	str.w	r3, [r2, #2012]	; 0x7dc
 801d284:	6083      	str	r3, [r0, #8]
 801d286:	f7ff bd27 	b.w	801ccd8 <MobleConfigSaveSeq>
 801d28a:	bf00      	nop
 801d28c:	2000141c 	.word	0x2000141c

0801d290 <BnrgmStackSetDummyProxyModeState>:
 801d290:	b510      	push	{r4, lr}
 801d292:	f890 32ad 	ldrb.w	r3, [r0, #685]	; 0x2ad
 801d296:	428b      	cmp	r3, r1
 801d298:	4604      	mov	r4, r0
 801d29a:	d101      	bne.n	801d2a0 <BnrgmStackSetDummyProxyModeState+0x10>
 801d29c:	2002      	movs	r0, #2
 801d29e:	bd10      	pop	{r4, pc}
 801d2a0:	2901      	cmp	r1, #1
 801d2a2:	f880 12ad 	strb.w	r1, [r0, #685]	; 0x2ad
 801d2a6:	d10f      	bne.n	801d2c8 <BnrgmStackSetDummyProxyModeState+0x38>
 801d2a8:	4a0b      	ldr	r2, [pc, #44]	; (801d2d8 <BnrgmStackSetDummyProxyModeState+0x48>)
 801d2aa:	490c      	ldr	r1, [pc, #48]	; (801d2dc <BnrgmStackSetDummyProxyModeState+0x4c>)
 801d2ac:	f502 702c 	add.w	r0, r2, #688	; 0x2b0
 801d2b0:	f7fa fc46 	bl	8017b40 <MoblePalTimerCreate>
 801d2b4:	2801      	cmp	r0, #1
 801d2b6:	d8f1      	bhi.n	801d29c <BnrgmStackSetDummyProxyModeState+0xc>
 801d2b8:	f8d4 02b0 	ldr.w	r0, [r4, #688]	; 0x2b0
 801d2bc:	f64e 2160 	movw	r1, #60000	; 0xea60
 801d2c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d2c4:	f7fa bca6 	b.w	8017c14 <MoblePalTimerStartOnce>
 801d2c8:	f8d0 32b0 	ldr.w	r3, [r0, #688]	; 0x2b0
 801d2cc:	b113      	cbz	r3, 801d2d4 <BnrgmStackSetDummyProxyModeState+0x44>
 801d2ce:	2000      	movs	r0, #0
 801d2d0:	7018      	strb	r0, [r3, #0]
 801d2d2:	e7e4      	b.n	801d29e <BnrgmStackSetDummyProxyModeState+0xe>
 801d2d4:	2003      	movs	r0, #3
 801d2d6:	e7e2      	b.n	801d29e <BnrgmStackSetDummyProxyModeState+0xe>
 801d2d8:	20001a9c 	.word	0x20001a9c
 801d2dc:	0801f845 	.word	0x0801f845

0801d2e0 <BnrgmStackConsumeSeqNo>:
 801d2e0:	4807      	ldr	r0, [pc, #28]	; (801d300 <BnrgmStackConsumeSeqNo+0x20>)
 801d2e2:	b510      	push	{r4, lr}
 801d2e4:	f8d0 47dc 	ldr.w	r4, [r0, #2012]	; 0x7dc
 801d2e8:	1c63      	adds	r3, r4, #1
 801d2ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801d2ee:	f8c0 37dc 	str.w	r3, [r0, #2012]	; 0x7dc
 801d2f2:	f500 60d0 	add.w	r0, r0, #1664	; 0x680
 801d2f6:	f7ff fd03 	bl	801cd00 <MobleNetworkSaveSeqNum>
 801d2fa:	4620      	mov	r0, r4
 801d2fc:	bd10      	pop	{r4, pc}
 801d2fe:	bf00      	nop
 801d300:	2000141c 	.word	0x2000141c

0801d304 <BLEMesh_NeighborTableInit>:
 801d304:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d306:	f103 3cff 	add.w	ip, r3, #4294967295
 801d30a:	f1bc 0f18 	cmp.w	ip, #24
 801d30e:	f89d 4014 	ldrb.w	r4, [sp, #20]
 801d312:	f89d 7018 	ldrb.w	r7, [sp, #24]
 801d316:	f89d 601c 	ldrb.w	r6, [sp, #28]
 801d31a:	f89d 5020 	ldrb.w	r5, [sp, #32]
 801d31e:	d81a      	bhi.n	801d356 <BLEMesh_NeighborTableInit+0x52>
 801d320:	b1d8      	cbz	r0, 801d35a <BLEMesh_NeighborTableInit+0x56>
 801d322:	b1d2      	cbz	r2, 801d35a <BLEMesh_NeighborTableInit+0x56>
 801d324:	ebb1 1f43 	cmp.w	r1, r3, lsl #5
 801d328:	d317      	bcc.n	801d35a <BLEMesh_NeighborTableInit+0x56>
 801d32a:	b1b4      	cbz	r4, 801d35a <BLEMesh_NeighborTableInit+0x56>
 801d32c:	2f01      	cmp	r7, #1
 801d32e:	d814      	bhi.n	801d35a <BLEMesh_NeighborTableInit+0x56>
 801d330:	2e01      	cmp	r6, #1
 801d332:	d812      	bhi.n	801d35a <BLEMesh_NeighborTableInit+0x56>
 801d334:	2d02      	cmp	r5, #2
 801d336:	d810      	bhi.n	801d35a <BLEMesh_NeighborTableInit+0x56>
 801d338:	f880 3158 	strb.w	r3, [r0, #344]	; 0x158
 801d33c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801d340:	435c      	muls	r4, r3
 801d342:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
 801d346:	f8c0 4154 	str.w	r4, [r0, #340]	; 0x154
 801d34a:	f880 7159 	strb.w	r7, [r0, #345]	; 0x159
 801d34e:	f880 615a 	strb.w	r6, [r0, #346]	; 0x15a
 801d352:	f880 515b 	strb.w	r5, [r0, #347]	; 0x15b
 801d356:	2000      	movs	r0, #0
 801d358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d35a:	2003      	movs	r0, #3
 801d35c:	e7fc      	b.n	801d358 <BLEMesh_NeighborTableInit+0x54>

0801d35e <BLEMesh_UpdateNeighbors>:
 801d35e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d362:	b08b      	sub	sp, #44	; 0x2c
 801d364:	4699      	mov	r9, r3
 801d366:	f99d 3054 	ldrsb.w	r3, [sp, #84]	; 0x54
 801d36a:	9304      	str	r3, [sp, #16]
 801d36c:	f8bd 3058 	ldrh.w	r3, [sp, #88]	; 0x58
 801d370:	9306      	str	r3, [sp, #24]
 801d372:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
 801d376:	f8d0 7150 	ldr.w	r7, [r0, #336]	; 0x150
 801d37a:	9308      	str	r3, [sp, #32]
 801d37c:	4606      	mov	r6, r0
 801d37e:	460c      	mov	r4, r1
 801d380:	4692      	mov	sl, r2
 801d382:	f7ea fd6f 	bl	8007e64 <HAL_GetTick>
 801d386:	9005      	str	r0, [sp, #20]
 801d388:	b177      	cbz	r7, 801d3a8 <BLEMesh_UpdateNeighbors+0x4a>
 801d38a:	9b08      	ldr	r3, [sp, #32]
 801d38c:	b163      	cbz	r3, 801d3a8 <BLEMesh_UpdateNeighbors+0x4a>
 801d38e:	f1ba 0f00 	cmp.w	sl, #0
 801d392:	d009      	beq.n	801d3a8 <BLEMesh_UpdateNeighbors+0x4a>
 801d394:	2c03      	cmp	r4, #3
 801d396:	d807      	bhi.n	801d3a8 <BLEMesh_UpdateNeighbors+0x4a>
 801d398:	e8df f004 	tbb	[pc, r4]
 801d39c:	0f0c0902 	.word	0x0f0c0902
 801d3a0:	f896 3159 	ldrb.w	r3, [r6, #345]	; 0x159
 801d3a4:	2b01      	cmp	r3, #1
 801d3a6:	d023      	beq.n	801d3f0 <BLEMesh_UpdateNeighbors+0x92>
 801d3a8:	b00b      	add	sp, #44	; 0x2c
 801d3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d3ae:	f896 315a 	ldrb.w	r3, [r6, #346]	; 0x15a
 801d3b2:	e7f7      	b.n	801d3a4 <BLEMesh_UpdateNeighbors+0x46>
 801d3b4:	f896 315b 	ldrb.w	r3, [r6, #347]	; 0x15b
 801d3b8:	e7f4      	b.n	801d3a4 <BLEMesh_UpdateNeighbors+0x46>
 801d3ba:	f896 315b 	ldrb.w	r3, [r6, #347]	; 0x15b
 801d3be:	2b02      	cmp	r3, #2
 801d3c0:	e7f1      	b.n	801d3a6 <BLEMesh_UpdateNeighbors+0x48>
 801d3c2:	9b03      	ldr	r3, [sp, #12]
 801d3c4:	bb23      	cbnz	r3, 801d410 <BLEMesh_UpdateNeighbors+0xb2>
 801d3c6:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801d3ca:	7f9a      	ldrb	r2, [r3, #30]
 801d3cc:	9203      	str	r2, [sp, #12]
 801d3ce:	2a01      	cmp	r2, #1
 801d3d0:	d11c      	bne.n	801d40c <BLEMesh_UpdateNeighbors+0xae>
 801d3d2:	9905      	ldr	r1, [sp, #20]
 801d3d4:	699a      	ldr	r2, [r3, #24]
 801d3d6:	1a8a      	subs	r2, r1, r2
 801d3d8:	f8d6 1154 	ldr.w	r1, [r6, #340]	; 0x154
 801d3dc:	428a      	cmp	r2, r1
 801d3de:	f240 8084 	bls.w	801d4ea <BLEMesh_UpdateNeighbors+0x18c>
 801d3e2:	f04f 0200 	mov.w	r2, #0
 801d3e6:	2c00      	cmp	r4, #0
 801d3e8:	779a      	strb	r2, [r3, #30]
 801d3ea:	da18      	bge.n	801d41e <BLEMesh_UpdateNeighbors+0xc0>
 801d3ec:	b26c      	sxtb	r4, r5
 801d3ee:	e016      	b.n	801d41e <BLEMesh_UpdateNeighbors+0xc0>
 801d3f0:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 801d3f4:	9307      	str	r3, [sp, #28]
 801d3f6:	2b00      	cmp	r3, #0
 801d3f8:	f04f 0b00 	mov.w	fp, #0
 801d3fc:	9b06      	ldr	r3, [sp, #24]
 801d3fe:	bfd8      	it	le
 801d400:	2300      	movle	r3, #0
 801d402:	9309      	str	r3, [sp, #36]	; 0x24
 801d404:	f04f 34ff 	mov.w	r4, #4294967295
 801d408:	465d      	mov	r5, fp
 801d40a:	e7dc      	b.n	801d3c6 <BLEMesh_UpdateNeighbors+0x68>
 801d40c:	2300      	movs	r3, #0
 801d40e:	9303      	str	r3, [sp, #12]
 801d410:	2c00      	cmp	r4, #0
 801d412:	da04      	bge.n	801d41e <BLEMesh_UpdateNeighbors+0xc0>
 801d414:	eb07 1345 	add.w	r3, r7, r5, lsl #5
 801d418:	7f9b      	ldrb	r3, [r3, #30]
 801d41a:	2b00      	cmp	r3, #0
 801d41c:	d0e6      	beq.n	801d3ec <BLEMesh_UpdateNeighbors+0x8e>
 801d41e:	f1bb 0f00 	cmp.w	fp, #0
 801d422:	d12e      	bne.n	801d482 <BLEMesh_UpdateNeighbors+0x124>
 801d424:	eb07 1845 	add.w	r8, r7, r5, lsl #5
 801d428:	f898 301e 	ldrb.w	r3, [r8, #30]
 801d42c:	2b01      	cmp	r3, #1
 801d42e:	d128      	bne.n	801d482 <BLEMesh_UpdateNeighbors+0x124>
 801d430:	2206      	movs	r2, #6
 801d432:	4641      	mov	r1, r8
 801d434:	4650      	mov	r0, sl
 801d436:	f00c fa13 	bl	8029860 <memcmp>
 801d43a:	bb10      	cbnz	r0, 801d482 <BLEMesh_UpdateNeighbors+0x124>
 801d43c:	9b05      	ldr	r3, [sp, #20]
 801d43e:	f8c8 3018 	str.w	r3, [r8, #24]
 801d442:	9b04      	ldr	r3, [sp, #16]
 801d444:	f888 301c 	strb.w	r3, [r8, #28]
 801d448:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d44a:	f888 901d 	strb.w	r9, [r8, #29]
 801d44e:	f108 0b06 	add.w	fp, r8, #6
 801d452:	2b00      	cmp	r3, #0
 801d454:	d04c      	beq.n	801d4f0 <BLEMesh_UpdateNeighbors+0x192>
 801d456:	4619      	mov	r1, r3
 801d458:	465a      	mov	r2, fp
 801d45a:	3110      	adds	r1, #16
 801d45c:	f853 0b04 	ldr.w	r0, [r3], #4
 801d460:	f842 0b04 	str.w	r0, [r2], #4
 801d464:	428b      	cmp	r3, r1
 801d466:	d1f9      	bne.n	801d45c <BLEMesh_UpdateNeighbors+0xfe>
 801d468:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d46a:	f8a8 3016 	strh.w	r3, [r8, #22]
 801d46e:	9b04      	ldr	r3, [sp, #16]
 801d470:	9300      	str	r3, [sp, #0]
 801d472:	465a      	mov	r2, fp
 801d474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d476:	4649      	mov	r1, r9
 801d478:	4640      	mov	r0, r8
 801d47a:	f7e9 f8df 	bl	800663c <BLEMesh_NeighborRefreshedCallback>
 801d47e:	f04f 0b01 	mov.w	fp, #1
 801d482:	9b08      	ldr	r3, [sp, #32]
 801d484:	3501      	adds	r5, #1
 801d486:	b2ad      	uxth	r5, r5
 801d488:	42ab      	cmp	r3, r5
 801d48a:	d89a      	bhi.n	801d3c2 <BLEMesh_UpdateNeighbors+0x64>
 801d48c:	f1bb 0f00 	cmp.w	fp, #0
 801d490:	d18a      	bne.n	801d3a8 <BLEMesh_UpdateNeighbors+0x4a>
 801d492:	2c00      	cmp	r4, #0
 801d494:	db88      	blt.n	801d3a8 <BLEMesh_UpdateNeighbors+0x4a>
 801d496:	eb07 1444 	add.w	r4, r7, r4, lsl #5
 801d49a:	2301      	movs	r3, #1
 801d49c:	77a3      	strb	r3, [r4, #30]
 801d49e:	9b05      	ldr	r3, [sp, #20]
 801d4a0:	61a3      	str	r3, [r4, #24]
 801d4a2:	2206      	movs	r2, #6
 801d4a4:	4651      	mov	r1, sl
 801d4a6:	4620      	mov	r0, r4
 801d4a8:	f00c f9ea 	bl	8029880 <memmove>
 801d4ac:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801d4ae:	f884 901d 	strb.w	r9, [r4, #29]
 801d4b2:	1da2      	adds	r2, r4, #6
 801d4b4:	b143      	cbz	r3, 801d4c8 <BLEMesh_UpdateNeighbors+0x16a>
 801d4b6:	4611      	mov	r1, r2
 801d4b8:	f103 0010 	add.w	r0, r3, #16
 801d4bc:	f853 6b04 	ldr.w	r6, [r3], #4
 801d4c0:	f841 6b04 	str.w	r6, [r1], #4
 801d4c4:	4283      	cmp	r3, r0
 801d4c6:	d1f9      	bne.n	801d4bc <BLEMesh_UpdateNeighbors+0x15e>
 801d4c8:	9b07      	ldr	r3, [sp, #28]
 801d4ca:	9904      	ldr	r1, [sp, #16]
 801d4cc:	2b00      	cmp	r3, #0
 801d4ce:	bfc2      	ittt	gt
 801d4d0:	eb07 1545 	addgt.w	r5, r7, r5, lsl #5
 801d4d4:	9b06      	ldrgt	r3, [sp, #24]
 801d4d6:	82eb      	strhgt	r3, [r5, #22]
 801d4d8:	9b04      	ldr	r3, [sp, #16]
 801d4da:	7723      	strb	r3, [r4, #28]
 801d4dc:	4620      	mov	r0, r4
 801d4de:	8ae3      	ldrh	r3, [r4, #22]
 801d4e0:	9100      	str	r1, [sp, #0]
 801d4e2:	4649      	mov	r1, r9
 801d4e4:	f7e9 f876 	bl	80065d4 <BLEMesh_NeighborAppearedCallback>
 801d4e8:	e75e      	b.n	801d3a8 <BLEMesh_UpdateNeighbors+0x4a>
 801d4ea:	2300      	movs	r3, #0
 801d4ec:	9303      	str	r3, [sp, #12]
 801d4ee:	e796      	b.n	801d41e <BLEMesh_UpdateNeighbors+0xc0>
 801d4f0:	9914      	ldr	r1, [sp, #80]	; 0x50
 801d4f2:	2210      	movs	r2, #16
 801d4f4:	4658      	mov	r0, fp
 801d4f6:	f00c f9dd 	bl	80298b4 <memset>
 801d4fa:	e7b5      	b.n	801d468 <BLEMesh_UpdateNeighbors+0x10a>

0801d4fc <MobleSetGet>:
 801d4fc:	b510      	push	{r4, lr}
 801d4fe:	b928      	cbnz	r0, 801d50c <MobleSetGet+0x10>
 801d500:	4b10      	ldr	r3, [pc, #64]	; (801d544 <MobleSetGet+0x48>)
 801d502:	4a11      	ldr	r2, [pc, #68]	; (801d548 <MobleSetGet+0x4c>)
 801d504:	21be      	movs	r1, #190	; 0xbe
 801d506:	4811      	ldr	r0, [pc, #68]	; (801d54c <MobleSetGet+0x50>)
 801d508:	f00b fade 	bl	8028ac8 <__assert_func>
 801d50c:	b91a      	cbnz	r2, 801d516 <MobleSetGet+0x1a>
 801d50e:	4b10      	ldr	r3, [pc, #64]	; (801d550 <MobleSetGet+0x54>)
 801d510:	4a0d      	ldr	r2, [pc, #52]	; (801d548 <MobleSetGet+0x4c>)
 801d512:	21bf      	movs	r1, #191	; 0xbf
 801d514:	e7f7      	b.n	801d506 <MobleSetGet+0xa>
 801d516:	eb00 0441 	add.w	r4, r0, r1, lsl #1
 801d51a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 801d51e:	2b00      	cmp	r3, #0
 801d520:	da0d      	bge.n	801d53e <MobleSetGet+0x42>
 801d522:	f810 3011 	ldrb.w	r3, [r0, r1, lsl #1]
 801d526:	7861      	ldrb	r1, [r4, #1]
 801d528:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 801d52c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 801d530:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 801d534:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 801d538:	8013      	strh	r3, [r2, #0]
 801d53a:	2000      	movs	r0, #0
 801d53c:	bd10      	pop	{r4, pc}
 801d53e:	2002      	movs	r0, #2
 801d540:	e7fc      	b.n	801d53c <MobleSetGet+0x40>
 801d542:	bf00      	nop
 801d544:	0803386b 	.word	0x0803386b
 801d548:	0803168c 	.word	0x0803168c
 801d54c:	0803386f 	.word	0x0803386f
 801d550:	080333d8 	.word	0x080333d8

0801d554 <BLEMesh_GetLibraryVersion>:
 801d554:	4800      	ldr	r0, [pc, #0]	; (801d558 <BLEMesh_GetLibraryVersion+0x4>)
 801d556:	4770      	bx	lr
 801d558:	080338a8 	.word	0x080338a8

0801d55c <BLEMesh_GetLibrarySubVersion>:
 801d55c:	4800      	ldr	r0, [pc, #0]	; (801d560 <BLEMesh_GetLibrarySubVersion+0x4>)
 801d55e:	4770      	bx	lr
 801d560:	080338b2 	.word	0x080338b2

0801d564 <BLEMesh_BleHardwareInitCallBack>:
 801d564:	b118      	cbz	r0, 801d56e <BLEMesh_BleHardwareInitCallBack+0xa>
 801d566:	4b03      	ldr	r3, [pc, #12]	; (801d574 <BLEMesh_BleHardwareInitCallBack+0x10>)
 801d568:	6058      	str	r0, [r3, #4]
 801d56a:	2000      	movs	r0, #0
 801d56c:	4770      	bx	lr
 801d56e:	2003      	movs	r0, #3
 801d570:	4770      	bx	lr
 801d572:	bf00      	nop
 801d574:	20000324 	.word	0x20000324

0801d578 <BLEMesh_BleConfigModelInitCallBack>:
 801d578:	b120      	cbz	r0, 801d584 <BLEMesh_BleConfigModelInitCallBack+0xc>
 801d57a:	4b03      	ldr	r3, [pc, #12]	; (801d588 <BLEMesh_BleConfigModelInitCallBack+0x10>)
 801d57c:	f8c3 06f8 	str.w	r0, [r3, #1784]	; 0x6f8
 801d580:	2000      	movs	r0, #0
 801d582:	4770      	bx	lr
 801d584:	2003      	movs	r0, #3
 801d586:	4770      	bx	lr
 801d588:	20002514 	.word	0x20002514

0801d58c <MobleBeaconSetGeneric>:
 801d58c:	b570      	push	{r4, r5, r6, lr}
 801d58e:	460c      	mov	r4, r1
 801d590:	4611      	mov	r1, r2
 801d592:	9a04      	ldr	r2, [sp, #16]
 801d594:	b188      	cbz	r0, 801d5ba <MobleBeaconSetGeneric+0x2e>
 801d596:	b183      	cbz	r3, 801d5ba <MobleBeaconSetGeneric+0x2e>
 801d598:	b17c      	cbz	r4, 801d5ba <MobleBeaconSetGeneric+0x2e>
 801d59a:	6826      	ldr	r6, [r4, #0]
 801d59c:	1cd5      	adds	r5, r2, #3
 801d59e:	42b5      	cmp	r5, r6
 801d5a0:	d80b      	bhi.n	801d5ba <MobleBeaconSetGeneric+0x2e>
 801d5a2:	6025      	str	r5, [r4, #0]
 801d5a4:	1c94      	adds	r4, r2, #2
 801d5a6:	7004      	strb	r4, [r0, #0]
 801d5a8:	242b      	movs	r4, #43	; 0x2b
 801d5aa:	7081      	strb	r1, [r0, #2]
 801d5ac:	7044      	strb	r4, [r0, #1]
 801d5ae:	4619      	mov	r1, r3
 801d5b0:	3003      	adds	r0, #3
 801d5b2:	f00c fa10 	bl	80299d6 <memcpy>
 801d5b6:	2000      	movs	r0, #0
 801d5b8:	bd70      	pop	{r4, r5, r6, pc}
 801d5ba:	2003      	movs	r0, #3
 801d5bc:	e7fc      	b.n	801d5b8 <MobleBeaconSetGeneric+0x2c>

0801d5be <MobleBeaconSetUnprovisioned>:
 801d5be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d5c2:	b089      	sub	sp, #36	; 0x24
 801d5c4:	4614      	mov	r4, r2
 801d5c6:	9f10      	ldr	r7, [sp, #64]	; 0x40
 801d5c8:	2212      	movs	r2, #18
 801d5ca:	4605      	mov	r5, r0
 801d5cc:	460e      	mov	r6, r1
 801d5ce:	a803      	add	r0, sp, #12
 801d5d0:	2100      	movs	r1, #0
 801d5d2:	4698      	mov	r8, r3
 801d5d4:	9102      	str	r1, [sp, #8]
 801d5d6:	f00c f96d 	bl	80298b4 <memset>
 801d5da:	2f00      	cmp	r7, #0
 801d5dc:	bf0c      	ite	eq
 801d5de:	f04f 0912 	moveq.w	r9, #18
 801d5e2:	f04f 0916 	movne.w	r9, #22
 801d5e6:	4622      	mov	r2, r4
 801d5e8:	ab02      	add	r3, sp, #8
 801d5ea:	f104 0c10 	add.w	ip, r4, #16
 801d5ee:	6810      	ldr	r0, [r2, #0]
 801d5f0:	6851      	ldr	r1, [r2, #4]
 801d5f2:	461c      	mov	r4, r3
 801d5f4:	c403      	stmia	r4!, {r0, r1}
 801d5f6:	3208      	adds	r2, #8
 801d5f8:	4562      	cmp	r2, ip
 801d5fa:	4623      	mov	r3, r4
 801d5fc:	d1f7      	bne.n	801d5ee <MobleBeaconSetUnprovisioned+0x30>
 801d5fe:	2202      	movs	r2, #2
 801d600:	4641      	mov	r1, r8
 801d602:	a806      	add	r0, sp, #24
 801d604:	f7fd fe0c 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801d608:	b12f      	cbz	r7, 801d616 <MobleBeaconSetUnprovisioned+0x58>
 801d60a:	6839      	ldr	r1, [r7, #0]
 801d60c:	2204      	movs	r2, #4
 801d60e:	f10d 001a 	add.w	r0, sp, #26
 801d612:	f7fd fe05 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801d616:	f8cd 9000 	str.w	r9, [sp]
 801d61a:	ab02      	add	r3, sp, #8
 801d61c:	2200      	movs	r2, #0
 801d61e:	4631      	mov	r1, r6
 801d620:	4628      	mov	r0, r5
 801d622:	f7ff ffb3 	bl	801d58c <MobleBeaconSetGeneric>
 801d626:	b009      	add	sp, #36	; 0x24
 801d628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801d62c <MobleBeaconSetSecure>:
 801d62c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d630:	b08d      	sub	sp, #52	; 0x34
 801d632:	460e      	mov	r6, r1
 801d634:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801d638:	4617      	mov	r7, r2
 801d63a:	461c      	mov	r4, r3
 801d63c:	4605      	mov	r5, r0
 801d63e:	2800      	cmp	r0, #0
 801d640:	d03d      	beq.n	801d6be <MobleBeaconSetSecure+0x92>
 801d642:	2900      	cmp	r1, #0
 801d644:	d03b      	beq.n	801d6be <MobleBeaconSetSecure+0x92>
 801d646:	b3d3      	cbz	r3, 801d6be <MobleBeaconSetSecure+0x92>
 801d648:	f04f 0800 	mov.w	r8, #0
 801d64c:	2211      	movs	r2, #17
 801d64e:	4641      	mov	r1, r8
 801d650:	a807      	add	r0, sp, #28
 801d652:	f00c f92f 	bl	80298b4 <memset>
 801d656:	6823      	ldr	r3, [r4, #0]
 801d658:	6822      	ldr	r2, [r4, #0]
 801d65a:	f8cd 3019 	str.w	r3, [sp, #25]
 801d65e:	f8cd 2009 	str.w	r2, [sp, #9]
 801d662:	6863      	ldr	r3, [r4, #4]
 801d664:	f8cd 8010 	str.w	r8, [sp, #16]
 801d668:	2204      	movs	r2, #4
 801d66a:	4649      	mov	r1, r9
 801d66c:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 801d670:	f8cd 301d 	str.w	r3, [sp, #29]
 801d674:	f8cd 300d 	str.w	r3, [sp, #13]
 801d678:	f88d 8014 	strb.w	r8, [sp, #20]
 801d67c:	f88d 7018 	strb.w	r7, [sp, #24]
 801d680:	f88d 7008 	strb.w	r7, [sp, #8]
 801d684:	f7fd fdcc 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801d688:	2204      	movs	r2, #4
 801d68a:	4649      	mov	r1, r9
 801d68c:	f10d 0011 	add.w	r0, sp, #17
 801d690:	f7fd fdc6 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801d694:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 801d698:	220d      	movs	r2, #13
 801d69a:	a902      	add	r1, sp, #8
 801d69c:	f10d 0025 	add.w	r0, sp, #37	; 0x25
 801d6a0:	f7fc faec 	bl	8019c7c <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 801d6a4:	2801      	cmp	r0, #1
 801d6a6:	d807      	bhi.n	801d6b8 <MobleBeaconSetSecure+0x8c>
 801d6a8:	2315      	movs	r3, #21
 801d6aa:	9300      	str	r3, [sp, #0]
 801d6ac:	2201      	movs	r2, #1
 801d6ae:	ab06      	add	r3, sp, #24
 801d6b0:	4631      	mov	r1, r6
 801d6b2:	4628      	mov	r0, r5
 801d6b4:	f7ff ff6a 	bl	801d58c <MobleBeaconSetGeneric>
 801d6b8:	b00d      	add	sp, #52	; 0x34
 801d6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d6be:	2003      	movs	r0, #3
 801d6c0:	e7fa      	b.n	801d6b8 <MobleBeaconSetSecure+0x8c>

0801d6c2 <MobleGattBeaconSetSectionGeneric>:
 801d6c2:	b570      	push	{r4, r5, r6, lr}
 801d6c4:	4614      	mov	r4, r2
 801d6c6:	e9dd 6204 	ldrd	r6, r2, [sp, #16]
 801d6ca:	b180      	cbz	r0, 801d6ee <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6cc:	b17e      	cbz	r6, 801d6ee <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6ce:	b174      	cbz	r4, 801d6ee <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6d0:	1c95      	adds	r5, r2, #2
 801d6d2:	428d      	cmp	r5, r1
 801d6d4:	d80b      	bhi.n	801d6ee <MobleGattBeaconSetSectionGeneric+0x2c>
 801d6d6:	1c51      	adds	r1, r2, #1
 801d6d8:	7001      	strb	r1, [r0, #0]
 801d6da:	7043      	strb	r3, [r0, #1]
 801d6dc:	4631      	mov	r1, r6
 801d6de:	3002      	adds	r0, #2
 801d6e0:	f00c f979 	bl	80299d6 <memcpy>
 801d6e4:	6823      	ldr	r3, [r4, #0]
 801d6e6:	442b      	add	r3, r5
 801d6e8:	6023      	str	r3, [r4, #0]
 801d6ea:	2000      	movs	r0, #0
 801d6ec:	bd70      	pop	{r4, r5, r6, pc}
 801d6ee:	2003      	movs	r0, #3
 801d6f0:	e7fc      	b.n	801d6ec <MobleGattBeaconSetSectionGeneric+0x2a>
	...

0801d6f4 <MobleStackGattBeaconGenerator>:
 801d6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6f8:	2902      	cmp	r1, #2
 801d6fa:	b097      	sub	sp, #92	; 0x5c
 801d6fc:	4606      	mov	r6, r0
 801d6fe:	460d      	mov	r5, r1
 801d700:	f340 80e3 	ble.w	801d8ca <MobleStackGattBeaconGenerator+0x1d6>
 801d704:	f7fa fc5a 	bl	8017fbc <MoblePalBluetoothGetConnectionState>
 801d708:	2802      	cmp	r0, #2
 801d70a:	f040 80e1 	bne.w	801d8d0 <MobleStackGattBeaconGenerator+0x1dc>
 801d70e:	4f71      	ldr	r7, [pc, #452]	; (801d8d4 <MobleStackGattBeaconGenerator+0x1e0>)
 801d710:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 801d714:	781b      	ldrb	r3, [r3, #0]
 801d716:	b9c3      	cbnz	r3, 801d74a <MobleStackGattBeaconGenerator+0x56>
 801d718:	f897 3855 	ldrb.w	r3, [r7, #2133]	; 0x855
 801d71c:	b18b      	cbz	r3, 801d742 <MobleStackGattBeaconGenerator+0x4e>
 801d71e:	2306      	movs	r3, #6
 801d720:	f88d 300b 	strb.w	r3, [sp, #11]
 801d724:	f10d 020b 	add.w	r2, sp, #11
 801d728:	2301      	movs	r3, #1
 801d72a:	9200      	str	r2, [sp, #0]
 801d72c:	2400      	movs	r4, #0
 801d72e:	9301      	str	r3, [sp, #4]
 801d730:	aa04      	add	r2, sp, #16
 801d732:	4629      	mov	r1, r5
 801d734:	4630      	mov	r0, r6
 801d736:	9404      	str	r4, [sp, #16]
 801d738:	f7ff ffc3 	bl	801d6c2 <MobleGattBeaconSetSectionGeneric>
 801d73c:	2801      	cmp	r0, #1
 801d73e:	d90e      	bls.n	801d75e <MobleStackGattBeaconGenerator+0x6a>
 801d740:	9b04      	ldr	r3, [sp, #16]
 801d742:	4618      	mov	r0, r3
 801d744:	b017      	add	sp, #92	; 0x5c
 801d746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d74a:	2b01      	cmp	r3, #1
 801d74c:	d1e7      	bne.n	801d71e <MobleStackGattBeaconGenerator+0x2a>
 801d74e:	4b62      	ldr	r3, [pc, #392]	; (801d8d8 <MobleStackGattBeaconGenerator+0x1e4>)
 801d750:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801d754:	2b01      	cmp	r3, #1
 801d756:	d0e2      	beq.n	801d71e <MobleStackGattBeaconGenerator+0x2a>
 801d758:	f897 392d 	ldrb.w	r3, [r7, #2349]	; 0x92d
 801d75c:	e7de      	b.n	801d71c <MobleStackGattBeaconGenerator+0x28>
 801d75e:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 801d762:	781b      	ldrb	r3, [r3, #0]
 801d764:	2b00      	cmp	r3, #0
 801d766:	d075      	beq.n	801d854 <MobleStackGattBeaconGenerator+0x160>
 801d768:	2328      	movs	r3, #40	; 0x28
 801d76a:	f88d 300c 	strb.w	r3, [sp, #12]
 801d76e:	2318      	movs	r3, #24
 801d770:	9804      	ldr	r0, [sp, #16]
 801d772:	f88d 300d 	strb.w	r3, [sp, #13]
 801d776:	2302      	movs	r3, #2
 801d778:	9301      	str	r3, [sp, #4]
 801d77a:	ab03      	add	r3, sp, #12
 801d77c:	9300      	str	r3, [sp, #0]
 801d77e:	1a29      	subs	r1, r5, r0
 801d780:	2303      	movs	r3, #3
 801d782:	aa04      	add	r2, sp, #16
 801d784:	4430      	add	r0, r6
 801d786:	f7ff ff9c 	bl	801d6c2 <MobleGattBeaconSetSectionGeneric>
 801d78a:	2801      	cmp	r0, #1
 801d78c:	d8d8      	bhi.n	801d740 <MobleStackGattBeaconGenerator+0x4c>
 801d78e:	4b52      	ldr	r3, [pc, #328]	; (801d8d8 <MobleStackGattBeaconGenerator+0x1e4>)
 801d790:	f893 80bb 	ldrb.w	r8, [r3, #187]	; 0xbb
 801d794:	9411      	str	r4, [sp, #68]	; 0x44
 801d796:	f1b8 0f01 	cmp.w	r8, #1
 801d79a:	d147      	bne.n	801d82c <MobleStackGattBeaconGenerator+0x138>
 801d79c:	220f      	movs	r2, #15
 801d79e:	4621      	mov	r1, r4
 801d7a0:	a812      	add	r0, sp, #72	; 0x48
 801d7a2:	f00c f887 	bl	80298b4 <memset>
 801d7a6:	e9cd 4405 	strd	r4, r4, [sp, #20]
 801d7aa:	e9cd 4407 	strd	r4, r4, [sp, #28]
 801d7ae:	f7fb fc99 	bl	80190e4 <MoblePalCryptoGetNodeIdntyToBeAdvt>
 801d7b2:	4601      	mov	r1, r0
 801d7b4:	a809      	add	r0, sp, #36	; 0x24
 801d7b6:	f7fc f8a1 	bl	80198fc <MoblePalCryptoIdentityKey>
 801d7ba:	2801      	cmp	r0, #1
 801d7bc:	f200 8088 	bhi.w	801d8d0 <MobleStackGattBeaconGenerator+0x1dc>
 801d7c0:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d7c4:	f88d 8046 	strb.w	r8, [sp, #70]	; 0x46
 801d7c8:	e9cd 440d 	strd	r4, r4, [sp, #52]	; 0x34
 801d7cc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 801d7d0:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d7d4:	f10d 093a 	add.w	r9, sp, #58	; 0x3a
 801d7d8:	f10d 084f 	add.w	r8, sp, #79	; 0x4f
 801d7dc:	2408      	movs	r4, #8
 801d7de:	f7fa fc4d 	bl	801807c <MoblePalBluetoothRandom>
 801d7e2:	3c01      	subs	r4, #1
 801d7e4:	f809 0b01 	strb.w	r0, [r9], #1
 801d7e8:	f808 0b01 	strb.w	r0, [r8], #1
 801d7ec:	d1f7      	bne.n	801d7de <MobleStackGattBeaconGenerator+0xea>
 801d7ee:	f8d7 3680 	ldr.w	r3, [r7, #1664]	; 0x680
 801d7f2:	2202      	movs	r2, #2
 801d7f4:	8859      	ldrh	r1, [r3, #2]
 801d7f6:	f10d 0042 	add.w	r0, sp, #66	; 0x42
 801d7fa:	f7fd fd11 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801d7fe:	a90d      	add	r1, sp, #52	; 0x34
 801d800:	a809      	add	r0, sp, #36	; 0x24
 801d802:	aa05      	add	r2, sp, #20
 801d804:	f7fb f802 	bl	801880c <BAES_EcbEncrypt>
 801d808:	ab07      	add	r3, sp, #28
 801d80a:	cb03      	ldmia	r3!, {r0, r1}
 801d80c:	f8cd 0047 	str.w	r0, [sp, #71]	; 0x47
 801d810:	9804      	ldr	r0, [sp, #16]
 801d812:	f8cd 104b 	str.w	r1, [sp, #75]	; 0x4b
 801d816:	2313      	movs	r3, #19
 801d818:	9301      	str	r3, [sp, #4]
 801d81a:	ab11      	add	r3, sp, #68	; 0x44
 801d81c:	9300      	str	r3, [sp, #0]
 801d81e:	1a29      	subs	r1, r5, r0
 801d820:	2316      	movs	r3, #22
 801d822:	aa04      	add	r2, sp, #16
 801d824:	4430      	add	r0, r6
 801d826:	f7ff ff4c 	bl	801d6c2 <MobleGattBeaconSetSectionGeneric>
 801d82a:	e789      	b.n	801d740 <MobleStackGattBeaconGenerator+0x4c>
 801d82c:	9412      	str	r4, [sp, #72]	; 0x48
 801d82e:	f8cd 404b 	str.w	r4, [sp, #75]	; 0x4b
 801d832:	f7fb fc81 	bl	8019138 <MoblePalCryptoGetNetworkIdToBeAdvt>
 801d836:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801d83a:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d83e:	f88d 4046 	strb.w	r4, [sp, #70]	; 0x46
 801d842:	6803      	ldr	r3, [r0, #0]
 801d844:	f8cd 3047 	str.w	r3, [sp, #71]	; 0x47
 801d848:	6843      	ldr	r3, [r0, #4]
 801d84a:	f8cd 304b 	str.w	r3, [sp, #75]	; 0x4b
 801d84e:	9804      	ldr	r0, [sp, #16]
 801d850:	230b      	movs	r3, #11
 801d852:	e7e1      	b.n	801d818 <MobleStackGattBeaconGenerator+0x124>
 801d854:	4a21      	ldr	r2, [pc, #132]	; (801d8dc <MobleStackGattBeaconGenerator+0x1e8>)
 801d856:	f892 4725 	ldrb.w	r4, [r2, #1829]	; 0x725
 801d85a:	2c00      	cmp	r4, #0
 801d85c:	f47f af71 	bne.w	801d742 <MobleStackGattBeaconGenerator+0x4e>
 801d860:	2327      	movs	r3, #39	; 0x27
 801d862:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d866:	2318      	movs	r3, #24
 801d868:	9804      	ldr	r0, [sp, #16]
 801d86a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 801d86e:	2302      	movs	r3, #2
 801d870:	9301      	str	r3, [sp, #4]
 801d872:	ab09      	add	r3, sp, #36	; 0x24
 801d874:	9300      	str	r3, [sp, #0]
 801d876:	1a29      	subs	r1, r5, r0
 801d878:	2303      	movs	r3, #3
 801d87a:	aa04      	add	r2, sp, #16
 801d87c:	4430      	add	r0, r6
 801d87e:	f7ff ff20 	bl	801d6c2 <MobleGattBeaconSetSectionGeneric>
 801d882:	2801      	cmp	r0, #1
 801d884:	f63f af5c 	bhi.w	801d740 <MobleStackGattBeaconGenerator+0x4c>
 801d888:	4621      	mov	r1, r4
 801d88a:	2210      	movs	r2, #16
 801d88c:	a812      	add	r0, sp, #72	; 0x48
 801d88e:	9411      	str	r4, [sp, #68]	; 0x44
 801d890:	f00c f810 	bl	80298b4 <memset>
 801d894:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 801d898:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801d89c:	4b0e      	ldr	r3, [pc, #56]	; (801d8d8 <MobleStackGattBeaconGenerator+0x1e4>)
 801d89e:	685b      	ldr	r3, [r3, #4]
 801d8a0:	a80d      	add	r0, sp, #52	; 0x34
 801d8a2:	695b      	ldr	r3, [r3, #20]
 801d8a4:	4798      	blx	r3
 801d8a6:	f10d 0446 	add.w	r4, sp, #70	; 0x46
 801d8aa:	ab0d      	add	r3, sp, #52	; 0x34
 801d8ac:	af11      	add	r7, sp, #68	; 0x44
 801d8ae:	461a      	mov	r2, r3
 801d8b0:	ca03      	ldmia	r2!, {r0, r1}
 801d8b2:	42ba      	cmp	r2, r7
 801d8b4:	6020      	str	r0, [r4, #0]
 801d8b6:	6061      	str	r1, [r4, #4]
 801d8b8:	4613      	mov	r3, r2
 801d8ba:	f104 0408 	add.w	r4, r4, #8
 801d8be:	d1f6      	bne.n	801d8ae <MobleStackGattBeaconGenerator+0x1ba>
 801d8c0:	2314      	movs	r3, #20
 801d8c2:	e9cd 7300 	strd	r7, r3, [sp]
 801d8c6:	9804      	ldr	r0, [sp, #16]
 801d8c8:	e7a9      	b.n	801d81e <MobleStackGattBeaconGenerator+0x12a>
 801d8ca:	f04f 33ff 	mov.w	r3, #4294967295
 801d8ce:	e738      	b.n	801d742 <MobleStackGattBeaconGenerator+0x4e>
 801d8d0:	2300      	movs	r3, #0
 801d8d2:	e736      	b.n	801d742 <MobleStackGattBeaconGenerator+0x4e>
 801d8d4:	2000141c 	.word	0x2000141c
 801d8d8:	20000324 	.word	0x20000324
 801d8dc:	20002514 	.word	0x20002514

0801d8e0 <BnrgmProxyProtocol_DeInit>:
 801d8e0:	4a05      	ldr	r2, [pc, #20]	; (801d8f8 <BnrgmProxyProtocol_DeInit+0x18>)
 801d8e2:	2300      	movs	r3, #0
 801d8e4:	7213      	strb	r3, [r2, #8]
 801d8e6:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 801d8ea:	f8d2 2090 	ldr.w	r2, [r2, #144]	; 0x90
 801d8ee:	b102      	cbz	r2, 801d8f2 <BnrgmProxyProtocol_DeInit+0x12>
 801d8f0:	7013      	strb	r3, [r2, #0]
 801d8f2:	2000      	movs	r0, #0
 801d8f4:	4770      	bx	lr
 801d8f6:	bf00      	nop
 801d8f8:	20000324 	.word	0x20000324

0801d8fc <BnrgmProxyProtocol_Init>:
 801d8fc:	b510      	push	{r4, lr}
 801d8fe:	4908      	ldr	r1, [pc, #32]	; (801d920 <BnrgmProxyProtocol_Init+0x24>)
 801d900:	7a0b      	ldrb	r3, [r1, #8]
 801d902:	b10b      	cbz	r3, 801d908 <BnrgmProxyProtocol_Init+0xc>
 801d904:	f7ff ffec 	bl	801d8e0 <BnrgmProxyProtocol_DeInit>
 801d908:	4a06      	ldr	r2, [pc, #24]	; (801d924 <BnrgmProxyProtocol_Init+0x28>)
 801d90a:	2400      	movs	r4, #0
 801d90c:	f881 408e 	strb.w	r4, [r1, #142]	; 0x8e
 801d910:	f102 0088 	add.w	r0, r2, #136	; 0x88
 801d914:	4904      	ldr	r1, [pc, #16]	; (801d928 <BnrgmProxyProtocol_Init+0x2c>)
 801d916:	f7fa f913 	bl	8017b40 <MoblePalTimerCreate>
 801d91a:	4620      	mov	r0, r4
 801d91c:	bd10      	pop	{r4, pc}
 801d91e:	bf00      	nop
 801d920:	20000324 	.word	0x20000324
 801d924:	2000032c 	.word	0x2000032c
 801d928:	0801f841 	.word	0x0801f841

0801d92c <BnrgmProxyProtocol_Notify>:
 801d92c:	b507      	push	{r0, r1, r2, lr}
 801d92e:	2301      	movs	r3, #1
 801d930:	9300      	str	r3, [sp, #0]
 801d932:	4602      	mov	r2, r0
 801d934:	b2cb      	uxtb	r3, r1
 801d936:	4805      	ldr	r0, [pc, #20]	; (801d94c <BnrgmProxyProtocol_Notify+0x20>)
 801d938:	4905      	ldr	r1, [pc, #20]	; (801d950 <BnrgmProxyProtocol_Notify+0x24>)
 801d93a:	f8b0 0340 	ldrh.w	r0, [r0, #832]	; 0x340
 801d93e:	f8b1 108c 	ldrh.w	r1, [r1, #140]	; 0x8c
 801d942:	f7fd faf1 	bl	801af28 <MoblePalBluetoothGattSendNotification>
 801d946:	b003      	add	sp, #12
 801d948:	f85d fb04 	ldr.w	pc, [sp], #4
 801d94c:	2000141c 	.word	0x2000141c
 801d950:	20000324 	.word	0x20000324

0801d954 <BnrgmProxyProtocol_ResetSar>:
 801d954:	b508      	push	{r3, lr}
 801d956:	4b05      	ldr	r3, [pc, #20]	; (801d96c <BnrgmProxyProtocol_ResetSar+0x18>)
 801d958:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 801d95c:	2200      	movs	r2, #0
 801d95e:	721a      	strb	r2, [r3, #8]
 801d960:	b108      	cbz	r0, 801d966 <BnrgmProxyProtocol_ResetSar+0x12>
 801d962:	f7fa f97f 	bl	8017c64 <MoblePalTimerStop>
 801d966:	2000      	movs	r0, #0
 801d968:	bd08      	pop	{r3, pc}
 801d96a:	bf00      	nop
 801d96c:	20000324 	.word	0x20000324

0801d970 <BnrgmProxyProtocol_AddFragment>:
 801d970:	b570      	push	{r4, r5, r6, lr}
 801d972:	4d0a      	ldr	r5, [pc, #40]	; (801d99c <BnrgmProxyProtocol_AddFragment+0x2c>)
 801d974:	7a2b      	ldrb	r3, [r5, #8]
 801d976:	185a      	adds	r2, r3, r1
 801d978:	2a80      	cmp	r2, #128	; 0x80
 801d97a:	460c      	mov	r4, r1
 801d97c:	dd03      	ble.n	801d986 <BnrgmProxyProtocol_AddFragment+0x16>
 801d97e:	f7ff ffe9 	bl	801d954 <BnrgmProxyProtocol_ResetSar>
 801d982:	7a28      	ldrb	r0, [r5, #8]
 801d984:	bd70      	pop	{r4, r5, r6, pc}
 801d986:	f105 060a 	add.w	r6, r5, #10
 801d98a:	460a      	mov	r2, r1
 801d98c:	4601      	mov	r1, r0
 801d98e:	18f0      	adds	r0, r6, r3
 801d990:	f00b ff76 	bl	8029880 <memmove>
 801d994:	7a2a      	ldrb	r2, [r5, #8]
 801d996:	4414      	add	r4, r2
 801d998:	722c      	strb	r4, [r5, #8]
 801d99a:	e7f2      	b.n	801d982 <BnrgmProxyProtocol_AddFragment+0x12>
 801d99c:	20000324 	.word	0x20000324

0801d9a0 <BnrgmProxyConfig_ResetFilter>:
 801d9a0:	4b07      	ldr	r3, [pc, #28]	; (801d9c0 <BnrgmProxyConfig_ResetFilter+0x20>)
 801d9a2:	2000      	movs	r0, #0
 801d9a4:	f883 09ec 	strb.w	r0, [r3, #2540]	; 0x9ec
 801d9a8:	f883 09ee 	strb.w	r0, [r3, #2542]	; 0x9ee
 801d9ac:	f883 09f2 	strb.w	r0, [r3, #2546]	; 0x9f2
 801d9b0:	f883 09f6 	strb.w	r0, [r3, #2550]	; 0x9f6
 801d9b4:	f883 09fa 	strb.w	r0, [r3, #2554]	; 0x9fa
 801d9b8:	f883 09fe 	strb.w	r0, [r3, #2558]	; 0x9fe
 801d9bc:	4770      	bx	lr
 801d9be:	bf00      	nop
 801d9c0:	20002514 	.word	0x20002514

0801d9c4 <BnrgmProxyConfig_AddProxyClient_Filter>:
 801d9c4:	b570      	push	{r4, r5, r6, lr}
 801d9c6:	4602      	mov	r2, r0
 801d9c8:	b1f8      	cbz	r0, 801da0a <BnrgmProxyConfig_AddProxyClient_Filter+0x46>
 801d9ca:	4b12      	ldr	r3, [pc, #72]	; (801da14 <BnrgmProxyConfig_AddProxyClient_Filter+0x50>)
 801d9cc:	f893 09ec 	ldrb.w	r0, [r3, #2540]	; 0x9ec
 801d9d0:	b9e8      	cbnz	r0, 801da0e <BnrgmProxyConfig_AddProxyClient_Filter+0x4a>
 801d9d2:	f603 14ec 	addw	r4, r3, #2540	; 0x9ec
 801d9d6:	4601      	mov	r1, r0
 801d9d8:	f04f 35ff 	mov.w	r5, #4294967295
 801d9dc:	78a6      	ldrb	r6, [r4, #2]
 801d9de:	2e01      	cmp	r6, #1
 801d9e0:	d103      	bne.n	801d9ea <BnrgmProxyConfig_AddProxyClient_Filter+0x26>
 801d9e2:	88a6      	ldrh	r6, [r4, #4]
 801d9e4:	4296      	cmp	r6, r2
 801d9e6:	d101      	bne.n	801d9ec <BnrgmProxyConfig_AddProxyClient_Filter+0x28>
 801d9e8:	bd70      	pop	{r4, r5, r6, pc}
 801d9ea:	b24d      	sxtb	r5, r1
 801d9ec:	3101      	adds	r1, #1
 801d9ee:	2905      	cmp	r1, #5
 801d9f0:	f104 0404 	add.w	r4, r4, #4
 801d9f4:	d1f2      	bne.n	801d9dc <BnrgmProxyConfig_AddProxyClient_Filter+0x18>
 801d9f6:	1c69      	adds	r1, r5, #1
 801d9f8:	d0f6      	beq.n	801d9e8 <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801d9fa:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 801d9fe:	2101      	movs	r1, #1
 801da00:	f883 19ee 	strb.w	r1, [r3, #2542]	; 0x9ee
 801da04:	f8a3 29f0 	strh.w	r2, [r3, #2544]	; 0x9f0
 801da08:	e7ee      	b.n	801d9e8 <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801da0a:	2002      	movs	r0, #2
 801da0c:	e7ec      	b.n	801d9e8 <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801da0e:	2001      	movs	r0, #1
 801da10:	e7ea      	b.n	801d9e8 <BnrgmProxyConfig_AddProxyClient_Filter+0x24>
 801da12:	bf00      	nop
 801da14:	20002514 	.word	0x20002514

0801da18 <BnrgmProxyConfig_CheckProxyFilter>:
 801da18:	b510      	push	{r4, lr}
 801da1a:	4b0d      	ldr	r3, [pc, #52]	; (801da50 <BnrgmProxyConfig_CheckProxyFilter+0x38>)
 801da1c:	4601      	mov	r1, r0
 801da1e:	2200      	movs	r2, #0
 801da20:	7898      	ldrb	r0, [r3, #2]
 801da22:	2801      	cmp	r0, #1
 801da24:	d102      	bne.n	801da2c <BnrgmProxyConfig_CheckProxyFilter+0x14>
 801da26:	889c      	ldrh	r4, [r3, #4]
 801da28:	428c      	cmp	r4, r1
 801da2a:	d005      	beq.n	801da38 <BnrgmProxyConfig_CheckProxyFilter+0x20>
 801da2c:	3201      	adds	r2, #1
 801da2e:	2a05      	cmp	r2, #5
 801da30:	f103 0304 	add.w	r3, r3, #4
 801da34:	d1f4      	bne.n	801da20 <BnrgmProxyConfig_CheckProxyFilter+0x8>
 801da36:	2000      	movs	r0, #0
 801da38:	4b06      	ldr	r3, [pc, #24]	; (801da54 <BnrgmProxyConfig_CheckProxyFilter+0x3c>)
 801da3a:	f893 39ec 	ldrb.w	r3, [r3, #2540]	; 0x9ec
 801da3e:	b12b      	cbz	r3, 801da4c <BnrgmProxyConfig_CheckProxyFilter+0x34>
 801da40:	2b01      	cmp	r3, #1
 801da42:	bf06      	itte	eq
 801da44:	f1c0 0001 	rsbeq	r0, r0, #1
 801da48:	b2c0      	uxtbeq	r0, r0
 801da4a:	2000      	movne	r0, #0
 801da4c:	bd10      	pop	{r4, pc}
 801da4e:	bf00      	nop
 801da50:	20002f00 	.word	0x20002f00
 801da54:	20002514 	.word	0x20002514

0801da58 <BnrgmProxyProtocol_SendData>:
 801da58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801da5c:	461d      	mov	r5, r3
 801da5e:	4b21      	ldr	r3, [pc, #132]	; (801dae4 <BnrgmProxyProtocol_SendData+0x8c>)
 801da60:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 801da64:	4604      	mov	r4, r0
 801da66:	b087      	sub	sp, #28
 801da68:	4608      	mov	r0, r1
 801da6a:	4617      	mov	r7, r2
 801da6c:	b3c3      	cbz	r3, 801dae0 <BnrgmProxyProtocol_SendData+0x88>
 801da6e:	f014 043f 	ands.w	r4, r4, #63	; 0x3f
 801da72:	d132      	bne.n	801dada <BnrgmProxyProtocol_SendData+0x82>
 801da74:	f7ff ffd0 	bl	801da18 <BnrgmProxyConfig_CheckProxyFilter>
 801da78:	b390      	cbz	r0, 801dae0 <BnrgmProxyProtocol_SendData+0x88>
 801da7a:	4620      	mov	r0, r4
 801da7c:	463e      	mov	r6, r7
 801da7e:	f064 087f 	orn	r8, r4, #127	; 0x7f
 801da82:	f044 0940 	orr.w	r9, r4, #64	; 0x40
 801da86:	f064 0a3f 	orn	sl, r4, #63	; 0x3f
 801da8a:	e01a      	b.n	801dac2 <BnrgmProxyProtocol_SendData+0x6a>
 801da8c:	2d13      	cmp	r5, #19
 801da8e:	46ab      	mov	fp, r5
 801da90:	bf28      	it	cs
 801da92:	f04f 0b13 	movcs.w	fp, #19
 801da96:	2d13      	cmp	r5, #19
 801da98:	d818      	bhi.n	801dacc <BnrgmProxyProtocol_SendData+0x74>
 801da9a:	42b7      	cmp	r7, r6
 801da9c:	bf0c      	ite	eq
 801da9e:	f88d 4004 	strbeq.w	r4, [sp, #4]
 801daa2:	f88d a004 	strbne.w	sl, [sp, #4]
 801daa6:	4631      	mov	r1, r6
 801daa8:	465a      	mov	r2, fp
 801daaa:	f10d 0005 	add.w	r0, sp, #5
 801daae:	f00b ff92 	bl	80299d6 <memcpy>
 801dab2:	f10b 0101 	add.w	r1, fp, #1
 801dab6:	a801      	add	r0, sp, #4
 801dab8:	f7ff ff38 	bl	801d92c <BnrgmProxyProtocol_Notify>
 801dabc:	445e      	add	r6, fp
 801dabe:	eba5 050b 	sub.w	r5, r5, fp
 801dac2:	2d00      	cmp	r5, #0
 801dac4:	d1e2      	bne.n	801da8c <BnrgmProxyProtocol_SendData+0x34>
 801dac6:	b007      	add	sp, #28
 801dac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dacc:	42b7      	cmp	r7, r6
 801dace:	bf14      	ite	ne
 801dad0:	4643      	movne	r3, r8
 801dad2:	464b      	moveq	r3, r9
 801dad4:	f88d 3004 	strb.w	r3, [sp, #4]
 801dad8:	e7e5      	b.n	801daa6 <BnrgmProxyProtocol_SendData+0x4e>
 801dada:	4616      	mov	r6, r2
 801dadc:	2000      	movs	r0, #0
 801dade:	e7ce      	b.n	801da7e <BnrgmProxyProtocol_SendData+0x26>
 801dae0:	2001      	movs	r0, #1
 801dae2:	e7f0      	b.n	801dac6 <BnrgmProxyProtocol_SendData+0x6e>
 801dae4:	20000324 	.word	0x20000324

0801dae8 <BnrgmStackSendBeaconOverGatt>:
 801dae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801daec:	2500      	movs	r5, #0
 801daee:	b08e      	sub	sp, #56	; 0x38
 801daf0:	221b      	movs	r2, #27
 801daf2:	4629      	mov	r1, r5
 801daf4:	a807      	add	r0, sp, #28
 801daf6:	9506      	str	r5, [sp, #24]
 801daf8:	f00b fedc 	bl	80298b4 <memset>
 801dafc:	231f      	movs	r3, #31
 801dafe:	9305      	str	r3, [sp, #20]
 801db00:	4b26      	ldr	r3, [pc, #152]	; (801db9c <BnrgmStackSendBeaconOverGatt+0xb4>)
 801db02:	4e27      	ldr	r6, [pc, #156]	; (801dba0 <BnrgmStackSendBeaconOverGatt+0xb8>)
 801db04:	f8d3 17e4 	ldr.w	r1, [r3, #2020]	; 0x7e4
 801db08:	f893 265c 	ldrb.w	r2, [r3, #1628]	; 0x65c
 801db0c:	8808      	ldrh	r0, [r1, #0]
 801db0e:	f893 761c 	ldrb.w	r7, [r3, #1564]	; 0x61c
 801db12:	f896 4a02 	ldrb.w	r4, [r6, #2562]	; 0xa02
 801db16:	42aa      	cmp	r2, r5
 801db18:	f641 0128 	movw	r1, #6184	; 0x1828
 801db1c:	bf14      	ite	ne
 801db1e:	2202      	movne	r2, #2
 801db20:	462a      	moveq	r2, r5
 801db22:	4288      	cmp	r0, r1
 801db24:	d138      	bne.n	801db98 <BnrgmStackSendBeaconOverGatt+0xb0>
 801db26:	491f      	ldr	r1, [pc, #124]	; (801dba4 <BnrgmStackSendBeaconOverGatt+0xbc>)
 801db28:	f8d3 8658 	ldr.w	r8, [r3, #1624]	; 0x658
 801db2c:	4421      	add	r1, r4
 801db2e:	f891 10c0 	ldrb.w	r1, [r1, #192]	; 0xc0
 801db32:	2902      	cmp	r1, #2
 801db34:	bf08      	it	eq
 801db36:	f042 0201 	orreq.w	r2, r2, #1
 801db3a:	9203      	str	r2, [sp, #12]
 801db3c:	4621      	mov	r1, r4
 801db3e:	d123      	bne.n	801db88 <BnrgmStackSendBeaconOverGatt+0xa0>
 801db40:	2001      	movs	r0, #1
 801db42:	f7fb fc41 	bl	80193c8 <MoblePalCryptoGetNetworkSecurityKeys>
 801db46:	2301      	movs	r3, #1
 801db48:	e9cd 8300 	strd	r8, r3, [sp]
 801db4c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801db50:	9a03      	ldr	r2, [sp, #12]
 801db52:	a905      	add	r1, sp, #20
 801db54:	a806      	add	r0, sp, #24
 801db56:	f7ff fd69 	bl	801d62c <MobleBeaconSetSecure>
 801db5a:	4605      	mov	r5, r0
 801db5c:	42bc      	cmp	r4, r7
 801db5e:	bf3a      	itte	cc
 801db60:	3401      	addcc	r4, #1
 801db62:	b2e4      	uxtbcc	r4, r4
 801db64:	2400      	movcs	r4, #0
 801db66:	2d01      	cmp	r5, #1
 801db68:	f886 4a02 	strb.w	r4, [r6, #2562]	; 0xa02
 801db6c:	d808      	bhi.n	801db80 <BnrgmStackSendBeaconOverGatt+0x98>
 801db6e:	9b05      	ldr	r3, [sp, #20]
 801db70:	3b02      	subs	r3, #2
 801db72:	b2db      	uxtb	r3, r3
 801db74:	f10d 021a 	add.w	r2, sp, #26
 801db78:	2100      	movs	r1, #0
 801db7a:	2001      	movs	r0, #1
 801db7c:	f7ff ff6c 	bl	801da58 <BnrgmProxyProtocol_SendData>
 801db80:	4628      	mov	r0, r5
 801db82:	b00e      	add	sp, #56	; 0x38
 801db84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801db88:	4628      	mov	r0, r5
 801db8a:	f7fb fc1d 	bl	80193c8 <MoblePalCryptoGetNetworkSecurityKeys>
 801db8e:	e9cd 8500 	strd	r8, r5, [sp]
 801db92:	f100 0328 	add.w	r3, r0, #40	; 0x28
 801db96:	e7db      	b.n	801db50 <BnrgmStackSendBeaconOverGatt+0x68>
 801db98:	2502      	movs	r5, #2
 801db9a:	e7df      	b.n	801db5c <BnrgmStackSendBeaconOverGatt+0x74>
 801db9c:	2000141c 	.word	0x2000141c
 801dba0:	20002514 	.word	0x20002514
 801dba4:	20000324 	.word	0x20000324

0801dba8 <BnrgmProxyConfig_SendFilterStatus>:
 801dba8:	b510      	push	{r4, lr}
 801dbaa:	2300      	movs	r3, #0
 801dbac:	4a27      	ldr	r2, [pc, #156]	; (801dc4c <BnrgmProxyConfig_SendFilterStatus+0xa4>)
 801dbae:	b096      	sub	sp, #88	; 0x58
 801dbb0:	4619      	mov	r1, r3
 801dbb2:	eb02 0083 	add.w	r0, r2, r3, lsl #2
 801dbb6:	3301      	adds	r3, #1
 801dbb8:	7880      	ldrb	r0, [r0, #2]
 801dbba:	2801      	cmp	r0, #1
 801dbbc:	bf04      	itt	eq
 801dbbe:	3101      	addeq	r1, #1
 801dbc0:	b289      	uxtheq	r1, r1
 801dbc2:	2b05      	cmp	r3, #5
 801dbc4:	d1f5      	bne.n	801dbb2 <BnrgmProxyConfig_SendFilterStatus+0xa>
 801dbc6:	2303      	movs	r3, #3
 801dbc8:	f88d 300c 	strb.w	r3, [sp, #12]
 801dbcc:	4b20      	ldr	r3, [pc, #128]	; (801dc50 <BnrgmProxyConfig_SendFilterStatus+0xa8>)
 801dbce:	2202      	movs	r2, #2
 801dbd0:	f893 39ec 	ldrb.w	r3, [r3, #2540]	; 0x9ec
 801dbd4:	f88d 300d 	strb.w	r3, [sp, #13]
 801dbd8:	f10d 000e 	add.w	r0, sp, #14
 801dbdc:	f7fd fb20 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801dbe0:	2228      	movs	r2, #40	; 0x28
 801dbe2:	2100      	movs	r1, #0
 801dbe4:	a80c      	add	r0, sp, #48	; 0x30
 801dbe6:	f00b fe65 	bl	80298b4 <memset>
 801dbea:	2301      	movs	r3, #1
 801dbec:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
 801dbf0:	f7ff fa5a 	bl	801d0a8 <BLEMesh_GetAddress>
 801dbf4:	f8ad 0044 	strh.w	r0, [sp, #68]	; 0x44
 801dbf8:	f7ff fb72 	bl	801d2e0 <BnrgmStackConsumeSeqNo>
 801dbfc:	2380      	movs	r3, #128	; 0x80
 801dbfe:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 801dc02:	4b14      	ldr	r3, [pc, #80]	; (801dc54 <BnrgmProxyConfig_SendFilterStatus+0xac>)
 801dc04:	9010      	str	r0, [sp, #64]	; 0x40
 801dc06:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 801dc0a:	1e9a      	subs	r2, r3, #2
 801dc0c:	4253      	negs	r3, r2
 801dc0e:	4153      	adcs	r3, r2
 801dc10:	2400      	movs	r4, #0
 801dc12:	9300      	str	r3, [sp, #0]
 801dc14:	aa03      	add	r2, sp, #12
 801dc16:	2304      	movs	r3, #4
 801dc18:	a904      	add	r1, sp, #16
 801dc1a:	a80c      	add	r0, sp, #48	; 0x30
 801dc1c:	f88d 404c 	strb.w	r4, [sp, #76]	; 0x4c
 801dc20:	f8ad 404e 	strh.w	r4, [sp, #78]	; 0x4e
 801dc24:	f7fd fb06 	bl	801b234 <MoblePalCryptoEncryptNetwork>
 801dc28:	2801      	cmp	r0, #1
 801dc2a:	d80b      	bhi.n	801dc44 <BnrgmProxyConfig_SendFilterStatus+0x9c>
 801dc2c:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801dc30:	42a3      	cmp	r3, r4
 801dc32:	bf14      	ite	ne
 801dc34:	2308      	movne	r3, #8
 801dc36:	2304      	moveq	r3, #4
 801dc38:	330d      	adds	r3, #13
 801dc3a:	aa04      	add	r2, sp, #16
 801dc3c:	4621      	mov	r1, r4
 801dc3e:	2002      	movs	r0, #2
 801dc40:	f7ff ff0a 	bl	801da58 <BnrgmProxyProtocol_SendData>
 801dc44:	2000      	movs	r0, #0
 801dc46:	b016      	add	sp, #88	; 0x58
 801dc48:	bd10      	pop	{r4, pc}
 801dc4a:	bf00      	nop
 801dc4c:	20002f00 	.word	0x20002f00
 801dc50:	20002514 	.word	0x20002514
 801dc54:	20000324 	.word	0x20000324

0801dc58 <BnrgmProxyConfig_ProcessData>:
 801dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dc5c:	b098      	sub	sp, #96	; 0x60
 801dc5e:	4604      	mov	r4, r0
 801dc60:	460d      	mov	r5, r1
 801dc62:	224c      	movs	r2, #76	; 0x4c
 801dc64:	2100      	movs	r1, #0
 801dc66:	a805      	add	r0, sp, #20
 801dc68:	f00b fe24 	bl	80298b4 <memset>
 801dc6c:	b934      	cbnz	r4, 801dc7c <BnrgmProxyConfig_ProcessData+0x24>
 801dc6e:	4b62      	ldr	r3, [pc, #392]	; (801ddf8 <BnrgmProxyConfig_ProcessData+0x1a0>)
 801dc70:	4a62      	ldr	r2, [pc, #392]	; (801ddfc <BnrgmProxyConfig_ProcessData+0x1a4>)
 801dc72:	4863      	ldr	r0, [pc, #396]	; (801de00 <BnrgmProxyConfig_ProcessData+0x1a8>)
 801dc74:	f240 1147 	movw	r1, #327	; 0x147
 801dc78:	f00a ff26 	bl	8028ac8 <__assert_func>
 801dc7c:	f1a5 030e 	sub.w	r3, r5, #14
 801dc80:	2b0f      	cmp	r3, #15
 801dc82:	d903      	bls.n	801dc8c <BnrgmProxyConfig_ProcessData+0x34>
 801dc84:	2003      	movs	r0, #3
 801dc86:	b018      	add	sp, #96	; 0x60
 801dc88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dc8c:	2380      	movs	r3, #128	; 0x80
 801dc8e:	a908      	add	r1, sp, #32
 801dc90:	4620      	mov	r0, r4
 801dc92:	9406      	str	r4, [sp, #24]
 801dc94:	f88d 501c 	strb.w	r5, [sp, #28]
 801dc98:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 801dc9c:	f7fb ffce 	bl	8019c3c <MoblePalCryptoParseNetHdr>
 801dca0:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
 801dca4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 801dca8:	f7fc fb1e 	bl	801a2e8 <BnrgmPalCryptoMatchNid>
 801dcac:	b108      	cbz	r0, 801dcb2 <BnrgmProxyConfig_ProcessData+0x5a>
 801dcae:	2002      	movs	r0, #2
 801dcb0:	e7e9      	b.n	801dc86 <BnrgmProxyConfig_ProcessData+0x2e>
 801dcb2:	a901      	add	r1, sp, #4
 801dcb4:	a805      	add	r0, sp, #20
 801dcb6:	f7fd fd47 	bl	801b748 <BnrgmPalCryptoDecryptNetwork>
 801dcba:	2801      	cmp	r0, #1
 801dcbc:	d8f7      	bhi.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dcbe:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 801dcc2:	2b00      	cmp	r3, #0
 801dcc4:	d0f3      	beq.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dcc6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801dcca:	2b00      	cmp	r3, #0
 801dccc:	d1ef      	bne.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dcce:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 801dcd2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 801dcd6:	2a00      	cmp	r2, #0
 801dcd8:	dde9      	ble.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dcda:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 801dcde:	2a00      	cmp	r2, #0
 801dce0:	d1e5      	bne.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dce2:	4e48      	ldr	r6, [pc, #288]	; (801de04 <BnrgmProxyConfig_ProcessData+0x1ac>)
 801dce4:	f8a6 36f6 	strh.w	r3, [r6, #1782]	; 0x6f6
 801dce8:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801dcec:	3b12      	subs	r3, #18
 801dcee:	b2dc      	uxtb	r4, r3
 801dcf0:	2201      	movs	r2, #1
 801dcf2:	2c0f      	cmp	r4, #15
 801dcf4:	f886 26f4 	strb.w	r2, [r6, #1780]	; 0x6f4
 801dcf8:	d8c4      	bhi.n	801dc84 <BnrgmProxyConfig_ProcessData+0x2c>
 801dcfa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 801dcfe:	2802      	cmp	r0, #2
 801dd00:	d8d5      	bhi.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dd02:	2c00      	cmp	r4, #0
 801dd04:	d0d3      	beq.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dd06:	4290      	cmp	r0, r2
 801dd08:	d00a      	beq.n	801dd20 <BnrgmProxyConfig_ProcessData+0xc8>
 801dd0a:	2802      	cmp	r0, #2
 801dd0c:	d043      	beq.n	801dd96 <BnrgmProxyConfig_ProcessData+0x13e>
 801dd0e:	f7ff fe47 	bl	801d9a0 <BnrgmProxyConfig_ResetFilter>
 801dd12:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801dd16:	f886 39ec 	strb.w	r3, [r6, #2540]	; 0x9ec
 801dd1a:	f7ff ff45 	bl	801dba8 <BnrgmProxyConfig_SendFilterStatus>
 801dd1e:	e7b2      	b.n	801dc86 <BnrgmProxyConfig_ProcessData+0x2e>
 801dd20:	2c01      	cmp	r4, #1
 801dd22:	d0c4      	beq.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dd24:	f014 0501 	ands.w	r5, r4, #1
 801dd28:	d1c1      	bne.n	801dcae <BnrgmProxyConfig_ProcessData+0x56>
 801dd2a:	0864      	lsrs	r4, r4, #1
 801dd2c:	f10d 0705 	add.w	r7, sp, #5
 801dd30:	466a      	mov	r2, sp
 801dd32:	2102      	movs	r1, #2
 801dd34:	4638      	mov	r0, r7
 801dd36:	f7fd fa49 	bl	801b1cc <MobleInputStreamGetBigEndian>
 801dd3a:	f8bd c000 	ldrh.w	ip, [sp]
 801dd3e:	f1bc 0f00 	cmp.w	ip, #0
 801dd42:	d0ea      	beq.n	801dd1a <BnrgmProxyConfig_ProcessData+0xc2>
 801dd44:	2200      	movs	r2, #0
 801dd46:	4830      	ldr	r0, [pc, #192]	; (801de08 <BnrgmProxyConfig_ProcessData+0x1b0>)
 801dd48:	4611      	mov	r1, r2
 801dd4a:	f04f 33ff 	mov.w	r3, #4294967295
 801dd4e:	f890 8002 	ldrb.w	r8, [r0, #2]
 801dd52:	f1b8 0f01 	cmp.w	r8, #1
 801dd56:	fa4f fe81 	sxtb.w	lr, r1
 801dd5a:	d11a      	bne.n	801dd92 <BnrgmProxyConfig_ProcessData+0x13a>
 801dd5c:	f8b0 e004 	ldrh.w	lr, [r0, #4]
 801dd60:	45e6      	cmp	lr, ip
 801dd62:	bf08      	it	eq
 801dd64:	2201      	moveq	r2, #1
 801dd66:	3101      	adds	r1, #1
 801dd68:	2905      	cmp	r1, #5
 801dd6a:	f100 0004 	add.w	r0, r0, #4
 801dd6e:	d1ee      	bne.n	801dd4e <BnrgmProxyConfig_ProcessData+0xf6>
 801dd70:	1c59      	adds	r1, r3, #1
 801dd72:	d0d2      	beq.n	801dd1a <BnrgmProxyConfig_ProcessData+0xc2>
 801dd74:	b932      	cbnz	r2, 801dd84 <BnrgmProxyConfig_ProcessData+0x12c>
 801dd76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801dd7a:	2201      	movs	r2, #1
 801dd7c:	f883 29ee 	strb.w	r2, [r3, #2542]	; 0x9ee
 801dd80:	f8a3 c9f0 	strh.w	ip, [r3, #2544]	; 0x9f0
 801dd84:	3501      	adds	r5, #1
 801dd86:	b2eb      	uxtb	r3, r5
 801dd88:	42a3      	cmp	r3, r4
 801dd8a:	f107 0702 	add.w	r7, r7, #2
 801dd8e:	d3cf      	bcc.n	801dd30 <BnrgmProxyConfig_ProcessData+0xd8>
 801dd90:	e7c3      	b.n	801dd1a <BnrgmProxyConfig_ProcessData+0xc2>
 801dd92:	4673      	mov	r3, lr
 801dd94:	e7e7      	b.n	801dd66 <BnrgmProxyConfig_ProcessData+0x10e>
 801dd96:	2c01      	cmp	r4, #1
 801dd98:	f43f af75 	beq.w	801dc86 <BnrgmProxyConfig_ProcessData+0x2e>
 801dd9c:	f014 0501 	ands.w	r5, r4, #1
 801dda0:	f47f af71 	bne.w	801dc86 <BnrgmProxyConfig_ProcessData+0x2e>
 801dda4:	0864      	lsrs	r4, r4, #1
 801dda6:	f10d 0605 	add.w	r6, sp, #5
 801ddaa:	462f      	mov	r7, r5
 801ddac:	466a      	mov	r2, sp
 801ddae:	2102      	movs	r1, #2
 801ddb0:	4630      	mov	r0, r6
 801ddb2:	f7fd fa0b 	bl	801b1cc <MobleInputStreamGetBigEndian>
 801ddb6:	2300      	movs	r3, #0
 801ddb8:	f8bd 0000 	ldrh.w	r0, [sp]
 801ddbc:	4a12      	ldr	r2, [pc, #72]	; (801de08 <BnrgmProxyConfig_ProcessData+0x1b0>)
 801ddbe:	4619      	mov	r1, r3
 801ddc0:	f892 c002 	ldrb.w	ip, [r2, #2]
 801ddc4:	f1bc 0f01 	cmp.w	ip, #1
 801ddc8:	d112      	bne.n	801ddf0 <BnrgmProxyConfig_ProcessData+0x198>
 801ddca:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 801ddce:	4584      	cmp	ip, r0
 801ddd0:	d100      	bne.n	801ddd4 <BnrgmProxyConfig_ProcessData+0x17c>
 801ddd2:	7097      	strb	r7, [r2, #2]
 801ddd4:	3101      	adds	r1, #1
 801ddd6:	2905      	cmp	r1, #5
 801ddd8:	f102 0204 	add.w	r2, r2, #4
 801dddc:	d1f0      	bne.n	801ddc0 <BnrgmProxyConfig_ProcessData+0x168>
 801ddde:	2b05      	cmp	r3, #5
 801dde0:	d09b      	beq.n	801dd1a <BnrgmProxyConfig_ProcessData+0xc2>
 801dde2:	3501      	adds	r5, #1
 801dde4:	b2eb      	uxtb	r3, r5
 801dde6:	42a3      	cmp	r3, r4
 801dde8:	f106 0602 	add.w	r6, r6, #2
 801ddec:	d3de      	bcc.n	801ddac <BnrgmProxyConfig_ProcessData+0x154>
 801ddee:	e794      	b.n	801dd1a <BnrgmProxyConfig_ProcessData+0xc2>
 801ddf0:	3301      	adds	r3, #1
 801ddf2:	b2db      	uxtb	r3, r3
 801ddf4:	e7ee      	b.n	801ddd4 <BnrgmProxyConfig_ProcessData+0x17c>
 801ddf6:	bf00      	nop
 801ddf8:	080333d8 	.word	0x080333d8
 801ddfc:	08031698 	.word	0x08031698
 801de00:	080338bd 	.word	0x080338bd
 801de04:	20002514 	.word	0x20002514
 801de08:	20002f00 	.word	0x20002f00

0801de0c <BnrgmFrndMgmtSubscriptionListAdd>:
 801de0c:	4a07      	ldr	r2, [pc, #28]	; (801de2c <BnrgmFrndMgmtSubscriptionListAdd+0x20>)
 801de0e:	4603      	mov	r3, r0
 801de10:	f892 00bf 	ldrb.w	r0, [r2, #191]	; 0xbf
 801de14:	2802      	cmp	r0, #2
 801de16:	d007      	beq.n	801de28 <BnrgmFrndMgmtSubscriptionListAdd+0x1c>
 801de18:	4a05      	ldr	r2, [pc, #20]	; (801de30 <BnrgmFrndMgmtSubscriptionListAdd+0x24>)
 801de1a:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 801de1e:	2101      	movs	r1, #1
 801de20:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 801de24:	8313      	strh	r3, [r2, #24]
 801de26:	2000      	movs	r0, #0
 801de28:	4770      	bx	lr
 801de2a:	bf00      	nop
 801de2c:	20000324 	.word	0x20000324
 801de30:	20002514 	.word	0x20002514

0801de34 <MobleConfigModel_SubscriptionOverwrite>:
 801de34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de36:	4605      	mov	r5, r0
 801de38:	b930      	cbnz	r0, 801de48 <MobleConfigModel_SubscriptionOverwrite+0x14>
 801de3a:	4b2d      	ldr	r3, [pc, #180]	; (801def0 <MobleConfigModel_SubscriptionOverwrite+0xbc>)
 801de3c:	4a2d      	ldr	r2, [pc, #180]	; (801def4 <MobleConfigModel_SubscriptionOverwrite+0xc0>)
 801de3e:	482e      	ldr	r0, [pc, #184]	; (801def8 <MobleConfigModel_SubscriptionOverwrite+0xc4>)
 801de40:	f240 61be 	movw	r1, #1726	; 0x6be
 801de44:	f00a fe40 	bl	8028ac8 <__assert_func>
 801de48:	6804      	ldr	r4, [r0, #0]
 801de4a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801de4c:	f894 c01c 	ldrb.w	ip, [r4, #28]
 801de50:	8806      	ldrh	r6, [r0, #0]
 801de52:	4296      	cmp	r6, r2
 801de54:	d101      	bne.n	801de5a <MobleConfigModel_SubscriptionOverwrite+0x26>
 801de56:	2902      	cmp	r1, #2
 801de58:	d029      	beq.n	801deae <MobleConfigModel_SubscriptionOverwrite+0x7a>
 801de5a:	2600      	movs	r6, #0
 801de5c:	3424      	adds	r4, #36	; 0x24
 801de5e:	4630      	mov	r0, r6
 801de60:	b2f7      	uxtb	r7, r6
 801de62:	45bc      	cmp	ip, r7
 801de64:	d931      	bls.n	801deca <MobleConfigModel_SubscriptionOverwrite+0x96>
 801de66:	f854 7b04 	ldr.w	r7, [r4], #4
 801de6a:	f8b7 e000 	ldrh.w	lr, [r7]
 801de6e:	4596      	cmp	lr, r2
 801de70:	f106 0601 	add.w	r6, r6, #1
 801de74:	f04f 0001 	mov.w	r0, #1
 801de78:	d1f2      	bne.n	801de60 <MobleConfigModel_SubscriptionOverwrite+0x2c>
 801de7a:	2000      	movs	r0, #0
 801de7c:	f107 0278 	add.w	r2, r7, #120	; 0x78
 801de80:	2438      	movs	r4, #56	; 0x38
 801de82:	fb04 f600 	mul.w	r6, r4, r0
 801de86:	5996      	ldr	r6, [r2, r6]
 801de88:	428e      	cmp	r6, r1
 801de8a:	d12c      	bne.n	801dee6 <MobleConfigModel_SubscriptionOverwrite+0xb2>
 801de8c:	f403 4140 	and.w	r1, r3, #49152	; 0xc000
 801de90:	2200      	movs	r2, #0
 801de92:	460c      	mov	r4, r1
 801de94:	f5b1 4f40 	cmp.w	r1, #49152	; 0xc000
 801de98:	d002      	beq.n	801dea0 <MobleConfigModel_SubscriptionOverwrite+0x6c>
 801de9a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 801de9e:	d11d      	bne.n	801dedc <MobleConfigModel_SubscriptionOverwrite+0xa8>
 801dea0:	211c      	movs	r1, #28
 801dea2:	fb01 2200 	mla	r2, r1, r0, r2
 801dea6:	3240      	adds	r2, #64	; 0x40
 801dea8:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801deac:	e006      	b.n	801debc <MobleConfigModel_SubscriptionOverwrite+0x88>
 801deae:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801deb2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801deb6:	d109      	bne.n	801decc <MobleConfigModel_SubscriptionOverwrite+0x98>
 801deb8:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 801debc:	4618      	mov	r0, r3
 801debe:	f7ff ffa5 	bl	801de0c <BnrgmFrndMgmtSubscriptionListAdd>
 801dec2:	6828      	ldr	r0, [r5, #0]
 801dec4:	f7fe ffd8 	bl	801ce78 <MobleConfigNetworkSave>
 801dec8:	2000      	movs	r0, #0
 801deca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801decc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801ded0:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801ded4:	d1f5      	bne.n	801dec2 <MobleConfigModel_SubscriptionOverwrite+0x8e>
 801ded6:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
 801deda:	e7ef      	b.n	801debc <MobleConfigModel_SubscriptionOverwrite+0x88>
 801dedc:	3201      	adds	r2, #1
 801dede:	2a0a      	cmp	r2, #10
 801dee0:	d1d8      	bne.n	801de94 <MobleConfigModel_SubscriptionOverwrite+0x60>
 801dee2:	2001      	movs	r0, #1
 801dee4:	e7f1      	b.n	801deca <MobleConfigModel_SubscriptionOverwrite+0x96>
 801dee6:	3001      	adds	r0, #1
 801dee8:	280b      	cmp	r0, #11
 801deea:	d1ca      	bne.n	801de82 <MobleConfigModel_SubscriptionOverwrite+0x4e>
 801deec:	2002      	movs	r0, #2
 801deee:	e7ec      	b.n	801deca <MobleConfigModel_SubscriptionOverwrite+0x96>
 801def0:	08033901 	.word	0x08033901
 801def4:	080316b5 	.word	0x080316b5
 801def8:	08033393 	.word	0x08033393

0801defc <MobleConfigModel_SubscriptionAdd>:
 801defc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801defe:	4605      	mov	r5, r0
 801df00:	b930      	cbnz	r0, 801df10 <MobleConfigModel_SubscriptionAdd+0x14>
 801df02:	4b41      	ldr	r3, [pc, #260]	; (801e008 <MobleConfigModel_SubscriptionAdd+0x10c>)
 801df04:	4a41      	ldr	r2, [pc, #260]	; (801e00c <MobleConfigModel_SubscriptionAdd+0x110>)
 801df06:	4842      	ldr	r0, [pc, #264]	; (801e010 <MobleConfigModel_SubscriptionAdd+0x114>)
 801df08:	f240 519f 	movw	r1, #1439	; 0x59f
 801df0c:	f00a fddc 	bl	8028ac8 <__assert_func>
 801df10:	6800      	ldr	r0, [r0, #0]
 801df12:	6a47      	ldr	r7, [r0, #36]	; 0x24
 801df14:	f890 c01c 	ldrb.w	ip, [r0, #28]
 801df18:	883c      	ldrh	r4, [r7, #0]
 801df1a:	4294      	cmp	r4, r2
 801df1c:	d02e      	beq.n	801df7c <MobleConfigModel_SubscriptionAdd+0x80>
 801df1e:	2600      	movs	r6, #0
 801df20:	3024      	adds	r0, #36	; 0x24
 801df22:	4634      	mov	r4, r6
 801df24:	b2f7      	uxtb	r7, r6
 801df26:	45bc      	cmp	ip, r7
 801df28:	d94c      	bls.n	801dfc4 <MobleConfigModel_SubscriptionAdd+0xc8>
 801df2a:	f850 7b04 	ldr.w	r7, [r0], #4
 801df2e:	f8b7 e000 	ldrh.w	lr, [r7]
 801df32:	4596      	cmp	lr, r2
 801df34:	f106 0601 	add.w	r6, r6, #1
 801df38:	f04f 0401 	mov.w	r4, #1
 801df3c:	d1f2      	bne.n	801df24 <MobleConfigModel_SubscriptionAdd+0x28>
 801df3e:	2400      	movs	r4, #0
 801df40:	2238      	movs	r2, #56	; 0x38
 801df42:	f107 0c78 	add.w	ip, r7, #120	; 0x78
 801df46:	fb02 f004 	mul.w	r0, r2, r4
 801df4a:	f85c 6000 	ldr.w	r6, [ip, r0]
 801df4e:	428e      	cmp	r6, r1
 801df50:	d154      	bne.n	801dffc <MobleConfigModel_SubscriptionAdd+0x100>
 801df52:	f100 0180 	add.w	r1, r0, #128	; 0x80
 801df56:	f403 4640 	and.w	r6, r3, #49152	; 0xc000
 801df5a:	4439      	add	r1, r7
 801df5c:	2200      	movs	r2, #0
 801df5e:	46b4      	mov	ip, r6
 801df60:	f831 0b02 	ldrh.w	r0, [r1], #2
 801df64:	2800      	cmp	r0, #0
 801df66:	d142      	bne.n	801dfee <MobleConfigModel_SubscriptionAdd+0xf2>
 801df68:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
 801df6c:	d13c      	bne.n	801dfe8 <MobleConfigModel_SubscriptionAdd+0xec>
 801df6e:	211c      	movs	r1, #28
 801df70:	fb01 2204 	mla	r2, r1, r4, r2
 801df74:	3240      	adds	r2, #64	; 0x40
 801df76:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801df7a:	e00b      	b.n	801df94 <MobleConfigModel_SubscriptionAdd+0x98>
 801df7c:	2902      	cmp	r1, #2
 801df7e:	d1ce      	bne.n	801df1e <MobleConfigModel_SubscriptionAdd+0x22>
 801df80:	f8b7 6066 	ldrh.w	r6, [r7, #102]	; 0x66
 801df84:	b976      	cbnz	r6, 801dfa4 <MobleConfigModel_SubscriptionAdd+0xa8>
 801df86:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801df8a:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801df8e:	d109      	bne.n	801dfa4 <MobleConfigModel_SubscriptionAdd+0xa8>
 801df90:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 801df94:	4618      	mov	r0, r3
 801df96:	f7ff ff39 	bl	801de0c <BnrgmFrndMgmtSubscriptionListAdd>
 801df9a:	6828      	ldr	r0, [r5, #0]
 801df9c:	f7fe ff6c 	bl	801ce78 <MobleConfigNetworkSave>
 801dfa0:	2400      	movs	r4, #0
 801dfa2:	e00f      	b.n	801dfc4 <MobleConfigModel_SubscriptionAdd+0xc8>
 801dfa4:	f8b7 4068 	ldrh.w	r4, [r7, #104]	; 0x68
 801dfa8:	b974      	cbnz	r4, 801dfc8 <MobleConfigModel_SubscriptionAdd+0xcc>
 801dfaa:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801dfae:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801dfb2:	d109      	bne.n	801dfc8 <MobleConfigModel_SubscriptionAdd+0xcc>
 801dfb4:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 801dfb8:	4618      	mov	r0, r3
 801dfba:	f7ff ff27 	bl	801de0c <BnrgmFrndMgmtSubscriptionListAdd>
 801dfbe:	6828      	ldr	r0, [r5, #0]
 801dfc0:	f7fe ff5a 	bl	801ce78 <MobleConfigNetworkSave>
 801dfc4:	4620      	mov	r0, r4
 801dfc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801dfc8:	429e      	cmp	r6, r3
 801dfca:	d104      	bne.n	801dfd6 <MobleConfigModel_SubscriptionAdd+0xda>
 801dfcc:	f406 4640 	and.w	r6, r6, #49152	; 0xc000
 801dfd0:	f5b6 4f40 	cmp.w	r6, #49152	; 0xc000
 801dfd4:	d0e4      	beq.n	801dfa0 <MobleConfigModel_SubscriptionAdd+0xa4>
 801dfd6:	429c      	cmp	r4, r3
 801dfd8:	d10e      	bne.n	801dff8 <MobleConfigModel_SubscriptionAdd+0xfc>
 801dfda:	f404 4440 	and.w	r4, r4, #49152	; 0xc000
 801dfde:	f5b4 4400 	subs.w	r4, r4, #32768	; 0x8000
 801dfe2:	bf18      	it	ne
 801dfe4:	2401      	movne	r4, #1
 801dfe6:	e7ed      	b.n	801dfc4 <MobleConfigModel_SubscriptionAdd+0xc8>
 801dfe8:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 801dfec:	d0bf      	beq.n	801df6e <MobleConfigModel_SubscriptionAdd+0x72>
 801dfee:	4298      	cmp	r0, r3
 801dff0:	d0d6      	beq.n	801dfa0 <MobleConfigModel_SubscriptionAdd+0xa4>
 801dff2:	3201      	adds	r2, #1
 801dff4:	2a0a      	cmp	r2, #10
 801dff6:	d1b3      	bne.n	801df60 <MobleConfigModel_SubscriptionAdd+0x64>
 801dff8:	2401      	movs	r4, #1
 801dffa:	e7e3      	b.n	801dfc4 <MobleConfigModel_SubscriptionAdd+0xc8>
 801dffc:	3401      	adds	r4, #1
 801dffe:	2c0b      	cmp	r4, #11
 801e000:	d1a1      	bne.n	801df46 <MobleConfigModel_SubscriptionAdd+0x4a>
 801e002:	2402      	movs	r4, #2
 801e004:	e7de      	b.n	801dfc4 <MobleConfigModel_SubscriptionAdd+0xc8>
 801e006:	bf00      	nop
 801e008:	08033901 	.word	0x08033901
 801e00c:	080316dc 	.word	0x080316dc
 801e010:	08033393 	.word	0x08033393

0801e014 <BnrgmFrndMgmtSubscriptionListRemove>:
 801e014:	4b08      	ldr	r3, [pc, #32]	; (801e038 <BnrgmFrndMgmtSubscriptionListRemove+0x24>)
 801e016:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 801e01a:	2b01      	cmp	r3, #1
 801e01c:	bf04      	itt	eq
 801e01e:	4a07      	ldreq	r2, [pc, #28]	; (801e03c <BnrgmFrndMgmtSubscriptionListRemove+0x28>)
 801e020:	f8d2 2a04 	ldreq.w	r2, [r2, #2564]	; 0xa04
 801e024:	f04f 0302 	mov.w	r3, #2
 801e028:	bf03      	ittte	eq
 801e02a:	8310      	strheq	r0, [r2, #24]
 801e02c:	f882 306a 	strbeq.w	r3, [r2, #106]	; 0x6a
 801e030:	2000      	moveq	r0, #0
 801e032:	4618      	movne	r0, r3
 801e034:	4770      	bx	lr
 801e036:	bf00      	nop
 801e038:	20000324 	.word	0x20000324
 801e03c:	20002514 	.word	0x20002514

0801e040 <MobleConfigModel_SubscriptionDelete>:
 801e040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e042:	4605      	mov	r5, r0
 801e044:	b930      	cbnz	r0, 801e054 <MobleConfigModel_SubscriptionDelete+0x14>
 801e046:	4b39      	ldr	r3, [pc, #228]	; (801e12c <MobleConfigModel_SubscriptionDelete+0xec>)
 801e048:	4a39      	ldr	r2, [pc, #228]	; (801e130 <MobleConfigModel_SubscriptionDelete+0xf0>)
 801e04a:	483a      	ldr	r0, [pc, #232]	; (801e134 <MobleConfigModel_SubscriptionDelete+0xf4>)
 801e04c:	f44f 61c3 	mov.w	r1, #1560	; 0x618
 801e050:	f00a fd3a 	bl	8028ac8 <__assert_func>
 801e054:	6800      	ldr	r0, [r0, #0]
 801e056:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801e058:	f890 c01c 	ldrb.w	ip, [r0, #28]
 801e05c:	8834      	ldrh	r4, [r6, #0]
 801e05e:	4294      	cmp	r4, r2
 801e060:	d139      	bne.n	801e0d6 <MobleConfigModel_SubscriptionDelete+0x96>
 801e062:	2902      	cmp	r1, #2
 801e064:	d137      	bne.n	801e0d6 <MobleConfigModel_SubscriptionDelete+0x96>
 801e066:	f8b6 4066 	ldrh.w	r4, [r6, #102]	; 0x66
 801e06a:	429c      	cmp	r4, r3
 801e06c:	d110      	bne.n	801e090 <MobleConfigModel_SubscriptionDelete+0x50>
 801e06e:	f404 4240 	and.w	r2, r4, #49152	; 0xc000
 801e072:	f5b2 4f40 	cmp.w	r2, #49152	; 0xc000
 801e076:	d10b      	bne.n	801e090 <MobleConfigModel_SubscriptionDelete+0x50>
 801e078:	2700      	movs	r7, #0
 801e07a:	4620      	mov	r0, r4
 801e07c:	f8a6 7066 	strh.w	r7, [r6, #102]	; 0x66
 801e080:	f7ff ffc8 	bl	801e014 <BnrgmFrndMgmtSubscriptionListRemove>
 801e084:	6828      	ldr	r0, [r5, #0]
 801e086:	f7fe fef7 	bl	801ce78 <MobleConfigNetworkSave>
 801e08a:	463c      	mov	r4, r7
 801e08c:	4620      	mov	r0, r4
 801e08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e090:	f8b6 0068 	ldrh.w	r0, [r6, #104]	; 0x68
 801e094:	4298      	cmp	r0, r3
 801e096:	d10e      	bne.n	801e0b6 <MobleConfigModel_SubscriptionDelete+0x76>
 801e098:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 801e09c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 801e0a0:	d109      	bne.n	801e0b6 <MobleConfigModel_SubscriptionDelete+0x76>
 801e0a2:	2400      	movs	r4, #0
 801e0a4:	f8a6 4068 	strh.w	r4, [r6, #104]	; 0x68
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f7ff ffb3 	bl	801e014 <BnrgmFrndMgmtSubscriptionListRemove>
 801e0ae:	6828      	ldr	r0, [r5, #0]
 801e0b0:	f7fe fee2 	bl	801ce78 <MobleConfigNetworkSave>
 801e0b4:	e7ea      	b.n	801e08c <MobleConfigModel_SubscriptionDelete+0x4c>
 801e0b6:	2c00      	cmp	r4, #0
 801e0b8:	d0e8      	beq.n	801e08c <MobleConfigModel_SubscriptionDelete+0x4c>
 801e0ba:	1e04      	subs	r4, r0, #0
 801e0bc:	bf18      	it	ne
 801e0be:	2401      	movne	r4, #1
 801e0c0:	e7e4      	b.n	801e08c <MobleConfigModel_SubscriptionDelete+0x4c>
 801e0c2:	3201      	adds	r2, #1
 801e0c4:	2a0a      	cmp	r2, #10
 801e0c6:	d124      	bne.n	801e112 <MobleConfigModel_SubscriptionDelete+0xd2>
 801e0c8:	3c00      	subs	r4, #0
 801e0ca:	e7f7      	b.n	801e0bc <MobleConfigModel_SubscriptionDelete+0x7c>
 801e0cc:	3601      	adds	r6, #1
 801e0ce:	2e0b      	cmp	r6, #11
 801e0d0:	d115      	bne.n	801e0fe <MobleConfigModel_SubscriptionDelete+0xbe>
 801e0d2:	2402      	movs	r4, #2
 801e0d4:	e7da      	b.n	801e08c <MobleConfigModel_SubscriptionDelete+0x4c>
 801e0d6:	2600      	movs	r6, #0
 801e0d8:	3024      	adds	r0, #36	; 0x24
 801e0da:	4634      	mov	r4, r6
 801e0dc:	b2f7      	uxtb	r7, r6
 801e0de:	45bc      	cmp	ip, r7
 801e0e0:	d9d4      	bls.n	801e08c <MobleConfigModel_SubscriptionDelete+0x4c>
 801e0e2:	f850 7b04 	ldr.w	r7, [r0], #4
 801e0e6:	f8b7 e000 	ldrh.w	lr, [r7]
 801e0ea:	4596      	cmp	lr, r2
 801e0ec:	f106 0601 	add.w	r6, r6, #1
 801e0f0:	f04f 0401 	mov.w	r4, #1
 801e0f4:	d1f2      	bne.n	801e0dc <MobleConfigModel_SubscriptionDelete+0x9c>
 801e0f6:	2600      	movs	r6, #0
 801e0f8:	2238      	movs	r2, #56	; 0x38
 801e0fa:	f107 0c78 	add.w	ip, r7, #120	; 0x78
 801e0fe:	fb02 f006 	mul.w	r0, r2, r6
 801e102:	f85c 4000 	ldr.w	r4, [ip, r0]
 801e106:	428c      	cmp	r4, r1
 801e108:	d1e0      	bne.n	801e0cc <MobleConfigModel_SubscriptionDelete+0x8c>
 801e10a:	f100 0180 	add.w	r1, r0, #128	; 0x80
 801e10e:	4439      	add	r1, r7
 801e110:	2200      	movs	r2, #0
 801e112:	f831 4b02 	ldrh.w	r4, [r1], #2
 801e116:	429c      	cmp	r4, r3
 801e118:	d1d3      	bne.n	801e0c2 <MobleConfigModel_SubscriptionDelete+0x82>
 801e11a:	211c      	movs	r1, #28
 801e11c:	fb01 2206 	mla	r2, r1, r6, r2
 801e120:	3240      	adds	r2, #64	; 0x40
 801e122:	2400      	movs	r4, #0
 801e124:	f827 4012 	strh.w	r4, [r7, r2, lsl #1]
 801e128:	e7be      	b.n	801e0a8 <MobleConfigModel_SubscriptionDelete+0x68>
 801e12a:	bf00      	nop
 801e12c:	08033901 	.word	0x08033901
 801e130:	080316fd 	.word	0x080316fd
 801e134:	08033393 	.word	0x08033393

0801e138 <BnrgmFrndFnBreakFriendship>:
 801e138:	b570      	push	{r4, r5, r6, lr}
 801e13a:	460c      	mov	r4, r1
 801e13c:	2500      	movs	r5, #0
 801e13e:	f44f 764d 	mov.w	r6, #820	; 0x334
 801e142:	78a3      	ldrb	r3, [r4, #2]
 801e144:	b2ea      	uxtb	r2, r5
 801e146:	4293      	cmp	r3, r2
 801e148:	d801      	bhi.n	801e14e <BnrgmFrndFnBreakFriendship+0x16>
 801e14a:	2000      	movs	r0, #0
 801e14c:	bd70      	pop	{r4, r5, r6, pc}
 801e14e:	fb06 4302 	mla	r3, r6, r2, r4
 801e152:	6998      	ldr	r0, [r3, #24]
 801e154:	b108      	cbz	r0, 801e15a <BnrgmFrndFnBreakFriendship+0x22>
 801e156:	f7f9 fda5 	bl	8017ca4 <MoblePalTimerDestroy>
 801e15a:	fb06 4002 	mla	r0, r6, r2, r4
 801e15e:	2100      	movs	r1, #0
 801e160:	f44f 724d 	mov.w	r2, #820	; 0x334
 801e164:	3004      	adds	r0, #4
 801e166:	f00b fba5 	bl	80298b4 <memset>
 801e16a:	3501      	adds	r5, #1
 801e16c:	e7e9      	b.n	801e142 <BnrgmFrndFnBreakFriendship+0xa>

0801e16e <BnrgmFrndFnGetLpnOffset>:
 801e16e:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e170:	4603      	mov	r3, r0
 801e172:	7886      	ldrb	r6, [r0, #2]
 801e174:	2200      	movs	r2, #0
 801e176:	f04f 30ff 	mov.w	r0, #4294967295
 801e17a:	b2d4      	uxtb	r4, r2
 801e17c:	42a6      	cmp	r6, r4
 801e17e:	d800      	bhi.n	801e182 <BnrgmFrndFnGetLpnOffset+0x14>
 801e180:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e182:	891d      	ldrh	r5, [r3, #8]
 801e184:	b14d      	cbz	r5, 801e19a <BnrgmFrndFnGetLpnOffset+0x2c>
 801e186:	f893 c333 	ldrb.w	ip, [r3, #819]	; 0x333
 801e18a:	2400      	movs	r4, #0
 801e18c:	b2e7      	uxtb	r7, r4
 801e18e:	45bc      	cmp	ip, r7
 801e190:	d903      	bls.n	801e19a <BnrgmFrndFnGetLpnOffset+0x2c>
 801e192:	192f      	adds	r7, r5, r4
 801e194:	42b9      	cmp	r1, r7
 801e196:	d104      	bne.n	801e1a2 <BnrgmFrndFnGetLpnOffset+0x34>
 801e198:	b250      	sxtb	r0, r2
 801e19a:	3201      	adds	r2, #1
 801e19c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801e1a0:	e7eb      	b.n	801e17a <BnrgmFrndFnGetLpnOffset+0xc>
 801e1a2:	3401      	adds	r4, #1
 801e1a4:	e7f2      	b.n	801e18c <BnrgmFrndFnGetLpnOffset+0x1e>

0801e1a6 <BnrgmFrndFnGetLpnPollTimeout>:
 801e1a6:	b510      	push	{r4, lr}
 801e1a8:	4604      	mov	r4, r0
 801e1aa:	f7ff ffe0 	bl	801e16e <BnrgmFrndFnGetLpnOffset>
 801e1ae:	1c43      	adds	r3, r0, #1
 801e1b0:	d00c      	beq.n	801e1cc <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801e1b2:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e1b6:	fb03 4000 	mla	r0, r3, r0, r4
 801e1ba:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
 801e1be:	2b02      	cmp	r3, #2
 801e1c0:	d904      	bls.n	801e1cc <BnrgmFrndFnGetLpnPollTimeout+0x26>
 801e1c2:	6900      	ldr	r0, [r0, #16]
 801e1c4:	2364      	movs	r3, #100	; 0x64
 801e1c6:	fbb0 f0f3 	udiv	r0, r0, r3
 801e1ca:	bd10      	pop	{r4, pc}
 801e1cc:	2000      	movs	r0, #0
 801e1ce:	e7fc      	b.n	801e1ca <BnrgmFrndFnGetLpnPollTimeout+0x24>

0801e1d0 <BnrgmFrndMgmtGetLpnPollTimeout>:
 801e1d0:	4b02      	ldr	r3, [pc, #8]	; (801e1dc <BnrgmFrndMgmtGetLpnPollTimeout+0xc>)
 801e1d2:	4601      	mov	r1, r0
 801e1d4:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e1d8:	f7ff bfe5 	b.w	801e1a6 <BnrgmFrndFnGetLpnPollTimeout>
 801e1dc:	20002514 	.word	0x20002514

0801e1e0 <BnrgmFrndFnInsertFriendUpdate>:
 801e1e0:	b570      	push	{r4, r5, r6, lr}
 801e1e2:	4a1a      	ldr	r2, [pc, #104]	; (801e24c <BnrgmFrndFnInsertFriendUpdate+0x6c>)
 801e1e4:	f890 1068 	ldrb.w	r1, [r0, #104]	; 0x68
 801e1e8:	4c19      	ldr	r4, [pc, #100]	; (801e250 <BnrgmFrndFnInsertFriendUpdate+0x70>)
 801e1ea:	440a      	add	r2, r1
 801e1ec:	4603      	mov	r3, r0
 801e1ee:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 801e1f2:	f890 032c 	ldrb.w	r0, [r0, #812]	; 0x32c
 801e1f6:	1e91      	subs	r1, r2, #2
 801e1f8:	424a      	negs	r2, r1
 801e1fa:	414a      	adcs	r2, r1
 801e1fc:	f894 165c 	ldrb.w	r1, [r4, #1628]	; 0x65c
 801e200:	2901      	cmp	r1, #1
 801e202:	bf08      	it	eq
 801e204:	f042 0202 	orreq.w	r2, r2, #2
 801e208:	2810      	cmp	r0, #16
 801e20a:	d81d      	bhi.n	801e248 <BnrgmFrndFnInsertFriendUpdate+0x68>
 801e20c:	f893 132d 	ldrb.w	r1, [r3, #813]	; 0x32d
 801e210:	4408      	add	r0, r1
 801e212:	f000 000f 	and.w	r0, r0, #15
 801e216:	252c      	movs	r5, #44	; 0x2c
 801e218:	fb05 3100 	mla	r1, r5, r0, r3
 801e21c:	2601      	movs	r6, #1
 801e21e:	f881 6096 	strb.w	r6, [r1, #150]	; 0x96
 801e222:	4608      	mov	r0, r1
 801e224:	2605      	movs	r6, #5
 801e226:	f881 2085 	strb.w	r2, [r1, #133]	; 0x85
 801e22a:	f881 6095 	strb.w	r6, [r1, #149]	; 0x95
 801e22e:	2204      	movs	r2, #4
 801e230:	f8d4 1658 	ldr.w	r1, [r4, #1624]	; 0x658
 801e234:	3086      	adds	r0, #134	; 0x86
 801e236:	f7fc fff3 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801e23a:	f893 232c 	ldrb.w	r2, [r3, #812]	; 0x32c
 801e23e:	3201      	adds	r2, #1
 801e240:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
 801e244:	2000      	movs	r0, #0
 801e246:	bd70      	pop	{r4, r5, r6, pc}
 801e248:	2002      	movs	r0, #2
 801e24a:	e7fc      	b.n	801e246 <BnrgmFrndFnInsertFriendUpdate+0x66>
 801e24c:	20000324 	.word	0x20000324
 801e250:	2000141c 	.word	0x2000141c

0801e254 <BnrgmFrndFnGetLpnStatus>:
 801e254:	b510      	push	{r4, lr}
 801e256:	4604      	mov	r4, r0
 801e258:	f7ff ff89 	bl	801e16e <BnrgmFrndFnGetLpnOffset>
 801e25c:	1c43      	adds	r3, r0, #1
 801e25e:	d00b      	beq.n	801e278 <BnrgmFrndFnGetLpnStatus+0x24>
 801e260:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e264:	fb03 4400 	mla	r4, r3, r0, r4
 801e268:	f894 006e 	ldrb.w	r0, [r4, #110]	; 0x6e
 801e26c:	3801      	subs	r0, #1
 801e26e:	2801      	cmp	r0, #1
 801e270:	bf8c      	ite	hi
 801e272:	2000      	movhi	r0, #0
 801e274:	2001      	movls	r0, #1
 801e276:	bd10      	pop	{r4, pc}
 801e278:	2002      	movs	r0, #2
 801e27a:	e7fc      	b.n	801e276 <BnrgmFrndFnGetLpnStatus+0x22>

0801e27c <BnrgmFrndMgmtGetFriendshipStatus>:
 801e27c:	4b02      	ldr	r3, [pc, #8]	; (801e288 <BnrgmFrndMgmtGetFriendshipStatus+0xc>)
 801e27e:	4601      	mov	r1, r0
 801e280:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e284:	f7ff bfe6 	b.w	801e254 <BnrgmFrndFnGetLpnStatus>
 801e288:	20002514 	.word	0x20002514

0801e28c <BnrgmFrndFnGetSubscrStatus>:
 801e28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e28e:	f44f 7c4d 	mov.w	ip, #820	; 0x334
 801e292:	2700      	movs	r7, #0
 801e294:	7884      	ldrb	r4, [r0, #2]
 801e296:	b2fe      	uxtb	r6, r7
 801e298:	42b4      	cmp	r4, r6
 801e29a:	d801      	bhi.n	801e2a0 <BnrgmFrndFnGetSubscrStatus+0x14>
 801e29c:	2000      	movs	r0, #0
 801e29e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e2a0:	fb0c 0506 	mla	r5, ip, r6, r0
 801e2a4:	351e      	adds	r5, #30
 801e2a6:	2406      	movs	r4, #6
 801e2a8:	f835 eb02 	ldrh.w	lr, [r5], #2
 801e2ac:	458e      	cmp	lr, r1
 801e2ae:	d106      	bne.n	801e2be <BnrgmFrndFnGetSubscrStatus+0x32>
 801e2b0:	7814      	ldrb	r4, [r2, #0]
 801e2b2:	551e      	strb	r6, [r3, r4]
 801e2b4:	7814      	ldrb	r4, [r2, #0]
 801e2b6:	3401      	adds	r4, #1
 801e2b8:	7014      	strb	r4, [r2, #0]
 801e2ba:	3701      	adds	r7, #1
 801e2bc:	e7ea      	b.n	801e294 <BnrgmFrndFnGetSubscrStatus+0x8>
 801e2be:	3c01      	subs	r4, #1
 801e2c0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 801e2c4:	d1f0      	bne.n	801e2a8 <BnrgmFrndFnGetSubscrStatus+0x1c>
 801e2c6:	e7f8      	b.n	801e2ba <BnrgmFrndFnGetSubscrStatus+0x2e>

0801e2c8 <BnrgmFrndMgmtGetSubscrStatus>:
 801e2c8:	4613      	mov	r3, r2
 801e2ca:	460a      	mov	r2, r1
 801e2cc:	4601      	mov	r1, r0
 801e2ce:	4802      	ldr	r0, [pc, #8]	; (801e2d8 <BnrgmFrndMgmtGetSubscrStatus+0x10>)
 801e2d0:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	; 0xa04
 801e2d4:	f7ff bfda 	b.w	801e28c <BnrgmFrndFnGetSubscrStatus>
 801e2d8:	20002514 	.word	0x20002514

0801e2dc <BnrgmFrndFnQueLpnPkt>:
 801e2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2e0:	4617      	mov	r7, r2
 801e2e2:	b087      	sub	sp, #28
 801e2e4:	4a97      	ldr	r2, [pc, #604]	; (801e544 <BnrgmFrndFnQueLpnPkt+0x268>)
 801e2e6:	9911      	ldr	r1, [sp, #68]	; 0x44
 801e2e8:	f8b2 294c 	ldrh.w	r2, [r2, #2380]	; 0x94c
 801e2ec:	9301      	str	r3, [sp, #4]
 801e2ee:	428a      	cmp	r2, r1
 801e2f0:	f04f 0300 	mov.w	r3, #0
 801e2f4:	4605      	mov	r5, r0
 801e2f6:	f88d 300b 	strb.w	r3, [sp, #11]
 801e2fa:	f0c0 8121 	bcc.w	801e540 <BnrgmFrndFnQueLpnPkt+0x264>
 801e2fe:	7bfa      	ldrb	r2, [r7, #15]
 801e300:	2a01      	cmp	r2, #1
 801e302:	f240 811d 	bls.w	801e540 <BnrgmFrndFnQueLpnPkt+0x264>
 801e306:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801e30a:	8af9      	ldrh	r1, [r7, #22]
 801e30c:	429a      	cmp	r2, r3
 801e30e:	dd18      	ble.n	801e342 <BnrgmFrndFnQueLpnPkt+0x66>
 801e310:	f7ff ff2d 	bl	801e16e <BnrgmFrndFnGetLpnOffset>
 801e314:	2301      	movs	r3, #1
 801e316:	f88d 000c 	strb.w	r0, [sp, #12]
 801e31a:	f88d 300b 	strb.w	r3, [sp, #11]
 801e31e:	f04f 0800 	mov.w	r8, #0
 801e322:	4644      	mov	r4, r8
 801e324:	46c4      	mov	ip, r8
 801e326:	4646      	mov	r6, r8
 801e328:	2201      	movs	r2, #1
 801e32a:	f44f 794d 	mov.w	r9, #820	; 0x334
 801e32e:	f89d 100b 	ldrb.w	r1, [sp, #11]
 801e332:	fa5f f388 	uxtb.w	r3, r8
 801e336:	4299      	cmp	r1, r3
 801e338:	d82d      	bhi.n	801e396 <BnrgmFrndFnQueLpnPkt+0xba>
 801e33a:	2000      	movs	r0, #0
 801e33c:	b007      	add	sp, #28
 801e33e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801e346:	4291      	cmp	r1, r2
 801e348:	d11f      	bne.n	801e38a <BnrgmFrndFnQueLpnPkt+0xae>
 801e34a:	7884      	ldrb	r4, [r0, #2]
 801e34c:	4619      	mov	r1, r3
 801e34e:	461a      	mov	r2, r3
 801e350:	f100 0608 	add.w	r6, r0, #8
 801e354:	f44f 7c4d 	mov.w	ip, #820	; 0x334
 801e358:	b2d8      	uxtb	r0, r3
 801e35a:	4284      	cmp	r4, r0
 801e35c:	d804      	bhi.n	801e368 <BnrgmFrndFnQueLpnPkt+0x8c>
 801e35e:	2900      	cmp	r1, #0
 801e360:	d0dd      	beq.n	801e31e <BnrgmFrndFnQueLpnPkt+0x42>
 801e362:	f88d 200b 	strb.w	r2, [sp, #11]
 801e366:	e7da      	b.n	801e31e <BnrgmFrndFnQueLpnPkt+0x42>
 801e368:	fb0c fe03 	mul.w	lr, ip, r3
 801e36c:	f836 e00e 	ldrh.w	lr, [r6, lr]
 801e370:	f1be 0f00 	cmp.w	lr, #0
 801e374:	d007      	beq.n	801e386 <BnrgmFrndFnQueLpnPkt+0xaa>
 801e376:	f102 0118 	add.w	r1, r2, #24
 801e37a:	4469      	add	r1, sp
 801e37c:	3201      	adds	r2, #1
 801e37e:	f801 0c0c 	strb.w	r0, [r1, #-12]
 801e382:	b2d2      	uxtb	r2, r2
 801e384:	2101      	movs	r1, #1
 801e386:	3301      	adds	r3, #1
 801e388:	e7e6      	b.n	801e358 <BnrgmFrndFnQueLpnPkt+0x7c>
 801e38a:	ab03      	add	r3, sp, #12
 801e38c:	f10d 020b 	add.w	r2, sp, #11
 801e390:	f7ff ff7c 	bl	801e28c <BnrgmFrndFnGetSubscrStatus>
 801e394:	e7c3      	b.n	801e31e <BnrgmFrndFnQueLpnPkt+0x42>
 801e396:	3318      	adds	r3, #24
 801e398:	446b      	add	r3, sp
 801e39a:	8ab8      	ldrh	r0, [r7, #20]
 801e39c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801e3a0:	fb09 5103 	mla	r1, r9, r3, r5
 801e3a4:	f8b1 e008 	ldrh.w	lr, [r1, #8]
 801e3a8:	4570      	cmp	r0, lr
 801e3aa:	d304      	bcc.n	801e3b6 <BnrgmFrndFnQueLpnPkt+0xda>
 801e3ac:	f891 1333 	ldrb.w	r1, [r1, #819]	; 0x333
 801e3b0:	4471      	add	r1, lr
 801e3b2:	4288      	cmp	r0, r1
 801e3b4:	db6a      	blt.n	801e48c <BnrgmFrndFnQueLpnPkt+0x1b0>
 801e3b6:	9901      	ldr	r1, [sp, #4]
 801e3b8:	7809      	ldrb	r1, [r1, #0]
 801e3ba:	2902      	cmp	r1, #2
 801e3bc:	d164      	bne.n	801e488 <BnrgmFrndFnQueLpnPkt+0x1ac>
 801e3be:	9a01      	ldr	r2, [sp, #4]
 801e3c0:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 801e3c4:	fb09 5e03 	mla	lr, r9, r3, r5
 801e3c8:	2000      	movs	r0, #0
 801e3ca:	f8be 2080 	ldrh.w	r2, [lr, #128]	; 0x80
 801e3ce:	455a      	cmp	r2, fp
 801e3d0:	fa5f fa80 	uxtb.w	sl, r0
 801e3d4:	d105      	bne.n	801e3e2 <BnrgmFrndFnQueLpnPkt+0x106>
 801e3d6:	f8de 1074 	ldr.w	r1, [lr, #116]	; 0x74
 801e3da:	693a      	ldr	r2, [r7, #16]
 801e3dc:	4291      	cmp	r1, r2
 801e3de:	f0c0 80ac 	bcc.w	801e53a <BnrgmFrndFnQueLpnPkt+0x25e>
 801e3e2:	3001      	adds	r0, #1
 801e3e4:	2810      	cmp	r0, #16
 801e3e6:	f10e 0e2c 	add.w	lr, lr, #44	; 0x2c
 801e3ea:	d1ee      	bne.n	801e3ca <BnrgmFrndFnQueLpnPkt+0xee>
 801e3ec:	fb09 f203 	mul.w	r2, r9, r3
 801e3f0:	18a8      	adds	r0, r5, r2
 801e3f2:	f890 e330 	ldrb.w	lr, [r0, #816]	; 0x330
 801e3f6:	f890 1331 	ldrb.w	r1, [r0, #817]	; 0x331
 801e3fa:	f1be 0f0f 	cmp.w	lr, #15
 801e3fe:	d848      	bhi.n	801e492 <BnrgmFrndFnQueLpnPkt+0x1b6>
 801e400:	4471      	add	r1, lr
 801e402:	f10e 0201 	add.w	r2, lr, #1
 801e406:	f001 060f 	and.w	r6, r1, #15
 801e40a:	f880 2330 	strb.w	r2, [r0, #816]	; 0x330
 801e40e:	212c      	movs	r1, #44	; 0x2c
 801e410:	fb09 f003 	mul.w	r0, r9, r3
 801e414:	fb01 0206 	mla	r2, r1, r6, r0
 801e418:	442a      	add	r2, r5
 801e41a:	fb06 0001 	mla	r0, r6, r1, r0
 801e41e:	f04f 0c00 	mov.w	ip, #0
 801e422:	f882 c09a 	strb.w	ip, [r2, #154]	; 0x9a
 801e426:	f100 0c70 	add.w	ip, r0, #112	; 0x70
 801e42a:	68fa      	ldr	r2, [r7, #12]
 801e42c:	f845 200c 	str.w	r2, [r5, ip]
 801e430:	eb05 010c 	add.w	r1, r5, ip
 801e434:	693a      	ldr	r2, [r7, #16]
 801e436:	604a      	str	r2, [r1, #4]
 801e438:	697a      	ldr	r2, [r7, #20]
 801e43a:	608a      	str	r2, [r1, #8]
 801e43c:	9901      	ldr	r1, [sp, #4]
 801e43e:	f100 027c 	add.w	r2, r0, #124	; 0x7c
 801e442:	eb02 0a05 	add.w	sl, r2, r5
 801e446:	f101 0c0c 	add.w	ip, r1, #12
 801e44a:	f851 eb04 	ldr.w	lr, [r1], #4
 801e44e:	f84a eb04 	str.w	lr, [sl], #4
 801e452:	4561      	cmp	r1, ip
 801e454:	d1f9      	bne.n	801e44a <BnrgmFrndFnQueLpnPkt+0x16e>
 801e456:	222c      	movs	r2, #44	; 0x2c
 801e458:	fb09 f303 	mul.w	r3, r9, r3
 801e45c:	fb02 3306 	mla	r3, r2, r6, r3
 801e460:	7809      	ldrb	r1, [r1, #0]
 801e462:	f88a 1000 	strb.w	r1, [sl]
 801e466:	442b      	add	r3, r5
 801e468:	3089      	adds	r0, #137	; 0x89
 801e46a:	f893 2073 	ldrb.w	r2, [r3, #115]	; 0x73
 801e46e:	9910      	ldr	r1, [sp, #64]	; 0x40
 801e470:	3a01      	subs	r2, #1
 801e472:	f883 2073 	strb.w	r2, [r3, #115]	; 0x73
 801e476:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801e478:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801e47c:	4428      	add	r0, r5
 801e47e:	f00b faaa 	bl	80299d6 <memcpy>
 801e482:	f04f 0c01 	mov.w	ip, #1
 801e486:	e056      	b.n	801e536 <BnrgmFrndFnQueLpnPkt+0x25a>
 801e488:	2a00      	cmp	r2, #0
 801e48a:	d1af      	bne.n	801e3ec <BnrgmFrndFnQueLpnPkt+0x110>
 801e48c:	f108 0801 	add.w	r8, r8, #1
 801e490:	e74d      	b.n	801e32e <BnrgmFrndFnQueLpnPkt+0x52>
 801e492:	f104 0a10 	add.w	sl, r4, #16
 801e496:	fa5f fa8a 	uxtb.w	sl, sl
 801e49a:	1b09      	subs	r1, r1, r4
 801e49c:	f04f 0b2c 	mov.w	fp, #44	; 0x2c
 801e4a0:	1860      	adds	r0, r4, r1
 801e4a2:	f000 000f 	and.w	r0, r0, #15
 801e4a6:	fb0b 2e00 	mla	lr, fp, r0, r2
 801e4aa:	44ae      	add	lr, r5
 801e4ac:	f89e e09a 	ldrb.w	lr, [lr, #154]	; 0x9a
 801e4b0:	f1be 0f00 	cmp.w	lr, #0
 801e4b4:	d137      	bne.n	801e526 <BnrgmFrndFnQueLpnPkt+0x24a>
 801e4b6:	4676      	mov	r6, lr
 801e4b8:	300f      	adds	r0, #15
 801e4ba:	f102 0c70 	add.w	ip, r2, #112	; 0x70
 801e4be:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 801e4c2:	b2f2      	uxtb	r2, r6
 801e4c4:	4294      	cmp	r4, r2
 801e4c6:	d80c      	bhi.n	801e4e2 <BnrgmFrndFnQueLpnPkt+0x206>
 801e4c8:	fb09 5203 	mla	r2, r9, r3, r5
 801e4cc:	f892 6331 	ldrb.w	r6, [r2, #817]	; 0x331
 801e4d0:	3601      	adds	r6, #1
 801e4d2:	f006 060f 	and.w	r6, r6, #15
 801e4d6:	f882 6331 	strb.w	r6, [r2, #817]	; 0x331
 801e4da:	360f      	adds	r6, #15
 801e4dc:	f006 060f 	and.w	r6, r6, #15
 801e4e0:	e795      	b.n	801e40e <BnrgmFrndFnQueLpnPkt+0x132>
 801e4e2:	1c41      	adds	r1, r0, #1
 801e4e4:	424a      	negs	r2, r1
 801e4e6:	f002 020f 	and.w	r2, r2, #15
 801e4ea:	f001 010f 	and.w	r1, r1, #15
 801e4ee:	bf58      	it	pl
 801e4f0:	4251      	negpl	r1, r2
 801e4f2:	f1d0 0a00 	rsbs	sl, r0, #0
 801e4f6:	f00a 0a0f 	and.w	sl, sl, #15
 801e4fa:	f000 020f 	and.w	r2, r0, #15
 801e4fe:	bf58      	it	pl
 801e500:	f1ca 0200 	rsbpl	r2, sl, #0
 801e504:	fb0e c202 	mla	r2, lr, r2, ip
 801e508:	fb0e c101 	mla	r1, lr, r1, ip
 801e50c:	442a      	add	r2, r5
 801e50e:	4429      	add	r1, r5
 801e510:	f102 0a2c 	add.w	sl, r2, #44	; 0x2c
 801e514:	f852 bb04 	ldr.w	fp, [r2], #4
 801e518:	f841 bb04 	str.w	fp, [r1], #4
 801e51c:	4552      	cmp	r2, sl
 801e51e:	d1f9      	bne.n	801e514 <BnrgmFrndFnQueLpnPkt+0x238>
 801e520:	3601      	adds	r6, #1
 801e522:	3801      	subs	r0, #1
 801e524:	e7cd      	b.n	801e4c2 <BnrgmFrndFnQueLpnPkt+0x1e6>
 801e526:	3401      	adds	r4, #1
 801e528:	b2e4      	uxtb	r4, r4
 801e52a:	4554      	cmp	r4, sl
 801e52c:	d1b8      	bne.n	801e4a0 <BnrgmFrndFnQueLpnPkt+0x1c4>
 801e52e:	f1bc 0f00 	cmp.w	ip, #0
 801e532:	f47f af6c 	bne.w	801e40e <BnrgmFrndFnQueLpnPkt+0x132>
 801e536:	2201      	movs	r2, #1
 801e538:	e7a8      	b.n	801e48c <BnrgmFrndFnQueLpnPkt+0x1b0>
 801e53a:	4656      	mov	r6, sl
 801e53c:	2200      	movs	r2, #0
 801e53e:	e7a5      	b.n	801e48c <BnrgmFrndFnQueLpnPkt+0x1b0>
 801e540:	2002      	movs	r0, #2
 801e542:	e6fb      	b.n	801e33c <BnrgmFrndFnQueLpnPkt+0x60>
 801e544:	2000141c 	.word	0x2000141c

0801e548 <BnrgmFrndMgmtQueLpnPkt>:
 801e548:	b513      	push	{r0, r1, r4, lr}
 801e54a:	9c04      	ldr	r4, [sp, #16]
 801e54c:	e9cd 3400 	strd	r3, r4, [sp]
 801e550:	4613      	mov	r3, r2
 801e552:	460a      	mov	r2, r1
 801e554:	4601      	mov	r1, r0
 801e556:	4803      	ldr	r0, [pc, #12]	; (801e564 <BnrgmFrndMgmtQueLpnPkt+0x1c>)
 801e558:	f8d0 0a04 	ldr.w	r0, [r0, #2564]	; 0xa04
 801e55c:	f7ff febe 	bl	801e2dc <BnrgmFrndFnQueLpnPkt>
 801e560:	b002      	add	sp, #8
 801e562:	bd10      	pop	{r4, pc}
 801e564:	20002514 	.word	0x20002514

0801e568 <BnrgmFrndFnProcessFrndClearConf>:
 801e568:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e56a:	4614      	mov	r4, r2
 801e56c:	461d      	mov	r5, r3
 801e56e:	b930      	cbnz	r0, 801e57e <BnrgmFrndFnProcessFrndClearConf+0x16>
 801e570:	4b1a      	ldr	r3, [pc, #104]	; (801e5dc <BnrgmFrndFnProcessFrndClearConf+0x74>)
 801e572:	4a1b      	ldr	r2, [pc, #108]	; (801e5e0 <BnrgmFrndFnProcessFrndClearConf+0x78>)
 801e574:	481b      	ldr	r0, [pc, #108]	; (801e5e4 <BnrgmFrndFnProcessFrndClearConf+0x7c>)
 801e576:	f44f 7167 	mov.w	r1, #924	; 0x39c
 801e57a:	f00a faa5 	bl	8028ac8 <__assert_func>
 801e57e:	b35b      	cbz	r3, 801e5d8 <BnrgmFrndFnProcessFrndClearConf+0x70>
 801e580:	9b06      	ldr	r3, [sp, #24]
 801e582:	2b03      	cmp	r3, #3
 801e584:	d928      	bls.n	801e5d8 <BnrgmFrndFnProcessFrndClearConf+0x70>
 801e586:	aa01      	add	r2, sp, #4
 801e588:	2102      	movs	r1, #2
 801e58a:	4628      	mov	r0, r5
 801e58c:	f7fc fe1e 	bl	801b1cc <MobleInputStreamGetBigEndian>
 801e590:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801e594:	1868      	adds	r0, r5, r1
 801e596:	f7fc fe19 	bl	801b1cc <MobleInputStreamGetBigEndian>
 801e59a:	4631      	mov	r1, r6
 801e59c:	4620      	mov	r0, r4
 801e59e:	f7ff fde6 	bl	801e16e <BnrgmFrndFnGetLpnOffset>
 801e5a2:	1c43      	adds	r3, r0, #1
 801e5a4:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801e5a8:	4602      	mov	r2, r0
 801e5aa:	d015      	beq.n	801e5d8 <BnrgmFrndFnProcessFrndClearConf+0x70>
 801e5ac:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e5b0:	fb03 4300 	mla	r3, r3, r0, r4
 801e5b4:	8959      	ldrh	r1, [r3, #10]
 801e5b6:	42a9      	cmp	r1, r5
 801e5b8:	d10c      	bne.n	801e5d4 <BnrgmFrndFnProcessFrndClearConf+0x6c>
 801e5ba:	6998      	ldr	r0, [r3, #24]
 801e5bc:	b108      	cbz	r0, 801e5c2 <BnrgmFrndFnProcessFrndClearConf+0x5a>
 801e5be:	f7f9 fb71 	bl	8017ca4 <MoblePalTimerDestroy>
 801e5c2:	f44f 704d 	mov.w	r0, #820	; 0x334
 801e5c6:	fb00 4402 	mla	r4, r0, r2, r4
 801e5ca:	2000      	movs	r0, #0
 801e5cc:	61a0      	str	r0, [r4, #24]
 801e5ce:	82a0      	strh	r0, [r4, #20]
 801e5d0:	b002      	add	sp, #8
 801e5d2:	bd70      	pop	{r4, r5, r6, pc}
 801e5d4:	2000      	movs	r0, #0
 801e5d6:	e7fb      	b.n	801e5d0 <BnrgmFrndFnProcessFrndClearConf+0x68>
 801e5d8:	2002      	movs	r0, #2
 801e5da:	e7f9      	b.n	801e5d0 <BnrgmFrndFnProcessFrndClearConf+0x68>
 801e5dc:	08033338 	.word	0x08033338
 801e5e0:	08031721 	.word	0x08031721
 801e5e4:	0803390b 	.word	0x0803390b

0801e5e8 <BnrgmFrndFnInit>:
 801e5e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e5ea:	7813      	ldrb	r3, [r2, #0]
 801e5ec:	4616      	mov	r6, r2
 801e5ee:	1e5a      	subs	r2, r3, #1
 801e5f0:	2a09      	cmp	r2, #9
 801e5f2:	b08b      	sub	sp, #44	; 0x2c
 801e5f4:	4604      	mov	r4, r0
 801e5f6:	d831      	bhi.n	801e65c <BnrgmFrndFnInit+0x74>
 801e5f8:	f1c3 030a 	rsb	r3, r3, #10
 801e5fc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 801e600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e604:	f242 050c 	movw	r5, #8204	; 0x200c
 801e608:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801e60c:	eba5 0383 	sub.w	r3, r5, r3, lsl #2
 801e610:	b29d      	uxth	r5, r3
 801e612:	428d      	cmp	r5, r1
 801e614:	d822      	bhi.n	801e65c <BnrgmFrndFnInit+0x74>
 801e616:	2700      	movs	r7, #0
 801e618:	462a      	mov	r2, r5
 801e61a:	2100      	movs	r1, #0
 801e61c:	4620      	mov	r0, r4
 801e61e:	3701      	adds	r7, #1
 801e620:	f00b f948 	bl	80298b4 <memset>
 801e624:	b2bb      	uxth	r3, r7
 801e626:	429d      	cmp	r5, r3
 801e628:	d8f6      	bhi.n	801e618 <BnrgmFrndFnInit+0x30>
 801e62a:	7835      	ldrb	r5, [r6, #0]
 801e62c:	b1b5      	cbz	r5, 801e65c <BnrgmFrndFnInit+0x74>
 801e62e:	70a5      	strb	r5, [r4, #2]
 801e630:	2228      	movs	r2, #40	; 0x28
 801e632:	2100      	movs	r1, #0
 801e634:	4668      	mov	r0, sp
 801e636:	f00b f93d 	bl	80298b4 <memset>
 801e63a:	342a      	adds	r4, #42	; 0x2a
 801e63c:	466a      	mov	r2, sp
 801e63e:	2300      	movs	r3, #0
 801e640:	3301      	adds	r3, #1
 801e642:	b2d9      	uxtb	r1, r3
 801e644:	428d      	cmp	r5, r1
 801e646:	f842 4b04 	str.w	r4, [r2], #4
 801e64a:	f504 744d 	add.w	r4, r4, #820	; 0x334
 801e64e:	d8f7      	bhi.n	801e640 <BnrgmFrndFnInit+0x58>
 801e650:	4669      	mov	r1, sp
 801e652:	4628      	mov	r0, r5
 801e654:	f7fb fea6 	bl	801a3a4 <BnrgmPalCryptoInitFriendshipKeysP>
 801e658:	b00b      	add	sp, #44	; 0x2c
 801e65a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e65c:	2002      	movs	r0, #2
 801e65e:	e7fb      	b.n	801e658 <BnrgmFrndFnInit+0x70>

0801e660 <BnrgmFrndMgmtFnInit>:
 801e660:	4b03      	ldr	r3, [pc, #12]	; (801e670 <BnrgmFrndMgmtFnInit+0x10>)
 801e662:	4602      	mov	r2, r0
 801e664:	f8b3 1a08 	ldrh.w	r1, [r3, #2568]	; 0xa08
 801e668:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e66c:	f7ff bfbc 	b.w	801e5e8 <BnrgmFrndFnInit>
 801e670:	20002514 	.word	0x20002514

0801e674 <BnrgmFrndFnUpdateKeys>:
 801e674:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e676:	788f      	ldrb	r7, [r1, #2]
 801e678:	460b      	mov	r3, r1
 801e67a:	2400      	movs	r4, #0
 801e67c:	b2e5      	uxtb	r5, r4
 801e67e:	42af      	cmp	r7, r5
 801e680:	d801      	bhi.n	801e686 <BnrgmFrndFnUpdateKeys+0x12>
 801e682:	2000      	movs	r0, #0
 801e684:	e014      	b.n	801e6b0 <BnrgmFrndFnUpdateKeys+0x3c>
 801e686:	891e      	ldrh	r6, [r3, #8]
 801e688:	b1a6      	cbz	r6, 801e6b4 <BnrgmFrndFnUpdateKeys+0x40>
 801e68a:	f893 c06c 	ldrb.w	ip, [r3, #108]	; 0x6c
 801e68e:	4594      	cmp	ip, r2
 801e690:	d110      	bne.n	801e6b4 <BnrgmFrndFnUpdateKeys+0x40>
 801e692:	f44f 734d 	mov.w	r3, #820	; 0x334
 801e696:	6802      	ldr	r2, [r0, #0]
 801e698:	fb03 1404 	mla	r4, r3, r4, r1
 801e69c:	2101      	movs	r1, #1
 801e69e:	8963      	ldrh	r3, [r4, #10]
 801e6a0:	8852      	ldrh	r2, [r2, #2]
 801e6a2:	9101      	str	r1, [sp, #4]
 801e6a4:	89a1      	ldrh	r1, [r4, #12]
 801e6a6:	9100      	str	r1, [sp, #0]
 801e6a8:	4628      	mov	r0, r5
 801e6aa:	4631      	mov	r1, r6
 801e6ac:	f7fb fea2 	bl	801a3f4 <BnrgmPalCryptoSetFriendshipKeys>
 801e6b0:	b003      	add	sp, #12
 801e6b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6b4:	3401      	adds	r4, #1
 801e6b6:	f503 734d 	add.w	r3, r3, #820	; 0x334
 801e6ba:	e7df      	b.n	801e67c <BnrgmFrndFnUpdateKeys+0x8>

0801e6bc <BnrgmFrndFnSwitchKeys>:
 801e6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e6be:	4604      	mov	r4, r0
 801e6c0:	460e      	mov	r6, r1
 801e6c2:	2500      	movs	r5, #0
 801e6c4:	f44f 774d 	mov.w	r7, #820	; 0x334
 801e6c8:	78a3      	ldrb	r3, [r4, #2]
 801e6ca:	b2e8      	uxtb	r0, r5
 801e6cc:	4283      	cmp	r3, r0
 801e6ce:	d801      	bhi.n	801e6d4 <BnrgmFrndFnSwitchKeys+0x18>
 801e6d0:	2000      	movs	r0, #0
 801e6d2:	e00d      	b.n	801e6f0 <BnrgmFrndFnSwitchKeys+0x34>
 801e6d4:	fb07 4300 	mla	r3, r7, r0, r4
 801e6d8:	891a      	ldrh	r2, [r3, #8]
 801e6da:	b90a      	cbnz	r2, 801e6e0 <BnrgmFrndFnSwitchKeys+0x24>
 801e6dc:	3501      	adds	r5, #1
 801e6de:	e7f3      	b.n	801e6c8 <BnrgmFrndFnSwitchKeys+0xc>
 801e6e0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 801e6e4:	42b3      	cmp	r3, r6
 801e6e6:	d1f9      	bne.n	801e6dc <BnrgmFrndFnSwitchKeys+0x20>
 801e6e8:	f7fb fee0 	bl	801a4ac <BnrgmPalCryptoSwitchFriendshipKeys>
 801e6ec:	2800      	cmp	r0, #0
 801e6ee:	d0f5      	beq.n	801e6dc <BnrgmFrndFnSwitchKeys+0x20>
 801e6f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801e6f2 <BnrgmFrndFnSendSecurityUpdate>:
 801e6f2:	b570      	push	{r4, r5, r6, lr}
 801e6f4:	4604      	mov	r4, r0
 801e6f6:	2500      	movs	r5, #0
 801e6f8:	f44f 764d 	mov.w	r6, #820	; 0x334
 801e6fc:	78a2      	ldrb	r2, [r4, #2]
 801e6fe:	b2eb      	uxtb	r3, r5
 801e700:	429a      	cmp	r2, r3
 801e702:	d800      	bhi.n	801e706 <BnrgmFrndFnSendSecurityUpdate+0x14>
 801e704:	bd70      	pop	{r4, r5, r6, pc}
 801e706:	4373      	muls	r3, r6
 801e708:	18e2      	adds	r2, r4, r3
 801e70a:	8912      	ldrh	r2, [r2, #8]
 801e70c:	b11a      	cbz	r2, 801e716 <BnrgmFrndFnSendSecurityUpdate+0x24>
 801e70e:	3304      	adds	r3, #4
 801e710:	18e0      	adds	r0, r4, r3
 801e712:	f7ff fd65 	bl	801e1e0 <BnrgmFrndFnInsertFriendUpdate>
 801e716:	3501      	adds	r5, #1
 801e718:	e7f0      	b.n	801e6fc <BnrgmFrndFnSendSecurityUpdate+0xa>
	...

0801e71c <BnrgmFrndMgmtSendSecurityUpdate>:
 801e71c:	4b05      	ldr	r3, [pc, #20]	; (801e734 <BnrgmFrndMgmtSendSecurityUpdate+0x18>)
 801e71e:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 801e722:	2b01      	cmp	r3, #1
 801e724:	d104      	bne.n	801e730 <BnrgmFrndMgmtSendSecurityUpdate+0x14>
 801e726:	4b04      	ldr	r3, [pc, #16]	; (801e738 <BnrgmFrndMgmtSendSecurityUpdate+0x1c>)
 801e728:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e72c:	f7ff bfe1 	b.w	801e6f2 <BnrgmFrndFnSendSecurityUpdate>
 801e730:	4770      	bx	lr
 801e732:	bf00      	nop
 801e734:	20000324 	.word	0x20000324
 801e738:	20002514 	.word	0x20002514

0801e73c <MobleStackSetIvIndex>:
 801e73c:	b538      	push	{r3, r4, r5, lr}
 801e73e:	4d0b      	ldr	r5, [pc, #44]	; (801e76c <MobleStackSetIvIndex+0x30>)
 801e740:	4604      	mov	r4, r0
 801e742:	f7fb fa6d 	bl	8019c20 <MoblePalCryptoSetIvIndex>
 801e746:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 801e74a:	605c      	str	r4, [r3, #4]
 801e74c:	4b08      	ldr	r3, [pc, #32]	; (801e770 <MobleStackSetIvIndex+0x34>)
 801e74e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801e752:	2b01      	cmp	r3, #1
 801e754:	d101      	bne.n	801e75a <MobleStackSetIvIndex+0x1e>
 801e756:	f7ff f9c7 	bl	801dae8 <BnrgmStackSendBeaconOverGatt>
 801e75a:	f7ff ffdf 	bl	801e71c <BnrgmFrndMgmtSendSecurityUpdate>
 801e75e:	f8d5 0680 	ldr.w	r0, [r5, #1664]	; 0x680
 801e762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e766:	f7fe bb87 	b.w	801ce78 <MobleConfigNetworkSave>
 801e76a:	bf00      	nop
 801e76c:	2000141c 	.word	0x2000141c
 801e770:	20000324 	.word	0x20000324

0801e774 <MobleStackForcedSetIvIndex>:
 801e774:	b510      	push	{r4, lr}
 801e776:	4c07      	ldr	r4, [pc, #28]	; (801e794 <MobleStackForcedSetIvIndex+0x20>)
 801e778:	f7ff ffe0 	bl	801e73c <MobleStackSetIvIndex>
 801e77c:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 801e780:	f7fd fef8 	bl	801c574 <MobleNetworkReplayCacheClearAll>
 801e784:	f7fe fd78 	bl	801d278 <MobleStackResetSeq>
 801e788:	4b03      	ldr	r3, [pc, #12]	; (801e798 <MobleStackForcedSetIvIndex+0x24>)
 801e78a:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e78e:	2000      	movs	r0, #0
 801e790:	bd10      	pop	{r4, pc}
 801e792:	bf00      	nop
 801e794:	2000141c 	.word	0x2000141c
 801e798:	1ee62800 	.word	0x1ee62800

0801e79c <MobleStackIvUpdateSwitchToProgress>:
 801e79c:	b513      	push	{r0, r1, r4, lr}
 801e79e:	4c0d      	ldr	r4, [pc, #52]	; (801e7d4 <MobleStackIvUpdateSwitchToProgress+0x38>)
 801e7a0:	f894 065c 	ldrb.w	r0, [r4, #1628]	; 0x65c
 801e7a4:	2801      	cmp	r0, #1
 801e7a6:	d012      	beq.n	801e7ce <MobleStackIvUpdateSwitchToProgress+0x32>
 801e7a8:	f8d4 1658 	ldr.w	r1, [r4, #1624]	; 0x658
 801e7ac:	3101      	adds	r1, #1
 801e7ae:	2301      	movs	r3, #1
 801e7b0:	4608      	mov	r0, r1
 801e7b2:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 801e7b6:	9101      	str	r1, [sp, #4]
 801e7b8:	f7ff ffc0 	bl	801e73c <MobleStackSetIvIndex>
 801e7bc:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 801e7c0:	9901      	ldr	r1, [sp, #4]
 801e7c2:	f7fd fea5 	bl	801c510 <MobleNetworkReplayCacheClear>
 801e7c6:	4b04      	ldr	r3, [pc, #16]	; (801e7d8 <MobleStackIvUpdateSwitchToProgress+0x3c>)
 801e7c8:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e7cc:	2000      	movs	r0, #0
 801e7ce:	b002      	add	sp, #8
 801e7d0:	bd10      	pop	{r4, pc}
 801e7d2:	bf00      	nop
 801e7d4:	2000141c 	.word	0x2000141c
 801e7d8:	1ee62800 	.word	0x1ee62800

0801e7dc <MobleStackIvUpdateSwitchToNormal>:
 801e7dc:	b510      	push	{r4, lr}
 801e7de:	4c0c      	ldr	r4, [pc, #48]	; (801e810 <MobleStackIvUpdateSwitchToNormal+0x34>)
 801e7e0:	f894 365c 	ldrb.w	r3, [r4, #1628]	; 0x65c
 801e7e4:	b193      	cbz	r3, 801e80c <MobleStackIvUpdateSwitchToNormal+0x30>
 801e7e6:	2300      	movs	r3, #0
 801e7e8:	f884 365c 	strb.w	r3, [r4, #1628]	; 0x65c
 801e7ec:	f7fe fd44 	bl	801d278 <MobleStackResetSeq>
 801e7f0:	4b08      	ldr	r3, [pc, #32]	; (801e814 <MobleStackIvUpdateSwitchToNormal+0x38>)
 801e7f2:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e7f6:	4b08      	ldr	r3, [pc, #32]	; (801e818 <MobleStackIvUpdateSwitchToNormal+0x3c>)
 801e7f8:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801e7fc:	2b01      	cmp	r3, #1
 801e7fe:	d101      	bne.n	801e804 <MobleStackIvUpdateSwitchToNormal+0x28>
 801e800:	f7ff f972 	bl	801dae8 <BnrgmStackSendBeaconOverGatt>
 801e804:	f7ff ff8a 	bl	801e71c <BnrgmFrndMgmtSendSecurityUpdate>
 801e808:	2000      	movs	r0, #0
 801e80a:	bd10      	pop	{r4, pc}
 801e80c:	2001      	movs	r0, #1
 801e80e:	e7fc      	b.n	801e80a <MobleStackIvUpdateSwitchToNormal+0x2e>
 801e810:	2000141c 	.word	0x2000141c
 801e814:	1ee62800 	.word	0x1ee62800
 801e818:	20000324 	.word	0x20000324

0801e81c <MobleStackIvUpdateTestSignal>:
 801e81c:	4b03      	ldr	r3, [pc, #12]	; (801e82c <MobleStackIvUpdateTestSignal+0x10>)
 801e81e:	f893 365c 	ldrb.w	r3, [r3, #1628]	; 0x65c
 801e822:	b90b      	cbnz	r3, 801e828 <MobleStackIvUpdateTestSignal+0xc>
 801e824:	f7ff bfba 	b.w	801e79c <MobleStackIvUpdateSwitchToProgress>
 801e828:	f7ff bfd8 	b.w	801e7dc <MobleStackIvUpdateSwitchToNormal>
 801e82c:	2000141c 	.word	0x2000141c

0801e830 <Test_UpperTester_Set04>:
 801e830:	f7ff bff4 	b.w	801e81c <MobleStackIvUpdateTestSignal>

0801e834 <MobleStackProcessIvFromBeacon>:
 801e834:	b538      	push	{r3, r4, r5, lr}
 801e836:	4c2a      	ldr	r4, [pc, #168]	; (801e8e0 <MobleStackProcessIvFromBeacon+0xac>)
 801e838:	4615      	mov	r5, r2
 801e83a:	f894 265c 	ldrb.w	r2, [r4, #1628]	; 0x65c
 801e83e:	4603      	mov	r3, r0
 801e840:	f8d4 0658 	ldr.w	r0, [r4, #1624]	; 0x658
 801e844:	bb8a      	cbnz	r2, 801e8aa <MobleStackProcessIvFromBeacon+0x76>
 801e846:	f100 022a 	add.w	r2, r0, #42	; 0x2a
 801e84a:	428a      	cmp	r2, r1
 801e84c:	d32b      	bcc.n	801e8a6 <MobleStackProcessIvFromBeacon+0x72>
 801e84e:	f013 0302 	ands.w	r3, r3, #2
 801e852:	d023      	beq.n	801e89c <MobleStackProcessIvFromBeacon+0x68>
 801e854:	1c43      	adds	r3, r0, #1
 801e856:	428b      	cmp	r3, r1
 801e858:	d204      	bcs.n	801e864 <MobleStackProcessIvFromBeacon+0x30>
 801e85a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e85e:	4608      	mov	r0, r1
 801e860:	f7ff bf88 	b.w	801e774 <MobleStackForcedSetIvIndex>
 801e864:	d114      	bne.n	801e890 <MobleStackProcessIvFromBeacon+0x5c>
 801e866:	f7fa fccb 	bl	8019200 <MoblePalCrypto_isPrimarySubnet>
 801e86a:	b168      	cbz	r0, 801e888 <MobleStackProcessIvFromBeacon+0x54>
 801e86c:	227c      	movs	r2, #124	; 0x7c
 801e86e:	fb02 4505 	mla	r5, r2, r5, r4
 801e872:	f8d4 1924 	ldr.w	r1, [r4, #2340]	; 0x924
 801e876:	4a1b      	ldr	r2, [pc, #108]	; (801e8e4 <MobleStackProcessIvFromBeacon+0xb0>)
 801e878:	f8b5 3448 	ldrh.w	r3, [r5, #1096]	; 0x448
 801e87c:	4291      	cmp	r1, r2
 801e87e:	d302      	bcc.n	801e886 <MobleStackProcessIvFromBeacon+0x52>
 801e880:	f894 292c 	ldrb.w	r2, [r4, #2348]	; 0x92c
 801e884:	b17a      	cbz	r2, 801e8a6 <MobleStackProcessIvFromBeacon+0x72>
 801e886:	bb43      	cbnz	r3, 801e8da <MobleStackProcessIvFromBeacon+0xa6>
 801e888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e88c:	f7ff bf86 	b.w	801e79c <MobleStackIvUpdateSwitchToProgress>
 801e890:	4288      	cmp	r0, r1
 801e892:	bf14      	ite	ne
 801e894:	2302      	movne	r3, #2
 801e896:	2301      	moveq	r3, #1
 801e898:	4618      	mov	r0, r3
 801e89a:	bd38      	pop	{r3, r4, r5, pc}
 801e89c:	1e42      	subs	r2, r0, #1
 801e89e:	428a      	cmp	r2, r1
 801e8a0:	d0fa      	beq.n	801e898 <MobleStackProcessIvFromBeacon+0x64>
 801e8a2:	4288      	cmp	r0, r1
 801e8a4:	d3d9      	bcc.n	801e85a <MobleStackProcessIvFromBeacon+0x26>
 801e8a6:	2301      	movs	r3, #1
 801e8a8:	e7f6      	b.n	801e898 <MobleStackProcessIvFromBeacon+0x64>
 801e8aa:	079b      	lsls	r3, r3, #30
 801e8ac:	d4fb      	bmi.n	801e8a6 <MobleStackProcessIvFromBeacon+0x72>
 801e8ae:	4288      	cmp	r0, r1
 801e8b0:	d1f9      	bne.n	801e8a6 <MobleStackProcessIvFromBeacon+0x72>
 801e8b2:	f8d4 2924 	ldr.w	r2, [r4, #2340]	; 0x924
 801e8b6:	4b0b      	ldr	r3, [pc, #44]	; (801e8e4 <MobleStackProcessIvFromBeacon+0xb0>)
 801e8b8:	429a      	cmp	r2, r3
 801e8ba:	d303      	bcc.n	801e8c4 <MobleStackProcessIvFromBeacon+0x90>
 801e8bc:	f894 392c 	ldrb.w	r3, [r4, #2348]	; 0x92c
 801e8c0:	2b00      	cmp	r3, #0
 801e8c2:	d0f0      	beq.n	801e8a6 <MobleStackProcessIvFromBeacon+0x72>
 801e8c4:	f8d4 3688 	ldr.w	r3, [r4, #1672]	; 0x688
 801e8c8:	b11b      	cbz	r3, 801e8d2 <MobleStackProcessIvFromBeacon+0x9e>
 801e8ca:	4b07      	ldr	r3, [pc, #28]	; (801e8e8 <MobleStackProcessIvFromBeacon+0xb4>)
 801e8cc:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 801e8d0:	e7e9      	b.n	801e8a6 <MobleStackProcessIvFromBeacon+0x72>
 801e8d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e8d6:	f7ff bf81 	b.w	801e7dc <MobleStackIvUpdateSwitchToNormal>
 801e8da:	2302      	movs	r3, #2
 801e8dc:	e7dc      	b.n	801e898 <MobleStackProcessIvFromBeacon+0x64>
 801e8de:	bf00      	nop
 801e8e0:	2000141c 	.word	0x2000141c
 801e8e4:	0a4cb800 	.word	0x0a4cb800
 801e8e8:	0a4cb801 	.word	0x0a4cb801

0801e8ec <MobleStackProcessIvUpdate>:
 801e8ec:	b510      	push	{r4, lr}
 801e8ee:	f7e9 fab9 	bl	8007e64 <HAL_GetTick>
 801e8f2:	4b19      	ldr	r3, [pc, #100]	; (801e958 <MobleStackProcessIvUpdate+0x6c>)
 801e8f4:	f8d3 2928 	ldr.w	r2, [r3, #2344]	; 0x928
 801e8f8:	f241 3187 	movw	r1, #4999	; 0x1387
 801e8fc:	1a84      	subs	r4, r0, r2
 801e8fe:	428c      	cmp	r4, r1
 801e900:	d925      	bls.n	801e94e <MobleStackProcessIvUpdate+0x62>
 801e902:	f8d3 1924 	ldr.w	r1, [r3, #2340]	; 0x924
 801e906:	f8c3 0928 	str.w	r0, [r3, #2344]	; 0x928
 801e90a:	42a1      	cmp	r1, r4
 801e90c:	d916      	bls.n	801e93c <MobleStackProcessIvUpdate+0x50>
 801e90e:	4411      	add	r1, r2
 801e910:	1a09      	subs	r1, r1, r0
 801e912:	f8c3 1924 	str.w	r1, [r3, #2340]	; 0x924
 801e916:	f893 265c 	ldrb.w	r2, [r3, #1628]	; 0x65c
 801e91a:	f8d3 17dc 	ldr.w	r1, [r3, #2012]	; 0x7dc
 801e91e:	2a01      	cmp	r2, #1
 801e920:	d112      	bne.n	801e948 <MobleStackProcessIvUpdate+0x5c>
 801e922:	f8d3 0924 	ldr.w	r0, [r3, #2340]	; 0x924
 801e926:	490d      	ldr	r1, [pc, #52]	; (801e95c <MobleStackProcessIvUpdate+0x70>)
 801e928:	4288      	cmp	r0, r1
 801e92a:	d210      	bcs.n	801e94e <MobleStackProcessIvUpdate+0x62>
 801e92c:	f8d3 3688 	ldr.w	r3, [r3, #1672]	; 0x688
 801e930:	b96b      	cbnz	r3, 801e94e <MobleStackProcessIvUpdate+0x62>
 801e932:	b96a      	cbnz	r2, 801e950 <MobleStackProcessIvUpdate+0x64>
 801e934:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e938:	f7ff bf30 	b.w	801e79c <MobleStackIvUpdateSwitchToProgress>
 801e93c:	2900      	cmp	r1, #0
 801e93e:	d0ea      	beq.n	801e916 <MobleStackProcessIvUpdate+0x2a>
 801e940:	2200      	movs	r2, #0
 801e942:	f8c3 2924 	str.w	r2, [r3, #2340]	; 0x924
 801e946:	e7e6      	b.n	801e916 <MobleStackProcessIvUpdate+0x2a>
 801e948:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801e94c:	d2e9      	bcs.n	801e922 <MobleStackProcessIvUpdate+0x36>
 801e94e:	bd10      	pop	{r4, pc}
 801e950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e954:	f7ff bf42 	b.w	801e7dc <MobleStackIvUpdateSwitchToNormal>
 801e958:	2000141c 	.word	0x2000141c
 801e95c:	0a4cb800 	.word	0x0a4cb800

0801e960 <BnrgmFrndMgmtUpdateKeys>:
 801e960:	b508      	push	{r3, lr}
 801e962:	4b0c      	ldr	r3, [pc, #48]	; (801e994 <BnrgmFrndMgmtUpdateKeys+0x34>)
 801e964:	460a      	mov	r2, r1
 801e966:	f893 10be 	ldrb.w	r1, [r3, #190]	; 0xbe
 801e96a:	2901      	cmp	r1, #1
 801e96c:	d105      	bne.n	801e97a <BnrgmFrndMgmtUpdateKeys+0x1a>
 801e96e:	4b0a      	ldr	r3, [pc, #40]	; (801e998 <BnrgmFrndMgmtUpdateKeys+0x38>)
 801e970:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 801e974:	f7ff fe7e 	bl	801e674 <BnrgmFrndFnUpdateKeys>
 801e978:	bd08      	pop	{r3, pc}
 801e97a:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 801e97e:	2b02      	cmp	r3, #2
 801e980:	d005      	beq.n	801e98e <BnrgmFrndMgmtUpdateKeys+0x2e>
 801e982:	4b05      	ldr	r3, [pc, #20]	; (801e998 <BnrgmFrndMgmtUpdateKeys+0x38>)
 801e984:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 801e988:	f7f4 fe2d 	bl	80135e6 <BnrgmFrndLpnUpdateKeys>
 801e98c:	e7f4      	b.n	801e978 <BnrgmFrndMgmtUpdateKeys+0x18>
 801e98e:	2001      	movs	r0, #1
 801e990:	e7f2      	b.n	801e978 <BnrgmFrndMgmtUpdateKeys+0x18>
 801e992:	bf00      	nop
 801e994:	20000324 	.word	0x20000324
 801e998:	20002514 	.word	0x20002514

0801e99c <BnrgmFrndMgmtSwitchKeys>:
 801e99c:	b508      	push	{r3, lr}
 801e99e:	4b0c      	ldr	r3, [pc, #48]	; (801e9d0 <BnrgmFrndMgmtSwitchKeys+0x34>)
 801e9a0:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 801e9a4:	2a01      	cmp	r2, #1
 801e9a6:	4601      	mov	r1, r0
 801e9a8:	d105      	bne.n	801e9b6 <BnrgmFrndMgmtSwitchKeys+0x1a>
 801e9aa:	4b0a      	ldr	r3, [pc, #40]	; (801e9d4 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801e9ac:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e9b0:	f7ff fe84 	bl	801e6bc <BnrgmFrndFnSwitchKeys>
 801e9b4:	bd08      	pop	{r3, pc}
 801e9b6:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 801e9ba:	2b02      	cmp	r3, #2
 801e9bc:	d005      	beq.n	801e9ca <BnrgmFrndMgmtSwitchKeys+0x2e>
 801e9be:	4b05      	ldr	r3, [pc, #20]	; (801e9d4 <BnrgmFrndMgmtSwitchKeys+0x38>)
 801e9c0:	f8d3 0a04 	ldr.w	r0, [r3, #2564]	; 0xa04
 801e9c4:	f7f4 fdf9 	bl	80135ba <BnrgmFrndLpnSwitchKeys>
 801e9c8:	e7f4      	b.n	801e9b4 <BnrgmFrndMgmtSwitchKeys+0x18>
 801e9ca:	2001      	movs	r0, #1
 801e9cc:	e7f2      	b.n	801e9b4 <BnrgmFrndMgmtSwitchKeys+0x18>
 801e9ce:	bf00      	nop
 801e9d0:	20000324 	.word	0x20000324
 801e9d4:	20002514 	.word	0x20002514

0801e9d8 <MobleProvisionCheckFCS>:
 801e9d8:	b530      	push	{r4, r5, lr}
 801e9da:	b1a0      	cbz	r0, 801ea06 <MobleProvisionCheckFCS+0x2e>
 801e9dc:	4c0b      	ldr	r4, [pc, #44]	; (801ea0c <MobleProvisionCheckFCS+0x34>)
 801e9de:	440a      	add	r2, r1
 801e9e0:	23ff      	movs	r3, #255	; 0xff
 801e9e2:	4291      	cmp	r1, r2
 801e9e4:	d108      	bne.n	801e9f8 <MobleProvisionCheckFCS+0x20>
 801e9e6:	4058      	eors	r0, r3
 801e9e8:	4420      	add	r0, r4
 801e9ea:	f890 0403 	ldrb.w	r0, [r0, #1027]	; 0x403
 801e9ee:	f1a0 03cf 	sub.w	r3, r0, #207	; 0xcf
 801e9f2:	4258      	negs	r0, r3
 801e9f4:	4158      	adcs	r0, r3
 801e9f6:	bd30      	pop	{r4, r5, pc}
 801e9f8:	f811 5b01 	ldrb.w	r5, [r1], #1
 801e9fc:	406b      	eors	r3, r5
 801e9fe:	4423      	add	r3, r4
 801ea00:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 801ea04:	e7ed      	b.n	801e9e2 <MobleProvisionCheckFCS+0xa>
 801ea06:	2001      	movs	r0, #1
 801ea08:	e7f5      	b.n	801e9f6 <MobleProvisionCheckFCS+0x1e>
 801ea0a:	bf00      	nop
 801ea0c:	0803135c 	.word	0x0803135c

0801ea10 <MobleSARJoin>:
 801ea10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ea14:	9f06      	ldr	r7, [sp, #24]
 801ea16:	461e      	mov	r6, r3
 801ea18:	4604      	mov	r4, r0
 801ea1a:	2800      	cmp	r0, #0
 801ea1c:	d069      	beq.n	801eaf2 <MobleSARJoin+0xe2>
 801ea1e:	2b00      	cmp	r3, #0
 801ea20:	d067      	beq.n	801eaf2 <MobleSARJoin+0xe2>
 801ea22:	2f00      	cmp	r7, #0
 801ea24:	d065      	beq.n	801eaf2 <MobleSARJoin+0xe2>
 801ea26:	780b      	ldrb	r3, [r1, #0]
 801ea28:	f013 0003 	ands.w	r0, r3, #3
 801ea2c:	d139      	bne.n	801eaa2 <MobleSARJoin+0x92>
 801ea2e:	2a04      	cmp	r2, #4
 801ea30:	dc02      	bgt.n	801ea38 <MobleSARJoin+0x28>
 801ea32:	2002      	movs	r0, #2
 801ea34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ea38:	788b      	ldrb	r3, [r1, #2]
 801ea3a:	8123      	strh	r3, [r4, #8]
 801ea3c:	f8b1 3001 	ldrh.w	r3, [r1, #1]
 801ea40:	ba5b      	rev16	r3, r3
 801ea42:	b298      	uxth	r0, r3
 801ea44:	2880      	cmp	r0, #128	; 0x80
 801ea46:	8123      	strh	r3, [r4, #8]
 801ea48:	d8f3      	bhi.n	801ea32 <MobleSARJoin+0x22>
 801ea4a:	78cb      	ldrb	r3, [r1, #3]
 801ea4c:	71a3      	strb	r3, [r4, #6]
 801ea4e:	f811 3b04 	ldrb.w	r3, [r1], #4
 801ea52:	80a2      	strh	r2, [r4, #4]
 801ea54:	089b      	lsrs	r3, r3, #2
 801ea56:	3301      	adds	r3, #1
 801ea58:	7023      	strb	r3, [r4, #0]
 801ea5a:	2301      	movs	r3, #1
 801ea5c:	8063      	strh	r3, [r4, #2]
 801ea5e:	3a04      	subs	r2, #4
 801ea60:	f104 000a 	add.w	r0, r4, #10
 801ea64:	f00a ff0c 	bl	8029880 <memmove>
 801ea68:	7821      	ldrb	r1, [r4, #0]
 801ea6a:	8862      	ldrh	r2, [r4, #2]
 801ea6c:	2301      	movs	r3, #1
 801ea6e:	408b      	lsls	r3, r1
 801ea70:	3b01      	subs	r3, #1
 801ea72:	429a      	cmp	r2, r3
 801ea74:	d11b      	bne.n	801eaae <MobleSARJoin+0x9e>
 801ea76:	f89d 301c 	ldrb.w	r3, [sp, #28]
 801ea7a:	79a0      	ldrb	r0, [r4, #6]
 801ea7c:	2b01      	cmp	r3, #1
 801ea7e:	d135      	bne.n	801eaec <MobleSARJoin+0xdc>
 801ea80:	7a22      	ldrb	r2, [r4, #8]
 801ea82:	f104 010a 	add.w	r1, r4, #10
 801ea86:	f7ff ffa7 	bl	801e9d8 <MobleProvisionCheckFCS>
 801ea8a:	2800      	cmp	r0, #0
 801ea8c:	d0d1      	beq.n	801ea32 <MobleSARJoin+0x22>
 801ea8e:	8922      	ldrh	r2, [r4, #8]
 801ea90:	f104 010a 	add.w	r1, r4, #10
 801ea94:	4630      	mov	r0, r6
 801ea96:	f00a fef3 	bl	8029880 <memmove>
 801ea9a:	8923      	ldrh	r3, [r4, #8]
 801ea9c:	603b      	str	r3, [r7, #0]
 801ea9e:	2000      	movs	r0, #0
 801eaa0:	e7c8      	b.n	801ea34 <MobleSARJoin+0x24>
 801eaa2:	2802      	cmp	r0, #2
 801eaa4:	d1c5      	bne.n	801ea32 <MobleSARJoin+0x22>
 801eaa6:	2a01      	cmp	r2, #1
 801eaa8:	ddc3      	ble.n	801ea32 <MobleSARJoin+0x22>
 801eaaa:	88a5      	ldrh	r5, [r4, #4]
 801eaac:	b90d      	cbnz	r5, 801eab2 <MobleSARJoin+0xa2>
 801eaae:	2001      	movs	r0, #1
 801eab0:	e7c0      	b.n	801ea34 <MobleSARJoin+0x24>
 801eab2:	7820      	ldrb	r0, [r4, #0]
 801eab4:	ebb0 0f93 	cmp.w	r0, r3, lsr #2
 801eab8:	ea4f 0893 	mov.w	r8, r3, lsr #2
 801eabc:	d3b9      	bcc.n	801ea32 <MobleSARJoin+0x22>
 801eabe:	f1b8 0f00 	cmp.w	r8, #0
 801eac2:	d0b6      	beq.n	801ea32 <MobleSARJoin+0x22>
 801eac4:	1e6b      	subs	r3, r5, #1
 801eac6:	f108 3cff 	add.w	ip, r8, #4294967295
 801eaca:	3d04      	subs	r5, #4
 801eacc:	fb0c 5503 	mla	r5, ip, r3, r5
 801ead0:	f104 000a 	add.w	r0, r4, #10
 801ead4:	3a01      	subs	r2, #1
 801ead6:	3101      	adds	r1, #1
 801ead8:	4428      	add	r0, r5
 801eada:	f00a fed1 	bl	8029880 <memmove>
 801eade:	8862      	ldrh	r2, [r4, #2]
 801eae0:	2301      	movs	r3, #1
 801eae2:	fa03 f308 	lsl.w	r3, r3, r8
 801eae6:	4313      	orrs	r3, r2
 801eae8:	8063      	strh	r3, [r4, #2]
 801eaea:	e7bd      	b.n	801ea68 <MobleSARJoin+0x58>
 801eaec:	2800      	cmp	r0, #0
 801eaee:	d0ce      	beq.n	801ea8e <MobleSARJoin+0x7e>
 801eaf0:	e79f      	b.n	801ea32 <MobleSARJoin+0x22>
 801eaf2:	2003      	movs	r0, #3
 801eaf4:	e79e      	b.n	801ea34 <MobleSARJoin+0x24>
	...

0801eaf8 <MobleProvisionCalculateFCS>:
 801eaf8:	b510      	push	{r4, lr}
 801eafa:	4a07      	ldr	r2, [pc, #28]	; (801eb18 <MobleProvisionCalculateFCS+0x20>)
 801eafc:	4401      	add	r1, r0
 801eafe:	23ff      	movs	r3, #255	; 0xff
 801eb00:	4288      	cmp	r0, r1
 801eb02:	d102      	bne.n	801eb0a <MobleProvisionCalculateFCS+0x12>
 801eb04:	43d8      	mvns	r0, r3
 801eb06:	b2c0      	uxtb	r0, r0
 801eb08:	bd10      	pop	{r4, pc}
 801eb0a:	f810 4b01 	ldrb.w	r4, [r0], #1
 801eb0e:	4063      	eors	r3, r4
 801eb10:	4413      	add	r3, r2
 801eb12:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 801eb16:	e7f3      	b.n	801eb00 <MobleProvisionCalculateFCS+0x8>
 801eb18:	0803135c 	.word	0x0803135c

0801eb1c <MobleSARSplit>:
 801eb1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eb20:	297f      	cmp	r1, #127	; 0x7f
 801eb22:	f89d c030 	ldrb.w	ip, [sp, #48]	; 0x30
 801eb26:	4680      	mov	r8, r0
 801eb28:	460e      	mov	r6, r1
 801eb2a:	4617      	mov	r7, r2
 801eb2c:	461c      	mov	r4, r3
 801eb2e:	dd03      	ble.n	801eb38 <MobleSARSplit+0x1c>
 801eb30:	2003      	movs	r0, #3
 801eb32:	b003      	add	sp, #12
 801eb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb38:	2900      	cmp	r1, #0
 801eb3a:	d0f9      	beq.n	801eb30 <MobleSARSplit+0x14>
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	d0f7      	beq.n	801eb30 <MobleSARSplit+0x14>
 801eb40:	fa1f fa82 	uxth.w	sl, r2
 801eb44:	1d35      	adds	r5, r6, #4
 801eb46:	f8a3 a004 	strh.w	sl, [r3, #4]
 801eb4a:	42aa      	cmp	r2, r5
 801eb4c:	f04f 0300 	mov.w	r3, #0
 801eb50:	f3c1 2e07 	ubfx	lr, r1, #8, #8
 801eb54:	8123      	strh	r3, [r4, #8]
 801eb56:	b2c9      	uxtb	r1, r1
 801eb58:	db19      	blt.n	801eb8e <MobleSARSplit+0x72>
 801eb5a:	2201      	movs	r2, #1
 801eb5c:	4594      	cmp	ip, r2
 801eb5e:	7022      	strb	r2, [r4, #0]
 801eb60:	72a3      	strb	r3, [r4, #10]
 801eb62:	f884 e00b 	strb.w	lr, [r4, #11]
 801eb66:	7321      	strb	r1, [r4, #12]
 801eb68:	d10f      	bne.n	801eb8a <MobleSARSplit+0x6e>
 801eb6a:	f7ff ffc5 	bl	801eaf8 <MobleProvisionCalculateFCS>
 801eb6e:	2e7c      	cmp	r6, #124	; 0x7c
 801eb70:	7360      	strb	r0, [r4, #13]
 801eb72:	dcdd      	bgt.n	801eb30 <MobleSARSplit+0x14>
 801eb74:	4632      	mov	r2, r6
 801eb76:	4641      	mov	r1, r8
 801eb78:	f104 000e 	add.w	r0, r4, #14
 801eb7c:	f00a fe80 	bl	8029880 <memmove>
 801eb80:	2301      	movs	r3, #1
 801eb82:	8125      	strh	r5, [r4, #8]
 801eb84:	8063      	strh	r3, [r4, #2]
 801eb86:	2000      	movs	r0, #0
 801eb88:	e7d3      	b.n	801eb32 <MobleSARSplit+0x16>
 801eb8a:	4618      	mov	r0, r3
 801eb8c:	e7ef      	b.n	801eb6e <MobleSARSplit+0x52>
 801eb8e:	f102 39ff 	add.w	r9, r2, #4294967295
 801eb92:	1cb2      	adds	r2, r6, #2
 801eb94:	fb92 f2f9 	sdiv	r2, r2, r9
 801eb98:	b2d2      	uxtb	r2, r2
 801eb9a:	1c55      	adds	r5, r2, #1
 801eb9c:	f1bc 0f01 	cmp.w	ip, #1
 801eba0:	ea4f 0282 	mov.w	r2, r2, lsl #2
 801eba4:	7025      	strb	r5, [r4, #0]
 801eba6:	72a2      	strb	r2, [r4, #10]
 801eba8:	f884 e00b 	strb.w	lr, [r4, #11]
 801ebac:	7321      	strb	r1, [r4, #12]
 801ebae:	d140      	bne.n	801ec32 <MobleSARSplit+0x116>
 801ebb0:	f7ff ffa2 	bl	801eaf8 <MobleProvisionCalculateFCS>
 801ebb4:	2f80      	cmp	r7, #128	; 0x80
 801ebb6:	7360      	strb	r0, [r4, #13]
 801ebb8:	dcba      	bgt.n	801eb30 <MobleSARSplit+0x14>
 801ebba:	f1a7 0b04 	sub.w	fp, r7, #4
 801ebbe:	465a      	mov	r2, fp
 801ebc0:	4641      	mov	r1, r8
 801ebc2:	f104 000e 	add.w	r0, r4, #14
 801ebc6:	f00a fe5b 	bl	8029880 <memmove>
 801ebca:	2501      	movs	r5, #1
 801ebcc:	f104 030a 	add.w	r3, r4, #10
 801ebd0:	f8a4 a008 	strh.w	sl, [r4, #8]
 801ebd4:	8065      	strh	r5, [r4, #2]
 801ebd6:	9301      	str	r3, [sp, #4]
 801ebd8:	7821      	ldrb	r1, [r4, #0]
 801ebda:	428d      	cmp	r5, r1
 801ebdc:	d2d3      	bcs.n	801eb86 <MobleSARSplit+0x6a>
 801ebde:	fb05 f007 	mul.w	r0, r5, r7
 801ebe2:	eb04 0c00 	add.w	ip, r4, r0
 801ebe6:	00aa      	lsls	r2, r5, #2
 801ebe8:	f042 0202 	orr.w	r2, r2, #2
 801ebec:	f88c 200a 	strb.w	r2, [ip, #10]
 801ebf0:	f8b4 c002 	ldrh.w	ip, [r4, #2]
 801ebf4:	2301      	movs	r3, #1
 801ebf6:	fa03 f205 	lsl.w	r2, r3, r5
 801ebfa:	3901      	subs	r1, #1
 801ebfc:	ea42 020c 	orr.w	r2, r2, ip
 801ec00:	428d      	cmp	r5, r1
 801ec02:	8062      	strh	r2, [r4, #2]
 801ec04:	d117      	bne.n	801ec36 <MobleSARSplit+0x11a>
 801ec06:	eba6 020b 	sub.w	r2, r6, fp
 801ec0a:	18d1      	adds	r1, r2, r3
 801ec0c:	4401      	add	r1, r0
 801ec0e:	2980      	cmp	r1, #128	; 0x80
 801ec10:	d88e      	bhi.n	801eb30 <MobleSARSplit+0x14>
 801ec12:	4418      	add	r0, r3
 801ec14:	9b01      	ldr	r3, [sp, #4]
 801ec16:	eb08 010b 	add.w	r1, r8, fp
 801ec1a:	4418      	add	r0, r3
 801ec1c:	f00a fe30 	bl	8029880 <memmove>
 801ec20:	8922      	ldrh	r2, [r4, #8]
 801ec22:	3201      	adds	r2, #1
 801ec24:	4432      	add	r2, r6
 801ec26:	eba2 020b 	sub.w	r2, r2, fp
 801ec2a:	3501      	adds	r5, #1
 801ec2c:	8122      	strh	r2, [r4, #8]
 801ec2e:	b2ed      	uxtb	r5, r5
 801ec30:	e7d2      	b.n	801ebd8 <MobleSARSplit+0xbc>
 801ec32:	4618      	mov	r0, r3
 801ec34:	e7be      	b.n	801ebb4 <MobleSARSplit+0x98>
 801ec36:	3001      	adds	r0, #1
 801ec38:	eb00 0209 	add.w	r2, r0, r9
 801ec3c:	2a80      	cmp	r2, #128	; 0x80
 801ec3e:	f73f af77 	bgt.w	801eb30 <MobleSARSplit+0x14>
 801ec42:	9b01      	ldr	r3, [sp, #4]
 801ec44:	464a      	mov	r2, r9
 801ec46:	eb08 010b 	add.w	r1, r8, fp
 801ec4a:	4418      	add	r0, r3
 801ec4c:	f00a fe18 	bl	8029880 <memmove>
 801ec50:	8922      	ldrh	r2, [r4, #8]
 801ec52:	44cb      	add	fp, r9
 801ec54:	4452      	add	r2, sl
 801ec56:	e7e8      	b.n	801ec2a <MobleSARSplit+0x10e>

0801ec58 <MobleProvisionUpdateRole>:
 801ec58:	6803      	ldr	r3, [r0, #0]
 801ec5a:	781b      	ldrb	r3, [r3, #0]
 801ec5c:	2b01      	cmp	r3, #1
 801ec5e:	d106      	bne.n	801ec6e <MobleProvisionUpdateRole+0x16>
 801ec60:	f890 31f8 	ldrb.w	r3, [r0, #504]	; 0x1f8
 801ec64:	b113      	cbz	r3, 801ec6c <MobleProvisionUpdateRole+0x14>
 801ec66:	2302      	movs	r3, #2
 801ec68:	f880 31f8 	strb.w	r3, [r0, #504]	; 0x1f8
 801ec6c:	4770      	bx	lr
 801ec6e:	2301      	movs	r3, #1
 801ec70:	e7fa      	b.n	801ec68 <MobleProvisionUpdateRole+0x10>
	...

0801ec74 <MobleProvisionProvisionerInit>:
 801ec74:	b510      	push	{r4, lr}
 801ec76:	b928      	cbnz	r0, 801ec84 <MobleProvisionProvisionerInit+0x10>
 801ec78:	4b10      	ldr	r3, [pc, #64]	; (801ecbc <MobleProvisionProvisionerInit+0x48>)
 801ec7a:	4a11      	ldr	r2, [pc, #68]	; (801ecc0 <MobleProvisionProvisionerInit+0x4c>)
 801ec7c:	4811      	ldr	r0, [pc, #68]	; (801ecc4 <MobleProvisionProvisionerInit+0x50>)
 801ec7e:	212e      	movs	r1, #46	; 0x2e
 801ec80:	f009 ff22 	bl	8028ac8 <__assert_func>
 801ec84:	f890 41f8 	ldrb.w	r4, [r0, #504]	; 0x1f8
 801ec88:	2c01      	cmp	r4, #1
 801ec8a:	d014      	beq.n	801ecb6 <MobleProvisionProvisionerInit+0x42>
 801ec8c:	e9c0 23a0 	strd	r2, r3, [r0, #640]	; 0x280
 801ec90:	9b02      	ldr	r3, [sp, #8]
 801ec92:	f8c0 3288 	str.w	r3, [r0, #648]	; 0x288
 801ec96:	9b03      	ldr	r3, [sp, #12]
 801ec98:	f8c0 328c 	str.w	r3, [r0, #652]	; 0x28c
 801ec9c:	9b04      	ldr	r3, [sp, #16]
 801ec9e:	f8c0 3290 	str.w	r3, [r0, #656]	; 0x290
 801eca2:	2400      	movs	r4, #0
 801eca4:	2301      	movs	r3, #1
 801eca6:	f880 41f8 	strb.w	r4, [r0, #504]	; 0x1f8
 801ecaa:	f880 1294 	strb.w	r1, [r0, #660]	; 0x294
 801ecae:	f8a0 3296 	strh.w	r3, [r0, #662]	; 0x296
 801ecb2:	4620      	mov	r0, r4
 801ecb4:	bd10      	pop	{r4, pc}
 801ecb6:	2002      	movs	r0, #2
 801ecb8:	e7fc      	b.n	801ecb4 <MobleProvisionProvisionerInit+0x40>
 801ecba:	bf00      	nop
 801ecbc:	08033999 	.word	0x08033999
 801ecc0:	0803185f 	.word	0x0803185f
 801ecc4:	080339a9 	.word	0x080339a9

0801ecc8 <MobleLibraryInitProvisioner>:
 801ecc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ecca:	9c07      	ldr	r4, [sp, #28]
 801eccc:	9402      	str	r4, [sp, #8]
 801ecce:	9c06      	ldr	r4, [sp, #24]
 801ecd0:	e9cd 3400 	strd	r3, r4, [sp]
 801ecd4:	4613      	mov	r3, r2
 801ecd6:	460a      	mov	r2, r1
 801ecd8:	4601      	mov	r1, r0
 801ecda:	4803      	ldr	r0, [pc, #12]	; (801ece8 <MobleLibraryInitProvisioner+0x20>)
 801ecdc:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 801ece0:	f7ff ffc8 	bl	801ec74 <MobleProvisionProvisionerInit>
 801ece4:	b004      	add	sp, #16
 801ece6:	bd10      	pop	{r4, pc}
 801ece8:	20002514 	.word	0x20002514

0801ecec <BLEMesh_InitProvisionedNode>:
 801ecec:	b507      	push	{r0, r1, r2, lr}
 801ecee:	4b07      	ldr	r3, [pc, #28]	; (801ed0c <BLEMesh_InitProvisionedNode+0x20>)
 801ecf0:	4907      	ldr	r1, [pc, #28]	; (801ed10 <BLEMesh_InitProvisionedNode+0x24>)
 801ecf2:	681a      	ldr	r2, [r3, #0]
 801ecf4:	4b07      	ldr	r3, [pc, #28]	; (801ed14 <BLEMesh_InitProvisionedNode+0x28>)
 801ecf6:	9301      	str	r3, [sp, #4]
 801ecf8:	4b07      	ldr	r3, [pc, #28]	; (801ed18 <BLEMesh_InitProvisionedNode+0x2c>)
 801ecfa:	9300      	str	r3, [sp, #0]
 801ecfc:	6a13      	ldr	r3, [r2, #32]
 801ecfe:	6992      	ldr	r2, [r2, #24]
 801ed00:	2005      	movs	r0, #5
 801ed02:	f7ff ffe1 	bl	801ecc8 <MobleLibraryInitProvisioner>
 801ed06:	b003      	add	sp, #12
 801ed08:	f85d fb04 	ldr.w	pc, [sp], #4
 801ed0c:	20000324 	.word	0x20000324
 801ed10:	08017895 	.word	0x08017895
 801ed14:	08017885 	.word	0x08017885
 801ed18:	080178a1 	.word	0x080178a1

0801ed1c <MobleProvisionUnprovisionedInitEx>:
 801ed1c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed20:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 801ed24:	f89d 7034 	ldrb.w	r7, [sp, #52]	; 0x34
 801ed28:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
 801ed2c:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801ed30:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
 801ed34:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 801ed38:	e9dd ca0a 	ldrd	ip, sl, [sp, #40]	; 0x28
 801ed3c:	4604      	mov	r4, r0
 801ed3e:	b928      	cbnz	r0, 801ed4c <MobleProvisionUnprovisionedInitEx+0x30>
 801ed40:	4b30      	ldr	r3, [pc, #192]	; (801ee04 <MobleProvisionUnprovisionedInitEx+0xe8>)
 801ed42:	4a31      	ldr	r2, [pc, #196]	; (801ee08 <MobleProvisionUnprovisionedInitEx+0xec>)
 801ed44:	4831      	ldr	r0, [pc, #196]	; (801ee0c <MobleProvisionUnprovisionedInitEx+0xf0>)
 801ed46:	215f      	movs	r1, #95	; 0x5f
 801ed48:	f009 febe 	bl	8028ac8 <__assert_func>
 801ed4c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801ed50:	f8c0 1290 	str.w	r1, [r0, #656]	; 0x290
 801ed54:	f880 31fe 	strb.w	r3, [r0, #510]	; 0x1fe
 801ed58:	f880 2200 	strb.w	r2, [r0, #512]	; 0x200
 801ed5c:	b1a3      	cbz	r3, 801ed88 <MobleProvisionUnprovisionedInitEx+0x6c>
 801ed5e:	f1bc 0f00 	cmp.w	ip, #0
 801ed62:	d102      	bne.n	801ed6a <MobleProvisionUnprovisionedInitEx+0x4e>
 801ed64:	2003      	movs	r0, #3
 801ed66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed6a:	f1ba 0f00 	cmp.w	sl, #0
 801ed6e:	d0f9      	beq.n	801ed64 <MobleProvisionUnprovisionedInitEx+0x48>
 801ed70:	2240      	movs	r2, #64	; 0x40
 801ed72:	4661      	mov	r1, ip
 801ed74:	f500 7002 	add.w	r0, r0, #520	; 0x208
 801ed78:	f00a fd82 	bl	8029880 <memmove>
 801ed7c:	2220      	movs	r2, #32
 801ed7e:	4651      	mov	r1, sl
 801ed80:	f504 7012 	add.w	r0, r4, #584	; 0x248
 801ed84:	f00a fd7c 	bl	8029880 <memmove>
 801ed88:	b35f      	cbz	r7, 801ede2 <MobleProvisionUnprovisionedInitEx+0xc6>
 801ed8a:	f1bb 0f00 	cmp.w	fp, #0
 801ed8e:	d028      	beq.n	801ede2 <MobleProvisionUnprovisionedInitEx+0xc6>
 801ed90:	2f08      	cmp	r7, #8
 801ed92:	d8e7      	bhi.n	801ed64 <MobleProvisionUnprovisionedInitEx+0x48>
 801ed94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ed96:	f884 7206 	strb.w	r7, [r4, #518]	; 0x206
 801ed9a:	f8a4 b202 	strh.w	fp, [r4, #514]	; 0x202
 801ed9e:	f8c4 3294 	str.w	r3, [r4, #660]	; 0x294
 801eda2:	b325      	cbz	r5, 801edee <MobleProvisionUnprovisionedInitEx+0xd2>
 801eda4:	2d10      	cmp	r5, #16
 801eda6:	d8dd      	bhi.n	801ed64 <MobleProvisionUnprovisionedInitEx+0x48>
 801eda8:	f1b9 0f00 	cmp.w	r9, #0
 801edac:	d0da      	beq.n	801ed64 <MobleProvisionUnprovisionedInitEx+0x48>
 801edae:	2301      	movs	r3, #1
 801edb0:	f884 31ff 	strb.w	r3, [r4, #511]	; 0x1ff
 801edb4:	f884 527e 	strb.w	r5, [r4, #638]	; 0x27e
 801edb8:	462a      	mov	r2, r5
 801edba:	4649      	mov	r1, r9
 801edbc:	f204 207f 	addw	r0, r4, #639	; 0x27f
 801edc0:	f00a fd5e 	bl	8029880 <memmove>
 801edc4:	b1b6      	cbz	r6, 801edf4 <MobleProvisionUnprovisionedInitEx+0xd8>
 801edc6:	f1b8 0f00 	cmp.w	r8, #0
 801edca:	d013      	beq.n	801edf4 <MobleProvisionUnprovisionedInitEx+0xd8>
 801edcc:	2e08      	cmp	r6, #8
 801edce:	d8c9      	bhi.n	801ed64 <MobleProvisionUnprovisionedInitEx+0x48>
 801edd0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801edd2:	f884 6207 	strb.w	r6, [r4, #519]	; 0x207
 801edd6:	f8a4 8204 	strh.w	r8, [r4, #516]	; 0x204
 801edda:	f8c4 3298 	str.w	r3, [r4, #664]	; 0x298
 801edde:	2000      	movs	r0, #0
 801ede0:	e7c1      	b.n	801ed66 <MobleProvisionUnprovisionedInitEx+0x4a>
 801ede2:	2300      	movs	r3, #0
 801ede4:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
 801ede8:	f8a4 3202 	strh.w	r3, [r4, #514]	; 0x202
 801edec:	e7d7      	b.n	801ed9e <MobleProvisionUnprovisionedInitEx+0x82>
 801edee:	f884 527e 	strb.w	r5, [r4, #638]	; 0x27e
 801edf2:	e7e7      	b.n	801edc4 <MobleProvisionUnprovisionedInitEx+0xa8>
 801edf4:	2000      	movs	r0, #0
 801edf6:	f884 0207 	strb.w	r0, [r4, #519]	; 0x207
 801edfa:	f8a4 0204 	strh.w	r0, [r4, #516]	; 0x204
 801edfe:	f8c4 0298 	str.w	r0, [r4, #664]	; 0x298
 801ee02:	e7b0      	b.n	801ed66 <MobleProvisionUnprovisionedInitEx+0x4a>
 801ee04:	08033999 	.word	0x08033999
 801ee08:	0803187d 	.word	0x0803187d
 801ee0c:	080339a9 	.word	0x080339a9

0801ee10 <MobleLibraryInitUnprovisioned>:
 801ee10:	b510      	push	{r4, lr}
 801ee12:	b08c      	sub	sp, #48	; 0x30
 801ee14:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801ee16:	940a      	str	r4, [sp, #40]	; 0x28
 801ee18:	f89d 4058 	ldrb.w	r4, [sp, #88]	; 0x58
 801ee1c:	9409      	str	r4, [sp, #36]	; 0x24
 801ee1e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801ee20:	9408      	str	r4, [sp, #32]
 801ee22:	f8bd 4050 	ldrh.w	r4, [sp, #80]	; 0x50
 801ee26:	9407      	str	r4, [sp, #28]
 801ee28:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 801ee2c:	9406      	str	r4, [sp, #24]
 801ee2e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801ee30:	9405      	str	r4, [sp, #20]
 801ee32:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 801ee36:	9404      	str	r4, [sp, #16]
 801ee38:	f89d 4040 	ldrb.w	r4, [sp, #64]	; 0x40
 801ee3c:	9403      	str	r4, [sp, #12]
 801ee3e:	f89d 403c 	ldrb.w	r4, [sp, #60]	; 0x3c
 801ee42:	9402      	str	r4, [sp, #8]
 801ee44:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801ee46:	e9cd 3400 	strd	r3, r4, [sp]
 801ee4a:	4613      	mov	r3, r2
 801ee4c:	460a      	mov	r2, r1
 801ee4e:	4601      	mov	r1, r0
 801ee50:	4803      	ldr	r0, [pc, #12]	; (801ee60 <MobleLibraryInitUnprovisioned+0x50>)
 801ee52:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 801ee56:	f7ff ff61 	bl	801ed1c <MobleProvisionUnprovisionedInitEx>
 801ee5a:	b00c      	add	sp, #48	; 0x30
 801ee5c:	bd10      	pop	{r4, pc}
 801ee5e:	bf00      	nop
 801ee60:	20002514 	.word	0x20002514

0801ee64 <BLEMesh_InitUnprovisionedNode>:
 801ee64:	b500      	push	{lr}
 801ee66:	4b10      	ldr	r3, [pc, #64]	; (801eea8 <BLEMesh_InitUnprovisionedNode+0x44>)
 801ee68:	4810      	ldr	r0, [pc, #64]	; (801eeac <BLEMesh_InitUnprovisionedNode+0x48>)
 801ee6a:	681b      	ldr	r3, [r3, #0]
 801ee6c:	b08b      	sub	sp, #44	; 0x2c
 801ee6e:	6919      	ldr	r1, [r3, #16]
 801ee70:	781a      	ldrb	r2, [r3, #0]
 801ee72:	9109      	str	r1, [sp, #36]	; 0x24
 801ee74:	7b59      	ldrb	r1, [r3, #13]
 801ee76:	9108      	str	r1, [sp, #32]
 801ee78:	6a19      	ldr	r1, [r3, #32]
 801ee7a:	9107      	str	r1, [sp, #28]
 801ee7c:	7f59      	ldrb	r1, [r3, #29]
 801ee7e:	9106      	str	r1, [sp, #24]
 801ee80:	7f19      	ldrb	r1, [r3, #28]
 801ee82:	9105      	str	r1, [sp, #20]
 801ee84:	6999      	ldr	r1, [r3, #24]
 801ee86:	9104      	str	r1, [sp, #16]
 801ee88:	7d59      	ldrb	r1, [r3, #21]
 801ee8a:	9103      	str	r1, [sp, #12]
 801ee8c:	7d19      	ldrb	r1, [r3, #20]
 801ee8e:	9102      	str	r1, [sp, #8]
 801ee90:	7b19      	ldrb	r1, [r3, #12]
 801ee92:	9101      	str	r1, [sp, #4]
 801ee94:	6899      	ldr	r1, [r3, #8]
 801ee96:	9100      	str	r1, [sp, #0]
 801ee98:	685b      	ldr	r3, [r3, #4]
 801ee9a:	2100      	movs	r1, #0
 801ee9c:	f7ff ffb8 	bl	801ee10 <MobleLibraryInitUnprovisioned>
 801eea0:	b00b      	add	sp, #44	; 0x2c
 801eea2:	f85d fb04 	ldr.w	pc, [sp], #4
 801eea6:	bf00      	nop
 801eea8:	20000324 	.word	0x20000324
 801eeac:	080178ad 	.word	0x080178ad

0801eeb0 <MobleConfigNetworkInvalidate>:
 801eeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801eeb4:	4606      	mov	r6, r0
 801eeb6:	2800      	cmp	r0, #0
 801eeb8:	d048      	beq.n	801ef4c <MobleConfigNetworkInvalidate+0x9c>
 801eeba:	4f25      	ldr	r7, [pc, #148]	; (801ef50 <MobleConfigNetworkInvalidate+0xa0>)
 801eebc:	f507 5580 	add.w	r5, r7, #4096	; 0x1000
 801eec0:	f895 479c 	ldrb.w	r4, [r5, #1948]	; 0x79c
 801eec4:	bbd4      	cbnz	r4, 801ef3c <MobleConfigNetworkInvalidate+0x8c>
 801eec6:	2301      	movs	r3, #1
 801eec8:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801eecc:	4621      	mov	r1, r4
 801eece:	f205 507a 	addw	r0, r5, #1402	; 0x57a
 801eed2:	f885 379d 	strb.w	r3, [r5, #1949]	; 0x79d
 801eed6:	f8a7 4962 	strh.w	r4, [r7, #2402]	; 0x962
 801eeda:	f00a fceb 	bl	80298b4 <memset>
 801eede:	2284      	movs	r2, #132	; 0x84
 801eee0:	4621      	mov	r1, r4
 801eee2:	f205 60ee 	addw	r0, r5, #1774	; 0x6ee
 801eee6:	f00a fce5 	bl	80298b4 <memset>
 801eeea:	2210      	movs	r2, #16
 801eeec:	4621      	mov	r1, r4
 801eeee:	f205 7074 	addw	r0, r5, #1908	; 0x774
 801eef2:	f00a fcdf 	bl	80298b4 <memset>
 801eef6:	f505 69ae 	add.w	r9, r5, #1392	; 0x570
 801eefa:	f8a5 4772 	strh.w	r4, [r5, #1906]	; 0x772
 801eefe:	f8a5 4784 	strh.w	r4, [r5, #1924]	; 0x784
 801ef02:	46a0      	mov	r8, r4
 801ef04:	f607 1768 	addw	r7, r7, #2408	; 0x968
 801ef08:	f809 8b01 	strb.w	r8, [r9], #1
 801ef0c:	1938      	adds	r0, r7, r4
 801ef0e:	f889 8004 	strb.w	r8, [r9, #4]
 801ef12:	f44f 721a 	mov.w	r2, #616	; 0x268
 801ef16:	2100      	movs	r1, #0
 801ef18:	f00a fccc 	bl	80298b4 <memset>
 801ef1c:	f504 741a 	add.w	r4, r4, #616	; 0x268
 801ef20:	f640 4308 	movw	r3, #3080	; 0xc08
 801ef24:	429c      	cmp	r4, r3
 801ef26:	d1ef      	bne.n	801ef08 <MobleConfigNetworkInvalidate+0x58>
 801ef28:	f885 87a8 	strb.w	r8, [r5, #1960]	; 0x7a8
 801ef2c:	f7fd fd0a 	bl	801c944 <MobleConfigNetworkEncode>
 801ef30:	f7fd fe3a 	bl	801cba8 <MobleConfigSavedSeqEncode>
 801ef34:	f7fd fbde 	bl	801c6f4 <MobleConfigSave>
 801ef38:	f885 879d 	strb.w	r8, [r5, #1949]	; 0x79d
 801ef3c:	f7ff ff92 	bl	801ee64 <BLEMesh_InitUnprovisionedNode>
 801ef40:	2300      	movs	r3, #0
 801ef42:	7033      	strb	r3, [r6, #0]
 801ef44:	8073      	strh	r3, [r6, #2]
 801ef46:	4618      	mov	r0, r3
 801ef48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ef4c:	2003      	movs	r0, #3
 801ef4e:	e7fb      	b.n	801ef48 <MobleConfigNetworkInvalidate+0x98>
 801ef50:	2000141c 	.word	0x2000141c

0801ef54 <MobleProvisionGetRole>:
 801ef54:	b508      	push	{r3, lr}
 801ef56:	b928      	cbnz	r0, 801ef64 <MobleProvisionGetRole+0x10>
 801ef58:	4b04      	ldr	r3, [pc, #16]	; (801ef6c <MobleProvisionGetRole+0x18>)
 801ef5a:	4a05      	ldr	r2, [pc, #20]	; (801ef70 <MobleProvisionGetRole+0x1c>)
 801ef5c:	4805      	ldr	r0, [pc, #20]	; (801ef74 <MobleProvisionGetRole+0x20>)
 801ef5e:	21b2      	movs	r1, #178	; 0xb2
 801ef60:	f009 fdb2 	bl	8028ac8 <__assert_func>
 801ef64:	f890 01f8 	ldrb.w	r0, [r0, #504]	; 0x1f8
 801ef68:	bd08      	pop	{r3, pc}
 801ef6a:	bf00      	nop
 801ef6c:	080339a1 	.word	0x080339a1
 801ef70:	0803189f 	.word	0x0803189f
 801ef74:	080339a9 	.word	0x080339a9

0801ef78 <BLEMesh_IsUnprovisioned>:
 801ef78:	b508      	push	{r3, lr}
 801ef7a:	4b04      	ldr	r3, [pc, #16]	; (801ef8c <BLEMesh_IsUnprovisioned+0x14>)
 801ef7c:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 801ef80:	f7ff ffe8 	bl	801ef54 <MobleProvisionGetRole>
 801ef84:	1e43      	subs	r3, r0, #1
 801ef86:	4258      	negs	r0, r3
 801ef88:	4158      	adcs	r0, r3
 801ef8a:	bd08      	pop	{r3, pc}
 801ef8c:	20002514 	.word	0x20002514

0801ef90 <MoblePalBluetoothReset>:
 801ef90:	b570      	push	{r4, r5, r6, lr}
 801ef92:	b088      	sub	sp, #32
 801ef94:	f7f6 fb4e 	bl	8015634 <hci_reset>
 801ef98:	2515      	movs	r5, #21
 801ef9a:	4604      	mov	r4, r0
 801ef9c:	b1bc      	cbz	r4, 801efce <MoblePalBluetoothReset+0x3e>
 801ef9e:	3d01      	subs	r5, #1
 801efa0:	d103      	bne.n	801efaa <MoblePalBluetoothReset+0x1a>
 801efa2:	462c      	mov	r4, r5
 801efa4:	4620      	mov	r0, r4
 801efa6:	b008      	add	sp, #32
 801efa8:	bd70      	pop	{r4, r5, r6, pc}
 801efaa:	f7f6 fb43 	bl	8015634 <hci_reset>
 801efae:	4604      	mov	r4, r0
 801efb0:	e7f4      	b.n	801ef9c <MoblePalBluetoothReset+0xc>
 801efb2:	2b01      	cmp	r3, #1
 801efb4:	d11a      	bne.n	801efec <MoblePalBluetoothReset+0x5c>
 801efb6:	f505 7257 	add.w	r2, r5, #860	; 0x35c
 801efba:	2106      	movs	r1, #6
 801efbc:	202e      	movs	r0, #46	; 0x2e
 801efbe:	e011      	b.n	801efe4 <MoblePalBluetoothReset+0x54>
 801efc0:	4798      	blx	r3
 801efc2:	2801      	cmp	r0, #1
 801efc4:	d959      	bls.n	801f07a <MoblePalBluetoothReset+0xea>
 801efc6:	e7ed      	b.n	801efa4 <MoblePalBluetoothReset+0x14>
 801efc8:	4b31      	ldr	r3, [pc, #196]	; (801f090 <MoblePalBluetoothReset+0x100>)
 801efca:	7018      	strb	r0, [r3, #0]
 801efcc:	e7ea      	b.n	801efa4 <MoblePalBluetoothReset+0x14>
 801efce:	4d31      	ldr	r5, [pc, #196]	; (801f094 <MoblePalBluetoothReset+0x104>)
 801efd0:	f7fc f828 	bl	801b024 <MoblePalBluetoothFreeAllNotifications>
 801efd4:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 801efd8:	2b03      	cmp	r3, #3
 801efda:	d1ea      	bne.n	801efb2 <MoblePalBluetoothReset+0x22>
 801efdc:	f505 7257 	add.w	r2, r5, #860	; 0x35c
 801efe0:	2106      	movs	r1, #6
 801efe2:	4620      	mov	r0, r4
 801efe4:	f7f6 f961 	bl	80152aa <aci_hal_write_config_data>
 801efe8:	2800      	cmp	r0, #0
 801efea:	d1db      	bne.n	801efa4 <MoblePalBluetoothReset+0x14>
 801efec:	4b2a      	ldr	r3, [pc, #168]	; (801f098 <MoblePalBluetoothReset+0x108>)
 801efee:	685b      	ldr	r3, [r3, #4]
 801eff0:	685b      	ldr	r3, [r3, #4]
 801eff2:	4798      	blx	r3
 801eff4:	2800      	cmp	r0, #0
 801eff6:	d1d5      	bne.n	801efa4 <MoblePalBluetoothReset+0x14>
 801eff8:	f7f5 fcd6 	bl	80149a8 <aci_gatt_init>
 801effc:	4601      	mov	r1, r0
 801effe:	2800      	cmp	r0, #0
 801f000:	d1d0      	bne.n	801efa4 <MoblePalBluetoothReset+0x14>
 801f002:	f10d 0312 	add.w	r3, sp, #18
 801f006:	9301      	str	r3, [sp, #4]
 801f008:	f10d 0316 	add.w	r3, sp, #22
 801f00c:	9300      	str	r3, [sp, #0]
 801f00e:	f8ad 0012 	strh.w	r0, [sp, #18]
 801f012:	f895 2364 	ldrb.w	r2, [r5, #868]	; 0x364
 801f016:	ab05      	add	r3, sp, #20
 801f018:	200b      	movs	r0, #11
 801f01a:	f7f5 fab2 	bl	8014582 <aci_gap_init>
 801f01e:	4606      	mov	r6, r0
 801f020:	2800      	cmp	r0, #0
 801f022:	d1bf      	bne.n	801efa4 <MoblePalBluetoothReset+0x14>
 801f024:	f895 3364 	ldrb.w	r3, [r5, #868]	; 0x364
 801f028:	b193      	cbz	r3, 801f050 <MoblePalBluetoothReset+0xc0>
 801f02a:	f8d5 3368 	ldr.w	r3, [r5, #872]	; 0x368
 801f02e:	f895 2364 	ldrb.w	r2, [r5, #868]	; 0x364
 801f032:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801f036:	3302      	adds	r3, #2
 801f038:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f03c:	2300      	movs	r3, #0
 801f03e:	e9cd 2600 	strd	r2, r6, [sp]
 801f042:	4618      	mov	r0, r3
 801f044:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801f048:	f7f6 f86c 	bl	8015124 <aci_gatt_update_char_value_ext>
 801f04c:	2893      	cmp	r0, #147	; 0x93
 801f04e:	d0ec      	beq.n	801f02a <MoblePalBluetoothReset+0x9a>
 801f050:	f895 3363 	ldrb.w	r3, [r5, #867]	; 0x363
 801f054:	2b01      	cmp	r3, #1
 801f056:	d10c      	bne.n	801f072 <MoblePalBluetoothReset+0xe2>
 801f058:	aa06      	add	r2, sp, #24
 801f05a:	f10d 011f 	add.w	r1, sp, #31
 801f05e:	202e      	movs	r0, #46	; 0x2e
 801f060:	f7f6 f9a8 	bl	80153b4 <aci_hal_read_config_data>
 801f064:	4b0d      	ldr	r3, [pc, #52]	; (801f09c <MoblePalBluetoothReset+0x10c>)
 801f066:	9806      	ldr	r0, [sp, #24]
 801f068:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 801f06c:	f8c5 035c 	str.w	r0, [r5, #860]	; 0x35c
 801f070:	809a      	strh	r2, [r3, #4]
 801f072:	f8d5 3374 	ldr.w	r3, [r5, #884]	; 0x374
 801f076:	2b00      	cmp	r3, #0
 801f078:	d1a2      	bne.n	801efc0 <MoblePalBluetoothReset+0x30>
 801f07a:	2300      	movs	r3, #0
 801f07c:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 801f080:	f7ff ff7a 	bl	801ef78 <BLEMesh_IsUnprovisioned>
 801f084:	2801      	cmp	r0, #1
 801f086:	4604      	mov	r4, r0
 801f088:	d09e      	beq.n	801efc8 <MoblePalBluetoothReset+0x38>
 801f08a:	2401      	movs	r4, #1
 801f08c:	e78a      	b.n	801efa4 <MoblePalBluetoothReset+0x14>
 801f08e:	bf00      	nop
 801f090:	20004443 	.word	0x20004443
 801f094:	2000141c 	.word	0x2000141c
 801f098:	20000324 	.word	0x20000324
 801f09c:	20001778 	.word	0x20001778

0801f0a0 <MobleProvisionGenerateAuthValue>:
 801f0a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f0a2:	4605      	mov	r5, r0
 801f0a4:	b928      	cbnz	r0, 801f0b2 <MobleProvisionGenerateAuthValue+0x12>
 801f0a6:	4b1e      	ldr	r3, [pc, #120]	; (801f120 <MobleProvisionGenerateAuthValue+0x80>)
 801f0a8:	4a1e      	ldr	r2, [pc, #120]	; (801f124 <MobleProvisionGenerateAuthValue+0x84>)
 801f0aa:	481f      	ldr	r0, [pc, #124]	; (801f128 <MobleProvisionGenerateAuthValue+0x88>)
 801f0ac:	21ba      	movs	r1, #186	; 0xba
 801f0ae:	f009 fd0b 	bl	8028ac8 <__assert_func>
 801f0b2:	4b1e      	ldr	r3, [pc, #120]	; (801f12c <MobleProvisionGenerateAuthValue+0x8c>)
 801f0b4:	f8d3 46f0 	ldr.w	r4, [r3, #1776]	; 0x6f0
 801f0b8:	2210      	movs	r2, #16
 801f0ba:	2100      	movs	r1, #0
 801f0bc:	f00a fbfa 	bl	80298b4 <memset>
 801f0c0:	f894 31fb 	ldrb.w	r3, [r4, #507]	; 0x1fb
 801f0c4:	2b02      	cmp	r3, #2
 801f0c6:	d008      	beq.n	801f0da <MobleProvisionGenerateAuthValue+0x3a>
 801f0c8:	2b03      	cmp	r3, #3
 801f0ca:	d014      	beq.n	801f0f6 <MobleProvisionGenerateAuthValue+0x56>
 801f0cc:	2b01      	cmp	r3, #1
 801f0ce:	d125      	bne.n	801f11c <MobleProvisionGenerateAuthValue+0x7c>
 801f0d0:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
 801f0d4:	f504 711a 	add.w	r1, r4, #616	; 0x268
 801f0d8:	e007      	b.n	801f0ea <MobleProvisionGenerateAuthValue+0x4a>
 801f0da:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
 801f0de:	f504 711a 	add.w	r1, r4, #616	; 0x268
 801f0e2:	2b04      	cmp	r3, #4
 801f0e4:	d10d      	bne.n	801f102 <MobleProvisionGenerateAuthValue+0x62>
 801f0e6:	f894 2278 	ldrb.w	r2, [r4, #632]	; 0x278
 801f0ea:	4628      	mov	r0, r5
 801f0ec:	b003      	add	sp, #12
 801f0ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f0f2:	f00a bbc5 	b.w	8029880 <memmove>
 801f0f6:	f894 31fc 	ldrb.w	r3, [r4, #508]	; 0x1fc
 801f0fa:	f504 711a 	add.w	r1, r4, #616	; 0x268
 801f0fe:	2b03      	cmp	r3, #3
 801f100:	e7f0      	b.n	801f0e4 <MobleProvisionGenerateAuthValue+0x44>
 801f102:	f8d4 0268 	ldr.w	r0, [r4, #616]	; 0x268
 801f106:	6849      	ldr	r1, [r1, #4]
 801f108:	466b      	mov	r3, sp
 801f10a:	c303      	stmia	r3!, {r0, r1}
 801f10c:	2210      	movs	r2, #16
 801f10e:	4601      	mov	r1, r0
 801f110:	4628      	mov	r0, r5
 801f112:	b003      	add	sp, #12
 801f114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f118:	f7fc b882 	b.w	801b220 <MobleOutputStreamPutBigEndian>
 801f11c:	b003      	add	sp, #12
 801f11e:	bd30      	pop	{r4, r5, pc}
 801f120:	080339f1 	.word	0x080339f1
 801f124:	080318b5 	.word	0x080318b5
 801f128:	080339a9 	.word	0x080339a9
 801f12c:	20002514 	.word	0x20002514

0801f130 <MobleProvisionBearerGatt_DeleteTimer>:
 801f130:	6802      	ldr	r2, [r0, #0]
 801f132:	b122      	cbz	r2, 801f13e <MobleProvisionBearerGatt_DeleteTimer+0xe>
 801f134:	2300      	movs	r3, #0
 801f136:	7013      	strb	r3, [r2, #0]
 801f138:	6003      	str	r3, [r0, #0]
 801f13a:	4618      	mov	r0, r3
 801f13c:	4770      	bx	lr
 801f13e:	2001      	movs	r0, #1
 801f140:	4770      	bx	lr
	...

0801f144 <MobleProvision_UnprovisionedNode_Init>:
 801f144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f146:	4d2d      	ldr	r5, [pc, #180]	; (801f1fc <MobleProvision_UnprovisionedNode_Init+0xb8>)
 801f148:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 801f14c:	f7ff ff02 	bl	801ef54 <MobleProvisionGetRole>
 801f150:	2801      	cmp	r0, #1
 801f152:	4607      	mov	r7, r0
 801f154:	d150      	bne.n	801f1f8 <MobleProvision_UnprovisionedNode_Init+0xb4>
 801f156:	f44f 70d6 	mov.w	r0, #428	; 0x1ac
 801f15a:	f7fb fea1 	bl	801aea0 <MobleMemAlloc>
 801f15e:	4606      	mov	r6, r0
 801f160:	f8c5 0a0c 	str.w	r0, [r5, #2572]	; 0xa0c
 801f164:	b908      	cbnz	r0, 801f16a <MobleProvision_UnprovisionedNode_Init+0x26>
 801f166:	2002      	movs	r0, #2
 801f168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f16a:	2400      	movs	r4, #0
 801f16c:	f8a0 4044 	strh.w	r4, [r0, #68]	; 0x44
 801f170:	f7e8 fe78 	bl	8007e64 <HAL_GetTick>
 801f174:	4b22      	ldr	r3, [pc, #136]	; (801f200 <MobleProvision_UnprovisionedNode_Init+0xbc>)
 801f176:	f8c6 01a4 	str.w	r0, [r6, #420]	; 0x1a4
 801f17a:	f8d5 6a0c 	ldr.w	r6, [r5, #2572]	; 0xa0c
 801f17e:	685b      	ldr	r3, [r3, #4]
 801f180:	f8c6 404a 	str.w	r4, [r6, #74]	; 0x4a
 801f184:	f8c6 4046 	str.w	r4, [r6, #70]	; 0x46
 801f188:	f8c6 404d 	str.w	r4, [r6, #77]	; 0x4d
 801f18c:	69db      	ldr	r3, [r3, #28]
 801f18e:	4798      	blx	r3
 801f190:	f886 0046 	strb.w	r0, [r6, #70]	; 0x46
 801f194:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	; 0xa0c
 801f198:	f890 2046 	ldrb.w	r2, [r0, #70]	; 0x46
 801f19c:	2a05      	cmp	r2, #5
 801f19e:	d8e2      	bhi.n	801f166 <MobleProvision_UnprovisionedNode_Init+0x22>
 801f1a0:	f8d5 16f0 	ldr.w	r1, [r5, #1776]	; 0x6f0
 801f1a4:	f880 4047 	strb.w	r4, [r0, #71]	; 0x47
 801f1a8:	f880 7048 	strb.w	r7, [r0, #72]	; 0x48
 801f1ac:	f891 21fe 	ldrb.w	r2, [r1, #510]	; 0x1fe
 801f1b0:	f880 2049 	strb.w	r2, [r0, #73]	; 0x49
 801f1b4:	f891 21ff 	ldrb.w	r2, [r1, #511]	; 0x1ff
 801f1b8:	f880 204a 	strb.w	r2, [r0, #74]	; 0x4a
 801f1bc:	f891 2206 	ldrb.w	r2, [r1, #518]	; 0x206
 801f1c0:	f880 204b 	strb.w	r2, [r0, #75]	; 0x4b
 801f1c4:	f8b1 1202 	ldrh.w	r1, [r1, #514]	; 0x202
 801f1c8:	2202      	movs	r2, #2
 801f1ca:	304c      	adds	r0, #76	; 0x4c
 801f1cc:	f7fc f828 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801f1d0:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 801f1d4:	f8d5 0a0c 	ldr.w	r0, [r5, #2572]	; 0xa0c
 801f1d8:	f893 2207 	ldrb.w	r2, [r3, #519]	; 0x207
 801f1dc:	f880 204e 	strb.w	r2, [r0, #78]	; 0x4e
 801f1e0:	f8b3 1204 	ldrh.w	r1, [r3, #516]	; 0x204
 801f1e4:	2202      	movs	r2, #2
 801f1e6:	304f      	adds	r0, #79	; 0x4f
 801f1e8:	f7fc f81a 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801f1ec:	f8d5 3a0c 	ldr.w	r3, [r5, #2572]	; 0xa0c
 801f1f0:	4620      	mov	r0, r4
 801f1f2:	f8a3 41a8 	strh.w	r4, [r3, #424]	; 0x1a8
 801f1f6:	e7b7      	b.n	801f168 <MobleProvision_UnprovisionedNode_Init+0x24>
 801f1f8:	2003      	movs	r0, #3
 801f1fa:	e7b5      	b.n	801f168 <MobleProvision_UnprovisionedNode_Init+0x24>
 801f1fc:	20002514 	.word	0x20002514
 801f200:	20000324 	.word	0x20000324

0801f204 <MobleProvision_UnprovisionedNode_GetNextOperation>:
 801f204:	4b0e      	ldr	r3, [pc, #56]	; (801f240 <MobleProvision_UnprovisionedNode_GetNextOperation+0x3c>)
 801f206:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 801f20a:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 801f20e:	2807      	cmp	r0, #7
 801f210:	d805      	bhi.n	801f21e <MobleProvision_UnprovisionedNode_GetNextOperation+0x1a>
 801f212:	e8df f000 	tbb	[pc, r0]
 801f216:	0d06      	.short	0x0d06
 801f218:	06061306 	.word	0x06061306
 801f21c:	1304      	.short	0x1304
 801f21e:	2000      	movs	r0, #0
 801f220:	4770      	bx	lr
 801f222:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f226:	2b00      	cmp	r3, #0
 801f228:	bf14      	ite	ne
 801f22a:	2002      	movne	r0, #2
 801f22c:	2001      	moveq	r0, #1
 801f22e:	4770      	bx	lr
 801f230:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801f234:	2b02      	cmp	r3, #2
 801f236:	bf28      	it	cs
 801f238:	2002      	movcs	r0, #2
 801f23a:	4770      	bx	lr
 801f23c:	2002      	movs	r0, #2
 801f23e:	4770      	bx	lr
 801f240:	20002514 	.word	0x20002514

0801f244 <BnrgmProvision_UnprovisionedGetState>:
 801f244:	4b04      	ldr	r3, [pc, #16]	; (801f258 <BnrgmProvision_UnprovisionedGetState+0x14>)
 801f246:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 801f24a:	b113      	cbz	r3, 801f252 <BnrgmProvision_UnprovisionedGetState+0xe>
 801f24c:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 801f250:	4770      	bx	lr
 801f252:	2007      	movs	r0, #7
 801f254:	4770      	bx	lr
 801f256:	bf00      	nop
 801f258:	20002514 	.word	0x20002514

0801f25c <BnrgmTransmitFsm>:
 801f25c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801f25e:	4605      	mov	r5, r0
 801f260:	f7e8 fe00 	bl	8007e64 <HAL_GetTick>
 801f264:	4c90      	ldr	r4, [pc, #576]	; (801f4a8 <BnrgmTransmitFsm+0x24c>)
 801f266:	4606      	mov	r6, r0
 801f268:	f7f8 fea8 	bl	8017fbc <MoblePalBluetoothGetConnectionState>
 801f26c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
 801f270:	2b08      	cmp	r3, #8
 801f272:	d82e      	bhi.n	801f2d2 <BnrgmTransmitFsm+0x76>
 801f274:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f278:	00570009 	.word	0x00570009
 801f27c:	007e0074 	.word	0x007e0074
 801f280:	00f900ba 	.word	0x00f900ba
 801f284:	002d0105 	.word	0x002d0105
 801f288:	007c      	.short	0x007c
 801f28a:	bb7d      	cbnz	r5, 801f2ec <BnrgmTransmitFsm+0x90>
 801f28c:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
 801f290:	b30b      	cbz	r3, 801f2d6 <BnrgmTransmitFsm+0x7a>
 801f292:	f7e8 fde7 	bl	8007e64 <HAL_GetTick>
 801f296:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
 801f29a:	b933      	cbnz	r3, 801f2aa <BnrgmTransmitFsm+0x4e>
 801f29c:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f2a0:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
 801f2a4:	1a80      	subs	r0, r0, r2
 801f2a6:	4283      	cmp	r3, r0
 801f2a8:	d815      	bhi.n	801f2d6 <BnrgmTransmitFsm+0x7a>
 801f2aa:	f7fb fb49 	bl	801a940 <BnrgmTransmitQueuePrepNextItem>
 801f2ae:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 801f2b2:	4318      	orrs	r0, r3
 801f2b4:	b2c0      	uxtb	r0, r0
 801f2b6:	b970      	cbnz	r0, 801f2d6 <BnrgmTransmitFsm+0x7a>
 801f2b8:	2301      	movs	r3, #1
 801f2ba:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
 801f2be:	4c7b      	ldr	r4, [pc, #492]	; (801f4ac <BnrgmTransmitFsm+0x250>)
 801f2c0:	f894 3a10 	ldrb.w	r3, [r4, #2576]	; 0xa10
 801f2c4:	b92b      	cbnz	r3, 801f2d2 <BnrgmTransmitFsm+0x76>
 801f2c6:	200f      	movs	r0, #15
 801f2c8:	f7f6 f960 	bl	801558c <aci_hal_set_radio_activity_mask>
 801f2cc:	2301      	movs	r3, #1
 801f2ce:	f884 3a10 	strb.w	r3, [r4, #2576]	; 0xa10
 801f2d2:	b002      	add	sp, #8
 801f2d4:	bd70      	pop	{r4, r5, r6, pc}
 801f2d6:	f8d4 3168 	ldr.w	r3, [r4, #360]	; 0x168
 801f2da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 801f2de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 801f2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801f2e6:	d1ea      	bne.n	801f2be <BnrgmTransmitFsm+0x62>
 801f2e8:	2303      	movs	r3, #3
 801f2ea:	e7e6      	b.n	801f2ba <BnrgmTransmitFsm+0x5e>
 801f2ec:	2d05      	cmp	r5, #5
 801f2ee:	d110      	bne.n	801f312 <BnrgmTransmitFsm+0xb6>
 801f2f0:	f44f 5120 	mov.w	r1, #10240	; 0x2800
 801f2f4:	f8b4 016c 	ldrh.w	r0, [r4, #364]	; 0x16c
 801f2f8:	f8a4 1186 	strh.w	r1, [r4, #390]	; 0x186
 801f2fc:	f8a4 0184 	strh.w	r0, [r4, #388]	; 0x184
 801f300:	f7fb fd5a 	bl	801adb8 <BnrgmTransmitStartScan>
 801f304:	f7e8 fdae 	bl	8007e64 <HAL_GetTick>
 801f308:	f884 517a 	strb.w	r5, [r4, #378]	; 0x17a
 801f30c:	f8c4 0170 	str.w	r0, [r4, #368]	; 0x170
 801f310:	e7d5      	b.n	801f2be <BnrgmTransmitFsm+0x62>
 801f312:	2d01      	cmp	r5, #1
 801f314:	d1d3      	bne.n	801f2be <BnrgmTransmitFsm+0x62>
 801f316:	f7fb faa3 	bl	801a860 <BnrgmTransmitQueueInit>
 801f31a:	2300      	movs	r3, #0
 801f31c:	f8a4 3168 	strh.w	r3, [r4, #360]	; 0x168
 801f320:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
 801f324:	e7cb      	b.n	801f2be <BnrgmTransmitFsm+0x62>
 801f326:	b9a5      	cbnz	r5, 801f352 <BnrgmTransmitFsm+0xf6>
 801f328:	f7f9 f88a 	bl	8018440 <MoblePalBluetoothModeStopScan>
 801f32c:	9501      	str	r5, [sp, #4]
 801f32e:	9b01      	ldr	r3, [sp, #4]
 801f330:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 801f334:	d306      	bcc.n	801f344 <BnrgmTransmitFsm+0xe8>
 801f336:	f7fb fd2d 	bl	801ad94 <BnrgmTransmitStartAdv>
 801f33a:	b9c8      	cbnz	r0, 801f370 <BnrgmTransmitFsm+0x114>
 801f33c:	2302      	movs	r3, #2
 801f33e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
 801f342:	e7c6      	b.n	801f2d2 <BnrgmTransmitFsm+0x76>
 801f344:	9b01      	ldr	r3, [sp, #4]
 801f346:	3301      	adds	r3, #1
 801f348:	9301      	str	r3, [sp, #4]
 801f34a:	9b01      	ldr	r3, [sp, #4]
 801f34c:	3301      	adds	r3, #1
 801f34e:	9301      	str	r3, [sp, #4]
 801f350:	e7ed      	b.n	801f32e <BnrgmTransmitFsm+0xd2>
 801f352:	2d03      	cmp	r5, #3
 801f354:	d1bd      	bne.n	801f2d2 <BnrgmTransmitFsm+0x76>
 801f356:	b002      	add	sp, #8
 801f358:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f35c:	f7f9 b870 	b.w	8018440 <MoblePalBluetoothModeStopScan>
 801f360:	2d02      	cmp	r5, #2
 801f362:	d1b6      	bne.n	801f2d2 <BnrgmTransmitFsm+0x76>
 801f364:	f7f8 ffd8 	bl	8018318 <MoblePalBluetoothModeStopAdv>
 801f368:	f8c4 6180 	str.w	r6, [r4, #384]	; 0x180
 801f36c:	f7fb fb3a 	bl	801a9e4 <BnrgmTransmitQueueAlign>
 801f370:	2300      	movs	r3, #0
 801f372:	e7e4      	b.n	801f33e <BnrgmTransmitFsm+0xe2>
 801f374:	2d00      	cmp	r5, #0
 801f376:	d1ac      	bne.n	801f2d2 <BnrgmTransmitFsm+0x76>
 801f378:	2802      	cmp	r0, #2
 801f37a:	d124      	bne.n	801f3c6 <BnrgmTransmitFsm+0x16a>
 801f37c:	f7ff ff62 	bl	801f244 <BnrgmProvision_UnprovisionedGetState>
 801f380:	2807      	cmp	r0, #7
 801f382:	4b4a      	ldr	r3, [pc, #296]	; (801f4ac <BnrgmTransmitFsm+0x250>)
 801f384:	d109      	bne.n	801f39a <BnrgmTransmitFsm+0x13e>
 801f386:	f893 2725 	ldrb.w	r2, [r3, #1829]	; 0x725
 801f38a:	2a02      	cmp	r2, #2
 801f38c:	d005      	beq.n	801f39a <BnrgmTransmitFsm+0x13e>
 801f38e:	f8d3 26f0 	ldr.w	r2, [r3, #1776]	; 0x6f0
 801f392:	f892 21f8 	ldrb.w	r2, [r2, #504]	; 0x1f8
 801f396:	2a01      	cmp	r2, #1
 801f398:	d00f      	beq.n	801f3ba <BnrgmTransmitFsm+0x15e>
 801f39a:	f04f 1214 	mov.w	r2, #1310740	; 0x140014
 801f39e:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
 801f3a2:	2201      	movs	r2, #1
 801f3a4:	f883 2a11 	strb.w	r2, [r3, #2577]	; 0xa11
 801f3a8:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
 801f3ac:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
 801f3b0:	f7fb fd02 	bl	801adb8 <BnrgmTransmitStartScan>
 801f3b4:	b9c0      	cbnz	r0, 801f3e8 <BnrgmTransmitFsm+0x18c>
 801f3b6:	2304      	movs	r3, #4
 801f3b8:	e7c1      	b.n	801f33e <BnrgmTransmitFsm+0xe2>
 801f3ba:	4a3d      	ldr	r2, [pc, #244]	; (801f4b0 <BnrgmTransmitFsm+0x254>)
 801f3bc:	f8c4 2184 	str.w	r2, [r4, #388]	; 0x184
 801f3c0:	f883 5a11 	strb.w	r5, [r3, #2577]	; 0xa11
 801f3c4:	e7f0      	b.n	801f3a8 <BnrgmTransmitFsm+0x14c>
 801f3c6:	b948      	cbnz	r0, 801f3dc <BnrgmTransmitFsm+0x180>
 801f3c8:	4b3a      	ldr	r3, [pc, #232]	; (801f4b4 <BnrgmTransmitFsm+0x258>)
 801f3ca:	f8d3 2350 	ldr.w	r2, [r3, #848]	; 0x350
 801f3ce:	f24a 0327 	movw	r3, #40999	; 0xa027
 801f3d2:	429a      	cmp	r2, r3
 801f3d4:	d904      	bls.n	801f3e0 <BnrgmTransmitFsm+0x184>
 801f3d6:	f04f 1314 	mov.w	r3, #1310740	; 0x140014
 801f3da:	e002      	b.n	801f3e2 <BnrgmTransmitFsm+0x186>
 801f3dc:	2801      	cmp	r0, #1
 801f3de:	d0fa      	beq.n	801f3d6 <BnrgmTransmitFsm+0x17a>
 801f3e0:	2300      	movs	r3, #0
 801f3e2:	f8c4 3184 	str.w	r3, [r4, #388]	; 0x184
 801f3e6:	e7df      	b.n	801f3a8 <BnrgmTransmitFsm+0x14c>
 801f3e8:	2308      	movs	r3, #8
 801f3ea:	e7a8      	b.n	801f33e <BnrgmTransmitFsm+0xe2>
 801f3ec:	b9dd      	cbnz	r5, 801f426 <BnrgmTransmitFsm+0x1ca>
 801f3ee:	f894 3166 	ldrb.w	r3, [r4, #358]	; 0x166
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	f43f af6d 	beq.w	801f2d2 <BnrgmTransmitFsm+0x76>
 801f3f8:	f7e8 fd34 	bl	8007e64 <HAL_GetTick>
 801f3fc:	f894 3167 	ldrb.w	r3, [r4, #359]	; 0x167
 801f400:	b93b      	cbnz	r3, 801f412 <BnrgmTransmitFsm+0x1b6>
 801f402:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 801f406:	f8b4 3178 	ldrh.w	r3, [r4, #376]	; 0x178
 801f40a:	1a80      	subs	r0, r0, r2
 801f40c:	4283      	cmp	r3, r0
 801f40e:	f63f af60 	bhi.w	801f2d2 <BnrgmTransmitFsm+0x76>
 801f412:	f7fb fa95 	bl	801a940 <BnrgmTransmitQueuePrepNextItem>
 801f416:	f894 3168 	ldrb.w	r3, [r4, #360]	; 0x168
 801f41a:	4318      	orrs	r0, r3
 801f41c:	b2c0      	uxtb	r0, r0
 801f41e:	2800      	cmp	r0, #0
 801f420:	d1a6      	bne.n	801f370 <BnrgmTransmitFsm+0x114>
 801f422:	2301      	movs	r3, #1
 801f424:	e78b      	b.n	801f33e <BnrgmTransmitFsm+0xe2>
 801f426:	2d04      	cmp	r5, #4
 801f428:	d119      	bne.n	801f45e <BnrgmTransmitFsm+0x202>
 801f42a:	2801      	cmp	r0, #1
 801f42c:	f47f af51 	bne.w	801f2d2 <BnrgmTransmitFsm+0x76>
 801f430:	4b20      	ldr	r3, [pc, #128]	; (801f4b4 <BnrgmTransmitFsm+0x258>)
 801f432:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f436:	f8d3 3350 	ldr.w	r3, [r3, #848]	; 0x350
 801f43a:	fbb3 f3f2 	udiv	r3, r3, r2
 801f43e:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
 801f442:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
 801f446:	320c      	adds	r2, #12
 801f448:	b29b      	uxth	r3, r3
 801f44a:	429a      	cmp	r2, r3
 801f44c:	f4bf af41 	bcs.w	801f2d2 <BnrgmTransmitFsm+0x76>
 801f450:	f7e8 fd08 	bl	8007e64 <HAL_GetTick>
 801f454:	3003      	adds	r0, #3
 801f456:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
 801f45a:	2306      	movs	r3, #6
 801f45c:	e76f      	b.n	801f33e <BnrgmTransmitFsm+0xe2>
 801f45e:	2d03      	cmp	r5, #3
 801f460:	f47f af37 	bne.w	801f2d2 <BnrgmTransmitFsm+0x76>
 801f464:	f7f8 ffec 	bl	8018440 <MoblePalBluetoothModeStopScan>
 801f468:	e782      	b.n	801f370 <BnrgmTransmitFsm+0x114>
 801f46a:	2d06      	cmp	r5, #6
 801f46c:	d0fa      	beq.n	801f464 <BnrgmTransmitFsm+0x208>
 801f46e:	f7e8 fcf9 	bl	8007e64 <HAL_GetTick>
 801f472:	f8d4 3170 	ldr.w	r3, [r4, #368]	; 0x170
 801f476:	f503 5320 	add.w	r3, r3, #10240	; 0x2800
 801f47a:	4298      	cmp	r0, r3
 801f47c:	f4bf af78 	bcs.w	801f370 <BnrgmTransmitFsm+0x114>
 801f480:	e727      	b.n	801f2d2 <BnrgmTransmitFsm+0x76>
 801f482:	f7e8 fcef 	bl	8007e64 <HAL_GetTick>
 801f486:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 801f48a:	4298      	cmp	r0, r3
 801f48c:	f4ff af21 	bcc.w	801f2d2 <BnrgmTransmitFsm+0x76>
 801f490:	2000      	movs	r0, #0
 801f492:	f7f6 f87b 	bl	801558c <aci_hal_set_radio_activity_mask>
 801f496:	4b05      	ldr	r3, [pc, #20]	; (801f4ac <BnrgmTransmitFsm+0x250>)
 801f498:	2500      	movs	r5, #0
 801f49a:	f883 5a10 	strb.w	r5, [r3, #2576]	; 0xa10
 801f49e:	f7f8 ffcf 	bl	8018440 <MoblePalBluetoothModeStopScan>
 801f4a2:	f884 517a 	strb.w	r5, [r4, #378]	; 0x17a
 801f4a6:	e714      	b.n	801f2d2 <BnrgmTransmitFsm+0x76>
 801f4a8:	20003f64 	.word	0x20003f64
 801f4ac:	20002514 	.word	0x20002514
 801f4b0:	28000014 	.word	0x28000014
 801f4b4:	2000141c 	.word	0x2000141c

0801f4b8 <MobleTransmitInit>:
 801f4b8:	b538      	push	{r3, r4, r5, lr}
 801f4ba:	4c0c      	ldr	r4, [pc, #48]	; (801f4ec <MobleTransmitInit+0x34>)
 801f4bc:	4b0c      	ldr	r3, [pc, #48]	; (801f4f0 <MobleTransmitInit+0x38>)
 801f4be:	f8a4 0a12 	strh.w	r0, [r4, #2578]	; 0xa12
 801f4c2:	2809      	cmp	r0, #9
 801f4c4:	bf86      	itte	hi
 801f4c6:	380a      	subhi	r0, #10
 801f4c8:	b280      	uxthhi	r0, r0
 801f4ca:	2000      	movls	r0, #0
 801f4cc:	f8a3 0178 	strh.w	r0, [r3, #376]	; 0x178
 801f4d0:	2500      	movs	r5, #0
 801f4d2:	2001      	movs	r0, #1
 801f4d4:	f884 5a10 	strb.w	r5, [r4, #2576]	; 0xa10
 801f4d8:	f7ff fec0 	bl	801f25c <BnrgmTransmitFsm>
 801f4dc:	4b05      	ldr	r3, [pc, #20]	; (801f4f4 <MobleTransmitInit+0x3c>)
 801f4de:	4a06      	ldr	r2, [pc, #24]	; (801f4f8 <MobleTransmitInit+0x40>)
 801f4e0:	f8c3 234c 	str.w	r2, [r3, #844]	; 0x34c
 801f4e4:	f884 5a11 	strb.w	r5, [r4, #2577]	; 0xa11
 801f4e8:	bd38      	pop	{r3, r4, r5, pc}
 801f4ea:	bf00      	nop
 801f4ec:	20002514 	.word	0x20002514
 801f4f0:	20003f64 	.word	0x20003f64
 801f4f4:	2000141c 	.word	0x2000141c
 801f4f8:	0801f54d 	.word	0x0801f54d

0801f4fc <MobleTransmitSuspendAll>:
 801f4fc:	b508      	push	{r3, lr}
 801f4fe:	4b06      	ldr	r3, [pc, #24]	; (801f518 <MobleTransmitSuspendAll+0x1c>)
 801f500:	f240 1201 	movw	r2, #257	; 0x101
 801f504:	f8a3 2168 	strh.w	r2, [r3, #360]	; 0x168
 801f508:	2002      	movs	r0, #2
 801f50a:	f7ff fea7 	bl	801f25c <BnrgmTransmitFsm>
 801f50e:	2003      	movs	r0, #3
 801f510:	f7ff fea4 	bl	801f25c <BnrgmTransmitFsm>
 801f514:	2000      	movs	r0, #0
 801f516:	bd08      	pop	{r3, pc}
 801f518:	20003f64 	.word	0x20003f64

0801f51c <MobleTransmitResumeAll>:
 801f51c:	b510      	push	{r4, lr}
 801f51e:	4b04      	ldr	r3, [pc, #16]	; (801f530 <MobleTransmitResumeAll+0x14>)
 801f520:	2400      	movs	r4, #0
 801f522:	f8a3 4168 	strh.w	r4, [r3, #360]	; 0x168
 801f526:	2003      	movs	r0, #3
 801f528:	f7ff fe98 	bl	801f25c <BnrgmTransmitFsm>
 801f52c:	4620      	mov	r0, r4
 801f52e:	bd10      	pop	{r4, pc}
 801f530:	20003f64 	.word	0x20003f64

0801f534 <BnrgmTransmitSetAutoScanState>:
 801f534:	4b04      	ldr	r3, [pc, #16]	; (801f548 <BnrgmTransmitSetAutoScanState+0x14>)
 801f536:	2801      	cmp	r0, #1
 801f538:	f883 016a 	strb.w	r0, [r3, #362]	; 0x16a
 801f53c:	d002      	beq.n	801f544 <BnrgmTransmitSetAutoScanState+0x10>
 801f53e:	2003      	movs	r0, #3
 801f540:	f7ff be8c 	b.w	801f25c <BnrgmTransmitFsm>
 801f544:	4770      	bx	lr
 801f546:	bf00      	nop
 801f548:	20003f64 	.word	0x20003f64

0801f54c <BnrgmTransmitRadioActivityEndCallback>:
 801f54c:	b570      	push	{r4, r5, r6, lr}
 801f54e:	4c13      	ldr	r4, [pc, #76]	; (801f59c <BnrgmTransmitRadioActivityEndCallback+0x50>)
 801f550:	2902      	cmp	r1, #2
 801f552:	bf08      	it	eq
 801f554:	f8c4 217c 	streq.w	r2, [r4, #380]	; 0x17c
 801f558:	2801      	cmp	r0, #1
 801f55a:	460d      	mov	r5, r1
 801f55c:	d004      	beq.n	801f568 <BnrgmTransmitRadioActivityEndCallback+0x1c>
 801f55e:	2802      	cmp	r0, #2
 801f560:	d014      	beq.n	801f58c <BnrgmTransmitRadioActivityEndCallback+0x40>
 801f562:	f884 517b 	strb.w	r5, [r4, #379]	; 0x17b
 801f566:	bd70      	pop	{r4, r5, r6, pc}
 801f568:	f894 617a 	ldrb.w	r6, [r4, #378]	; 0x17a
 801f56c:	2e02      	cmp	r6, #2
 801f56e:	d1f8      	bne.n	801f562 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f570:	f8d4 0160 	ldr.w	r0, [r4, #352]	; 0x160
 801f574:	f7fb f9cc 	bl	801a910 <BnrgmTransmitQueDecreasePktCount>
 801f578:	4630      	mov	r0, r6
 801f57a:	f7ff fe6f 	bl	801f25c <BnrgmTransmitFsm>
 801f57e:	2000      	movs	r0, #0
 801f580:	f7ff fe6c 	bl	801f25c <BnrgmTransmitFsm>
 801f584:	2000      	movs	r0, #0
 801f586:	f7ff fe69 	bl	801f25c <BnrgmTransmitFsm>
 801f58a:	e7ea      	b.n	801f562 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f58c:	f894 317b 	ldrb.w	r3, [r4, #379]	; 0x17b
 801f590:	2b02      	cmp	r3, #2
 801f592:	d1e6      	bne.n	801f562 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f594:	2901      	cmp	r1, #1
 801f596:	d0e4      	beq.n	801f562 <BnrgmTransmitRadioActivityEndCallback+0x16>
 801f598:	2004      	movs	r0, #4
 801f59a:	e7f4      	b.n	801f586 <BnrgmTransmitRadioActivityEndCallback+0x3a>
 801f59c:	20003f64 	.word	0x20003f64

0801f5a0 <BnrgmTransmitProcess>:
 801f5a0:	2000      	movs	r0, #0
 801f5a2:	f7ff be5b 	b.w	801f25c <BnrgmTransmitFsm>

0801f5a6 <BLEMesh_StopAdvScan>:
 801f5a6:	b508      	push	{r3, lr}
 801f5a8:	2002      	movs	r0, #2
 801f5aa:	f7ff fe57 	bl	801f25c <BnrgmTransmitFsm>
 801f5ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f5b2:	2003      	movs	r0, #3
 801f5b4:	f7ff be52 	b.w	801f25c <BnrgmTransmitFsm>

0801f5b8 <MoblePalBluetoothGracefulReset>:
 801f5b8:	b510      	push	{r4, lr}
 801f5ba:	4c16      	ldr	r4, [pc, #88]	; (801f614 <MoblePalBluetoothGracefulReset+0x5c>)
 801f5bc:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801f5c0:	f013 0f3c 	tst.w	r3, #60	; 0x3c
 801f5c4:	d010      	beq.n	801f5e8 <MoblePalBluetoothGracefulReset+0x30>
 801f5c6:	2301      	movs	r3, #1
 801f5c8:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
 801f5cc:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 801f5d0:	f7e8 fc48 	bl	8007e64 <HAL_GetTick>
 801f5d4:	f8d4 3350 	ldr.w	r3, [r4, #848]	; 0x350
 801f5d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801f5dc:	fbb3 f3f2 	udiv	r3, r3, r2
 801f5e0:	4403      	add	r3, r0
 801f5e2:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
 801f5e6:	bd10      	pop	{r4, pc}
 801f5e8:	f7fb fd1c 	bl	801b024 <MoblePalBluetoothFreeAllNotifications>
 801f5ec:	f8d4 3374 	ldr.w	r3, [r4, #884]	; 0x374
 801f5f0:	b103      	cbz	r3, 801f5f4 <MoblePalBluetoothGracefulReset+0x3c>
 801f5f2:	4798      	blx	r3
 801f5f4:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801f5f8:	b10b      	cbz	r3, 801f5fe <MoblePalBluetoothGracefulReset+0x46>
 801f5fa:	f7ff ffd4 	bl	801f5a6 <BLEMesh_StopAdvScan>
 801f5fe:	2300      	movs	r3, #0
 801f600:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 801f604:	f7ff fcb8 	bl	801ef78 <BLEMesh_IsUnprovisioned>
 801f608:	2801      	cmp	r0, #1
 801f60a:	bf04      	itt	eq
 801f60c:	4b02      	ldreq	r3, [pc, #8]	; (801f618 <MoblePalBluetoothGracefulReset+0x60>)
 801f60e:	7018      	strbeq	r0, [r3, #0]
 801f610:	e7e9      	b.n	801f5e6 <MoblePalBluetoothGracefulReset+0x2e>
 801f612:	bf00      	nop
 801f614:	2000141c 	.word	0x2000141c
 801f618:	20004443 	.word	0x20004443

0801f61c <HCI_Event_CB>:
 801f61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f620:	7803      	ldrb	r3, [r0, #0]
 801f622:	2b04      	cmp	r3, #4
 801f624:	b08b      	sub	sp, #44	; 0x2c
 801f626:	4604      	mov	r4, r0
 801f628:	d161      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f62a:	7843      	ldrb	r3, [r0, #1]
 801f62c:	2b3e      	cmp	r3, #62	; 0x3e
 801f62e:	d025      	beq.n	801f67c <HCI_Event_CB+0x60>
 801f630:	2bff      	cmp	r3, #255	; 0xff
 801f632:	f000 8099 	beq.w	801f768 <HCI_Event_CB+0x14c>
 801f636:	2b05      	cmp	r3, #5
 801f638:	d159      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f63a:	4c7d      	ldr	r4, [pc, #500]	; (801f830 <HCI_Event_CB+0x214>)
 801f63c:	f8d4 3354 	ldr.w	r3, [r4, #852]	; 0x354
 801f640:	f023 030c 	bic.w	r3, r3, #12
 801f644:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
 801f648:	f7fb fcec 	bl	801b024 <MoblePalBluetoothFreeAllNotifications>
 801f64c:	4b79      	ldr	r3, [pc, #484]	; (801f834 <HCI_Event_CB+0x218>)
 801f64e:	685b      	ldr	r3, [r3, #4]
 801f650:	68db      	ldr	r3, [r3, #12]
 801f652:	4798      	blx	r3
 801f654:	f8d4 3358 	ldr.w	r3, [r4, #856]	; 0x358
 801f658:	b113      	cbz	r3, 801f660 <HCI_Event_CB+0x44>
 801f65a:	f8d4 036c 	ldr.w	r0, [r4, #876]	; 0x36c
 801f65e:	4798      	blx	r3
 801f660:	f894 3378 	ldrb.w	r3, [r4, #888]	; 0x378
 801f664:	2b01      	cmp	r3, #1
 801f666:	d142      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f668:	2300      	movs	r3, #0
 801f66a:	f884 3378 	strb.w	r3, [r4, #888]	; 0x378
 801f66e:	f884 3380 	strb.w	r3, [r4, #896]	; 0x380
 801f672:	b00b      	add	sp, #44	; 0x2c
 801f674:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f678:	f7ff bf9e 	b.w	801f5b8 <MoblePalBluetoothGracefulReset>
 801f67c:	78c3      	ldrb	r3, [r0, #3]
 801f67e:	2b02      	cmp	r3, #2
 801f680:	d02a      	beq.n	801f6d8 <HCI_Event_CB+0xbc>
 801f682:	2b03      	cmp	r3, #3
 801f684:	d05f      	beq.n	801f746 <HCI_Event_CB+0x12a>
 801f686:	2b01      	cmp	r3, #1
 801f688:	d131      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f68a:	f8b0 300f 	ldrh.w	r3, [r0, #15]
 801f68e:	4d68      	ldr	r5, [pc, #416]	; (801f830 <HCI_Event_CB+0x214>)
 801f690:	f240 42e2 	movw	r2, #1250	; 0x4e2
 801f694:	4353      	muls	r3, r2
 801f696:	f8c5 3350 	str.w	r3, [r5, #848]	; 0x350
 801f69a:	4b66      	ldr	r3, [pc, #408]	; (801f834 <HCI_Event_CB+0x218>)
 801f69c:	685b      	ldr	r3, [r3, #4]
 801f69e:	689b      	ldr	r3, [r3, #8]
 801f6a0:	4798      	blx	r3
 801f6a2:	f8d5 3354 	ldr.w	r3, [r5, #852]	; 0x354
 801f6a6:	79a1      	ldrb	r1, [r4, #6]
 801f6a8:	7962      	ldrb	r2, [r4, #5]
 801f6aa:	f023 0301 	bic.w	r3, r3, #1
 801f6ae:	f043 0304 	orr.w	r3, r3, #4
 801f6b2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 801f6b6:	f8c5 3354 	str.w	r3, [r5, #852]	; 0x354
 801f6ba:	f8a5 2382 	strh.w	r2, [r5, #898]	; 0x382
 801f6be:	f7e8 fbd1 	bl	8007e64 <HAL_GetTick>
 801f6c2:	f8d5 3358 	ldr.w	r3, [r5, #856]	; 0x358
 801f6c6:	f8c5 0948 	str.w	r0, [r5, #2376]	; 0x948
 801f6ca:	b183      	cbz	r3, 801f6ee <HCI_Event_CB+0xd2>
 801f6cc:	f8d5 036c 	ldr.w	r0, [r5, #876]	; 0x36c
 801f6d0:	b00b      	add	sp, #44	; 0x2c
 801f6d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6d6:	4718      	bx	r3
 801f6d8:	f8df 9154 	ldr.w	r9, [pc, #340]	; 801f830 <HCI_Event_CB+0x214>
 801f6dc:	f8d9 3370 	ldr.w	r3, [r9, #880]	; 0x370
 801f6e0:	b12b      	cbz	r3, 801f6ee <HCI_Event_CB+0xd2>
 801f6e2:	1dc7      	adds	r7, r0, #7
 801f6e4:	f04f 0800 	mov.w	r8, #0
 801f6e8:	7923      	ldrb	r3, [r4, #4]
 801f6ea:	4543      	cmp	r3, r8
 801f6ec:	dc02      	bgt.n	801f6f4 <HCI_Event_CB+0xd8>
 801f6ee:	b00b      	add	sp, #44	; 0x2c
 801f6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f6f4:	79bb      	ldrb	r3, [r7, #6]
 801f6f6:	1dbe      	adds	r6, r7, #6
 801f6f8:	4433      	add	r3, r6
 801f6fa:	f993 b001 	ldrsb.w	fp, [r3, #1]
 801f6fe:	2300      	movs	r3, #0
 801f700:	9303      	str	r3, [sp, #12]
 801f702:	9a03      	ldr	r2, [sp, #12]
 801f704:	79bb      	ldrb	r3, [r7, #6]
 801f706:	4293      	cmp	r3, r2
 801f708:	d803      	bhi.n	801f712 <HCI_Event_CB+0xf6>
 801f70a:	f108 0801 	add.w	r8, r8, #1
 801f70e:	370e      	adds	r7, #14
 801f710:	e7ea      	b.n	801f6e8 <HCI_Event_CB+0xcc>
 801f712:	9b03      	ldr	r3, [sp, #12]
 801f714:	f103 0a01 	add.w	sl, r3, #1
 801f718:	eb06 020a 	add.w	r2, r6, sl
 801f71c:	f816 300a 	ldrb.w	r3, [r6, sl]
 801f720:	2b00      	cmp	r3, #0
 801f722:	d0f2      	beq.n	801f70a <HCI_Event_CB+0xee>
 801f724:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f728:	3301      	adds	r3, #1
 801f72a:	e9cd b000 	strd	fp, r0, [sp]
 801f72e:	b2db      	uxtb	r3, r3
 801f730:	e9d9 05db 	ldrd	r0, r5, [r9, #876]	; 0x36c
 801f734:	4639      	mov	r1, r7
 801f736:	47a8      	blx	r5
 801f738:	f816 300a 	ldrb.w	r3, [r6, sl]
 801f73c:	9d03      	ldr	r5, [sp, #12]
 801f73e:	3301      	adds	r3, #1
 801f740:	441d      	add	r5, r3
 801f742:	b2eb      	uxtb	r3, r5
 801f744:	e7dc      	b.n	801f700 <HCI_Event_CB+0xe4>
 801f746:	4b3a      	ldr	r3, [pc, #232]	; (801f830 <HCI_Event_CB+0x214>)
 801f748:	f8b0 2005 	ldrh.w	r2, [r0, #5]
 801f74c:	f8b3 3382 	ldrh.w	r3, [r3, #898]	; 0x382
 801f750:	429a      	cmp	r2, r3
 801f752:	d1cc      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f754:	7903      	ldrb	r3, [r0, #4]
 801f756:	2b00      	cmp	r3, #0
 801f758:	d1c9      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f75a:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 801f75e:	b00b      	add	sp, #44	; 0x2c
 801f760:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f764:	f7f8 bba2 	b.w	8017eac <MoblePalBluetoothSetConnectionInterval>
 801f768:	f8b0 3003 	ldrh.w	r3, [r0, #3]
 801f76c:	f640 4214 	movw	r2, #3092	; 0xc14
 801f770:	4293      	cmp	r3, r2
 801f772:	d021      	beq.n	801f7b8 <HCI_Event_CB+0x19c>
 801f774:	d818      	bhi.n	801f7a8 <HCI_Event_CB+0x18c>
 801f776:	2b04      	cmp	r3, #4
 801f778:	d048      	beq.n	801f80c <HCI_Event_CB+0x1f0>
 801f77a:	f640 4201 	movw	r2, #3073	; 0xc01
 801f77e:	4293      	cmp	r3, r2
 801f780:	d1b5      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f782:	482b      	ldr	r0, [pc, #172]	; (801f830 <HCI_Event_CB+0x214>)
 801f784:	f8d0 5348 	ldr.w	r5, [r0, #840]	; 0x348
 801f788:	2d00      	cmp	r5, #0
 801f78a:	d0b0      	beq.n	801f6ee <HCI_Event_CB+0xd2>
 801f78c:	f8b4 300b 	ldrh.w	r3, [r4, #11]
 801f790:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801f794:	f8d0 036c 	ldr.w	r0, [r0, #876]	; 0x36c
 801f798:	b2db      	uxtb	r3, r3
 801f79a:	f104 020d 	add.w	r2, r4, #13
 801f79e:	46ac      	mov	ip, r5
 801f7a0:	b00b      	add	sp, #44	; 0x2c
 801f7a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7a6:	4760      	bx	ip
 801f7a8:	f640 4216 	movw	r2, #3094	; 0xc16
 801f7ac:	4293      	cmp	r3, r2
 801f7ae:	d19e      	bne.n	801f6ee <HCI_Event_CB+0xd2>
 801f7b0:	4b21      	ldr	r3, [pc, #132]	; (801f838 <HCI_Event_CB+0x21c>)
 801f7b2:	2201      	movs	r2, #1
 801f7b4:	729a      	strb	r2, [r3, #10]
 801f7b6:	e79a      	b.n	801f6ee <HCI_Event_CB+0xd2>
 801f7b8:	4d1d      	ldr	r5, [pc, #116]	; (801f830 <HCI_Event_CB+0x214>)
 801f7ba:	f8d5 7344 	ldr.w	r7, [r5, #836]	; 0x344
 801f7be:	b1f7      	cbz	r7, 801f7fe <HCI_Event_CB+0x1e2>
 801f7c0:	2314      	movs	r3, #20
 801f7c2:	f88d 3013 	strb.w	r3, [sp, #19]
 801f7c6:	f8b0 3009 	ldrh.w	r3, [r0, #9]
 801f7ca:	b1c3      	cbz	r3, 801f7fe <HCI_Event_CB+0x1e2>
 801f7cc:	ae05      	add	r6, sp, #20
 801f7ce:	f8b0 1007 	ldrh.w	r1, [r0, #7]
 801f7d2:	f8d5 036c 	ldr.w	r0, [r5, #876]	; 0x36c
 801f7d6:	f10d 0313 	add.w	r3, sp, #19
 801f7da:	4632      	mov	r2, r6
 801f7dc:	47b8      	blx	r7
 801f7de:	2801      	cmp	r0, #1
 801f7e0:	d80d      	bhi.n	801f7fe <HCI_Event_CB+0x1e2>
 801f7e2:	f8b4 1007 	ldrh.w	r1, [r4, #7]
 801f7e6:	9600      	str	r6, [sp, #0]
 801f7e8:	3901      	subs	r1, #1
 801f7ea:	f89d 3013 	ldrb.w	r3, [sp, #19]
 801f7ee:	f8b5 0340 	ldrh.w	r0, [r5, #832]	; 0x340
 801f7f2:	2200      	movs	r2, #0
 801f7f4:	b289      	uxth	r1, r1
 801f7f6:	f7f5 fada 	bl	8014dae <aci_gatt_update_char_value>
 801f7fa:	2893      	cmp	r0, #147	; 0x93
 801f7fc:	d0f1      	beq.n	801f7e2 <HCI_Event_CB+0x1c6>
 801f7fe:	f8b4 0005 	ldrh.w	r0, [r4, #5]
 801f802:	b00b      	add	sp, #44	; 0x2c
 801f804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f808:	f7f5 bc37 	b.w	801507a <aci_gatt_allow_read>
 801f80c:	4b0b      	ldr	r3, [pc, #44]	; (801f83c <HCI_Event_CB+0x220>)
 801f80e:	f8d0 2007 	ldr.w	r2, [r0, #7]
 801f812:	f8c3 2a14 	str.w	r2, [r3, #2580]	; 0xa14
 801f816:	4b06      	ldr	r3, [pc, #24]	; (801f830 <HCI_Event_CB+0x214>)
 801f818:	f8d3 334c 	ldr.w	r3, [r3, #844]	; 0x34c
 801f81c:	2b00      	cmp	r3, #0
 801f81e:	f43f af66 	beq.w	801f6ee <HCI_Event_CB+0xd2>
 801f822:	7981      	ldrb	r1, [r0, #6]
 801f824:	7940      	ldrb	r0, [r0, #5]
 801f826:	b00b      	add	sp, #44	; 0x2c
 801f828:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f82c:	4718      	bx	r3
 801f82e:	bf00      	nop
 801f830:	2000141c 	.word	0x2000141c
 801f834:	20000324 	.word	0x20000324
 801f838:	20000008 	.word	0x20000008
 801f83c:	20002514 	.word	0x20002514

0801f840 <BnrgmProxy_SarTimeoutCallback>:
 801f840:	f7ff beba 	b.w	801f5b8 <MoblePalBluetoothGracefulReset>

0801f844 <BnrgmStackDummyProxyModeTimerCallback>:
 801f844:	b508      	push	{r3, lr}
 801f846:	2300      	movs	r3, #0
 801f848:	f881 32ad 	strb.w	r3, [r1, #685]	; 0x2ad
 801f84c:	f8d1 02b0 	ldr.w	r0, [r1, #688]	; 0x2b0
 801f850:	f7f8 fa28 	bl	8017ca4 <MoblePalTimerDestroy>
 801f854:	4b06      	ldr	r3, [pc, #24]	; (801f870 <BnrgmStackDummyProxyModeTimerCallback+0x2c>)
 801f856:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801f85a:	2b02      	cmp	r3, #2
 801f85c:	d107      	bne.n	801f86e <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801f85e:	f7f8 fbad 	bl	8017fbc <MoblePalBluetoothGetConnectionState>
 801f862:	2802      	cmp	r0, #2
 801f864:	d003      	beq.n	801f86e <BnrgmStackDummyProxyModeTimerCallback+0x2a>
 801f866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801f86a:	f7ff bea5 	b.w	801f5b8 <MoblePalBluetoothGracefulReset>
 801f86e:	bd08      	pop	{r3, pc}
 801f870:	20000324 	.word	0x20000324

0801f874 <MobleProvision_CreateCommand>:
 801f874:	b570      	push	{r4, r5, r6, lr}
 801f876:	9e04      	ldr	r6, [sp, #16]
 801f878:	1c54      	adds	r4, r2, #1
 801f87a:	42b4      	cmp	r4, r6
 801f87c:	d806      	bhi.n	801f88c <MobleProvision_CreateCommand+0x18>
 801f87e:	7018      	strb	r0, [r3, #0]
 801f880:	b112      	cbz	r2, 801f888 <MobleProvision_CreateCommand+0x14>
 801f882:	1c58      	adds	r0, r3, #1
 801f884:	f009 fffc 	bl	8029880 <memmove>
 801f888:	b2e0      	uxtb	r0, r4
 801f88a:	bd70      	pop	{r4, r5, r6, pc}
 801f88c:	2000      	movs	r0, #0
 801f88e:	e7fc      	b.n	801f88a <MobleProvision_CreateCommand+0x16>

0801f890 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>:
 801f890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f894:	4c93      	ldr	r4, [pc, #588]	; (801fae4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x254>)
 801f896:	f8d4 56f0 	ldr.w	r5, [r4, #1776]	; 0x6f0
 801f89a:	b0c7      	sub	sp, #284	; 0x11c
 801f89c:	4606      	mov	r6, r0
 801f89e:	4628      	mov	r0, r5
 801f8a0:	4689      	mov	r9, r1
 801f8a2:	4690      	mov	r8, r2
 801f8a4:	f7ff fb56 	bl	801ef54 <MobleProvisionGetRole>
 801f8a8:	4607      	mov	r7, r0
 801f8aa:	2800      	cmp	r0, #0
 801f8ac:	f040 8212 	bne.w	801fcd4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x444>
 801f8b0:	f8d4 ca18 	ldr.w	ip, [r4, #2584]	; 0xa18
 801f8b4:	f8c8 0000 	str.w	r0, [r8]
 801f8b8:	f89c 3000 	ldrb.w	r3, [ip]
 801f8bc:	2b0a      	cmp	r3, #10
 801f8be:	d821      	bhi.n	801f904 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801f8c0:	e8df f013 	tbh	[pc, r3, lsl #1]
 801f8c4:	0020000b 	.word	0x0020000b
 801f8c8:	004c0026 	.word	0x004c0026
 801f8cc:	00200020 	.word	0x00200020
 801f8d0:	002000b1 	.word	0x002000b1
 801f8d4:	00200108 	.word	0x00200108
 801f8d8:	0114      	.short	0x0114
 801f8da:	f895 3294 	ldrb.w	r3, [r5, #660]	; 0x294
 801f8de:	f88d 30d8 	strb.w	r3, [sp, #216]	; 0xd8
 801f8e2:	2201      	movs	r2, #1
 801f8e4:	4633      	mov	r3, r6
 801f8e6:	f8cd 9000 	str.w	r9, [sp]
 801f8ea:	a936      	add	r1, sp, #216	; 0xd8
 801f8ec:	2000      	movs	r0, #0
 801f8ee:	f7ff ffc1 	bl	801f874 <MobleProvision_CreateCommand>
 801f8f2:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	; 0x6f0
 801f8f6:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801f8fa:	f892 2294 	ldrb.w	r2, [r2, #660]	; 0x294
 801f8fe:	f8c8 0000 	str.w	r0, [r8]
 801f902:	711a      	strb	r2, [r3, #4]
 801f904:	f8d8 3000 	ldr.w	r3, [r8]
 801f908:	2b00      	cmp	r3, #0
 801f90a:	bf08      	it	eq
 801f90c:	2702      	moveq	r7, #2
 801f90e:	e161      	b.n	801fbd4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x344>
 801f910:	2300      	movs	r3, #0
 801f912:	9336      	str	r3, [sp, #216]	; 0xd8
 801f914:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
 801f918:	f895 31fa 	ldrb.w	r3, [r5, #506]	; 0x1fa
 801f91c:	f88d 30d9 	strb.w	r3, [sp, #217]	; 0xd9
 801f920:	f895 31fb 	ldrb.w	r3, [r5, #507]	; 0x1fb
 801f924:	f88d 30da 	strb.w	r3, [sp, #218]	; 0xda
 801f928:	f895 31fc 	ldrb.w	r3, [r5, #508]	; 0x1fc
 801f92c:	f88d 30db 	strb.w	r3, [sp, #219]	; 0xdb
 801f930:	f895 31fd 	ldrb.w	r3, [r5, #509]	; 0x1fd
 801f934:	9836      	ldr	r0, [sp, #216]	; 0xd8
 801f936:	f88d 30dc 	strb.w	r3, [sp, #220]	; 0xdc
 801f93a:	f8cc 0010 	str.w	r0, [ip, #16]
 801f93e:	f89d 30dc 	ldrb.w	r3, [sp, #220]	; 0xdc
 801f942:	f88c 3014 	strb.w	r3, [ip, #20]
 801f946:	2205      	movs	r2, #5
 801f948:	f8cd 9000 	str.w	r9, [sp]
 801f94c:	4633      	mov	r3, r6
 801f94e:	a936      	add	r1, sp, #216	; 0xd8
 801f950:	2002      	movs	r0, #2
 801f952:	f7ff ff8f 	bl	801f874 <MobleProvision_CreateCommand>
 801f956:	f8c8 0000 	str.w	r0, [r8]
 801f95a:	e7d3      	b.n	801f904 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801f95c:	2500      	movs	r5, #0
 801f95e:	f8d4 aa18 	ldr.w	sl, [r4, #2584]	; 0xa18
 801f962:	f7f8 fb8b 	bl	801807c <MoblePalBluetoothRandom>
 801f966:	44aa      	add	sl, r5
 801f968:	3501      	adds	r5, #1
 801f96a:	2d20      	cmp	r5, #32
 801f96c:	f88a 0095 	strb.w	r0, [sl, #149]	; 0x95
 801f970:	d1f5      	bne.n	801f95e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xce>
 801f972:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801f976:	4629      	mov	r1, r5
 801f978:	3095      	adds	r0, #149	; 0x95
 801f97a:	f7fa f9c7 	bl	8019d0c <MoblePalCryptoInitEcc>
 801f97e:	2800      	cmp	r0, #0
 801f980:	f040 81a2 	bne.w	801fcc8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801f984:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801f988:	2201      	movs	r2, #1
 801f98a:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
 801f98e:	a826      	add	r0, sp, #152	; 0x98
 801f990:	f7f9 fac8 	bl	8018f24 <MoblePalCryptoGetEccPublicKey.part.0>
 801f994:	2800      	cmp	r0, #0
 801f996:	f040 8197 	bne.w	801fcc8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801f99a:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801f99e:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 801f9a2:	bb43      	cbnz	r3, 801f9f6 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x166>
 801f9a4:	f8d4 ca18 	ldr.w	ip, [r4, #2584]	; 0xa18
 801f9a8:	f10c 05b5 	add.w	r5, ip, #181	; 0xb5
 801f9ac:	f10d 0e98 	add.w	lr, sp, #152	; 0x98
 801f9b0:	ac36      	add	r4, sp, #216	; 0xd8
 801f9b2:	462b      	mov	r3, r5
 801f9b4:	4672      	mov	r2, lr
 801f9b6:	ca03      	ldmia	r2!, {r0, r1}
 801f9b8:	42a2      	cmp	r2, r4
 801f9ba:	6028      	str	r0, [r5, #0]
 801f9bc:	6069      	str	r1, [r5, #4]
 801f9be:	4696      	mov	lr, r2
 801f9c0:	f105 0508 	add.w	r5, r5, #8
 801f9c4:	d1f6      	bne.n	801f9b4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x124>
 801f9c6:	4625      	mov	r5, r4
 801f9c8:	f10c 0ef5 	add.w	lr, ip, #245	; 0xf5
 801f9cc:	6818      	ldr	r0, [r3, #0]
 801f9ce:	6859      	ldr	r1, [r3, #4]
 801f9d0:	462a      	mov	r2, r5
 801f9d2:	c203      	stmia	r2!, {r0, r1}
 801f9d4:	3308      	adds	r3, #8
 801f9d6:	4573      	cmp	r3, lr
 801f9d8:	4615      	mov	r5, r2
 801f9da:	d1f7      	bne.n	801f9cc <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x13c>
 801f9dc:	2240      	movs	r2, #64	; 0x40
 801f9de:	4621      	mov	r1, r4
 801f9e0:	f10c 0015 	add.w	r0, ip, #21
 801f9e4:	f009 ff4c 	bl	8029880 <memmove>
 801f9e8:	f8cd 9000 	str.w	r9, [sp]
 801f9ec:	4633      	mov	r3, r6
 801f9ee:	2240      	movs	r2, #64	; 0x40
 801f9f0:	4621      	mov	r1, r4
 801f9f2:	2003      	movs	r0, #3
 801f9f4:	e7ad      	b.n	801f952 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc2>
 801f9f6:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801f9fa:	30f5      	adds	r0, #245	; 0xf5
 801f9fc:	f7fa f99a 	bl	8019d34 <MoblePalCryptoGetEccGenSecret>
 801fa00:	b920      	cbnz	r0, 801fa0c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x17c>
 801fa02:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fa06:	220d      	movs	r2, #13
 801fa08:	701a      	strb	r2, [r3, #0]
 801fa0a:	e77b      	b.n	801f904 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801fa0c:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fa10:	f100 0220 	add.w	r2, r0, #32
 801fa14:	f203 1335 	addw	r3, r3, #309	; 0x135
 801fa18:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
 801fa1c:	f803 1b01 	strb.w	r1, [r3], #1
 801fa20:	4282      	cmp	r2, r0
 801fa22:	d1f9      	bne.n	801fa18 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x188>
 801fa24:	e7be      	b.n	801f9a4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x114>
 801fa26:	2300      	movs	r3, #0
 801fa28:	e9cd 331b 	strd	r3, r3, [sp, #108]	; 0x6c
 801fa2c:	e9cd 331d 	strd	r3, r3, [sp, #116]	; 0x74
 801fa30:	2291      	movs	r2, #145	; 0x91
 801fa32:	f20c 1365 	addw	r3, ip, #357	; 0x165
 801fa36:	f10c 0104 	add.w	r1, ip, #4
 801fa3a:	a81b      	add	r0, sp, #108	; 0x6c
 801fa3c:	f7f8 fdf8 	bl	8018630 <BAES_CmacCompute>
 801fa40:	2304      	movs	r3, #4
 801fa42:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801fa46:	9302      	str	r3, [sp, #8]
 801fa48:	4b27      	ldr	r3, [pc, #156]	; (801fae8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x258>)
 801fa4a:	9301      	str	r3, [sp, #4]
 801fa4c:	2310      	movs	r3, #16
 801fa4e:	9300      	str	r3, [sp, #0]
 801fa50:	f200 1135 	addw	r1, r0, #309	; 0x135
 801fa54:	f200 1365 	addw	r3, r0, #357	; 0x165
 801fa58:	2220      	movs	r2, #32
 801fa5a:	f200 1055 	addw	r0, r0, #341	; 0x155
 801fa5e:	f7f8 feb5 	bl	80187cc <MoblePalCryptoK1.part.0>
 801fa62:	2800      	cmp	r0, #0
 801fa64:	f040 8130 	bne.w	801fcc8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fa68:	4605      	mov	r5, r0
 801fa6a:	f8d4 aa18 	ldr.w	sl, [r4, #2584]	; 0xa18
 801fa6e:	f7f8 fb05 	bl	801807c <MoblePalBluetoothRandom>
 801fa72:	44aa      	add	sl, r5
 801fa74:	3501      	adds	r5, #1
 801fa76:	2d10      	cmp	r5, #16
 801fa78:	f88a 0175 	strb.w	r0, [sl, #373]	; 0x175
 801fa7c:	d1f5      	bne.n	801fa6a <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x1da>
 801fa7e:	ad26      	add	r5, sp, #152	; 0x98
 801fa80:	2300      	movs	r3, #0
 801fa82:	4628      	mov	r0, r5
 801fa84:	e9cd 3326 	strd	r3, r3, [sp, #152]	; 0x98
 801fa88:	e9cd 3328 	strd	r3, r3, [sp, #160]	; 0xa0
 801fa8c:	f7ff fb08 	bl	801f0a0 <MobleProvisionGenerateAuthValue>
 801fa90:	f8d4 ca18 	ldr.w	ip, [r4, #2584]	; 0xa18
 801fa94:	ac36      	add	r4, sp, #216	; 0xd8
 801fa96:	f20c 1375 	addw	r3, ip, #373	; 0x175
 801fa9a:	f20c 1e85 	addw	lr, ip, #389	; 0x185
 801fa9e:	6818      	ldr	r0, [r3, #0]
 801faa0:	6859      	ldr	r1, [r3, #4]
 801faa2:	4622      	mov	r2, r4
 801faa4:	c203      	stmia	r2!, {r0, r1}
 801faa6:	3308      	adds	r3, #8
 801faa8:	4573      	cmp	r3, lr
 801faaa:	4614      	mov	r4, r2
 801faac:	d1f7      	bne.n	801fa9e <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x20e>
 801faae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801fab2:	ac3a      	add	r4, sp, #232	; 0xe8
 801fab4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 801fab8:	ab1f      	add	r3, sp, #124	; 0x7c
 801faba:	2220      	movs	r2, #32
 801fabc:	a936      	add	r1, sp, #216	; 0xd8
 801fabe:	f20c 1055 	addw	r0, ip, #341	; 0x155
 801fac2:	f7f8 fdb5 	bl	8018630 <BAES_CmacCompute>
 801fac6:	f8cd 9000 	str.w	r9, [sp]
 801faca:	4633      	mov	r3, r6
 801facc:	2210      	movs	r2, #16
 801face:	a91f      	add	r1, sp, #124	; 0x7c
 801fad0:	2005      	movs	r0, #5
 801fad2:	e73e      	b.n	801f952 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc2>
 801fad4:	f8cd 9000 	str.w	r9, [sp]
 801fad8:	4633      	mov	r3, r6
 801fada:	2210      	movs	r2, #16
 801fadc:	f20c 1175 	addw	r1, ip, #373	; 0x175
 801fae0:	2006      	movs	r0, #6
 801fae2:	e736      	b.n	801f952 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0xc2>
 801fae4:	20002514 	.word	0x20002514
 801fae8:	08033a03 	.word	0x08033a03
 801faec:	2300      	movs	r3, #0
 801faee:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 801faf2:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 801faf6:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
 801fafa:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
 801fafe:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 801fb02:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 801fb06:	f20c 1565 	addw	r5, ip, #357	; 0x165
 801fb0a:	aa36      	add	r2, sp, #216	; 0xd8
 801fb0c:	f20c 1e75 	addw	lr, ip, #373	; 0x175
 801fb10:	6828      	ldr	r0, [r5, #0]
 801fb12:	6869      	ldr	r1, [r5, #4]
 801fb14:	4613      	mov	r3, r2
 801fb16:	c303      	stmia	r3!, {r0, r1}
 801fb18:	3508      	adds	r5, #8
 801fb1a:	4575      	cmp	r5, lr
 801fb1c:	461a      	mov	r2, r3
 801fb1e:	d1f7      	bne.n	801fb10 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x280>
 801fb20:	aa3a      	add	r2, sp, #232	; 0xe8
 801fb22:	f20c 1e85 	addw	lr, ip, #389	; 0x185
 801fb26:	6828      	ldr	r0, [r5, #0]
 801fb28:	6869      	ldr	r1, [r5, #4]
 801fb2a:	4613      	mov	r3, r2
 801fb2c:	c303      	stmia	r3!, {r0, r1}
 801fb2e:	3508      	adds	r5, #8
 801fb30:	4575      	cmp	r5, lr
 801fb32:	461a      	mov	r2, r3
 801fb34:	d1f7      	bne.n	801fb26 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x296>
 801fb36:	aa3e      	add	r2, sp, #248	; 0xf8
 801fb38:	f20c 1c95 	addw	ip, ip, #405	; 0x195
 801fb3c:	6828      	ldr	r0, [r5, #0]
 801fb3e:	6869      	ldr	r1, [r5, #4]
 801fb40:	4613      	mov	r3, r2
 801fb42:	c303      	stmia	r3!, {r0, r1}
 801fb44:	3508      	adds	r5, #8
 801fb46:	4565      	cmp	r5, ip
 801fb48:	461a      	mov	r2, r3
 801fb4a:	d1f7      	bne.n	801fb3c <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x2ac>
 801fb4c:	ab17      	add	r3, sp, #92	; 0x5c
 801fb4e:	2230      	movs	r2, #48	; 0x30
 801fb50:	a936      	add	r1, sp, #216	; 0xd8
 801fb52:	a813      	add	r0, sp, #76	; 0x4c
 801fb54:	f7f8 fd6c 	bl	8018630 <BAES_CmacCompute>
 801fb58:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	; 0xa18
 801fb5c:	4b5e      	ldr	r3, [pc, #376]	; (801fcd8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x448>)
 801fb5e:	9301      	str	r3, [sp, #4]
 801fb60:	f04f 0a04 	mov.w	sl, #4
 801fb64:	2510      	movs	r5, #16
 801fb66:	f8cd a008 	str.w	sl, [sp, #8]
 801fb6a:	9500      	str	r5, [sp, #0]
 801fb6c:	ab17      	add	r3, sp, #92	; 0x5c
 801fb6e:	2220      	movs	r2, #32
 801fb70:	f201 1135 	addw	r1, r1, #309	; 0x135
 801fb74:	a80b      	add	r0, sp, #44	; 0x2c
 801fb76:	f7f8 fe29 	bl	80187cc <MoblePalCryptoK1.part.0>
 801fb7a:	2800      	cmp	r0, #0
 801fb7c:	f040 80a4 	bne.w	801fcc8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fb80:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	; 0xa18
 801fb84:	4b55      	ldr	r3, [pc, #340]	; (801fcdc <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x44c>)
 801fb86:	f8cd a008 	str.w	sl, [sp, #8]
 801fb8a:	e9cd 5300 	strd	r5, r3, [sp]
 801fb8e:	2220      	movs	r2, #32
 801fb90:	ab17      	add	r3, sp, #92	; 0x5c
 801fb92:	f201 1135 	addw	r1, r1, #309	; 0x135
 801fb96:	a80f      	add	r0, sp, #60	; 0x3c
 801fb98:	f7f8 fe18 	bl	80187cc <MoblePalCryptoK1.part.0>
 801fb9c:	2800      	cmp	r0, #0
 801fb9e:	f040 8093 	bne.w	801fcc8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fba2:	f8d4 1a18 	ldr.w	r1, [r4, #2584]	; 0xa18
 801fba6:	4b4e      	ldr	r3, [pc, #312]	; (801fce0 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x450>)
 801fba8:	f8cd a008 	str.w	sl, [sp, #8]
 801fbac:	e9cd 001b 	strd	r0, r0, [sp, #108]	; 0x6c
 801fbb0:	e9cd 001d 	strd	r0, r0, [sp, #116]	; 0x74
 801fbb4:	e9cd 5300 	strd	r5, r3, [sp]
 801fbb8:	2220      	movs	r2, #32
 801fbba:	ab17      	add	r3, sp, #92	; 0x5c
 801fbbc:	f201 1135 	addw	r1, r1, #309	; 0x135
 801fbc0:	a81b      	add	r0, sp, #108	; 0x6c
 801fbc2:	f7f8 fe03 	bl	80187cc <MoblePalCryptoK1.part.0>
 801fbc6:	2801      	cmp	r0, #1
 801fbc8:	d908      	bls.n	801fbdc <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x34c>
 801fbca:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 801fbce:	2702      	movs	r7, #2
 801fbd0:	f883 71a8 	strb.w	r7, [r3, #424]	; 0x1a8
 801fbd4:	4638      	mov	r0, r7
 801fbd6:	b047      	add	sp, #284	; 0x11c
 801fbd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fbdc:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fbe0:	f8df b104 	ldr.w	fp, [pc, #260]	; 801fce8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x458>
 801fbe4:	f893 227c 	ldrb.w	r2, [r3, #636]	; 0x27c
 801fbe8:	f50b 61b3 	add.w	r1, fp, #1432	; 0x598
 801fbec:	a81b      	add	r0, sp, #108	; 0x6c
 801fbee:	f7fd fb14 	bl	801d21a <BLEMesh_PvnrDataInputCallback>
 801fbf2:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fbf6:	f20b 4a24 	addw	sl, fp, #1060	; 0x424
 801fbfa:	f8a3 0296 	strh.w	r0, [r3, #662]	; 0x296
 801fbfe:	e89a 000f 	ldmia.w	sl, {r0, r1, r2, r3}
 801fc02:	ad1f      	add	r5, sp, #124	; 0x7c
 801fc04:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 801fc08:	f10d 011a 	add.w	r1, sp, #26
 801fc0c:	a807      	add	r0, sp, #28
 801fc0e:	f7f9 fad5 	bl	80191bc <MoblePalCrypto_GetNetKeyIndexes>
 801fc12:	4a34      	ldr	r2, [pc, #208]	; (801fce4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x454>)
 801fc14:	f89b 365c 	ldrb.w	r3, [fp, #1628]	; 0x65c
 801fc18:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 801fc1c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801fc20:	2b00      	cmp	r3, #0
 801fc22:	bf18      	it	ne
 801fc24:	2302      	movne	r3, #2
 801fc26:	2a02      	cmp	r2, #2
 801fc28:	bf08      	it	eq
 801fc2a:	f043 0301 	orreq.w	r3, r3, #1
 801fc2e:	2202      	movs	r2, #2
 801fc30:	a823      	add	r0, sp, #140	; 0x8c
 801fc32:	f7fb faf5 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801fc36:	4619      	mov	r1, r3
 801fc38:	2201      	movs	r2, #1
 801fc3a:	f10d 008e 	add.w	r0, sp, #142	; 0x8e
 801fc3e:	f7fb faef 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801fc42:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	2204      	movs	r2, #4
 801fc4a:	6859      	ldr	r1, [r3, #4]
 801fc4c:	f10d 008f 	add.w	r0, sp, #143	; 0x8f
 801fc50:	f7fb fae6 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801fc54:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 801fc58:	2202      	movs	r2, #2
 801fc5a:	f8b3 1296 	ldrh.w	r1, [r3, #662]	; 0x296
 801fc5e:	f10d 0093 	add.w	r0, sp, #147	; 0x93
 801fc62:	2300      	movs	r3, #0
 801fc64:	f7fb fadc 	bl	801b220 <MobleOutputStreamPutBigEndian>
 801fc68:	e9cd 3304 	strd	r3, r3, [sp, #16]
 801fc6c:	2319      	movs	r3, #25
 801fc6e:	e9cd 5302 	strd	r5, r3, [sp, #8]
 801fc72:	230d      	movs	r3, #13
 801fc74:	9301      	str	r3, [sp, #4]
 801fc76:	f10d 033f 	add.w	r3, sp, #63	; 0x3f
 801fc7a:	9300      	str	r3, [sp, #0]
 801fc7c:	2208      	movs	r2, #8
 801fc7e:	ab0b      	add	r3, sp, #44	; 0x2c
 801fc80:	a909      	add	r1, sp, #36	; 0x24
 801fc82:	a826      	add	r0, sp, #152	; 0x98
 801fc84:	f7f9 fe62 	bl	801994c <MoblePalCryptoAesCcmEncrypt>
 801fc88:	4602      	mov	r2, r0
 801fc8a:	b9e8      	cbnz	r0, 801fcc8 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x438>
 801fc8c:	ab09      	add	r3, sp, #36	; 0x24
 801fc8e:	cb03      	ldmia	r3!, {r0, r1}
 801fc90:	f1b9 0f21 	cmp.w	r9, #33	; 0x21
 801fc94:	f8cd 00b1 	str.w	r0, [sp, #177]	; 0xb1
 801fc98:	f8cd 10b5 	str.w	r1, [sp, #181]	; 0xb5
 801fc9c:	d911      	bls.n	801fcc2 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x432>
 801fc9e:	4633      	mov	r3, r6
 801fca0:	2207      	movs	r2, #7
 801fca2:	f803 2b01 	strb.w	r2, [r3], #1
 801fca6:	ad2e      	add	r5, sp, #184	; 0xb8
 801fca8:	aa26      	add	r2, sp, #152	; 0x98
 801fcaa:	4614      	mov	r4, r2
 801fcac:	cc03      	ldmia	r4!, {r0, r1}
 801fcae:	42ac      	cmp	r4, r5
 801fcb0:	6018      	str	r0, [r3, #0]
 801fcb2:	6059      	str	r1, [r3, #4]
 801fcb4:	4622      	mov	r2, r4
 801fcb6:	f103 0308 	add.w	r3, r3, #8
 801fcba:	d1f6      	bne.n	801fcaa <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x41a>
 801fcbc:	7822      	ldrb	r2, [r4, #0]
 801fcbe:	701a      	strb	r2, [r3, #0]
 801fcc0:	2222      	movs	r2, #34	; 0x22
 801fcc2:	f8c8 2000 	str.w	r2, [r8]
 801fcc6:	e61d      	b.n	801f904 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x74>
 801fcc8:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fccc:	220d      	movs	r2, #13
 801fcce:	701a      	strb	r2, [r3, #0]
 801fcd0:	2702      	movs	r7, #2
 801fcd2:	e77f      	b.n	801fbd4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x344>
 801fcd4:	2703      	movs	r7, #3
 801fcd6:	e77d      	b.n	801fbd4 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0+0x344>
 801fcd8:	08033a08 	.word	0x08033a08
 801fcdc:	08033a0d 	.word	0x08033a0d
 801fce0:	08033a12 	.word	0x08033a12
 801fce4:	20000324 	.word	0x20000324
 801fce8:	2000141c 	.word	0x2000141c

0801fcec <MobleProvision_UnprovisionedNode_GetOutputMessage>:
 801fcec:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fcee:	b095      	sub	sp, #84	; 0x54
 801fcf0:	2500      	movs	r5, #0
 801fcf2:	4f33      	ldr	r7, [pc, #204]	; (801fdc0 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd4>)
 801fcf4:	9003      	str	r0, [sp, #12]
 801fcf6:	460e      	mov	r6, r1
 801fcf8:	4614      	mov	r4, r2
 801fcfa:	4629      	mov	r1, r5
 801fcfc:	223c      	movs	r2, #60	; 0x3c
 801fcfe:	a805      	add	r0, sp, #20
 801fd00:	9504      	str	r5, [sp, #16]
 801fd02:	f009 fdd7 	bl	80298b4 <memset>
 801fd06:	f8d7 06f0 	ldr.w	r0, [r7, #1776]	; 0x6f0
 801fd0a:	f7ff f923 	bl	801ef54 <MobleProvisionGetRole>
 801fd0e:	2801      	cmp	r0, #1
 801fd10:	d154      	bne.n	801fdbc <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fd12:	2e00      	cmp	r6, #0
 801fd14:	d052      	beq.n	801fdbc <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fd16:	2c00      	cmp	r4, #0
 801fd18:	d050      	beq.n	801fdbc <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fd1a:	9b03      	ldr	r3, [sp, #12]
 801fd1c:	2b00      	cmp	r3, #0
 801fd1e:	d04d      	beq.n	801fdbc <MobleProvision_UnprovisionedNode_GetOutputMessage+0xd0>
 801fd20:	f8d7 1a0c 	ldr.w	r1, [r7, #2572]	; 0xa0c
 801fd24:	6025      	str	r5, [r4, #0]
 801fd26:	f891 21a8 	ldrb.w	r2, [r1, #424]	; 0x1a8
 801fd2a:	b15a      	cbz	r2, 801fd44 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x58>
 801fd2c:	4602      	mov	r2, r0
 801fd2e:	9600      	str	r6, [sp, #0]
 801fd30:	f501 71d4 	add.w	r1, r1, #424	; 0x1a8
 801fd34:	2009      	movs	r0, #9
 801fd36:	f7ff fd9d 	bl	801f874 <MobleProvision_CreateCommand>
 801fd3a:	6020      	str	r0, [r4, #0]
 801fd3c:	b1a8      	cbz	r0, 801fd6a <MobleProvision_UnprovisionedNode_GetOutputMessage+0x7e>
 801fd3e:	2000      	movs	r0, #0
 801fd40:	b015      	add	sp, #84	; 0x54
 801fd42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fd44:	f891 2044 	ldrb.w	r2, [r1, #68]	; 0x44
 801fd48:	2a05      	cmp	r2, #5
 801fd4a:	d80b      	bhi.n	801fd64 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801fd4c:	e8df f002 	tbb	[pc, r2]
 801fd50:	23280f03 	.word	0x23280f03
 801fd54:	342e      	.short	0x342e
 801fd56:	9600      	str	r6, [sp, #0]
 801fd58:	220b      	movs	r2, #11
 801fd5a:	3146      	adds	r1, #70	; 0x46
 801fd5c:	2001      	movs	r0, #1
 801fd5e:	f7ff fd89 	bl	801f874 <MobleProvision_CreateCommand>
 801fd62:	6020      	str	r0, [r4, #0]
 801fd64:	6823      	ldr	r3, [r4, #0]
 801fd66:	2b00      	cmp	r3, #0
 801fd68:	d1e9      	bne.n	801fd3e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x52>
 801fd6a:	2002      	movs	r0, #2
 801fd6c:	e7e8      	b.n	801fd40 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x54>
 801fd6e:	af04      	add	r7, sp, #16
 801fd70:	f501 72b1 	add.w	r2, r1, #354	; 0x162
 801fd74:	f501 75d1 	add.w	r5, r1, #418	; 0x1a2
 801fd78:	46be      	mov	lr, r7
 801fd7a:	6810      	ldr	r0, [r2, #0]
 801fd7c:	6851      	ldr	r1, [r2, #4]
 801fd7e:	46bc      	mov	ip, r7
 801fd80:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801fd84:	3208      	adds	r2, #8
 801fd86:	42aa      	cmp	r2, r5
 801fd88:	4667      	mov	r7, ip
 801fd8a:	d1f6      	bne.n	801fd7a <MobleProvision_UnprovisionedNode_GetOutputMessage+0x8e>
 801fd8c:	9600      	str	r6, [sp, #0]
 801fd8e:	2240      	movs	r2, #64	; 0x40
 801fd90:	4671      	mov	r1, lr
 801fd92:	2003      	movs	r0, #3
 801fd94:	e7e3      	b.n	801fd5e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x72>
 801fd96:	2204      	movs	r2, #4
 801fd98:	701a      	strb	r2, [r3, #0]
 801fd9a:	2301      	movs	r3, #1
 801fd9c:	6023      	str	r3, [r4, #0]
 801fd9e:	e7e1      	b.n	801fd64 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x78>
 801fda0:	9600      	str	r6, [sp, #0]
 801fda2:	2210      	movs	r2, #16
 801fda4:	f501 7181 	add.w	r1, r1, #258	; 0x102
 801fda8:	2005      	movs	r0, #5
 801fdaa:	e7d8      	b.n	801fd5e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x72>
 801fdac:	9600      	str	r6, [sp, #0]
 801fdae:	2210      	movs	r2, #16
 801fdb0:	f501 7191 	add.w	r1, r1, #290	; 0x122
 801fdb4:	2006      	movs	r0, #6
 801fdb6:	e7d2      	b.n	801fd5e <MobleProvision_UnprovisionedNode_GetOutputMessage+0x72>
 801fdb8:	2208      	movs	r2, #8
 801fdba:	e7ed      	b.n	801fd98 <MobleProvision_UnprovisionedNode_GetOutputMessage+0xac>
 801fdbc:	2003      	movs	r0, #3
 801fdbe:	e7bf      	b.n	801fd40 <MobleProvision_UnprovisionedNode_GetOutputMessage+0x54>
 801fdc0:	20002514 	.word	0x20002514

0801fdc4 <MobleProvisionBearerGatt_Transmit>:
 801fdc4:	b500      	push	{lr}
 801fdc6:	b0a3      	sub	sp, #140	; 0x8c
 801fdc8:	aa01      	add	r2, sp, #4
 801fdca:	2180      	movs	r1, #128	; 0x80
 801fdcc:	a802      	add	r0, sp, #8
 801fdce:	f7ff ff8d 	bl	801fcec <MobleProvision_UnprovisionedNode_GetOutputMessage>
 801fdd2:	2801      	cmp	r0, #1
 801fdd4:	d805      	bhi.n	801fde2 <MobleProvisionBearerGatt_Transmit+0x1e>
 801fdd6:	9b01      	ldr	r3, [sp, #4]
 801fdd8:	aa02      	add	r2, sp, #8
 801fdda:	2100      	movs	r1, #0
 801fddc:	2003      	movs	r0, #3
 801fdde:	f7fd fe3b 	bl	801da58 <BnrgmProxyProtocol_SendData>
 801fde2:	b023      	add	sp, #140	; 0x8c
 801fde4:	f85d fb04 	ldr.w	pc, [sp], #4

0801fde8 <MobleProvision_UnprovisionedNode_IsCompleted>:
 801fde8:	4b04      	ldr	r3, [pc, #16]	; (801fdfc <MobleProvision_UnprovisionedNode_IsCompleted+0x14>)
 801fdea:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 801fdee:	f893 0044 	ldrb.w	r0, [r3, #68]	; 0x44
 801fdf2:	1f83      	subs	r3, r0, #6
 801fdf4:	4258      	negs	r0, r3
 801fdf6:	4158      	adcs	r0, r3
 801fdf8:	4770      	bx	lr
 801fdfa:	bf00      	nop
 801fdfc:	20002514 	.word	0x20002514

0801fe00 <MobleProvision_ProvisionerNode_Init>:
 801fe00:	b570      	push	{r4, r5, r6, lr}
 801fe02:	f44f 70d8 	mov.w	r0, #432	; 0x1b0
 801fe06:	f7fb f84b 	bl	801aea0 <MobleMemAlloc>
 801fe0a:	4e0d      	ldr	r6, [pc, #52]	; (801fe40 <MobleProvision_ProvisionerNode_Init+0x40>)
 801fe0c:	4605      	mov	r5, r0
 801fe0e:	f8c6 0a18 	str.w	r0, [r6, #2584]	; 0xa18
 801fe12:	b180      	cbz	r0, 801fe36 <MobleProvision_ProvisionerNode_Init+0x36>
 801fe14:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 801fe18:	f7ff f89c 	bl	801ef54 <MobleProvisionGetRole>
 801fe1c:	4604      	mov	r4, r0
 801fe1e:	b960      	cbnz	r0, 801fe3a <MobleProvision_ProvisionerNode_Init+0x3a>
 801fe20:	7028      	strb	r0, [r5, #0]
 801fe22:	f7e8 f81f 	bl	8007e64 <HAL_GetTick>
 801fe26:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	; 0xa18
 801fe2a:	f8c5 01a8 	str.w	r0, [r5, #424]	; 0x1a8
 801fe2e:	f883 41ac 	strb.w	r4, [r3, #428]	; 0x1ac
 801fe32:	4620      	mov	r0, r4
 801fe34:	bd70      	pop	{r4, r5, r6, pc}
 801fe36:	2402      	movs	r4, #2
 801fe38:	e7fb      	b.n	801fe32 <MobleProvision_ProvisionerNode_Init+0x32>
 801fe3a:	2403      	movs	r4, #3
 801fe3c:	e7f9      	b.n	801fe32 <MobleProvision_ProvisionerNode_Init+0x32>
 801fe3e:	bf00      	nop
 801fe40:	20002514 	.word	0x20002514

0801fe44 <MobleProvision_ProvisionerNode_DeInit>:
 801fe44:	b510      	push	{r4, lr}
 801fe46:	4c0b      	ldr	r4, [pc, #44]	; (801fe74 <MobleProvision_ProvisionerNode_DeInit+0x30>)
 801fe48:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fe4c:	f893 31ac 	ldrb.w	r3, [r3, #428]	; 0x1ac
 801fe50:	2b01      	cmp	r3, #1
 801fe52:	d106      	bne.n	801fe62 <MobleProvision_ProvisionerNode_DeInit+0x1e>
 801fe54:	f7f9 ff84 	bl	8019d60 <MoblePalCryptoFreeEcc>
 801fe58:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 801fe5c:	2200      	movs	r2, #0
 801fe5e:	f883 21ac 	strb.w	r2, [r3, #428]	; 0x1ac
 801fe62:	f8d4 0a18 	ldr.w	r0, [r4, #2584]	; 0xa18
 801fe66:	f7fb f8a5 	bl	801afb4 <MobleMemFree>
 801fe6a:	2000      	movs	r0, #0
 801fe6c:	f8c4 0a18 	str.w	r0, [r4, #2584]	; 0xa18
 801fe70:	bd10      	pop	{r4, pc}
 801fe72:	bf00      	nop
 801fe74:	20002514 	.word	0x20002514

0801fe78 <MobleProvision_ProvisionerNode_GetNextOperation>:
 801fe78:	4b09      	ldr	r3, [pc, #36]	; (801fea0 <MobleProvision_ProvisionerNode_GetNextOperation+0x28>)
 801fe7a:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
 801fe7e:	781b      	ldrb	r3, [r3, #0]
 801fe80:	2b0b      	cmp	r3, #11
 801fe82:	d809      	bhi.n	801fe98 <MobleProvision_ProvisionerNode_GetNextOperation+0x20>
 801fe84:	e8df f003 	tbb	[pc, r3]
 801fe88:	0a0a060a 	.word	0x0a0a060a
 801fe8c:	060a0806 	.word	0x060a0806
 801fe90:	060a060a 	.word	0x060a060a
 801fe94:	2001      	movs	r0, #1
 801fe96:	4770      	bx	lr
 801fe98:	2000      	movs	r0, #0
 801fe9a:	4770      	bx	lr
 801fe9c:	2002      	movs	r0, #2
 801fe9e:	4770      	bx	lr
 801fea0:	20002514 	.word	0x20002514

0801fea4 <MobleProvision_ProvisionerNode_StateForOOB>:
 801fea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801fea6:	4e53      	ldr	r6, [pc, #332]	; (801fff4 <MobleProvision_ProvisionerNode_StateForOOB+0x150>)
 801fea8:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	; 0xa18
 801feac:	7808      	ldrb	r0, [r1, #0]
 801feae:	1c43      	adds	r3, r0, #1
 801feb0:	700b      	strb	r3, [r1, #0]
 801feb2:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801feb6:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
 801feba:	2a02      	cmp	r2, #2
 801febc:	d01b      	beq.n	801fef6 <MobleProvision_ProvisionerNode_StateForOOB+0x52>
 801febe:	2a03      	cmp	r2, #3
 801fec0:	d029      	beq.n	801ff16 <MobleProvision_ProvisionerNode_StateForOOB+0x72>
 801fec2:	2a01      	cmp	r2, #1
 801fec4:	d125      	bne.n	801ff12 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801fec6:	f8d3 228c 	ldr.w	r2, [r3, #652]	; 0x28c
 801feca:	f893 01fd 	ldrb.w	r0, [r3, #509]	; 0x1fd
 801fece:	4790      	blx	r2
 801fed0:	4601      	mov	r1, r0
 801fed2:	2800      	cmp	r0, #0
 801fed4:	f000 8084 	beq.w	801ffe0 <MobleProvision_ProvisionerNode_StateForOOB+0x13c>
 801fed8:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 801fedc:	f890 21fd 	ldrb.w	r2, [r0, #509]	; 0x1fd
 801fee0:	2a00      	cmp	r2, #0
 801fee2:	d07d      	beq.n	801ffe0 <MobleProvision_ProvisionerNode_StateForOOB+0x13c>
 801fee4:	f500 701a 	add.w	r0, r0, #616	; 0x268
 801fee8:	f009 fcca 	bl	8029880 <memmove>
 801feec:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801fef0:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 801fef4:	e068      	b.n	801ffc8 <MobleProvision_ProvisionerNode_StateForOOB+0x124>
 801fef6:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801fefa:	b151      	cbz	r1, 801ff12 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801fefc:	f8d3 0284 	ldr.w	r0, [r3, #644]	; 0x284
 801ff00:	b138      	cbz	r0, 801ff12 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801ff02:	f893 01fc 	ldrb.w	r0, [r3, #508]	; 0x1fc
 801ff06:	2803      	cmp	r0, #3
 801ff08:	d95e      	bls.n	801ffc8 <MobleProvision_ProvisionerNode_StateForOOB+0x124>
 801ff0a:	2804      	cmp	r0, #4
 801ff0c:	bf08      	it	eq
 801ff0e:	f883 1278 	strbeq.w	r1, [r3, #632]	; 0x278
 801ff12:	b003      	add	sp, #12
 801ff14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ff16:	7008      	strb	r0, [r1, #0]
 801ff18:	f8d3 2288 	ldr.w	r2, [r3, #648]	; 0x288
 801ff1c:	2a00      	cmp	r2, #0
 801ff1e:	d0f8      	beq.n	801ff12 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801ff20:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 801ff24:	2b02      	cmp	r3, #2
 801ff26:	d952      	bls.n	801ffce <MobleProvision_ProvisionerNode_StateForOOB+0x12a>
 801ff28:	2b03      	cmp	r3, #3
 801ff2a:	d1f2      	bne.n	801ff12 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801ff2c:	2400      	movs	r4, #0
 801ff2e:	253e      	movs	r5, #62	; 0x3e
 801ff30:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801ff34:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 801ff38:	f893 1278 	ldrb.w	r1, [r3, #632]	; 0x278
 801ff3c:	4291      	cmp	r1, r2
 801ff3e:	d243      	bcs.n	801ffc8 <MobleProvision_ProvisionerNode_StateForOOB+0x124>
 801ff40:	4668      	mov	r0, sp
 801ff42:	e9cd 4400 	strd	r4, r4, [sp]
 801ff46:	f7f5 fce9 	bl	801591c <hci_le_rand>
 801ff4a:	466a      	mov	r2, sp
 801ff4c:	2108      	movs	r1, #8
 801ff4e:	f812 3b01 	ldrb.w	r3, [r2], #1
 801ff52:	fbb3 f0f5 	udiv	r0, r3, r5
 801ff56:	fb05 3310 	mls	r3, r5, r0, r3
 801ff5a:	b2db      	uxtb	r3, r3
 801ff5c:	2b0a      	cmp	r3, #10
 801ff5e:	d83a      	bhi.n	801ffd6 <MobleProvision_ProvisionerNode_StateForOOB+0x132>
 801ff60:	3330      	adds	r3, #48	; 0x30
 801ff62:	3901      	subs	r1, #1
 801ff64:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ff68:	d1f1      	bne.n	801ff4e <MobleProvision_ProvisionerNode_StateForOOB+0xaa>
 801ff6a:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801ff6e:	f893 0278 	ldrb.w	r0, [r3, #632]	; 0x278
 801ff72:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 801ff76:	1a12      	subs	r2, r2, r0
 801ff78:	f503 731a 	add.w	r3, r3, #616	; 0x268
 801ff7c:	2a08      	cmp	r2, #8
 801ff7e:	bfa8      	it	ge
 801ff80:	2208      	movge	r2, #8
 801ff82:	4418      	add	r0, r3
 801ff84:	4669      	mov	r1, sp
 801ff86:	f009 fc7b 	bl	8029880 <memmove>
 801ff8a:	f8d6 26f0 	ldr.w	r2, [r6, #1776]	; 0x6f0
 801ff8e:	f892 3278 	ldrb.w	r3, [r2, #632]	; 0x278
 801ff92:	3308      	adds	r3, #8
 801ff94:	f882 3278 	strb.w	r3, [r2, #632]	; 0x278
 801ff98:	e7ca      	b.n	801ff30 <MobleProvision_ProvisionerNode_StateForOOB+0x8c>
 801ff9a:	f7f8 f86f 	bl	801807c <MoblePalBluetoothRandom>
 801ff9e:	fbb0 f3f7 	udiv	r3, r0, r7
 801ffa2:	fb03 0017 	mls	r0, r3, r7, r0
 801ffa6:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 801ffaa:	b2c0      	uxtb	r0, r0
 801ffac:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 801ffb0:	b284      	uxth	r4, r0
 801ffb2:	3501      	adds	r5, #1
 801ffb4:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 801ffb8:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 801ffbc:	b2ea      	uxtb	r2, r5
 801ffbe:	4291      	cmp	r1, r2
 801ffc0:	d8eb      	bhi.n	801ff9a <MobleProvision_ProvisionerNode_StateForOOB+0xf6>
 801ffc2:	f8a3 4268 	strh.w	r4, [r3, #616]	; 0x268
 801ffc6:	2202      	movs	r2, #2
 801ffc8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 801ffcc:	e7a1      	b.n	801ff12 <MobleProvision_ProvisionerNode_StateForOOB+0x6e>
 801ffce:	2500      	movs	r5, #0
 801ffd0:	462c      	mov	r4, r5
 801ffd2:	270a      	movs	r7, #10
 801ffd4:	e7ee      	b.n	801ffb4 <MobleProvision_ProvisionerNode_StateForOOB+0x110>
 801ffd6:	2b24      	cmp	r3, #36	; 0x24
 801ffd8:	bf94      	ite	ls
 801ffda:	3357      	addls	r3, #87	; 0x57
 801ffdc:	331d      	addhi	r3, #29
 801ffde:	e7c0      	b.n	801ff62 <MobleProvision_ProvisionerNode_StateForOOB+0xbe>
 801ffe0:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 801ffe4:	2210      	movs	r2, #16
 801ffe6:	2100      	movs	r1, #0
 801ffe8:	f500 701a 	add.w	r0, r0, #616	; 0x268
 801ffec:	f009 fc62 	bl	80298b4 <memset>
 801fff0:	e77c      	b.n	801feec <MobleProvision_ProvisionerNode_StateForOOB+0x48>
 801fff2:	bf00      	nop
 801fff4:	20002514 	.word	0x20002514

0801fff8 <MobleProvision_ProvisionerNode_CompleteOperation>:
 801fff8:	b570      	push	{r4, r5, r6, lr}
 801fffa:	4c29      	ldr	r4, [pc, #164]	; (80200a0 <MobleProvision_ProvisionerNode_CompleteOperation+0xa8>)
 801fffc:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	; 0xa18
 8020000:	7813      	ldrb	r3, [r2, #0]
 8020002:	f1a3 010c 	sub.w	r1, r3, #12
 8020006:	2901      	cmp	r1, #1
 8020008:	b090      	sub	sp, #64	; 0x40
 802000a:	d945      	bls.n	8020098 <MobleProvision_ProvisionerNode_CompleteOperation+0xa0>
 802000c:	2b03      	cmp	r3, #3
 802000e:	d145      	bne.n	802009c <MobleProvision_ProvisionerNode_CompleteOperation+0xa4>
 8020010:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8020014:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 8020018:	b123      	cbz	r3, 8020024 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 802001a:	2304      	movs	r3, #4
 802001c:	7013      	strb	r3, [r2, #0]
 802001e:	f7ff ff41 	bl	801fea4 <MobleProvision_ProvisionerNode_StateForOOB>
 8020022:	2301      	movs	r3, #1
 8020024:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	; 0xa18
 8020028:	7812      	ldrb	r2, [r2, #0]
 802002a:	2a04      	cmp	r2, #4
 802002c:	d102      	bne.n	8020034 <MobleProvision_ProvisionerNode_CompleteOperation+0x3c>
 802002e:	bb73      	cbnz	r3, 802008e <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 8020030:	f7ff ff38 	bl	801fea4 <MobleProvision_ProvisionerNode_StateForOOB>
 8020034:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 8020038:	781b      	ldrb	r3, [r3, #0]
 802003a:	2b02      	cmp	r3, #2
 802003c:	d127      	bne.n	802008e <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 802003e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8020042:	f893 01fa 	ldrb.w	r0, [r3, #506]	; 0x1fa
 8020046:	b310      	cbz	r0, 802008e <MobleProvision_ProvisionerNode_CompleteOperation+0x96>
 8020048:	f8d3 3280 	ldr.w	r3, [r3, #640]	; 0x280
 802004c:	4798      	blx	r3
 802004e:	f8d4 5a18 	ldr.w	r5, [r4, #2584]	; 0xa18
 8020052:	35f5      	adds	r5, #245	; 0xf5
 8020054:	4601      	mov	r1, r0
 8020056:	2240      	movs	r2, #64	; 0x40
 8020058:	4628      	mov	r0, r5
 802005a:	f009 fc11 	bl	8029880 <memmove>
 802005e:	2100      	movs	r1, #0
 8020060:	223c      	movs	r2, #60	; 0x3c
 8020062:	a801      	add	r0, sp, #4
 8020064:	9100      	str	r1, [sp, #0]
 8020066:	f009 fc25 	bl	80298b4 <memset>
 802006a:	4669      	mov	r1, sp
 802006c:	4628      	mov	r0, r5
 802006e:	f7f9 fe83 	bl	8019d78 <MoblePalCrypto_PK_convert_le>
 8020072:	f8d4 3a18 	ldr.w	r3, [r4, #2584]	; 0xa18
 8020076:	466a      	mov	r2, sp
 8020078:	3355      	adds	r3, #85	; 0x55
 802007a:	ae10      	add	r6, sp, #64	; 0x40
 802007c:	4615      	mov	r5, r2
 802007e:	cd03      	ldmia	r5!, {r0, r1}
 8020080:	42b5      	cmp	r5, r6
 8020082:	6018      	str	r0, [r3, #0]
 8020084:	6059      	str	r1, [r3, #4]
 8020086:	462a      	mov	r2, r5
 8020088:	f103 0308 	add.w	r3, r3, #8
 802008c:	d1f6      	bne.n	802007c <MobleProvision_ProvisionerNode_CompleteOperation+0x84>
 802008e:	f8d4 2a18 	ldr.w	r2, [r4, #2584]	; 0xa18
 8020092:	7813      	ldrb	r3, [r2, #0]
 8020094:	3301      	adds	r3, #1
 8020096:	7013      	strb	r3, [r2, #0]
 8020098:	b010      	add	sp, #64	; 0x40
 802009a:	bd70      	pop	{r4, r5, r6, pc}
 802009c:	2300      	movs	r3, #0
 802009e:	e7c1      	b.n	8020024 <MobleProvision_ProvisionerNode_CompleteOperation+0x2c>
 80200a0:	20002514 	.word	0x20002514

080200a4 <MobleProvision_ProvisionerNode_SetInputMessage>:
 80200a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80200a8:	4680      	mov	r8, r0
 80200aa:	b094      	sub	sp, #80	; 0x50
 80200ac:	4617      	mov	r7, r2
 80200ae:	460c      	mov	r4, r1
 80200b0:	b199      	cbz	r1, 80200da <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 80200b2:	4e92      	ldr	r6, [pc, #584]	; (80202fc <MobleProvision_ProvisionerNode_SetInputMessage+0x258>)
 80200b4:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 80200b8:	f7fe ff4c 	bl	801ef54 <MobleProvisionGetRole>
 80200bc:	4605      	mov	r5, r0
 80200be:	b960      	cbnz	r0, 80200da <MobleProvision_ProvisionerNode_SetInputMessage+0x36>
 80200c0:	f7e7 fed0 	bl	8007e64 <HAL_GetTick>
 80200c4:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	; 0xa18
 80200c8:	f8d9 31a8 	ldr.w	r3, [r9, #424]	; 0x1a8
 80200cc:	1ac0      	subs	r0, r0, r3
 80200ce:	4b8c      	ldr	r3, [pc, #560]	; (8020300 <MobleProvision_ProvisionerNode_SetInputMessage+0x25c>)
 80200d0:	4298      	cmp	r0, r3
 80200d2:	d904      	bls.n	80200de <MobleProvision_ProvisionerNode_SetInputMessage+0x3a>
 80200d4:	230d      	movs	r3, #13
 80200d6:	f889 3000 	strb.w	r3, [r9]
 80200da:	2503      	movs	r5, #3
 80200dc:	e089      	b.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80200de:	f7e7 fec1 	bl	8007e64 <HAL_GetTick>
 80200e2:	f1b8 0f09 	cmp.w	r8, #9
 80200e6:	f8c9 01a8 	str.w	r0, [r9, #424]	; 0x1a8
 80200ea:	d102      	bne.n	80200f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x4e>
 80200ec:	2f01      	cmp	r7, #1
 80200ee:	f000 80f3 	beq.w	80202d8 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 80200f2:	f8d6 9a18 	ldr.w	r9, [r6, #2584]	; 0xa18
 80200f6:	f899 3000 	ldrb.w	r3, [r9]
 80200fa:	3b01      	subs	r3, #1
 80200fc:	2b0a      	cmp	r3, #10
 80200fe:	f200 80ef 	bhi.w	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020102:	e8df f013 	tbh	[pc, r3, lsl #1]
 8020106:	000b      	.short	0x000b
 8020108:	00ed00ed 	.word	0x00ed00ed
 802010c:	009e007a 	.word	0x009e007a
 8020110:	00a500ed 	.word	0x00a500ed
 8020114:	00b100ed 	.word	0x00b100ed
 8020118:	00ef00ed 	.word	0x00ef00ed
 802011c:	f1b8 0f01 	cmp.w	r8, #1
 8020120:	f040 80de 	bne.w	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020124:	2f0b      	cmp	r7, #11
 8020126:	f040 80db 	bne.w	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 802012a:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	; 0x6f0
 802012e:	7823      	ldrb	r3, [r4, #0]
 8020130:	f888 327c 	strb.w	r3, [r8, #636]	; 0x27c
 8020134:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 8020138:	ba5b      	rev16	r3, r3
 802013a:	f8a9 3002 	strh.w	r3, [r9, #2]
 802013e:	fa1f fa83 	uxth.w	sl, r3
 8020142:	78e3      	ldrb	r3, [r4, #3]
 8020144:	f888 31fe 	strb.w	r3, [r8, #510]	; 0x1fe
 8020148:	7923      	ldrb	r3, [r4, #4]
 802014a:	f888 31ff 	strb.w	r3, [r8, #511]	; 0x1ff
 802014e:	7963      	ldrb	r3, [r4, #5]
 8020150:	f888 3206 	strb.w	r3, [r8, #518]	; 0x206
 8020154:	88e3      	ldrh	r3, [r4, #6]
 8020156:	f8a8 3202 	strh.w	r3, [r8, #514]	; 0x202
 802015a:	7a23      	ldrb	r3, [r4, #8]
 802015c:	f888 3207 	strb.w	r3, [r8, #519]	; 0x207
 8020160:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 8020164:	f8a8 3204 	strh.w	r3, [r8, #516]	; 0x204
 8020168:	463a      	mov	r2, r7
 802016a:	4621      	mov	r1, r4
 802016c:	f109 0005 	add.w	r0, r9, #5
 8020170:	f009 fb86 	bl	8029880 <memmove>
 8020174:	f01a 0f01 	tst.w	sl, #1
 8020178:	f000 80ae 	beq.w	80202d8 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 802017c:	f8d8 4290 	ldr.w	r4, [r8, #656]	; 0x290
 8020180:	2c00      	cmp	r4, #0
 8020182:	f000 80a9 	beq.w	80202d8 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 8020186:	f898 0207 	ldrb.w	r0, [r8, #519]	; 0x207
 802018a:	f8b8 3202 	ldrh.w	r3, [r8, #514]	; 0x202
 802018e:	f898 21ff 	ldrb.w	r2, [r8, #511]	; 0x1ff
 8020192:	f898 11fe 	ldrb.w	r1, [r8, #510]	; 0x1fe
 8020196:	9002      	str	r0, [sp, #8]
 8020198:	f898 0206 	ldrb.w	r0, [r8, #518]	; 0x206
 802019c:	9001      	str	r0, [sp, #4]
 802019e:	f8b8 0204 	ldrh.w	r0, [r8, #516]	; 0x204
 80201a2:	9000      	str	r0, [sp, #0]
 80201a4:	4857      	ldr	r0, [pc, #348]	; (8020304 <MobleProvision_ProvisionerNode_SetInputMessage+0x260>)
 80201a6:	47a0      	blx	r4
 80201a8:	f896 3a1c 	ldrb.w	r3, [r6, #2588]	; 0xa1c
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	f000 8093 	beq.w	80202d8 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 80201b2:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 80201b6:	f896 2a1d 	ldrb.w	r2, [r6, #2589]	; 0xa1d
 80201ba:	f883 21fa 	strb.w	r2, [r3, #506]	; 0x1fa
 80201be:	f896 2a1e 	ldrb.w	r2, [r6, #2590]	; 0xa1e
 80201c2:	f896 1a1f 	ldrb.w	r1, [r6, #2591]	; 0xa1f
 80201c6:	f883 11fc 	strb.w	r1, [r3, #508]	; 0x1fc
 80201ca:	2a01      	cmp	r2, #1
 80201cc:	f896 1a20 	ldrb.w	r1, [r6, #2592]	; 0xa20
 80201d0:	f883 21fb 	strb.w	r2, [r3, #507]	; 0x1fb
 80201d4:	f883 11fd 	strb.w	r1, [r3, #509]	; 0x1fd
 80201d8:	d10b      	bne.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80201da:	f7ff fe63 	bl	801fea4 <MobleProvision_ProvisionerNode_StateForOOB>
 80201de:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 80201e2:	f893 31fa 	ldrb.w	r3, [r3, #506]	; 0x1fa
 80201e6:	b123      	cbz	r3, 80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80201e8:	f8d6 2a18 	ldr.w	r2, [r6, #2584]	; 0xa18
 80201ec:	7813      	ldrb	r3, [r2, #0]
 80201ee:	3b01      	subs	r3, #1
 80201f0:	7013      	strb	r3, [r2, #0]
 80201f2:	4628      	mov	r0, r5
 80201f4:	b014      	add	sp, #80	; 0x50
 80201f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80201fa:	f1b8 0f03 	cmp.w	r8, #3
 80201fe:	d16f      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020200:	2f40      	cmp	r7, #64	; 0x40
 8020202:	d16d      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020204:	f109 08f5 	add.w	r8, r9, #245	; 0xf5
 8020208:	463a      	mov	r2, r7
 802020a:	4621      	mov	r1, r4
 802020c:	4640      	mov	r0, r8
 802020e:	f009 fb37 	bl	8029880 <memmove>
 8020212:	463a      	mov	r2, r7
 8020214:	4621      	mov	r1, r4
 8020216:	f109 0055 	add.w	r0, r9, #85	; 0x55
 802021a:	f009 fb31 	bl	8029880 <memmove>
 802021e:	4640      	mov	r0, r8
 8020220:	f7f9 fd88 	bl	8019d34 <MoblePalCryptoGetEccGenSecret>
 8020224:	2800      	cmp	r0, #0
 8020226:	d057      	beq.n	80202d8 <MobleProvision_ProvisionerNode_SetInputMessage+0x234>
 8020228:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	; 0xa18
 802022c:	1e42      	subs	r2, r0, #1
 802022e:	f203 1335 	addw	r3, r3, #309	; 0x135
 8020232:	301f      	adds	r0, #31
 8020234:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8020238:	f803 1b01 	strb.w	r1, [r3], #1
 802023c:	4282      	cmp	r2, r0
 802023e:	d1f9      	bne.n	8020234 <MobleProvision_ProvisionerNode_SetInputMessage+0x190>
 8020240:	e7d7      	b.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 8020242:	f1b8 0f04 	cmp.w	r8, #4
 8020246:	d14b      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020248:	2f00      	cmp	r7, #0
 802024a:	bf18      	it	ne
 802024c:	2502      	movne	r5, #2
 802024e:	e7d0      	b.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 8020250:	f1b8 0f05 	cmp.w	r8, #5
 8020254:	d144      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020256:	2f10      	cmp	r7, #16
 8020258:	d142      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 802025a:	463a      	mov	r2, r7
 802025c:	4621      	mov	r1, r4
 802025e:	f209 1095 	addw	r0, r9, #405	; 0x195
 8020262:	f009 fb0d 	bl	8029880 <memmove>
 8020266:	e7c4      	b.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 8020268:	f1b8 0f06 	cmp.w	r8, #6
 802026c:	d138      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 802026e:	2f10      	cmp	r7, #16
 8020270:	d136      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 8020272:	463a      	mov	r2, r7
 8020274:	4621      	mov	r1, r4
 8020276:	f209 1085 	addw	r0, r9, #389	; 0x185
 802027a:	af08      	add	r7, sp, #32
 802027c:	f009 fb00 	bl	8029880 <memmove>
 8020280:	2300      	movs	r3, #0
 8020282:	4638      	mov	r0, r7
 8020284:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8020288:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 802028c:	f7fe ff08 	bl	801f0a0 <MobleProvisionGenerateAuthValue>
 8020290:	aa0c      	add	r2, sp, #48	; 0x30
 8020292:	f104 0c10 	add.w	ip, r4, #16
 8020296:	6820      	ldr	r0, [r4, #0]
 8020298:	6861      	ldr	r1, [r4, #4]
 802029a:	4613      	mov	r3, r2
 802029c:	c303      	stmia	r3!, {r0, r1}
 802029e:	3408      	adds	r4, #8
 80202a0:	4564      	cmp	r4, ip
 80202a2:	461a      	mov	r2, r3
 80202a4:	d1f7      	bne.n	8020296 <MobleProvision_ProvisionerNode_SetInputMessage+0x1f2>
 80202a6:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 80202aa:	ac14      	add	r4, sp, #80	; 0x50
 80202ac:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80202b0:	f8d6 0a18 	ldr.w	r0, [r6, #2584]	; 0xa18
 80202b4:	2220      	movs	r2, #32
 80202b6:	a90c      	add	r1, sp, #48	; 0x30
 80202b8:	f200 1055 	addw	r0, r0, #341	; 0x155
 80202bc:	ab04      	add	r3, sp, #16
 80202be:	f7f8 f9b7 	bl	8018630 <BAES_CmacCompute>
 80202c2:	f8d6 1a18 	ldr.w	r1, [r6, #2584]	; 0xa18
 80202c6:	2210      	movs	r2, #16
 80202c8:	f201 1195 	addw	r1, r1, #405	; 0x195
 80202cc:	eb0d 0002 	add.w	r0, sp, r2
 80202d0:	f009 fac6 	bl	8029860 <memcmp>
 80202d4:	2800      	cmp	r0, #0
 80202d6:	d08c      	beq.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80202d8:	f8d6 3a18 	ldr.w	r3, [r6, #2584]	; 0xa18
 80202dc:	220d      	movs	r2, #13
 80202de:	701a      	strb	r2, [r3, #0]
 80202e0:	2502      	movs	r5, #2
 80202e2:	e786      	b.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80202e4:	f1b8 0f08 	cmp.w	r8, #8
 80202e8:	d1fa      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80202ea:	2f00      	cmp	r7, #0
 80202ec:	d1f8      	bne.n	80202e0 <MobleProvision_ProvisionerNode_SetInputMessage+0x23c>
 80202ee:	230c      	movs	r3, #12
 80202f0:	f889 3000 	strb.w	r3, [r9]
 80202f4:	f7e6 f8be 	bl	8006474 <BLEMesh_ProvisionCallback>
 80202f8:	463d      	mov	r5, r7
 80202fa:	e77a      	b.n	80201f2 <MobleProvision_ProvisionerNode_SetInputMessage+0x14e>
 80202fc:	20002514 	.word	0x20002514
 8020300:	0001d4c0 	.word	0x0001d4c0
 8020304:	20002f30 	.word	0x20002f30

08020308 <MobleProvision_ProvisionerNode_GetOutputMessage>:
 8020308:	b410      	push	{r4}
 802030a:	b129      	cbz	r1, 8020318 <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 802030c:	b122      	cbz	r2, 8020318 <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 802030e:	b118      	cbz	r0, 8020318 <MobleProvision_ProvisionerNode_GetOutputMessage+0x10>
 8020310:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020314:	f7ff babc 	b.w	801f890 <MobleProvision_ProvisionerNode_GetOutputMessage.part.0>
 8020318:	2003      	movs	r0, #3
 802031a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802031e:	4770      	bx	lr

08020320 <MobleProvision_ProvisionerNode_IsCompleted>:
 8020320:	4b04      	ldr	r3, [pc, #16]	; (8020334 <MobleProvision_ProvisionerNode_IsCompleted+0x14>)
 8020322:	f8d3 3a18 	ldr.w	r3, [r3, #2584]	; 0xa18
 8020326:	7818      	ldrb	r0, [r3, #0]
 8020328:	f1a0 030c 	sub.w	r3, r0, #12
 802032c:	4258      	negs	r0, r3
 802032e:	4158      	adcs	r0, r3
 8020330:	4770      	bx	lr
 8020332:	bf00      	nop
 8020334:	20002514 	.word	0x20002514

08020338 <MobleProvision_GetNextOperation>:
 8020338:	b908      	cbnz	r0, 802033e <MobleProvision_GetNextOperation+0x6>
 802033a:	f7ff bd9d 	b.w	801fe78 <MobleProvision_ProvisionerNode_GetNextOperation>
 802033e:	f7fe bf61 	b.w	801f204 <MobleProvision_UnprovisionedNode_GetNextOperation>

08020342 <MobleProvision_GetOutputMessage>:
 8020342:	b410      	push	{r4}
 8020344:	4604      	mov	r4, r0
 8020346:	4608      	mov	r0, r1
 8020348:	4611      	mov	r1, r2
 802034a:	461a      	mov	r2, r3
 802034c:	b91c      	cbnz	r4, 8020356 <MobleProvision_GetOutputMessage+0x14>
 802034e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020352:	f7ff bfd9 	b.w	8020308 <MobleProvision_ProvisionerNode_GetOutputMessage>
 8020356:	f85d 4b04 	ldr.w	r4, [sp], #4
 802035a:	f7ff bcc7 	b.w	801fcec <MobleProvision_UnprovisionedNode_GetOutputMessage>

0802035e <MobleProvision_IsCompleted>:
 802035e:	b908      	cbnz	r0, 8020364 <MobleProvision_IsCompleted+0x6>
 8020360:	f7ff bfde 	b.w	8020320 <MobleProvision_ProvisionerNode_IsCompleted>
 8020364:	f7ff bd40 	b.w	801fde8 <MobleProvision_UnprovisionedNode_IsCompleted>

08020368 <MoblePBADVInit>:
 8020368:	4b0b      	ldr	r3, [pc, #44]	; (8020398 <MoblePBADVInit+0x30>)
 802036a:	f203 62fc 	addw	r2, r3, #1788	; 0x6fc
 802036e:	6002      	str	r2, [r0, #0]
 8020370:	f893 26fc 	ldrb.w	r2, [r3, #1788]	; 0x6fc
 8020374:	b132      	cbz	r2, 8020384 <MoblePBADVInit+0x1c>
 8020376:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
 802037a:	3201      	adds	r2, #1
 802037c:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
 8020380:	2000      	movs	r0, #0
 8020382:	4770      	bx	lr
 8020384:	2101      	movs	r1, #1
 8020386:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
 802038a:	f883 16fc 	strb.w	r1, [r3, #1788]	; 0x6fc
 802038e:	f883 2704 	strb.w	r2, [r3, #1796]	; 0x704
 8020392:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8020396:	e7f3      	b.n	8020380 <MoblePBADVInit+0x18>
 8020398:	20002514 	.word	0x20002514

0802039c <MoblePBADVStartProvisioning>:
 802039c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80203a0:	2a01      	cmp	r2, #1
 80203a2:	9e08      	ldr	r6, [sp, #32]
 80203a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80203a8:	4604      	mov	r4, r0
 80203aa:	460f      	mov	r7, r1
 80203ac:	4615      	mov	r5, r2
 80203ae:	4698      	mov	r8, r3
 80203b0:	d145      	bne.n	802043e <MoblePBADVStartProvisioning+0xa2>
 80203b2:	7a03      	ldrb	r3, [r0, #8]
 80203b4:	2b01      	cmp	r3, #1
 80203b6:	d106      	bne.n	80203c6 <MoblePBADVStartProvisioning+0x2a>
 80203b8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 80203bc:	2b01      	cmp	r3, #1
 80203be:	d102      	bne.n	80203c6 <MoblePBADVStartProvisioning+0x2a>
 80203c0:	2002      	movs	r0, #2
 80203c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80203c6:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
 80203ca:	2b01      	cmp	r3, #1
 80203cc:	d032      	beq.n	8020434 <MoblePBADVStartProvisioning+0x98>
 80203ce:	4620      	mov	r0, r4
 80203d0:	f7f7 fe72 	bl	80180b8 <MoblePBADVGetNewLink>
 80203d4:	4604      	mov	r4, r0
 80203d6:	2800      	cmp	r0, #0
 80203d8:	d0f2      	beq.n	80203c0 <MoblePBADVStartProvisioning+0x24>
 80203da:	2d01      	cmp	r5, #1
 80203dc:	d145      	bne.n	802046a <MoblePBADVStartProvisioning+0xce>
 80203de:	2300      	movs	r3, #0
 80203e0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 80203e4:	2380      	movs	r3, #128	; 0x80
 80203e6:	f880 30b8 	strb.w	r3, [r0, #184]	; 0xb8
 80203ea:	463b      	mov	r3, r7
 80203ec:	f104 0208 	add.w	r2, r4, #8
 80203f0:	f107 0110 	add.w	r1, r7, #16
 80203f4:	f853 0b04 	ldr.w	r0, [r3], #4
 80203f8:	f842 0b04 	str.w	r0, [r2], #4
 80203fc:	428b      	cmp	r3, r1
 80203fe:	d1f9      	bne.n	80203f4 <MoblePBADVStartProvisioning+0x58>
 8020400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020402:	f8c4 8018 	str.w	r8, [r4, #24]
 8020406:	f884 5020 	strb.w	r5, [r4, #32]
 802040a:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
 802040e:	f1b9 0f00 	cmp.w	r9, #0
 8020412:	d001      	beq.n	8020418 <MoblePBADVStartProvisioning+0x7c>
 8020414:	f8c4 916c 	str.w	r9, [r4, #364]	; 0x16c
 8020418:	b945      	cbnz	r5, 802042c <MoblePBADVStartProvisioning+0x90>
 802041a:	2301      	movs	r3, #1
 802041c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8020420:	463a      	mov	r2, r7
 8020422:	2310      	movs	r3, #16
 8020424:	4629      	mov	r1, r5
 8020426:	4620      	mov	r0, r4
 8020428:	f7fa fc56 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 802042c:	b32e      	cbz	r6, 802047a <MoblePBADVStartProvisioning+0xde>
 802042e:	6034      	str	r4, [r6, #0]
 8020430:	2000      	movs	r0, #0
 8020432:	e7c6      	b.n	80203c2 <MoblePBADVStartProvisioning+0x26>
 8020434:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 8020438:	2b01      	cmp	r3, #1
 802043a:	d1c8      	bne.n	80203ce <MoblePBADVStartProvisioning+0x32>
 802043c:	e7c0      	b.n	80203c0 <MoblePBADVStartProvisioning+0x24>
 802043e:	2a00      	cmp	r2, #0
 8020440:	d1c5      	bne.n	80203ce <MoblePBADVStartProvisioning+0x32>
 8020442:	7a03      	ldrb	r3, [r0, #8]
 8020444:	2b01      	cmp	r3, #1
 8020446:	d103      	bne.n	8020450 <MoblePBADVStartProvisioning+0xb4>
 8020448:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 802044c:	2b00      	cmp	r3, #0
 802044e:	d0b7      	beq.n	80203c0 <MoblePBADVStartProvisioning+0x24>
 8020450:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
 8020454:	2b01      	cmp	r3, #1
 8020456:	d103      	bne.n	8020460 <MoblePBADVStartProvisioning+0xc4>
 8020458:	f894 319c 	ldrb.w	r3, [r4, #412]	; 0x19c
 802045c:	2b00      	cmp	r3, #0
 802045e:	d0af      	beq.n	80203c0 <MoblePBADVStartProvisioning+0x24>
 8020460:	f7ff fcce 	bl	801fe00 <MobleProvision_ProvisionerNode_Init>
 8020464:	2800      	cmp	r0, #0
 8020466:	d0b2      	beq.n	80203ce <MoblePBADVStartProvisioning+0x32>
 8020468:	e7aa      	b.n	80203c0 <MoblePBADVStartProvisioning+0x24>
 802046a:	2d00      	cmp	r5, #0
 802046c:	d1bd      	bne.n	80203ea <MoblePBADVStartProvisioning+0x4e>
 802046e:	2380      	movs	r3, #128	; 0x80
 8020470:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8020474:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
 8020478:	e7b7      	b.n	80203ea <MoblePBADVStartProvisioning+0x4e>
 802047a:	4630      	mov	r0, r6
 802047c:	e7a1      	b.n	80203c2 <MoblePBADVStartProvisioning+0x26>
	...

08020480 <MobleStackStartPBADVUnprovisioned>:
 8020480:	b530      	push	{r4, r5, lr}
 8020482:	4d0d      	ldr	r5, [pc, #52]	; (80204b8 <MobleStackStartPBADVUnprovisioned+0x38>)
 8020484:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 8020488:	781c      	ldrb	r4, [r3, #0]
 802048a:	b089      	sub	sp, #36	; 0x24
 802048c:	b98c      	cbnz	r4, 80204b2 <MobleStackStartPBADVUnprovisioned+0x32>
 802048e:	4b0b      	ldr	r3, [pc, #44]	; (80204bc <MobleStackStartPBADVUnprovisioned+0x3c>)
 8020490:	685b      	ldr	r3, [r3, #4]
 8020492:	a804      	add	r0, sp, #16
 8020494:	695b      	ldr	r3, [r3, #20]
 8020496:	4798      	blx	r3
 8020498:	e9cd 4401 	strd	r4, r4, [sp, #4]
 802049c:	f8d5 091c 	ldr.w	r0, [r5, #2332]	; 0x91c
 80204a0:	9400      	str	r4, [sp, #0]
 80204a2:	2318      	movs	r3, #24
 80204a4:	2201      	movs	r2, #1
 80204a6:	a904      	add	r1, sp, #16
 80204a8:	f7ff ff78 	bl	802039c <MoblePBADVStartProvisioning>
 80204ac:	4620      	mov	r0, r4
 80204ae:	b009      	add	sp, #36	; 0x24
 80204b0:	bd30      	pop	{r4, r5, pc}
 80204b2:	2401      	movs	r4, #1
 80204b4:	e7fa      	b.n	80204ac <MobleStackStartPBADVUnprovisioned+0x2c>
 80204b6:	bf00      	nop
 80204b8:	2000141c 	.word	0x2000141c
 80204bc:	20000324 	.word	0x20000324

080204c0 <MobleStackSetupBeacon>:
 80204c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80204c2:	4604      	mov	r4, r0
 80204c4:	2800      	cmp	r0, #0
 80204c6:	d044      	beq.n	8020552 <MobleStackSetupBeacon+0x92>
 80204c8:	f890 31d4 	ldrb.w	r3, [r0, #468]	; 0x1d4
 80204cc:	2b01      	cmp	r3, #1
 80204ce:	d101      	bne.n	80204d4 <MobleStackSetupBeacon+0x14>
 80204d0:	f7ff ffd6 	bl	8020480 <MobleStackStartPBADVUnprovisioned>
 80204d4:	f504 73ec 	add.w	r3, r4, #472	; 0x1d8
 80204d8:	2200      	movs	r2, #0
 80204da:	9300      	str	r3, [sp, #0]
 80204dc:	481e      	ldr	r0, [pc, #120]	; (8020558 <MobleStackSetupBeacon+0x98>)
 80204de:	f504 73ee 	add.w	r3, r4, #476	; 0x1dc
 80204e2:	4611      	mov	r1, r2
 80204e4:	f7fa fbc6 	bl	801ac74 <MobleTransmitRegularlyGenerated>
 80204e8:	2801      	cmp	r0, #1
 80204ea:	d830      	bhi.n	802054e <MobleStackSetupBeacon+0x8e>
 80204ec:	6823      	ldr	r3, [r4, #0]
 80204ee:	4d1b      	ldr	r5, [pc, #108]	; (802055c <MobleStackSetupBeacon+0x9c>)
 80204f0:	781b      	ldrb	r3, [r3, #0]
 80204f2:	f8d5 0858 	ldr.w	r0, [r5, #2136]	; 0x858
 80204f6:	2b01      	cmp	r3, #1
 80204f8:	f242 7310 	movw	r3, #10000	; 0x2710
 80204fc:	bf18      	it	ne
 80204fe:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
 8020502:	f8a4 31dc 	strh.w	r3, [r4, #476]	; 0x1dc
 8020506:	f7fa fb81 	bl	801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>
 802050a:	f504 73f0 	add.w	r3, r4, #480	; 0x1e0
 802050e:	2201      	movs	r2, #1
 8020510:	9300      	str	r3, [sp, #0]
 8020512:	4813      	ldr	r0, [pc, #76]	; (8020560 <MobleStackSetupBeacon+0xa0>)
 8020514:	f504 73f2 	add.w	r3, r4, #484	; 0x1e4
 8020518:	4611      	mov	r1, r2
 802051a:	f7fa fbab 	bl	801ac74 <MobleTransmitRegularlyGenerated>
 802051e:	2801      	cmp	r0, #1
 8020520:	d815      	bhi.n	802054e <MobleStackSetupBeacon+0x8e>
 8020522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8020526:	f8a4 31e4 	strh.w	r3, [r4, #484]	; 0x1e4
 802052a:	f8d5 0860 	ldr.w	r0, [r5, #2144]	; 0x860
 802052e:	f7fa fb6d 	bl	801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>
 8020532:	f504 73f4 	add.w	r3, r4, #488	; 0x1e8
 8020536:	2200      	movs	r2, #0
 8020538:	9300      	str	r3, [sp, #0]
 802053a:	480a      	ldr	r0, [pc, #40]	; (8020564 <MobleStackSetupBeacon+0xa4>)
 802053c:	f504 73f6 	add.w	r3, r4, #492	; 0x1ec
 8020540:	4611      	mov	r1, r2
 8020542:	f7fa fb97 	bl	801ac74 <MobleTransmitRegularlyGenerated>
 8020546:	2802      	cmp	r0, #2
 8020548:	bf28      	it	cs
 802054a:	2002      	movcs	r0, #2
 802054c:	b2c0      	uxtb	r0, r0
 802054e:	b003      	add	sp, #12
 8020550:	bd30      	pop	{r4, r5, pc}
 8020552:	2002      	movs	r0, #2
 8020554:	e7fb      	b.n	802054e <MobleStackSetupBeacon+0x8e>
 8020556:	bf00      	nop
 8020558:	08021079 	.word	0x08021079
 802055c:	2000141c 	.word	0x2000141c
 8020560:	0801d6f5 	.word	0x0801d6f5
 8020564:	0801d1cd 	.word	0x0801d1cd

08020568 <MobleStackFSM>:
 8020568:	b538      	push	{r3, r4, r5, lr}
 802056a:	4605      	mov	r5, r0
 802056c:	2800      	cmp	r0, #0
 802056e:	d05c      	beq.n	802062a <MobleStackFSM+0xc2>
 8020570:	f890 416c 	ldrb.w	r4, [r0, #364]	; 0x16c
 8020574:	2c04      	cmp	r4, #4
 8020576:	d853      	bhi.n	8020620 <MobleStackFSM+0xb8>
 8020578:	e8df f004 	tbb	[pc, r4]
 802057c:	522a1303 	.word	0x522a1303
 8020580:	45          	.byte	0x45
 8020581:	00          	.byte	0x00
 8020582:	2906      	cmp	r1, #6
 8020584:	d809      	bhi.n	802059a <MobleStackFSM+0x32>
 8020586:	e8df f001 	tbb	[pc, r1]
 802058a:	0849      	.short	0x0849
 802058c:	04044908 	.word	0x04044908
 8020590:	16          	.byte	0x16
 8020591:	00          	.byte	0x00
 8020592:	f7ff ff95 	bl	80204c0 <MobleStackSetupBeacon>
 8020596:	2801      	cmp	r0, #1
 8020598:	d93d      	bls.n	8020616 <MobleStackFSM+0xae>
 802059a:	2303      	movs	r3, #3
 802059c:	f885 316c 	strb.w	r3, [r5, #364]	; 0x16c
 80205a0:	e005      	b.n	80205ae <MobleStackFSM+0x46>
 80205a2:	2905      	cmp	r1, #5
 80205a4:	d805      	bhi.n	80205b2 <MobleStackFSM+0x4a>
 80205a6:	2903      	cmp	r1, #3
 80205a8:	d80b      	bhi.n	80205c2 <MobleStackFSM+0x5a>
 80205aa:	2901      	cmp	r1, #1
 80205ac:	d007      	beq.n	80205be <MobleStackFSM+0x56>
 80205ae:	2400      	movs	r4, #0
 80205b0:	e034      	b.n	802061c <MobleStackFSM+0xb4>
 80205b2:	2906      	cmp	r1, #6
 80205b4:	d1fb      	bne.n	80205ae <MobleStackFSM+0x46>
 80205b6:	f7fe ffa1 	bl	801f4fc <MobleTransmitSuspendAll>
 80205ba:	2304      	movs	r3, #4
 80205bc:	e7ee      	b.n	802059c <MobleStackFSM+0x34>
 80205be:	2302      	movs	r3, #2
 80205c0:	e7ec      	b.n	802059c <MobleStackFSM+0x34>
 80205c2:	f8d0 01d8 	ldr.w	r0, [r0, #472]	; 0x1d8
 80205c6:	f7fa fabb 	bl	801ab40 <MobleTransmitOutOfTurn>
 80205ca:	2801      	cmp	r0, #1
 80205cc:	d8e5      	bhi.n	802059a <MobleStackFSM+0x32>
 80205ce:	e7ee      	b.n	80205ae <MobleStackFSM+0x46>
 80205d0:	3901      	subs	r1, #1
 80205d2:	2905      	cmp	r1, #5
 80205d4:	d8e1      	bhi.n	802059a <MobleStackFSM+0x32>
 80205d6:	a301      	add	r3, pc, #4	; (adr r3, 80205dc <MobleStackFSM+0x74>)
 80205d8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 80205dc:	080205af 	.word	0x080205af
 80205e0:	080205f5 	.word	0x080205f5
 80205e4:	080205af 	.word	0x080205af
 80205e8:	080205af 	.word	0x080205af
 80205ec:	080205af 	.word	0x080205af
 80205f0:	080205f9 	.word	0x080205f9
 80205f4:	2301      	movs	r3, #1
 80205f6:	e7d1      	b.n	802059c <MobleStackFSM+0x34>
 80205f8:	4b0d      	ldr	r3, [pc, #52]	; (8020630 <MobleStackFSM+0xc8>)
 80205fa:	2116      	movs	r1, #22
 80205fc:	f8b3 0382 	ldrh.w	r0, [r3, #898]	; 0x382
 8020600:	f7f4 f86c 	bl	80146dc <aci_gap_terminate>
 8020604:	e7d7      	b.n	80205b6 <MobleStackFSM+0x4e>
 8020606:	2907      	cmp	r1, #7
 8020608:	d1d1      	bne.n	80205ae <MobleStackFSM+0x46>
 802060a:	4b0a      	ldr	r3, [pc, #40]	; (8020634 <MobleStackFSM+0xcc>)
 802060c:	2400      	movs	r4, #0
 802060e:	f883 4166 	strb.w	r4, [r3, #358]	; 0x166
 8020612:	f7fe ff83 	bl	801f51c <MobleTransmitResumeAll>
 8020616:	2301      	movs	r3, #1
 8020618:	f885 316c 	strb.w	r3, [r5, #364]	; 0x16c
 802061c:	4620      	mov	r0, r4
 802061e:	bd38      	pop	{r3, r4, r5, pc}
 8020620:	2303      	movs	r3, #3
 8020622:	f880 316c 	strb.w	r3, [r0, #364]	; 0x16c
 8020626:	2402      	movs	r4, #2
 8020628:	e7f8      	b.n	802061c <MobleStackFSM+0xb4>
 802062a:	2403      	movs	r4, #3
 802062c:	e7f6      	b.n	802061c <MobleStackFSM+0xb4>
 802062e:	bf00      	nop
 8020630:	2000141c 	.word	0x2000141c
 8020634:	20003f64 	.word	0x20003f64

08020638 <MobleStackTimerCallback>:
 8020638:	4801      	ldr	r0, [pc, #4]	; (8020640 <MobleStackTimerCallback+0x8>)
 802063a:	2100      	movs	r1, #0
 802063c:	f7ff bf94 	b.w	8020568 <MobleStackFSM>
 8020640:	20001a9c 	.word	0x20001a9c

08020644 <MobleStackInit>:
 8020644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020646:	b085      	sub	sp, #20
 8020648:	4616      	mov	r6, r2
 802064a:	f89d 4028 	ldrb.w	r4, [sp, #40]	; 0x28
 802064e:	b911      	cbnz	r1, 8020656 <MobleStackInit+0x12>
 8020650:	2003      	movs	r0, #3
 8020652:	b005      	add	sp, #20
 8020654:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020656:	4d45      	ldr	r5, [pc, #276]	; (802076c <MobleStackInit+0x128>)
 8020658:	9303      	str	r3, [sp, #12]
 802065a:	f505 67d0 	add.w	r7, r5, #1664	; 0x680
 802065e:	07a3      	lsls	r3, r4, #30
 8020660:	600f      	str	r7, [r1, #0]
 8020662:	f8c5 0680 	str.w	r0, [r5, #1664]	; 0x680
 8020666:	d0f3      	beq.n	8020650 <MobleStackInit+0xc>
 8020668:	f004 0201 	and.w	r2, r4, #1
 802066c:	f3c4 0440 	ubfx	r4, r4, #1, #1
 8020670:	f885 2854 	strb.w	r2, [r5, #2132]	; 0x854
 8020674:	f885 4855 	strb.w	r4, [r5, #2133]	; 0x855
 8020678:	f7f7 fa52 	bl	8017b20 <MoblePalTimerInit>
 802067c:	2801      	cmp	r0, #1
 802067e:	9b03      	ldr	r3, [sp, #12]
 8020680:	d8e7      	bhi.n	8020652 <MobleStackInit+0xe>
 8020682:	4a3b      	ldr	r2, [pc, #236]	; (8020770 <MobleStackInit+0x12c>)
 8020684:	f8c5 2344 	str.w	r2, [r5, #836]	; 0x344
 8020688:	4a3a      	ldr	r2, [pc, #232]	; (8020774 <MobleStackInit+0x130>)
 802068a:	f8c5 2348 	str.w	r2, [r5, #840]	; 0x348
 802068e:	2200      	movs	r2, #0
 8020690:	f8c5 27e4 	str.w	r2, [r5, #2020]	; 0x7e4
 8020694:	4a38      	ldr	r2, [pc, #224]	; (8020778 <MobleStackInit+0x134>)
 8020696:	9201      	str	r2, [sp, #4]
 8020698:	4a38      	ldr	r2, [pc, #224]	; (802077c <MobleStackInit+0x138>)
 802069a:	9200      	str	r2, [sp, #0]
 802069c:	7831      	ldrb	r1, [r6, #0]
 802069e:	6872      	ldr	r2, [r6, #4]
 80206a0:	4638      	mov	r0, r7
 80206a2:	f7f7 fcc3 	bl	801802c <MoblePalBluetoothInit>
 80206a6:	2801      	cmp	r0, #1
 80206a8:	d8d3      	bhi.n	8020652 <MobleStackInit+0xe>
 80206aa:	f7f8 fc4f 	bl	8018f4c <MoblePalCryptoInit>
 80206ae:	2801      	cmp	r0, #1
 80206b0:	d8cf      	bhi.n	8020652 <MobleStackInit+0xe>
 80206b2:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
 80206b6:	2b01      	cmp	r3, #1
 80206b8:	d012      	beq.n	80206e0 <MobleStackInit+0x9c>
 80206ba:	2301      	movs	r3, #1
 80206bc:	f8d5 0680 	ldr.w	r0, [r5, #1664]	; 0x680
 80206c0:	f885 3934 	strb.w	r3, [r5, #2356]	; 0x934
 80206c4:	f7fc fa7e 	bl	801cbc4 <MobleConfigNetworkLoad>
 80206c8:	2801      	cmp	r0, #1
 80206ca:	d810      	bhi.n	80206ee <MobleStackInit+0xaa>
 80206cc:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 80206d0:	4618      	mov	r0, r3
 80206d2:	f7fc fbc9 	bl	801ce68 <MobleConfigCheck>
 80206d6:	7018      	strb	r0, [r3, #0]
 80206d8:	b978      	cbnz	r0, 80206fa <MobleStackInit+0xb6>
 80206da:	f885 0934 	strb.w	r0, [r5, #2356]	; 0x934
 80206de:	e00c      	b.n	80206fa <MobleStackInit+0xb6>
 80206e0:	f605 101c 	addw	r0, r5, #2332	; 0x91c
 80206e4:	f7ff fe40 	bl	8020368 <MoblePBADVInit>
 80206e8:	2801      	cmp	r0, #1
 80206ea:	d9e6      	bls.n	80206ba <MobleStackInit+0x76>
 80206ec:	e7b1      	b.n	8020652 <MobleStackInit+0xe>
 80206ee:	f8d5 2680 	ldr.w	r2, [r5, #1664]	; 0x680
 80206f2:	2300      	movs	r3, #0
 80206f4:	7013      	strb	r3, [r2, #0]
 80206f6:	f885 3934 	strb.w	r3, [r5, #2356]	; 0x934
 80206fa:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 80206fe:	6858      	ldr	r0, [r3, #4]
 8020700:	f7f9 fa8e 	bl	8019c20 <MoblePalCryptoSetIvIndex>
 8020704:	2801      	cmp	r0, #1
 8020706:	d8a4      	bhi.n	8020652 <MobleStackInit+0xe>
 8020708:	f7fe fc42 	bl	801ef90 <MoblePalBluetoothReset>
 802070c:	4a1c      	ldr	r2, [pc, #112]	; (8020780 <MobleStackInit+0x13c>)
 802070e:	491d      	ldr	r1, [pc, #116]	; (8020784 <MobleStackInit+0x140>)
 8020710:	f502 70ba 	add.w	r0, r2, #372	; 0x174
 8020714:	f7f7 fa14 	bl	8017b40 <MoblePalTimerCreate>
 8020718:	2801      	cmp	r0, #1
 802071a:	d89a      	bhi.n	8020652 <MobleStackInit+0xe>
 802071c:	4b1a      	ldr	r3, [pc, #104]	; (8020788 <MobleStackInit+0x144>)
 802071e:	4818      	ldr	r0, [pc, #96]	; (8020780 <MobleStackInit+0x13c>)
 8020720:	f8c5 3358 	str.w	r3, [r5, #856]	; 0x358
 8020724:	f7fe fa98 	bl	801ec58 <MobleProvisionUpdateRole>
 8020728:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802072a:	8818      	ldrh	r0, [r3, #0]
 802072c:	f7fe fec4 	bl	801f4b8 <MobleTransmitInit>
 8020730:	f04f 33ff 	mov.w	r3, #4294967295
 8020734:	2400      	movs	r4, #0
 8020736:	f8c5 3858 	str.w	r3, [r5, #2136]	; 0x858
 802073a:	f8c5 3860 	str.w	r3, [r5, #2144]	; 0x860
 802073e:	4b13      	ldr	r3, [pc, #76]	; (802078c <MobleStackInit+0x148>)
 8020740:	f8c5 3924 	str.w	r3, [r5, #2340]	; 0x924
 8020744:	f8a5 4850 	strh.w	r4, [r5, #2128]	; 0x850
 8020748:	f885 47ec 	strb.w	r4, [r5, #2028]	; 0x7ec
 802074c:	f7e7 fb8a 	bl	8007e64 <HAL_GetTick>
 8020750:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 8020754:	f8c5 0928 	str.w	r0, [r5, #2344]	; 0x928
 8020758:	781b      	ldrb	r3, [r3, #0]
 802075a:	4809      	ldr	r0, [pc, #36]	; (8020780 <MobleStackInit+0x13c>)
 802075c:	42a3      	cmp	r3, r4
 802075e:	bf0c      	ite	eq
 8020760:	2105      	moveq	r1, #5
 8020762:	2104      	movne	r1, #4
 8020764:	f7ff ff00 	bl	8020568 <MobleStackFSM>
 8020768:	4620      	mov	r0, r4
 802076a:	e772      	b.n	8020652 <MobleStackInit+0xe>
 802076c:	2000141c 	.word	0x2000141c
 8020770:	0801798d 	.word	0x0801798d
 8020774:	08027d4d 	.word	0x08027d4d
 8020778:	08028183 	.word	0x08028183
 802077c:	0801d09d 	.word	0x0801d09d
 8020780:	20001a9c 	.word	0x20001a9c
 8020784:	08020639 	.word	0x08020639
 8020788:	08027b55 	.word	0x08027b55
 802078c:	1ee62800 	.word	0x1ee62800

08020790 <MobleStackSendData>:
 8020790:	b570      	push	{r4, r5, r6, lr}
 8020792:	4604      	mov	r4, r0
 8020794:	b08a      	sub	sp, #40	; 0x28
 8020796:	2800      	cmp	r0, #0
 8020798:	d03e      	beq.n	8020818 <MobleStackSendData+0x88>
 802079a:	7a05      	ldrb	r5, [r0, #8]
 802079c:	f1a5 030e 	sub.w	r3, r5, #14
 80207a0:	2b0f      	cmp	r3, #15
 80207a2:	d839      	bhi.n	8020818 <MobleStackSendData+0x88>
 80207a4:	4b1e      	ldr	r3, [pc, #120]	; (8020820 <MobleStackSendData+0x90>)
 80207a6:	f893 27ec 	ldrb.w	r2, [r3, #2028]	; 0x7ec
 80207aa:	2a04      	cmp	r2, #4
 80207ac:	d036      	beq.n	802081c <MobleStackSendData+0x8c>
 80207ae:	f8d3 3680 	ldr.w	r3, [r3, #1664]	; 0x680
 80207b2:	781b      	ldrb	r3, [r3, #0]
 80207b4:	2b01      	cmp	r3, #1
 80207b6:	d128      	bne.n	802080a <MobleStackSendData+0x7a>
 80207b8:	6846      	ldr	r6, [r0, #4]
 80207ba:	1c6b      	adds	r3, r5, #1
 80207bc:	f88d 3008 	strb.w	r3, [sp, #8]
 80207c0:	462a      	mov	r2, r5
 80207c2:	232a      	movs	r3, #42	; 0x2a
 80207c4:	4631      	mov	r1, r6
 80207c6:	f10d 000a 	add.w	r0, sp, #10
 80207ca:	f88d 3009 	strb.w	r3, [sp, #9]
 80207ce:	f009 f902 	bl	80299d6 <memcpy>
 80207d2:	462b      	mov	r3, r5
 80207d4:	4632      	mov	r2, r6
 80207d6:	8ae1      	ldrh	r1, [r4, #22]
 80207d8:	2000      	movs	r0, #0
 80207da:	f7fd f93d 	bl	801da58 <BnrgmProxyProtocol_SendData>
 80207de:	4b11      	ldr	r3, [pc, #68]	; (8020824 <MobleStackSendData+0x94>)
 80207e0:	f893 26f4 	ldrb.w	r2, [r3, #1780]	; 0x6f4
 80207e4:	b122      	cbz	r2, 80207f0 <MobleStackSendData+0x60>
 80207e6:	f8b3 26f6 	ldrh.w	r2, [r3, #1782]	; 0x6f6
 80207ea:	8ae3      	ldrh	r3, [r4, #22]
 80207ec:	429a      	cmp	r2, r3
 80207ee:	d00c      	beq.n	802080a <MobleStackSendData+0x7a>
 80207f0:	2314      	movs	r3, #20
 80207f2:	7a22      	ldrb	r2, [r4, #8]
 80207f4:	9301      	str	r3, [sp, #4]
 80207f6:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80207fa:	9300      	str	r3, [sp, #0]
 80207fc:	3202      	adds	r2, #2
 80207fe:	8b60      	ldrh	r0, [r4, #26]
 8020800:	2300      	movs	r3, #0
 8020802:	b2d2      	uxtb	r2, r2
 8020804:	a902      	add	r1, sp, #8
 8020806:	f7fa fa51 	bl	801acac <BnrgmTransmitSend>
 802080a:	4807      	ldr	r0, [pc, #28]	; (8020828 <MobleStackSendData+0x98>)
 802080c:	2103      	movs	r1, #3
 802080e:	f7ff feab 	bl	8020568 <MobleStackFSM>
 8020812:	2000      	movs	r0, #0
 8020814:	b00a      	add	sp, #40	; 0x28
 8020816:	bd70      	pop	{r4, r5, r6, pc}
 8020818:	2003      	movs	r0, #3
 802081a:	e7fb      	b.n	8020814 <MobleStackSendData+0x84>
 802081c:	2002      	movs	r0, #2
 802081e:	e7f9      	b.n	8020814 <MobleStackSendData+0x84>
 8020820:	2000141c 	.word	0x2000141c
 8020824:	20002514 	.word	0x20002514
 8020828:	20001a9c 	.word	0x20001a9c

0802082c <MobleNetworkSendDataEx>:
 802082c:	b570      	push	{r4, r5, r6, lr}
 802082e:	460c      	mov	r4, r1
 8020830:	b08a      	sub	sp, #40	; 0x28
 8020832:	461d      	mov	r5, r3
 8020834:	b930      	cbnz	r0, 8020844 <MobleNetworkSendDataEx+0x18>
 8020836:	4b1c      	ldr	r3, [pc, #112]	; (80208a8 <MobleNetworkSendDataEx+0x7c>)
 8020838:	4a1c      	ldr	r2, [pc, #112]	; (80208ac <MobleNetworkSendDataEx+0x80>)
 802083a:	f240 118d 	movw	r1, #397	; 0x18d
 802083e:	481c      	ldr	r0, [pc, #112]	; (80208b0 <MobleNetworkSendDataEx+0x84>)
 8020840:	f008 f942 	bl	8028ac8 <__assert_func>
 8020844:	b922      	cbnz	r2, 8020850 <MobleNetworkSendDataEx+0x24>
 8020846:	4b1b      	ldr	r3, [pc, #108]	; (80208b4 <MobleNetworkSendDataEx+0x88>)
 8020848:	4a18      	ldr	r2, [pc, #96]	; (80208ac <MobleNetworkSendDataEx+0x80>)
 802084a:	f44f 71c7 	mov.w	r1, #398	; 0x18e
 802084e:	e7f6      	b.n	802083e <MobleNetworkSendDataEx+0x12>
 8020850:	f890 116c 	ldrb.w	r1, [r0, #364]	; 0x16c
 8020854:	2904      	cmp	r1, #4
 8020856:	d102      	bne.n	802085e <MobleNetworkSendDataEx+0x32>
 8020858:	2002      	movs	r0, #2
 802085a:	b00a      	add	sp, #40	; 0x28
 802085c:	bd70      	pop	{r4, r5, r6, pc}
 802085e:	8b61      	ldrh	r1, [r4, #26]
 8020860:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8020864:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8020868:	73a0      	strb	r0, [r4, #14]
 802086a:	8361      	strh	r1, [r4, #26]
 802086c:	4812      	ldr	r0, [pc, #72]	; (80208b8 <MobleNetworkSendDataEx+0x8c>)
 802086e:	7f21      	ldrb	r1, [r4, #28]
 8020870:	4408      	add	r0, r1
 8020872:	ae02      	add	r6, sp, #8
 8020874:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
 8020878:	1e81      	subs	r1, r0, #2
 802087a:	4248      	negs	r0, r1
 802087c:	4148      	adcs	r0, r1
 802087e:	9000      	str	r0, [sp, #0]
 8020880:	4631      	mov	r1, r6
 8020882:	4620      	mov	r0, r4
 8020884:	f7fa fcd6 	bl	801b234 <MoblePalCryptoEncryptNetwork>
 8020888:	2801      	cmp	r0, #1
 802088a:	d8e5      	bhi.n	8020858 <MobleNetworkSendDataEx+0x2c>
 802088c:	7ba3      	ldrb	r3, [r4, #14]
 802088e:	6066      	str	r6, [r4, #4]
 8020890:	2b00      	cmp	r3, #0
 8020892:	bf14      	ite	ne
 8020894:	2208      	movne	r2, #8
 8020896:	2204      	moveq	r2, #4
 8020898:	3509      	adds	r5, #9
 802089a:	4415      	add	r5, r2
 802089c:	7225      	strb	r5, [r4, #8]
 802089e:	4620      	mov	r0, r4
 80208a0:	f7ff ff76 	bl	8020790 <MobleStackSendData>
 80208a4:	2000      	movs	r0, #0
 80208a6:	e7d8      	b.n	802085a <MobleNetworkSendDataEx+0x2e>
 80208a8:	08033338 	.word	0x08033338
 80208ac:	080318d5 	.word	0x080318d5
 80208b0:	08033816 	.word	0x08033816
 80208b4:	08033587 	.word	0x08033587
 80208b8:	20000324 	.word	0x20000324

080208bc <BnrgmFrndFnSendLpnMsg>:
 80208bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80208be:	4614      	mov	r4, r2
 80208c0:	b08b      	sub	sp, #44	; 0x2c
 80208c2:	4605      	mov	r5, r0
 80208c4:	460e      	mov	r6, r1
 80208c6:	2228      	movs	r2, #40	; 0x28
 80208c8:	2100      	movs	r1, #0
 80208ca:	4668      	mov	r0, sp
 80208cc:	f008 fff2 	bl	80298b4 <memset>
 80208d0:	f894 232d 	ldrb.w	r2, [r4, #813]	; 0x32d
 80208d4:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 80208d8:	232c      	movs	r3, #44	; 0x2c
 80208da:	fb03 4302 	mla	r3, r3, r2, r4
 80208de:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 80208e2:	6f18      	ldr	r0, [r3, #112]	; 0x70
 80208e4:	f8b3 706e 	ldrh.w	r7, [r3, #110]	; 0x6e
 80208e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80208ea:	9305      	str	r3, [sp, #20]
 80208ec:	2901      	cmp	r1, #1
 80208ee:	bf14      	ite	ne
 80208f0:	2330      	movne	r3, #48	; 0x30
 80208f2:	2338      	moveq	r3, #56	; 0x38
 80208f4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80208f8:	2301      	movs	r3, #1
 80208fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 80208fe:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8020902:	f88d 301c 	strb.w	r3, [sp, #28]
 8020906:	232c      	movs	r3, #44	; 0x2c
 8020908:	fb03 4102 	mla	r1, r3, r2, r4
 802090c:	460a      	mov	r2, r1
 802090e:	f891 3095 	ldrb.w	r3, [r1, #149]	; 0x95
 8020912:	9004      	str	r0, [sp, #16]
 8020914:	3285      	adds	r2, #133	; 0x85
 8020916:	4669      	mov	r1, sp
 8020918:	4628      	mov	r0, r5
 802091a:	f8ad 700e 	strh.w	r7, [sp, #14]
 802091e:	f7ff ff85 	bl	802082c <MobleNetworkSendDataEx>
 8020922:	b00b      	add	sp, #44	; 0x2c
 8020924:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08020928 <Test_UpperTester_Send01>:
 8020928:	b530      	push	{r4, r5, lr}
 802092a:	b08d      	sub	sp, #52	; 0x34
 802092c:	4604      	mov	r4, r0
 802092e:	460d      	mov	r5, r1
 8020930:	2228      	movs	r2, #40	; 0x28
 8020932:	2100      	movs	r1, #0
 8020934:	a802      	add	r0, sp, #8
 8020936:	f008 ffbd 	bl	80298b4 <memset>
 802093a:	4b16      	ldr	r3, [pc, #88]	; (8020994 <Test_UpperTester_Send01+0x6c>)
 802093c:	6821      	ldr	r1, [r4, #0]
 802093e:	6818      	ldr	r0, [r3, #0]
 8020940:	889b      	ldrh	r3, [r3, #4]
 8020942:	f8ad 3004 	strh.w	r3, [sp, #4]
 8020946:	f8b5 3001 	ldrh.w	r3, [r5, #1]
 802094a:	9000      	str	r0, [sp, #0]
 802094c:	ba5b      	rev16	r3, r3
 802094e:	8849      	ldrh	r1, [r1, #2]
 8020950:	f8ad 301e 	strh.w	r3, [sp, #30]
 8020954:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 8020958:	782a      	ldrb	r2, [r5, #0]
 802095a:	9306      	str	r3, [sp, #24]
 802095c:	2307      	movs	r3, #7
 802095e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8020962:	f88d 2017 	strb.w	r2, [sp, #23]
 8020966:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 802096a:	466a      	mov	r2, sp
 802096c:	a902      	add	r1, sp, #8
 802096e:	2306      	movs	r3, #6
 8020970:	4620      	mov	r0, r4
 8020972:	f7ff ff5b 	bl	802082c <MobleNetworkSendDataEx>
 8020976:	f8d4 315c 	ldr.w	r3, [r4, #348]	; 0x15c
 802097a:	3301      	adds	r3, #1
 802097c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8020980:	4605      	mov	r5, r0
 8020982:	f8c4 315c 	str.w	r3, [r4, #348]	; 0x15c
 8020986:	4620      	mov	r0, r4
 8020988:	f7fc f9ba 	bl	801cd00 <MobleNetworkSaveSeqNum>
 802098c:	4628      	mov	r0, r5
 802098e:	b00d      	add	sp, #52	; 0x34
 8020990:	bd30      	pop	{r4, r5, pc}
 8020992:	bf00      	nop
 8020994:	08033a17 	.word	0x08033a17

08020998 <MobleModelGetOpcodeIdx>:
 8020998:	b530      	push	{r4, r5, lr}
 802099a:	2300      	movs	r3, #0
 802099c:	4293      	cmp	r3, r2
 802099e:	d102      	bne.n	80209a6 <MobleModelGetOpcodeIdx+0xe>
 80209a0:	2400      	movs	r4, #0
 80209a2:	4620      	mov	r0, r4
 80209a4:	bd30      	pop	{r4, r5, pc}
 80209a6:	460c      	mov	r4, r1
 80209a8:	f851 5b10 	ldr.w	r5, [r1], #16
 80209ac:	4285      	cmp	r5, r0
 80209ae:	d0f8      	beq.n	80209a2 <MobleModelGetOpcodeIdx+0xa>
 80209b0:	3301      	adds	r3, #1
 80209b2:	e7f3      	b.n	802099c <MobleModelGetOpcodeIdx+0x4>

080209b4 <MobleModelCheckOpcodeValid>:
 80209b4:	b530      	push	{r4, r5, lr}
 80209b6:	2400      	movs	r4, #0
 80209b8:	429c      	cmp	r4, r3
 80209ba:	d101      	bne.n	80209c0 <MobleModelCheckOpcodeValid+0xc>
 80209bc:	2000      	movs	r0, #0
 80209be:	bd30      	pop	{r4, r5, pc}
 80209c0:	8815      	ldrh	r5, [r2, #0]
 80209c2:	4285      	cmp	r5, r0
 80209c4:	d102      	bne.n	80209cc <MobleModelCheckOpcodeValid+0x18>
 80209c6:	8855      	ldrh	r5, [r2, #2]
 80209c8:	428d      	cmp	r5, r1
 80209ca:	d002      	beq.n	80209d2 <MobleModelCheckOpcodeValid+0x1e>
 80209cc:	3401      	adds	r4, #1
 80209ce:	320c      	adds	r2, #12
 80209d0:	e7f2      	b.n	80209b8 <MobleModelCheckOpcodeValid+0x4>
 80209d2:	2001      	movs	r0, #1
 80209d4:	e7f3      	b.n	80209be <MobleModelCheckOpcodeValid+0xa>

080209d6 <MobleModelCheckOpcodeValidity>:
 80209d6:	b530      	push	{r4, r5, lr}
 80209d8:	2300      	movs	r3, #0
 80209da:	3102      	adds	r1, #2
 80209dc:	240c      	movs	r4, #12
 80209de:	4293      	cmp	r3, r2
 80209e0:	d101      	bne.n	80209e6 <MobleModelCheckOpcodeValidity+0x10>
 80209e2:	2000      	movs	r0, #0
 80209e4:	bd30      	pop	{r4, r5, pc}
 80209e6:	fb04 f503 	mul.w	r5, r4, r3
 80209ea:	5b4d      	ldrh	r5, [r1, r5]
 80209ec:	4285      	cmp	r5, r0
 80209ee:	d001      	beq.n	80209f4 <MobleModelCheckOpcodeValidity+0x1e>
 80209f0:	3301      	adds	r3, #1
 80209f2:	e7f4      	b.n	80209de <MobleModelCheckOpcodeValidity+0x8>
 80209f4:	2001      	movs	r0, #1
 80209f6:	e7f5      	b.n	80209e4 <MobleModelCheckOpcodeValidity+0xe>

080209f8 <MobleModelCheckOpCodeReliable>:
 80209f8:	b538      	push	{r3, r4, r5, lr}
 80209fa:	2300      	movs	r3, #0
 80209fc:	4293      	cmp	r3, r2
 80209fe:	d105      	bne.n	8020a0c <MobleModelCheckOpCodeReliable+0x14>
 8020a00:	4b07      	ldr	r3, [pc, #28]	; (8020a20 <MobleModelCheckOpCodeReliable+0x28>)
 8020a02:	4a08      	ldr	r2, [pc, #32]	; (8020a24 <MobleModelCheckOpCodeReliable+0x2c>)
 8020a04:	4808      	ldr	r0, [pc, #32]	; (8020a28 <MobleModelCheckOpCodeReliable+0x30>)
 8020a06:	2168      	movs	r1, #104	; 0x68
 8020a08:	f008 f85e 	bl	8028ac8 <__assert_func>
 8020a0c:	460c      	mov	r4, r1
 8020a0e:	310c      	adds	r1, #12
 8020a10:	8865      	ldrh	r5, [r4, #2]
 8020a12:	4285      	cmp	r5, r0
 8020a14:	d001      	beq.n	8020a1a <MobleModelCheckOpCodeReliable+0x22>
 8020a16:	3301      	adds	r3, #1
 8020a18:	e7f0      	b.n	80209fc <MobleModelCheckOpCodeReliable+0x4>
 8020a1a:	7920      	ldrb	r0, [r4, #4]
 8020a1c:	bd38      	pop	{r3, r4, r5, pc}
 8020a1e:	bf00      	nop
 8020a20:	08033d6b 	.word	0x08033d6b
 8020a24:	080318ec 	.word	0x080318ec
 8020a28:	08033a1e 	.word	0x08033a1e

08020a2c <MobleModelGetMinParamLength>:
 8020a2c:	b538      	push	{r3, r4, r5, lr}
 8020a2e:	2300      	movs	r3, #0
 8020a30:	4293      	cmp	r3, r2
 8020a32:	d105      	bne.n	8020a40 <MobleModelGetMinParamLength+0x14>
 8020a34:	4b07      	ldr	r3, [pc, #28]	; (8020a54 <MobleModelGetMinParamLength+0x28>)
 8020a36:	4a08      	ldr	r2, [pc, #32]	; (8020a58 <MobleModelGetMinParamLength+0x2c>)
 8020a38:	4808      	ldr	r0, [pc, #32]	; (8020a5c <MobleModelGetMinParamLength+0x30>)
 8020a3a:	2184      	movs	r1, #132	; 0x84
 8020a3c:	f008 f844 	bl	8028ac8 <__assert_func>
 8020a40:	460c      	mov	r4, r1
 8020a42:	310c      	adds	r1, #12
 8020a44:	8865      	ldrh	r5, [r4, #2]
 8020a46:	4285      	cmp	r5, r0
 8020a48:	d001      	beq.n	8020a4e <MobleModelGetMinParamLength+0x22>
 8020a4a:	3301      	adds	r3, #1
 8020a4c:	e7f0      	b.n	8020a30 <MobleModelGetMinParamLength+0x4>
 8020a4e:	7960      	ldrb	r0, [r4, #5]
 8020a50:	bd38      	pop	{r3, r4, r5, pc}
 8020a52:	bf00      	nop
 8020a54:	08033d6b 	.word	0x08033d6b
 8020a58:	08031923 	.word	0x08031923
 8020a5c:	08033a1e 	.word	0x08033a1e

08020a60 <MobleModelGetMaxParamLength>:
 8020a60:	b538      	push	{r3, r4, r5, lr}
 8020a62:	2300      	movs	r3, #0
 8020a64:	4293      	cmp	r3, r2
 8020a66:	d105      	bne.n	8020a74 <MobleModelGetMaxParamLength+0x14>
 8020a68:	4b07      	ldr	r3, [pc, #28]	; (8020a88 <MobleModelGetMaxParamLength+0x28>)
 8020a6a:	4a08      	ldr	r2, [pc, #32]	; (8020a8c <MobleModelGetMaxParamLength+0x2c>)
 8020a6c:	4808      	ldr	r0, [pc, #32]	; (8020a90 <MobleModelGetMaxParamLength+0x30>)
 8020a6e:	2192      	movs	r1, #146	; 0x92
 8020a70:	f008 f82a 	bl	8028ac8 <__assert_func>
 8020a74:	460c      	mov	r4, r1
 8020a76:	310c      	adds	r1, #12
 8020a78:	8865      	ldrh	r5, [r4, #2]
 8020a7a:	4285      	cmp	r5, r0
 8020a7c:	d001      	beq.n	8020a82 <MobleModelGetMaxParamLength+0x22>
 8020a7e:	3301      	adds	r3, #1
 8020a80:	e7f0      	b.n	8020a64 <MobleModelGetMaxParamLength+0x4>
 8020a82:	79a0      	ldrb	r0, [r4, #6]
 8020a84:	bd38      	pop	{r3, r4, r5, pc}
 8020a86:	bf00      	nop
 8020a88:	08033d6b 	.word	0x08033d6b
 8020a8c:	0803193f 	.word	0x0803193f
 8020a90:	08033a1e 	.word	0x08033a1e

08020a94 <MobleModelGetResponseOpCode>:
 8020a94:	b538      	push	{r3, r4, r5, lr}
 8020a96:	2300      	movs	r3, #0
 8020a98:	4293      	cmp	r3, r2
 8020a9a:	d105      	bne.n	8020aa8 <MobleModelGetResponseOpCode+0x14>
 8020a9c:	4b07      	ldr	r3, [pc, #28]	; (8020abc <MobleModelGetResponseOpCode+0x28>)
 8020a9e:	4a08      	ldr	r2, [pc, #32]	; (8020ac0 <MobleModelGetResponseOpCode+0x2c>)
 8020aa0:	4808      	ldr	r0, [pc, #32]	; (8020ac4 <MobleModelGetResponseOpCode+0x30>)
 8020aa2:	21a0      	movs	r1, #160	; 0xa0
 8020aa4:	f008 f810 	bl	8028ac8 <__assert_func>
 8020aa8:	460c      	mov	r4, r1
 8020aaa:	310c      	adds	r1, #12
 8020aac:	8865      	ldrh	r5, [r4, #2]
 8020aae:	4285      	cmp	r5, r0
 8020ab0:	d001      	beq.n	8020ab6 <MobleModelGetResponseOpCode+0x22>
 8020ab2:	3301      	adds	r3, #1
 8020ab4:	e7f0      	b.n	8020a98 <MobleModelGetResponseOpCode+0x4>
 8020ab6:	8920      	ldrh	r0, [r4, #8]
 8020ab8:	bd38      	pop	{r3, r4, r5, pc}
 8020aba:	bf00      	nop
 8020abc:	08033d6b 	.word	0x08033d6b
 8020ac0:	0803195b 	.word	0x0803195b
 8020ac4:	08033a1e 	.word	0x08033a1e

08020ac8 <MobleModelGetMinResponseLength>:
 8020ac8:	b538      	push	{r3, r4, r5, lr}
 8020aca:	2300      	movs	r3, #0
 8020acc:	4293      	cmp	r3, r2
 8020ace:	d105      	bne.n	8020adc <MobleModelGetMinResponseLength+0x14>
 8020ad0:	4b07      	ldr	r3, [pc, #28]	; (8020af0 <MobleModelGetMinResponseLength+0x28>)
 8020ad2:	4a08      	ldr	r2, [pc, #32]	; (8020af4 <MobleModelGetMinResponseLength+0x2c>)
 8020ad4:	4808      	ldr	r0, [pc, #32]	; (8020af8 <MobleModelGetMinResponseLength+0x30>)
 8020ad6:	21af      	movs	r1, #175	; 0xaf
 8020ad8:	f007 fff6 	bl	8028ac8 <__assert_func>
 8020adc:	460c      	mov	r4, r1
 8020ade:	310c      	adds	r1, #12
 8020ae0:	8865      	ldrh	r5, [r4, #2]
 8020ae2:	4285      	cmp	r5, r0
 8020ae4:	d001      	beq.n	8020aea <MobleModelGetMinResponseLength+0x22>
 8020ae6:	3301      	adds	r3, #1
 8020ae8:	e7f0      	b.n	8020acc <MobleModelGetMinResponseLength+0x4>
 8020aea:	7aa0      	ldrb	r0, [r4, #10]
 8020aec:	bd38      	pop	{r3, r4, r5, pc}
 8020aee:	bf00      	nop
 8020af0:	08033d6b 	.word	0x08033d6b
 8020af4:	08031977 	.word	0x08031977
 8020af8:	08033a1e 	.word	0x08033a1e

08020afc <MobleModelGetMaxResponseLength>:
 8020afc:	b538      	push	{r3, r4, r5, lr}
 8020afe:	2300      	movs	r3, #0
 8020b00:	4293      	cmp	r3, r2
 8020b02:	d105      	bne.n	8020b10 <MobleModelGetMaxResponseLength+0x14>
 8020b04:	4b07      	ldr	r3, [pc, #28]	; (8020b24 <MobleModelGetMaxResponseLength+0x28>)
 8020b06:	4a08      	ldr	r2, [pc, #32]	; (8020b28 <MobleModelGetMaxResponseLength+0x2c>)
 8020b08:	4808      	ldr	r0, [pc, #32]	; (8020b2c <MobleModelGetMaxResponseLength+0x30>)
 8020b0a:	21bd      	movs	r1, #189	; 0xbd
 8020b0c:	f007 ffdc 	bl	8028ac8 <__assert_func>
 8020b10:	460c      	mov	r4, r1
 8020b12:	310c      	adds	r1, #12
 8020b14:	8865      	ldrh	r5, [r4, #2]
 8020b16:	4285      	cmp	r5, r0
 8020b18:	d001      	beq.n	8020b1e <MobleModelGetMaxResponseLength+0x22>
 8020b1a:	3301      	adds	r3, #1
 8020b1c:	e7f0      	b.n	8020b00 <MobleModelGetMaxResponseLength+0x4>
 8020b1e:	7ae0      	ldrb	r0, [r4, #11]
 8020b20:	bd38      	pop	{r3, r4, r5, pc}
 8020b22:	bf00      	nop
 8020b24:	08033d6b 	.word	0x08033d6b
 8020b28:	08031996 	.word	0x08031996
 8020b2c:	08033a1e 	.word	0x08033a1e

08020b30 <MobleModelGetOpcodeValue>:
 8020b30:	b510      	push	{r4, lr}
 8020b32:	7803      	ldrb	r3, [r0, #0]
 8020b34:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
 8020b38:	2cc0      	cmp	r4, #192	; 0xc0
 8020b3a:	d108      	bne.n	8020b4e <MobleModelGetOpcodeValue+0x1e>
 8020b3c:	2902      	cmp	r1, #2
 8020b3e:	d914      	bls.n	8020b6a <MobleModelGetOpcodeValue+0x3a>
 8020b40:	6800      	ldr	r0, [r0, #0]
 8020b42:	0a00      	lsrs	r0, r0, #8
 8020b44:	f7f6 fe55 	bl	80177f2 <htobe32>
 8020b48:	6010      	str	r0, [r2, #0]
 8020b4a:	2003      	movs	r0, #3
 8020b4c:	bd10      	pop	{r4, pc}
 8020b4e:	061c      	lsls	r4, r3, #24
 8020b50:	d507      	bpl.n	8020b62 <MobleModelGetOpcodeValue+0x32>
 8020b52:	2901      	cmp	r1, #1
 8020b54:	d909      	bls.n	8020b6a <MobleModelGetOpcodeValue+0x3a>
 8020b56:	8803      	ldrh	r3, [r0, #0]
 8020b58:	ba5b      	rev16	r3, r3
 8020b5a:	b29b      	uxth	r3, r3
 8020b5c:	6013      	str	r3, [r2, #0]
 8020b5e:	2002      	movs	r0, #2
 8020b60:	e7f4      	b.n	8020b4c <MobleModelGetOpcodeValue+0x1c>
 8020b62:	b121      	cbz	r1, 8020b6e <MobleModelGetOpcodeValue+0x3e>
 8020b64:	6013      	str	r3, [r2, #0]
 8020b66:	2001      	movs	r0, #1
 8020b68:	e7f0      	b.n	8020b4c <MobleModelGetOpcodeValue+0x1c>
 8020b6a:	2000      	movs	r0, #0
 8020b6c:	e7ee      	b.n	8020b4c <MobleModelGetOpcodeValue+0x1c>
 8020b6e:	4608      	mov	r0, r1
 8020b70:	e7ec      	b.n	8020b4c <MobleModelGetOpcodeValue+0x1c>
	...

08020b74 <BnrgmHealthModelNewPacket>:
 8020b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020b78:	6803      	ldr	r3, [r0, #0]
 8020b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020b7c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8020b80:	4681      	mov	r9, r0
 8020b82:	460f      	mov	r7, r1
 8020b84:	b923      	cbnz	r3, 8020b90 <BnrgmHealthModelNewPacket+0x1c>
 8020b86:	2402      	movs	r4, #2
 8020b88:	4620      	mov	r0, r4
 8020b8a:	b004      	add	sp, #16
 8020b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b90:	69cd      	ldr	r5, [r1, #28]
 8020b92:	f101 0a20 	add.w	sl, r1, #32
 8020b96:	aa03      	add	r2, sp, #12
 8020b98:	4629      	mov	r1, r5
 8020b9a:	4650      	mov	r0, sl
 8020b9c:	f7ff ffc8 	bl	8020b30 <MobleModelGetOpcodeValue>
 8020ba0:	4680      	mov	r8, r0
 8020ba2:	2800      	cmp	r0, #0
 8020ba4:	d0ef      	beq.n	8020b86 <BnrgmHealthModelNewPacket+0x12>
 8020ba6:	4913      	ldr	r1, [pc, #76]	; (8020bf4 <BnrgmHealthModelNewPacket+0x80>)
 8020ba8:	9803      	ldr	r0, [sp, #12]
 8020baa:	220b      	movs	r2, #11
 8020bac:	f7ff fef4 	bl	8020998 <MobleModelGetOpcodeIdx>
 8020bb0:	4604      	mov	r4, r0
 8020bb2:	2800      	cmp	r0, #0
 8020bb4:	d0e7      	beq.n	8020b86 <BnrgmHealthModelNewPacket+0x12>
 8020bb6:	88c3      	ldrh	r3, [r0, #6]
 8020bb8:	eba5 0508 	sub.w	r5, r5, r8
 8020bbc:	42ab      	cmp	r3, r5
 8020bbe:	dce2      	bgt.n	8020b86 <BnrgmHealthModelNewPacket+0x12>
 8020bc0:	8903      	ldrh	r3, [r0, #8]
 8020bc2:	42ab      	cmp	r3, r5
 8020bc4:	dbdf      	blt.n	8020b86 <BnrgmHealthModelNewPacket+0x12>
 8020bc6:	68c3      	ldr	r3, [r0, #12]
 8020bc8:	2b00      	cmp	r3, #0
 8020bca:	d0dc      	beq.n	8020b86 <BnrgmHealthModelNewPacket+0x12>
 8020bcc:	20a7      	movs	r0, #167	; 0xa7
 8020bce:	f7fa f967 	bl	801aea0 <MobleMemAlloc>
 8020bd2:	4606      	mov	r6, r0
 8020bd4:	2800      	cmp	r0, #0
 8020bd6:	d0d6      	beq.n	8020b86 <BnrgmHealthModelNewPacket+0x12>
 8020bd8:	e9cd 5000 	strd	r5, r0, [sp]
 8020bdc:	4622      	mov	r2, r4
 8020bde:	68e5      	ldr	r5, [r4, #12]
 8020be0:	eb0a 0308 	add.w	r3, sl, r8
 8020be4:	4639      	mov	r1, r7
 8020be6:	4648      	mov	r0, r9
 8020be8:	47a8      	blx	r5
 8020bea:	4604      	mov	r4, r0
 8020bec:	4630      	mov	r0, r6
 8020bee:	f7fa f9e1 	bl	801afb4 <MobleMemFree>
 8020bf2:	e7c9      	b.n	8020b88 <BnrgmHealthModelNewPacket+0x14>
 8020bf4:	080319b8 	.word	0x080319b8

08020bf8 <MobleConfigModelNewPacket>:
 8020bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8020bfc:	69cd      	ldr	r5, [r1, #28]
 8020bfe:	f101 0920 	add.w	r9, r1, #32
 8020c02:	4680      	mov	r8, r0
 8020c04:	460f      	mov	r7, r1
 8020c06:	aa03      	add	r2, sp, #12
 8020c08:	4629      	mov	r1, r5
 8020c0a:	4648      	mov	r0, r9
 8020c0c:	f7ff ff90 	bl	8020b30 <MobleModelGetOpcodeValue>
 8020c10:	4682      	mov	sl, r0
 8020c12:	b920      	cbnz	r0, 8020c1e <MobleConfigModelNewPacket+0x26>
 8020c14:	2402      	movs	r4, #2
 8020c16:	4620      	mov	r0, r4
 8020c18:	b004      	add	sp, #16
 8020c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020c1e:	4917      	ldr	r1, [pc, #92]	; (8020c7c <MobleConfigModelNewPacket+0x84>)
 8020c20:	9803      	ldr	r0, [sp, #12]
 8020c22:	222f      	movs	r2, #47	; 0x2f
 8020c24:	f7ff feb8 	bl	8020998 <MobleModelGetOpcodeIdx>
 8020c28:	4604      	mov	r4, r0
 8020c2a:	2800      	cmp	r0, #0
 8020c2c:	d0f2      	beq.n	8020c14 <MobleConfigModelNewPacket+0x1c>
 8020c2e:	88c3      	ldrh	r3, [r0, #6]
 8020c30:	eba5 050a 	sub.w	r5, r5, sl
 8020c34:	42ab      	cmp	r3, r5
 8020c36:	dced      	bgt.n	8020c14 <MobleConfigModelNewPacket+0x1c>
 8020c38:	8903      	ldrh	r3, [r0, #8]
 8020c3a:	42ab      	cmp	r3, r5
 8020c3c:	dbea      	blt.n	8020c14 <MobleConfigModelNewPacket+0x1c>
 8020c3e:	68c3      	ldr	r3, [r0, #12]
 8020c40:	b93b      	cbnz	r3, 8020c52 <MobleConfigModelNewPacket+0x5a>
 8020c42:	4a0f      	ldr	r2, [pc, #60]	; (8020c80 <MobleConfigModelNewPacket+0x88>)
 8020c44:	8811      	ldrh	r1, [r2, #0]
 8020c46:	b2da      	uxtb	r2, r3
 8020c48:	428a      	cmp	r2, r1
 8020c4a:	f103 0301 	add.w	r3, r3, #1
 8020c4e:	d3fa      	bcc.n	8020c46 <MobleConfigModelNewPacket+0x4e>
 8020c50:	e7e0      	b.n	8020c14 <MobleConfigModelNewPacket+0x1c>
 8020c52:	20a7      	movs	r0, #167	; 0xa7
 8020c54:	f7fa f924 	bl	801aea0 <MobleMemAlloc>
 8020c58:	4606      	mov	r6, r0
 8020c5a:	2800      	cmp	r0, #0
 8020c5c:	d0da      	beq.n	8020c14 <MobleConfigModelNewPacket+0x1c>
 8020c5e:	e9cd 5000 	strd	r5, r0, [sp]
 8020c62:	4622      	mov	r2, r4
 8020c64:	68e5      	ldr	r5, [r4, #12]
 8020c66:	eb09 030a 	add.w	r3, r9, sl
 8020c6a:	4639      	mov	r1, r7
 8020c6c:	4640      	mov	r0, r8
 8020c6e:	47a8      	blx	r5
 8020c70:	4604      	mov	r4, r0
 8020c72:	4630      	mov	r0, r6
 8020c74:	f7fa f99e 	bl	801afb4 <MobleMemFree>
 8020c78:	e7cd      	b.n	8020c16 <MobleConfigModelNewPacket+0x1e>
 8020c7a:	bf00      	nop
 8020c7c:	08031a68 	.word	0x08031a68
 8020c80:	20000008 	.word	0x20000008

08020c84 <Moble_SIGModel_NewPacket>:
 8020c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c88:	ed2d 8b02 	vpush	{d8}
 8020c8c:	b089      	sub	sp, #36	; 0x24
 8020c8e:	200c      	movs	r0, #12
 8020c90:	9305      	str	r3, [sp, #20]
 8020c92:	69cb      	ldr	r3, [r1, #28]
 8020c94:	9303      	str	r3, [sp, #12]
 8020c96:	f101 0320 	add.w	r3, r1, #32
 8020c9a:	ee08 2a10 	vmov	s16, r2
 8020c9e:	460d      	mov	r5, r1
 8020ca0:	9304      	str	r3, [sp, #16]
 8020ca2:	f7fa f8fd 	bl	801aea0 <MobleMemAlloc>
 8020ca6:	aa07      	add	r2, sp, #28
 8020ca8:	4604      	mov	r4, r0
 8020caa:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8020cae:	f7ff ff3f 	bl	8020b30 <MobleModelGetOpcodeValue>
 8020cb2:	4607      	mov	r7, r0
 8020cb4:	b930      	cbnz	r0, 8020cc4 <Moble_SIGModel_NewPacket+0x40>
 8020cb6:	2502      	movs	r5, #2
 8020cb8:	4628      	mov	r0, r5
 8020cba:	b009      	add	sp, #36	; 0x24
 8020cbc:	ecbd 8b02 	vpop	{d8}
 8020cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020cc4:	4e2f      	ldr	r6, [pc, #188]	; (8020d84 <Moble_SIGModel_NewPacket+0x100>)
 8020cc6:	f8d6 3a28 	ldr.w	r3, [r6, #2600]	; 0xa28
 8020cca:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
 8020cce:	f04f 0800 	mov.w	r8, #0
 8020cd2:	f8d6 3a34 	ldr.w	r3, [r6, #2612]	; 0xa34
 8020cd6:	4543      	cmp	r3, r8
 8020cd8:	d804      	bhi.n	8020ce4 <Moble_SIGModel_NewPacket+0x60>
 8020cda:	2502      	movs	r5, #2
 8020cdc:	4620      	mov	r0, r4
 8020cde:	f7fa f969 	bl	801afb4 <MobleMemFree>
 8020ce2:	e7e9      	b.n	8020cb8 <Moble_SIGModel_NewPacket+0x34>
 8020ce4:	4928      	ldr	r1, [pc, #160]	; (8020d88 <Moble_SIGModel_NewPacket+0x104>)
 8020ce6:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	; 0xa24
 8020cea:	1d08      	adds	r0, r1, #4
 8020cec:	681b      	ldr	r3, [r3, #0]
 8020cee:	4798      	blx	r3
 8020cf0:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8020cf4:	f8d6 aa30 	ldr.w	sl, [r6, #2608]	; 0xa30
 8020cf8:	f8b6 ba2c 	ldrh.w	fp, [r6, #2604]	; 0xa2c
 8020cfc:	ee18 0a10 	vmov	r0, s16
 8020d00:	465b      	mov	r3, fp
 8020d02:	4652      	mov	r2, sl
 8020d04:	4649      	mov	r1, r9
 8020d06:	f7ff fe55 	bl	80209b4 <MobleModelCheckOpcodeValid>
 8020d0a:	2801      	cmp	r0, #1
 8020d0c:	d007      	beq.n	8020d1e <Moble_SIGModel_NewPacket+0x9a>
 8020d0e:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	; 0xa24
 8020d12:	330c      	adds	r3, #12
 8020d14:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
 8020d18:	f108 0801 	add.w	r8, r8, #1
 8020d1c:	e7d9      	b.n	8020cd2 <Moble_SIGModel_NewPacket+0x4e>
 8020d1e:	9b03      	ldr	r3, [sp, #12]
 8020d20:	465a      	mov	r2, fp
 8020d22:	4651      	mov	r1, sl
 8020d24:	4648      	mov	r0, r9
 8020d26:	eba3 0807 	sub.w	r8, r3, r7
 8020d2a:	f7ff fe7f 	bl	8020a2c <MobleModelGetMinParamLength>
 8020d2e:	4540      	cmp	r0, r8
 8020d30:	d8c1      	bhi.n	8020cb6 <Moble_SIGModel_NewPacket+0x32>
 8020d32:	465a      	mov	r2, fp
 8020d34:	4651      	mov	r1, sl
 8020d36:	4648      	mov	r0, r9
 8020d38:	f7ff fe92 	bl	8020a60 <MobleModelGetMaxParamLength>
 8020d3c:	4540      	cmp	r0, r8
 8020d3e:	d3ba      	bcc.n	8020cb6 <Moble_SIGModel_NewPacket+0x32>
 8020d40:	9b04      	ldr	r3, [sp, #16]
 8020d42:	465a      	mov	r2, fp
 8020d44:	443b      	add	r3, r7
 8020d46:	4651      	mov	r1, sl
 8020d48:	4648      	mov	r0, r9
 8020d4a:	461f      	mov	r7, r3
 8020d4c:	f7ff fe54 	bl	80209f8 <MobleModelCheckOpCodeReliable>
 8020d50:	9b05      	ldr	r3, [sp, #20]
 8020d52:	7023      	strb	r3, [r4, #0]
 8020d54:	892b      	ldrh	r3, [r5, #8]
 8020d56:	80a3      	strh	r3, [r4, #4]
 8020d58:	896b      	ldrh	r3, [r5, #10]
 8020d5a:	80e3      	strh	r3, [r4, #6]
 8020d5c:	78eb      	ldrb	r3, [r5, #3]
 8020d5e:	7223      	strb	r3, [r4, #8]
 8020d60:	7b2b      	ldrb	r3, [r5, #12]
 8020d62:	72a3      	strb	r3, [r4, #10]
 8020d64:	7c2b      	ldrb	r3, [r5, #16]
 8020d66:	72e3      	strb	r3, [r4, #11]
 8020d68:	7dab      	ldrb	r3, [r5, #22]
 8020d6a:	7263      	strb	r3, [r4, #9]
 8020d6c:	f8d6 3a24 	ldr.w	r3, [r6, #2596]	; 0xa24
 8020d70:	9000      	str	r0, [sp, #0]
 8020d72:	689d      	ldr	r5, [r3, #8]
 8020d74:	463a      	mov	r2, r7
 8020d76:	4643      	mov	r3, r8
 8020d78:	fa1f f189 	uxth.w	r1, r9
 8020d7c:	4620      	mov	r0, r4
 8020d7e:	47a8      	blx	r5
 8020d80:	4605      	mov	r5, r0
 8020d82:	e7ab      	b.n	8020cdc <Moble_SIGModel_NewPacket+0x58>
 8020d84:	20002514 	.word	0x20002514
 8020d88:	20002f40 	.word	0x20002f40

08020d8c <BnrgmConfigModelSetFeatures>:
 8020d8c:	b570      	push	{r4, r5, r6, lr}
 8020d8e:	4604      	mov	r4, r0
 8020d90:	f004 0309 	and.w	r3, r4, #9
 8020d94:	2b09      	cmp	r3, #9
 8020d96:	4608      	mov	r0, r1
 8020d98:	4616      	mov	r6, r2
 8020d9a:	d058      	beq.n	8020e4e <BnrgmConfigModelSetFeatures+0xc2>
 8020d9c:	f004 030a 	and.w	r3, r4, #10
 8020da0:	2b0a      	cmp	r3, #10
 8020da2:	d054      	beq.n	8020e4e <BnrgmConfigModelSetFeatures+0xc2>
 8020da4:	f004 030c 	and.w	r3, r4, #12
 8020da8:	2b0c      	cmp	r3, #12
 8020daa:	d050      	beq.n	8020e4e <BnrgmConfigModelSetFeatures+0xc2>
 8020dac:	f014 0f01 	tst.w	r4, #1
 8020db0:	4d28      	ldr	r5, [pc, #160]	; (8020e54 <BnrgmConfigModelSetFeatures+0xc8>)
 8020db2:	d032      	beq.n	8020e1a <BnrgmConfigModelSetFeatures+0x8e>
 8020db4:	f895 30bd 	ldrb.w	r3, [r5, #189]	; 0xbd
 8020db8:	2b01      	cmp	r3, #1
 8020dba:	d904      	bls.n	8020dc6 <BnrgmConfigModelSetFeatures+0x3a>
 8020dbc:	2301      	movs	r3, #1
 8020dbe:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
 8020dc2:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
 8020dc6:	07a2      	lsls	r2, r4, #30
 8020dc8:	d52b      	bpl.n	8020e22 <BnrgmConfigModelSetFeatures+0x96>
 8020dca:	f895 30bc 	ldrb.w	r3, [r5, #188]	; 0xbc
 8020dce:	2b01      	cmp	r3, #1
 8020dd0:	d904      	bls.n	8020ddc <BnrgmConfigModelSetFeatures+0x50>
 8020dd2:	2301      	movs	r3, #1
 8020dd4:	f8a5 30ba 	strh.w	r3, [r5, #186]	; 0xba
 8020dd8:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
 8020ddc:	0763      	lsls	r3, r4, #29
 8020dde:	d526      	bpl.n	8020e2e <BnrgmConfigModelSetFeatures+0xa2>
 8020de0:	f895 30be 	ldrb.w	r3, [r5, #190]	; 0xbe
 8020de4:	2b01      	cmp	r3, #1
 8020de6:	d906      	bls.n	8020df6 <BnrgmConfigModelSetFeatures+0x6a>
 8020de8:	2301      	movs	r3, #1
 8020dea:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
 8020dee:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
 8020df2:	f7fd fc35 	bl	801e660 <BnrgmFrndMgmtFnInit>
 8020df6:	f014 0008 	ands.w	r0, r4, #8
 8020dfa:	d01c      	beq.n	8020e36 <BnrgmConfigModelSetFeatures+0xaa>
 8020dfc:	f895 30bf 	ldrb.w	r3, [r5, #191]	; 0xbf
 8020e00:	2b01      	cmp	r3, #1
 8020e02:	f04f 0400 	mov.w	r4, #0
 8020e06:	d906      	bls.n	8020e16 <BnrgmConfigModelSetFeatures+0x8a>
 8020e08:	4630      	mov	r0, r6
 8020e0a:	f885 40bf 	strb.w	r4, [r5, #191]	; 0xbf
 8020e0e:	f885 40ba 	strb.w	r4, [r5, #186]	; 0xba
 8020e12:	f7f2 fbf3 	bl	80135fc <BnrgmFrndMgmtLpnInit>
 8020e16:	4620      	mov	r0, r4
 8020e18:	e010      	b.n	8020e3c <BnrgmConfigModelSetFeatures+0xb0>
 8020e1a:	2302      	movs	r3, #2
 8020e1c:	f885 30bd 	strb.w	r3, [r5, #189]	; 0xbd
 8020e20:	e7d1      	b.n	8020dc6 <BnrgmConfigModelSetFeatures+0x3a>
 8020e22:	2302      	movs	r3, #2
 8020e24:	f885 30bc 	strb.w	r3, [r5, #188]	; 0xbc
 8020e28:	f885 30bb 	strb.w	r3, [r5, #187]	; 0xbb
 8020e2c:	e7d6      	b.n	8020ddc <BnrgmConfigModelSetFeatures+0x50>
 8020e2e:	2302      	movs	r3, #2
 8020e30:	f885 30be 	strb.w	r3, [r5, #190]	; 0xbe
 8020e34:	e7df      	b.n	8020df6 <BnrgmConfigModelSetFeatures+0x6a>
 8020e36:	2302      	movs	r3, #2
 8020e38:	f885 30bf 	strb.w	r3, [r5, #191]	; 0xbf
 8020e3c:	4b06      	ldr	r3, [pc, #24]	; (8020e58 <BnrgmConfigModelSetFeatures+0xcc>)
 8020e3e:	8819      	ldrh	r1, [r3, #0]
 8020e40:	2300      	movs	r3, #0
 8020e42:	b2da      	uxtb	r2, r3
 8020e44:	428a      	cmp	r2, r1
 8020e46:	f103 0301 	add.w	r3, r3, #1
 8020e4a:	d3fa      	bcc.n	8020e42 <BnrgmConfigModelSetFeatures+0xb6>
 8020e4c:	bd70      	pop	{r4, r5, r6, pc}
 8020e4e:	2003      	movs	r0, #3
 8020e50:	e7f4      	b.n	8020e3c <BnrgmConfigModelSetFeatures+0xb0>
 8020e52:	bf00      	nop
 8020e54:	20000324 	.word	0x20000324
 8020e58:	20000008 	.word	0x20000008

08020e5c <MobleLibrarySetFeatures>:
 8020e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e5e:	4b10      	ldr	r3, [pc, #64]	; (8020ea0 <MobleLibrarySetFeatures+0x44>)
 8020e60:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 8020e64:	b087      	sub	sp, #28
 8020e66:	4606      	mov	r6, r0
 8020e68:	b1c3      	cbz	r3, 8020e9c <MobleLibrarySetFeatures+0x40>
 8020e6a:	4d0e      	ldr	r5, [pc, #56]	; (8020ea4 <MobleLibrarySetFeatures+0x48>)
 8020e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8020e6e:	ac01      	add	r4, sp, #4
 8020e70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8020e72:	682b      	ldr	r3, [r5, #0]
 8020e74:	6023      	str	r3, [r4, #0]
 8020e76:	2701      	movs	r7, #1
 8020e78:	0733      	lsls	r3, r6, #28
 8020e7a:	f88d 7000 	strb.w	r7, [sp]
 8020e7e:	d509      	bpl.n	8020e94 <MobleLibrarySetFeatures+0x38>
 8020e80:	2000      	movs	r0, #0
 8020e82:	f7fe fb57 	bl	801f534 <BnrgmTransmitSetAutoScanState>
 8020e86:	aa01      	add	r2, sp, #4
 8020e88:	4669      	mov	r1, sp
 8020e8a:	4630      	mov	r0, r6
 8020e8c:	f7ff ff7e 	bl	8020d8c <BnrgmConfigModelSetFeatures>
 8020e90:	b007      	add	sp, #28
 8020e92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020e94:	4b04      	ldr	r3, [pc, #16]	; (8020ea8 <MobleLibrarySetFeatures+0x4c>)
 8020e96:	f883 716a 	strb.w	r7, [r3, #362]	; 0x16a
 8020e9a:	e7f4      	b.n	8020e86 <MobleLibrarySetFeatures+0x2a>
 8020e9c:	2002      	movs	r0, #2
 8020e9e:	e7f7      	b.n	8020e90 <MobleLibrarySetFeatures+0x34>
 8020ea0:	20002514 	.word	0x20002514
 8020ea4:	08031db4 	.word	0x08031db4
 8020ea8:	20003f64 	.word	0x20003f64

08020eac <Test_UpperTester_Set12>:
 8020eac:	7808      	ldrb	r0, [r1, #0]
 8020eae:	3830      	subs	r0, #48	; 0x30
 8020eb0:	b280      	uxth	r0, r0
 8020eb2:	f7ff bfd3 	b.w	8020e5c <MobleLibrarySetFeatures>
	...

08020eb8 <MobleConfigModelInit>:
 8020eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020eba:	4d1d      	ldr	r5, [pc, #116]	; (8020f30 <MobleConfigModelInit+0x78>)
 8020ebc:	4606      	mov	r6, r0
 8020ebe:	4608      	mov	r0, r1
 8020ec0:	4611      	mov	r1, r2
 8020ec2:	461a      	mov	r2, r3
 8020ec4:	2301      	movs	r3, #1
 8020ec6:	f885 30ba 	strb.w	r3, [r5, #186]	; 0xba
 8020eca:	2308      	movs	r3, #8
 8020ecc:	f885 30b5 	strb.w	r3, [r5, #181]	; 0xb5
 8020ed0:	4b18      	ldr	r3, [pc, #96]	; (8020f34 <MobleConfigModelInit+0x7c>)
 8020ed2:	2400      	movs	r4, #0
 8020ed4:	881f      	ldrh	r7, [r3, #0]
 8020ed6:	46a6      	mov	lr, r4
 8020ed8:	b2e3      	uxtb	r3, r4
 8020eda:	42bb      	cmp	r3, r7
 8020edc:	f104 0c01 	add.w	ip, r4, #1
 8020ee0:	d321      	bcc.n	8020f26 <MobleConfigModelInit+0x6e>
 8020ee2:	2302      	movs	r3, #2
 8020ee4:	f885 30b6 	strb.w	r3, [r5, #182]	; 0xb6
 8020ee8:	2301      	movs	r3, #1
 8020eea:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
 8020eee:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
 8020ef2:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 8020ef6:	f7ff ff49 	bl	8020d8c <BnrgmConfigModelSetFeatures>
 8020efa:	b968      	cbnz	r0, 8020f18 <MobleConfigModelInit+0x60>
 8020efc:	490e      	ldr	r1, [pc, #56]	; (8020f38 <MobleConfigModelInit+0x80>)
 8020efe:	480f      	ldr	r0, [pc, #60]	; (8020f3c <MobleConfigModelInit+0x84>)
 8020f00:	4632      	mov	r2, r6
 8020f02:	f7f6 fe1d 	bl	8017b40 <MoblePalTimerCreate>
 8020f06:	4632      	mov	r2, r6
 8020f08:	490d      	ldr	r1, [pc, #52]	; (8020f40 <MobleConfigModelInit+0x88>)
 8020f0a:	480e      	ldr	r0, [pc, #56]	; (8020f44 <MobleConfigModelInit+0x8c>)
 8020f0c:	f7f6 fe18 	bl	8017b40 <MoblePalTimerCreate>
 8020f10:	4b0d      	ldr	r3, [pc, #52]	; (8020f48 <MobleConfigModelInit+0x90>)
 8020f12:	4a0e      	ldr	r2, [pc, #56]	; (8020f4c <MobleConfigModelInit+0x94>)
 8020f14:	f8c3 295c 	str.w	r2, [r3, #2396]	; 0x95c
 8020f18:	4b0d      	ldr	r3, [pc, #52]	; (8020f50 <MobleConfigModelInit+0x98>)
 8020f1a:	2200      	movs	r2, #0
 8020f1c:	f883 2a38 	strb.w	r2, [r3, #2616]	; 0xa38
 8020f20:	f883 2a39 	strb.w	r2, [r3, #2617]	; 0xa39
 8020f24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020f26:	442b      	add	r3, r5
 8020f28:	4664      	mov	r4, ip
 8020f2a:	f883 e0c0 	strb.w	lr, [r3, #192]	; 0xc0
 8020f2e:	e7d3      	b.n	8020ed8 <MobleConfigModelInit+0x20>
 8020f30:	20000324 	.word	0x20000324
 8020f34:	20000008 	.word	0x20000008
 8020f38:	08025cbd 	.word	0x08025cbd
 8020f3c:	20000400 	.word	0x20000400
 8020f40:	08017c7d 	.word	0x08017c7d
 8020f44:	20000410 	.word	0x20000410
 8020f48:	2000141c 	.word	0x2000141c
 8020f4c:	08017a41 	.word	0x08017a41
 8020f50:	20002514 	.word	0x20002514

08020f54 <MobleConfigModelReset>:
 8020f54:	b538      	push	{r3, r4, r5, lr}
 8020f56:	4a1b      	ldr	r2, [pc, #108]	; (8020fc4 <MobleConfigModelReset+0x70>)
 8020f58:	f892 30b4 	ldrb.w	r3, [r2, #180]	; 0xb4
 8020f5c:	2b01      	cmp	r3, #1
 8020f5e:	d12f      	bne.n	8020fc0 <MobleConfigModelReset+0x6c>
 8020f60:	f882 30ba 	strb.w	r3, [r2, #186]	; 0xba
 8020f64:	2308      	movs	r3, #8
 8020f66:	f882 30b5 	strb.w	r3, [r2, #181]	; 0xb5
 8020f6a:	4b17      	ldr	r3, [pc, #92]	; (8020fc8 <MobleConfigModelReset+0x74>)
 8020f6c:	8818      	ldrh	r0, [r3, #0]
 8020f6e:	2300      	movs	r3, #0
 8020f70:	461d      	mov	r5, r3
 8020f72:	b2d9      	uxtb	r1, r3
 8020f74:	4281      	cmp	r1, r0
 8020f76:	f103 0401 	add.w	r4, r3, #1
 8020f7a:	d31c      	bcc.n	8020fb6 <MobleConfigModelReset+0x62>
 8020f7c:	2302      	movs	r3, #2
 8020f7e:	2100      	movs	r1, #0
 8020f80:	f882 30b6 	strb.w	r3, [r2, #182]	; 0xb6
 8020f84:	2301      	movs	r3, #1
 8020f86:	f882 30b8 	strb.w	r3, [r2, #184]	; 0xb8
 8020f8a:	e9c2 1134 	strd	r1, r1, [r2, #208]	; 0xd0
 8020f8e:	f8d2 00dc 	ldr.w	r0, [r2, #220]	; 0xdc
 8020f92:	f882 10c8 	strb.w	r1, [r2, #200]	; 0xc8
 8020f96:	f8a2 10ca 	strh.w	r1, [r2, #202]	; 0xca
 8020f9a:	f8a2 10d8 	strh.w	r1, [r2, #216]	; 0xd8
 8020f9e:	f7f6 fe61 	bl	8017c64 <MoblePalTimerStop>
 8020fa2:	e9c2 1138 	strd	r1, r1, [r2, #224]	; 0xe0
 8020fa6:	f8d2 00ec 	ldr.w	r0, [r2, #236]	; 0xec
 8020faa:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
 8020fae:	f7f6 fe59 	bl	8017c64 <MoblePalTimerStop>
 8020fb2:	4608      	mov	r0, r1
 8020fb4:	bd38      	pop	{r3, r4, r5, pc}
 8020fb6:	4411      	add	r1, r2
 8020fb8:	4623      	mov	r3, r4
 8020fba:	f881 50c0 	strb.w	r5, [r1, #192]	; 0xc0
 8020fbe:	e7d8      	b.n	8020f72 <MobleConfigModelReset+0x1e>
 8020fc0:	2001      	movs	r0, #1
 8020fc2:	e7f7      	b.n	8020fb4 <MobleConfigModelReset+0x60>
 8020fc4:	20000324 	.word	0x20000324
 8020fc8:	20000008 	.word	0x20000008

08020fcc <MobleStackConfigInvalidate>:
 8020fcc:	b538      	push	{r3, r4, r5, lr}
 8020fce:	4d14      	ldr	r5, [pc, #80]	; (8021020 <MobleStackConfigInvalidate+0x54>)
 8020fd0:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 8020fd4:	781b      	ldrb	r3, [r3, #0]
 8020fd6:	b30b      	cbz	r3, 802101c <MobleStackConfigInvalidate+0x50>
 8020fd8:	f7ff ffbc 	bl	8020f54 <MobleConfigModelReset>
 8020fdc:	f8d5 0680 	ldr.w	r0, [r5, #1664]	; 0x680
 8020fe0:	f7fd ff66 	bl	801eeb0 <MobleConfigNetworkInvalidate>
 8020fe4:	2801      	cmp	r0, #1
 8020fe6:	4604      	mov	r4, r0
 8020fe8:	d816      	bhi.n	8021018 <MobleStackConfigInvalidate+0x4c>
 8020fea:	f8d5 3680 	ldr.w	r3, [r5, #1664]	; 0x680
 8020fee:	781b      	ldrb	r3, [r3, #0]
 8020ff0:	f885 3934 	strb.w	r3, [r5, #2356]	; 0x934
 8020ff4:	f7f8 f92e 	bl	8019254 <MoblePalCryptoForgetAllKeys>
 8020ff8:	2801      	cmp	r0, #1
 8020ffa:	4604      	mov	r4, r0
 8020ffc:	d80c      	bhi.n	8021018 <MobleStackConfigInvalidate+0x4c>
 8020ffe:	f7f8 f9a3 	bl	8019348 <MoblePalCryptoModelsDeInit>
 8021002:	f505 60d0 	add.w	r0, r5, #1664	; 0x680
 8021006:	f7fd fe27 	bl	801ec58 <MobleProvisionUpdateRole>
 802100a:	f895 3854 	ldrb.w	r3, [r5, #2132]	; 0x854
 802100e:	2b01      	cmp	r3, #1
 8021010:	d102      	bne.n	8021018 <MobleStackConfigInvalidate+0x4c>
 8021012:	4a04      	ldr	r2, [pc, #16]	; (8021024 <MobleStackConfigInvalidate+0x58>)
 8021014:	f882 316a 	strb.w	r3, [r2, #362]	; 0x16a
 8021018:	4620      	mov	r0, r4
 802101a:	bd38      	pop	{r3, r4, r5, pc}
 802101c:	2401      	movs	r4, #1
 802101e:	e7fb      	b.n	8021018 <MobleStackConfigInvalidate+0x4c>
 8021020:	2000141c 	.word	0x2000141c
 8021024:	20003f64 	.word	0x20003f64

08021028 <BLEMesh_Unprovision>:
 8021028:	4b07      	ldr	r3, [pc, #28]	; (8021048 <BLEMesh_Unprovision+0x20>)
 802102a:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 802102e:	b510      	push	{r4, lr}
 8021030:	b13b      	cbz	r3, 8021042 <BLEMesh_Unprovision+0x1a>
 8021032:	f7ff ffcb 	bl	8020fcc <MobleStackConfigInvalidate>
 8021036:	4604      	mov	r4, r0
 8021038:	b908      	cbnz	r0, 802103e <BLEMesh_Unprovision+0x16>
 802103a:	f7fe fabd 	bl	801f5b8 <MoblePalBluetoothGracefulReset>
 802103e:	4620      	mov	r0, r4
 8021040:	bd10      	pop	{r4, pc}
 8021042:	2402      	movs	r4, #2
 8021044:	e7fb      	b.n	802103e <BLEMesh_Unprovision+0x16>
 8021046:	bf00      	nop
 8021048:	20002514 	.word	0x20002514

0802104c <MobleConfigModelCreate>:
 802104c:	4b04      	ldr	r3, [pc, #16]	; (8021060 <MobleConfigModelCreate+0x14>)
 802104e:	f893 00b4 	ldrb.w	r0, [r3, #180]	; 0xb4
 8021052:	b918      	cbnz	r0, 802105c <MobleConfigModelCreate+0x10>
 8021054:	2201      	movs	r2, #1
 8021056:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
 802105a:	4770      	bx	lr
 802105c:	2002      	movs	r0, #2
 802105e:	4770      	bx	lr
 8021060:	20000324 	.word	0x20000324

08021064 <MobleConfigModelGetConfigBeacon>:
 8021064:	4b03      	ldr	r3, [pc, #12]	; (8021074 <MobleConfigModelGetConfigBeacon+0x10>)
 8021066:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
 802106a:	1e43      	subs	r3, r0, #1
 802106c:	4258      	negs	r0, r3
 802106e:	4158      	adcs	r0, r3
 8021070:	4770      	bx	lr
 8021072:	bf00      	nop
 8021074:	20000324 	.word	0x20000324

08021078 <MobleStackBeaconGenerator>:
 8021078:	b5f0      	push	{r4, r5, r6, r7, lr}
 802107a:	4e39      	ldr	r6, [pc, #228]	; (8021160 <MobleStackBeaconGenerator+0xe8>)
 802107c:	4c39      	ldr	r4, [pc, #228]	; (8021164 <MobleStackBeaconGenerator+0xec>)
 802107e:	460a      	mov	r2, r1
 8021080:	f894 361c 	ldrb.w	r3, [r4, #1564]	; 0x61c
 8021084:	f896 1a3a 	ldrb.w	r1, [r6, #2618]	; 0xa3a
 8021088:	428b      	cmp	r3, r1
 802108a:	bf8b      	itete	hi
 802108c:	1c4b      	addhi	r3, r1, #1
 802108e:	2300      	movls	r3, #0
 8021090:	b2db      	uxtbhi	r3, r3
 8021092:	4619      	movls	r1, r3
 8021094:	2a00      	cmp	r2, #0
 8021096:	b08d      	sub	sp, #52	; 0x34
 8021098:	4605      	mov	r5, r0
 802109a:	f886 3a3a 	strb.w	r3, [r6, #2618]	; 0xa3a
 802109e:	db2c      	blt.n	80210fa <MobleStackBeaconGenerator+0x82>
 80210a0:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 80210a4:	781b      	ldrb	r3, [r3, #0]
 80210a6:	2b01      	cmp	r3, #1
 80210a8:	d133      	bne.n	8021112 <MobleStackBeaconGenerator+0x9a>
 80210aa:	f7ff ffdb 	bl	8021064 <MobleConfigModelGetConfigBeacon>
 80210ae:	b910      	cbnz	r0, 80210b6 <MobleStackBeaconGenerator+0x3e>
 80210b0:	f04f 32ff 	mov.w	r2, #4294967295
 80210b4:	e021      	b.n	80210fa <MobleStackBeaconGenerator+0x82>
 80210b6:	4b2c      	ldr	r3, [pc, #176]	; (8021168 <MobleStackBeaconGenerator+0xf0>)
 80210b8:	9208      	str	r2, [sp, #32]
 80210ba:	440b      	add	r3, r1
 80210bc:	f8d4 7658 	ldr.w	r7, [r4, #1624]	; 0x658
 80210c0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80210c4:	1e9a      	subs	r2, r3, #2
 80210c6:	4256      	negs	r6, r2
 80210c8:	4156      	adcs	r6, r2
 80210ca:	f894 265c 	ldrb.w	r2, [r4, #1628]	; 0x65c
 80210ce:	2a01      	cmp	r2, #1
 80210d0:	bf08      	it	eq
 80210d2:	f046 0602 	orreq.w	r6, r6, #2
 80210d6:	2b02      	cmp	r3, #2
 80210d8:	d112      	bne.n	8021100 <MobleStackBeaconGenerator+0x88>
 80210da:	2001      	movs	r0, #1
 80210dc:	f7f8 f974 	bl	80193c8 <MoblePalCryptoGetNetworkSecurityKeys>
 80210e0:	2301      	movs	r3, #1
 80210e2:	e9cd 7300 	strd	r7, r3, [sp]
 80210e6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80210ea:	4632      	mov	r2, r6
 80210ec:	a908      	add	r1, sp, #32
 80210ee:	4628      	mov	r0, r5
 80210f0:	f7fc fa9c 	bl	801d62c <MobleBeaconSetSecure>
 80210f4:	2801      	cmp	r0, #1
 80210f6:	d8db      	bhi.n	80210b0 <MobleStackBeaconGenerator+0x38>
 80210f8:	9a08      	ldr	r2, [sp, #32]
 80210fa:	4610      	mov	r0, r2
 80210fc:	b00d      	add	sp, #52	; 0x34
 80210fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021100:	2000      	movs	r0, #0
 8021102:	f7f8 f961 	bl	80193c8 <MoblePalCryptoGetNetworkSecurityKeys>
 8021106:	2300      	movs	r3, #0
 8021108:	e9cd 7300 	strd	r7, r3, [sp]
 802110c:	f100 0328 	add.w	r3, r0, #40	; 0x28
 8021110:	e7eb      	b.n	80210ea <MobleStackBeaconGenerator+0x72>
 8021112:	f7f6 ff53 	bl	8017fbc <MoblePalBluetoothGetConnectionState>
 8021116:	2802      	cmp	r0, #2
 8021118:	d120      	bne.n	802115c <MobleStackBeaconGenerator+0xe4>
 802111a:	f894 3854 	ldrb.w	r3, [r4, #2132]	; 0x854
 802111e:	b1eb      	cbz	r3, 802115c <MobleStackBeaconGenerator+0xe4>
 8021120:	f896 6725 	ldrb.w	r6, [r6, #1829]	; 0x725
 8021124:	b9d6      	cbnz	r6, 802115c <MobleStackBeaconGenerator+0xe4>
 8021126:	9203      	str	r2, [sp, #12]
 8021128:	2210      	movs	r2, #16
 802112a:	4631      	mov	r1, r6
 802112c:	eb0d 0002 	add.w	r0, sp, r2
 8021130:	f008 fbc0 	bl	80298b4 <memset>
 8021134:	a804      	add	r0, sp, #16
 8021136:	f7f6 ff61 	bl	8017ffc <MoblePalBluetoothGetBluetoothAddress>
 802113a:	4b0b      	ldr	r3, [pc, #44]	; (8021168 <MobleStackBeaconGenerator+0xf0>)
 802113c:	685b      	ldr	r3, [r3, #4]
 802113e:	a808      	add	r0, sp, #32
 8021140:	695b      	ldr	r3, [r3, #20]
 8021142:	4798      	blx	r3
 8021144:	f8b4 38fc 	ldrh.w	r3, [r4, #2300]	; 0x8fc
 8021148:	9600      	str	r6, [sp, #0]
 802114a:	aa08      	add	r2, sp, #32
 802114c:	a903      	add	r1, sp, #12
 802114e:	4628      	mov	r0, r5
 8021150:	f7fc fa35 	bl	801d5be <MobleBeaconSetUnprovisioned>
 8021154:	2801      	cmp	r0, #1
 8021156:	d8ab      	bhi.n	80210b0 <MobleStackBeaconGenerator+0x38>
 8021158:	9a03      	ldr	r2, [sp, #12]
 802115a:	e7ce      	b.n	80210fa <MobleStackBeaconGenerator+0x82>
 802115c:	2200      	movs	r2, #0
 802115e:	e7cc      	b.n	80210fa <MobleStackBeaconGenerator+0x82>
 8021160:	20002514 	.word	0x20002514
 8021164:	2000141c 	.word	0x2000141c
 8021168:	20000324 	.word	0x20000324

0802116c <MobleConfigModelGetRelayEnableStatus>:
 802116c:	4b03      	ldr	r3, [pc, #12]	; (802117c <MobleConfigModelGetRelayEnableStatus+0x10>)
 802116e:	f893 00bd 	ldrb.w	r0, [r3, #189]	; 0xbd
 8021172:	1e43      	subs	r3, r0, #1
 8021174:	4258      	negs	r0, r3
 8021176:	4158      	adcs	r0, r3
 8021178:	4770      	bx	lr
 802117a:	bf00      	nop
 802117c:	20000324 	.word	0x20000324

08021180 <MobleNetworkDecideRetransmission>:
 8021180:	b5f0      	push	{r4, r5, r6, r7, lr}
 8021182:	b085      	sub	sp, #20
 8021184:	2300      	movs	r3, #0
 8021186:	460c      	mov	r4, r1
 8021188:	f88d 3003 	strb.w	r3, [sp, #3]
 802118c:	b928      	cbnz	r0, 802119a <MobleNetworkDecideRetransmission+0x1a>
 802118e:	4b53      	ldr	r3, [pc, #332]	; (80212dc <MobleNetworkDecideRetransmission+0x15c>)
 8021190:	4a53      	ldr	r2, [pc, #332]	; (80212e0 <MobleNetworkDecideRetransmission+0x160>)
 8021192:	217a      	movs	r1, #122	; 0x7a
 8021194:	4853      	ldr	r0, [pc, #332]	; (80212e4 <MobleNetworkDecideRetransmission+0x164>)
 8021196:	f007 fc97 	bl	8028ac8 <__assert_func>
 802119a:	b919      	cbnz	r1, 80211a4 <MobleNetworkDecideRetransmission+0x24>
 802119c:	4b52      	ldr	r3, [pc, #328]	; (80212e8 <MobleNetworkDecideRetransmission+0x168>)
 802119e:	4a50      	ldr	r2, [pc, #320]	; (80212e0 <MobleNetworkDecideRetransmission+0x160>)
 80211a0:	217b      	movs	r1, #123	; 0x7b
 80211a2:	e7f7      	b.n	8021194 <MobleNetworkDecideRetransmission+0x14>
 80211a4:	f9b1 2016 	ldrsh.w	r2, [r1, #22]
 80211a8:	8acb      	ldrh	r3, [r1, #22]
 80211aa:	2a00      	cmp	r2, #0
 80211ac:	dd1f      	ble.n	80211ee <MobleNetworkDecideRetransmission+0x6e>
 80211ae:	6802      	ldr	r2, [r0, #0]
 80211b0:	8851      	ldrh	r1, [r2, #2]
 80211b2:	428b      	cmp	r3, r1
 80211b4:	d308      	bcc.n	80211c8 <MobleNetworkDecideRetransmission+0x48>
 80211b6:	7f12      	ldrb	r2, [r2, #28]
 80211b8:	440a      	add	r2, r1
 80211ba:	4293      	cmp	r3, r2
 80211bc:	da04      	bge.n	80211c8 <MobleNetworkDecideRetransmission+0x48>
 80211be:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80211c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80211c6:	e00f      	b.n	80211e8 <MobleNetworkDecideRetransmission+0x68>
 80211c8:	4a48      	ldr	r2, [pc, #288]	; (80212ec <MobleNetworkDecideRetransmission+0x16c>)
 80211ca:	f892 20be 	ldrb.w	r2, [r2, #190]	; 0xbe
 80211ce:	2a01      	cmp	r2, #1
 80211d0:	d10d      	bne.n	80211ee <MobleNetworkDecideRetransmission+0x6e>
 80211d2:	4618      	mov	r0, r3
 80211d4:	f7fd f852 	bl	801e27c <BnrgmFrndMgmtGetFriendshipStatus>
 80211d8:	b948      	cbnz	r0, 80211ee <MobleNetworkDecideRetransmission+0x6e>
 80211da:	7be3      	ldrb	r3, [r4, #15]
 80211dc:	2b01      	cmp	r3, #1
 80211de:	d92b      	bls.n	8021238 <MobleNetworkDecideRetransmission+0xb8>
 80211e0:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80211e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80211e8:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80211ec:	e024      	b.n	8021238 <MobleNetworkDecideRetransmission+0xb8>
 80211ee:	7be3      	ldrb	r3, [r4, #15]
 80211f0:	4e3e      	ldr	r6, [pc, #248]	; (80212ec <MobleNetworkDecideRetransmission+0x16c>)
 80211f2:	8ae5      	ldrh	r5, [r4, #22]
 80211f4:	f896 70be 	ldrb.w	r7, [r6, #190]	; 0xbe
 80211f8:	2b01      	cmp	r3, #1
 80211fa:	bf82      	ittt	hi
 80211fc:	f8b4 3040 	ldrhhi.w	r3, [r4, #64]	; 0x40
 8021200:	f443 7380 	orrhi.w	r3, r3, #256	; 0x100
 8021204:	f8a4 3040 	strhhi.w	r3, [r4, #64]	; 0x40
 8021208:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802120c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8021210:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8021214:	d156      	bne.n	80212c4 <MobleNetworkDecideRetransmission+0x144>
 8021216:	4628      	mov	r0, r5
 8021218:	f7f9 faf4 	bl	801a804 <MoblePalCryptoIsSubscriptionExists>
 802121c:	b978      	cbnz	r0, 802123e <MobleNetworkDecideRetransmission+0xbe>
 802121e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8021222:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021226:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 802122a:	2f01      	cmp	r7, #1
 802122c:	d01c      	beq.n	8021268 <MobleNetworkDecideRetransmission+0xe8>
 802122e:	6873      	ldr	r3, [r6, #4]
 8021230:	6a1b      	ldr	r3, [r3, #32]
 8021232:	4798      	blx	r3
 8021234:	2800      	cmp	r0, #0
 8021236:	d1c2      	bne.n	80211be <MobleNetworkDecideRetransmission+0x3e>
 8021238:	2000      	movs	r0, #0
 802123a:	b005      	add	sp, #20
 802123c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802123e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8021242:	429d      	cmp	r5, r3
 8021244:	d104      	bne.n	8021250 <MobleNetworkDecideRetransmission+0xd0>
 8021246:	f896 30bc 	ldrb.w	r3, [r6, #188]	; 0xbc
 802124a:	2b01      	cmp	r3, #1
 802124c:	d1ed      	bne.n	802122a <MobleNetworkDecideRetransmission+0xaa>
 802124e:	e7e6      	b.n	802121e <MobleNetworkDecideRetransmission+0x9e>
 8021250:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8021254:	429d      	cmp	r5, r3
 8021256:	d119      	bne.n	802128c <MobleNetworkDecideRetransmission+0x10c>
 8021258:	2f01      	cmp	r7, #1
 802125a:	d1e8      	bne.n	802122e <MobleNetworkDecideRetransmission+0xae>
 802125c:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8021260:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8021264:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 8021268:	aa01      	add	r2, sp, #4
 802126a:	f10d 0103 	add.w	r1, sp, #3
 802126e:	4628      	mov	r0, r5
 8021270:	f7fd f82a 	bl	801e2c8 <BnrgmFrndMgmtGetSubscrStatus>
 8021274:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8021278:	2b00      	cmp	r3, #0
 802127a:	d0d8      	beq.n	802122e <MobleNetworkDecideRetransmission+0xae>
 802127c:	7be3      	ldrb	r3, [r4, #15]
 802127e:	2b01      	cmp	r3, #1
 8021280:	d9d5      	bls.n	802122e <MobleNetworkDecideRetransmission+0xae>
 8021282:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8021286:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802128a:	e011      	b.n	80212b0 <MobleNetworkDecideRetransmission+0x130>
 802128c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8021290:	429d      	cmp	r5, r3
 8021292:	d103      	bne.n	802129c <MobleNetworkDecideRetransmission+0x11c>
 8021294:	f7ff ff6a 	bl	802116c <MobleConfigModelGetRelayEnableStatus>
 8021298:	2801      	cmp	r0, #1
 802129a:	e7d7      	b.n	802124c <MobleNetworkDecideRetransmission+0xcc>
 802129c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80212a0:	429d      	cmp	r5, r3
 80212a2:	d10b      	bne.n	80212bc <MobleNetworkDecideRetransmission+0x13c>
 80212a4:	2f01      	cmp	r7, #1
 80212a6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 80212aa:	d004      	beq.n	80212b6 <MobleNetworkDecideRetransmission+0x136>
 80212ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80212b0:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 80212b4:	e7bb      	b.n	802122e <MobleNetworkDecideRetransmission+0xae>
 80212b6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80212ba:	e7d3      	b.n	8021264 <MobleNetworkDecideRetransmission+0xe4>
 80212bc:	f8b6 30e2 	ldrh.w	r3, [r6, #226]	; 0xe2
 80212c0:	42ab      	cmp	r3, r5
 80212c2:	e7c3      	b.n	802124c <MobleNetworkDecideRetransmission+0xcc>
 80212c4:	f405 4340 	and.w	r3, r5, #49152	; 0xc000
 80212c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80212cc:	d1ad      	bne.n	802122a <MobleNetworkDecideRetransmission+0xaa>
 80212ce:	4628      	mov	r0, r5
 80212d0:	f7f9 fa98 	bl	801a804 <MoblePalCryptoIsSubscriptionExists>
 80212d4:	2800      	cmp	r0, #0
 80212d6:	d0a2      	beq.n	802121e <MobleNetworkDecideRetransmission+0x9e>
 80212d8:	e7a7      	b.n	802122a <MobleNetworkDecideRetransmission+0xaa>
 80212da:	bf00      	nop
 80212dc:	08033338 	.word	0x08033338
 80212e0:	08031dc8 	.word	0x08031dc8
 80212e4:	08033816 	.word	0x08033816
 80212e8:	080334cd 	.word	0x080334cd
 80212ec:	20000324 	.word	0x20000324

080212f0 <MobleConfigModelSetNodeIdentity>:
 80212f0:	2802      	cmp	r0, #2
 80212f2:	bf9d      	ittte	ls
 80212f4:	4b02      	ldrls	r3, [pc, #8]	; (8021300 <MobleConfigModelSetNodeIdentity+0x10>)
 80212f6:	f883 00bb 	strbls.w	r0, [r3, #187]	; 0xbb
 80212fa:	2000      	movls	r0, #0
 80212fc:	2003      	movhi	r0, #3
 80212fe:	4770      	bx	lr
 8021300:	20000324 	.word	0x20000324

08021304 <BnrgmStackSetNodeIdentityState>:
 8021304:	b510      	push	{r4, lr}
 8021306:	4604      	mov	r4, r0
 8021308:	b910      	cbnz	r0, 8021310 <BnrgmStackSetNodeIdentityState+0xc>
 802130a:	2102      	movs	r1, #2
 802130c:	4608      	mov	r0, r1
 802130e:	bd10      	pop	{r4, pc}
 8021310:	4b17      	ldr	r3, [pc, #92]	; (8021370 <BnrgmStackSetNodeIdentityState+0x6c>)
 8021312:	f893 30bb 	ldrb.w	r3, [r3, #187]	; 0xbb
 8021316:	428b      	cmp	r3, r1
 8021318:	d103      	bne.n	8021322 <BnrgmStackSetNodeIdentityState+0x1e>
 802131a:	2b01      	cmp	r3, #1
 802131c:	d021      	beq.n	8021362 <BnrgmStackSetNodeIdentityState+0x5e>
 802131e:	2100      	movs	r1, #0
 8021320:	e7f4      	b.n	802130c <BnrgmStackSetNodeIdentityState+0x8>
 8021322:	4608      	mov	r0, r1
 8021324:	f7ff ffe4 	bl	80212f0 <MobleConfigModelSetNodeIdentity>
 8021328:	2901      	cmp	r1, #1
 802132a:	d10f      	bne.n	802134c <BnrgmStackSetNodeIdentityState+0x48>
 802132c:	4911      	ldr	r1, [pc, #68]	; (8021374 <BnrgmStackSetNodeIdentityState+0x70>)
 802132e:	4622      	mov	r2, r4
 8021330:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8021334:	f7f6 fc04 	bl	8017b40 <MoblePalTimerCreate>
 8021338:	2801      	cmp	r0, #1
 802133a:	d8e6      	bhi.n	802130a <BnrgmStackSetNodeIdentityState+0x6>
 802133c:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
 8021340:	f64e 2160 	movw	r1, #60000	; 0xea60
 8021344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021348:	f7f6 bc64 	b.w	8017c14 <MoblePalTimerStartOnce>
 802134c:	2900      	cmp	r1, #0
 802134e:	d1e6      	bne.n	802131e <BnrgmStackSetNodeIdentityState+0x1a>
 8021350:	f8d4 017c 	ldr.w	r0, [r4, #380]	; 0x17c
 8021354:	f7f6 fc86 	bl	8017c64 <MoblePalTimerStop>
 8021358:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802135c:	b133      	cbz	r3, 802136c <BnrgmStackSetNodeIdentityState+0x68>
 802135e:	7019      	strb	r1, [r3, #0]
 8021360:	e7d4      	b.n	802130c <BnrgmStackSetNodeIdentityState+0x8>
 8021362:	f8d0 017c 	ldr.w	r0, [r0, #380]	; 0x17c
 8021366:	f7f6 fc7d 	bl	8017c64 <MoblePalTimerStop>
 802136a:	e7e5      	b.n	8021338 <BnrgmStackSetNodeIdentityState+0x34>
 802136c:	2103      	movs	r1, #3
 802136e:	e7cd      	b.n	802130c <BnrgmStackSetNodeIdentityState+0x8>
 8021370:	20000324 	.word	0x20000324
 8021374:	08017d79 	.word	0x08017d79

08021378 <MobleStackConfigValidate>:
 8021378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802137a:	4b32      	ldr	r3, [pc, #200]	; (8021444 <MobleStackConfigValidate+0xcc>)
 802137c:	4c32      	ldr	r4, [pc, #200]	; (8021448 <MobleStackConfigValidate+0xd0>)
 802137e:	2600      	movs	r6, #0
 8021380:	f883 6166 	strb.w	r6, [r3, #358]	; 0x166
 8021384:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 8021388:	2201      	movs	r2, #1
 802138a:	6858      	ldr	r0, [r3, #4]
 802138c:	701a      	strb	r2, [r3, #0]
 802138e:	f7f8 fc47 	bl	8019c20 <MoblePalCryptoSetIvIndex>
 8021392:	2801      	cmp	r0, #1
 8021394:	4605      	mov	r5, r0
 8021396:	d853      	bhi.n	8021440 <MobleStackConfigValidate+0xc8>
 8021398:	4f2c      	ldr	r7, [pc, #176]	; (802144c <MobleStackConfigValidate+0xd4>)
 802139a:	4b2d      	ldr	r3, [pc, #180]	; (8021450 <MobleStackConfigValidate+0xd8>)
 802139c:	f8d4 5680 	ldr.w	r5, [r4, #1664]	; 0x680
 80213a0:	f8c4 3924 	str.w	r3, [r4, #2340]	; 0x924
 80213a4:	687b      	ldr	r3, [r7, #4]
 80213a6:	f8c4 67dc 	str.w	r6, [r4, #2012]	; 0x7dc
 80213aa:	69db      	ldr	r3, [r3, #28]
 80213ac:	60ae      	str	r6, [r5, #8]
 80213ae:	4798      	blx	r3
 80213b0:	7728      	strb	r0, [r5, #28]
 80213b2:	f8d4 0680 	ldr.w	r0, [r4, #1664]	; 0x680
 80213b6:	f7fb fd5f 	bl	801ce78 <MobleConfigNetworkSave>
 80213ba:	2801      	cmp	r0, #1
 80213bc:	4605      	mov	r5, r0
 80213be:	d83f      	bhi.n	8021440 <MobleStackConfigValidate+0xc8>
 80213c0:	f8d4 0680 	ldr.w	r0, [r4, #1664]	; 0x680
 80213c4:	f7fb fc88 	bl	801ccd8 <MobleConfigSaveSeq>
 80213c8:	2801      	cmp	r0, #1
 80213ca:	4605      	mov	r5, r0
 80213cc:	d838      	bhi.n	8021440 <MobleStackConfigValidate+0xc8>
 80213ce:	f242 7310 	movw	r3, #10000	; 0x2710
 80213d2:	f8d4 0858 	ldr.w	r0, [r4, #2136]	; 0x858
 80213d6:	f8a4 385c 	strh.w	r3, [r4, #2140]	; 0x85c
 80213da:	f7f9 fc17 	bl	801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>
 80213de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80213e2:	f8d4 0860 	ldr.w	r0, [r4, #2144]	; 0x860
 80213e6:	f8a4 3864 	strh.w	r3, [r4, #2148]	; 0x864
 80213ea:	f7f9 fc0f 	bl	801ac0c <BnrgmTransmitChangeRegularlyGeneratedInterval>
 80213ee:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 80213f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80213f6:	2b01      	cmp	r3, #1
 80213f8:	d109      	bne.n	802140e <MobleStackConfigValidate+0x96>
 80213fa:	f7e5 f83b 	bl	8006474 <BLEMesh_ProvisionCallback>
 80213fe:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 8021402:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 8021406:	f883 6039 	strb.w	r6, [r3, #57]	; 0x39
 802140a:	f7fb fcf1 	bl	801cdf0 <MobleApplicationInit>
 802140e:	4811      	ldr	r0, [pc, #68]	; (8021454 <MobleStackConfigValidate+0xdc>)
 8021410:	2101      	movs	r1, #1
 8021412:	f7fd fc21 	bl	801ec58 <MobleProvisionUpdateRole>
 8021416:	f7ff ff75 	bl	8021304 <BnrgmStackSetNodeIdentityState>
 802141a:	f7f6 fdcf 	bl	8017fbc <MoblePalBluetoothGetConnectionState>
 802141e:	2802      	cmp	r0, #2
 8021420:	d00e      	beq.n	8021440 <MobleStackConfigValidate+0xc8>
 8021422:	480c      	ldr	r0, [pc, #48]	; (8021454 <MobleStackConfigValidate+0xdc>)
 8021424:	2101      	movs	r1, #1
 8021426:	f7fb ff33 	bl	801d290 <BnrgmStackSetDummyProxyModeState>
 802142a:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 802142e:	2b02      	cmp	r3, #2
 8021430:	d006      	beq.n	8021440 <MobleStackConfigValidate+0xc8>
 8021432:	f894 3854 	ldrb.w	r3, [r4, #2132]	; 0x854
 8021436:	2b01      	cmp	r3, #1
 8021438:	d102      	bne.n	8021440 <MobleStackConfigValidate+0xc8>
 802143a:	2000      	movs	r0, #0
 802143c:	f7fe f87a 	bl	801f534 <BnrgmTransmitSetAutoScanState>
 8021440:	4628      	mov	r0, r5
 8021442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021444:	20003f64 	.word	0x20003f64
 8021448:	2000141c 	.word	0x2000141c
 802144c:	20000324 	.word	0x20000324
 8021450:	1ee62800 	.word	0x1ee62800
 8021454:	20001a9c 	.word	0x20001a9c

08021458 <MobleProvision_UnprovisionedNode_CompleteOperation>:
 8021458:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802145c:	4c94      	ldr	r4, [pc, #592]	; (80216b0 <MobleProvision_UnprovisionedNode_CompleteOperation+0x258>)
 802145e:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 8021462:	f893 21a8 	ldrb.w	r2, [r3, #424]	; 0x1a8
 8021466:	b122      	cbz	r2, 8021472 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a>
 8021468:	2207      	movs	r2, #7
 802146a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 802146e:	2200      	movs	r2, #0
 8021470:	e01e      	b.n	80214b0 <MobleProvision_UnprovisionedNode_CompleteOperation+0x58>
 8021472:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8021476:	2a07      	cmp	r2, #7
 8021478:	f200 80f2 	bhi.w	8021660 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 802147c:	a101      	add	r1, pc, #4	; (adr r1, 8021484 <MobleProvision_UnprovisionedNode_CompleteOperation+0x2c>)
 802147e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8021482:	bf00      	nop
 8021484:	080214a5 	.word	0x080214a5
 8021488:	080214b7 	.word	0x080214b7
 802148c:	08021667 	.word	0x08021667
 8021490:	0802165b 	.word	0x0802165b
 8021494:	08021675 	.word	0x08021675
 8021498:	08021681 	.word	0x08021681
 802149c:	08021661 	.word	0x08021661
 80214a0:	0802146f 	.word	0x0802146f
 80214a4:	f893 1045 	ldrb.w	r1, [r3, #69]	; 0x45
 80214a8:	2201      	movs	r2, #1
 80214aa:	2900      	cmp	r1, #0
 80214ac:	f040 80d6 	bne.w	802165c <MobleProvision_UnprovisionedNode_CompleteOperation+0x204>
 80214b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80214b4:	e0d4      	b.n	8021660 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 80214b6:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80214ba:	2a01      	cmp	r2, #1
 80214bc:	d857      	bhi.n	802156e <MobleProvision_UnprovisionedNode_CompleteOperation+0x116>
 80214be:	3201      	adds	r2, #1
 80214c0:	b2d2      	uxtb	r2, r2
 80214c2:	2a02      	cmp	r2, #2
 80214c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80214c8:	f040 80ca 	bne.w	8021660 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 80214cc:	f8d4 16f0 	ldr.w	r1, [r4, #1776]	; 0x6f0
 80214d0:	f891 11fa 	ldrb.w	r1, [r1, #506]	; 0x1fa
 80214d4:	2900      	cmp	r1, #0
 80214d6:	f000 80c3 	beq.w	8021660 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 80214da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80214de:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 80214e2:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
 80214e6:	2a02      	cmp	r2, #2
 80214e8:	d166      	bne.n	80215b8 <MobleProvision_UnprovisionedNode_CompleteOperation+0x160>
 80214ea:	f8d3 2294 	ldr.w	r2, [r3, #660]	; 0x294
 80214ee:	2a00      	cmp	r2, #0
 80214f0:	d062      	beq.n	80215b8 <MobleProvision_UnprovisionedNode_CompleteOperation+0x160>
 80214f2:	f893 31fc 	ldrb.w	r3, [r3, #508]	; 0x1fc
 80214f6:	2b03      	cmp	r3, #3
 80214f8:	d93b      	bls.n	8021572 <MobleProvision_UnprovisionedNode_CompleteOperation+0x11a>
 80214fa:	2b04      	cmp	r3, #4
 80214fc:	d151      	bne.n	80215a2 <MobleProvision_UnprovisionedNode_CompleteOperation+0x14a>
 80214fe:	2500      	movs	r5, #0
 8021500:	263e      	movs	r6, #62	; 0x3e
 8021502:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021506:	f893 2278 	ldrb.w	r2, [r3, #632]	; 0x278
 802150a:	f893 31fd 	ldrb.w	r3, [r3, #509]	; 0x1fd
 802150e:	429a      	cmp	r2, r3
 8021510:	d247      	bcs.n	80215a2 <MobleProvision_UnprovisionedNode_CompleteOperation+0x14a>
 8021512:	4668      	mov	r0, sp
 8021514:	e9cd 5500 	strd	r5, r5, [sp]
 8021518:	f7f4 fa00 	bl	801591c <hci_le_rand>
 802151c:	466a      	mov	r2, sp
 802151e:	2108      	movs	r1, #8
 8021520:	f812 3b01 	ldrb.w	r3, [r2], #1
 8021524:	fbb3 f0f6 	udiv	r0, r3, r6
 8021528:	fb06 3310 	mls	r3, r6, r0, r3
 802152c:	b2db      	uxtb	r3, r3
 802152e:	2b0a      	cmp	r3, #10
 8021530:	f200 808e 	bhi.w	8021650 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1f8>
 8021534:	3330      	adds	r3, #48	; 0x30
 8021536:	3901      	subs	r1, #1
 8021538:	f802 3c01 	strb.w	r3, [r2, #-1]
 802153c:	d1f0      	bne.n	8021520 <MobleProvision_UnprovisionedNode_CompleteOperation+0xc8>
 802153e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021542:	f893 0278 	ldrb.w	r0, [r3, #632]	; 0x278
 8021546:	f893 21fd 	ldrb.w	r2, [r3, #509]	; 0x1fd
 802154a:	1a12      	subs	r2, r2, r0
 802154c:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8021550:	2a08      	cmp	r2, #8
 8021552:	bfa8      	it	ge
 8021554:	2208      	movge	r2, #8
 8021556:	4418      	add	r0, r3
 8021558:	4669      	mov	r1, sp
 802155a:	f008 f991 	bl	8029880 <memmove>
 802155e:	f8d4 26f0 	ldr.w	r2, [r4, #1776]	; 0x6f0
 8021562:	f892 3278 	ldrb.w	r3, [r2, #632]	; 0x278
 8021566:	3308      	adds	r3, #8
 8021568:	f882 3278 	strb.w	r3, [r2, #632]	; 0x278
 802156c:	e7c9      	b.n	8021502 <MobleProvision_UnprovisionedNode_CompleteOperation+0xaa>
 802156e:	2202      	movs	r2, #2
 8021570:	e7b3      	b.n	80214da <MobleProvision_UnprovisionedNode_CompleteOperation+0x82>
 8021572:	2200      	movs	r2, #0
 8021574:	2300      	movs	r3, #0
 8021576:	e9cd 2300 	strd	r2, r3, [sp]
 802157a:	2700      	movs	r7, #0
 802157c:	250a      	movs	r5, #10
 802157e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021582:	f893 11fd 	ldrb.w	r1, [r3, #509]	; 0x1fd
 8021586:	b2fa      	uxtb	r2, r7
 8021588:	4291      	cmp	r1, r2
 802158a:	d849      	bhi.n	8021620 <MobleProvision_UnprovisionedNode_CompleteOperation+0x1c8>
 802158c:	2200      	movs	r2, #0
 802158e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270
 8021592:	f8c3 2274 	str.w	r2, [r3, #628]	; 0x274
 8021596:	466a      	mov	r2, sp
 8021598:	ca03      	ldmia	r2!, {r0, r1}
 802159a:	f8c3 0268 	str.w	r0, [r3, #616]	; 0x268
 802159e:	f8c3 126c 	str.w	r1, [r3, #620]	; 0x26c
 80215a2:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80215a6:	f890 11fd 	ldrb.w	r1, [r0, #509]	; 0x1fd
 80215aa:	f8d0 3294 	ldr.w	r3, [r0, #660]	; 0x294
 80215ae:	f880 1278 	strb.w	r1, [r0, #632]	; 0x278
 80215b2:	f500 701a 	add.w	r0, r0, #616	; 0x268
 80215b6:	4798      	blx	r3
 80215b8:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 80215bc:	f893 21fb 	ldrb.w	r2, [r3, #507]	; 0x1fb
 80215c0:	2a03      	cmp	r2, #3
 80215c2:	d11a      	bne.n	80215fa <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a2>
 80215c4:	f8d3 2298 	ldr.w	r2, [r3, #664]	; 0x298
 80215c8:	b1ba      	cbz	r2, 80215fa <MobleProvision_UnprovisionedNode_CompleteOperation+0x1a2>
 80215ca:	f893 01fd 	ldrb.w	r0, [r3, #509]	; 0x1fd
 80215ce:	4790      	blx	r2
 80215d0:	4601      	mov	r1, r0
 80215d2:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80215d6:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80215da:	2a03      	cmp	r2, #3
 80215dc:	bf14      	ite	ne
 80215de:	f890 21fd 	ldrbne.w	r2, [r0, #509]	; 0x1fd
 80215e2:	2202      	moveq	r2, #2
 80215e4:	f880 2278 	strb.w	r2, [r0, #632]	; 0x278
 80215e8:	f500 701a 	add.w	r0, r0, #616	; 0x268
 80215ec:	f008 f948 	bl	8029880 <memmove>
 80215f0:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 80215f4:	2203      	movs	r2, #3
 80215f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80215fa:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80215fe:	f890 31fb 	ldrb.w	r3, [r0, #507]	; 0x1fb
 8021602:	2b01      	cmp	r3, #1
 8021604:	d12c      	bne.n	8021660 <MobleProvision_UnprovisionedNode_CompleteOperation+0x208>
 8021606:	f890 227e 	ldrb.w	r2, [r0, #638]	; 0x27e
 802160a:	f880 2278 	strb.w	r2, [r0, #632]	; 0x278
 802160e:	f200 217f 	addw	r1, r0, #639	; 0x27f
 8021612:	f500 701a 	add.w	r0, r0, #616	; 0x268
 8021616:	b002      	add	sp, #8
 8021618:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802161c:	f008 b930 	b.w	8029880 <memmove>
 8021620:	9e00      	ldr	r6, [sp, #0]
 8021622:	9b01      	ldr	r3, [sp, #4]
 8021624:	fba6 8605 	umull	r8, r6, r6, r5
 8021628:	fb05 6603 	mla	r6, r5, r3, r6
 802162c:	f7f6 fd26 	bl	801807c <MoblePalBluetoothRandom>
 8021630:	fbb0 f3f5 	udiv	r3, r0, r5
 8021634:	fb03 0015 	mls	r0, r3, r5, r0
 8021638:	b2c0      	uxtb	r0, r0
 802163a:	1e43      	subs	r3, r0, #1
 802163c:	2b08      	cmp	r3, #8
 802163e:	d8f5      	bhi.n	802162c <MobleProvision_UnprovisionedNode_CompleteOperation+0x1d4>
 8021640:	eb10 0008 	adds.w	r0, r0, r8
 8021644:	f146 0600 	adc.w	r6, r6, #0
 8021648:	e9cd 0600 	strd	r0, r6, [sp]
 802164c:	3701      	adds	r7, #1
 802164e:	e796      	b.n	802157e <MobleProvision_UnprovisionedNode_CompleteOperation+0x126>
 8021650:	2b24      	cmp	r3, #36	; 0x24
 8021652:	bf94      	ite	ls
 8021654:	3357      	addls	r3, #87	; 0x57
 8021656:	331d      	addhi	r3, #29
 8021658:	e76d      	b.n	8021536 <MobleProvision_UnprovisionedNode_CompleteOperation+0xde>
 802165a:	2202      	movs	r2, #2
 802165c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8021660:	b002      	add	sp, #8
 8021662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021666:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 802166a:	b90a      	cbnz	r2, 8021670 <MobleProvision_UnprovisionedNode_CompleteOperation+0x218>
 802166c:	2201      	movs	r2, #1
 802166e:	e71f      	b.n	80214b0 <MobleProvision_UnprovisionedNode_CompleteOperation+0x58>
 8021670:	2204      	movs	r2, #4
 8021672:	e7f3      	b.n	802165c <MobleProvision_UnprovisionedNode_CompleteOperation+0x204>
 8021674:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8021678:	2a00      	cmp	r2, #0
 802167a:	d0f7      	beq.n	802166c <MobleProvision_UnprovisionedNode_CompleteOperation+0x214>
 802167c:	2205      	movs	r2, #5
 802167e:	e7ed      	b.n	802165c <MobleProvision_UnprovisionedNode_CompleteOperation+0x204>
 8021680:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8021684:	2a00      	cmp	r2, #0
 8021686:	d0f1      	beq.n	802166c <MobleProvision_UnprovisionedNode_CompleteOperation+0x214>
 8021688:	2206      	movs	r2, #6
 802168a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 802168e:	f8d4 36f0 	ldr.w	r3, [r4, #1776]	; 0x6f0
 8021692:	681b      	ldr	r3, [r3, #0]
 8021694:	2201      	movs	r2, #1
 8021696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 802169a:	f7ff fe6d 	bl	8021378 <MobleStackConfigValidate>
 802169e:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80216a2:	2104      	movs	r1, #4
 80216a4:	b002      	add	sp, #8
 80216a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80216aa:	f7fe bf5d 	b.w	8020568 <MobleStackFSM>
 80216ae:	bf00      	nop
 80216b0:	20002514 	.word	0x20002514

080216b4 <MobleProvision_CompleteOperation>:
 80216b4:	b908      	cbnz	r0, 80216ba <MobleProvision_CompleteOperation+0x6>
 80216b6:	f7fe bc9f 	b.w	801fff8 <MobleProvision_ProvisionerNode_CompleteOperation>
 80216ba:	f7ff becd 	b.w	8021458 <MobleProvision_UnprovisionedNode_CompleteOperation>

080216be <Test_UpperTester_Set11>:
 80216be:	b510      	push	{r4, lr}
 80216c0:	780b      	ldrb	r3, [r1, #0]
 80216c2:	3b30      	subs	r3, #48	; 0x30
 80216c4:	2b01      	cmp	r3, #1
 80216c6:	4604      	mov	r4, r0
 80216c8:	d80d      	bhi.n	80216e6 <Test_UpperTester_Set11+0x28>
 80216ca:	2101      	movs	r1, #1
 80216cc:	2000      	movs	r0, #0
 80216ce:	f7f7 fcc5 	bl	801905c <MoblePalCryptoSetNodeIdntyState>
 80216d2:	2101      	movs	r1, #1
 80216d4:	4608      	mov	r0, r1
 80216d6:	f7f7 fcc1 	bl	801905c <MoblePalCryptoSetNodeIdntyState>
 80216da:	2101      	movs	r1, #1
 80216dc:	4620      	mov	r0, r4
 80216de:	f7ff fe11 	bl	8021304 <BnrgmStackSetNodeIdentityState>
 80216e2:	2000      	movs	r0, #0
 80216e4:	bd10      	pop	{r4, pc}
 80216e6:	2003      	movs	r0, #3
 80216e8:	e7fc      	b.n	80216e4 <Test_UpperTester_Set11+0x26>
	...

080216ec <ModelConfigUpdateKRState>:
 80216ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80216ee:	4e25      	ldr	r6, [pc, #148]	; (8021784 <ModelConfigUpdateKRState+0x98>)
 80216f0:	4b25      	ldr	r3, [pc, #148]	; (8021788 <ModelConfigUpdateKRState+0x9c>)
 80216f2:	440e      	add	r6, r1
 80216f4:	227c      	movs	r2, #124	; 0x7c
 80216f6:	fb02 3301 	mla	r3, r2, r1, r3
 80216fa:	f896 40c0 	ldrb.w	r4, [r6, #192]	; 0xc0
 80216fe:	4605      	mov	r5, r0
 8021700:	460f      	mov	r7, r1
 8021702:	f8b3 0448 	ldrh.w	r0, [r3, #1096]	; 0x448
 8021706:	b99c      	cbnz	r4, 8021730 <ModelConfigUpdateKRState+0x44>
 8021708:	f7f7 fc5a 	bl	8018fc0 <MoblePalCryptoHasNewNetworkKey>
 802170c:	2801      	cmp	r0, #1
 802170e:	d108      	bne.n	8021722 <ModelConfigUpdateKRState+0x36>
 8021710:	b3b5      	cbz	r5, 8021780 <ModelConfigUpdateKRState+0x94>
 8021712:	1e6b      	subs	r3, r5, #1
 8021714:	2b01      	cmp	r3, #1
 8021716:	d831      	bhi.n	802177c <ModelConfigUpdateKRState+0x90>
 8021718:	f886 50c0 	strb.w	r5, [r6, #192]	; 0xc0
 802171c:	f7fc fffe 	bl	801e71c <BnrgmFrndMgmtSendSecurityUpdate>
 8021720:	e004      	b.n	802172c <ModelConfigUpdateKRState+0x40>
 8021722:	3d01      	subs	r5, #1
 8021724:	2d01      	cmp	r5, #1
 8021726:	bf8c      	ite	hi
 8021728:	2401      	movhi	r4, #1
 802172a:	2402      	movls	r4, #2
 802172c:	4620      	mov	r0, r4
 802172e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021730:	2c01      	cmp	r4, #1
 8021732:	d110      	bne.n	8021756 <ModelConfigUpdateKRState+0x6a>
 8021734:	b325      	cbz	r5, 8021780 <ModelConfigUpdateKRState+0x94>
 8021736:	2d03      	cmp	r5, #3
 8021738:	f886 50c0 	strb.w	r5, [r6, #192]	; 0xc0
 802173c:	d107      	bne.n	802174e <ModelConfigUpdateKRState+0x62>
 802173e:	f7f9 f805 	bl	801a74c <MoblePalCryptoSwitchKeys>
 8021742:	4638      	mov	r0, r7
 8021744:	f7fd f92a 	bl	801e99c <BnrgmFrndMgmtSwitchKeys>
 8021748:	2300      	movs	r3, #0
 802174a:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
 802174e:	f7fc ffe5 	bl	801e71c <BnrgmFrndMgmtSendSecurityUpdate>
 8021752:	2400      	movs	r4, #0
 8021754:	e7ea      	b.n	802172c <ModelConfigUpdateKRState+0x40>
 8021756:	2c02      	cmp	r4, #2
 8021758:	d1fb      	bne.n	8021752 <ModelConfigUpdateKRState+0x66>
 802175a:	2d03      	cmp	r5, #3
 802175c:	d10a      	bne.n	8021774 <ModelConfigUpdateKRState+0x88>
 802175e:	f886 50c0 	strb.w	r5, [r6, #192]	; 0xc0
 8021762:	f7f8 fff3 	bl	801a74c <MoblePalCryptoSwitchKeys>
 8021766:	2400      	movs	r4, #0
 8021768:	4638      	mov	r0, r7
 802176a:	f7fd f917 	bl	801e99c <BnrgmFrndMgmtSwitchKeys>
 802176e:	f886 40c0 	strb.w	r4, [r6, #192]	; 0xc0
 8021772:	e7d3      	b.n	802171c <ModelConfigUpdateKRState+0x30>
 8021774:	2d02      	cmp	r5, #2
 8021776:	bf08      	it	eq
 8021778:	2401      	moveq	r4, #1
 802177a:	e7d7      	b.n	802172c <ModelConfigUpdateKRState+0x40>
 802177c:	4604      	mov	r4, r0
 802177e:	e7d5      	b.n	802172c <ModelConfigUpdateKRState+0x40>
 8021780:	2402      	movs	r4, #2
 8021782:	e7d3      	b.n	802172c <ModelConfigUpdateKRState+0x40>
 8021784:	20000324 	.word	0x20000324
 8021788:	2000141c 	.word	0x2000141c

0802178c <MobleStackProcessBeacon>:
 802178c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021790:	ed2d 8b02 	vpush	{d8}
 8021794:	b08f      	sub	sp, #60	; 0x3c
 8021796:	ee08 2a10 	vmov	s16, r2
 802179a:	9304      	str	r3, [sp, #16]
 802179c:	f1a1 0313 	sub.w	r3, r1, #19
 80217a0:	2b04      	cmp	r3, #4
 80217a2:	4607      	mov	r7, r0
 80217a4:	f200 80e6 	bhi.w	8021974 <MobleStackProcessBeacon+0x1e8>
 80217a8:	7805      	ldrb	r5, [r0, #0]
 80217aa:	b955      	cbnz	r5, 80217c2 <MobleStackProcessBeacon+0x36>
 80217ac:	9b04      	ldr	r3, [sp, #16]
 80217ae:	9301      	str	r3, [sp, #4]
 80217b0:	3701      	adds	r7, #1
 80217b2:	9502      	str	r5, [sp, #8]
 80217b4:	9700      	str	r7, [sp, #0]
 80217b6:	462b      	mov	r3, r5
 80217b8:	4629      	mov	r1, r5
 80217ba:	4870      	ldr	r0, [pc, #448]	; (802197c <MobleStackProcessBeacon+0x1f0>)
 80217bc:	f7fb fdcf 	bl	801d35e <BLEMesh_UpdateNeighbors>
 80217c0:	e026      	b.n	8021810 <MobleStackProcessBeacon+0x84>
 80217c2:	2d01      	cmp	r5, #1
 80217c4:	f040 80d8 	bne.w	8021978 <MobleStackProcessBeacon+0x1ec>
 80217c8:	2916      	cmp	r1, #22
 80217ca:	f040 80d5 	bne.w	8021978 <MobleStackProcessBeacon+0x1ec>
 80217ce:	f100 0a02 	add.w	sl, r0, #2
 80217d2:	2108      	movs	r1, #8
 80217d4:	4650      	mov	r0, sl
 80217d6:	f7f7 fe29 	bl	801942c <MoblePalCryptoGetSecurityKeys_Beacon>
 80217da:	4604      	mov	r4, r0
 80217dc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80217de:	f7f8 ff81 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80217e2:	f1b0 0800 	subs.w	r8, r0, #0
 80217e6:	db13      	blt.n	8021810 <MobleStackProcessBeacon+0x84>
 80217e8:	4b65      	ldr	r3, [pc, #404]	; (8021980 <MobleStackProcessBeacon+0x1f4>)
 80217ea:	4443      	add	r3, r8
 80217ec:	fa5f f988 	uxtb.w	r9, r8
 80217f0:	f893 60c0 	ldrb.w	r6, [r3, #192]	; 0xc0
 80217f4:	2e01      	cmp	r6, #1
 80217f6:	d011      	beq.n	802181c <MobleStackProcessBeacon+0x90>
 80217f8:	2e02      	cmp	r6, #2
 80217fa:	d030      	beq.n	802185e <MobleStackProcessBeacon+0xd2>
 80217fc:	2e00      	cmp	r6, #0
 80217fe:	d167      	bne.n	80218d0 <MobleStackProcessBeacon+0x144>
 8021800:	2208      	movs	r2, #8
 8021802:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8021806:	4650      	mov	r0, sl
 8021808:	f008 f82a 	bl	8029860 <memcmp>
 802180c:	2800      	cmp	r0, #0
 802180e:	d041      	beq.n	8021894 <MobleStackProcessBeacon+0x108>
 8021810:	4628      	mov	r0, r5
 8021812:	b00f      	add	sp, #60	; 0x3c
 8021814:	ecbd 8b02 	vpop	{d8}
 8021818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802181c:	4b59      	ldr	r3, [pc, #356]	; (8021984 <MobleStackProcessBeacon+0x1f8>)
 802181e:	227c      	movs	r2, #124	; 0x7c
 8021820:	fb02 3208 	mla	r2, r2, r8, r3
 8021824:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8021828:	f892 2445 	ldrb.w	r2, [r2, #1093]	; 0x445
 802182c:	2a01      	cmp	r2, #1
 802182e:	bf0c      	ite	eq
 8021830:	464c      	moveq	r4, r9
 8021832:	2400      	movne	r4, #0
 8021834:	ebc4 1444 	rsb	r4, r4, r4, lsl #5
 8021838:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 802183c:	f10b 0128 	add.w	r1, fp, #40	; 0x28
 8021840:	2208      	movs	r2, #8
 8021842:	4419      	add	r1, r3
 8021844:	4650      	mov	r0, sl
 8021846:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 802184a:	f008 f809 	bl	8029860 <memcmp>
 802184e:	2800      	cmp	r0, #0
 8021850:	d053      	beq.n	80218fa <MobleStackProcessBeacon+0x16e>
 8021852:	4b4d      	ldr	r3, [pc, #308]	; (8021988 <MobleStackProcessBeacon+0x1fc>)
 8021854:	f10b 0130 	add.w	r1, fp, #48	; 0x30
 8021858:	2208      	movs	r2, #8
 802185a:	4419      	add	r1, r3
 802185c:	e7d3      	b.n	8021806 <MobleStackProcessBeacon+0x7a>
 802185e:	4c49      	ldr	r4, [pc, #292]	; (8021984 <MobleStackProcessBeacon+0x1f8>)
 8021860:	237c      	movs	r3, #124	; 0x7c
 8021862:	fb03 4308 	mla	r3, r3, r8, r4
 8021866:	f204 4424 	addw	r4, r4, #1060	; 0x424
 802186a:	f893 2446 	ldrb.w	r2, [r3, #1094]	; 0x446
 802186e:	9305      	str	r3, [sp, #20]
 8021870:	2a01      	cmp	r2, #1
 8021872:	bf0c      	ite	eq
 8021874:	464e      	moveq	r6, r9
 8021876:	2600      	movne	r6, #0
 8021878:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 802187c:	00b6      	lsls	r6, r6, #2
 802187e:	f106 0130 	add.w	r1, r6, #48	; 0x30
 8021882:	2208      	movs	r2, #8
 8021884:	4421      	add	r1, r4
 8021886:	4650      	mov	r0, sl
 8021888:	f007 ffea 	bl	8029860 <memcmp>
 802188c:	9b05      	ldr	r3, [sp, #20]
 802188e:	bb08      	cbnz	r0, 80218d4 <MobleStackProcessBeacon+0x148>
 8021890:	4434      	add	r4, r6
 8021892:	462e      	mov	r6, r5
 8021894:	2300      	movs	r3, #0
 8021896:	787d      	ldrb	r5, [r7, #1]
 8021898:	930c      	str	r3, [sp, #48]	; 0x30
 802189a:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 802189e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80218a2:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80218a6:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 80218aa:	b346      	cbz	r6, 80218fe <MobleStackProcessBeacon+0x172>
 80218ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80218ae:	f8cd 3029 	str.w	r3, [sp, #41]	; 0x29
 80218b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80218b4:	f8cd 302d 	str.w	r3, [sp, #45]	; 0x2d
 80218b8:	f8d7 300a 	ldr.w	r3, [r7, #10]
 80218bc:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
 80218c0:	220d      	movs	r2, #13
 80218c2:	4633      	mov	r3, r6
 80218c4:	a90a      	add	r1, sp, #40	; 0x28
 80218c6:	a808      	add	r0, sp, #32
 80218c8:	f7f8 f9d8 	bl	8019c7c <MoblePalCryptoAuthenticateSecureNetworkBeacon>
 80218cc:	2801      	cmp	r0, #1
 80218ce:	d91b      	bls.n	8021908 <MobleStackProcessBeacon+0x17c>
 80218d0:	2502      	movs	r5, #2
 80218d2:	e79d      	b.n	8021810 <MobleStackProcessBeacon+0x84>
 80218d4:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 80218d8:	2b01      	cmp	r3, #1
 80218da:	bf0c      	ite	eq
 80218dc:	464e      	moveq	r6, r9
 80218de:	2600      	movne	r6, #0
 80218e0:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
 80218e4:	00b6      	lsls	r6, r6, #2
 80218e6:	f106 0128 	add.w	r1, r6, #40	; 0x28
 80218ea:	2208      	movs	r2, #8
 80218ec:	4421      	add	r1, r4
 80218ee:	4650      	mov	r0, sl
 80218f0:	f007 ffb6 	bl	8029860 <memcmp>
 80218f4:	2800      	cmp	r0, #0
 80218f6:	d18b      	bne.n	8021810 <MobleStackProcessBeacon+0x84>
 80218f8:	4434      	add	r4, r6
 80218fa:	4606      	mov	r6, r0
 80218fc:	e7ca      	b.n	8021894 <MobleStackProcessBeacon+0x108>
 80218fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8021900:	f8cd 3029 	str.w	r3, [sp, #41]	; 0x29
 8021904:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8021906:	e7d5      	b.n	80218b4 <MobleStackProcessBeacon+0x128>
 8021908:	2208      	movs	r2, #8
 802190a:	f107 010e 	add.w	r1, r7, #14
 802190e:	a808      	add	r0, sp, #32
 8021910:	f007 ffa6 	bl	8029860 <memcmp>
 8021914:	2800      	cmp	r0, #0
 8021916:	d1db      	bne.n	80218d0 <MobleStackProcessBeacon+0x144>
 8021918:	9007      	str	r0, [sp, #28]
 802191a:	aa07      	add	r2, sp, #28
 802191c:	2104      	movs	r1, #4
 802191e:	f107 000a 	add.w	r0, r7, #10
 8021922:	f7f9 fc53 	bl	801b1cc <MobleInputStreamGetBigEndian>
 8021926:	9907      	ldr	r1, [sp, #28]
 8021928:	464a      	mov	r2, r9
 802192a:	4628      	mov	r0, r5
 802192c:	f7fc ff82 	bl	801e834 <MobleStackProcessIvFromBeacon>
 8021930:	2801      	cmp	r0, #1
 8021932:	d8cd      	bhi.n	80218d0 <MobleStackProcessBeacon+0x144>
 8021934:	2e01      	cmp	r6, #1
 8021936:	d107      	bne.n	8021948 <MobleStackProcessBeacon+0x1bc>
 8021938:	4b11      	ldr	r3, [pc, #68]	; (8021980 <MobleStackProcessBeacon+0x1f4>)
 802193a:	4498      	add	r8, r3
 802193c:	f898 30c0 	ldrb.w	r3, [r8, #192]	; 0xc0
 8021940:	2b01      	cmp	r3, #1
 8021942:	d00b      	beq.n	802195c <MobleStackProcessBeacon+0x1d0>
 8021944:	2b02      	cmp	r3, #2
 8021946:	d010      	beq.n	802196a <MobleStackProcessBeacon+0x1de>
 8021948:	9b04      	ldr	r3, [sp, #16]
 802194a:	2500      	movs	r5, #0
 802194c:	e9cd 5300 	strd	r5, r3, [sp]
 8021950:	2301      	movs	r3, #1
 8021952:	ee18 2a10 	vmov	r2, s16
 8021956:	9502      	str	r5, [sp, #8]
 8021958:	4619      	mov	r1, r3
 802195a:	e72e      	b.n	80217ba <MobleStackProcessBeacon+0x2e>
 802195c:	07ea      	lsls	r2, r5, #31
 802195e:	4649      	mov	r1, r9
 8021960:	d506      	bpl.n	8021970 <MobleStackProcessBeacon+0x1e4>
 8021962:	2002      	movs	r0, #2
 8021964:	f7ff fec2 	bl	80216ec <ModelConfigUpdateKRState>
 8021968:	e7ee      	b.n	8021948 <MobleStackProcessBeacon+0x1bc>
 802196a:	07eb      	lsls	r3, r5, #31
 802196c:	d4ec      	bmi.n	8021948 <MobleStackProcessBeacon+0x1bc>
 802196e:	4649      	mov	r1, r9
 8021970:	2003      	movs	r0, #3
 8021972:	e7f7      	b.n	8021964 <MobleStackProcessBeacon+0x1d8>
 8021974:	2503      	movs	r5, #3
 8021976:	e74b      	b.n	8021810 <MobleStackProcessBeacon+0x84>
 8021978:	2500      	movs	r5, #0
 802197a:	e749      	b.n	8021810 <MobleStackProcessBeacon+0x84>
 802197c:	20001a9c 	.word	0x20001a9c
 8021980:	20000324 	.word	0x20000324
 8021984:	2000141c 	.word	0x2000141c
 8021988:	20001840 	.word	0x20001840

0802198c <MobleConfigModelAppBind>:
 802198c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021990:	b930      	cbnz	r0, 80219a0 <MobleConfigModelAppBind+0x14>
 8021992:	4b2e      	ldr	r3, [pc, #184]	; (8021a4c <MobleConfigModelAppBind+0xc0>)
 8021994:	4a2e      	ldr	r2, [pc, #184]	; (8021a50 <MobleConfigModelAppBind+0xc4>)
 8021996:	482f      	ldr	r0, [pc, #188]	; (8021a54 <MobleConfigModelAppBind+0xc8>)
 8021998:	f641 211c 	movw	r1, #6684	; 0x1a1c
 802199c:	f007 f894 	bl	8028ac8 <__assert_func>
 80219a0:	6805      	ldr	r5, [r0, #0]
 80219a2:	2000      	movs	r0, #0
 80219a4:	f105 0624 	add.w	r6, r5, #36	; 0x24
 80219a8:	3538      	adds	r5, #56	; 0x38
 80219aa:	f856 4b04 	ldr.w	r4, [r6], #4
 80219ae:	8827      	ldrh	r7, [r4, #0]
 80219b0:	428f      	cmp	r7, r1
 80219b2:	d146      	bne.n	8021a42 <MobleConfigModelAppBind+0xb6>
 80219b4:	4928      	ldr	r1, [pc, #160]	; (8021a58 <MobleConfigModelAppBind+0xcc>)
 80219b6:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8021a5c <MobleConfigModelAppBind+0xd0>
 80219ba:	890f      	ldrh	r7, [r1, #8]
 80219bc:	2500      	movs	r5, #0
 80219be:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 80219c2:	b2e9      	uxtb	r1, r5
 80219c4:	42b9      	cmp	r1, r7
 80219c6:	d235      	bcs.n	8021a34 <MobleConfigModelAppBind+0xa8>
 80219c8:	fb0e c601 	mla	r6, lr, r1, ip
 80219cc:	f896 85b8 	ldrb.w	r8, [r6, #1464]	; 0x5b8
 80219d0:	f1b8 0f01 	cmp.w	r8, #1
 80219d4:	d132      	bne.n	8021a3c <MobleConfigModelAppBind+0xb0>
 80219d6:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	; 0x5ba
 80219da:	429e      	cmp	r6, r3
 80219dc:	d12e      	bne.n	8021a3c <MobleConfigModelAppBind+0xb0>
 80219de:	eb04 0c01 	add.w	ip, r4, r1
 80219e2:	4626      	mov	r6, r4
 80219e4:	2500      	movs	r5, #0
 80219e6:	f101 0ea0 	add.w	lr, r1, #160	; 0xa0
 80219ea:	f89c 70a6 	ldrb.w	r7, [ip, #166]	; 0xa6
 80219ee:	b98f      	cbnz	r7, 8021a14 <MobleConfigModelAppBind+0x88>
 80219f0:	6fb0      	ldr	r0, [r6, #120]	; 0x78
 80219f2:	4282      	cmp	r2, r0
 80219f4:	d120      	bne.n	8021a38 <MobleConfigModelAppBind+0xac>
 80219f6:	2238      	movs	r2, #56	; 0x38
 80219f8:	fb02 4205 	mla	r2, r2, r5, r4
 80219fc:	440a      	add	r2, r1
 80219fe:	2001      	movs	r0, #1
 8021a00:	f882 00a6 	strb.w	r0, [r2, #166]	; 0xa6
 8021a04:	221c      	movs	r2, #28
 8021a06:	fb02 1105 	mla	r1, r2, r5, r1
 8021a0a:	3150      	adds	r1, #80	; 0x50
 8021a0c:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8021a10:	2000      	movs	r0, #0
 8021a12:	e00f      	b.n	8021a34 <MobleConfigModelAppBind+0xa8>
 8021a14:	2f01      	cmp	r7, #1
 8021a16:	d10f      	bne.n	8021a38 <MobleConfigModelAppBind+0xac>
 8021a18:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8021a1a:	42ba      	cmp	r2, r7
 8021a1c:	d103      	bne.n	8021a26 <MobleConfigModelAppBind+0x9a>
 8021a1e:	f83c 700e 	ldrh.w	r7, [ip, lr]
 8021a22:	429f      	cmp	r7, r3
 8021a24:	d0f4      	beq.n	8021a10 <MobleConfigModelAppBind+0x84>
 8021a26:	3501      	adds	r5, #1
 8021a28:	2d0b      	cmp	r5, #11
 8021a2a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8021a2e:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8021a32:	d1da      	bne.n	80219ea <MobleConfigModelAppBind+0x5e>
 8021a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a38:	2002      	movs	r0, #2
 8021a3a:	e7f4      	b.n	8021a26 <MobleConfigModelAppBind+0x9a>
 8021a3c:	3501      	adds	r5, #1
 8021a3e:	2003      	movs	r0, #3
 8021a40:	e7bf      	b.n	80219c2 <MobleConfigModelAppBind+0x36>
 8021a42:	42ae      	cmp	r6, r5
 8021a44:	f04f 0003 	mov.w	r0, #3
 8021a48:	d1af      	bne.n	80219aa <MobleConfigModelAppBind+0x1e>
 8021a4a:	e7f3      	b.n	8021a34 <MobleConfigModelAppBind+0xa8>
 8021a4c:	08033901 	.word	0x08033901
 8021a50:	08031de9 	.word	0x08031de9
 8021a54:	08033393 	.word	0x08033393
 8021a58:	20000008 	.word	0x20000008
 8021a5c:	2000141c 	.word	0x2000141c

08021a60 <MobleConfigModelAppUnBind>:
 8021a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a64:	b930      	cbnz	r0, 8021a74 <MobleConfigModelAppUnBind+0x14>
 8021a66:	4b30      	ldr	r3, [pc, #192]	; (8021b28 <MobleConfigModelAppUnBind+0xc8>)
 8021a68:	4a30      	ldr	r2, [pc, #192]	; (8021b2c <MobleConfigModelAppUnBind+0xcc>)
 8021a6a:	4831      	ldr	r0, [pc, #196]	; (8021b30 <MobleConfigModelAppUnBind+0xd0>)
 8021a6c:	f641 215b 	movw	r1, #6747	; 0x1a5b
 8021a70:	f007 f82a 	bl	8028ac8 <__assert_func>
 8021a74:	6805      	ldr	r5, [r0, #0]
 8021a76:	2000      	movs	r0, #0
 8021a78:	f105 0624 	add.w	r6, r5, #36	; 0x24
 8021a7c:	3538      	adds	r5, #56	; 0x38
 8021a7e:	f856 4b04 	ldr.w	r4, [r6], #4
 8021a82:	8827      	ldrh	r7, [r4, #0]
 8021a84:	428f      	cmp	r7, r1
 8021a86:	d149      	bne.n	8021b1c <MobleConfigModelAppUnBind+0xbc>
 8021a88:	492a      	ldr	r1, [pc, #168]	; (8021b34 <MobleConfigModelAppUnBind+0xd4>)
 8021a8a:	f8df c0ac 	ldr.w	ip, [pc, #172]	; 8021b38 <MobleConfigModelAppUnBind+0xd8>
 8021a8e:	890f      	ldrh	r7, [r1, #8]
 8021a90:	2500      	movs	r5, #0
 8021a92:	f04f 0e2c 	mov.w	lr, #44	; 0x2c
 8021a96:	b2e9      	uxtb	r1, r5
 8021a98:	42b9      	cmp	r1, r7
 8021a9a:	d225      	bcs.n	8021ae8 <MobleConfigModelAppUnBind+0x88>
 8021a9c:	fb0e c601 	mla	r6, lr, r1, ip
 8021aa0:	f896 85b8 	ldrb.w	r8, [r6, #1464]	; 0x5b8
 8021aa4:	f1b8 0f01 	cmp.w	r8, #1
 8021aa8:	d135      	bne.n	8021b16 <MobleConfigModelAppUnBind+0xb6>
 8021aaa:	f8b6 65ba 	ldrh.w	r6, [r6, #1466]	; 0x5ba
 8021aae:	429e      	cmp	r6, r3
 8021ab0:	d131      	bne.n	8021b16 <MobleConfigModelAppUnBind+0xb6>
 8021ab2:	eb04 0c01 	add.w	ip, r4, r1
 8021ab6:	4626      	mov	r6, r4
 8021ab8:	2500      	movs	r5, #0
 8021aba:	f101 08a0 	add.w	r8, r1, #160	; 0xa0
 8021abe:	f89c e0a6 	ldrb.w	lr, [ip, #166]	; 0xa6
 8021ac2:	f1be 0f01 	cmp.w	lr, #1
 8021ac6:	d111      	bne.n	8021aec <MobleConfigModelAppUnBind+0x8c>
 8021ac8:	6fb0      	ldr	r0, [r6, #120]	; 0x78
 8021aca:	4282      	cmp	r2, r0
 8021acc:	d11a      	bne.n	8021b04 <MobleConfigModelAppUnBind+0xa4>
 8021ace:	2338      	movs	r3, #56	; 0x38
 8021ad0:	fb03 4305 	mla	r3, r3, r5, r4
 8021ad4:	440b      	add	r3, r1
 8021ad6:	2000      	movs	r0, #0
 8021ad8:	f883 00a6 	strb.w	r0, [r3, #166]	; 0xa6
 8021adc:	231c      	movs	r3, #28
 8021ade:	fb03 1105 	mla	r1, r3, r5, r1
 8021ae2:	3150      	adds	r1, #80	; 0x50
 8021ae4:	f824 0011 	strh.w	r0, [r4, r1, lsl #1]
 8021ae8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021aec:	f1be 0f00 	cmp.w	lr, #0
 8021af0:	d108      	bne.n	8021b04 <MobleConfigModelAppUnBind+0xa4>
 8021af2:	6fb7      	ldr	r7, [r6, #120]	; 0x78
 8021af4:	42ba      	cmp	r2, r7
 8021af6:	d106      	bne.n	8021b06 <MobleConfigModelAppUnBind+0xa6>
 8021af8:	f83c 7008 	ldrh.w	r7, [ip, r8]
 8021afc:	429f      	cmp	r7, r3
 8021afe:	d102      	bne.n	8021b06 <MobleConfigModelAppUnBind+0xa6>
 8021b00:	4670      	mov	r0, lr
 8021b02:	e7f1      	b.n	8021ae8 <MobleConfigModelAppUnBind+0x88>
 8021b04:	2002      	movs	r0, #2
 8021b06:	3501      	adds	r5, #1
 8021b08:	2d0b      	cmp	r5, #11
 8021b0a:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
 8021b0e:	f106 0638 	add.w	r6, r6, #56	; 0x38
 8021b12:	d1d4      	bne.n	8021abe <MobleConfigModelAppUnBind+0x5e>
 8021b14:	e7e8      	b.n	8021ae8 <MobleConfigModelAppUnBind+0x88>
 8021b16:	3501      	adds	r5, #1
 8021b18:	2003      	movs	r0, #3
 8021b1a:	e7bc      	b.n	8021a96 <MobleConfigModelAppUnBind+0x36>
 8021b1c:	42ae      	cmp	r6, r5
 8021b1e:	f04f 0003 	mov.w	r0, #3
 8021b22:	d1ac      	bne.n	8021a7e <MobleConfigModelAppUnBind+0x1e>
 8021b24:	e7e0      	b.n	8021ae8 <MobleConfigModelAppUnBind+0x88>
 8021b26:	bf00      	nop
 8021b28:	08033901 	.word	0x08033901
 8021b2c:	08031e01 	.word	0x08031e01
 8021b30:	08033393 	.word	0x08033393
 8021b34:	20000008 	.word	0x20000008
 8021b38:	2000141c 	.word	0x2000141c

08021b3c <MobleConfigHealthModelAppBind>:
 8021b3c:	b538      	push	{r3, r4, r5, lr}
 8021b3e:	b930      	cbnz	r0, 8021b4e <MobleConfigHealthModelAppBind+0x12>
 8021b40:	4b16      	ldr	r3, [pc, #88]	; (8021b9c <MobleConfigHealthModelAppBind+0x60>)
 8021b42:	4a17      	ldr	r2, [pc, #92]	; (8021ba0 <MobleConfigHealthModelAppBind+0x64>)
 8021b44:	4817      	ldr	r0, [pc, #92]	; (8021ba4 <MobleConfigHealthModelAppBind+0x68>)
 8021b46:	f641 219a 	movw	r1, #6810	; 0x1a9a
 8021b4a:	f006 ffbd 	bl	8028ac8 <__assert_func>
 8021b4e:	6800      	ldr	r0, [r0, #0]
 8021b50:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8021b52:	8820      	ldrh	r0, [r4, #0]
 8021b54:	4288      	cmp	r0, r1
 8021b56:	d11b      	bne.n	8021b90 <MobleConfigHealthModelAppBind+0x54>
 8021b58:	4913      	ldr	r1, [pc, #76]	; (8021ba8 <MobleConfigHealthModelAppBind+0x6c>)
 8021b5a:	8908      	ldrh	r0, [r1, #8]
 8021b5c:	b190      	cbz	r0, 8021b84 <MobleConfigHealthModelAppBind+0x48>
 8021b5e:	4913      	ldr	r1, [pc, #76]	; (8021bac <MobleConfigHealthModelAppBind+0x70>)
 8021b60:	f891 55b8 	ldrb.w	r5, [r1, #1464]	; 0x5b8
 8021b64:	2d01      	cmp	r5, #1
 8021b66:	d115      	bne.n	8021b94 <MobleConfigHealthModelAppBind+0x58>
 8021b68:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	; 0x5ba
 8021b6c:	4299      	cmp	r1, r3
 8021b6e:	d111      	bne.n	8021b94 <MobleConfigHealthModelAppBind+0x58>
 8021b70:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021b74:	b938      	cbnz	r0, 8021b86 <MobleConfigHealthModelAppBind+0x4a>
 8021b76:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021b78:	4293      	cmp	r3, r2
 8021b7a:	d10d      	bne.n	8021b98 <MobleConfigHealthModelAppBind+0x5c>
 8021b7c:	f884 506c 	strb.w	r5, [r4, #108]	; 0x6c
 8021b80:	f8a4 106a 	strh.w	r1, [r4, #106]	; 0x6a
 8021b84:	bd38      	pop	{r3, r4, r5, pc}
 8021b86:	2801      	cmp	r0, #1
 8021b88:	bf14      	ite	ne
 8021b8a:	2002      	movne	r0, #2
 8021b8c:	2000      	moveq	r0, #0
 8021b8e:	e7f9      	b.n	8021b84 <MobleConfigHealthModelAppBind+0x48>
 8021b90:	2003      	movs	r0, #3
 8021b92:	e7f7      	b.n	8021b84 <MobleConfigHealthModelAppBind+0x48>
 8021b94:	2000      	movs	r0, #0
 8021b96:	e7f5      	b.n	8021b84 <MobleConfigHealthModelAppBind+0x48>
 8021b98:	2002      	movs	r0, #2
 8021b9a:	e7f3      	b.n	8021b84 <MobleConfigHealthModelAppBind+0x48>
 8021b9c:	08033901 	.word	0x08033901
 8021ba0:	08031e1b 	.word	0x08031e1b
 8021ba4:	08033393 	.word	0x08033393
 8021ba8:	20000008 	.word	0x20000008
 8021bac:	2000141c 	.word	0x2000141c

08021bb0 <MobleConfigHealthModelAppUnBind>:
 8021bb0:	b510      	push	{r4, lr}
 8021bb2:	b930      	cbnz	r0, 8021bc2 <MobleConfigHealthModelAppUnBind+0x12>
 8021bb4:	4b17      	ldr	r3, [pc, #92]	; (8021c14 <MobleConfigHealthModelAppUnBind+0x64>)
 8021bb6:	4a18      	ldr	r2, [pc, #96]	; (8021c18 <MobleConfigHealthModelAppUnBind+0x68>)
 8021bb8:	4818      	ldr	r0, [pc, #96]	; (8021c1c <MobleConfigHealthModelAppUnBind+0x6c>)
 8021bba:	f641 21cd 	movw	r1, #6861	; 0x1acd
 8021bbe:	f006 ff83 	bl	8028ac8 <__assert_func>
 8021bc2:	6800      	ldr	r0, [r0, #0]
 8021bc4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8021bc6:	8820      	ldrh	r0, [r4, #0]
 8021bc8:	4288      	cmp	r0, r1
 8021bca:	d11c      	bne.n	8021c06 <MobleConfigHealthModelAppUnBind+0x56>
 8021bcc:	4914      	ldr	r1, [pc, #80]	; (8021c20 <MobleConfigHealthModelAppUnBind+0x70>)
 8021bce:	8908      	ldrh	r0, [r1, #8]
 8021bd0:	b1a0      	cbz	r0, 8021bfc <MobleConfigHealthModelAppUnBind+0x4c>
 8021bd2:	4914      	ldr	r1, [pc, #80]	; (8021c24 <MobleConfigHealthModelAppUnBind+0x74>)
 8021bd4:	f891 05b8 	ldrb.w	r0, [r1, #1464]	; 0x5b8
 8021bd8:	2801      	cmp	r0, #1
 8021bda:	d116      	bne.n	8021c0a <MobleConfigHealthModelAppUnBind+0x5a>
 8021bdc:	f8b1 15ba 	ldrh.w	r1, [r1, #1466]	; 0x5ba
 8021be0:	4299      	cmp	r1, r3
 8021be2:	d112      	bne.n	8021c0a <MobleConfigHealthModelAppUnBind+0x5a>
 8021be4:	f894 006c 	ldrb.w	r0, [r4, #108]	; 0x6c
 8021be8:	2801      	cmp	r0, #1
 8021bea:	d108      	bne.n	8021bfe <MobleConfigHealthModelAppUnBind+0x4e>
 8021bec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8021bee:	4293      	cmp	r3, r2
 8021bf0:	d10d      	bne.n	8021c0e <MobleConfigHealthModelAppUnBind+0x5e>
 8021bf2:	2000      	movs	r0, #0
 8021bf4:	f884 006c 	strb.w	r0, [r4, #108]	; 0x6c
 8021bf8:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8021bfc:	bd10      	pop	{r4, pc}
 8021bfe:	2800      	cmp	r0, #0
 8021c00:	bf18      	it	ne
 8021c02:	2002      	movne	r0, #2
 8021c04:	e7fa      	b.n	8021bfc <MobleConfigHealthModelAppUnBind+0x4c>
 8021c06:	2003      	movs	r0, #3
 8021c08:	e7f8      	b.n	8021bfc <MobleConfigHealthModelAppUnBind+0x4c>
 8021c0a:	2000      	movs	r0, #0
 8021c0c:	e7f6      	b.n	8021bfc <MobleConfigHealthModelAppUnBind+0x4c>
 8021c0e:	2002      	movs	r0, #2
 8021c10:	e7f4      	b.n	8021bfc <MobleConfigHealthModelAppUnBind+0x4c>
 8021c12:	bf00      	nop
 8021c14:	08033901 	.word	0x08033901
 8021c18:	08031e39 	.word	0x08031e39
 8021c1c:	08033393 	.word	0x08033393
 8021c20:	20000008 	.word	0x20000008
 8021c24:	2000141c 	.word	0x2000141c

08021c28 <MobleConfigModel_KR_UseNewKeyDec>:
 8021c28:	4b04      	ldr	r3, [pc, #16]	; (8021c3c <MobleConfigModel_KR_UseNewKeyDec+0x14>)
 8021c2a:	4418      	add	r0, r3
 8021c2c:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
 8021c30:	3801      	subs	r0, #1
 8021c32:	2801      	cmp	r0, #1
 8021c34:	bf8c      	ite	hi
 8021c36:	2000      	movhi	r0, #0
 8021c38:	2001      	movls	r0, #1
 8021c3a:	4770      	bx	lr
 8021c3c:	20000324 	.word	0x20000324

08021c40 <BnrgmFrndMgmtTranspSegRecvd>:
 8021c40:	b508      	push	{r3, lr}
 8021c42:	4b06      	ldr	r3, [pc, #24]	; (8021c5c <BnrgmFrndMgmtTranspSegRecvd+0x1c>)
 8021c44:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8021c48:	2b02      	cmp	r3, #2
 8021c4a:	d005      	beq.n	8021c58 <BnrgmFrndMgmtTranspSegRecvd+0x18>
 8021c4c:	4b04      	ldr	r3, [pc, #16]	; (8021c60 <BnrgmFrndMgmtTranspSegRecvd+0x20>)
 8021c4e:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 8021c52:	f7f1 fcbd 	bl	80135d0 <BnrgmFrndLpnTranspSegRecvd>
 8021c56:	bd08      	pop	{r3, pc}
 8021c58:	2001      	movs	r0, #1
 8021c5a:	e7fc      	b.n	8021c56 <BnrgmFrndMgmtTranspSegRecvd+0x16>
 8021c5c:	20000324 	.word	0x20000324
 8021c60:	20002514 	.word	0x20002514

08021c64 <BnrgmFrndMgmtProcessNewPacket>:
 8021c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021c66:	f890 52b4 	ldrb.w	r5, [r0, #692]	; 0x2b4
 8021c6a:	9c06      	ldr	r4, [sp, #24]
 8021c6c:	b915      	cbnz	r5, 8021c74 <BnrgmFrndMgmtProcessNewPacket+0x10>
 8021c6e:	2501      	movs	r5, #1
 8021c70:	f880 52b4 	strb.w	r5, [r0, #692]	; 0x2b4
 8021c74:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40
 8021c78:	06ad      	lsls	r5, r5, #26
 8021c7a:	d50a      	bpl.n	8021c92 <BnrgmFrndMgmtProcessNewPacket+0x2e>
 8021c7c:	2a09      	cmp	r2, #9
 8021c7e:	d80c      	bhi.n	8021c9a <BnrgmFrndMgmtProcessNewPacket+0x36>
 8021c80:	1e55      	subs	r5, r2, #1
 8021c82:	2d01      	cmp	r5, #1
 8021c84:	d902      	bls.n	8021c8c <BnrgmFrndMgmtProcessNewPacket+0x28>
 8021c86:	1fd5      	subs	r5, r2, #7
 8021c88:	2d02      	cmp	r5, #2
 8021c8a:	d86d      	bhi.n	8021d68 <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021c8c:	7bcd      	ldrb	r5, [r1, #15]
 8021c8e:	2d00      	cmp	r5, #0
 8021c90:	d16a      	bne.n	8021d68 <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021c92:	2a01      	cmp	r2, #1
 8021c94:	d004      	beq.n	8021ca0 <BnrgmFrndMgmtProcessNewPacket+0x3c>
 8021c96:	2a03      	cmp	r2, #3
 8021c98:	d002      	beq.n	8021ca0 <BnrgmFrndMgmtProcessNewPacket+0x3c>
 8021c9a:	1f55      	subs	r5, r2, #5
 8021c9c:	2d03      	cmp	r5, #3
 8021c9e:	d838      	bhi.n	8021d12 <BnrgmFrndMgmtProcessNewPacket+0xae>
 8021ca0:	4d32      	ldr	r5, [pc, #200]	; (8021d6c <BnrgmFrndMgmtProcessNewPacket+0x108>)
 8021ca2:	f895 50be 	ldrb.w	r5, [r5, #190]	; 0xbe
 8021ca6:	2d01      	cmp	r5, #1
 8021ca8:	d15c      	bne.n	8021d64 <BnrgmFrndMgmtProcessNewPacket+0x100>
 8021caa:	3a01      	subs	r2, #1
 8021cac:	2a07      	cmp	r2, #7
 8021cae:	d85b      	bhi.n	8021d68 <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021cb0:	e8df f002 	tbb	[pc, r2]
 8021cb4:	5a0c5a04 	.word	0x5a0c5a04
 8021cb8:	28211a13 	.word	0x28211a13
 8021cbc:	4a2c      	ldr	r2, [pc, #176]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cbe:	9400      	str	r4, [sp, #0]
 8021cc0:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021cc4:	f004 faba 	bl	802623c <BnrgmFrndFnProcessFrndPoll>
 8021cc8:	b003      	add	sp, #12
 8021cca:	bd30      	pop	{r4, r5, pc}
 8021ccc:	4a28      	ldr	r2, [pc, #160]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cce:	9400      	str	r4, [sp, #0]
 8021cd0:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021cd4:	f004 faec 	bl	80262b0 <BnrgmFrndFnProcessFrndRequest>
 8021cd8:	e7f6      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021cda:	4a25      	ldr	r2, [pc, #148]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cdc:	9400      	str	r4, [sp, #0]
 8021cde:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021ce2:	f004 fc37 	bl	8026554 <BnrgmFrndFnProcessFrndClear>
 8021ce6:	e7ef      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021ce8:	4a21      	ldr	r2, [pc, #132]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cea:	9400      	str	r4, [sp, #0]
 8021cec:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021cf0:	f7fc fc3a 	bl	801e568 <BnrgmFrndFnProcessFrndClearConf>
 8021cf4:	e7e8      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021cf6:	4a1e      	ldr	r2, [pc, #120]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021cf8:	9400      	str	r4, [sp, #0]
 8021cfa:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021cfe:	f004 fd19 	bl	8026734 <BnrgmFrndFnProcessFrndSubscrListAdd>
 8021d02:	e7e1      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d04:	4a1a      	ldr	r2, [pc, #104]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d06:	9400      	str	r4, [sp, #0]
 8021d08:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d0c:	f004 fca4 	bl	8026658 <BnrgmFrndFnProcessFrndSubscrListRem>
 8021d10:	e7da      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d12:	4d16      	ldr	r5, [pc, #88]	; (8021d6c <BnrgmFrndMgmtProcessNewPacket+0x108>)
 8021d14:	f895 50bf 	ldrb.w	r5, [r5, #191]	; 0xbf
 8021d18:	2d02      	cmp	r5, #2
 8021d1a:	d023      	beq.n	8021d64 <BnrgmFrndMgmtProcessNewPacket+0x100>
 8021d1c:	2a04      	cmp	r2, #4
 8021d1e:	d00a      	beq.n	8021d36 <BnrgmFrndMgmtProcessNewPacket+0xd2>
 8021d20:	2a09      	cmp	r2, #9
 8021d22:	d00f      	beq.n	8021d44 <BnrgmFrndMgmtProcessNewPacket+0xe0>
 8021d24:	2a02      	cmp	r2, #2
 8021d26:	d114      	bne.n	8021d52 <BnrgmFrndMgmtProcessNewPacket+0xee>
 8021d28:	4a11      	ldr	r2, [pc, #68]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d2a:	9400      	str	r4, [sp, #0]
 8021d2c:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d30:	f7f1 fc22 	bl	8013578 <BnrgmFrndLpnProcessFrndUpdate>
 8021d34:	e7c8      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d36:	4a0e      	ldr	r2, [pc, #56]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d38:	9400      	str	r4, [sp, #0]
 8021d3a:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d3e:	f7f1 fc10 	bl	8013562 <BnrgmFrndLpnProcessFrndOffer>
 8021d42:	e7c1      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d44:	4a0a      	ldr	r2, [pc, #40]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d46:	9400      	str	r4, [sp, #0]
 8021d48:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d4c:	f7f1 fc2a 	bl	80135a4 <BnrgmFrndLpnProcessFrndSubscrListConf>
 8021d50:	e7ba      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d52:	2a0a      	cmp	r2, #10
 8021d54:	d908      	bls.n	8021d68 <BnrgmFrndMgmtProcessNewPacket+0x104>
 8021d56:	4a06      	ldr	r2, [pc, #24]	; (8021d70 <BnrgmFrndMgmtProcessNewPacket+0x10c>)
 8021d58:	9400      	str	r4, [sp, #0]
 8021d5a:	f8d2 2a04 	ldr.w	r2, [r2, #2564]	; 0xa04
 8021d5e:	f7f1 fc16 	bl	801358e <BnrgmFrndLpnProcessFrndRfu>
 8021d62:	e7b1      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d64:	2005      	movs	r0, #5
 8021d66:	e7af      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d68:	2002      	movs	r0, #2
 8021d6a:	e7ad      	b.n	8021cc8 <BnrgmFrndMgmtProcessNewPacket+0x64>
 8021d6c:	20000324 	.word	0x20000324
 8021d70:	20002514 	.word	0x20002514

08021d74 <MobleTransControl_ProcessUnSegCtrlReq>:
 8021d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021d78:	4615      	mov	r5, r2
 8021d7a:	460e      	mov	r6, r1
 8021d7c:	e9dd 2c06 	ldrd	r2, ip, [sp, #24]
 8021d80:	4607      	mov	r7, r0
 8021d82:	b928      	cbnz	r0, 8021d90 <MobleTransControl_ProcessUnSegCtrlReq+0x1c>
 8021d84:	4b1c      	ldr	r3, [pc, #112]	; (8021df8 <MobleTransControl_ProcessUnSegCtrlReq+0x84>)
 8021d86:	4a1d      	ldr	r2, [pc, #116]	; (8021dfc <MobleTransControl_ProcessUnSegCtrlReq+0x88>)
 8021d88:	481d      	ldr	r0, [pc, #116]	; (8021e00 <MobleTransControl_ProcessUnSegCtrlReq+0x8c>)
 8021d8a:	215f      	movs	r1, #95	; 0x5f
 8021d8c:	f006 fe9c 	bl	8028ac8 <__assert_func>
 8021d90:	781c      	ldrb	r4, [r3, #0]
 8021d92:	f895 8000 	ldrb.w	r8, [r5]
 8021d96:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
 8021d9a:	f36e 0806 	bfi	r8, lr, #0, #7
 8021d9e:	f885 8000 	strb.w	r8, [r5]
 8021da2:	781b      	ldrb	r3, [r3, #0]
 8021da4:	fa5f f888 	uxtb.w	r8, r8
 8021da8:	09db      	lsrs	r3, r3, #7
 8021daa:	f363 18c7 	bfi	r8, r3, #7, #1
 8021dae:	f885 8000 	strb.w	r8, [r5]
 8021db2:	f8b1 5040 	ldrh.w	r5, [r1, #64]	; 0x40
 8021db6:	f415 7500 	ands.w	r5, r5, #512	; 0x200
 8021dba:	4674      	mov	r4, lr
 8021dbc:	d019      	beq.n	8021df2 <MobleTransControl_ProcessUnSegCtrlReq+0x7e>
 8021dbe:	2c09      	cmp	r4, #9
 8021dc0:	d808      	bhi.n	8021dd4 <MobleTransControl_ProcessUnSegCtrlReq+0x60>
 8021dc2:	b17c      	cbz	r4, 8021de4 <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 8021dc4:	4613      	mov	r3, r2
 8021dc6:	f8cd c018 	str.w	ip, [sp, #24]
 8021dca:	4672      	mov	r2, lr
 8021dcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021dd0:	f7ff bf48 	b.w	8021c64 <BnrgmFrndMgmtProcessNewPacket>
 8021dd4:	2c0a      	cmp	r4, #10
 8021dd6:	d105      	bne.n	8021de4 <MobleTransControl_ProcessUnSegCtrlReq+0x70>
 8021dd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021ddc:	4663      	mov	r3, ip
 8021dde:	310c      	adds	r1, #12
 8021de0:	f7fa bbda 	b.w	801c598 <BnrgmTransControlProcessHeartbeat>
 8021de4:	4613      	mov	r3, r2
 8021de6:	f8cd c018 	str.w	ip, [sp, #24]
 8021dea:	4672      	mov	r2, lr
 8021dec:	4631      	mov	r1, r6
 8021dee:	4638      	mov	r0, r7
 8021df0:	e7ec      	b.n	8021dcc <MobleTransControl_ProcessUnSegCtrlReq+0x58>
 8021df2:	4628      	mov	r0, r5
 8021df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021df8:	08033338 	.word	0x08033338
 8021dfc:	08031e9d 	.word	0x08031e9d
 8021e00:	08033a6b 	.word	0x08033a6b

08021e04 <MobleTransportProcessData>:
 8021e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e08:	460d      	mov	r5, r1
 8021e0a:	b093      	sub	sp, #76	; 0x4c
 8021e0c:	4691      	mov	r9, r2
 8021e0e:	461e      	mov	r6, r3
 8021e10:	4607      	mov	r7, r0
 8021e12:	b930      	cbnz	r0, 8021e22 <MobleTransportProcessData+0x1e>
 8021e14:	4b98      	ldr	r3, [pc, #608]	; (8022078 <MobleTransportProcessData+0x274>)
 8021e16:	4a99      	ldr	r2, [pc, #612]	; (802207c <MobleTransportProcessData+0x278>)
 8021e18:	f240 1189 	movw	r1, #393	; 0x189
 8021e1c:	4898      	ldr	r0, [pc, #608]	; (8022080 <MobleTransportProcessData+0x27c>)
 8021e1e:	f006 fe53 	bl	8028ac8 <__assert_func>
 8021e22:	b922      	cbnz	r2, 8021e2e <MobleTransportProcessData+0x2a>
 8021e24:	4b97      	ldr	r3, [pc, #604]	; (8022084 <MobleTransportProcessData+0x280>)
 8021e26:	4a95      	ldr	r2, [pc, #596]	; (802207c <MobleTransportProcessData+0x278>)
 8021e28:	f240 118b 	movw	r1, #395	; 0x18b
 8021e2c:	e7f6      	b.n	8021e1c <MobleTransportProcessData+0x18>
 8021e2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8021e32:	f1bb 0f0f 	cmp.w	fp, #15
 8021e36:	f200 811d 	bhi.w	8022074 <MobleTransportProcessData+0x270>
 8021e3a:	4648      	mov	r0, r9
 8021e3c:	aa0e      	add	r2, sp, #56	; 0x38
 8021e3e:	310c      	adds	r1, #12
 8021e40:	f7fa faa2 	bl	801c388 <MobleTransportParseHdr>
 8021e44:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021e48:	0698      	lsls	r0, r3, #26
 8021e4a:	d506      	bpl.n	8021e5a <MobleTransportProcessData+0x56>
 8021e4c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8021e50:	2b03      	cmp	r3, #3
 8021e52:	d016      	beq.n	8021e82 <MobleTransportProcessData+0x7e>
 8021e54:	d924      	bls.n	8021ea0 <MobleTransportProcessData+0x9c>
 8021e56:	2b04      	cmp	r3, #4
 8021e58:	d01c      	beq.n	8021e94 <MobleTransportProcessData+0x90>
 8021e5a:	7b28      	ldrb	r0, [r5, #12]
 8021e5c:	8aaa      	ldrh	r2, [r5, #20]
 8021e5e:	23a0      	movs	r3, #160	; 0xa0
 8021e60:	fb03 7000 	mla	r0, r3, r0, r7
 8021e64:	2114      	movs	r1, #20
 8021e66:	692b      	ldr	r3, [r5, #16]
 8021e68:	3010      	adds	r0, #16
 8021e6a:	f7fa fc05 	bl	801c678 <MobleAddressIsNew>
 8021e6e:	4604      	mov	r4, r0
 8021e70:	b1d0      	cbz	r0, 8021ea8 <MobleTransportProcessData+0xa4>
 8021e72:	2801      	cmp	r0, #1
 8021e74:	bf14      	ite	ne
 8021e76:	2402      	movne	r4, #2
 8021e78:	2400      	moveq	r4, #0
 8021e7a:	4620      	mov	r0, r4
 8021e7c:	b013      	add	sp, #76	; 0x4c
 8021e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e82:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8021e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021e8a:	2b0a      	cmp	r3, #10
 8021e8c:	d102      	bne.n	8021e94 <MobleTransportProcessData+0x90>
 8021e8e:	4638      	mov	r0, r7
 8021e90:	f7ff fed6 	bl	8021c40 <BnrgmFrndMgmtTranspSegRecvd>
 8021e94:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8021e98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8021e9c:	2b0a      	cmp	r3, #10
 8021e9e:	d1dc      	bne.n	8021e5a <MobleTransportProcessData+0x56>
 8021ea0:	4638      	mov	r0, r7
 8021ea2:	f7ff fecd 	bl	8021c40 <BnrgmFrndMgmtTranspSegRecvd>
 8021ea6:	e7d8      	b.n	8021e5a <MobleTransportProcessData+0x56>
 8021ea8:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
 8021eac:	f1ba 0f04 	cmp.w	sl, #4
 8021eb0:	d866      	bhi.n	8021f80 <MobleTransportProcessData+0x17c>
 8021eb2:	e8df f00a 	tbb	[pc, sl]
 8021eb6:	cf03      	.short	0xcf03
 8021eb8:	a78c      	.short	0xa78c
 8021eba:	ca          	.byte	0xca
 8021ebb:	00          	.byte	0x00
 8021ebc:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021ec0:	0559      	lsls	r1, r3, #21
 8021ec2:	d506      	bpl.n	8021ed2 <MobleTransportProcessData+0xce>
 8021ec4:	9600      	str	r6, [sp, #0]
 8021ec6:	464b      	mov	r3, r9
 8021ec8:	aa0e      	add	r2, sp, #56	; 0x38
 8021eca:	4629      	mov	r1, r5
 8021ecc:	4638      	mov	r0, r7
 8021ece:	f7fc fb3b 	bl	801e548 <BnrgmFrndMgmtQueLpnPkt>
 8021ed2:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021ed6:	059a      	lsls	r2, r3, #22
 8021ed8:	d5cf      	bpl.n	8021e7a <MobleTransportProcessData+0x76>
 8021eda:	4b6b      	ldr	r3, [pc, #428]	; (8022088 <MobleTransportProcessData+0x284>)
 8021edc:	f8b3 094e 	ldrh.w	r0, [r3, #2382]	; 0x94e
 8021ee0:	f7f8 ffde 	bl	801aea0 <MobleMemAlloc>
 8021ee4:	4680      	mov	r8, r0
 8021ee6:	2800      	cmp	r0, #0
 8021ee8:	d04a      	beq.n	8021f80 <MobleTransportProcessData+0x17c>
 8021eea:	f109 0301 	add.w	r3, r9, #1
 8021eee:	9308      	str	r3, [sp, #32]
 8021ef0:	683b      	ldr	r3, [r7, #0]
 8021ef2:	7f1b      	ldrb	r3, [r3, #28]
 8021ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8021ef6:	8aab      	ldrh	r3, [r5, #20]
 8021ef8:	930a      	str	r3, [sp, #40]	; 0x28
 8021efa:	4654      	mov	r4, sl
 8021efc:	f04f 0900 	mov.w	r9, #0
 8021f00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8021f02:	fa5f f389 	uxtb.w	r3, r9
 8021f06:	429a      	cmp	r2, r3
 8021f08:	d805      	bhi.n	8021f16 <MobleTransportProcessData+0x112>
 8021f0a:	2c01      	cmp	r4, #1
 8021f0c:	d92e      	bls.n	8021f6c <MobleTransportProcessData+0x168>
 8021f0e:	4640      	mov	r0, r8
 8021f10:	f7f9 f850 	bl	801afb4 <MobleMemFree>
 8021f14:	e7b1      	b.n	8021e7a <MobleTransportProcessData+0x76>
 8021f16:	fa1f f389 	uxth.w	r3, r9
 8021f1a:	f895 0042 	ldrb.w	r0, [r5, #66]	; 0x42
 8021f1e:	8aaa      	ldrh	r2, [r5, #20]
 8021f20:	930b      	str	r3, [sp, #44]	; 0x2c
 8021f22:	f7ff fe81 	bl	8021c28 <MobleConfigModel_KR_UseNewKeyDec>
 8021f26:	2300      	movs	r3, #0
 8021f28:	e9cd 5306 	strd	r5, r3, [sp, #24]
 8021f2c:	9b08      	ldr	r3, [sp, #32]
 8021f2e:	9302      	str	r3, [sp, #8]
 8021f30:	fa12 f289 	uxtah	r2, r2, r9
 8021f34:	8aeb      	ldrh	r3, [r5, #22]
 8021f36:	f89d 403a 	ldrb.w	r4, [sp, #58]	; 0x3a
 8021f3a:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
 8021f3e:	f8cd b00c 	str.w	fp, [sp, #12]
 8021f42:	b292      	uxth	r2, r2
 8021f44:	e9cd 2300 	strd	r2, r3, [sp]
 8021f48:	2200      	movs	r2, #0
 8021f4a:	e9cd 8004 	strd	r8, r0, [sp, #16]
 8021f4e:	1aa0      	subs	r0, r4, r2
 8021f50:	692b      	ldr	r3, [r5, #16]
 8021f52:	bf18      	it	ne
 8021f54:	2001      	movne	r0, #1
 8021f56:	f7f9 fd69 	bl	801ba2c <MoblePalCryptoDecryptApp>
 8021f5a:	f109 0901 	add.w	r9, r9, #1
 8021f5e:	4604      	mov	r4, r0
 8021f60:	2800      	cmp	r0, #0
 8021f62:	d1cd      	bne.n	8021f00 <MobleTransportProcessData+0xfc>
 8021f64:	e9dd 320a 	ldrd	r3, r2, [sp, #40]	; 0x28
 8021f68:	4413      	add	r3, r2
 8021f6a:	82ab      	strh	r3, [r5, #20]
 8021f6c:	1f71      	subs	r1, r6, #5
 8021f6e:	aa0d      	add	r2, sp, #52	; 0x34
 8021f70:	4640      	mov	r0, r8
 8021f72:	f7fe fddd 	bl	8020b30 <MobleModelGetOpcodeValue>
 8021f76:	4604      	mov	r4, r0
 8021f78:	b920      	cbnz	r0, 8021f84 <MobleTransportProcessData+0x180>
 8021f7a:	4640      	mov	r0, r8
 8021f7c:	f7f9 f81a 	bl	801afb4 <MobleMemFree>
 8021f80:	2402      	movs	r4, #2
 8021f82:	e77a      	b.n	8021e7a <MobleTransportProcessData+0x76>
 8021f84:	2801      	cmp	r0, #1
 8021f86:	d116      	bne.n	8021fb6 <MobleTransportProcessData+0x1b2>
 8021f88:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021f8a:	2b03      	cmp	r3, #3
 8021f8c:	d803      	bhi.n	8021f96 <MobleTransportProcessData+0x192>
 8021f8e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8021f92:	2b01      	cmp	r3, #1
 8021f94:	d0f1      	beq.n	8021f7a <MobleTransportProcessData+0x176>
 8021f96:	9100      	str	r1, [sp, #0]
 8021f98:	4643      	mov	r3, r8
 8021f9a:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8021f9e:	4629      	mov	r1, r5
 8021fa0:	4638      	mov	r0, r7
 8021fa2:	f7f9 fea9 	bl	801bcf8 <MobleApplicationProcessPacket>
 8021fa6:	4604      	mov	r4, r0
 8021fa8:	2c01      	cmp	r4, #1
 8021faa:	4640      	mov	r0, r8
 8021fac:	d8b0      	bhi.n	8021f10 <MobleTransportProcessData+0x10c>
 8021fae:	f7f9 f801 	bl	801afb4 <MobleMemFree>
 8021fb2:	4654      	mov	r4, sl
 8021fb4:	e761      	b.n	8021e7a <MobleTransportProcessData+0x76>
 8021fb6:	2802      	cmp	r0, #2
 8021fb8:	d1ed      	bne.n	8021f96 <MobleTransportProcessData+0x192>
 8021fba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021fbc:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 8021fc0:	2a4e      	cmp	r2, #78	; 0x4e
 8021fc2:	d8e8      	bhi.n	8021f96 <MobleTransportProcessData+0x192>
 8021fc4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
 8021fc8:	2b01      	cmp	r3, #1
 8021fca:	d1e4      	bne.n	8021f96 <MobleTransportProcessData+0x192>
 8021fcc:	e79f      	b.n	8021f0e <MobleTransportProcessData+0x10a>
 8021fce:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021fd2:	055b      	lsls	r3, r3, #21
 8021fd4:	d506      	bpl.n	8021fe4 <MobleTransportProcessData+0x1e0>
 8021fd6:	9600      	str	r6, [sp, #0]
 8021fd8:	464b      	mov	r3, r9
 8021fda:	aa0e      	add	r2, sp, #56	; 0x38
 8021fdc:	4629      	mov	r1, r5
 8021fde:	4638      	mov	r0, r7
 8021fe0:	f7fc fab2 	bl	801e548 <BnrgmFrndMgmtQueLpnPkt>
 8021fe4:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8021fe8:	0598      	lsls	r0, r3, #22
 8021fea:	f57f af46 	bpl.w	8021e7a <MobleTransportProcessData+0x76>
 8021fee:	2e07      	cmp	r6, #7
 8021ff0:	d1c6      	bne.n	8021f80 <MobleTransportProcessData+0x17c>
 8021ff2:	f109 0303 	add.w	r3, r9, #3
 8021ff6:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8021ffa:	4629      	mov	r1, r5
 8021ffc:	4638      	mov	r0, r7
 8021ffe:	f000 fbcf 	bl	80227a0 <MobleTransSarProcessAck>
 8022002:	e73a      	b.n	8021e7a <MobleTransportProcessData+0x76>
 8022004:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 8022008:	0559      	lsls	r1, r3, #21
 802200a:	d50c      	bpl.n	8022026 <MobleTransportProcessData+0x222>
 802200c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
 8022010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8022014:	2b0a      	cmp	r3, #10
 8022016:	d106      	bne.n	8022026 <MobleTransportProcessData+0x222>
 8022018:	9600      	str	r6, [sp, #0]
 802201a:	464b      	mov	r3, r9
 802201c:	aa0e      	add	r2, sp, #56	; 0x38
 802201e:	4629      	mov	r1, r5
 8022020:	4638      	mov	r0, r7
 8022022:	f7fc fa91 	bl	801e548 <BnrgmFrndMgmtQueLpnPkt>
 8022026:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 802202a:	059a      	lsls	r2, r3, #22
 802202c:	f57f af25 	bpl.w	8021e7a <MobleTransportProcessData+0x76>
 8022030:	f109 0301 	add.w	r3, r9, #1
 8022034:	9300      	str	r3, [sp, #0]
 8022036:	f8cd b004 	str.w	fp, [sp, #4]
 802203a:	464b      	mov	r3, r9
 802203c:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 8022040:	4629      	mov	r1, r5
 8022042:	4638      	mov	r0, r7
 8022044:	f7ff fe96 	bl	8021d74 <MobleTransControl_ProcessUnSegCtrlReq>
 8022048:	e717      	b.n	8021e7a <MobleTransportProcessData+0x76>
 802204a:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
 802204e:	059b      	lsls	r3, r3, #22
 8022050:	f57f af13 	bpl.w	8021e7a <MobleTransportProcessData+0x76>
 8022054:	2e04      	cmp	r6, #4
 8022056:	d993      	bls.n	8021f80 <MobleTransportProcessData+0x17c>
 8022058:	f995 3018 	ldrsb.w	r3, [r5, #24]
 802205c:	9301      	str	r3, [sp, #4]
 802205e:	3e04      	subs	r6, #4
 8022060:	9600      	str	r6, [sp, #0]
 8022062:	f109 0304 	add.w	r3, r9, #4
 8022066:	f10d 0239 	add.w	r2, sp, #57	; 0x39
 802206a:	4629      	mov	r1, r5
 802206c:	4638      	mov	r0, r7
 802206e:	f004 fd85 	bl	8026b7c <MobleTransSarProcessSeg>
 8022072:	e702      	b.n	8021e7a <MobleTransportProcessData+0x76>
 8022074:	2403      	movs	r4, #3
 8022076:	e700      	b.n	8021e7a <MobleTransportProcessData+0x76>
 8022078:	08033338 	.word	0x08033338
 802207c:	08031ec3 	.word	0x08031ec3
 8022080:	080337c8 	.word	0x080337c8
 8022084:	08033587 	.word	0x08033587
 8022088:	2000141c 	.word	0x2000141c

0802208c <MobleNetworkProcessData>:
 802208c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022090:	b0a9      	sub	sp, #164	; 0xa4
 8022092:	4604      	mov	r4, r0
 8022094:	460f      	mov	r7, r1
 8022096:	4615      	mov	r5, r2
 8022098:	2100      	movs	r1, #0
 802209a:	224c      	movs	r2, #76	; 0x4c
 802209c:	a815      	add	r0, sp, #84	; 0x54
 802209e:	f89d 80c8 	ldrb.w	r8, [sp, #200]	; 0xc8
 80220a2:	461e      	mov	r6, r3
 80220a4:	f007 fc06 	bl	80298b4 <memset>
 80220a8:	2228      	movs	r2, #40	; 0x28
 80220aa:	2100      	movs	r1, #0
 80220ac:	a80b      	add	r0, sp, #44	; 0x2c
 80220ae:	f007 fc01 	bl	80298b4 <memset>
 80220b2:	b934      	cbnz	r4, 80220c2 <MobleNetworkProcessData+0x36>
 80220b4:	4bac      	ldr	r3, [pc, #688]	; (8022368 <MobleNetworkProcessData+0x2dc>)
 80220b6:	4aad      	ldr	r2, [pc, #692]	; (802236c <MobleNetworkProcessData+0x2e0>)
 80220b8:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 80220bc:	48ac      	ldr	r0, [pc, #688]	; (8022370 <MobleNetworkProcessData+0x2e4>)
 80220be:	f006 fd03 	bl	8028ac8 <__assert_func>
 80220c2:	b925      	cbnz	r5, 80220ce <MobleNetworkProcessData+0x42>
 80220c4:	4bab      	ldr	r3, [pc, #684]	; (8022374 <MobleNetworkProcessData+0x2e8>)
 80220c6:	4aa9      	ldr	r2, [pc, #676]	; (802236c <MobleNetworkProcessData+0x2e0>)
 80220c8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80220cc:	e7f6      	b.n	80220bc <MobleNetworkProcessData+0x30>
 80220ce:	f1a6 030e 	sub.w	r3, r6, #14
 80220d2:	2b0f      	cmp	r3, #15
 80220d4:	d904      	bls.n	80220e0 <MobleNetworkProcessData+0x54>
 80220d6:	2502      	movs	r5, #2
 80220d8:	4628      	mov	r0, r5
 80220da:	b029      	add	sp, #164	; 0xa4
 80220dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220e0:	f99d 30cc 	ldrsb.w	r3, [sp, #204]	; 0xcc
 80220e4:	f88d 605c 	strb.w	r6, [sp, #92]	; 0x5c
 80220e8:	e9cd 7515 	strd	r7, r5, [sp, #84]	; 0x54
 80220ec:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 80220f0:	f1b8 0f00 	cmp.w	r8, #0
 80220f4:	d002      	beq.n	80220fc <MobleNetworkProcessData+0x70>
 80220f6:	2340      	movs	r3, #64	; 0x40
 80220f8:	f8ad 3094 	strh.w	r3, [sp, #148]	; 0x94
 80220fc:	ae18      	add	r6, sp, #96	; 0x60
 80220fe:	4628      	mov	r0, r5
 8022100:	4631      	mov	r1, r6
 8022102:	f7f7 fd9b 	bl	8019c3c <MoblePalCryptoParseNetHdr>
 8022106:	f89d 1061 	ldrb.w	r1, [sp, #97]	; 0x61
 802210a:	f10d 006e 	add.w	r0, sp, #110	; 0x6e
 802210e:	f7f8 f8eb 	bl	801a2e8 <BnrgmPalCryptoMatchNid>
 8022112:	4605      	mov	r5, r0
 8022114:	2800      	cmp	r0, #0
 8022116:	d1de      	bne.n	80220d6 <MobleNetworkProcessData+0x4a>
 8022118:	f89d b05c 	ldrb.w	fp, [sp, #92]	; 0x5c
 802211c:	9916      	ldr	r1, [sp, #88]	; 0x58
 802211e:	f894 91d1 	ldrb.w	r9, [r4, #465]	; 0x1d1
 8022122:	f1ab 0b04 	sub.w	fp, fp, #4
 8022126:	448b      	add	fp, r1
 8022128:	4607      	mov	r7, r0
 802212a:	f04f 0a05 	mov.w	sl, #5
 802212e:	b2fb      	uxtb	r3, r7
 8022130:	4599      	cmp	r9, r3
 8022132:	d877      	bhi.n	8022224 <MobleNetworkProcessData+0x198>
 8022134:	a907      	add	r1, sp, #28
 8022136:	a815      	add	r0, sp, #84	; 0x54
 8022138:	f7f9 fb06 	bl	801b748 <BnrgmPalCryptoDecryptNetwork>
 802213c:	2801      	cmp	r0, #1
 802213e:	d8ca      	bhi.n	80220d6 <MobleNetworkProcessData+0x4a>
 8022140:	f89d 3062 	ldrb.w	r3, [sp, #98]	; 0x62
 8022144:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8022148:	2b00      	cmp	r3, #0
 802214a:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 802214e:	bf14      	ite	ne
 8022150:	f04f 0908 	movne.w	r9, #8
 8022154:	f04f 0904 	moveq.w	r9, #4
 8022158:	2b00      	cmp	r3, #0
 802215a:	ddbc      	ble.n	80220d6 <MobleNetworkProcessData+0x4a>
 802215c:	f8bd 306a 	ldrh.w	r3, [sp, #106]	; 0x6a
 8022160:	2b00      	cmp	r3, #0
 8022162:	d0b8      	beq.n	80220d6 <MobleNetworkProcessData+0x4a>
 8022164:	6823      	ldr	r3, [r4, #0]
 8022166:	7f1f      	ldrb	r7, [r3, #28]
 8022168:	2200      	movs	r2, #0
 802216a:	b2d1      	uxtb	r1, r2
 802216c:	428f      	cmp	r7, r1
 802216e:	d86f      	bhi.n	8022250 <MobleNetworkProcessData+0x1c4>
 8022170:	f89d 705c 	ldrb.w	r7, [sp, #92]	; 0x5c
 8022174:	f1b8 0f00 	cmp.w	r8, #0
 8022178:	d007      	beq.n	802218a <MobleNetworkProcessData+0xfe>
 802217a:	4b7f      	ldr	r3, [pc, #508]	; (8022378 <MobleNetworkProcessData+0x2ec>)
 802217c:	2201      	movs	r2, #1
 802217e:	f883 26f4 	strb.w	r2, [r3, #1780]	; 0x6f4
 8022182:	f8a3 06f6 	strh.w	r0, [r3, #1782]	; 0x6f6
 8022186:	f7fb fc1d 	bl	801d9c4 <BnrgmProxyConfig_AddProxyClient_Filter>
 802218a:	f1a7 0309 	sub.w	r3, r7, #9
 802218e:	eba3 0309 	sub.w	r3, r3, r9
 8022192:	a915      	add	r1, sp, #84	; 0x54
 8022194:	4620      	mov	r0, r4
 8022196:	9305      	str	r3, [sp, #20]
 8022198:	f7fe fff2 	bl	8021180 <MobleNetworkDecideRetransmission>
 802219c:	f8bd 2094 	ldrh.w	r2, [sp, #148]	; 0x94
 80221a0:	9b05      	ldr	r3, [sp, #20]
 80221a2:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
 80221a6:	b12a      	cbz	r2, 80221b4 <MobleNetworkProcessData+0x128>
 80221a8:	aa07      	add	r2, sp, #28
 80221aa:	a915      	add	r1, sp, #84	; 0x54
 80221ac:	4620      	mov	r0, r4
 80221ae:	f7ff fe29 	bl	8021e04 <MobleTransportProcessData>
 80221b2:	9b05      	ldr	r3, [sp, #20]
 80221b4:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 80221b8:	f8bd e068 	ldrh.w	lr, [sp, #104]	; 0x68
 80221bc:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
 80221c0:	f89d 7060 	ldrb.w	r7, [sp, #96]	; 0x60
 80221c4:	f894 a1d0 	ldrb.w	sl, [r4, #464]	; 0x1d0
 80221c8:	f04f 0900 	mov.w	r9, #0
 80221cc:	2105      	movs	r1, #5
 80221ce:	fa5f f089 	uxtb.w	r0, r9
 80221d2:	4282      	cmp	r2, r0
 80221d4:	d843      	bhi.n	802225e <MobleNetworkProcessData+0x1d2>
 80221d6:	4452      	add	r2, sl
 80221d8:	fbb2 f0f1 	udiv	r0, r2, r1
 80221dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80221e0:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
 80221e4:	1a12      	subs	r2, r2, r0
 80221e6:	9816      	ldr	r0, [sp, #88]	; 0x58
 80221e8:	4440      	add	r0, r8
 80221ea:	eb04 1202 	add.w	r2, r4, r2, lsl #4
 80221ee:	f850 0c04 	ldr.w	r0, [r0, #-4]
 80221f2:	f8c2 0188 	str.w	r0, [r2, #392]	; 0x188
 80221f6:	f882 818c 	strb.w	r8, [r2, #396]	; 0x18c
 80221fa:	f8a2 e180 	strh.w	lr, [r2, #384]	; 0x180
 80221fe:	f8c2 c184 	str.w	ip, [r2, #388]	; 0x184
 8022202:	f882 718d 	strb.w	r7, [r2, #397]	; 0x18d
 8022206:	f894 21d1 	ldrb.w	r2, [r4, #465]	; 0x1d1
 802220a:	2a04      	cmp	r2, #4
 802220c:	d940      	bls.n	8022290 <MobleNetworkProcessData+0x204>
 802220e:	f894 21d0 	ldrb.w	r2, [r4, #464]	; 0x1d0
 8022212:	3201      	adds	r2, #1
 8022214:	fbb2 f1f1 	udiv	r1, r2, r1
 8022218:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 802221c:	1a52      	subs	r2, r2, r1
 802221e:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
 8022222:	e038      	b.n	8022296 <MobleNetworkProcessData+0x20a>
 8022224:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
 8022228:	4438      	add	r0, r7
 802222a:	fbb0 f3fa 	udiv	r3, r0, sl
 802222e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8022232:	1ac0      	subs	r0, r0, r3
 8022234:	eb04 1000 	add.w	r0, r4, r0, lsl #4
 8022238:	2204      	movs	r2, #4
 802223a:	4659      	mov	r1, fp
 802223c:	f500 70c4 	add.w	r0, r0, #392	; 0x188
 8022240:	f007 fb0e 	bl	8029860 <memcmp>
 8022244:	3701      	adds	r7, #1
 8022246:	2800      	cmp	r0, #0
 8022248:	f47f af71 	bne.w	802212e <MobleNetworkProcessData+0xa2>
 802224c:	2501      	movs	r5, #1
 802224e:	e743      	b.n	80220d8 <MobleNetworkProcessData+0x4c>
 8022250:	8859      	ldrh	r1, [r3, #2]
 8022252:	4411      	add	r1, r2
 8022254:	4288      	cmp	r0, r1
 8022256:	f102 0201 	add.w	r2, r2, #1
 802225a:	d186      	bne.n	802216a <MobleNetworkProcessData+0xde>
 802225c:	e7f6      	b.n	802224c <MobleNetworkProcessData+0x1c0>
 802225e:	eb09 080a 	add.w	r8, r9, sl
 8022262:	fbb8 f0f1 	udiv	r0, r8, r1
 8022266:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 802226a:	eba8 0800 	sub.w	r8, r8, r0
 802226e:	eb04 1808 	add.w	r8, r4, r8, lsl #4
 8022272:	f8b8 0180 	ldrh.w	r0, [r8, #384]	; 0x180
 8022276:	4570      	cmp	r0, lr
 8022278:	d107      	bne.n	802228a <MobleNetworkProcessData+0x1fe>
 802227a:	f8d8 0184 	ldr.w	r0, [r8, #388]	; 0x184
 802227e:	4560      	cmp	r0, ip
 8022280:	d103      	bne.n	802228a <MobleNetworkProcessData+0x1fe>
 8022282:	f898 018d 	ldrb.w	r0, [r8, #397]	; 0x18d
 8022286:	42b8      	cmp	r0, r7
 8022288:	d0e0      	beq.n	802224c <MobleNetworkProcessData+0x1c0>
 802228a:	f109 0901 	add.w	r9, r9, #1
 802228e:	e79e      	b.n	80221ce <MobleNetworkProcessData+0x142>
 8022290:	3201      	adds	r2, #1
 8022292:	f884 21d1 	strb.w	r2, [r4, #465]	; 0x1d1
 8022296:	f8bd 7094 	ldrh.w	r7, [sp, #148]	; 0x94
 802229a:	05fa      	lsls	r2, r7, #23
 802229c:	d52d      	bpl.n	80222fa <MobleNetworkProcessData+0x26e>
 802229e:	06b8      	lsls	r0, r7, #26
 80222a0:	f89d 8063 	ldrb.w	r8, [sp, #99]	; 0x63
 80222a4:	d541      	bpl.n	802232a <MobleNetworkProcessData+0x29e>
 80222a6:	f8df e0d4 	ldr.w	lr, [pc, #212]	; 802237c <MobleNetworkProcessData+0x2f0>
 80222aa:	f89e 20be 	ldrb.w	r2, [lr, #190]	; 0xbe
 80222ae:	2a01      	cmp	r2, #1
 80222b0:	d123      	bne.n	80222fa <MobleNetworkProcessData+0x26e>
 80222b2:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80222b6:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 80222ba:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80222be:	f89d 2096 	ldrb.w	r2, [sp, #150]	; 0x96
 80222c2:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 80222c6:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 80222ca:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 80222ce:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 80222d2:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
 80222d6:	f027 0720 	bic.w	r7, r7, #32
 80222da:	f89e 20b8 	ldrb.w	r2, [lr, #184]	; 0xb8
 80222de:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 80222e2:	3201      	adds	r2, #1
 80222e4:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
 80222e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80222ec:	aa07      	add	r2, sp, #28
 80222ee:	a90b      	add	r1, sp, #44	; 0x2c
 80222f0:	4620      	mov	r0, r4
 80222f2:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
 80222f6:	f7fe fa99 	bl	802082c <MobleNetworkSendDataEx>
 80222fa:	f89d 3063 	ldrb.w	r3, [sp, #99]	; 0x63
 80222fe:	f99d 606c 	ldrsb.w	r6, [sp, #108]	; 0x6c
 8022302:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8022304:	2b00      	cmp	r3, #0
 8022306:	bf08      	it	eq
 8022308:	f8bd 0068 	ldrheq.w	r0, [sp, #104]	; 0x68
 802230c:	f04f 0300 	mov.w	r3, #0
 8022310:	bf18      	it	ne
 8022312:	4618      	movne	r0, r3
 8022314:	e9cd 6001 	strd	r6, r0, [sp, #4]
 8022318:	9300      	str	r3, [sp, #0]
 802231a:	bf0c      	ite	eq
 802231c:	2102      	moveq	r1, #2
 802231e:	2103      	movne	r1, #3
 8022320:	2301      	movs	r3, #1
 8022322:	4620      	mov	r0, r4
 8022324:	f7fb f81b 	bl	801d35e <BLEMesh_UpdateNeighbors>
 8022328:	e6d6      	b.n	80220d8 <MobleNetworkProcessData+0x4c>
 802232a:	9305      	str	r3, [sp, #20]
 802232c:	f7fe ff1e 	bl	802116c <MobleConfigModelGetRelayEnableStatus>
 8022330:	9b05      	ldr	r3, [sp, #20]
 8022332:	b908      	cbnz	r0, 8022338 <MobleNetworkProcessData+0x2ac>
 8022334:	067a      	lsls	r2, r7, #25
 8022336:	d5e0      	bpl.n	80222fa <MobleNetworkProcessData+0x26e>
 8022338:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 802233c:	f10d 0c38 	add.w	ip, sp, #56	; 0x38
 8022340:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8022344:	f89d 2096 	ldrb.w	r2, [sp, #150]	; 0x96
 8022348:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
 802234c:	f8bd 2098 	ldrh.w	r2, [sp, #152]	; 0x98
 8022350:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
 8022354:	f89d 209c 	ldrb.w	r2, [sp, #156]	; 0x9c
 8022358:	f88d 204e 	strb.w	r2, [sp, #78]	; 0x4e
 802235c:	4a07      	ldr	r2, [pc, #28]	; (802237c <MobleNetworkProcessData+0x2f0>)
 802235e:	f8ad 7046 	strh.w	r7, [sp, #70]	; 0x46
 8022362:	f892 20b8 	ldrb.w	r2, [r2, #184]	; 0xb8
 8022366:	e7bc      	b.n	80222e2 <MobleNetworkProcessData+0x256>
 8022368:	08033338 	.word	0x08033338
 802236c:	08031edd 	.word	0x08031edd
 8022370:	08033816 	.word	0x08033816
 8022374:	080333d8 	.word	0x080333d8
 8022378:	20002514 	.word	0x20002514
 802237c:	20000324 	.word	0x20000324

08022380 <MobleStackProcessData>:
 8022380:	b513      	push	{r0, r1, r4, lr}
 8022382:	f99d 4010 	ldrsb.w	r4, [sp, #16]
 8022386:	e9cd 3400 	strd	r3, r4, [sp]
 802238a:	4613      	mov	r3, r2
 802238c:	460a      	mov	r2, r1
 802238e:	4601      	mov	r1, r0
 8022390:	4802      	ldr	r0, [pc, #8]	; (802239c <MobleStackProcessData+0x1c>)
 8022392:	f7ff fe7b 	bl	802208c <MobleNetworkProcessData>
 8022396:	b002      	add	sp, #8
 8022398:	bd10      	pop	{r4, pc}
 802239a:	bf00      	nop
 802239c:	20001a9c 	.word	0x20001a9c

080223a0 <MobleNetworkSendData>:
 80223a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223a4:	460d      	mov	r5, r1
 80223a6:	b098      	sub	sp, #96	; 0x60
 80223a8:	4606      	mov	r6, r0
 80223aa:	4617      	mov	r7, r2
 80223ac:	2100      	movs	r1, #0
 80223ae:	224c      	movs	r2, #76	; 0x4c
 80223b0:	a805      	add	r0, sp, #20
 80223b2:	4698      	mov	r8, r3
 80223b4:	f007 fa7e 	bl	80298b4 <memset>
 80223b8:	8aab      	ldrh	r3, [r5, #20]
 80223ba:	2400      	movs	r4, #0
 80223bc:	f88d 4007 	strb.w	r4, [sp, #7]
 80223c0:	2b00      	cmp	r3, #0
 80223c2:	d04d      	beq.n	8022460 <MobleNetworkSendData+0xc0>
 80223c4:	8aeb      	ldrh	r3, [r5, #22]
 80223c6:	2b00      	cmp	r3, #0
 80223c8:	d04a      	beq.n	8022460 <MobleNetworkSendData+0xc0>
 80223ca:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
 80223ce:	612b      	str	r3, [r5, #16]
 80223d0:	3301      	adds	r3, #1
 80223d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80223d6:	f8c6 315c 	str.w	r3, [r6, #348]	; 0x15c
 80223da:	4630      	mov	r0, r6
 80223dc:	f7fa fc90 	bl	801cd00 <MobleNetworkSaveSeqNum>
 80223e0:	4b28      	ldr	r3, [pc, #160]	; (8022484 <MobleNetworkSendData+0xe4>)
 80223e2:	8ae8      	ldrh	r0, [r5, #22]
 80223e4:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 80223e8:	2b01      	cmp	r3, #1
 80223ea:	bf08      	it	eq
 80223ec:	8b6c      	ldrheq	r4, [r5, #26]
 80223ee:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80223f2:	bf04      	itt	eq
 80223f4:	f084 0410 	eoreq.w	r4, r4, #16
 80223f8:	f3c4 1400 	ubfxeq	r4, r4, #4, #1
 80223fc:	2b00      	cmp	r3, #0
 80223fe:	dd33      	ble.n	8022468 <MobleNetworkSendData+0xc8>
 8022400:	b124      	cbz	r4, 802240c <MobleNetworkSendData+0x6c>
 8022402:	f7fb ff3b 	bl	801e27c <BnrgmFrndMgmtGetFriendshipStatus>
 8022406:	fab0 f480 	clz	r4, r0
 802240a:	0964      	lsrs	r4, r4, #5
 802240c:	4643      	mov	r3, r8
 802240e:	463a      	mov	r2, r7
 8022410:	4629      	mov	r1, r5
 8022412:	4630      	mov	r0, r6
 8022414:	f7fe fa0a 	bl	802082c <MobleNetworkSendDataEx>
 8022418:	b314      	cbz	r4, 8022460 <MobleNetworkSendData+0xc0>
 802241a:	2300      	movs	r3, #0
 802241c:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8022420:	f88d 301c 	strb.w	r3, [sp, #28]
 8022424:	f88d 3056 	strb.w	r3, [sp, #86]	; 0x56
 8022428:	8b6b      	ldrh	r3, [r5, #26]
 802242a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 802242e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
 8022432:	7beb      	ldrb	r3, [r5, #15]
 8022434:	3301      	adds	r3, #1
 8022436:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 802243a:	692b      	ldr	r3, [r5, #16]
 802243c:	9309      	str	r3, [sp, #36]	; 0x24
 802243e:	696b      	ldr	r3, [r5, #20]
 8022440:	930a      	str	r3, [sp, #40]	; 0x28
 8022442:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8022446:	2281      	movs	r2, #129	; 0x81
 8022448:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 802244c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8022450:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8022454:	463a      	mov	r2, r7
 8022456:	4643      	mov	r3, r8
 8022458:	a905      	add	r1, sp, #20
 802245a:	4630      	mov	r0, r6
 802245c:	f7ff fcd2 	bl	8021e04 <MobleTransportProcessData>
 8022460:	2000      	movs	r0, #0
 8022462:	b018      	add	sp, #96	; 0x60
 8022464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022468:	2c00      	cmp	r4, #0
 802246a:	d0cf      	beq.n	802240c <MobleNetworkSendData+0x6c>
 802246c:	aa02      	add	r2, sp, #8
 802246e:	f10d 0107 	add.w	r1, sp, #7
 8022472:	f7fb ff29 	bl	801e2c8 <BnrgmFrndMgmtGetSubscrStatus>
 8022476:	f89d 4007 	ldrb.w	r4, [sp, #7]
 802247a:	3c00      	subs	r4, #0
 802247c:	bf18      	it	ne
 802247e:	2401      	movne	r4, #1
 8022480:	e7c4      	b.n	802240c <MobleNetworkSendData+0x6c>
 8022482:	bf00      	nop
 8022484:	20000324 	.word	0x20000324

08022488 <MobleTransSarSendEx>:
 8022488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802248c:	b093      	sub	sp, #76	; 0x4c
 802248e:	4606      	mov	r6, r0
 8022490:	9308      	str	r3, [sp, #32]
 8022492:	8bc8      	ldrh	r0, [r1, #30]
 8022494:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 8022498:	9206      	str	r2, [sp, #24]
 802249a:	9304      	str	r3, [sp, #16]
 802249c:	f7f8 f922 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80224a0:	f8b1 901a 	ldrh.w	r9, [r1, #26]
 80224a4:	4bb5      	ldr	r3, [pc, #724]	; (802277c <MobleTransSarSendEx+0x2f4>)
 80224a6:	f89d 507c 	ldrb.w	r5, [sp, #124]	; 0x7c
 80224aa:	f019 0f04 	tst.w	r9, #4
 80224ae:	4602      	mov	r2, r0
 80224b0:	f8b3 094c 	ldrh.w	r0, [r3, #2380]	; 0x94c
 80224b4:	bf14      	ite	ne
 80224b6:	f04f 0a08 	movne.w	sl, #8
 80224ba:	f04f 0a04 	moveq.w	sl, #4
 80224be:	460c      	mov	r4, r1
 80224c0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80224c2:	eba0 030a 	sub.w	r3, r0, sl
 80224c6:	428b      	cmp	r3, r1
 80224c8:	f3c9 0b80 	ubfx	fp, r9, #2, #1
 80224cc:	d206      	bcs.n	80224dc <MobleTransSarSendEx+0x54>
 80224ce:	4bac      	ldr	r3, [pc, #688]	; (8022780 <MobleTransSarSendEx+0x2f8>)
 80224d0:	4aac      	ldr	r2, [pc, #688]	; (8022784 <MobleTransSarSendEx+0x2fc>)
 80224d2:	f240 614d 	movw	r1, #1613	; 0x64d
 80224d6:	48ac      	ldr	r0, [pc, #688]	; (8022788 <MobleTransSarSendEx+0x300>)
 80224d8:	f006 faf6 	bl	8028ac8 <__assert_func>
 80224dc:	9205      	str	r2, [sp, #20]
 80224de:	f7f8 fcdf 	bl	801aea0 <MobleMemAlloc>
 80224e2:	9a05      	ldr	r2, [sp, #20]
 80224e4:	4607      	mov	r7, r0
 80224e6:	b920      	cbnz	r0, 80224f2 <MobleTransSarSendEx+0x6a>
 80224e8:	2502      	movs	r5, #2
 80224ea:	4628      	mov	r0, r5
 80224ec:	b013      	add	sp, #76	; 0x4c
 80224ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224f2:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
 80224f6:	b96d      	cbnz	r5, 8022514 <MobleTransSarSendEx+0x8c>
 80224f8:	9804      	ldr	r0, [sp, #16]
 80224fa:	f423 51ff 	bic.w	r1, r3, #8160	; 0x1fe0
 80224fe:	f021 011f 	bic.w	r1, r1, #31
 8022502:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022506:	4401      	add	r1, r0
 8022508:	4298      	cmp	r0, r3
 802250a:	bf8c      	ite	hi
 802250c:	f44f 5300 	movhi.w	r3, #8192	; 0x2000
 8022510:	2300      	movls	r3, #0
 8022512:	1acb      	subs	r3, r1, r3
 8022514:	6831      	ldr	r1, [r6, #0]
 8022516:	f8df 8284 	ldr.w	r8, [pc, #644]	; 802279c <MobleTransSarSendEx+0x314>
 802251a:	310c      	adds	r1, #12
 802251c:	fa58 f282 	uxtab	r2, r8, r2
 8022520:	9103      	str	r1, [sp, #12]
 8022522:	f892 20c0 	ldrb.w	r2, [r2, #192]	; 0xc0
 8022526:	1e91      	subs	r1, r2, #2
 8022528:	424a      	negs	r2, r1
 802252a:	414a      	adcs	r2, r1
 802252c:	9202      	str	r2, [sp, #8]
 802252e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022530:	9201      	str	r2, [sp, #4]
 8022532:	9a08      	ldr	r2, [sp, #32]
 8022534:	9200      	str	r2, [sp, #0]
 8022536:	4621      	mov	r1, r4
 8022538:	465a      	mov	r2, fp
 802253a:	4638      	mov	r0, r7
 802253c:	f7f9 f9a2 	bl	801b884 <MoblePalCryptoEncryptApp>
 8022540:	2801      	cmp	r0, #1
 8022542:	d906      	bls.n	8022552 <MobleTransSarSendEx+0xca>
 8022544:	9004      	str	r0, [sp, #16]
 8022546:	4638      	mov	r0, r7
 8022548:	f7f8 fd34 	bl	801afb4 <MobleMemFree>
 802254c:	9b04      	ldr	r3, [sp, #16]
 802254e:	461d      	mov	r5, r3
 8022550:	e7cb      	b.n	80224ea <MobleTransSarSendEx+0x62>
 8022552:	f3c9 03c0 	ubfx	r3, r9, #3, #1
 8022556:	f019 0f08 	tst.w	r9, #8
 802255a:	991c      	ldr	r1, [sp, #112]	; 0x70
 802255c:	9307      	str	r3, [sp, #28]
 802255e:	f241 0201 	movw	r2, #4097	; 0x1001
 8022562:	bf14      	ite	ne
 8022564:	230b      	movne	r3, #11
 8022566:	230f      	moveq	r3, #15
 8022568:	ea19 0f02 	tst.w	r9, r2
 802256c:	eb0a 0901 	add.w	r9, sl, r1
 8022570:	eba3 0a0a 	sub.w	sl, r3, sl
 8022574:	bf0c      	ite	eq
 8022576:	2201      	moveq	r2, #1
 8022578:	2200      	movne	r2, #0
 802257a:	458a      	cmp	sl, r1
 802257c:	d334      	bcc.n	80225e8 <MobleTransSarSendEx+0x160>
 802257e:	2300      	movs	r3, #0
 8022580:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8022584:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022588:	a90e      	add	r1, sp, #56	; 0x38
 802258a:	9b06      	ldr	r3, [sp, #24]
 802258c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8022590:	a80a      	add	r0, sp, #40	; 0x28
 8022592:	f109 0501 	add.w	r5, r9, #1
 8022596:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 802259a:	f7f9 ff3f 	bl	801c41c <MobleTransportRenderHdr>
 802259e:	2d10      	cmp	r5, #16
 80225a0:	d820      	bhi.n	80225e4 <MobleTransSarSendEx+0x15c>
 80225a2:	464a      	mov	r2, r9
 80225a4:	4639      	mov	r1, r7
 80225a6:	f10d 0039 	add.w	r0, sp, #57	; 0x39
 80225aa:	f007 f969 	bl	8029880 <memmove>
 80225ae:	f898 20b6 	ldrb.w	r2, [r8, #182]	; 0xb6
 80225b2:	f898 30b5 	ldrb.w	r3, [r8, #181]	; 0xb5
 80225b6:	73e3      	strb	r3, [r4, #15]
 80225b8:	3201      	adds	r2, #1
 80225ba:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
 80225be:	8be0      	ldrh	r0, [r4, #30]
 80225c0:	f7f8 f890 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80225c4:	7720      	strb	r0, [r4, #28]
 80225c6:	8c20      	ldrh	r0, [r4, #32]
 80225c8:	f7f8 f8a6 	bl	801a718 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 80225cc:	4621      	mov	r1, r4
 80225ce:	7760      	strb	r0, [r4, #29]
 80225d0:	462b      	mov	r3, r5
 80225d2:	aa0e      	add	r2, sp, #56	; 0x38
 80225d4:	4630      	mov	r0, r6
 80225d6:	f7ff fee3 	bl	80223a0 <MobleNetworkSendData>
 80225da:	4605      	mov	r5, r0
 80225dc:	4638      	mov	r0, r7
 80225de:	f7f8 fce9 	bl	801afb4 <MobleMemFree>
 80225e2:	e782      	b.n	80224ea <MobleTransSarSendEx+0x62>
 80225e4:	2502      	movs	r5, #2
 80225e6:	e7f9      	b.n	80225dc <MobleTransSarSendEx+0x154>
 80225e8:	b13d      	cbz	r5, 80225fa <MobleTransSarSendEx+0x172>
 80225ea:	f8d6 315c 	ldr.w	r3, [r6, #348]	; 0x15c
 80225ee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80225f2:	9304      	str	r3, [sp, #16]
 80225f4:	68b3      	ldr	r3, [r6, #8]
 80225f6:	3301      	adds	r3, #1
 80225f8:	60b3      	str	r3, [r6, #8]
 80225fa:	2301      	movs	r3, #1
 80225fc:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 8022600:	9b06      	ldr	r3, [sp, #24]
 8022602:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8022606:	9b04      	ldr	r3, [sp, #16]
 8022608:	f8ad 302d 	strh.w	r3, [sp, #45]	; 0x2d
 802260c:	9b07      	ldr	r3, [sp, #28]
 802260e:	f88d b02c 	strb.w	fp, [sp, #44]	; 0x2c
 8022612:	f04f 0800 	mov.w	r8, #0
 8022616:	4543      	cmp	r3, r8
 8022618:	bf14      	ite	ne
 802261a:	f04f 0a08 	movne.w	sl, #8
 802261e:	f04f 0a0c 	moveq.w	sl, #12
 8022622:	f109 33ff 	add.w	r3, r9, #4294967295
 8022626:	4453      	add	r3, sl
 8022628:	fbb3 f3fa 	udiv	r3, r3, sl
 802262c:	3b01      	subs	r3, #1
 802262e:	f88d 8029 	strb.w	r8, [sp, #41]	; 0x29
 8022632:	f88d 202a 	strb.w	r2, [sp, #42]	; 0x2a
 8022636:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
 802263a:	46cb      	mov	fp, r9
 802263c:	f8cd 8014 	str.w	r8, [sp, #20]
 8022640:	9b05      	ldr	r3, [sp, #20]
 8022642:	454b      	cmp	r3, r9
 8022644:	d354      	bcc.n	80226f0 <MobleTransSarSendEx+0x268>
 8022646:	4638      	mov	r0, r7
 8022648:	f7f8 fcb4 	bl	801afb4 <MobleMemFree>
 802264c:	2d00      	cmp	r5, #0
 802264e:	f43f af4c 	beq.w	80224ea <MobleTransSarSendEx+0x62>
 8022652:	4f4a      	ldr	r7, [pc, #296]	; (802277c <MobleTransSarSendEx+0x2f4>)
 8022654:	f897 32e8 	ldrb.w	r3, [r7, #744]	; 0x2e8
 8022658:	b12b      	cbz	r3, 8022666 <MobleTransSarSendEx+0x1de>
 802265a:	f897 3314 	ldrb.w	r3, [r7, #788]	; 0x314
 802265e:	2b00      	cmp	r3, #0
 8022660:	f47f af42 	bne.w	80224e8 <MobleTransSarSendEx+0x60>
 8022664:	2301      	movs	r3, #1
 8022666:	f04f 082c 	mov.w	r8, #44	; 0x2c
 802266a:	fb08 f803 	mul.w	r8, r8, r3
 802266e:	4447      	add	r7, r8
 8022670:	2201      	movs	r2, #1
 8022672:	f887 22e8 	strb.w	r2, [r7, #744]	; 0x2e8
 8022676:	4a45      	ldr	r2, [pc, #276]	; (802278c <MobleTransSarSendEx+0x304>)
 8022678:	9908      	ldr	r1, [sp, #32]
 802267a:	f882 3a3b 	strb.w	r3, [r2, #2619]	; 0xa3b
 802267e:	f8d7 0300 	ldr.w	r0, [r7, #768]	; 0x300
 8022682:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8022684:	f007 f9a7 	bl	80299d6 <memcpy>
 8022688:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 802268a:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 802268e:	8b63      	ldrh	r3, [r4, #26]
 8022690:	f8a7 32ea 	strh.w	r3, [r7, #746]	; 0x2ea
 8022694:	9b06      	ldr	r3, [sp, #24]
 8022696:	f887 32ec 	strb.w	r3, [r7, #748]	; 0x2ec
 802269a:	8c23      	ldrh	r3, [r4, #32]
 802269c:	f8a7 32ee 	strh.w	r3, [r7, #750]	; 0x2ee
 80226a0:	8be3      	ldrh	r3, [r4, #30]
 80226a2:	f8a7 32f0 	strh.w	r3, [r7, #752]	; 0x2f0
 80226a6:	8aa3      	ldrh	r3, [r4, #20]
 80226a8:	f8a7 32f4 	strh.w	r3, [r7, #756]	; 0x2f4
 80226ac:	8ae3      	ldrh	r3, [r4, #22]
 80226ae:	f8a7 32f2 	strh.w	r3, [r7, #754]	; 0x2f2
 80226b2:	4837      	ldr	r0, [pc, #220]	; (8022790 <MobleTransSarSendEx+0x308>)
 80226b4:	9b04      	ldr	r3, [sp, #16]
 80226b6:	f8a7 32f6 	strh.w	r3, [r7, #758]	; 0x2f6
 80226ba:	2500      	movs	r5, #0
 80226bc:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80226c0:	4934      	ldr	r1, [pc, #208]	; (8022794 <MobleTransSarSendEx+0x30c>)
 80226c2:	f8a7 32f8 	strh.w	r3, [r7, #760]	; 0x2f8
 80226c6:	f108 0208 	add.w	r2, r8, #8
 80226ca:	f108 0828 	add.w	r8, r8, #40	; 0x28
 80226ce:	4402      	add	r2, r0
 80226d0:	f8c7 52fc 	str.w	r5, [r7, #764]	; 0x2fc
 80226d4:	f8c7 6310 	str.w	r6, [r7, #784]	; 0x310
 80226d8:	f887 530c 	strb.w	r5, [r7, #780]	; 0x30c
 80226dc:	4440      	add	r0, r8
 80226de:	f7f5 fa2f 	bl	8017b40 <MoblePalTimerCreate>
 80226e2:	f8d7 0308 	ldr.w	r0, [r7, #776]	; 0x308
 80226e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80226ea:	f7f5 fa62 	bl	8017bb2 <MoblePalTimerStart>
 80226ee:	e6fc      	b.n	80224ea <MobleTransSarSendEx+0x62>
 80226f0:	b92d      	cbnz	r5, 80226fe <MobleTransSarSendEx+0x276>
 80226f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80226f4:	2301      	movs	r3, #1
 80226f6:	fa03 f308 	lsl.w	r3, r3, r8
 80226fa:	4213      	tst	r3, r2
 80226fc:	d135      	bne.n	802276a <MobleTransSarSendEx+0x2e2>
 80226fe:	a90e      	add	r1, sp, #56	; 0x38
 8022700:	a80a      	add	r0, sp, #40	; 0x28
 8022702:	f88d 802f 	strb.w	r8, [sp, #47]	; 0x2f
 8022706:	f7f9 fe89 	bl	801c41c <MobleTransportRenderHdr>
 802270a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 802270e:	4543      	cmp	r3, r8
 8022710:	d108      	bne.n	8022724 <MobleTransSarSendEx+0x29c>
 8022712:	f1bb 0f0c 	cmp.w	fp, #12
 8022716:	465a      	mov	r2, fp
 8022718:	dd09      	ble.n	802272e <MobleTransSarSendEx+0x2a6>
 802271a:	4b1f      	ldr	r3, [pc, #124]	; (8022798 <MobleTransSarSendEx+0x310>)
 802271c:	4a19      	ldr	r2, [pc, #100]	; (8022784 <MobleTransSarSendEx+0x2fc>)
 802271e:	f240 61d4 	movw	r1, #1748	; 0x6d4
 8022722:	e6d8      	b.n	80224d6 <MobleTransSarSendEx+0x4e>
 8022724:	9b07      	ldr	r3, [sp, #28]
 8022726:	2b00      	cmp	r3, #0
 8022728:	bf14      	ite	ne
 802272a:	2208      	movne	r2, #8
 802272c:	220c      	moveq	r2, #12
 802272e:	9b05      	ldr	r3, [sp, #20]
 8022730:	9209      	str	r2, [sp, #36]	; 0x24
 8022732:	18f9      	adds	r1, r7, r3
 8022734:	a80f      	add	r0, sp, #60	; 0x3c
 8022736:	f007 f94e 	bl	80299d6 <memcpy>
 802273a:	4a18      	ldr	r2, [pc, #96]	; (802279c <MobleTransSarSendEx+0x314>)
 802273c:	8be0      	ldrh	r0, [r4, #30]
 802273e:	f892 30b5 	ldrb.w	r3, [r2, #181]	; 0xb5
 8022742:	73e3      	strb	r3, [r4, #15]
 8022744:	f892 30b6 	ldrb.w	r3, [r2, #182]	; 0xb6
 8022748:	3301      	adds	r3, #1
 802274a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 802274e:	f7f7 ffc9 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8022752:	7720      	strb	r0, [r4, #28]
 8022754:	8c20      	ldrh	r0, [r4, #32]
 8022756:	f7f7 ffdf 	bl	801a718 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 802275a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802275c:	7760      	strb	r0, [r4, #29]
 802275e:	1d13      	adds	r3, r2, #4
 8022760:	4621      	mov	r1, r4
 8022762:	aa0e      	add	r2, sp, #56	; 0x38
 8022764:	4630      	mov	r0, r6
 8022766:	f7ff fe1b 	bl	80223a0 <MobleNetworkSendData>
 802276a:	9b05      	ldr	r3, [sp, #20]
 802276c:	4453      	add	r3, sl
 802276e:	f108 0801 	add.w	r8, r8, #1
 8022772:	9305      	str	r3, [sp, #20]
 8022774:	ebab 0b0a 	sub.w	fp, fp, sl
 8022778:	e762      	b.n	8022640 <MobleTransSarSendEx+0x1b8>
 802277a:	bf00      	nop
 802277c:	2000141c 	.word	0x2000141c
 8022780:	08033abb 	.word	0x08033abb
 8022784:	08031ef5 	.word	0x08031ef5
 8022788:	080337c8 	.word	0x080337c8
 802278c:	20002514 	.word	0x20002514
 8022790:	200016fc 	.word	0x200016fc
 8022794:	080228e1 	.word	0x080228e1
 8022798:	08033af5 	.word	0x08033af5
 802279c:	20000324 	.word	0x20000324

080227a0 <MobleTransSarProcessAck>:
 80227a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80227a4:	460d      	mov	r5, r1
 80227a6:	b090      	sub	sp, #64	; 0x40
 80227a8:	4617      	mov	r7, r2
 80227aa:	4698      	mov	r8, r3
 80227ac:	4606      	mov	r6, r0
 80227ae:	b930      	cbnz	r0, 80227be <MobleTransSarProcessAck+0x1e>
 80227b0:	4b45      	ldr	r3, [pc, #276]	; (80228c8 <MobleTransSarProcessAck+0x128>)
 80227b2:	4a46      	ldr	r2, [pc, #280]	; (80228cc <MobleTransSarProcessAck+0x12c>)
 80227b4:	4846      	ldr	r0, [pc, #280]	; (80228d0 <MobleTransSarProcessAck+0x130>)
 80227b6:	f240 51d7 	movw	r1, #1495	; 0x5d7
 80227ba:	f006 f985 	bl	8028ac8 <__assert_func>
 80227be:	4c45      	ldr	r4, [pc, #276]	; (80228d4 <MobleTransSarProcessAck+0x134>)
 80227c0:	2228      	movs	r2, #40	; 0x28
 80227c2:	2100      	movs	r1, #0
 80227c4:	a806      	add	r0, sp, #24
 80227c6:	f007 f875 	bl	80298b4 <memset>
 80227ca:	f894 32e8 	ldrb.w	r3, [r4, #744]	; 0x2e8
 80227ce:	b153      	cbz	r3, 80227e6 <MobleTransSarProcessAck+0x46>
 80227d0:	f8b4 22f6 	ldrh.w	r2, [r4, #758]	; 0x2f6
 80227d4:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 80227d8:	429a      	cmp	r2, r3
 80227da:	d104      	bne.n	80227e6 <MobleTransSarProcessAck+0x46>
 80227dc:	f8b4 22f4 	ldrh.w	r2, [r4, #756]	; 0x2f4
 80227e0:	8aeb      	ldrh	r3, [r5, #22]
 80227e2:	429a      	cmp	r2, r3
 80227e4:	d02b      	beq.n	802283e <MobleTransSarProcessAck+0x9e>
 80227e6:	f894 3314 	ldrb.w	r3, [r4, #788]	; 0x314
 80227ea:	b323      	cbz	r3, 8022836 <MobleTransSarProcessAck+0x96>
 80227ec:	f8b4 2322 	ldrh.w	r2, [r4, #802]	; 0x322
 80227f0:	f8b7 3003 	ldrh.w	r3, [r7, #3]
 80227f4:	429a      	cmp	r2, r3
 80227f6:	d11e      	bne.n	8022836 <MobleTransSarProcessAck+0x96>
 80227f8:	f8b4 2320 	ldrh.w	r2, [r4, #800]	; 0x320
 80227fc:	8aeb      	ldrh	r3, [r5, #22]
 80227fe:	429a      	cmp	r2, r3
 8022800:	d119      	bne.n	8022836 <MobleTransSarProcessAck+0x96>
 8022802:	2501      	movs	r5, #1
 8022804:	222c      	movs	r2, #44	; 0x2c
 8022806:	4355      	muls	r5, r2
 8022808:	f8d8 0000 	ldr.w	r0, [r8]
 802280c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80228dc <MobleTransSarProcessAck+0x13c>
 8022810:	442c      	add	r4, r5
 8022812:	f7f4 ffee 	bl	80177f2 <htobe32>
 8022816:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 802281a:	4303      	orrs	r3, r0
 802281c:	f105 0028 	add.w	r0, r5, #40	; 0x28
 8022820:	f8c4 32fc 	str.w	r3, [r4, #764]	; 0x2fc
 8022824:	4440      	add	r0, r8
 8022826:	b963      	cbnz	r3, 8022842 <MobleTransSarProcessAck+0xa2>
 8022828:	f884 32e8 	strb.w	r3, [r4, #744]	; 0x2e8
 802282c:	f7f5 fa42 	bl	8017cb4 <MobleTransEraseTimer>
 8022830:	68b3      	ldr	r3, [r6, #8]
 8022832:	3b01      	subs	r3, #1
 8022834:	60b3      	str	r3, [r6, #8]
 8022836:	2000      	movs	r0, #0
 8022838:	b010      	add	sp, #64	; 0x40
 802283a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802283e:	2500      	movs	r5, #0
 8022840:	e7e0      	b.n	8022804 <MobleTransSarProcessAck+0x64>
 8022842:	f8b4 12f8 	ldrh.w	r1, [r4, #760]	; 0x2f8
 8022846:	1c4f      	adds	r7, r1, #1
 8022848:	2101      	movs	r1, #1
 802284a:	40b9      	lsls	r1, r7
 802284c:	3901      	subs	r1, #1
 802284e:	428b      	cmp	r3, r1
 8022850:	d101      	bne.n	8022856 <MobleTransSarProcessAck+0xb6>
 8022852:	2300      	movs	r3, #0
 8022854:	e7e8      	b.n	8022828 <MobleTransSarProcessAck+0x88>
 8022856:	3508      	adds	r5, #8
 8022858:	9005      	str	r0, [sp, #20]
 802285a:	f7f5 fa2b 	bl	8017cb4 <MobleTransEraseTimer>
 802285e:	eb08 0205 	add.w	r2, r8, r5
 8022862:	491d      	ldr	r1, [pc, #116]	; (80228d8 <MobleTransSarProcessAck+0x138>)
 8022864:	9805      	ldr	r0, [sp, #20]
 8022866:	f7f5 f96b 	bl	8017b40 <MoblePalTimerCreate>
 802286a:	f8d4 0308 	ldr.w	r0, [r4, #776]	; 0x308
 802286e:	f241 3188 	movw	r1, #5000	; 0x1388
 8022872:	f7f5 f99e 	bl	8017bb2 <MoblePalTimerStart>
 8022876:	f8b4 32ea 	ldrh.w	r3, [r4, #746]	; 0x2ea
 802287a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 802287e:	f8b4 32ee 	ldrh.w	r3, [r4, #750]	; 0x2ee
 8022882:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 8022886:	f8b4 32f0 	ldrh.w	r3, [r4, #752]	; 0x2f0
 802288a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 802288e:	f8b4 32f4 	ldrh.w	r3, [r4, #756]	; 0x2f4
 8022892:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8022896:	f8b4 32f2 	ldrh.w	r3, [r4, #754]	; 0x2f2
 802289a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 802289e:	2300      	movs	r3, #0
 80228a0:	9303      	str	r3, [sp, #12]
 80228a2:	f8b4 32f6 	ldrh.w	r3, [r4, #758]	; 0x2f6
 80228a6:	9302      	str	r3, [sp, #8]
 80228a8:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80228ac:	9301      	str	r3, [sp, #4]
 80228ae:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
 80228b2:	9300      	str	r3, [sp, #0]
 80228b4:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
 80228b8:	f894 22ec 	ldrb.w	r2, [r4, #748]	; 0x2ec
 80228bc:	a906      	add	r1, sp, #24
 80228be:	4630      	mov	r0, r6
 80228c0:	f7ff fde2 	bl	8022488 <MobleTransSarSendEx>
 80228c4:	e7b7      	b.n	8022836 <MobleTransSarProcessAck+0x96>
 80228c6:	bf00      	nop
 80228c8:	08033338 	.word	0x08033338
 80228cc:	08031f09 	.word	0x08031f09
 80228d0:	080337c8 	.word	0x080337c8
 80228d4:	2000141c 	.word	0x2000141c
 80228d8:	080228e1 	.word	0x080228e1
 80228dc:	200016fc 	.word	0x200016fc

080228e0 <MobleTransSarOnRetransmit>:
 80228e0:	b510      	push	{r4, lr}
 80228e2:	460c      	mov	r4, r1
 80228e4:	b08e      	sub	sp, #56	; 0x38
 80228e6:	2228      	movs	r2, #40	; 0x28
 80228e8:	2100      	movs	r1, #0
 80228ea:	a804      	add	r0, sp, #16
 80228ec:	f006 ffe2 	bl	80298b4 <memset>
 80228f0:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80228f4:	2b03      	cmp	r3, #3
 80228f6:	d90b      	bls.n	8022910 <MobleTransSarOnRetransmit+0x30>
 80228f8:	f104 0020 	add.w	r0, r4, #32
 80228fc:	f7f5 f9da 	bl	8017cb4 <MobleTransEraseTimer>
 8022900:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8022902:	6893      	ldr	r3, [r2, #8]
 8022904:	3b01      	subs	r3, #1
 8022906:	6093      	str	r3, [r2, #8]
 8022908:	2300      	movs	r3, #0
 802290a:	7023      	strb	r3, [r4, #0]
 802290c:	b00e      	add	sp, #56	; 0x38
 802290e:	bd10      	pop	{r4, pc}
 8022910:	3301      	adds	r3, #1
 8022912:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8022916:	8863      	ldrh	r3, [r4, #2]
 8022918:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 802291c:	88e3      	ldrh	r3, [r4, #6]
 802291e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8022922:	8923      	ldrh	r3, [r4, #8]
 8022924:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8022928:	89a3      	ldrh	r3, [r4, #12]
 802292a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 802292e:	8963      	ldrh	r3, [r4, #10]
 8022930:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8022934:	2300      	movs	r3, #0
 8022936:	9303      	str	r3, [sp, #12]
 8022938:	89e3      	ldrh	r3, [r4, #14]
 802293a:	9302      	str	r3, [sp, #8]
 802293c:	6963      	ldr	r3, [r4, #20]
 802293e:	9301      	str	r3, [sp, #4]
 8022940:	69e3      	ldr	r3, [r4, #28]
 8022942:	9300      	str	r3, [sp, #0]
 8022944:	7922      	ldrb	r2, [r4, #4]
 8022946:	69a3      	ldr	r3, [r4, #24]
 8022948:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 802294a:	a904      	add	r1, sp, #16
 802294c:	f7ff fd9c 	bl	8022488 <MobleTransSarSendEx>
 8022950:	e7dc      	b.n	802290c <MobleTransSarOnRetransmit+0x2c>
	...

08022954 <MobleTransSarSend>:
 8022954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022956:	b930      	cbnz	r0, 8022966 <MobleTransSarSend+0x12>
 8022958:	4b09      	ldr	r3, [pc, #36]	; (8022980 <MobleTransSarSend+0x2c>)
 802295a:	4a0a      	ldr	r2, [pc, #40]	; (8022984 <MobleTransSarSend+0x30>)
 802295c:	480a      	ldr	r0, [pc, #40]	; (8022988 <MobleTransSarSend+0x34>)
 802295e:	f240 7143 	movw	r1, #1859	; 0x743
 8022962:	f006 f8b1 	bl	8028ac8 <__assert_func>
 8022966:	2400      	movs	r4, #0
 8022968:	f04f 0c01 	mov.w	ip, #1
 802296c:	e9cd 4c02 	strd	r4, ip, [sp, #8]
 8022970:	9401      	str	r4, [sp, #4]
 8022972:	9c06      	ldr	r4, [sp, #24]
 8022974:	9400      	str	r4, [sp, #0]
 8022976:	f7ff fd87 	bl	8022488 <MobleTransSarSendEx>
 802297a:	b004      	add	sp, #16
 802297c:	bd10      	pop	{r4, pc}
 802297e:	bf00      	nop
 8022980:	08033338 	.word	0x08033338
 8022984:	08031f21 	.word	0x08031f21
 8022988:	080337c8 	.word	0x080337c8

0802298c <MobleTransportSendData>:
 802298c:	b570      	push	{r4, r5, r6, lr}
 802298e:	9d04      	ldr	r5, [sp, #16]
 8022990:	b930      	cbnz	r0, 80229a0 <MobleTransportSendData+0x14>
 8022992:	4b09      	ldr	r3, [pc, #36]	; (80229b8 <MobleTransportSendData+0x2c>)
 8022994:	4a09      	ldr	r2, [pc, #36]	; (80229bc <MobleTransportSendData+0x30>)
 8022996:	f44f 711a 	mov.w	r1, #616	; 0x268
 802299a:	4809      	ldr	r0, [pc, #36]	; (80229c0 <MobleTransportSendData+0x34>)
 802299c:	f006 f894 	bl	8028ac8 <__assert_func>
 80229a0:	b923      	cbnz	r3, 80229ac <MobleTransportSendData+0x20>
 80229a2:	4b08      	ldr	r3, [pc, #32]	; (80229c4 <MobleTransportSendData+0x38>)
 80229a4:	4a05      	ldr	r2, [pc, #20]	; (80229bc <MobleTransportSendData+0x30>)
 80229a6:	f240 2169 	movw	r1, #617	; 0x269
 80229aa:	e7f6      	b.n	802299a <MobleTransportSendData+0xe>
 80229ac:	9504      	str	r5, [sp, #16]
 80229ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80229b2:	f7ff bfcf 	b.w	8022954 <MobleTransSarSend>
 80229b6:	bf00      	nop
 80229b8:	08033338 	.word	0x08033338
 80229bc:	08031f33 	.word	0x08031f33
 80229c0:	08033678 	.word	0x08033678
 80229c4:	08033b3d 	.word	0x08033b3d

080229c8 <MobleApplicationSendPacket>:
 80229c8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80229cc:	4607      	mov	r7, r0
 80229ce:	f103 0020 	add.w	r0, r3, #32
 80229d2:	460e      	mov	r6, r1
 80229d4:	461c      	mov	r4, r3
 80229d6:	4690      	mov	r8, r2
 80229d8:	f7f8 fa62 	bl	801aea0 <MobleMemAlloc>
 80229dc:	8ab3      	ldrh	r3, [r6, #20]
 80229de:	f896 901d 	ldrb.w	r9, [r6, #29]
 80229e2:	f896 a01c 	ldrb.w	sl, [r6, #28]
 80229e6:	8103      	strh	r3, [r0, #8]
 80229e8:	8af3      	ldrh	r3, [r6, #22]
 80229ea:	f880 900c 	strb.w	r9, [r0, #12]
 80229ee:	8143      	strh	r3, [r0, #10]
 80229f0:	8c33      	ldrh	r3, [r6, #32]
 80229f2:	f880 a010 	strb.w	sl, [r0, #16]
 80229f6:	81c3      	strh	r3, [r0, #14]
 80229f8:	8bf3      	ldrh	r3, [r6, #30]
 80229fa:	8243      	strh	r3, [r0, #18]
 80229fc:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
 8022a00:	7503      	strb	r3, [r0, #20]
 8022a02:	8b73      	ldrh	r3, [r6, #26]
 8022a04:	43db      	mvns	r3, r3
 8022a06:	f003 0301 	and.w	r3, r3, #1
 8022a0a:	7543      	strb	r3, [r0, #21]
 8022a0c:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
 8022a10:	7583      	strb	r3, [r0, #22]
 8022a12:	4605      	mov	r5, r0
 8022a14:	4622      	mov	r2, r4
 8022a16:	4641      	mov	r1, r8
 8022a18:	3020      	adds	r0, #32
 8022a1a:	f006 ff31 	bl	8029880 <memmove>
 8022a1e:	61ec      	str	r4, [r5, #28]
 8022a20:	b92f      	cbnz	r7, 8022a2e <MobleApplicationSendPacket+0x66>
 8022a22:	4b2b      	ldr	r3, [pc, #172]	; (8022ad0 <MobleApplicationSendPacket+0x108>)
 8022a24:	4a2b      	ldr	r2, [pc, #172]	; (8022ad4 <MobleApplicationSendPacket+0x10c>)
 8022a26:	482c      	ldr	r0, [pc, #176]	; (8022ad8 <MobleApplicationSendPacket+0x110>)
 8022a28:	21a6      	movs	r1, #166	; 0xa6
 8022a2a:	f006 f84d 	bl	8028ac8 <__assert_func>
 8022a2e:	1e63      	subs	r3, r4, #1
 8022a30:	2b9b      	cmp	r3, #155	; 0x9b
 8022a32:	d84b      	bhi.n	8022acc <MobleApplicationSendPacket+0x104>
 8022a34:	4b29      	ldr	r3, [pc, #164]	; (8022adc <MobleApplicationSendPacket+0x114>)
 8022a36:	449a      	add	sl, r3
 8022a38:	4649      	mov	r1, r9
 8022a3a:	f89a a0c0 	ldrb.w	sl, [sl, #192]	; 0xc0
 8022a3e:	f1aa 0302 	sub.w	r3, sl, #2
 8022a42:	4258      	negs	r0, r3
 8022a44:	4158      	adcs	r0, r3
 8022a46:	f7f6 fcd7 	bl	80193f8 <MoblePalCryptoGetApplicationSecurityKeys>
 8022a4a:	f1ba 0f02 	cmp.w	sl, #2
 8022a4e:	bf14      	ite	ne
 8022a50:	f890 2024 	ldrbne.w	r2, [r0, #36]	; 0x24
 8022a54:	f890 2025 	ldrbeq.w	r2, [r0, #37]	; 0x25
 8022a58:	9400      	str	r4, [sp, #0]
 8022a5a:	4643      	mov	r3, r8
 8022a5c:	4631      	mov	r1, r6
 8022a5e:	4638      	mov	r0, r7
 8022a60:	f7ff ff94 	bl	802298c <MobleTransportSendData>
 8022a64:	2801      	cmp	r0, #1
 8022a66:	4604      	mov	r4, r0
 8022a68:	d80f      	bhi.n	8022a8a <MobleApplicationSendPacket+0xc2>
 8022a6a:	f9b6 3016 	ldrsh.w	r3, [r6, #22]
 8022a6e:	8af1      	ldrh	r1, [r6, #22]
 8022a70:	2b00      	cmp	r3, #0
 8022a72:	dd25      	ble.n	8022ac0 <MobleApplicationSendPacket+0xf8>
 8022a74:	683b      	ldr	r3, [r7, #0]
 8022a76:	f8b3 c002 	ldrh.w	ip, [r3, #2]
 8022a7a:	7f18      	ldrb	r0, [r3, #28]
 8022a7c:	2300      	movs	r3, #0
 8022a7e:	b2da      	uxtb	r2, r3
 8022a80:	4282      	cmp	r2, r0
 8022a82:	d306      	bcc.n	8022a92 <MobleApplicationSendPacket+0xca>
 8022a84:	4628      	mov	r0, r5
 8022a86:	f7f8 fa95 	bl	801afb4 <MobleMemFree>
 8022a8a:	4620      	mov	r0, r4
 8022a8c:	b002      	add	sp, #8
 8022a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a92:	eb0c 0203 	add.w	r2, ip, r3
 8022a96:	b292      	uxth	r2, r2
 8022a98:	4291      	cmp	r1, r2
 8022a9a:	d10f      	bne.n	8022abc <MobleApplicationSendPacket+0xf4>
 8022a9c:	8ab3      	ldrh	r3, [r6, #20]
 8022a9e:	428b      	cmp	r3, r1
 8022aa0:	d0f0      	beq.n	8022a84 <MobleApplicationSendPacket+0xbc>
 8022aa2:	4629      	mov	r1, r5
 8022aa4:	4638      	mov	r0, r7
 8022aa6:	f7f9 f987 	bl	801bdb8 <MobleApplicationPassPacketsToSIGModels>
 8022aaa:	2801      	cmp	r0, #1
 8022aac:	4604      	mov	r4, r0
 8022aae:	d9e9      	bls.n	8022a84 <MobleApplicationSendPacket+0xbc>
 8022ab0:	4629      	mov	r1, r5
 8022ab2:	4638      	mov	r0, r7
 8022ab4:	f7f9 fa8c 	bl	801bfd0 <MobleApplicationPassPacketsToVENDORModelsNew>
 8022ab8:	4604      	mov	r4, r0
 8022aba:	e7e3      	b.n	8022a84 <MobleApplicationSendPacket+0xbc>
 8022abc:	3301      	adds	r3, #1
 8022abe:	e7de      	b.n	8022a7e <MobleApplicationSendPacket+0xb6>
 8022ac0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8022ac4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8022ac8:	d1dc      	bne.n	8022a84 <MobleApplicationSendPacket+0xbc>
 8022aca:	e7ea      	b.n	8022aa2 <MobleApplicationSendPacket+0xda>
 8022acc:	2403      	movs	r4, #3
 8022ace:	e7dc      	b.n	8022a8a <MobleApplicationSendPacket+0xc2>
 8022ad0:	08033338 	.word	0x08033338
 8022ad4:	08031f4a 	.word	0x08031f4a
 8022ad8:	08033628 	.word	0x08033628
 8022adc:	20000324 	.word	0x20000324

08022ae0 <MobleModelSendPacket>:
 8022ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8022ae2:	b08b      	sub	sp, #44	; 0x2c
 8022ae4:	4606      	mov	r6, r0
 8022ae6:	460f      	mov	r7, r1
 8022ae8:	4615      	mov	r5, r2
 8022aea:	461c      	mov	r4, r3
 8022aec:	2228      	movs	r2, #40	; 0x28
 8022aee:	2100      	movs	r1, #0
 8022af0:	4668      	mov	r0, sp
 8022af2:	f006 fedf 	bl	80298b4 <memset>
 8022af6:	b934      	cbnz	r4, 8022b06 <MobleModelSendPacket+0x26>
 8022af8:	4b25      	ldr	r3, [pc, #148]	; (8022b90 <MobleModelSendPacket+0xb0>)
 8022afa:	4a26      	ldr	r2, [pc, #152]	; (8022b94 <MobleModelSendPacket+0xb4>)
 8022afc:	4826      	ldr	r0, [pc, #152]	; (8022b98 <MobleModelSendPacket+0xb8>)
 8022afe:	f44f 718b 	mov.w	r1, #278	; 0x116
 8022b02:	f005 ffe1 	bl	8028ac8 <__assert_func>
 8022b06:	4b25      	ldr	r3, [pc, #148]	; (8022b9c <MobleModelSendPacket+0xbc>)
 8022b08:	f8d4 c0a3 	ldr.w	ip, [r4, #163]	; 0xa3
 8022b0c:	f8b3 3950 	ldrh.w	r3, [r3, #2384]	; 0x950
 8022b10:	459c      	cmp	ip, r3
 8022b12:	d83a      	bhi.n	8022b8a <MobleModelSendPacket+0xaa>
 8022b14:	6822      	ldr	r2, [r4, #0]
 8022b16:	f3c2 4307 	ubfx	r3, r2, #16, #8
 8022b1a:	f003 00c0 	and.w	r0, r3, #192	; 0xc0
 8022b1e:	28c0      	cmp	r0, #192	; 0xc0
 8022b20:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8022b24:	b2d2      	uxtb	r2, r2
 8022b26:	d127      	bne.n	8022b78 <MobleModelSendPacket+0x98>
 8022b28:	7163      	strb	r3, [r4, #5]
 8022b2a:	71a1      	strb	r1, [r4, #6]
 8022b2c:	71e2      	strb	r2, [r4, #7]
 8022b2e:	2303      	movs	r3, #3
 8022b30:	6828      	ldr	r0, [r5, #0]
 8022b32:	6869      	ldr	r1, [r5, #4]
 8022b34:	f8ad 701a 	strh.w	r7, [sp, #26]
 8022b38:	aa03      	add	r2, sp, #12
 8022b3a:	c203      	stmia	r2!, {r0, r1}
 8022b3c:	896a      	ldrh	r2, [r5, #10]
 8022b3e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8022b42:	892a      	ldrh	r2, [r5, #8]
 8022b44:	f8ad 2016 	strh.w	r2, [sp, #22]
 8022b48:	7daa      	ldrb	r2, [r5, #22]
 8022b4a:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 8022b4e:	89ea      	ldrh	r2, [r5, #14]
 8022b50:	f8ad 2020 	strh.w	r2, [sp, #32]
 8022b54:	8a6a      	ldrh	r2, [r5, #18]
 8022b56:	f8ad 201e 	strh.w	r2, [sp, #30]
 8022b5a:	7c2a      	ldrb	r2, [r5, #16]
 8022b5c:	f88d 201c 	strb.w	r2, [sp, #28]
 8022b60:	7b2a      	ldrb	r2, [r5, #12]
 8022b62:	f88d 201d 	strb.w	r2, [sp, #29]
 8022b66:	1ae2      	subs	r2, r4, r3
 8022b68:	3208      	adds	r2, #8
 8022b6a:	4463      	add	r3, ip
 8022b6c:	4669      	mov	r1, sp
 8022b6e:	4630      	mov	r0, r6
 8022b70:	f7ff ff2a 	bl	80229c8 <MobleApplicationSendPacket>
 8022b74:	b00b      	add	sp, #44	; 0x2c
 8022b76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022b78:	060b      	lsls	r3, r1, #24
 8022b7a:	bf43      	ittte	mi
 8022b7c:	71a1      	strbmi	r1, [r4, #6]
 8022b7e:	71e2      	strbmi	r2, [r4, #7]
 8022b80:	2302      	movmi	r3, #2
 8022b82:	71e2      	strbpl	r2, [r4, #7]
 8022b84:	bf58      	it	pl
 8022b86:	2301      	movpl	r3, #1
 8022b88:	e7d2      	b.n	8022b30 <MobleModelSendPacket+0x50>
 8022b8a:	2001      	movs	r0, #1
 8022b8c:	e7f2      	b.n	8022b74 <MobleModelSendPacket+0x94>
 8022b8e:	bf00      	nop
 8022b90:	08033b48 	.word	0x08033b48
 8022b94:	08031f65 	.word	0x08031f65
 8022b98:	08033a1e 	.word	0x08033a1e
 8022b9c:	2000141c 	.word	0x2000141c

08022ba0 <BnrgmHealthModel_ProcessPeriodSet>:
 8022ba0:	b430      	push	{r4, r5}
 8022ba2:	460a      	mov	r2, r1
 8022ba4:	7819      	ldrb	r1, [r3, #0]
 8022ba6:	9c03      	ldr	r4, [sp, #12]
 8022ba8:	290f      	cmp	r1, #15
 8022baa:	d819      	bhi.n	8022be0 <BnrgmHealthModel_ProcessPeriodSet+0x40>
 8022bac:	6803      	ldr	r3, [r0, #0]
 8022bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022bb0:	2537      	movs	r5, #55	; 0x37
 8022bb2:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
 8022bb6:	2300      	movs	r3, #0
 8022bb8:	7025      	strb	r5, [r4, #0]
 8022bba:	7221      	strb	r1, [r4, #8]
 8022bbc:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8022bc0:	2101      	movs	r1, #1
 8022bc2:	70a3      	strb	r3, [r4, #2]
 8022bc4:	70e3      	strb	r3, [r4, #3]
 8022bc6:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8022bca:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022bce:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8022bd2:	7065      	strb	r5, [r4, #1]
 8022bd4:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8022bd8:	4623      	mov	r3, r4
 8022bda:	bc30      	pop	{r4, r5}
 8022bdc:	f7ff bf80 	b.w	8022ae0 <MobleModelSendPacket>
 8022be0:	2003      	movs	r0, #3
 8022be2:	bc30      	pop	{r4, r5}
 8022be4:	4770      	bx	lr

08022be6 <BnrgmHealthModel_SendFaultStatus>:
 8022be6:	b4f0      	push	{r4, r5, r6, r7}
 8022be8:	9d04      	ldr	r5, [sp, #16]
 8022bea:	f8a5 3009 	strh.w	r3, [r5, #9]
 8022bee:	6803      	ldr	r3, [r0, #0]
 8022bf0:	722a      	strb	r2, [r5, #8]
 8022bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022bf4:	2400      	movs	r4, #0
 8022bf6:	2605      	movs	r6, #5
 8022bf8:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8022bfc:	702e      	strb	r6, [r5, #0]
 8022bfe:	706c      	strb	r4, [r5, #1]
 8022c00:	70ac      	strb	r4, [r5, #2]
 8022c02:	70ec      	strb	r4, [r5, #3]
 8022c04:	335c      	adds	r3, #92	; 0x5c
 8022c06:	f812 6b01 	ldrb.w	r6, [r2], #1
 8022c0a:	b11e      	cbz	r6, 8022c14 <BnrgmHealthModel_SendFaultStatus+0x2e>
 8022c0c:	192f      	adds	r7, r5, r4
 8022c0e:	3401      	adds	r4, #1
 8022c10:	72fe      	strb	r6, [r7, #11]
 8022c12:	b2e4      	uxtb	r4, r4
 8022c14:	429a      	cmp	r2, r3
 8022c16:	d1f6      	bne.n	8022c06 <BnrgmHealthModel_SendFaultStatus+0x20>
 8022c18:	3403      	adds	r4, #3
 8022c1a:	f8c5 40a3 	str.w	r4, [r5, #163]	; 0xa3
 8022c1e:	462b      	mov	r3, r5
 8022c20:	460a      	mov	r2, r1
 8022c22:	bcf0      	pop	{r4, r5, r6, r7}
 8022c24:	2101      	movs	r1, #1
 8022c26:	f7ff bf5b 	b.w	8022ae0 <MobleModelSendPacket>
	...

08022c2c <BnrgmHealthModel_ProcessFaultTest>:
 8022c2c:	b470      	push	{r4, r5, r6}
 8022c2e:	4a0d      	ldr	r2, [pc, #52]	; (8022c64 <BnrgmHealthModel_ProcessFaultTest+0x38>)
 8022c30:	781c      	ldrb	r4, [r3, #0]
 8022c32:	f892 2f20 	ldrb.w	r2, [r2, #3872]	; 0xf20
 8022c36:	9e04      	ldr	r6, [sp, #16]
 8022c38:	42a2      	cmp	r2, r4
 8022c3a:	4605      	mov	r5, r0
 8022c3c:	d002      	beq.n	8022c44 <BnrgmHealthModel_ProcessFaultTest+0x18>
 8022c3e:	2003      	movs	r0, #3
 8022c40:	bc70      	pop	{r4, r5, r6}
 8022c42:	4770      	bx	lr
 8022c44:	f8d3 4001 	ldr.w	r4, [r3, #1]
 8022c48:	4b07      	ldr	r3, [pc, #28]	; (8022c68 <BnrgmHealthModel_ProcessFaultTest+0x3c>)
 8022c4a:	885b      	ldrh	r3, [r3, #2]
 8022c4c:	b2a4      	uxth	r4, r4
 8022c4e:	42a3      	cmp	r3, r4
 8022c50:	d1f5      	bne.n	8022c3e <BnrgmHealthModel_ProcessFaultTest+0x12>
 8022c52:	682c      	ldr	r4, [r5, #0]
 8022c54:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8022c56:	f884 204a 	strb.w	r2, [r4, #74]	; 0x4a
 8022c5a:	9603      	str	r6, [sp, #12]
 8022c5c:	bc70      	pop	{r4, r5, r6}
 8022c5e:	f7ff bfc2 	b.w	8022be6 <BnrgmHealthModel_SendFaultStatus>
 8022c62:	bf00      	nop
 8022c64:	20000324 	.word	0x20000324
 8022c68:	20000008 	.word	0x20000008

08022c6c <BnrgmHealthModel_ProcessFaultGet>:
 8022c6c:	b410      	push	{r4}
 8022c6e:	681a      	ldr	r2, [r3, #0]
 8022c70:	4b07      	ldr	r3, [pc, #28]	; (8022c90 <BnrgmHealthModel_ProcessFaultGet+0x24>)
 8022c72:	9c02      	ldr	r4, [sp, #8]
 8022c74:	885b      	ldrh	r3, [r3, #2]
 8022c76:	b292      	uxth	r2, r2
 8022c78:	4293      	cmp	r3, r2
 8022c7a:	d105      	bne.n	8022c88 <BnrgmHealthModel_ProcessFaultGet+0x1c>
 8022c7c:	9401      	str	r4, [sp, #4]
 8022c7e:	2200      	movs	r2, #0
 8022c80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c84:	f7ff bfaf 	b.w	8022be6 <BnrgmHealthModel_SendFaultStatus>
 8022c88:	2003      	movs	r0, #3
 8022c8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022c8e:	4770      	bx	lr
 8022c90:	20000008 	.word	0x20000008

08022c94 <BnrgmHealthModel_ProcessFaultClear>:
 8022c94:	b470      	push	{r4, r5, r6}
 8022c96:	681c      	ldr	r4, [r3, #0]
 8022c98:	4b0c      	ldr	r3, [pc, #48]	; (8022ccc <BnrgmHealthModel_ProcessFaultClear+0x38>)
 8022c9a:	9e04      	ldr	r6, [sp, #16]
 8022c9c:	885b      	ldrh	r3, [r3, #2]
 8022c9e:	b2a4      	uxth	r4, r4
 8022ca0:	42a3      	cmp	r3, r4
 8022ca2:	d110      	bne.n	8022cc6 <BnrgmHealthModel_ProcessFaultClear+0x32>
 8022ca4:	6804      	ldr	r4, [r0, #0]
 8022ca6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8022ca8:	2400      	movs	r4, #0
 8022caa:	656c      	str	r4, [r5, #84]	; 0x54
 8022cac:	65ac      	str	r4, [r5, #88]	; 0x58
 8022cae:	6805      	ldr	r5, [r0, #0]
 8022cb0:	6a6d      	ldr	r5, [r5, #36]	; 0x24
 8022cb2:	64ec      	str	r4, [r5, #76]	; 0x4c
 8022cb4:	652c      	str	r4, [r5, #80]	; 0x50
 8022cb6:	6802      	ldr	r2, [r0, #0]
 8022cb8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8022cba:	f892 204a 	ldrb.w	r2, [r2, #74]	; 0x4a
 8022cbe:	9603      	str	r6, [sp, #12]
 8022cc0:	bc70      	pop	{r4, r5, r6}
 8022cc2:	f7ff bf90 	b.w	8022be6 <BnrgmHealthModel_SendFaultStatus>
 8022cc6:	2003      	movs	r0, #3
 8022cc8:	bc70      	pop	{r4, r5, r6}
 8022cca:	4770      	bx	lr
 8022ccc:	20000008 	.word	0x20000008

08022cd0 <BnrgmHealthModel_ProcessAttentionSet>:
 8022cd0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8022cd2:	9101      	str	r1, [sp, #4]
 8022cd4:	7819      	ldrb	r1, [r3, #0]
 8022cd6:	6803      	ldr	r3, [r0, #0]
 8022cd8:	9c07      	ldr	r4, [sp, #28]
 8022cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022cdc:	4605      	mov	r5, r0
 8022cde:	f883 106e 	strb.w	r1, [r3, #110]	; 0x6e
 8022ce2:	f7f4 ff69 	bl	8017bb8 <BnrgmHealthModelSetAttentionTimer>
 8022ce6:	682b      	ldr	r3, [r5, #0]
 8022ce8:	9a01      	ldr	r2, [sp, #4]
 8022cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8022cec:	2007      	movs	r0, #7
 8022cee:	f893 106e 	ldrb.w	r1, [r3, #110]	; 0x6e
 8022cf2:	7020      	strb	r0, [r4, #0]
 8022cf4:	2300      	movs	r3, #0
 8022cf6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8022cfa:	7060      	strb	r0, [r4, #1]
 8022cfc:	70a3      	strb	r3, [r4, #2]
 8022cfe:	70e3      	strb	r3, [r4, #3]
 8022d00:	7221      	strb	r1, [r4, #8]
 8022d02:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8022d06:	2101      	movs	r1, #1
 8022d08:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8022d0c:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8022d10:	4628      	mov	r0, r5
 8022d12:	4623      	mov	r3, r4
 8022d14:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8022d18:	b003      	add	sp, #12
 8022d1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022d1e:	f7ff bedf 	b.w	8022ae0 <MobleModelSendPacket>
	...

08022d24 <MobleConfigModel_ProcessVendorModelSubscriptionGet>:
 8022d24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d28:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022d2a:	4688      	mov	r8, r1
 8022d2c:	4605      	mov	r5, r0
 8022d2e:	b930      	cbnz	r0, 8022d3e <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x1a>
 8022d30:	4b4a      	ldr	r3, [pc, #296]	; (8022e5c <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x138>)
 8022d32:	4a4b      	ldr	r2, [pc, #300]	; (8022e60 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x13c>)
 8022d34:	f641 117a 	movw	r1, #6522	; 0x197a
 8022d38:	484a      	ldr	r0, [pc, #296]	; (8022e64 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x140>)
 8022d3a:	f005 fec5 	bl	8028ac8 <__assert_func>
 8022d3e:	6802      	ldr	r2, [r0, #0]
 8022d40:	b922      	cbnz	r2, 8022d4c <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x28>
 8022d42:	4b49      	ldr	r3, [pc, #292]	; (8022e68 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x144>)
 8022d44:	4a46      	ldr	r2, [pc, #280]	; (8022e60 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x13c>)
 8022d46:	f641 117b 	movw	r1, #6523	; 0x197b
 8022d4a:	e7f5      	b.n	8022d38 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x14>
 8022d4c:	8851      	ldrh	r1, [r2, #2]
 8022d4e:	f8d3 9000 	ldr.w	r9, [r3]
 8022d52:	7f12      	ldrb	r2, [r2, #28]
 8022d54:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8022d58:	fa1f fa89 	uxth.w	sl, r9
 8022d5c:	1e48      	subs	r0, r1, #1
 8022d5e:	4402      	add	r2, r0
 8022d60:	458a      	cmp	sl, r1
 8022d62:	b292      	uxth	r2, r2
 8022d64:	d001      	beq.n	8022d6a <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x46>
 8022d66:	4592      	cmp	sl, r2
 8022d68:	d871      	bhi.n	8022e4e <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x12a>
 8022d6a:	eba9 0101 	sub.w	r1, r9, r1
 8022d6e:	b2c9      	uxtb	r1, r1
 8022d70:	4638      	mov	r0, r7
 8022d72:	f7f0 fbb3 	bl	80134dc <ApplicationChkVendorModelActive>
 8022d76:	2800      	cmp	r0, #0
 8022d78:	bf0c      	ite	eq
 8022d7a:	2302      	moveq	r3, #2
 8022d7c:	2300      	movne	r3, #0
 8022d7e:	682a      	ldr	r2, [r5, #0]
 8022d80:	f892 b01c 	ldrb.w	fp, [r2, #28]
 8022d84:	7223      	strb	r3, [r4, #8]
 8022d86:	222c      	movs	r2, #44	; 0x2c
 8022d88:	2600      	movs	r6, #0
 8022d8a:	7022      	strb	r2, [r4, #0]
 8022d8c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8022d90:	7062      	strb	r2, [r4, #1]
 8022d92:	fa1f f189 	uxth.w	r1, r9
 8022d96:	2202      	movs	r2, #2
 8022d98:	70a6      	strb	r6, [r4, #2]
 8022d9a:	70e6      	strb	r6, [r4, #3]
 8022d9c:	f104 0009 	add.w	r0, r4, #9
 8022da0:	f7f8 ffa0 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8022da4:	2204      	movs	r2, #4
 8022da6:	4639      	mov	r1, r7
 8022da8:	f104 000b 	add.w	r0, r4, #11
 8022dac:	f7f8 ff9a 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8022db0:	b2f3      	uxtb	r3, r6
 8022db2:	459b      	cmp	fp, r3
 8022db4:	d950      	bls.n	8022e58 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x134>
 8022db6:	682b      	ldr	r3, [r5, #0]
 8022db8:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8022dbc:	46b1      	mov	r9, r6
 8022dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8022dc0:	8813      	ldrh	r3, [r2, #0]
 8022dc2:	4553      	cmp	r3, sl
 8022dc4:	f106 0601 	add.w	r6, r6, #1
 8022dc8:	d1f2      	bne.n	8022db0 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x8c>
 8022dca:	2300      	movs	r3, #0
 8022dcc:	2038      	movs	r0, #56	; 0x38
 8022dce:	3278      	adds	r2, #120	; 0x78
 8022dd0:	fb00 fa03 	mul.w	sl, r0, r3
 8022dd4:	f852 100a 	ldr.w	r1, [r2, sl]
 8022dd8:	428f      	cmp	r7, r1
 8022dda:	d13a      	bne.n	8022e52 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x12e>
 8022ddc:	f04f 0b00 	mov.w	fp, #0
 8022de0:	f109 0908 	add.w	r9, r9, #8
 8022de4:	271c      	movs	r7, #28
 8022de6:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
 8022dea:	465e      	mov	r6, fp
 8022dec:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8022df0:	435f      	muls	r7, r3
 8022df2:	682b      	ldr	r3, [r5, #0]
 8022df4:	444b      	add	r3, r9
 8022df6:	6858      	ldr	r0, [r3, #4]
 8022df8:	eb07 030b 	add.w	r3, r7, fp
 8022dfc:	3340      	adds	r3, #64	; 0x40
 8022dfe:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8022e02:	b18b      	cbz	r3, 8022e28 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x104>
 8022e04:	f10d 0206 	add.w	r2, sp, #6
 8022e08:	4659      	mov	r1, fp
 8022e0a:	4450      	add	r0, sl
 8022e0c:	f7fa fb76 	bl	801d4fc <MobleSetGet>
 8022e10:	2801      	cmp	r0, #1
 8022e12:	d809      	bhi.n	8022e28 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x104>
 8022e14:	2202      	movs	r2, #2
 8022e16:	fb02 4006 	mla	r0, r2, r6, r4
 8022e1a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8022e1e:	300f      	adds	r0, #15
 8022e20:	f7f8 ff60 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8022e24:	3601      	adds	r6, #1
 8022e26:	b2f6      	uxtb	r6, r6
 8022e28:	f10b 0b01 	add.w	fp, fp, #1
 8022e2c:	f1bb 0f0a 	cmp.w	fp, #10
 8022e30:	d1df      	bne.n	8022df2 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xce>
 8022e32:	2307      	movs	r3, #7
 8022e34:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 8022e38:	f8c4 60a3 	str.w	r6, [r4, #163]	; 0xa3
 8022e3c:	4623      	mov	r3, r4
 8022e3e:	4642      	mov	r2, r8
 8022e40:	2101      	movs	r1, #1
 8022e42:	4628      	mov	r0, r5
 8022e44:	f7ff fe4c 	bl	8022ae0 <MobleModelSendPacket>
 8022e48:	b003      	add	sp, #12
 8022e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022e4e:	2301      	movs	r3, #1
 8022e50:	e795      	b.n	8022d7e <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x5a>
 8022e52:	3301      	adds	r3, #1
 8022e54:	2b0b      	cmp	r3, #11
 8022e56:	d1bb      	bne.n	8022dd0 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0xac>
 8022e58:	2600      	movs	r6, #0
 8022e5a:	e7ea      	b.n	8022e32 <MobleConfigModel_ProcessVendorModelSubscriptionGet+0x10e>
 8022e5c:	08033901 	.word	0x08033901
 8022e60:	08031f7a 	.word	0x08031f7a
 8022e64:	08033393 	.word	0x08033393
 8022e68:	0803385c 	.word	0x0803385c

08022e6c <MobleConfigModel_SendVendorModelAppList>:
 8022e6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022e70:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022e72:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 8022e76:	460e      	mov	r6, r1
 8022e78:	4605      	mov	r5, r0
 8022e7a:	4619      	mov	r1, r3
 8022e7c:	e9dd 930a 	ldrd	r9, r3, [sp, #40]	; 0x28
 8022e80:	b930      	cbnz	r0, 8022e90 <MobleConfigModel_SendVendorModelAppList+0x24>
 8022e82:	4b18      	ldr	r3, [pc, #96]	; (8022ee4 <MobleConfigModel_SendVendorModelAppList+0x78>)
 8022e84:	4a18      	ldr	r2, [pc, #96]	; (8022ee8 <MobleConfigModel_SendVendorModelAppList+0x7c>)
 8022e86:	4819      	ldr	r0, [pc, #100]	; (8022eec <MobleConfigModel_SendVendorModelAppList+0x80>)
 8022e88:	f44f 6122 	mov.w	r1, #2592	; 0xa20
 8022e8c:	f005 fe1c 	bl	8028ac8 <__assert_func>
 8022e90:	204e      	movs	r0, #78	; 0x4e
 8022e92:	2700      	movs	r7, #0
 8022e94:	7020      	strb	r0, [r4, #0]
 8022e96:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8022e9a:	7060      	strb	r0, [r4, #1]
 8022e9c:	7222      	strb	r2, [r4, #8]
 8022e9e:	70a7      	strb	r7, [r4, #2]
 8022ea0:	70e7      	strb	r7, [r4, #3]
 8022ea2:	2202      	movs	r2, #2
 8022ea4:	f104 0009 	add.w	r0, r4, #9
 8022ea8:	9301      	str	r3, [sp, #4]
 8022eaa:	f7f8 ff1b 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8022eae:	4649      	mov	r1, r9
 8022eb0:	2204      	movs	r2, #4
 8022eb2:	f104 000b 	add.w	r0, r4, #11
 8022eb6:	f7f8 ff15 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8022eba:	9b01      	ldr	r3, [sp, #4]
 8022ebc:	f104 020f 	add.w	r2, r4, #15
 8022ec0:	4641      	mov	r1, r8
 8022ec2:	4638      	mov	r0, r7
 8022ec4:	f7f4 fd0c 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8022ec8:	b2c3      	uxtb	r3, r0
 8022eca:	3307      	adds	r3, #7
 8022ecc:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8022ed0:	4632      	mov	r2, r6
 8022ed2:	4623      	mov	r3, r4
 8022ed4:	2101      	movs	r1, #1
 8022ed6:	4628      	mov	r0, r5
 8022ed8:	b003      	add	sp, #12
 8022eda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022ede:	f7ff bdff 	b.w	8022ae0 <MobleModelSendPacket>
 8022ee2:	bf00      	nop
 8022ee4:	08033381 	.word	0x08033381
 8022ee8:	08031fad 	.word	0x08031fad
 8022eec:	08033393 	.word	0x08033393

08022ef0 <MobleConfigModel_ProcessVendorModelAppGet>:
 8022ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ef4:	b08a      	sub	sp, #40	; 0x28
 8022ef6:	af08      	add	r7, sp, #32
 8022ef8:	469c      	mov	ip, r3
 8022efa:	2300      	movs	r3, #0
 8022efc:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022efe:	9308      	str	r3, [sp, #32]
 8022f00:	460d      	mov	r5, r1
 8022f02:	80bb      	strh	r3, [r7, #4]
 8022f04:	f8ad 301e 	strh.w	r3, [sp, #30]
 8022f08:	4604      	mov	r4, r0
 8022f0a:	b930      	cbnz	r0, 8022f1a <MobleConfigModel_ProcessVendorModelAppGet+0x2a>
 8022f0c:	4b24      	ldr	r3, [pc, #144]	; (8022fa0 <MobleConfigModel_ProcessVendorModelAppGet+0xb0>)
 8022f0e:	4a25      	ldr	r2, [pc, #148]	; (8022fa4 <MobleConfigModel_ProcessVendorModelAppGet+0xb4>)
 8022f10:	f641 1122 	movw	r1, #6434	; 0x1922
 8022f14:	4824      	ldr	r0, [pc, #144]	; (8022fa8 <MobleConfigModel_ProcessVendorModelAppGet+0xb8>)
 8022f16:	f005 fdd7 	bl	8028ac8 <__assert_func>
 8022f1a:	6802      	ldr	r2, [r0, #0]
 8022f1c:	b922      	cbnz	r2, 8022f28 <MobleConfigModel_ProcessVendorModelAppGet+0x38>
 8022f1e:	4b23      	ldr	r3, [pc, #140]	; (8022fac <MobleConfigModel_ProcessVendorModelAppGet+0xbc>)
 8022f20:	4a20      	ldr	r2, [pc, #128]	; (8022fa4 <MobleConfigModel_ProcessVendorModelAppGet+0xb4>)
 8022f22:	f641 1123 	movw	r1, #6435	; 0x1923
 8022f26:	e7f5      	b.n	8022f14 <MobleConfigModel_ProcessVendorModelAppGet+0x24>
 8022f28:	8850      	ldrh	r0, [r2, #2]
 8022f2a:	f8dc 1000 	ldr.w	r1, [ip]
 8022f2e:	7f12      	ldrb	r2, [r2, #28]
 8022f30:	f8dc 8002 	ldr.w	r8, [ip, #2]
 8022f34:	b28b      	uxth	r3, r1
 8022f36:	f100 3eff 	add.w	lr, r0, #4294967295
 8022f3a:	4472      	add	r2, lr
 8022f3c:	4283      	cmp	r3, r0
 8022f3e:	b292      	uxth	r2, r2
 8022f40:	d001      	beq.n	8022f46 <MobleConfigModel_ProcessVendorModelAppGet+0x56>
 8022f42:	4293      	cmp	r3, r2
 8022f44:	d82a      	bhi.n	8022f9c <MobleConfigModel_ProcessVendorModelAppGet+0xac>
 8022f46:	1a09      	subs	r1, r1, r0
 8022f48:	b2c9      	uxtb	r1, r1
 8022f4a:	4640      	mov	r0, r8
 8022f4c:	9305      	str	r3, [sp, #20]
 8022f4e:	f7f0 fac5 	bl	80134dc <ApplicationChkVendorModelActive>
 8022f52:	9b05      	ldr	r3, [sp, #20]
 8022f54:	b940      	cbnz	r0, 8022f68 <MobleConfigModel_ProcessVendorModelAppGet+0x78>
 8022f56:	f8ad 001e 	strh.w	r0, [sp, #30]
 8022f5a:	2202      	movs	r2, #2
 8022f5c:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 8022f60:	9603      	str	r6, [sp, #12]
 8022f62:	e9cd 7101 	strd	r7, r1, [sp, #4]
 8022f66:	e006      	b.n	8022f76 <MobleConfigModel_ProcessVendorModelAppGet+0x86>
 8022f68:	4a11      	ldr	r2, [pc, #68]	; (8022fb0 <MobleConfigModel_ProcessVendorModelAppGet+0xc0>)
 8022f6a:	f892 261d 	ldrb.w	r2, [r2, #1565]	; 0x61d
 8022f6e:	b95a      	cbnz	r2, 8022f88 <MobleConfigModel_ProcessVendorModelAppGet+0x98>
 8022f70:	e9cd 2602 	strd	r2, r6, [sp, #8]
 8022f74:	9201      	str	r2, [sp, #4]
 8022f76:	f8cd 8000 	str.w	r8, [sp]
 8022f7a:	4629      	mov	r1, r5
 8022f7c:	4620      	mov	r0, r4
 8022f7e:	f7ff ff75 	bl	8022e6c <MobleConfigModel_SendVendorModelAppList>
 8022f82:	b00a      	add	sp, #40	; 0x28
 8022f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f88:	f10d 021e 	add.w	r2, sp, #30
 8022f8c:	4618      	mov	r0, r3
 8022f8e:	4639      	mov	r1, r7
 8022f90:	9305      	str	r3, [sp, #20]
 8022f92:	f7f7 f865 	bl	801a060 <MoblePalCrypto_GetAppBind_VendorModel>
 8022f96:	9b05      	ldr	r3, [sp, #20]
 8022f98:	2200      	movs	r2, #0
 8022f9a:	e7df      	b.n	8022f5c <MobleConfigModel_ProcessVendorModelAppGet+0x6c>
 8022f9c:	2201      	movs	r2, #1
 8022f9e:	e7dd      	b.n	8022f5c <MobleConfigModel_ProcessVendorModelAppGet+0x6c>
 8022fa0:	08033901 	.word	0x08033901
 8022fa4:	08031fd5 	.word	0x08031fd5
 8022fa8:	08033393 	.word	0x08033393
 8022fac:	0803385c 	.word	0x0803385c
 8022fb0:	2000141c 	.word	0x2000141c

08022fb4 <MobleConfigModel_ProcessSigModelSubscriptionGet>:
 8022fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fb8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8022fba:	4688      	mov	r8, r1
 8022fbc:	4605      	mov	r5, r0
 8022fbe:	b930      	cbnz	r0, 8022fce <MobleConfigModel_ProcessSigModelSubscriptionGet+0x1a>
 8022fc0:	4b4a      	ldr	r3, [pc, #296]	; (80230ec <MobleConfigModel_ProcessSigModelSubscriptionGet+0x138>)
 8022fc2:	4a4b      	ldr	r2, [pc, #300]	; (80230f0 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x13c>)
 8022fc4:	f641 01d9 	movw	r1, #6361	; 0x18d9
 8022fc8:	484a      	ldr	r0, [pc, #296]	; (80230f4 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x140>)
 8022fca:	f005 fd7d 	bl	8028ac8 <__assert_func>
 8022fce:	6802      	ldr	r2, [r0, #0]
 8022fd0:	b922      	cbnz	r2, 8022fdc <MobleConfigModel_ProcessSigModelSubscriptionGet+0x28>
 8022fd2:	4b49      	ldr	r3, [pc, #292]	; (80230f8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x144>)
 8022fd4:	4a46      	ldr	r2, [pc, #280]	; (80230f0 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x13c>)
 8022fd6:	f641 01da 	movw	r1, #6362	; 0x18da
 8022fda:	e7f5      	b.n	8022fc8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x14>
 8022fdc:	8851      	ldrh	r1, [r2, #2]
 8022fde:	f8d3 9000 	ldr.w	r9, [r3]
 8022fe2:	7f12      	ldrb	r2, [r2, #28]
 8022fe4:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8022fe8:	fa1f fa89 	uxth.w	sl, r9
 8022fec:	1e48      	subs	r0, r1, #1
 8022fee:	4402      	add	r2, r0
 8022ff0:	458a      	cmp	sl, r1
 8022ff2:	b292      	uxth	r2, r2
 8022ff4:	d001      	beq.n	8022ffa <MobleConfigModel_ProcessSigModelSubscriptionGet+0x46>
 8022ff6:	4592      	cmp	sl, r2
 8022ff8:	d871      	bhi.n	80230de <MobleConfigModel_ProcessSigModelSubscriptionGet+0x12a>
 8022ffa:	eba9 0101 	sub.w	r1, r9, r1
 8022ffe:	b2c9      	uxtb	r1, r1
 8023000:	b2b8      	uxth	r0, r7
 8023002:	f7f0 fa2f 	bl	8013464 <ApplicationChkSigModelActive>
 8023006:	2800      	cmp	r0, #0
 8023008:	bf0c      	ite	eq
 802300a:	2302      	moveq	r3, #2
 802300c:	2300      	movne	r3, #0
 802300e:	682a      	ldr	r2, [r5, #0]
 8023010:	f892 b01c 	ldrb.w	fp, [r2, #28]
 8023014:	7223      	strb	r3, [r4, #8]
 8023016:	222a      	movs	r2, #42	; 0x2a
 8023018:	2600      	movs	r6, #0
 802301a:	7022      	strb	r2, [r4, #0]
 802301c:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 8023020:	7062      	strb	r2, [r4, #1]
 8023022:	fa1f f189 	uxth.w	r1, r9
 8023026:	70a6      	strb	r6, [r4, #2]
 8023028:	70e6      	strb	r6, [r4, #3]
 802302a:	2202      	movs	r2, #2
 802302c:	f104 0009 	add.w	r0, r4, #9
 8023030:	b2bf      	uxth	r7, r7
 8023032:	f7f8 fe57 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8023036:	4639      	mov	r1, r7
 8023038:	f104 000b 	add.w	r0, r4, #11
 802303c:	f7f8 fe52 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8023040:	b2f3      	uxtb	r3, r6
 8023042:	459b      	cmp	fp, r3
 8023044:	d950      	bls.n	80230e8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x134>
 8023046:	682b      	ldr	r3, [r5, #0]
 8023048:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 802304c:	46b1      	mov	r9, r6
 802304e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8023050:	8813      	ldrh	r3, [r2, #0]
 8023052:	4553      	cmp	r3, sl
 8023054:	f106 0601 	add.w	r6, r6, #1
 8023058:	d1f2      	bne.n	8023040 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x8c>
 802305a:	2300      	movs	r3, #0
 802305c:	2038      	movs	r0, #56	; 0x38
 802305e:	3278      	adds	r2, #120	; 0x78
 8023060:	fb00 fa03 	mul.w	sl, r0, r3
 8023064:	f852 100a 	ldr.w	r1, [r2, sl]
 8023068:	42b9      	cmp	r1, r7
 802306a:	d13a      	bne.n	80230e2 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x12e>
 802306c:	f04f 0b00 	mov.w	fp, #0
 8023070:	f109 0908 	add.w	r9, r9, #8
 8023074:	271c      	movs	r7, #28
 8023076:	f10a 0a80 	add.w	sl, sl, #128	; 0x80
 802307a:	465e      	mov	r6, fp
 802307c:	ea4f 0989 	mov.w	r9, r9, lsl #2
 8023080:	435f      	muls	r7, r3
 8023082:	682b      	ldr	r3, [r5, #0]
 8023084:	444b      	add	r3, r9
 8023086:	6858      	ldr	r0, [r3, #4]
 8023088:	eb07 030b 	add.w	r3, r7, fp
 802308c:	3340      	adds	r3, #64	; 0x40
 802308e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8023092:	b18b      	cbz	r3, 80230b8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x104>
 8023094:	f10d 0206 	add.w	r2, sp, #6
 8023098:	4659      	mov	r1, fp
 802309a:	4450      	add	r0, sl
 802309c:	f7fa fa2e 	bl	801d4fc <MobleSetGet>
 80230a0:	2801      	cmp	r0, #1
 80230a2:	d809      	bhi.n	80230b8 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x104>
 80230a4:	2202      	movs	r2, #2
 80230a6:	fb02 4006 	mla	r0, r2, r6, r4
 80230aa:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 80230ae:	300d      	adds	r0, #13
 80230b0:	f7f8 fe18 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 80230b4:	3601      	adds	r6, #1
 80230b6:	b2f6      	uxtb	r6, r6
 80230b8:	f10b 0b01 	add.w	fp, fp, #1
 80230bc:	f1bb 0f0a 	cmp.w	fp, #10
 80230c0:	d1df      	bne.n	8023082 <MobleConfigModel_ProcessSigModelSubscriptionGet+0xce>
 80230c2:	2305      	movs	r3, #5
 80230c4:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 80230c8:	f8c4 60a3 	str.w	r6, [r4, #163]	; 0xa3
 80230cc:	4623      	mov	r3, r4
 80230ce:	4642      	mov	r2, r8
 80230d0:	2101      	movs	r1, #1
 80230d2:	4628      	mov	r0, r5
 80230d4:	f7ff fd04 	bl	8022ae0 <MobleModelSendPacket>
 80230d8:	b003      	add	sp, #12
 80230da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230de:	2301      	movs	r3, #1
 80230e0:	e795      	b.n	802300e <MobleConfigModel_ProcessSigModelSubscriptionGet+0x5a>
 80230e2:	3301      	adds	r3, #1
 80230e4:	2b0b      	cmp	r3, #11
 80230e6:	d1bb      	bne.n	8023060 <MobleConfigModel_ProcessSigModelSubscriptionGet+0xac>
 80230e8:	2600      	movs	r6, #0
 80230ea:	e7ea      	b.n	80230c2 <MobleConfigModel_ProcessSigModelSubscriptionGet+0x10e>
 80230ec:	08033901 	.word	0x08033901
 80230f0:	08031fff 	.word	0x08031fff
 80230f4:	08033393 	.word	0x08033393
 80230f8:	0803385c 	.word	0x0803385c

080230fc <MobleConfigModel_SendSigModelAppList>:
 80230fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8023100:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023102:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
 8023106:	f8bd 8030 	ldrh.w	r8, [sp, #48]	; 0x30
 802310a:	460e      	mov	r6, r1
 802310c:	4605      	mov	r5, r0
 802310e:	4619      	mov	r1, r3
 8023110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8023112:	b930      	cbnz	r0, 8023122 <MobleConfigModel_SendSigModelAppList+0x26>
 8023114:	4b17      	ldr	r3, [pc, #92]	; (8023174 <MobleConfigModel_SendSigModelAppList+0x78>)
 8023116:	4a18      	ldr	r2, [pc, #96]	; (8023178 <MobleConfigModel_SendSigModelAppList+0x7c>)
 8023118:	4818      	ldr	r0, [pc, #96]	; (802317c <MobleConfigModel_SendSigModelAppList+0x80>)
 802311a:	f640 1191 	movw	r1, #2449	; 0x991
 802311e:	f005 fcd3 	bl	8028ac8 <__assert_func>
 8023122:	204c      	movs	r0, #76	; 0x4c
 8023124:	2700      	movs	r7, #0
 8023126:	7020      	strb	r0, [r4, #0]
 8023128:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 802312c:	7060      	strb	r0, [r4, #1]
 802312e:	7222      	strb	r2, [r4, #8]
 8023130:	70a7      	strb	r7, [r4, #2]
 8023132:	2202      	movs	r2, #2
 8023134:	70e7      	strb	r7, [r4, #3]
 8023136:	f104 0009 	add.w	r0, r4, #9
 802313a:	9301      	str	r3, [sp, #4]
 802313c:	f7f8 fdd2 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8023140:	4649      	mov	r1, r9
 8023142:	f104 000b 	add.w	r0, r4, #11
 8023146:	f7f8 fdcd 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 802314a:	9b01      	ldr	r3, [sp, #4]
 802314c:	f104 020d 	add.w	r2, r4, #13
 8023150:	4641      	mov	r1, r8
 8023152:	4638      	mov	r0, r7
 8023154:	f7f4 fbc4 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8023158:	b2c3      	uxtb	r3, r0
 802315a:	3305      	adds	r3, #5
 802315c:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8023160:	4632      	mov	r2, r6
 8023162:	4623      	mov	r3, r4
 8023164:	2101      	movs	r1, #1
 8023166:	4628      	mov	r0, r5
 8023168:	b003      	add	sp, #12
 802316a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802316e:	f7ff bcb7 	b.w	8022ae0 <MobleModelSendPacket>
 8023172:	bf00      	nop
 8023174:	08033381 	.word	0x08033381
 8023178:	0803202f 	.word	0x0803202f
 802317c:	08033393 	.word	0x08033393

08023180 <MobleConfigModel_ProcessSigModelAppGet>:
 8023180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023184:	b08a      	sub	sp, #40	; 0x28
 8023186:	f10d 0820 	add.w	r8, sp, #32
 802318a:	461d      	mov	r5, r3
 802318c:	2300      	movs	r3, #0
 802318e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8023190:	f8ad 301e 	strh.w	r3, [sp, #30]
 8023194:	460e      	mov	r6, r1
 8023196:	9308      	str	r3, [sp, #32]
 8023198:	f8a8 3004 	strh.w	r3, [r8, #4]
 802319c:	4604      	mov	r4, r0
 802319e:	b930      	cbnz	r0, 80231ae <MobleConfigModel_ProcessSigModelAppGet+0x2e>
 80231a0:	4b24      	ldr	r3, [pc, #144]	; (8023234 <MobleConfigModel_ProcessSigModelAppGet+0xb4>)
 80231a2:	4a25      	ldr	r2, [pc, #148]	; (8023238 <MobleConfigModel_ProcessSigModelAppGet+0xb8>)
 80231a4:	f641 017f 	movw	r1, #6271	; 0x187f
 80231a8:	4824      	ldr	r0, [pc, #144]	; (802323c <MobleConfigModel_ProcessSigModelAppGet+0xbc>)
 80231aa:	f005 fc8d 	bl	8028ac8 <__assert_func>
 80231ae:	6802      	ldr	r2, [r0, #0]
 80231b0:	b922      	cbnz	r2, 80231bc <MobleConfigModel_ProcessSigModelAppGet+0x3c>
 80231b2:	4b23      	ldr	r3, [pc, #140]	; (8023240 <MobleConfigModel_ProcessSigModelAppGet+0xc0>)
 80231b4:	4a20      	ldr	r2, [pc, #128]	; (8023238 <MobleConfigModel_ProcessSigModelAppGet+0xb8>)
 80231b6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
 80231ba:	e7f5      	b.n	80231a8 <MobleConfigModel_ProcessSigModelAppGet+0x28>
 80231bc:	8850      	ldrh	r0, [r2, #2]
 80231be:	6829      	ldr	r1, [r5, #0]
 80231c0:	7f12      	ldrb	r2, [r2, #28]
 80231c2:	f8d5 5002 	ldr.w	r5, [r5, #2]
 80231c6:	b28b      	uxth	r3, r1
 80231c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80231cc:	4462      	add	r2, ip
 80231ce:	4283      	cmp	r3, r0
 80231d0:	b292      	uxth	r2, r2
 80231d2:	b2ad      	uxth	r5, r5
 80231d4:	d001      	beq.n	80231da <MobleConfigModel_ProcessSigModelAppGet+0x5a>
 80231d6:	4293      	cmp	r3, r2
 80231d8:	d829      	bhi.n	802322e <MobleConfigModel_ProcessSigModelAppGet+0xae>
 80231da:	1a09      	subs	r1, r1, r0
 80231dc:	b2c9      	uxtb	r1, r1
 80231de:	4628      	mov	r0, r5
 80231e0:	9305      	str	r3, [sp, #20]
 80231e2:	f7f0 f93f 	bl	8013464 <ApplicationChkSigModelActive>
 80231e6:	9b05      	ldr	r3, [sp, #20]
 80231e8:	b940      	cbnz	r0, 80231fc <MobleConfigModel_ProcessSigModelAppGet+0x7c>
 80231ea:	f8ad 001e 	strh.w	r0, [sp, #30]
 80231ee:	2202      	movs	r2, #2
 80231f0:	f8bd 101e 	ldrh.w	r1, [sp, #30]
 80231f4:	9703      	str	r7, [sp, #12]
 80231f6:	e9cd 8101 	strd	r8, r1, [sp, #4]
 80231fa:	e006      	b.n	802320a <MobleConfigModel_ProcessSigModelAppGet+0x8a>
 80231fc:	4a11      	ldr	r2, [pc, #68]	; (8023244 <MobleConfigModel_ProcessSigModelAppGet+0xc4>)
 80231fe:	f892 261d 	ldrb.w	r2, [r2, #1565]	; 0x61d
 8023202:	b952      	cbnz	r2, 802321a <MobleConfigModel_ProcessSigModelAppGet+0x9a>
 8023204:	e9cd 2702 	strd	r2, r7, [sp, #8]
 8023208:	9201      	str	r2, [sp, #4]
 802320a:	9500      	str	r5, [sp, #0]
 802320c:	4631      	mov	r1, r6
 802320e:	4620      	mov	r0, r4
 8023210:	f7ff ff74 	bl	80230fc <MobleConfigModel_SendSigModelAppList>
 8023214:	b00a      	add	sp, #40	; 0x28
 8023216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802321a:	f10d 021e 	add.w	r2, sp, #30
 802321e:	4618      	mov	r0, r3
 8023220:	4641      	mov	r1, r8
 8023222:	9305      	str	r3, [sp, #20]
 8023224:	f7f6 ff64 	bl	801a0f0 <MoblePalCrypto_GetAppBind_SIGModel>
 8023228:	9b05      	ldr	r3, [sp, #20]
 802322a:	2200      	movs	r2, #0
 802322c:	e7e0      	b.n	80231f0 <MobleConfigModel_ProcessSigModelAppGet+0x70>
 802322e:	2201      	movs	r2, #1
 8023230:	e7de      	b.n	80231f0 <MobleConfigModel_ProcessSigModelAppGet+0x70>
 8023232:	bf00      	nop
 8023234:	08033901 	.word	0x08033901
 8023238:	08032054 	.word	0x08032054
 802323c:	08033393 	.word	0x08033393
 8023240:	0803385c 	.word	0x0803385c
 8023244:	2000141c 	.word	0x2000141c

08023248 <MobleConfigModel_ProcessNodeReset>:
 8023248:	b538      	push	{r3, r4, r5, lr}
 802324a:	9b05      	ldr	r3, [sp, #20]
 802324c:	460a      	mov	r2, r1
 802324e:	b930      	cbnz	r0, 802325e <MobleConfigModel_ProcessNodeReset+0x16>
 8023250:	4b11      	ldr	r3, [pc, #68]	; (8023298 <MobleConfigModel_ProcessNodeReset+0x50>)
 8023252:	4a12      	ldr	r2, [pc, #72]	; (802329c <MobleConfigModel_ProcessNodeReset+0x54>)
 8023254:	4812      	ldr	r0, [pc, #72]	; (80232a0 <MobleConfigModel_ProcessNodeReset+0x58>)
 8023256:	f640 1155 	movw	r1, #2389	; 0x955
 802325a:	f005 fc35 	bl	8028ac8 <__assert_func>
 802325e:	214a      	movs	r1, #74	; 0x4a
 8023260:	2400      	movs	r4, #0
 8023262:	7019      	strb	r1, [r3, #0]
 8023264:	f06f 017f 	mvn.w	r1, #127	; 0x7f
 8023268:	7059      	strb	r1, [r3, #1]
 802326a:	709c      	strb	r4, [r3, #2]
 802326c:	70dc      	strb	r4, [r3, #3]
 802326e:	f883 40a3 	strb.w	r4, [r3, #163]	; 0xa3
 8023272:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8023276:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802327a:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 802327e:	2101      	movs	r1, #1
 8023280:	f7ff fc2e 	bl	8022ae0 <MobleModelSendPacket>
 8023284:	4605      	mov	r5, r0
 8023286:	f7fd fea1 	bl	8020fcc <MobleStackConfigInvalidate>
 802328a:	f7fc f995 	bl	801f5b8 <MoblePalBluetoothGracefulReset>
 802328e:	4620      	mov	r0, r4
 8023290:	f7e3 f8a2 	bl	80063d8 <BLEMesh_UnprovisionCallback>
 8023294:	4628      	mov	r0, r5
 8023296:	bd38      	pop	{r3, r4, r5, pc}
 8023298:	08033381 	.word	0x08033381
 802329c:	0803207b 	.word	0x0803207b
 80232a0:	08033393 	.word	0x08033393

080232a4 <MobleConfigModel_ProcessNodeIdentitySet>:
 80232a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80232a8:	4607      	mov	r7, r0
 80232aa:	4618      	mov	r0, r3
 80232ac:	461a      	mov	r2, r3
 80232ae:	f7f4 fb10 	bl	80178d2 <MobleConfigModelGetNetIdx>
 80232b2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80232b4:	f892 8002 	ldrb.w	r8, [r2, #2]
 80232b8:	4689      	mov	r9, r1
 80232ba:	4605      	mov	r5, r0
 80232bc:	f7f5 fe9a 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 80232c0:	b1b0      	cbz	r0, 80232f0 <MobleConfigModel_ProcessNodeIdentitySet+0x4c>
 80232c2:	f1b8 0f01 	cmp.w	r8, #1
 80232c6:	d83d      	bhi.n	8023344 <MobleConfigModel_ProcessNodeIdentitySet+0xa0>
 80232c8:	4641      	mov	r1, r8
 80232ca:	4628      	mov	r0, r5
 80232cc:	f7f5 fec6 	bl	801905c <MoblePalCryptoSetNodeIdntyState>
 80232d0:	4606      	mov	r6, r0
 80232d2:	b978      	cbnz	r0, 80232f4 <MobleConfigModel_ProcessNodeIdentitySet+0x50>
 80232d4:	4641      	mov	r1, r8
 80232d6:	4638      	mov	r0, r7
 80232d8:	f7fe f814 	bl	8021304 <BnrgmStackSetNodeIdentityState>
 80232dc:	f8ad 5006 	strh.w	r5, [sp, #6]
 80232e0:	b967      	cbnz	r7, 80232fc <MobleConfigModel_ProcessNodeIdentitySet+0x58>
 80232e2:	4b19      	ldr	r3, [pc, #100]	; (8023348 <MobleConfigModel_ProcessNodeIdentitySet+0xa4>)
 80232e4:	4a19      	ldr	r2, [pc, #100]	; (802334c <MobleConfigModel_ProcessNodeIdentitySet+0xa8>)
 80232e6:	481a      	ldr	r0, [pc, #104]	; (8023350 <MobleConfigModel_ProcessNodeIdentitySet+0xac>)
 80232e8:	f640 113a 	movw	r1, #2362	; 0x93a
 80232ec:	f005 fbec 	bl	8028ac8 <__assert_func>
 80232f0:	2604      	movs	r6, #4
 80232f2:	e7f3      	b.n	80232dc <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 80232f4:	260b      	movs	r6, #11
 80232f6:	f04f 0800 	mov.w	r8, #0
 80232fa:	e7ef      	b.n	80232dc <MobleConfigModel_ProcessNodeIdentitySet+0x38>
 80232fc:	2348      	movs	r3, #72	; 0x48
 80232fe:	2500      	movs	r5, #0
 8023300:	7023      	strb	r3, [r4, #0]
 8023302:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8023306:	7063      	strb	r3, [r4, #1]
 8023308:	f104 0209 	add.w	r2, r4, #9
 802330c:	f10d 0306 	add.w	r3, sp, #6
 8023310:	70a5      	strb	r5, [r4, #2]
 8023312:	70e5      	strb	r5, [r4, #3]
 8023314:	7226      	strb	r6, [r4, #8]
 8023316:	2101      	movs	r1, #1
 8023318:	4628      	mov	r0, r5
 802331a:	f7f4 fae1 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 802331e:	2304      	movs	r3, #4
 8023320:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8023324:	f884 800b 	strb.w	r8, [r4, #11]
 8023328:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 802332c:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 8023330:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8023334:	4623      	mov	r3, r4
 8023336:	464a      	mov	r2, r9
 8023338:	4638      	mov	r0, r7
 802333a:	f7ff fbd1 	bl	8022ae0 <MobleModelSendPacket>
 802333e:	b003      	add	sp, #12
 8023340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8023344:	2000      	movs	r0, #0
 8023346:	e7fa      	b.n	802333e <MobleConfigModel_ProcessNodeIdentitySet+0x9a>
 8023348:	08033381 	.word	0x08033381
 802334c:	080320a0 	.word	0x080320a0
 8023350:	08033393 	.word	0x08033393

08023354 <MobleConfigModel_SendNetKeyStatus>:
 8023354:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8023356:	9c08      	ldr	r4, [sp, #32]
 8023358:	f8ad 3006 	strh.w	r3, [sp, #6]
 802335c:	460f      	mov	r7, r1
 802335e:	4606      	mov	r6, r0
 8023360:	b930      	cbnz	r0, 8023370 <MobleConfigModel_SendNetKeyStatus+0x1c>
 8023362:	4b14      	ldr	r3, [pc, #80]	; (80233b4 <MobleConfigModel_SendNetKeyStatus+0x60>)
 8023364:	4a14      	ldr	r2, [pc, #80]	; (80233b8 <MobleConfigModel_SendNetKeyStatus+0x64>)
 8023366:	4815      	ldr	r0, [pc, #84]	; (80233bc <MobleConfigModel_SendNetKeyStatus+0x68>)
 8023368:	f44f 6110 	mov.w	r1, #2304	; 0x900
 802336c:	f005 fbac 	bl	8028ac8 <__assert_func>
 8023370:	2344      	movs	r3, #68	; 0x44
 8023372:	2500      	movs	r5, #0
 8023374:	7023      	strb	r3, [r4, #0]
 8023376:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802337a:	7063      	strb	r3, [r4, #1]
 802337c:	7222      	strb	r2, [r4, #8]
 802337e:	f10d 0306 	add.w	r3, sp, #6
 8023382:	f104 0209 	add.w	r2, r4, #9
 8023386:	2101      	movs	r1, #1
 8023388:	70a5      	strb	r5, [r4, #2]
 802338a:	70e5      	strb	r5, [r4, #3]
 802338c:	4628      	mov	r0, r5
 802338e:	f7f4 faa7 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8023392:	2303      	movs	r3, #3
 8023394:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8023398:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 802339c:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 80233a0:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 80233a4:	4623      	mov	r3, r4
 80233a6:	463a      	mov	r2, r7
 80233a8:	4630      	mov	r0, r6
 80233aa:	f7ff fb99 	bl	8022ae0 <MobleModelSendPacket>
 80233ae:	b003      	add	sp, #12
 80233b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80233b2:	bf00      	nop
 80233b4:	08033381 	.word	0x08033381
 80233b8:	080320c8 	.word	0x080320c8
 80233bc:	08033393 	.word	0x08033393

080233c0 <MobleConfigModel_ProcessNetKeyUpdate>:
 80233c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80233c4:	4607      	mov	r7, r0
 80233c6:	b08d      	sub	sp, #52	; 0x34
 80233c8:	4618      	mov	r0, r3
 80233ca:	461a      	mov	r2, r3
 80233cc:	f7f4 fa81 	bl	80178d2 <MobleConfigModelGetNetIdx>
 80233d0:	ac04      	add	r4, sp, #16
 80233d2:	1c93      	adds	r3, r2, #2
 80233d4:	4688      	mov	r8, r1
 80233d6:	4605      	mov	r5, r0
 80233d8:	3212      	adds	r2, #18
 80233da:	46a1      	mov	r9, r4
 80233dc:	6818      	ldr	r0, [r3, #0]
 80233de:	6859      	ldr	r1, [r3, #4]
 80233e0:	4626      	mov	r6, r4
 80233e2:	c603      	stmia	r6!, {r0, r1}
 80233e4:	3308      	adds	r3, #8
 80233e6:	4293      	cmp	r3, r2
 80233e8:	4634      	mov	r4, r6
 80233ea:	d1f7      	bne.n	80233dc <MobleConfigModel_ProcessNetKeyUpdate+0x1c>
 80233ec:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80233f0:	4628      	mov	r0, r5
 80233f2:	bf34      	ite	cc
 80233f4:	2400      	movcc	r4, #0
 80233f6:	2404      	movcs	r4, #4
 80233f8:	f7f7 f974 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80233fc:	1e06      	subs	r6, r0, #0
 80233fe:	db2d      	blt.n	802345c <MobleConfigModel_ProcessNetKeyUpdate+0x9c>
 8023400:	b954      	cbnz	r4, 8023418 <MobleConfigModel_ProcessNetKeyUpdate+0x58>
 8023402:	683b      	ldr	r3, [r7, #0]
 8023404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023406:	4433      	add	r3, r6
 8023408:	7d1c      	ldrb	r4, [r3, #20]
 802340a:	bb4c      	cbnz	r4, 8023460 <MobleConfigModel_ProcessNetKeyUpdate+0xa0>
 802340c:	4628      	mov	r0, r5
 802340e:	f7f5 fdd7 	bl	8018fc0 <MoblePalCryptoHasNewNetworkKey>
 8023412:	2801      	cmp	r0, #1
 8023414:	bf08      	it	eq
 8023416:	240b      	moveq	r4, #11
 8023418:	4628      	mov	r0, r5
 802341a:	f7f5 fdeb 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 802341e:	bb08      	cbnz	r0, 8023464 <MobleConfigModel_ProcessNetKeyUpdate+0xa4>
 8023420:	2c00      	cmp	r4, #0
 8023422:	bf08      	it	eq
 8023424:	2404      	moveq	r4, #4
 8023426:	f8ad 5020 	strh.w	r5, [sp, #32]
 802342a:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
 802342e:	b924      	cbnz	r4, 802343a <MobleConfigModel_ProcessNetKeyUpdate+0x7a>
 8023430:	2310      	movs	r3, #16
 8023432:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8023436:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 802343a:	4b16      	ldr	r3, [pc, #88]	; (8023494 <MobleConfigModel_ProcessNetKeyUpdate+0xd4>)
 802343c:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023440:	a808      	add	r0, sp, #32
 8023442:	69db      	ldr	r3, [r3, #28]
 8023444:	4798      	blx	r3
 8023446:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023448:	9300      	str	r3, [sp, #0]
 802344a:	4622      	mov	r2, r4
 802344c:	462b      	mov	r3, r5
 802344e:	4641      	mov	r1, r8
 8023450:	4638      	mov	r0, r7
 8023452:	f7ff ff7f 	bl	8023354 <MobleConfigModel_SendNetKeyStatus>
 8023456:	b00d      	add	sp, #52	; 0x34
 8023458:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802345c:	2404      	movs	r4, #4
 802345e:	e7db      	b.n	8023418 <MobleConfigModel_ProcessNetKeyUpdate+0x58>
 8023460:	240b      	movs	r4, #11
 8023462:	e7d9      	b.n	8023418 <MobleConfigModel_ProcessNetKeyUpdate+0x58>
 8023464:	2c00      	cmp	r4, #0
 8023466:	d1de      	bne.n	8023426 <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 8023468:	4629      	mov	r1, r5
 802346a:	4648      	mov	r0, r9
 802346c:	f7f6 fb0a 	bl	8019a84 <MoblePalCryptoSetNewNetworkKey>
 8023470:	2803      	cmp	r0, #3
 8023472:	4604      	mov	r4, r0
 8023474:	d00a      	beq.n	802348c <MobleConfigModel_ProcessNetKeyUpdate+0xcc>
 8023476:	b958      	cbnz	r0, 8023490 <MobleConfigModel_ProcessNetKeyUpdate+0xd0>
 8023478:	b2f1      	uxtb	r1, r6
 802347a:	4638      	mov	r0, r7
 802347c:	9103      	str	r1, [sp, #12]
 802347e:	f7fb fa6f 	bl	801e960 <BnrgmFrndMgmtUpdateKeys>
 8023482:	9903      	ldr	r1, [sp, #12]
 8023484:	2001      	movs	r0, #1
 8023486:	f7fe f931 	bl	80216ec <ModelConfigUpdateKRState>
 802348a:	e7cc      	b.n	8023426 <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 802348c:	2406      	movs	r4, #6
 802348e:	e7ca      	b.n	8023426 <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 8023490:	2405      	movs	r4, #5
 8023492:	e7c8      	b.n	8023426 <MobleConfigModel_ProcessNetKeyUpdate+0x66>
 8023494:	20002514 	.word	0x20002514

08023498 <MobleConfigModel_ProcessNetKeyDelete>:
 8023498:	b5f0      	push	{r4, r5, r6, r7, lr}
 802349a:	4606      	mov	r6, r0
 802349c:	b087      	sub	sp, #28
 802349e:	4618      	mov	r0, r3
 80234a0:	f7f4 fa17 	bl	80178d2 <MobleConfigModelGetNetIdx>
 80234a4:	4b1f      	ldr	r3, [pc, #124]	; (8023524 <MobleConfigModel_ProcessNetKeyDelete+0x8c>)
 80234a6:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 80234aa:	f893 361c 	ldrb.w	r3, [r3, #1564]	; 0x61c
 80234ae:	460f      	mov	r7, r1
 80234b0:	4605      	mov	r5, r0
 80234b2:	d232      	bcs.n	802351a <MobleConfigModel_ProcessNetKeyDelete+0x82>
 80234b4:	2b01      	cmp	r3, #1
 80234b6:	d106      	bne.n	80234c6 <MobleConfigModel_ProcessNetKeyDelete+0x2e>
 80234b8:	2400      	movs	r4, #0
 80234ba:	4628      	mov	r0, r5
 80234bc:	f7f5 fd9a 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 80234c0:	2801      	cmp	r0, #1
 80234c2:	d005      	beq.n	80234d0 <MobleConfigModel_ProcessNetKeyDelete+0x38>
 80234c4:	b92c      	cbnz	r4, 80234d2 <MobleConfigModel_ProcessNetKeyDelete+0x3a>
 80234c6:	4628      	mov	r0, r5
 80234c8:	f7f6 fd6c 	bl	8019fa4 <MoblePalCryptoDeleteNetworkKey>
 80234cc:	2803      	cmp	r0, #3
 80234ce:	d120      	bne.n	8023512 <MobleConfigModel_ProcessNetKeyDelete+0x7a>
 80234d0:	240c      	movs	r4, #12
 80234d2:	f8ad 5008 	strh.w	r5, [sp, #8]
 80234d6:	f88d 4015 	strb.w	r4, [sp, #21]
 80234da:	b9e4      	cbnz	r4, 8023516 <MobleConfigModel_ProcessNetKeyDelete+0x7e>
 80234dc:	9403      	str	r4, [sp, #12]
 80234de:	2310      	movs	r3, #16
 80234e0:	f88d 3014 	strb.w	r3, [sp, #20]
 80234e4:	4b10      	ldr	r3, [pc, #64]	; (8023528 <MobleConfigModel_ProcessNetKeyDelete+0x90>)
 80234e6:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80234ea:	a802      	add	r0, sp, #8
 80234ec:	695b      	ldr	r3, [r3, #20]
 80234ee:	4798      	blx	r3
 80234f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80234f2:	9300      	str	r3, [sp, #0]
 80234f4:	4622      	mov	r2, r4
 80234f6:	462b      	mov	r3, r5
 80234f8:	4639      	mov	r1, r7
 80234fa:	4630      	mov	r0, r6
 80234fc:	f7ff ff2a 	bl	8023354 <MobleConfigModel_SendNetKeyStatus>
 8023500:	6833      	ldr	r3, [r6, #0]
 8023502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023504:	4602      	mov	r2, r0
 8023506:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8023508:	f7f4 fbac 	bl	8017c64 <MoblePalTimerStop>
 802350c:	4610      	mov	r0, r2
 802350e:	b007      	add	sp, #28
 8023510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8023512:	2400      	movs	r4, #0
 8023514:	e7dd      	b.n	80234d2 <MobleConfigModel_ProcessNetKeyDelete+0x3a>
 8023516:	2300      	movs	r3, #0
 8023518:	e7e2      	b.n	80234e0 <MobleConfigModel_ProcessNetKeyDelete+0x48>
 802351a:	2b01      	cmp	r3, #1
 802351c:	f04f 0404 	mov.w	r4, #4
 8023520:	d1d7      	bne.n	80234d2 <MobleConfigModel_ProcessNetKeyDelete+0x3a>
 8023522:	e7ca      	b.n	80234ba <MobleConfigModel_ProcessNetKeyDelete+0x22>
 8023524:	2000141c 	.word	0x2000141c
 8023528:	20002514 	.word	0x20002514

0802352c <MobleConfigModel_ProcessNetKeyAdd>:
 802352c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023530:	4606      	mov	r6, r0
 8023532:	b08a      	sub	sp, #40	; 0x28
 8023534:	4618      	mov	r0, r3
 8023536:	461a      	mov	r2, r3
 8023538:	f7f4 f9cb 	bl	80178d2 <MobleConfigModelGetNetIdx>
 802353c:	ad02      	add	r5, sp, #8
 802353e:	1c93      	adds	r3, r2, #2
 8023540:	460f      	mov	r7, r1
 8023542:	4604      	mov	r4, r0
 8023544:	3212      	adds	r2, #18
 8023546:	46a8      	mov	r8, r5
 8023548:	6818      	ldr	r0, [r3, #0]
 802354a:	6859      	ldr	r1, [r3, #4]
 802354c:	46ac      	mov	ip, r5
 802354e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8023552:	3308      	adds	r3, #8
 8023554:	4293      	cmp	r3, r2
 8023556:	4665      	mov	r5, ip
 8023558:	d1f6      	bne.n	8023548 <MobleConfigModel_ProcessNetKeyAdd+0x1c>
 802355a:	4b21      	ldr	r3, [pc, #132]	; (80235e0 <MobleConfigModel_ProcessNetKeyAdd+0xb4>)
 802355c:	881a      	ldrh	r2, [r3, #0]
 802355e:	4b21      	ldr	r3, [pc, #132]	; (80235e4 <MobleConfigModel_ProcessNetKeyAdd+0xb8>)
 8023560:	f893 361c 	ldrb.w	r3, [r3, #1564]	; 0x61c
 8023564:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8023568:	bf34      	ite	cc
 802356a:	2500      	movcc	r5, #0
 802356c:	2504      	movcs	r5, #4
 802356e:	429a      	cmp	r2, r3
 8023570:	d103      	bne.n	802357a <MobleConfigModel_ProcessNetKeyAdd+0x4e>
 8023572:	4620      	mov	r0, r4
 8023574:	f7f5 fd3e 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 8023578:	b358      	cbz	r0, 80235d2 <MobleConfigModel_ProcessNetKeyAdd+0xa6>
 802357a:	bb6d      	cbnz	r5, 80235d8 <MobleConfigModel_ProcessNetKeyAdd+0xac>
 802357c:	4621      	mov	r1, r4
 802357e:	4640      	mov	r0, r8
 8023580:	f7f6 faea 	bl	8019b58 <MoblePalCryptoSetNetworkKey>
 8023584:	4605      	mov	r5, r0
 8023586:	b9e0      	cbnz	r0, 80235c2 <MobleConfigModel_ProcessNetKeyAdd+0x96>
 8023588:	6833      	ldr	r3, [r6, #0]
 802358a:	f8ad 4018 	strh.w	r4, [sp, #24]
 802358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8023590:	f8cd 801c 	str.w	r8, [sp, #28]
 8023594:	859c      	strh	r4, [r3, #44]	; 0x2c
 8023596:	2310      	movs	r3, #16
 8023598:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 802359c:	4b12      	ldr	r3, [pc, #72]	; (80235e8 <MobleConfigModel_ProcessNetKeyAdd+0xbc>)
 802359e:	f88d 5025 	strb.w	r5, [sp, #37]	; 0x25
 80235a2:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80235a6:	a806      	add	r0, sp, #24
 80235a8:	691b      	ldr	r3, [r3, #16]
 80235aa:	4798      	blx	r3
 80235ac:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80235ae:	9300      	str	r3, [sp, #0]
 80235b0:	462a      	mov	r2, r5
 80235b2:	4623      	mov	r3, r4
 80235b4:	4639      	mov	r1, r7
 80235b6:	4630      	mov	r0, r6
 80235b8:	f7ff fecc 	bl	8023354 <MobleConfigModel_SendNetKeyStatus>
 80235bc:	b00a      	add	sp, #40	; 0x28
 80235be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80235c2:	2803      	cmp	r0, #3
 80235c4:	f8ad 4018 	strh.w	r4, [sp, #24]
 80235c8:	d001      	beq.n	80235ce <MobleConfigModel_ProcessNetKeyAdd+0xa2>
 80235ca:	2505      	movs	r5, #5
 80235cc:	e7e6      	b.n	802359c <MobleConfigModel_ProcessNetKeyAdd+0x70>
 80235ce:	2506      	movs	r5, #6
 80235d0:	e7e4      	b.n	802359c <MobleConfigModel_ProcessNetKeyAdd+0x70>
 80235d2:	f8ad 4018 	strh.w	r4, [sp, #24]
 80235d6:	e7f8      	b.n	80235ca <MobleConfigModel_ProcessNetKeyAdd+0x9e>
 80235d8:	f8ad 4018 	strh.w	r4, [sp, #24]
 80235dc:	e7de      	b.n	802359c <MobleConfigModel_ProcessNetKeyAdd+0x70>
 80235de:	bf00      	nop
 80235e0:	20000008 	.word	0x20000008
 80235e4:	2000141c 	.word	0x2000141c
 80235e8:	20002514 	.word	0x20002514

080235ec <MobleConfigModel_ProcessNetKeyGet>:
 80235ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235f0:	b086      	sub	sp, #24
 80235f2:	f10d 0804 	add.w	r8, sp, #4
 80235f6:	4605      	mov	r5, r0
 80235f8:	460f      	mov	r7, r1
 80235fa:	4640      	mov	r0, r8
 80235fc:	f10d 0102 	add.w	r1, sp, #2
 8023600:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8023602:	f7f5 fddb 	bl	80191bc <MoblePalCrypto_GetNetKeyIndexes>
 8023606:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 802360a:	f8ad 3010 	strh.w	r3, [sp, #16]
 802360e:	4b16      	ldr	r3, [pc, #88]	; (8023668 <MobleConfigModel_ProcessNetKeyGet+0x7c>)
 8023610:	f8cd 800c 	str.w	r8, [sp, #12]
 8023614:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023618:	2600      	movs	r6, #0
 802361a:	699b      	ldr	r3, [r3, #24]
 802361c:	f88d 6012 	strb.w	r6, [sp, #18]
 8023620:	a803      	add	r0, sp, #12
 8023622:	4798      	blx	r3
 8023624:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8023628:	b935      	cbnz	r5, 8023638 <MobleConfigModel_ProcessNetKeyGet+0x4c>
 802362a:	4b10      	ldr	r3, [pc, #64]	; (802366c <MobleConfigModel_ProcessNetKeyGet+0x80>)
 802362c:	4a10      	ldr	r2, [pc, #64]	; (8023670 <MobleConfigModel_ProcessNetKeyGet+0x84>)
 802362e:	4811      	ldr	r0, [pc, #68]	; (8023674 <MobleConfigModel_ProcessNetKeyGet+0x88>)
 8023630:	f640 01e4 	movw	r1, #2276	; 0x8e4
 8023634:	f005 fa48 	bl	8028ac8 <__assert_func>
 8023638:	2343      	movs	r3, #67	; 0x43
 802363a:	7023      	strb	r3, [r4, #0]
 802363c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8023640:	7063      	strb	r3, [r4, #1]
 8023642:	f104 0208 	add.w	r2, r4, #8
 8023646:	4643      	mov	r3, r8
 8023648:	70a6      	strb	r6, [r4, #2]
 802364a:	70e6      	strb	r6, [r4, #3]
 802364c:	4630      	mov	r0, r6
 802364e:	f7f4 f947 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8023652:	4623      	mov	r3, r4
 8023654:	f8c4 00a3 	str.w	r0, [r4, #163]	; 0xa3
 8023658:	463a      	mov	r2, r7
 802365a:	2101      	movs	r1, #1
 802365c:	4628      	mov	r0, r5
 802365e:	f7ff fa3f 	bl	8022ae0 <MobleModelSendPacket>
 8023662:	b006      	add	sp, #24
 8023664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023668:	20002514 	.word	0x20002514
 802366c:	08033381 	.word	0x08033381
 8023670:	080320ea 	.word	0x080320ea
 8023674:	08033393 	.word	0x08033393

08023678 <MobleConfigModel_SendModelSubscriptionStatus>:
 8023678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802367c:	460e      	mov	r6, r1
 802367e:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 8023682:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 8023686:	4619      	mov	r1, r3
 8023688:	4605      	mov	r5, r0
 802368a:	b930      	cbnz	r0, 802369a <MobleConfigModel_SendModelSubscriptionStatus+0x22>
 802368c:	4b18      	ldr	r3, [pc, #96]	; (80236f0 <MobleConfigModel_SendModelSubscriptionStatus+0x78>)
 802368e:	4a19      	ldr	r2, [pc, #100]	; (80236f4 <MobleConfigModel_SendModelSubscriptionStatus+0x7c>)
 8023690:	4819      	ldr	r0, [pc, #100]	; (80236f8 <MobleConfigModel_SendModelSubscriptionStatus+0x80>)
 8023692:	f640 01c3 	movw	r1, #2243	; 0x8c3
 8023696:	f005 fa17 	bl	8028ac8 <__assert_func>
 802369a:	201f      	movs	r0, #31
 802369c:	2300      	movs	r3, #0
 802369e:	7020      	strb	r0, [r4, #0]
 80236a0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 80236a4:	70a3      	strb	r3, [r4, #2]
 80236a6:	70e3      	strb	r3, [r4, #3]
 80236a8:	7060      	strb	r0, [r4, #1]
 80236aa:	7222      	strb	r2, [r4, #8]
 80236ac:	f104 0009 	add.w	r0, r4, #9
 80236b0:	2202      	movs	r2, #2
 80236b2:	f7f8 fb17 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 80236b6:	4641      	mov	r1, r8
 80236b8:	f104 000b 	add.w	r0, r4, #11
 80236bc:	f7f8 fb12 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 80236c0:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80236c4:	bf28      	it	cs
 80236c6:	2204      	movcs	r2, #4
 80236c8:	4639      	mov	r1, r7
 80236ca:	f104 000d 	add.w	r0, r4, #13
 80236ce:	f7f8 fb09 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 80236d2:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80236d6:	bf2c      	ite	cs
 80236d8:	2309      	movcs	r3, #9
 80236da:	2307      	movcc	r3, #7
 80236dc:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 80236e0:	4632      	mov	r2, r6
 80236e2:	4623      	mov	r3, r4
 80236e4:	4628      	mov	r0, r5
 80236e6:	2101      	movs	r1, #1
 80236e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80236ec:	f7ff b9f8 	b.w	8022ae0 <MobleModelSendPacket>
 80236f0:	08033381 	.word	0x08033381
 80236f4:	0803210a 	.word	0x0803210a
 80236f8:	08033393 	.word	0x08033393

080236fc <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite>:
 80236fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023700:	4689      	mov	r9, r1
 8023702:	b08f      	sub	sp, #60	; 0x3c
 8023704:	469a      	mov	sl, r3
 8023706:	4604      	mov	r4, r0
 8023708:	b930      	cbnz	r0, 8023718 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x1c>
 802370a:	4b3c      	ldr	r3, [pc, #240]	; (80237fc <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x100>)
 802370c:	4a3c      	ldr	r2, [pc, #240]	; (8023800 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 802370e:	f241 51b5 	movw	r1, #5557	; 0x15b5
 8023712:	483c      	ldr	r0, [pc, #240]	; (8023804 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x108>)
 8023714:	f005 f9d8 	bl	8028ac8 <__assert_func>
 8023718:	6803      	ldr	r3, [r0, #0]
 802371a:	b923      	cbnz	r3, 8023726 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x2a>
 802371c:	4b3a      	ldr	r3, [pc, #232]	; (8023808 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x10c>)
 802371e:	4a38      	ldr	r2, [pc, #224]	; (8023800 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x104>)
 8023720:	f241 51b6 	movw	r1, #5558	; 0x15b6
 8023724:	e7f5      	b.n	8023712 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x16>
 8023726:	4652      	mov	r2, sl
 8023728:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 802372c:	f852 5b02 	ldr.w	r5, [r2], #2
 8023730:	f893 801c 	ldrb.w	r8, [r3, #28]
 8023734:	b2af      	uxth	r7, r5
 8023736:	f10b 33ff 	add.w	r3, fp, #4294967295
 802373a:	4498      	add	r8, r3
 802373c:	9705      	str	r7, [sp, #20]
 802373e:	463d      	mov	r5, r7
 8023740:	ab06      	add	r3, sp, #24
 8023742:	eba7 070b 	sub.w	r7, r7, fp
 8023746:	fa1f f888 	uxth.w	r8, r8
 802374a:	b2ff      	uxtb	r7, r7
 802374c:	f10a 0e12 	add.w	lr, sl, #18
 8023750:	469c      	mov	ip, r3
 8023752:	6810      	ldr	r0, [r2, #0]
 8023754:	6851      	ldr	r1, [r2, #4]
 8023756:	461e      	mov	r6, r3
 8023758:	c603      	stmia	r6!, {r0, r1}
 802375a:	3208      	adds	r2, #8
 802375c:	4572      	cmp	r2, lr
 802375e:	4633      	mov	r3, r6
 8023760:	d1f7      	bne.n	8023752 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x56>
 8023762:	4660      	mov	r0, ip
 8023764:	f7f5 feaa 	bl	80194bc <MobleConfigModelGetAddressFromVirtual>
 8023768:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802376a:	2b14      	cmp	r3, #20
 802376c:	bf0c      	ite	eq
 802376e:	2102      	moveq	r1, #2
 8023770:	2104      	movne	r1, #4
 8023772:	4606      	mov	r6, r0
 8023774:	aa05      	add	r2, sp, #20
 8023776:	f10a 0012 	add.w	r0, sl, #18
 802377a:	f7f7 fd38 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 802377e:	455d      	cmp	r5, fp
 8023780:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023784:	d001      	beq.n	802378a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x8e>
 8023786:	4545      	cmp	r5, r8
 8023788:	d82f      	bhi.n	80237ea <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xee>
 802378a:	4639      	mov	r1, r7
 802378c:	4650      	mov	r0, sl
 802378e:	f7f8 fd1e 	bl	801c1ce <MobleApplicationModelSupported>
 8023792:	b370      	cbz	r0, 80237f2 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xf6>
 8023794:	4633      	mov	r3, r6
 8023796:	462a      	mov	r2, r5
 8023798:	4651      	mov	r1, sl
 802379a:	4620      	mov	r0, r4
 802379c:	f7fa fb4a 	bl	801de34 <MobleConfigModel_SubscriptionOverwrite>
 80237a0:	4680      	mov	r8, r0
 80237a2:	6820      	ldr	r0, [r4, #0]
 80237a4:	f7f9 fb68 	bl	801ce78 <MobleConfigNetworkSave>
 80237a8:	2301      	movs	r3, #1
 80237aa:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80237ae:	2300      	movs	r3, #0
 80237b0:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80237b4:	4b15      	ldr	r3, [pc, #84]	; (802380c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0x110>)
 80237b6:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80237ba:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80237be:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80237c2:	a80a      	add	r0, sp, #40	; 0x28
 80237c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80237c6:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80237ca:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80237ce:	4798      	blx	r3
 80237d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80237d2:	9600      	str	r6, [sp, #0]
 80237d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80237d8:	4642      	mov	r2, r8
 80237da:	462b      	mov	r3, r5
 80237dc:	4649      	mov	r1, r9
 80237de:	4620      	mov	r0, r4
 80237e0:	f7ff ff4a 	bl	8023678 <MobleConfigModel_SendModelSubscriptionStatus>
 80237e4:	b00f      	add	sp, #60	; 0x3c
 80237e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80237ea:	f04f 0801 	mov.w	r8, #1
 80237ee:	2600      	movs	r6, #0
 80237f0:	e7da      	b.n	80237a8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 80237f2:	f04f 0802 	mov.w	r8, #2
 80237f6:	4606      	mov	r6, r0
 80237f8:	e7d6      	b.n	80237a8 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressOverwrite+0xac>
 80237fa:	bf00      	nop
 80237fc:	08033901 	.word	0x08033901
 8023800:	08032137 	.word	0x08032137
 8023804:	08033393 	.word	0x08033393
 8023808:	0803385c 	.word	0x0803385c
 802380c:	20002514 	.word	0x20002514

08023810 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete>:
 8023810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023814:	4689      	mov	r9, r1
 8023816:	b08f      	sub	sp, #60	; 0x3c
 8023818:	469a      	mov	sl, r3
 802381a:	4604      	mov	r4, r0
 802381c:	b930      	cbnz	r0, 802382c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x1c>
 802381e:	4b3c      	ldr	r3, [pc, #240]	; (8023910 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x100>)
 8023820:	4a3c      	ldr	r2, [pc, #240]	; (8023914 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 8023822:	f241 5152 	movw	r1, #5458	; 0x1552
 8023826:	483c      	ldr	r0, [pc, #240]	; (8023918 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x108>)
 8023828:	f005 f94e 	bl	8028ac8 <__assert_func>
 802382c:	6803      	ldr	r3, [r0, #0]
 802382e:	b923      	cbnz	r3, 802383a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x2a>
 8023830:	4b3a      	ldr	r3, [pc, #232]	; (802391c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x10c>)
 8023832:	4a38      	ldr	r2, [pc, #224]	; (8023914 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x104>)
 8023834:	f241 5153 	movw	r1, #5459	; 0x1553
 8023838:	e7f5      	b.n	8023826 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x16>
 802383a:	4652      	mov	r2, sl
 802383c:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8023840:	f852 5b02 	ldr.w	r5, [r2], #2
 8023844:	f893 801c 	ldrb.w	r8, [r3, #28]
 8023848:	b2af      	uxth	r7, r5
 802384a:	f10b 33ff 	add.w	r3, fp, #4294967295
 802384e:	4498      	add	r8, r3
 8023850:	9705      	str	r7, [sp, #20]
 8023852:	463d      	mov	r5, r7
 8023854:	ab06      	add	r3, sp, #24
 8023856:	eba7 070b 	sub.w	r7, r7, fp
 802385a:	fa1f f888 	uxth.w	r8, r8
 802385e:	b2ff      	uxtb	r7, r7
 8023860:	f10a 0e12 	add.w	lr, sl, #18
 8023864:	469c      	mov	ip, r3
 8023866:	6810      	ldr	r0, [r2, #0]
 8023868:	6851      	ldr	r1, [r2, #4]
 802386a:	461e      	mov	r6, r3
 802386c:	c603      	stmia	r6!, {r0, r1}
 802386e:	3208      	adds	r2, #8
 8023870:	4572      	cmp	r2, lr
 8023872:	4633      	mov	r3, r6
 8023874:	d1f7      	bne.n	8023866 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x56>
 8023876:	4660      	mov	r0, ip
 8023878:	f7f5 fe20 	bl	80194bc <MobleConfigModelGetAddressFromVirtual>
 802387c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 802387e:	2b14      	cmp	r3, #20
 8023880:	bf0c      	ite	eq
 8023882:	2102      	moveq	r1, #2
 8023884:	2104      	movne	r1, #4
 8023886:	4606      	mov	r6, r0
 8023888:	aa05      	add	r2, sp, #20
 802388a:	f10a 0012 	add.w	r0, sl, #18
 802388e:	f7f7 fcae 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8023892:	455d      	cmp	r5, fp
 8023894:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023898:	d001      	beq.n	802389e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x8e>
 802389a:	4545      	cmp	r5, r8
 802389c:	d82f      	bhi.n	80238fe <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xee>
 802389e:	4639      	mov	r1, r7
 80238a0:	4650      	mov	r0, sl
 80238a2:	f7f8 fc94 	bl	801c1ce <MobleApplicationModelSupported>
 80238a6:	b370      	cbz	r0, 8023906 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xf6>
 80238a8:	4633      	mov	r3, r6
 80238aa:	462a      	mov	r2, r5
 80238ac:	4651      	mov	r1, sl
 80238ae:	4620      	mov	r0, r4
 80238b0:	f7fa fbc6 	bl	801e040 <MobleConfigModel_SubscriptionDelete>
 80238b4:	4680      	mov	r8, r0
 80238b6:	6820      	ldr	r0, [r4, #0]
 80238b8:	f7f9 fade 	bl	801ce78 <MobleConfigNetworkSave>
 80238bc:	2301      	movs	r3, #1
 80238be:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80238c2:	2300      	movs	r3, #0
 80238c4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80238c8:	4b15      	ldr	r3, [pc, #84]	; (8023920 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0x110>)
 80238ca:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 80238ce:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80238d2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80238d6:	a80a      	add	r0, sp, #40	; 0x28
 80238d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80238da:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 80238de:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 80238e2:	4798      	blx	r3
 80238e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80238e6:	9600      	str	r6, [sp, #0]
 80238e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80238ec:	4642      	mov	r2, r8
 80238ee:	462b      	mov	r3, r5
 80238f0:	4649      	mov	r1, r9
 80238f2:	4620      	mov	r0, r4
 80238f4:	f7ff fec0 	bl	8023678 <MobleConfigModel_SendModelSubscriptionStatus>
 80238f8:	b00f      	add	sp, #60	; 0x3c
 80238fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80238fe:	f04f 0801 	mov.w	r8, #1
 8023902:	2600      	movs	r6, #0
 8023904:	e7da      	b.n	80238bc <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 8023906:	f04f 0802 	mov.w	r8, #2
 802390a:	4606      	mov	r6, r0
 802390c:	e7d6      	b.n	80238bc <MobleConfigModel_ProcessModelSubscriptionVirtualAddressDelete+0xac>
 802390e:	bf00      	nop
 8023910:	08033901 	.word	0x08033901
 8023914:	08032178 	.word	0x08032178
 8023918:	08033393 	.word	0x08033393
 802391c:	0803385c 	.word	0x0803385c
 8023920:	20002514 	.word	0x20002514

08023924 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd>:
 8023924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023928:	468a      	mov	sl, r1
 802392a:	b08f      	sub	sp, #60	; 0x3c
 802392c:	4699      	mov	r9, r3
 802392e:	4604      	mov	r4, r0
 8023930:	b930      	cbnz	r0, 8023940 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x1c>
 8023932:	4b44      	ldr	r3, [pc, #272]	; (8023a44 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x120>)
 8023934:	4a44      	ldr	r2, [pc, #272]	; (8023a48 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 8023936:	f241 41e8 	movw	r1, #5352	; 0x14e8
 802393a:	4844      	ldr	r0, [pc, #272]	; (8023a4c <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x128>)
 802393c:	f005 f8c4 	bl	8028ac8 <__assert_func>
 8023940:	6803      	ldr	r3, [r0, #0]
 8023942:	b923      	cbnz	r3, 802394e <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x2a>
 8023944:	4b42      	ldr	r3, [pc, #264]	; (8023a50 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x12c>)
 8023946:	4a40      	ldr	r2, [pc, #256]	; (8023a48 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x124>)
 8023948:	f241 41e9 	movw	r1, #5353	; 0x14e9
 802394c:	e7f5      	b.n	802393a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x16>
 802394e:	464a      	mov	r2, r9
 8023950:	f8b3 b002 	ldrh.w	fp, [r3, #2]
 8023954:	f852 5b02 	ldr.w	r5, [r2], #2
 8023958:	f893 801c 	ldrb.w	r8, [r3, #28]
 802395c:	b2af      	uxth	r7, r5
 802395e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8023962:	4498      	add	r8, r3
 8023964:	9705      	str	r7, [sp, #20]
 8023966:	463d      	mov	r5, r7
 8023968:	ab06      	add	r3, sp, #24
 802396a:	eba7 070b 	sub.w	r7, r7, fp
 802396e:	fa1f f888 	uxth.w	r8, r8
 8023972:	b2ff      	uxtb	r7, r7
 8023974:	f109 0e12 	add.w	lr, r9, #18
 8023978:	469c      	mov	ip, r3
 802397a:	6810      	ldr	r0, [r2, #0]
 802397c:	6851      	ldr	r1, [r2, #4]
 802397e:	461e      	mov	r6, r3
 8023980:	c603      	stmia	r6!, {r0, r1}
 8023982:	3208      	adds	r2, #8
 8023984:	4572      	cmp	r2, lr
 8023986:	4633      	mov	r3, r6
 8023988:	d1f7      	bne.n	802397a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x56>
 802398a:	4660      	mov	r0, ip
 802398c:	f7f5 fd96 	bl	80194bc <MobleConfigModelGetAddressFromVirtual>
 8023990:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8023992:	2b14      	cmp	r3, #20
 8023994:	bf0c      	ite	eq
 8023996:	2102      	moveq	r1, #2
 8023998:	2104      	movne	r1, #4
 802399a:	4606      	mov	r6, r0
 802399c:	aa05      	add	r2, sp, #20
 802399e:	f109 0012 	add.w	r0, r9, #18
 80239a2:	f7f7 fc24 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 80239a6:	455d      	cmp	r5, fp
 80239a8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80239ac:	f10d 0b28 	add.w	fp, sp, #40	; 0x28
 80239b0:	d001      	beq.n	80239b6 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x92>
 80239b2:	4545      	cmp	r5, r8
 80239b4:	d83d      	bhi.n	8023a32 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x10e>
 80239b6:	4639      	mov	r1, r7
 80239b8:	4648      	mov	r0, r9
 80239ba:	f7f8 fc08 	bl	801c1ce <MobleApplicationModelSupported>
 80239be:	2800      	cmp	r0, #0
 80239c0:	d03b      	beq.n	8023a3a <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x116>
 80239c2:	6823      	ldr	r3, [r4, #0]
 80239c4:	f10d 0c18 	add.w	ip, sp, #24
 80239c8:	330c      	adds	r3, #12
 80239ca:	4662      	mov	r2, ip
 80239cc:	ca03      	ldmia	r2!, {r0, r1}
 80239ce:	455a      	cmp	r2, fp
 80239d0:	6018      	str	r0, [r3, #0]
 80239d2:	6059      	str	r1, [r3, #4]
 80239d4:	4694      	mov	ip, r2
 80239d6:	f103 0308 	add.w	r3, r3, #8
 80239da:	d1f6      	bne.n	80239ca <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xa6>
 80239dc:	4633      	mov	r3, r6
 80239de:	462a      	mov	r2, r5
 80239e0:	4649      	mov	r1, r9
 80239e2:	4620      	mov	r0, r4
 80239e4:	f7fa fa8a 	bl	801defc <MobleConfigModel_SubscriptionAdd>
 80239e8:	4680      	mov	r8, r0
 80239ea:	6820      	ldr	r0, [r4, #0]
 80239ec:	f7f9 fa44 	bl	801ce78 <MobleConfigNetworkSave>
 80239f0:	2301      	movs	r3, #1
 80239f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 80239f6:	2300      	movs	r3, #0
 80239f8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 80239fc:	4b15      	ldr	r3, [pc, #84]	; (8023a54 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0x130>)
 80239fe:	f88d 7028 	strb.w	r7, [sp, #40]	; 0x28
 8023a02:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023a06:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8023a0a:	4658      	mov	r0, fp
 8023a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023a0e:	f8ad 6030 	strh.w	r6, [sp, #48]	; 0x30
 8023a12:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
 8023a16:	4798      	blx	r3
 8023a18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8023a1a:	9600      	str	r6, [sp, #0]
 8023a1c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8023a20:	4642      	mov	r2, r8
 8023a22:	462b      	mov	r3, r5
 8023a24:	4651      	mov	r1, sl
 8023a26:	4620      	mov	r0, r4
 8023a28:	f7ff fe26 	bl	8023678 <MobleConfigModel_SendModelSubscriptionStatus>
 8023a2c:	b00f      	add	sp, #60	; 0x3c
 8023a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023a32:	f04f 0801 	mov.w	r8, #1
 8023a36:	2600      	movs	r6, #0
 8023a38:	e7da      	b.n	80239f0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 8023a3a:	f04f 0802 	mov.w	r8, #2
 8023a3e:	4606      	mov	r6, r0
 8023a40:	e7d6      	b.n	80239f0 <MobleConfigModel_ProcessModelSubscriptionVirtualAddressAdd+0xcc>
 8023a42:	bf00      	nop
 8023a44:	08033901 	.word	0x08033901
 8023a48:	080321b6 	.word	0x080321b6
 8023a4c:	08033393 	.word	0x08033393
 8023a50:	0803385c 	.word	0x0803385c
 8023a54:	20002514 	.word	0x20002514

08023a58 <MobleConfigModel_ProcessModelSubscriptionOverwrite>:
 8023a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a5c:	4689      	mov	r9, r1
 8023a5e:	b08b      	sub	sp, #44	; 0x2c
 8023a60:	4604      	mov	r4, r0
 8023a62:	b930      	cbnz	r0, 8023a72 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x1a>
 8023a64:	4b31      	ldr	r3, [pc, #196]	; (8023b2c <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd4>)
 8023a66:	4a32      	ldr	r2, [pc, #200]	; (8023b30 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 8023a68:	f241 4182 	movw	r1, #5250	; 0x1482
 8023a6c:	4831      	ldr	r0, [pc, #196]	; (8023b34 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xdc>)
 8023a6e:	f005 f82b 	bl	8028ac8 <__assert_func>
 8023a72:	6802      	ldr	r2, [r0, #0]
 8023a74:	b922      	cbnz	r2, 8023a80 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x28>
 8023a76:	4b30      	ldr	r3, [pc, #192]	; (8023b38 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe0>)
 8023a78:	4a2d      	ldr	r2, [pc, #180]	; (8023b30 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xd8>)
 8023a7a:	f241 4183 	movw	r1, #5251	; 0x1483
 8023a7e:	e7f5      	b.n	8023a6c <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x14>
 8023a80:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023a84:	7f16      	ldrb	r6, [r2, #28]
 8023a86:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8023a8a:	681d      	ldr	r5, [r3, #0]
 8023a8c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023a90:	4416      	add	r6, r2
 8023a92:	b2ba      	uxth	r2, r7
 8023a94:	9205      	str	r2, [sp, #20]
 8023a96:	4617      	mov	r7, r2
 8023a98:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023a9a:	2a06      	cmp	r2, #6
 8023a9c:	fa1f f885 	uxth.w	r8, r5
 8023aa0:	bf0c      	ite	eq
 8023aa2:	2102      	moveq	r1, #2
 8023aa4:	2104      	movne	r1, #4
 8023aa6:	aa05      	add	r2, sp, #20
 8023aa8:	1d18      	adds	r0, r3, #4
 8023aaa:	f7f7 fba0 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8023aae:	eba5 050b 	sub.w	r5, r5, fp
 8023ab2:	45d8      	cmp	r8, fp
 8023ab4:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023ab8:	b2b6      	uxth	r6, r6
 8023aba:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8023abe:	d001      	beq.n	8023ac4 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x6c>
 8023ac0:	45b0      	cmp	r8, r6
 8023ac2:	d82e      	bhi.n	8023b22 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xca>
 8023ac4:	4629      	mov	r1, r5
 8023ac6:	4650      	mov	r0, sl
 8023ac8:	f7f8 fb81 	bl	801c1ce <MobleApplicationModelSupported>
 8023acc:	b358      	cbz	r0, 8023b26 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xce>
 8023ace:	463b      	mov	r3, r7
 8023ad0:	4642      	mov	r2, r8
 8023ad2:	4651      	mov	r1, sl
 8023ad4:	4620      	mov	r0, r4
 8023ad6:	f7fa f9ad 	bl	801de34 <MobleConfigModel_SubscriptionOverwrite>
 8023ada:	4606      	mov	r6, r0
 8023adc:	6820      	ldr	r0, [r4, #0]
 8023ade:	f7f9 f9cb 	bl	801ce78 <MobleConfigNetworkSave>
 8023ae2:	2300      	movs	r3, #0
 8023ae4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8023ae8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023aec:	4b13      	ldr	r3, [pc, #76]	; (8023b3c <MobleConfigModel_ProcessModelSubscriptionOverwrite+0xe4>)
 8023aee:	f88d 5018 	strb.w	r5, [sp, #24]
 8023af2:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023af6:	f8cd a01c 	str.w	sl, [sp, #28]
 8023afa:	a806      	add	r0, sp, #24
 8023afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8023afe:	f8ad 7020 	strh.w	r7, [sp, #32]
 8023b02:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8023b06:	4798      	blx	r3
 8023b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023b0a:	9700      	str	r7, [sp, #0]
 8023b0c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023b10:	4632      	mov	r2, r6
 8023b12:	4643      	mov	r3, r8
 8023b14:	4649      	mov	r1, r9
 8023b16:	4620      	mov	r0, r4
 8023b18:	f7ff fdae 	bl	8023678 <MobleConfigModel_SendModelSubscriptionStatus>
 8023b1c:	b00b      	add	sp, #44	; 0x2c
 8023b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b22:	2601      	movs	r6, #1
 8023b24:	e7dd      	b.n	8023ae2 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 8023b26:	2602      	movs	r6, #2
 8023b28:	e7db      	b.n	8023ae2 <MobleConfigModel_ProcessModelSubscriptionOverwrite+0x8a>
 8023b2a:	bf00      	nop
 8023b2c:	08033901 	.word	0x08033901
 8023b30:	080321f1 	.word	0x080321f1
 8023b34:	08033393 	.word	0x08033393
 8023b38:	0803385c 	.word	0x0803385c
 8023b3c:	20002514 	.word	0x20002514

08023b40 <MobleConfigModel_ProcessModelSubscriptionDeleteAll>:
 8023b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b44:	4605      	mov	r5, r0
 8023b46:	b08d      	sub	sp, #52	; 0x34
 8023b48:	682a      	ldr	r2, [r5, #0]
 8023b4a:	4618      	mov	r0, r3
 8023b4c:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8023b50:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8023b52:	f850 6b02 	ldr.w	r6, [r0], #2
 8023b56:	2a04      	cmp	r2, #4
 8023b58:	4688      	mov	r8, r1
 8023b5a:	b2b4      	uxth	r4, r6
 8023b5c:	bf0c      	ite	eq
 8023b5e:	2102      	moveq	r1, #2
 8023b60:	2104      	movne	r1, #4
 8023b62:	aa07      	add	r2, sp, #28
 8023b64:	9407      	str	r4, [sp, #28]
 8023b66:	f7f7 fb42 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8023b6a:	6828      	ldr	r0, [r5, #0]
 8023b6c:	9f07      	ldr	r7, [sp, #28]
 8023b6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8023b70:	7f02      	ldrb	r2, [r0, #28]
 8023b72:	8819      	ldrh	r1, [r3, #0]
 8023b74:	42a1      	cmp	r1, r4
 8023b76:	4626      	mov	r6, r4
 8023b78:	d10a      	bne.n	8023b90 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x50>
 8023b7a:	2f02      	cmp	r7, #2
 8023b7c:	d108      	bne.n	8023b90 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x50>
 8023b7e:	2100      	movs	r1, #0
 8023b80:	f8a3 1066 	strh.w	r1, [r3, #102]	; 0x66
 8023b84:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
 8023b88:	9205      	str	r2, [sp, #20]
 8023b8a:	f7f9 f975 	bl	801ce78 <MobleConfigNetworkSave>
 8023b8e:	9a05      	ldr	r2, [sp, #20]
 8023b90:	2300      	movs	r3, #0
 8023b92:	4699      	mov	r9, r3
 8023b94:	b2d9      	uxtb	r1, r3
 8023b96:	428a      	cmp	r2, r1
 8023b98:	d92e      	bls.n	8023bf8 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xb8>
 8023b9a:	f8d5 b000 	ldr.w	fp, [r5]
 8023b9e:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 8023ba2:	f04f 0901 	mov.w	r9, #1
 8023ba6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 8023ba8:	8801      	ldrh	r1, [r0, #0]
 8023baa:	42b1      	cmp	r1, r6
 8023bac:	f103 0301 	add.w	r3, r3, #1
 8023bb0:	d1f0      	bne.n	8023b94 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x54>
 8023bb2:	2300      	movs	r3, #0
 8023bb4:	f04f 0c38 	mov.w	ip, #56	; 0x38
 8023bb8:	f100 0e78 	add.w	lr, r0, #120	; 0x78
 8023bbc:	fb0c f103 	mul.w	r1, ip, r3
 8023bc0:	f85e 2001 	ldr.w	r2, [lr, r1]
 8023bc4:	4297      	cmp	r7, r2
 8023bc6:	d112      	bne.n	8023bee <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xae>
 8023bc8:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8023bcc:	2214      	movs	r2, #20
 8023bce:	2100      	movs	r1, #0
 8023bd0:	4418      	add	r0, r3
 8023bd2:	f005 fe6f 	bl	80298b4 <memset>
 8023bd6:	4658      	mov	r0, fp
 8023bd8:	f7f9 f94e 	bl	801ce78 <MobleConfigNetworkSave>
 8023bdc:	eba4 040a 	sub.w	r4, r4, sl
 8023be0:	b2e4      	uxtb	r4, r4
 8023be2:	f04f 0900 	mov.w	r9, #0
 8023be6:	6828      	ldr	r0, [r5, #0]
 8023be8:	f7f9 f946 	bl	801ce78 <MobleConfigNetworkSave>
 8023bec:	e00a      	b.n	8023c04 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xc4>
 8023bee:	3301      	adds	r3, #1
 8023bf0:	2b0b      	cmp	r3, #11
 8023bf2:	d1e3      	bne.n	8023bbc <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x7c>
 8023bf4:	f04f 0902 	mov.w	r9, #2
 8023bf8:	eba4 040a 	sub.w	r4, r4, sl
 8023bfc:	f1b9 0f02 	cmp.w	r9, #2
 8023c00:	b2e4      	uxtb	r4, r4
 8023c02:	d1f0      	bne.n	8023be6 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0xa6>
 8023c04:	2301      	movs	r3, #1
 8023c06:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8023c0a:	4b0e      	ldr	r3, [pc, #56]	; (8023c44 <MobleConfigModel_ProcessModelSubscriptionDeleteAll+0x104>)
 8023c0c:	f88d 4020 	strb.w	r4, [sp, #32]
 8023c10:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023c14:	9709      	str	r7, [sp, #36]	; 0x24
 8023c16:	2400      	movs	r4, #0
 8023c18:	a808      	add	r0, sp, #32
 8023c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023c1c:	940a      	str	r4, [sp, #40]	; 0x28
 8023c1e:	4798      	blx	r3
 8023c20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8023c22:	9400      	str	r4, [sp, #0]
 8023c24:	f1b9 0f02 	cmp.w	r9, #2
 8023c28:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8023c2c:	bf08      	it	eq
 8023c2e:	2205      	moveq	r2, #5
 8023c30:	4633      	mov	r3, r6
 8023c32:	bf18      	it	ne
 8023c34:	4622      	movne	r2, r4
 8023c36:	4641      	mov	r1, r8
 8023c38:	4628      	mov	r0, r5
 8023c3a:	f7ff fd1d 	bl	8023678 <MobleConfigModel_SendModelSubscriptionStatus>
 8023c3e:	b00d      	add	sp, #52	; 0x34
 8023c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023c44:	20002514 	.word	0x20002514

08023c48 <MobleConfigModel_ProcessModelSubscriptionDelete>:
 8023c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023c4c:	4689      	mov	r9, r1
 8023c4e:	b08b      	sub	sp, #44	; 0x2c
 8023c50:	4604      	mov	r4, r0
 8023c52:	b930      	cbnz	r0, 8023c62 <MobleConfigModel_ProcessModelSubscriptionDelete+0x1a>
 8023c54:	4b31      	ldr	r3, [pc, #196]	; (8023d1c <MobleConfigModel_ProcessModelSubscriptionDelete+0xd4>)
 8023c56:	4a32      	ldr	r2, [pc, #200]	; (8023d20 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8023c58:	f241 31e5 	movw	r1, #5093	; 0x13e5
 8023c5c:	4831      	ldr	r0, [pc, #196]	; (8023d24 <MobleConfigModel_ProcessModelSubscriptionDelete+0xdc>)
 8023c5e:	f004 ff33 	bl	8028ac8 <__assert_func>
 8023c62:	6802      	ldr	r2, [r0, #0]
 8023c64:	b922      	cbnz	r2, 8023c70 <MobleConfigModel_ProcessModelSubscriptionDelete+0x28>
 8023c66:	4b30      	ldr	r3, [pc, #192]	; (8023d28 <MobleConfigModel_ProcessModelSubscriptionDelete+0xe0>)
 8023c68:	4a2d      	ldr	r2, [pc, #180]	; (8023d20 <MobleConfigModel_ProcessModelSubscriptionDelete+0xd8>)
 8023c6a:	f241 31e6 	movw	r1, #5094	; 0x13e6
 8023c6e:	e7f5      	b.n	8023c5c <MobleConfigModel_ProcessModelSubscriptionDelete+0x14>
 8023c70:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023c74:	7f16      	ldrb	r6, [r2, #28]
 8023c76:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8023c7a:	681d      	ldr	r5, [r3, #0]
 8023c7c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023c80:	4416      	add	r6, r2
 8023c82:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023c84:	b2b9      	uxth	r1, r7
 8023c86:	2a06      	cmp	r2, #6
 8023c88:	9105      	str	r1, [sp, #20]
 8023c8a:	fa1f f885 	uxth.w	r8, r5
 8023c8e:	460f      	mov	r7, r1
 8023c90:	aa05      	add	r2, sp, #20
 8023c92:	bf0c      	ite	eq
 8023c94:	2102      	moveq	r1, #2
 8023c96:	2104      	movne	r1, #4
 8023c98:	1d18      	adds	r0, r3, #4
 8023c9a:	f7f7 faa8 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8023c9e:	eba5 050b 	sub.w	r5, r5, fp
 8023ca2:	45d8      	cmp	r8, fp
 8023ca4:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023ca8:	b2b6      	uxth	r6, r6
 8023caa:	f005 05ff 	and.w	r5, r5, #255	; 0xff
 8023cae:	d001      	beq.n	8023cb4 <MobleConfigModel_ProcessModelSubscriptionDelete+0x6c>
 8023cb0:	45b0      	cmp	r8, r6
 8023cb2:	d82e      	bhi.n	8023d12 <MobleConfigModel_ProcessModelSubscriptionDelete+0xca>
 8023cb4:	4629      	mov	r1, r5
 8023cb6:	4650      	mov	r0, sl
 8023cb8:	f7f8 fa89 	bl	801c1ce <MobleApplicationModelSupported>
 8023cbc:	b358      	cbz	r0, 8023d16 <MobleConfigModel_ProcessModelSubscriptionDelete+0xce>
 8023cbe:	463b      	mov	r3, r7
 8023cc0:	4642      	mov	r2, r8
 8023cc2:	4651      	mov	r1, sl
 8023cc4:	4620      	mov	r0, r4
 8023cc6:	f7fa f9bb 	bl	801e040 <MobleConfigModel_SubscriptionDelete>
 8023cca:	4606      	mov	r6, r0
 8023ccc:	6820      	ldr	r0, [r4, #0]
 8023cce:	f7f9 f8d3 	bl	801ce78 <MobleConfigNetworkSave>
 8023cd2:	2300      	movs	r3, #0
 8023cd4:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8023cd8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023cdc:	4b13      	ldr	r3, [pc, #76]	; (8023d2c <MobleConfigModel_ProcessModelSubscriptionDelete+0xe4>)
 8023cde:	f88d 5018 	strb.w	r5, [sp, #24]
 8023ce2:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023ce6:	f8cd a01c 	str.w	sl, [sp, #28]
 8023cea:	a806      	add	r0, sp, #24
 8023cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8023cee:	f8ad 7020 	strh.w	r7, [sp, #32]
 8023cf2:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8023cf6:	4798      	blx	r3
 8023cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023cfa:	9700      	str	r7, [sp, #0]
 8023cfc:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023d00:	4632      	mov	r2, r6
 8023d02:	4643      	mov	r3, r8
 8023d04:	4649      	mov	r1, r9
 8023d06:	4620      	mov	r0, r4
 8023d08:	f7ff fcb6 	bl	8023678 <MobleConfigModel_SendModelSubscriptionStatus>
 8023d0c:	b00b      	add	sp, #44	; 0x2c
 8023d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023d12:	2601      	movs	r6, #1
 8023d14:	e7dd      	b.n	8023cd2 <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 8023d16:	2602      	movs	r6, #2
 8023d18:	e7db      	b.n	8023cd2 <MobleConfigModel_ProcessModelSubscriptionDelete+0x8a>
 8023d1a:	bf00      	nop
 8023d1c:	08033901 	.word	0x08033901
 8023d20:	08032224 	.word	0x08032224
 8023d24:	08033393 	.word	0x08033393
 8023d28:	0803385c 	.word	0x0803385c
 8023d2c:	20002514 	.word	0x20002514

08023d30 <MobleConfigModel_ProcessModelSubscriptionAdd>:
 8023d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023d34:	6802      	ldr	r2, [r0, #0]
 8023d36:	f8d3 7002 	ldr.w	r7, [r3, #2]
 8023d3a:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 8023d3e:	7f16      	ldrb	r6, [r2, #28]
 8023d40:	681c      	ldr	r4, [r3, #0]
 8023d42:	b08b      	sub	sp, #44	; 0x2c
 8023d44:	f10b 32ff 	add.w	r2, fp, #4294967295
 8023d48:	4416      	add	r6, r2
 8023d4a:	b2ba      	uxth	r2, r7
 8023d4c:	9205      	str	r2, [sp, #20]
 8023d4e:	4617      	mov	r7, r2
 8023d50:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8023d52:	2a06      	cmp	r2, #6
 8023d54:	4689      	mov	r9, r1
 8023d56:	fa1f f884 	uxth.w	r8, r4
 8023d5a:	bf0c      	ite	eq
 8023d5c:	2102      	moveq	r1, #2
 8023d5e:	2104      	movne	r1, #4
 8023d60:	4605      	mov	r5, r0
 8023d62:	aa05      	add	r2, sp, #20
 8023d64:	1d18      	adds	r0, r3, #4
 8023d66:	f7f7 fa42 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8023d6a:	eba4 040b 	sub.w	r4, r4, fp
 8023d6e:	45c3      	cmp	fp, r8
 8023d70:	f8dd a014 	ldr.w	sl, [sp, #20]
 8023d74:	b2b6      	uxth	r6, r6
 8023d76:	f004 04ff 	and.w	r4, r4, #255	; 0xff
 8023d7a:	d025      	beq.n	8023dc8 <MobleConfigModel_ProcessModelSubscriptionAdd+0x98>
 8023d7c:	4546      	cmp	r6, r8
 8023d7e:	d223      	bcs.n	8023dc8 <MobleConfigModel_ProcessModelSubscriptionAdd+0x98>
 8023d80:	6828      	ldr	r0, [r5, #0]
 8023d82:	f7f9 f879 	bl	801ce78 <MobleConfigNetworkSave>
 8023d86:	2601      	movs	r6, #1
 8023d88:	2300      	movs	r3, #0
 8023d8a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8023d8e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8023d92:	4b15      	ldr	r3, [pc, #84]	; (8023de8 <MobleConfigModel_ProcessModelSubscriptionAdd+0xb8>)
 8023d94:	f88d 4018 	strb.w	r4, [sp, #24]
 8023d98:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8023d9c:	f8cd a01c 	str.w	sl, [sp, #28]
 8023da0:	a806      	add	r0, sp, #24
 8023da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8023da4:	f8ad 7020 	strh.w	r7, [sp, #32]
 8023da8:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8023dac:	4798      	blx	r3
 8023dae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8023db0:	9700      	str	r7, [sp, #0]
 8023db2:	e9cd a301 	strd	sl, r3, [sp, #4]
 8023db6:	4632      	mov	r2, r6
 8023db8:	4643      	mov	r3, r8
 8023dba:	4649      	mov	r1, r9
 8023dbc:	4628      	mov	r0, r5
 8023dbe:	f7ff fc5b 	bl	8023678 <MobleConfigModel_SendModelSubscriptionStatus>
 8023dc2:	b00b      	add	sp, #44	; 0x2c
 8023dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023dc8:	4621      	mov	r1, r4
 8023dca:	4650      	mov	r0, sl
 8023dcc:	f7f8 f9ff 	bl	801c1ce <MobleApplicationModelSupported>
 8023dd0:	b138      	cbz	r0, 8023de2 <MobleConfigModel_ProcessModelSubscriptionAdd+0xb2>
 8023dd2:	463b      	mov	r3, r7
 8023dd4:	4642      	mov	r2, r8
 8023dd6:	4651      	mov	r1, sl
 8023dd8:	4628      	mov	r0, r5
 8023dda:	f7fa f88f 	bl	801defc <MobleConfigModel_SubscriptionAdd>
 8023dde:	4606      	mov	r6, r0
 8023de0:	e7d2      	b.n	8023d88 <MobleConfigModel_ProcessModelSubscriptionAdd+0x58>
 8023de2:	2602      	movs	r6, #2
 8023de4:	e7d0      	b.n	8023d88 <MobleConfigModel_ProcessModelSubscriptionAdd+0x58>
 8023de6:	bf00      	nop
 8023de8:	20002514 	.word	0x20002514

08023dec <MobleConfigModel_SendModelPublicationStatus>:
 8023dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023df0:	b085      	sub	sp, #20
 8023df2:	460e      	mov	r6, r1
 8023df4:	f89d 404c 	ldrb.w	r4, [sp, #76]	; 0x4c
 8023df8:	9401      	str	r4, [sp, #4]
 8023dfa:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 8023dfe:	9402      	str	r4, [sp, #8]
 8023e00:	4619      	mov	r1, r3
 8023e02:	e9dd 7415 	ldrd	r7, r4, [sp, #84]	; 0x54
 8023e06:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8023e0a:	f8bd b03c 	ldrh.w	fp, [sp, #60]	; 0x3c
 8023e0e:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8023e12:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 8023e16:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
 8023e1a:	4605      	mov	r5, r0
 8023e1c:	b930      	cbnz	r0, 8023e2c <MobleConfigModel_SendModelPublicationStatus+0x40>
 8023e1e:	4b25      	ldr	r3, [pc, #148]	; (8023eb4 <MobleConfigModel_SendModelPublicationStatus+0xc8>)
 8023e20:	4a25      	ldr	r2, [pc, #148]	; (8023eb8 <MobleConfigModel_SendModelPublicationStatus+0xcc>)
 8023e22:	4826      	ldr	r0, [pc, #152]	; (8023ebc <MobleConfigModel_SendModelPublicationStatus+0xd0>)
 8023e24:	f640 0199 	movw	r1, #2201	; 0x899
 8023e28:	f004 fe4e 	bl	8028ac8 <__assert_func>
 8023e2c:	f04f 0c19 	mov.w	ip, #25
 8023e30:	2000      	movs	r0, #0
 8023e32:	f884 c000 	strb.w	ip, [r4]
 8023e36:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
 8023e3a:	f884 c001 	strb.w	ip, [r4, #1]
 8023e3e:	70a0      	strb	r0, [r4, #2]
 8023e40:	70e0      	strb	r0, [r4, #3]
 8023e42:	7222      	strb	r2, [r4, #8]
 8023e44:	f104 0009 	add.w	r0, r4, #9
 8023e48:	2202      	movs	r2, #2
 8023e4a:	9303      	str	r3, [sp, #12]
 8023e4c:	f7f7 ff4a 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8023e50:	9b03      	ldr	r3, [sp, #12]
 8023e52:	f104 000b 	add.w	r0, r4, #11
 8023e56:	4619      	mov	r1, r3
 8023e58:	f7f7 ff44 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8023e5c:	4659      	mov	r1, fp
 8023e5e:	f104 000d 	add.w	r0, r4, #13
 8023e62:	f7f7 ff3f 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8023e66:	7ba3      	ldrb	r3, [r4, #14]
 8023e68:	f884 900f 	strb.w	r9, [r4, #15]
 8023e6c:	ea43 1a0a 	orr.w	sl, r3, sl, lsl #4
 8023e70:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
 8023e74:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8023e78:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8023e7c:	7463      	strb	r3, [r4, #17]
 8023e7e:	bf28      	it	cs
 8023e80:	2204      	movcs	r2, #4
 8023e82:	4639      	mov	r1, r7
 8023e84:	f884 a00e 	strb.w	sl, [r4, #14]
 8023e88:	f884 8010 	strb.w	r8, [r4, #16]
 8023e8c:	f104 0012 	add.w	r0, r4, #18
 8023e90:	f7f7 ff28 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8023e94:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8023e98:	bf2c      	ite	cs
 8023e9a:	230e      	movcs	r3, #14
 8023e9c:	230c      	movcc	r3, #12
 8023e9e:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8023ea2:	4632      	mov	r2, r6
 8023ea4:	4623      	mov	r3, r4
 8023ea6:	2101      	movs	r1, #1
 8023ea8:	4628      	mov	r0, r5
 8023eaa:	b005      	add	sp, #20
 8023eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023eb0:	f7fe be16 	b.w	8022ae0 <MobleModelSendPacket>
 8023eb4:	08033381 	.word	0x08033381
 8023eb8:	08032254 	.word	0x08032254
 8023ebc:	08033393 	.word	0x08033393

08023ec0 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet>:
 8023ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ec4:	461c      	mov	r4, r3
 8023ec6:	6803      	ldr	r3, [r0, #0]
 8023ec8:	f893 b01c 	ldrb.w	fp, [r3, #28]
 8023ecc:	885b      	ldrh	r3, [r3, #2]
 8023ece:	1e5a      	subs	r2, r3, #1
 8023ed0:	b0a3      	sub	sp, #140	; 0x8c
 8023ed2:	445a      	add	r2, fp
 8023ed4:	b292      	uxth	r2, r2
 8023ed6:	920b      	str	r2, [sp, #44]	; 0x2c
 8023ed8:	4622      	mov	r2, r4
 8023eda:	ae10      	add	r6, sp, #64	; 0x40
 8023edc:	f852 5b02 	ldr.w	r5, [r2], #2
 8023ee0:	fa1f fa85 	uxth.w	sl, r5
 8023ee4:	4680      	mov	r8, r0
 8023ee6:	4689      	mov	r9, r1
 8023ee8:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 8023eec:	4655      	mov	r5, sl
 8023eee:	f104 0e12 	add.w	lr, r4, #18
 8023ef2:	46b4      	mov	ip, r6
 8023ef4:	6810      	ldr	r0, [r2, #0]
 8023ef6:	6851      	ldr	r1, [r2, #4]
 8023ef8:	4637      	mov	r7, r6
 8023efa:	c703      	stmia	r7!, {r0, r1}
 8023efc:	3208      	adds	r2, #8
 8023efe:	4572      	cmp	r2, lr
 8023f00:	463e      	mov	r6, r7
 8023f02:	d1f7      	bne.n	8023ef4 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x34>
 8023f04:	4660      	mov	r0, ip
 8023f06:	930d      	str	r3, [sp, #52]	; 0x34
 8023f08:	f7f5 fad8 	bl	80194bc <MobleConfigModelGetAddressFromVirtual>
 8023f0c:	f8d4 7012 	ldr.w	r7, [r4, #18]
 8023f10:	900c      	str	r0, [sp, #48]	; 0x30
 8023f12:	b2ba      	uxth	r2, r7
 8023f14:	920f      	str	r2, [sp, #60]	; 0x3c
 8023f16:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8023f18:	2a19      	cmp	r2, #25
 8023f1a:	bf08      	it	eq
 8023f1c:	2102      	moveq	r1, #2
 8023f1e:	aa0f      	add	r2, sp, #60	; 0x3c
 8023f20:	bf18      	it	ne
 8023f22:	2104      	movne	r1, #4
 8023f24:	f104 0017 	add.w	r0, r4, #23
 8023f28:	f7f7 f961 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8023f2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8023f2e:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 8023f30:	2200      	movs	r2, #0
 8023f32:	42ab      	cmp	r3, r5
 8023f34:	9215      	str	r2, [sp, #84]	; 0x54
 8023f36:	921b      	str	r2, [sp, #108]	; 0x6c
 8023f38:	f88d 2070 	strb.w	r2, [sp, #112]	; 0x70
 8023f3c:	d024      	beq.n	8023f88 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xc8>
 8023f3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8023f40:	42aa      	cmp	r2, r5
 8023f42:	d221      	bcs.n	8023f88 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xc8>
 8023f44:	9614      	str	r6, [sp, #80]	; 0x50
 8023f46:	2201      	movs	r2, #1
 8023f48:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8023f4a:	e9cd 6307 	strd	r6, r3, [sp, #28]
 8023f4e:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 8023f52:	9306      	str	r3, [sp, #24]
 8023f54:	f89d 306f 	ldrb.w	r3, [sp, #111]	; 0x6f
 8023f58:	9305      	str	r3, [sp, #20]
 8023f5a:	f89d 306e 	ldrb.w	r3, [sp, #110]	; 0x6e
 8023f5e:	9304      	str	r3, [sp, #16]
 8023f60:	f89d 306d 	ldrb.w	r3, [sp, #109]	; 0x6d
 8023f64:	9303      	str	r3, [sp, #12]
 8023f66:	f89d 306c 	ldrb.w	r3, [sp, #108]	; 0x6c
 8023f6a:	9302      	str	r3, [sp, #8]
 8023f6c:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 8023f70:	9301      	str	r3, [sp, #4]
 8023f72:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8023f76:	9300      	str	r3, [sp, #0]
 8023f78:	4649      	mov	r1, r9
 8023f7a:	462b      	mov	r3, r5
 8023f7c:	4640      	mov	r0, r8
 8023f7e:	f7ff ff35 	bl	8023dec <MobleConfigModel_SendModelPublicationStatus>
 8023f82:	b023      	add	sp, #140	; 0x8c
 8023f84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023f88:	ebaa 0103 	sub.w	r1, sl, r3
 8023f8c:	b2c9      	uxtb	r1, r1
 8023f8e:	4630      	mov	r0, r6
 8023f90:	f7f8 f91d 	bl	801c1ce <MobleApplicationModelSupported>
 8023f94:	b910      	cbnz	r0, 8023f9c <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xdc>
 8023f96:	9614      	str	r6, [sp, #80]	; 0x50
 8023f98:	2202      	movs	r2, #2
 8023f9a:	e7d5      	b.n	8023f48 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x88>
 8023f9c:	f3c7 070b 	ubfx	r7, r7, #0, #12
 8023fa0:	4638      	mov	r0, r7
 8023fa2:	f7f5 f841 	bl	8019028 <MoblePalCryptoHasAppKey>
 8023fa6:	9614      	str	r6, [sp, #80]	; 0x50
 8023fa8:	b908      	cbnz	r0, 8023fae <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0xee>
 8023faa:	2203      	movs	r2, #3
 8023fac:	e7cc      	b.n	8023f48 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x88>
 8023fae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8023fb0:	f8ad 3054 	strh.w	r3, [sp, #84]	; 0x54
 8023fb4:	7ce3      	ldrb	r3, [r4, #19]
 8023fb6:	f8ad 7056 	strh.w	r7, [sp, #86]	; 0x56
 8023fba:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8023fbe:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 8023fc2:	7d23      	ldrb	r3, [r4, #20]
 8023fc4:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 8023fc8:	7d63      	ldrb	r3, [r4, #21]
 8023fca:	f88d 306e 	strb.w	r3, [sp, #110]	; 0x6e
 8023fce:	7da3      	ldrb	r3, [r4, #22]
 8023fd0:	f003 0207 	and.w	r2, r3, #7
 8023fd4:	f88d 206f 	strb.w	r2, [sp, #111]	; 0x6f
 8023fd8:	08db      	lsrs	r3, r3, #3
 8023fda:	aa14      	add	r2, sp, #80	; 0x50
 8023fdc:	4629      	mov	r1, r5
 8023fde:	4658      	mov	r0, fp
 8023fe0:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
 8023fe4:	f7f6 faae 	bl	801a544 <MoblePalCrypto_UpdateModelPublicationParameters>
 8023fe8:	2200      	movs	r2, #0
 8023fea:	e7ad      	b.n	8023f48 <MobleConfigModel_ProcessModelPublicationVirtualAddressSet+0x88>

08023fec <MobleConfigModel_ProcessModelPublicationSet>:
 8023fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023ff0:	6802      	ldr	r2, [r0, #0]
 8023ff2:	ed2d 8b02 	vpush	{d8}
 8023ff6:	469a      	mov	sl, r3
 8023ff8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8023ffc:	f892 b01c 	ldrb.w	fp, [r2, #28]
 8024000:	f8da 7004 	ldr.w	r7, [sl, #4]
 8024004:	f8da 8000 	ldr.w	r8, [sl]
 8024008:	f109 32ff 	add.w	r2, r9, #4294967295
 802400c:	b0a1      	sub	sp, #132	; 0x84
 802400e:	445a      	add	r2, fp
 8024010:	b293      	uxth	r3, r2
 8024012:	b2ba      	uxth	r2, r7
 8024014:	920c      	str	r2, [sp, #48]	; 0x30
 8024016:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 8024018:	930a      	str	r3, [sp, #40]	; 0x28
 802401a:	2a0b      	cmp	r2, #11
 802401c:	ee08 1a10 	vmov	s16, r1
 8024020:	f8da 3002 	ldr.w	r3, [sl, #2]
 8024024:	930b      	str	r3, [sp, #44]	; 0x2c
 8024026:	fa1f f588 	uxth.w	r5, r8
 802402a:	aa0c      	add	r2, sp, #48	; 0x30
 802402c:	bf0c      	ite	eq
 802402e:	2102      	moveq	r1, #2
 8024030:	2104      	movne	r1, #4
 8024032:	4606      	mov	r6, r0
 8024034:	f10a 0009 	add.w	r0, sl, #9
 8024038:	f7f7 f8d9 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 802403c:	2200      	movs	r2, #0
 802403e:	45a9      	cmp	r9, r5
 8024040:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8024042:	9213      	str	r2, [sp, #76]	; 0x4c
 8024044:	fa5f f888 	uxtb.w	r8, r8
 8024048:	9219      	str	r2, [sp, #100]	; 0x64
 802404a:	f88d 2068 	strb.w	r2, [sp, #104]	; 0x68
 802404e:	d003      	beq.n	8024058 <MobleConfigModel_ProcessModelPublicationSet+0x6c>
 8024050:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8024052:	42ab      	cmp	r3, r5
 8024054:	f0c0 809e 	bcc.w	8024194 <MobleConfigModel_ProcessModelPublicationSet+0x1a8>
 8024058:	eba8 0109 	sub.w	r1, r8, r9
 802405c:	b2c9      	uxtb	r1, r1
 802405e:	4620      	mov	r0, r4
 8024060:	f7f8 f8b5 	bl	801c1ce <MobleApplicationModelSupported>
 8024064:	2800      	cmp	r0, #0
 8024066:	f000 8097 	beq.w	8024198 <MobleConfigModel_ProcessModelPublicationSet+0x1ac>
 802406a:	f3c7 020b 	ubfx	r2, r7, #0, #12
 802406e:	4610      	mov	r0, r2
 8024070:	920a      	str	r2, [sp, #40]	; 0x28
 8024072:	f7f4 ffd9 	bl	8019028 <MoblePalCryptoHasAppKey>
 8024076:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8024078:	2800      	cmp	r0, #0
 802407a:	d14e      	bne.n	802411a <MobleConfigModel_ProcessModelPublicationSet+0x12e>
 802407c:	9412      	str	r4, [sp, #72]	; 0x48
 802407e:	2703      	movs	r7, #3
 8024080:	6830      	ldr	r0, [r6, #0]
 8024082:	f7f8 fef9 	bl	801ce78 <MobleConfigNetworkSave>
 8024086:	2c02      	cmp	r4, #2
 8024088:	d102      	bne.n	8024090 <MobleConfigModel_ProcessModelPublicationSet+0xa4>
 802408a:	4630      	mov	r0, r6
 802408c:	f7f3 fe7e 	bl	8017d8c <BnrgmHealthModelSetPublishTimer.isra.0>
 8024090:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024092:	f88d 8034 	strb.w	r8, [sp, #52]	; 0x34
 8024096:	f8df 8104 	ldr.w	r8, [pc, #260]	; 802419c <MobleConfigModel_ProcessModelPublicationSet+0x1b0>
 802409a:	930f      	str	r3, [sp, #60]	; 0x3c
 802409c:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80240a0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80240a4:	f8d8 36f8 	ldr.w	r3, [r8, #1784]	; 0x6f8
 80240a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80240aa:	9210      	str	r2, [sp, #64]	; 0x40
 80240ac:	a80d      	add	r0, sp, #52	; 0x34
 80240ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80240b0:	940e      	str	r4, [sp, #56]	; 0x38
 80240b2:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
 80240b6:	4798      	blx	r3
 80240b8:	f898 3a39 	ldrb.w	r3, [r8, #2617]	; 0xa39
 80240bc:	f898 2a38 	ldrb.w	r2, [r8, #2616]	; 0xa38
 80240c0:	3301      	adds	r3, #1
 80240c2:	b2db      	uxtb	r3, r3
 80240c4:	429a      	cmp	r2, r3
 80240c6:	f888 3a39 	strb.w	r3, [r8, #2617]	; 0xa39
 80240ca:	bf04      	itt	eq
 80240cc:	2301      	moveq	r3, #1
 80240ce:	f886 32b4 	strbeq.w	r3, [r6, #692]	; 0x2b4
 80240d2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80240d4:	e9cd 4307 	strd	r4, r3, [sp, #28]
 80240d8:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 80240dc:	9306      	str	r3, [sp, #24]
 80240de:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 80240e2:	9305      	str	r3, [sp, #20]
 80240e4:	f89d 3066 	ldrb.w	r3, [sp, #102]	; 0x66
 80240e8:	9304      	str	r3, [sp, #16]
 80240ea:	f89d 3065 	ldrb.w	r3, [sp, #101]	; 0x65
 80240ee:	9303      	str	r3, [sp, #12]
 80240f0:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 80240f4:	9302      	str	r3, [sp, #8]
 80240f6:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
 80240fa:	9301      	str	r3, [sp, #4]
 80240fc:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8024100:	9300      	str	r3, [sp, #0]
 8024102:	ee18 1a10 	vmov	r1, s16
 8024106:	462b      	mov	r3, r5
 8024108:	463a      	mov	r2, r7
 802410a:	4630      	mov	r0, r6
 802410c:	f7ff fe6e 	bl	8023dec <MobleConfigModel_SendModelPublicationStatus>
 8024110:	b021      	add	sp, #132	; 0x84
 8024112:	ecbd 8b02 	vpop	{d8}
 8024116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802411a:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 802411e:	b96f      	cbnz	r7, 802413c <MobleConfigModel_ProcessModelPublicationSet+0x150>
 8024120:	2c02      	cmp	r4, #2
 8024122:	9412      	str	r4, [sp, #72]	; 0x48
 8024124:	d104      	bne.n	8024130 <MobleConfigModel_ProcessModelPublicationSet+0x144>
 8024126:	a912      	add	r1, sp, #72	; 0x48
 8024128:	4628      	mov	r0, r5
 802412a:	f7f6 fa65 	bl	801a5f8 <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 802412e:	e7a7      	b.n	8024080 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 8024130:	aa12      	add	r2, sp, #72	; 0x48
 8024132:	4629      	mov	r1, r5
 8024134:	4658      	mov	r0, fp
 8024136:	f7f6 fa05 	bl	801a544 <MoblePalCrypto_UpdateModelPublicationParameters>
 802413a:	e7a1      	b.n	8024080 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 802413c:	f89a 3008 	ldrb.w	r3, [sl, #8]
 8024140:	f89a 1005 	ldrb.w	r1, [sl, #5]
 8024144:	f89a c006 	ldrb.w	ip, [sl, #6]
 8024148:	f89a 0007 	ldrb.w	r0, [sl, #7]
 802414c:	9412      	str	r4, [sp, #72]	; 0x48
 802414e:	f003 0e07 	and.w	lr, r3, #7
 8024152:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8024156:	08db      	lsrs	r3, r3, #3
 8024158:	2c02      	cmp	r4, #2
 802415a:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
 802415e:	f8ad 204e 	strh.w	r2, [sp, #78]	; 0x4e
 8024162:	f88d 1064 	strb.w	r1, [sp, #100]	; 0x64
 8024166:	f88d c065 	strb.w	ip, [sp, #101]	; 0x65
 802416a:	f88d 0066 	strb.w	r0, [sp, #102]	; 0x66
 802416e:	f88d e067 	strb.w	lr, [sp, #103]	; 0x67
 8024172:	f88d 3068 	strb.w	r3, [sp, #104]	; 0x68
 8024176:	d107      	bne.n	8024188 <MobleConfigModel_ProcessModelPublicationSet+0x19c>
 8024178:	45a9      	cmp	r9, r5
 802417a:	d105      	bne.n	8024188 <MobleConfigModel_ProcessModelPublicationSet+0x19c>
 802417c:	a912      	add	r1, sp, #72	; 0x48
 802417e:	4628      	mov	r0, r5
 8024180:	f7f6 fa3a 	bl	801a5f8 <MoblePalCrypto_UpdateHealthModelPublicationParameters>
 8024184:	2700      	movs	r7, #0
 8024186:	e77b      	b.n	8024080 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 8024188:	aa12      	add	r2, sp, #72	; 0x48
 802418a:	4629      	mov	r1, r5
 802418c:	4658      	mov	r0, fp
 802418e:	f7f6 f9d9 	bl	801a544 <MoblePalCrypto_UpdateModelPublicationParameters>
 8024192:	e7f7      	b.n	8024184 <MobleConfigModel_ProcessModelPublicationSet+0x198>
 8024194:	2701      	movs	r7, #1
 8024196:	e773      	b.n	8024080 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 8024198:	2702      	movs	r7, #2
 802419a:	e771      	b.n	8024080 <MobleConfigModel_ProcessModelPublicationSet+0x94>
 802419c:	20002514 	.word	0x20002514

080241a0 <MobleConfigModel_ProcessModelPublicationGet>:
 80241a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80241a4:	b093      	sub	sp, #76	; 0x4c
 80241a6:	4680      	mov	r8, r0
 80241a8:	4618      	mov	r0, r3
 80241aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80241ac:	f850 5b02 	ldr.w	r5, [r0], #2
 80241b0:	f8df b174 	ldr.w	fp, [pc, #372]	; 8024328 <MobleConfigModel_ProcessModelPublicationGet+0x188>
 80241b4:	2a04      	cmp	r2, #4
 80241b6:	4689      	mov	r9, r1
 80241b8:	b2af      	uxth	r7, r5
 80241ba:	bf0c      	ite	eq
 80241bc:	2102      	moveq	r1, #2
 80241be:	2104      	movne	r1, #4
 80241c0:	aa0c      	add	r2, sp, #48	; 0x30
 80241c2:	970c      	str	r7, [sp, #48]	; 0x30
 80241c4:	f7f7 f813 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 80241c8:	f8d8 3000 	ldr.w	r3, [r8]
 80241cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80241ce:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80241d2:	7f18      	ldrb	r0, [r3, #28]
 80241d4:	f10a 33ff 	add.w	r3, sl, #4294967295
 80241d8:	463d      	mov	r5, r7
 80241da:	4403      	add	r3, r0
 80241dc:	b29b      	uxth	r3, r3
 80241de:	4632      	mov	r2, r6
 80241e0:	4629      	mov	r1, r5
 80241e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80241e4:	f7f6 fa3a 	bl	801a65c <MoblePalCrypto_GetModelPublicationParameters>
 80241e8:	4555      	cmp	r5, sl
 80241ea:	b2ff      	uxtb	r7, r7
 80241ec:	4604      	mov	r4, r0
 80241ee:	d034      	beq.n	802425a <MobleConfigModel_ProcessModelPublicationGet+0xba>
 80241f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80241f2:	429d      	cmp	r5, r3
 80241f4:	d931      	bls.n	802425a <MobleConfigModel_ProcessModelPublicationGet+0xba>
 80241f6:	2300      	movs	r3, #0
 80241f8:	6043      	str	r3, [r0, #4]
 80241fa:	61c3      	str	r3, [r0, #28]
 80241fc:	f880 3020 	strb.w	r3, [r0, #32]
 8024200:	2201      	movs	r2, #1
 8024202:	88a3      	ldrh	r3, [r4, #4]
 8024204:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 8024208:	88e3      	ldrh	r3, [r4, #6]
 802420a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 802420e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8024212:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 8024216:	f8db 36f8 	ldr.w	r3, [fp, #1784]	; 0x6f8
 802421a:	69e1      	ldr	r1, [r4, #28]
 802421c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802421e:	f88d 2045 	strb.w	r2, [sp, #69]	; 0x45
 8024222:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
 8024226:	960e      	str	r6, [sp, #56]	; 0x38
 8024228:	9110      	str	r1, [sp, #64]	; 0x40
 802422a:	a80d      	add	r0, sp, #52	; 0x34
 802422c:	920b      	str	r2, [sp, #44]	; 0x2c
 802422e:	4798      	blx	r3
 8024230:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8024232:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8024234:	e9cd 6307 	strd	r6, r3, [sp, #28]
 8024238:	f894 3020 	ldrb.w	r3, [r4, #32]
 802423c:	9306      	str	r3, [sp, #24]
 802423e:	7fe3      	ldrb	r3, [r4, #31]
 8024240:	9305      	str	r3, [sp, #20]
 8024242:	7fa3      	ldrb	r3, [r4, #30]
 8024244:	9304      	str	r3, [sp, #16]
 8024246:	7f63      	ldrb	r3, [r4, #29]
 8024248:	9303      	str	r3, [sp, #12]
 802424a:	7f23      	ldrb	r3, [r4, #28]
 802424c:	9302      	str	r3, [sp, #8]
 802424e:	88e3      	ldrh	r3, [r4, #6]
 8024250:	9301      	str	r3, [sp, #4]
 8024252:	88a3      	ldrh	r3, [r4, #4]
 8024254:	9300      	str	r3, [sp, #0]
 8024256:	462b      	mov	r3, r5
 8024258:	e05a      	b.n	8024310 <MobleConfigModel_ProcessModelPublicationGet+0x170>
 802425a:	eba7 010a 	sub.w	r1, r7, sl
 802425e:	88e2      	ldrh	r2, [r4, #6]
 8024260:	920b      	str	r2, [sp, #44]	; 0x2c
 8024262:	b2c9      	uxtb	r1, r1
 8024264:	4630      	mov	r0, r6
 8024266:	f7f7 ffb2 	bl	801c1ce <MobleApplicationModelSupported>
 802426a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802426c:	b928      	cbnz	r0, 802427a <MobleConfigModel_ProcessModelPublicationGet+0xda>
 802426e:	6060      	str	r0, [r4, #4]
 8024270:	61e0      	str	r0, [r4, #28]
 8024272:	f884 0020 	strb.w	r0, [r4, #32]
 8024276:	2202      	movs	r2, #2
 8024278:	e7c3      	b.n	8024202 <MobleConfigModel_ProcessModelPublicationGet+0x62>
 802427a:	4629      	mov	r1, r5
 802427c:	4630      	mov	r0, r6
 802427e:	f7f5 ff7d 	bl	801a17c <MoblePalCryptoHasAppKeyBind>
 8024282:	4602      	mov	r2, r0
 8024284:	b908      	cbnz	r0, 802428a <MobleConfigModel_ProcessModelPublicationGet+0xea>
 8024286:	80a0      	strh	r0, [r4, #4]
 8024288:	e7bb      	b.n	8024202 <MobleConfigModel_ProcessModelPublicationGet+0x62>
 802428a:	2e02      	cmp	r6, #2
 802428c:	d147      	bne.n	802431e <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 802428e:	4555      	cmp	r5, sl
 8024290:	d145      	bne.n	802431e <MobleConfigModel_ProcessModelPublicationGet+0x17e>
 8024292:	4c24      	ldr	r4, [pc, #144]	; (8024324 <MobleConfigModel_ProcessModelPublicationGet+0x184>)
 8024294:	f8db 36f8 	ldr.w	r3, [fp, #1784]	; 0x6f8
 8024298:	f88d 7034 	strb.w	r7, [sp, #52]	; 0x34
 802429c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 802429e:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 80242a2:	f8ad 303c 	strh.w	r3, [sp, #60]	; 0x3c
 80242a6:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 80242aa:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
 80242ae:	f8b4 310e 	ldrh.w	r3, [r4, #270]	; 0x10e
 80242b2:	960e      	str	r6, [sp, #56]	; 0x38
 80242b4:	ba5b      	rev16	r3, r3
 80242b6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 80242ba:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
 80242be:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 80242c2:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80242c6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 80242ca:	2700      	movs	r7, #0
 80242cc:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 80242d0:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
 80242d4:	f88d 7045 	strb.w	r7, [sp, #69]	; 0x45
 80242d8:	a80d      	add	r0, sp, #52	; 0x34
 80242da:	4790      	blx	r2
 80242dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80242de:	e9cd 6307 	strd	r6, r3, [sp, #28]
 80242e2:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
 80242e6:	9306      	str	r3, [sp, #24]
 80242e8:	f894 3110 	ldrb.w	r3, [r4, #272]	; 0x110
 80242ec:	9305      	str	r3, [sp, #20]
 80242ee:	f894 3108 	ldrb.w	r3, [r4, #264]	; 0x108
 80242f2:	9304      	str	r3, [sp, #16]
 80242f4:	f894 310e 	ldrb.w	r3, [r4, #270]	; 0x10e
 80242f8:	9303      	str	r3, [sp, #12]
 80242fa:	f894 310f 	ldrb.w	r3, [r4, #271]	; 0x10f
 80242fe:	9302      	str	r3, [sp, #8]
 8024300:	f8b4 310c 	ldrh.w	r3, [r4, #268]	; 0x10c
 8024304:	9301      	str	r3, [sp, #4]
 8024306:	f8b4 310a 	ldrh.w	r3, [r4, #266]	; 0x10a
 802430a:	9300      	str	r3, [sp, #0]
 802430c:	463a      	mov	r2, r7
 802430e:	462b      	mov	r3, r5
 8024310:	4649      	mov	r1, r9
 8024312:	4640      	mov	r0, r8
 8024314:	f7ff fd6a 	bl	8023dec <MobleConfigModel_SendModelPublicationStatus>
 8024318:	b013      	add	sp, #76	; 0x4c
 802431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802431e:	2200      	movs	r2, #0
 8024320:	e76f      	b.n	8024202 <MobleConfigModel_ProcessModelPublicationGet+0x62>
 8024322:	bf00      	nop
 8024324:	20000324 	.word	0x20000324
 8024328:	20002514 	.word	0x20002514

0802432c <MobleConfigModel_SendAppStatus>:
 802432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024330:	460e      	mov	r6, r1
 8024332:	e9dd 7407 	ldrd	r7, r4, [sp, #28]
 8024336:	f8bd 8018 	ldrh.w	r8, [sp, #24]
 802433a:	4619      	mov	r1, r3
 802433c:	4605      	mov	r5, r0
 802433e:	b930      	cbnz	r0, 802434e <MobleConfigModel_SendAppStatus+0x22>
 8024340:	4b18      	ldr	r3, [pc, #96]	; (80243a4 <MobleConfigModel_SendAppStatus+0x78>)
 8024342:	4a19      	ldr	r2, [pc, #100]	; (80243a8 <MobleConfigModel_SendAppStatus+0x7c>)
 8024344:	4819      	ldr	r0, [pc, #100]	; (80243ac <MobleConfigModel_SendAppStatus+0x80>)
 8024346:	f640 0172 	movw	r1, #2162	; 0x872
 802434a:	f004 fbbd 	bl	8028ac8 <__assert_func>
 802434e:	203e      	movs	r0, #62	; 0x3e
 8024350:	2300      	movs	r3, #0
 8024352:	7020      	strb	r0, [r4, #0]
 8024354:	f06f 007f 	mvn.w	r0, #127	; 0x7f
 8024358:	70a3      	strb	r3, [r4, #2]
 802435a:	70e3      	strb	r3, [r4, #3]
 802435c:	7060      	strb	r0, [r4, #1]
 802435e:	7222      	strb	r2, [r4, #8]
 8024360:	f104 0009 	add.w	r0, r4, #9
 8024364:	2202      	movs	r2, #2
 8024366:	f7f7 fcbd 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 802436a:	4641      	mov	r1, r8
 802436c:	f104 000b 	add.w	r0, r4, #11
 8024370:	f7f7 fcb8 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8024374:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 8024378:	bf28      	it	cs
 802437a:	2204      	movcs	r2, #4
 802437c:	4639      	mov	r1, r7
 802437e:	f104 000d 	add.w	r0, r4, #13
 8024382:	f7f7 fcaf 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8024386:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 802438a:	bf2c      	ite	cs
 802438c:	2309      	movcs	r3, #9
 802438e:	2307      	movcc	r3, #7
 8024390:	f8c4 30a3 	str.w	r3, [r4, #163]	; 0xa3
 8024394:	4632      	mov	r2, r6
 8024396:	4623      	mov	r3, r4
 8024398:	4628      	mov	r0, r5
 802439a:	2101      	movs	r1, #1
 802439c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80243a0:	f7fe bb9e 	b.w	8022ae0 <MobleModelSendPacket>
 80243a4:	08033381 	.word	0x08033381
 80243a8:	08032280 	.word	0x08032280
 80243ac:	08033393 	.word	0x08033393

080243b0 <MobleConfigModel_ProcessAppUnbind>:
 80243b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80243b4:	468a      	mov	sl, r1
 80243b6:	b089      	sub	sp, #36	; 0x24
 80243b8:	4605      	mov	r5, r0
 80243ba:	b930      	cbnz	r0, 80243ca <MobleConfigModel_ProcessAppUnbind+0x1a>
 80243bc:	4b3a      	ldr	r3, [pc, #232]	; (80244a8 <MobleConfigModel_ProcessAppUnbind+0xf8>)
 80243be:	4a3b      	ldr	r2, [pc, #236]	; (80244ac <MobleConfigModel_ProcessAppUnbind+0xfc>)
 80243c0:	f241 01e2 	movw	r1, #4322	; 0x10e2
 80243c4:	483a      	ldr	r0, [pc, #232]	; (80244b0 <MobleConfigModel_ProcessAppUnbind+0x100>)
 80243c6:	f004 fb7f 	bl	8028ac8 <__assert_func>
 80243ca:	6802      	ldr	r2, [r0, #0]
 80243cc:	b922      	cbnz	r2, 80243d8 <MobleConfigModel_ProcessAppUnbind+0x28>
 80243ce:	4b39      	ldr	r3, [pc, #228]	; (80244b4 <MobleConfigModel_ProcessAppUnbind+0x104>)
 80243d0:	4a36      	ldr	r2, [pc, #216]	; (80244ac <MobleConfigModel_ProcessAppUnbind+0xfc>)
 80243d2:	f241 01e3 	movw	r1, #4323	; 0x10e3
 80243d6:	e7f5      	b.n	80243c4 <MobleConfigModel_ProcessAppUnbind+0x14>
 80243d8:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 80243dc:	7f14      	ldrb	r4, [r2, #28]
 80243de:	f8d3 6002 	ldr.w	r6, [r3, #2]
 80243e2:	681f      	ldr	r7, [r3, #0]
 80243e4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80243e8:	4414      	add	r4, r2
 80243ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80243ec:	b2b1      	uxth	r1, r6
 80243ee:	2a06      	cmp	r2, #6
 80243f0:	9104      	str	r1, [sp, #16]
 80243f2:	fa1f f887 	uxth.w	r8, r7
 80243f6:	460e      	mov	r6, r1
 80243f8:	aa04      	add	r2, sp, #16
 80243fa:	bf0c      	ite	eq
 80243fc:	2102      	moveq	r1, #2
 80243fe:	2104      	movne	r1, #4
 8024400:	1d18      	adds	r0, r3, #4
 8024402:	f7f6 fef4 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8024406:	eba7 070b 	sub.w	r7, r7, fp
 802440a:	45d8      	cmp	r8, fp
 802440c:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8024410:	b2a4      	uxth	r4, r4
 8024412:	f007 07ff 	and.w	r7, r7, #255	; 0xff
 8024416:	d001      	beq.n	802441c <MobleConfigModel_ProcessAppUnbind+0x6c>
 8024418:	45a0      	cmp	r8, r4
 802441a:	d840      	bhi.n	802449e <MobleConfigModel_ProcessAppUnbind+0xee>
 802441c:	4639      	mov	r1, r7
 802441e:	4648      	mov	r0, r9
 8024420:	f7f7 fed5 	bl	801c1ce <MobleApplicationModelSupported>
 8024424:	2800      	cmp	r0, #0
 8024426:	d03c      	beq.n	80244a2 <MobleConfigModel_ProcessAppUnbind+0xf2>
 8024428:	f1b9 0f02 	cmp.w	r9, #2
 802442c:	d12d      	bne.n	802448a <MobleConfigModel_ProcessAppUnbind+0xda>
 802442e:	45d8      	cmp	r8, fp
 8024430:	d12b      	bne.n	802448a <MobleConfigModel_ProcessAppUnbind+0xda>
 8024432:	4633      	mov	r3, r6
 8024434:	464a      	mov	r2, r9
 8024436:	4641      	mov	r1, r8
 8024438:	4628      	mov	r0, r5
 802443a:	f7fd fbb9 	bl	8021bb0 <MobleConfigHealthModelAppUnBind>
 802443e:	4604      	mov	r4, r0
 8024440:	b918      	cbnz	r0, 802444a <MobleConfigModel_ProcessAppUnbind+0x9a>
 8024442:	6828      	ldr	r0, [r5, #0]
 8024444:	f7f8 fd18 	bl	801ce78 <MobleConfigNetworkSave>
 8024448:	e002      	b.n	8024450 <MobleConfigModel_ProcessAppUnbind+0xa0>
 802444a:	2c03      	cmp	r4, #3
 802444c:	d11b      	bne.n	8024486 <MobleConfigModel_ProcessAppUnbind+0xd6>
 802444e:	2403      	movs	r4, #3
 8024450:	4b19      	ldr	r3, [pc, #100]	; (80244b8 <MobleConfigModel_ProcessAppUnbind+0x108>)
 8024452:	f88d 7014 	strb.w	r7, [sp, #20]
 8024456:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 802445a:	f8ad 6016 	strh.w	r6, [sp, #22]
 802445e:	a805      	add	r0, sp, #20
 8024460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024462:	f8cd 9018 	str.w	r9, [sp, #24]
 8024466:	f88d 401c 	strb.w	r4, [sp, #28]
 802446a:	4798      	blx	r3
 802446c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802446e:	9600      	str	r6, [sp, #0]
 8024470:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8024474:	4622      	mov	r2, r4
 8024476:	4643      	mov	r3, r8
 8024478:	4651      	mov	r1, sl
 802447a:	4628      	mov	r0, r5
 802447c:	f7ff ff56 	bl	802432c <MobleConfigModel_SendAppStatus>
 8024480:	b009      	add	sp, #36	; 0x24
 8024482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024486:	2405      	movs	r4, #5
 8024488:	e7e2      	b.n	8024450 <MobleConfigModel_ProcessAppUnbind+0xa0>
 802448a:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 802448e:	d2de      	bcs.n	802444e <MobleConfigModel_ProcessAppUnbind+0x9e>
 8024490:	4633      	mov	r3, r6
 8024492:	464a      	mov	r2, r9
 8024494:	4641      	mov	r1, r8
 8024496:	4628      	mov	r0, r5
 8024498:	f7fd fae2 	bl	8021a60 <MobleConfigModelAppUnBind>
 802449c:	e7cf      	b.n	802443e <MobleConfigModel_ProcessAppUnbind+0x8e>
 802449e:	2401      	movs	r4, #1
 80244a0:	e7d6      	b.n	8024450 <MobleConfigModel_ProcessAppUnbind+0xa0>
 80244a2:	2402      	movs	r4, #2
 80244a4:	e7d4      	b.n	8024450 <MobleConfigModel_ProcessAppUnbind+0xa0>
 80244a6:	bf00      	nop
 80244a8:	08033901 	.word	0x08033901
 80244ac:	0803229f 	.word	0x0803229f
 80244b0:	08033393 	.word	0x08033393
 80244b4:	0803385c 	.word	0x0803385c
 80244b8:	20002514 	.word	0x20002514

080244bc <MobleConfigModel_ProcessAppBind>:
 80244bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80244c0:	468a      	mov	sl, r1
 80244c2:	b089      	sub	sp, #36	; 0x24
 80244c4:	4605      	mov	r5, r0
 80244c6:	b930      	cbnz	r0, 80244d6 <MobleConfigModel_ProcessAppBind+0x1a>
 80244c8:	4b3b      	ldr	r3, [pc, #236]	; (80245b8 <MobleConfigModel_ProcessAppBind+0xfc>)
 80244ca:	4a3c      	ldr	r2, [pc, #240]	; (80245bc <MobleConfigModel_ProcessAppBind+0x100>)
 80244cc:	f241 0146 	movw	r1, #4166	; 0x1046
 80244d0:	483b      	ldr	r0, [pc, #236]	; (80245c0 <MobleConfigModel_ProcessAppBind+0x104>)
 80244d2:	f004 faf9 	bl	8028ac8 <__assert_func>
 80244d6:	6802      	ldr	r2, [r0, #0]
 80244d8:	b922      	cbnz	r2, 80244e4 <MobleConfigModel_ProcessAppBind+0x28>
 80244da:	4b3a      	ldr	r3, [pc, #232]	; (80245c4 <MobleConfigModel_ProcessAppBind+0x108>)
 80244dc:	4a37      	ldr	r2, [pc, #220]	; (80245bc <MobleConfigModel_ProcessAppBind+0x100>)
 80244de:	f241 0147 	movw	r1, #4167	; 0x1047
 80244e2:	e7f5      	b.n	80244d0 <MobleConfigModel_ProcessAppBind+0x14>
 80244e4:	f8b2 b002 	ldrh.w	fp, [r2, #2]
 80244e8:	7f14      	ldrb	r4, [r2, #28]
 80244ea:	f8d3 6002 	ldr.w	r6, [r3, #2]
 80244ee:	f8d3 8000 	ldr.w	r8, [r3]
 80244f2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80244f6:	4414      	add	r4, r2
 80244f8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80244fa:	b2b1      	uxth	r1, r6
 80244fc:	2a06      	cmp	r2, #6
 80244fe:	9104      	str	r1, [sp, #16]
 8024500:	fa1f f988 	uxth.w	r9, r8
 8024504:	460e      	mov	r6, r1
 8024506:	aa04      	add	r2, sp, #16
 8024508:	bf0c      	ite	eq
 802450a:	2102      	moveq	r1, #2
 802450c:	2104      	movne	r1, #4
 802450e:	1d18      	adds	r0, r3, #4
 8024510:	f7f6 fe6d 	bl	801b1ee <MobleInputStreamGetLittleEndian>
 8024514:	eba8 080b 	sub.w	r8, r8, fp
 8024518:	45d9      	cmp	r9, fp
 802451a:	9f04      	ldr	r7, [sp, #16]
 802451c:	b2a4      	uxth	r4, r4
 802451e:	f008 08ff 	and.w	r8, r8, #255	; 0xff
 8024522:	d001      	beq.n	8024528 <MobleConfigModel_ProcessAppBind+0x6c>
 8024524:	45a1      	cmp	r9, r4
 8024526:	d840      	bhi.n	80245aa <MobleConfigModel_ProcessAppBind+0xee>
 8024528:	4641      	mov	r1, r8
 802452a:	4638      	mov	r0, r7
 802452c:	f7f7 fe4f 	bl	801c1ce <MobleApplicationModelSupported>
 8024530:	2800      	cmp	r0, #0
 8024532:	d03c      	beq.n	80245ae <MobleConfigModel_ProcessAppBind+0xf2>
 8024534:	2f00      	cmp	r7, #0
 8024536:	d03c      	beq.n	80245b2 <MobleConfigModel_ProcessAppBind+0xf6>
 8024538:	2f02      	cmp	r7, #2
 802453a:	d12c      	bne.n	8024596 <MobleConfigModel_ProcessAppBind+0xda>
 802453c:	45d9      	cmp	r9, fp
 802453e:	d12a      	bne.n	8024596 <MobleConfigModel_ProcessAppBind+0xda>
 8024540:	4633      	mov	r3, r6
 8024542:	463a      	mov	r2, r7
 8024544:	4649      	mov	r1, r9
 8024546:	4628      	mov	r0, r5
 8024548:	f7fd faf8 	bl	8021b3c <MobleConfigHealthModelAppBind>
 802454c:	4604      	mov	r4, r0
 802454e:	b918      	cbnz	r0, 8024558 <MobleConfigModel_ProcessAppBind+0x9c>
 8024550:	6828      	ldr	r0, [r5, #0]
 8024552:	f7f8 fc91 	bl	801ce78 <MobleConfigNetworkSave>
 8024556:	e002      	b.n	802455e <MobleConfigModel_ProcessAppBind+0xa2>
 8024558:	2c03      	cmp	r4, #3
 802455a:	d11a      	bne.n	8024592 <MobleConfigModel_ProcessAppBind+0xd6>
 802455c:	2403      	movs	r4, #3
 802455e:	4b1a      	ldr	r3, [pc, #104]	; (80245c8 <MobleConfigModel_ProcessAppBind+0x10c>)
 8024560:	f88d 8014 	strb.w	r8, [sp, #20]
 8024564:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8024568:	f8ad 6016 	strh.w	r6, [sp, #22]
 802456c:	a805      	add	r0, sp, #20
 802456e:	6a1b      	ldr	r3, [r3, #32]
 8024570:	9706      	str	r7, [sp, #24]
 8024572:	f88d 401c 	strb.w	r4, [sp, #28]
 8024576:	4798      	blx	r3
 8024578:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802457a:	9600      	str	r6, [sp, #0]
 802457c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8024580:	4622      	mov	r2, r4
 8024582:	464b      	mov	r3, r9
 8024584:	4651      	mov	r1, sl
 8024586:	4628      	mov	r0, r5
 8024588:	f7ff fed0 	bl	802432c <MobleConfigModel_SendAppStatus>
 802458c:	b009      	add	sp, #36	; 0x24
 802458e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024592:	2405      	movs	r4, #5
 8024594:	e7e3      	b.n	802455e <MobleConfigModel_ProcessAppBind+0xa2>
 8024596:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 802459a:	d2df      	bcs.n	802455c <MobleConfigModel_ProcessAppBind+0xa0>
 802459c:	4633      	mov	r3, r6
 802459e:	463a      	mov	r2, r7
 80245a0:	4649      	mov	r1, r9
 80245a2:	4628      	mov	r0, r5
 80245a4:	f7fd f9f2 	bl	802198c <MobleConfigModelAppBind>
 80245a8:	e7d0      	b.n	802454c <MobleConfigModel_ProcessAppBind+0x90>
 80245aa:	2401      	movs	r4, #1
 80245ac:	e7d7      	b.n	802455e <MobleConfigModel_ProcessAppBind+0xa2>
 80245ae:	2402      	movs	r4, #2
 80245b0:	e7d5      	b.n	802455e <MobleConfigModel_ProcessAppBind+0xa2>
 80245b2:	240d      	movs	r4, #13
 80245b4:	e7d3      	b.n	802455e <MobleConfigModel_ProcessAppBind+0xa2>
 80245b6:	bf00      	nop
 80245b8:	08033901 	.word	0x08033901
 80245bc:	080322c1 	.word	0x080322c1
 80245c0:	08033393 	.word	0x08033393
 80245c4:	0803385c 	.word	0x0803385c
 80245c8:	20002514 	.word	0x20002514

080245cc <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet>:
 80245cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80245d0:	f8d3 9000 	ldr.w	r9, [r3]
 80245d4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80245d6:	fa0f f389 	sxth.w	r3, r9
 80245da:	2b00      	cmp	r3, #0
 80245dc:	4606      	mov	r6, r0
 80245de:	4688      	mov	r8, r1
 80245e0:	dd31      	ble.n	8024646 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x7a>
 80245e2:	6803      	ldr	r3, [r0, #0]
 80245e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80245e6:	7c9b      	ldrb	r3, [r3, #18]
 80245e8:	2b02      	cmp	r3, #2
 80245ea:	d02a      	beq.n	8024642 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x76>
 80245ec:	fa1f f089 	uxth.w	r0, r9
 80245f0:	f7f9 fdee 	bl	801e1d0 <BnrgmFrndMgmtGetLpnPollTimeout>
 80245f4:	4607      	mov	r7, r0
 80245f6:	232e      	movs	r3, #46	; 0x2e
 80245f8:	2500      	movs	r5, #0
 80245fa:	7023      	strb	r3, [r4, #0]
 80245fc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8024600:	7063      	strb	r3, [r4, #1]
 8024602:	fa1f f189 	uxth.w	r1, r9
 8024606:	70a5      	strb	r5, [r4, #2]
 8024608:	70e5      	strb	r5, [r4, #3]
 802460a:	2202      	movs	r2, #2
 802460c:	f104 0008 	add.w	r0, r4, #8
 8024610:	f7f7 fb68 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8024614:	4639      	mov	r1, r7
 8024616:	2203      	movs	r2, #3
 8024618:	f104 000a 	add.w	r0, r4, #10
 802461c:	f7f7 fb62 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8024620:	2305      	movs	r3, #5
 8024622:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8024626:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 802462a:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 802462e:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8024632:	4623      	mov	r3, r4
 8024634:	4642      	mov	r2, r8
 8024636:	4630      	mov	r0, r6
 8024638:	2101      	movs	r1, #1
 802463a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802463e:	f7fe ba4f 	b.w	8022ae0 <MobleModelSendPacket>
 8024642:	2700      	movs	r7, #0
 8024644:	e7d7      	b.n	80245f6 <BnrgmConfigModel_ProcessLowPowerNodePollTimeoutGet+0x2a>
 8024646:	2002      	movs	r0, #2
 8024648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0802464c <MobleConfigModel_ProcessKeyRefreshPhaseSet>:
 802464c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8024650:	f893 9002 	ldrb.w	r9, [r3, #2]
 8024654:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8024656:	f1b9 0f03 	cmp.w	r9, #3
 802465a:	4606      	mov	r6, r0
 802465c:	460f      	mov	r7, r1
 802465e:	4618      	mov	r0, r3
 8024660:	d903      	bls.n	802466a <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x1e>
 8024662:	2002      	movs	r0, #2
 8024664:	b003      	add	sp, #12
 8024666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802466a:	f7f3 f932 	bl	80178d2 <MobleConfigModelGetNetIdx>
 802466e:	4680      	mov	r8, r0
 8024670:	f7f6 f838 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8024674:	1e05      	subs	r5, r0, #0
 8024676:	db2f      	blt.n	80246d8 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x8c>
 8024678:	b2e9      	uxtb	r1, r5
 802467a:	4648      	mov	r0, r9
 802467c:	f7fd f836 	bl	80216ec <ModelConfigUpdateKRState>
 8024680:	2802      	cmp	r0, #2
 8024682:	d0ee      	beq.n	8024662 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x16>
 8024684:	2300      	movs	r3, #0
 8024686:	6832      	ldr	r2, [r6, #0]
 8024688:	f8ad 8006 	strh.w	r8, [sp, #6]
 802468c:	6a50      	ldr	r0, [r2, #36]	; 0x24
 802468e:	4405      	add	r5, r0
 8024690:	2217      	movs	r2, #23
 8024692:	f895 9014 	ldrb.w	r9, [r5, #20]
 8024696:	7022      	strb	r2, [r4, #0]
 8024698:	2500      	movs	r5, #0
 802469a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 802469e:	7062      	strb	r2, [r4, #1]
 80246a0:	7223      	strb	r3, [r4, #8]
 80246a2:	f104 0209 	add.w	r2, r4, #9
 80246a6:	f10d 0306 	add.w	r3, sp, #6
 80246aa:	70a5      	strb	r5, [r4, #2]
 80246ac:	70e5      	strb	r5, [r4, #3]
 80246ae:	2101      	movs	r1, #1
 80246b0:	4628      	mov	r0, r5
 80246b2:	f7f3 f915 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 80246b6:	2304      	movs	r3, #4
 80246b8:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 80246bc:	f884 900b 	strb.w	r9, [r4, #11]
 80246c0:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 80246c4:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 80246c8:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 80246cc:	4623      	mov	r3, r4
 80246ce:	463a      	mov	r2, r7
 80246d0:	4630      	mov	r0, r6
 80246d2:	f7fe fa05 	bl	8022ae0 <MobleModelSendPacket>
 80246d6:	e7c5      	b.n	8024664 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x18>
 80246d8:	230f      	movs	r3, #15
 80246da:	e7d4      	b.n	8024686 <MobleConfigModel_ProcessKeyRefreshPhaseSet+0x3a>

080246dc <MobleConfigModel_ProcessGattProxyGet>:
 80246dc:	b430      	push	{r4, r5}
 80246de:	460a      	mov	r2, r1
 80246e0:	6801      	ldr	r1, [r0, #0]
 80246e2:	9b03      	ldr	r3, [sp, #12]
 80246e4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80246e6:	2514      	movs	r5, #20
 80246e8:	7c09      	ldrb	r1, [r1, #16]
 80246ea:	7219      	strb	r1, [r3, #8]
 80246ec:	2400      	movs	r4, #0
 80246ee:	701d      	strb	r5, [r3, #0]
 80246f0:	2101      	movs	r1, #1
 80246f2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80246f6:	705d      	strb	r5, [r3, #1]
 80246f8:	709c      	strb	r4, [r3, #2]
 80246fa:	70dc      	strb	r4, [r3, #3]
 80246fc:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8024700:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8024704:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024708:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 802470c:	bc30      	pop	{r4, r5}
 802470e:	f7fe b9e7 	b.w	8022ae0 <MobleModelSendPacket>

08024712 <MobleConfigModel_ProcessFriendGet>:
 8024712:	b430      	push	{r4, r5}
 8024714:	460a      	mov	r2, r1
 8024716:	6801      	ldr	r1, [r0, #0]
 8024718:	9b03      	ldr	r3, [sp, #12]
 802471a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 802471c:	2511      	movs	r5, #17
 802471e:	7c89      	ldrb	r1, [r1, #18]
 8024720:	7219      	strb	r1, [r3, #8]
 8024722:	2400      	movs	r4, #0
 8024724:	701d      	strb	r5, [r3, #0]
 8024726:	2101      	movs	r1, #1
 8024728:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 802472c:	705d      	strb	r5, [r3, #1]
 802472e:	709c      	strb	r4, [r3, #2]
 8024730:	70dc      	strb	r4, [r3, #3]
 8024732:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8024736:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802473a:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 802473e:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 8024742:	bc30      	pop	{r4, r5}
 8024744:	f7fe b9cc 	b.w	8022ae0 <MobleModelSendPacket>

08024748 <MobleConfigModel_ProcessDefaultTTLSet>:
 8024748:	b430      	push	{r4, r5}
 802474a:	461d      	mov	r5, r3
 802474c:	460a      	mov	r2, r1
 802474e:	7829      	ldrb	r1, [r5, #0]
 8024750:	f995 5000 	ldrsb.w	r5, [r5]
 8024754:	9b03      	ldr	r3, [sp, #12]
 8024756:	2d00      	cmp	r5, #0
 8024758:	db19      	blt.n	802478e <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 802475a:	2901      	cmp	r1, #1
 802475c:	d017      	beq.n	802478e <MobleConfigModel_ProcessDefaultTTLSet+0x46>
 802475e:	6804      	ldr	r4, [r0, #0]
 8024760:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8024762:	250e      	movs	r5, #14
 8024764:	7261      	strb	r1, [r4, #9]
 8024766:	2400      	movs	r4, #0
 8024768:	701d      	strb	r5, [r3, #0]
 802476a:	7219      	strb	r1, [r3, #8]
 802476c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8024770:	2101      	movs	r1, #1
 8024772:	705d      	strb	r5, [r3, #1]
 8024774:	709c      	strb	r4, [r3, #2]
 8024776:	70dc      	strb	r4, [r3, #3]
 8024778:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 802477c:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8024780:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024784:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 8024788:	bc30      	pop	{r4, r5}
 802478a:	f7fe b9a9 	b.w	8022ae0 <MobleModelSendPacket>
 802478e:	2002      	movs	r0, #2
 8024790:	bc30      	pop	{r4, r5}
 8024792:	4770      	bx	lr

08024794 <MobleConfigModel_ProcessBeaconSet>:
 8024794:	b570      	push	{r4, r5, r6, lr}
 8024796:	460a      	mov	r2, r1
 8024798:	9c05      	ldr	r4, [sp, #20]
 802479a:	7819      	ldrb	r1, [r3, #0]
 802479c:	b930      	cbnz	r0, 80247ac <MobleConfigModel_ProcessBeaconSet+0x18>
 802479e:	4b12      	ldr	r3, [pc, #72]	; (80247e8 <MobleConfigModel_ProcessBeaconSet+0x54>)
 80247a0:	4a12      	ldr	r2, [pc, #72]	; (80247ec <MobleConfigModel_ProcessBeaconSet+0x58>)
 80247a2:	4813      	ldr	r0, [pc, #76]	; (80247f0 <MobleConfigModel_ProcessBeaconSet+0x5c>)
 80247a4:	f640 4135 	movw	r1, #3125	; 0xc35
 80247a8:	f004 f98e 	bl	8028ac8 <__assert_func>
 80247ac:	2901      	cmp	r1, #1
 80247ae:	d819      	bhi.n	80247e4 <MobleConfigModel_ProcessBeaconSet+0x50>
 80247b0:	4b10      	ldr	r3, [pc, #64]	; (80247f4 <MobleConfigModel_ProcessBeaconSet+0x60>)
 80247b2:	250b      	movs	r5, #11
 80247b4:	f883 10ba 	strb.w	r1, [r3, #186]	; 0xba
 80247b8:	2300      	movs	r3, #0
 80247ba:	7025      	strb	r5, [r4, #0]
 80247bc:	7221      	strb	r1, [r4, #8]
 80247be:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80247c2:	2101      	movs	r1, #1
 80247c4:	70a3      	strb	r3, [r4, #2]
 80247c6:	70e3      	strb	r3, [r4, #3]
 80247c8:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 80247cc:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 80247d0:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 80247d4:	7065      	strb	r5, [r4, #1]
 80247d6:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 80247da:	4623      	mov	r3, r4
 80247dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80247e0:	f7fe b97e 	b.w	8022ae0 <MobleModelSendPacket>
 80247e4:	2002      	movs	r0, #2
 80247e6:	bd70      	pop	{r4, r5, r6, pc}
 80247e8:	08033901 	.word	0x08033901
 80247ec:	080322e1 	.word	0x080322e1
 80247f0:	08033393 	.word	0x08033393
 80247f4:	20000324 	.word	0x20000324

080247f8 <MobleConfigModel_SendAppKeyStatus>:
 80247f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80247fa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80247fc:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024800:	460f      	mov	r7, r1
 8024802:	4606      	mov	r6, r0
 8024804:	b930      	cbnz	r0, 8024814 <MobleConfigModel_SendAppKeyStatus+0x1c>
 8024806:	4b16      	ldr	r3, [pc, #88]	; (8024860 <MobleConfigModel_SendAppKeyStatus+0x68>)
 8024808:	4a16      	ldr	r2, [pc, #88]	; (8024864 <MobleConfigModel_SendAppKeyStatus+0x6c>)
 802480a:	4817      	ldr	r0, [pc, #92]	; (8024868 <MobleConfigModel_SendAppKeyStatus+0x70>)
 802480c:	f240 7145 	movw	r1, #1861	; 0x745
 8024810:	f004 f95a 	bl	8028ac8 <__assert_func>
 8024814:	2303      	movs	r3, #3
 8024816:	2500      	movs	r5, #0
 8024818:	7023      	strb	r3, [r4, #0]
 802481a:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802481e:	2101      	movs	r1, #1
 8024820:	7063      	strb	r3, [r4, #1]
 8024822:	7222      	strb	r2, [r4, #8]
 8024824:	f10d 0306 	add.w	r3, sp, #6
 8024828:	f104 0209 	add.w	r2, r4, #9
 802482c:	70a5      	strb	r5, [r4, #2]
 802482e:	70e5      	strb	r5, [r4, #3]
 8024830:	4628      	mov	r0, r5
 8024832:	f7f3 f855 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8024836:	ab08      	add	r3, sp, #32
 8024838:	4608      	mov	r0, r1
 802483a:	f7f3 f851 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 802483e:	2304      	movs	r3, #4
 8024840:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 8024844:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8024848:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 802484c:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 8024850:	4623      	mov	r3, r4
 8024852:	463a      	mov	r2, r7
 8024854:	4630      	mov	r0, r6
 8024856:	f7fe f943 	bl	8022ae0 <MobleModelSendPacket>
 802485a:	b003      	add	sp, #12
 802485c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802485e:	bf00      	nop
 8024860:	08033381 	.word	0x08033381
 8024864:	08032303 	.word	0x08032303
 8024868:	08033393 	.word	0x08033393

0802486c <MobleConfigModel_ProcessAppKeyUpdate>:
 802486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024870:	461d      	mov	r5, r3
 8024872:	b08b      	sub	sp, #44	; 0x2c
 8024874:	4680      	mov	r8, r0
 8024876:	4618      	mov	r0, r3
 8024878:	f7f3 f82b 	bl	80178d2 <MobleConfigModelGetNetIdx>
 802487c:	78af      	ldrb	r7, [r5, #2]
 802487e:	786b      	ldrb	r3, [r5, #1]
 8024880:	013f      	lsls	r7, r7, #4
 8024882:	eb07 1713 	add.w	r7, r7, r3, lsr #4
 8024886:	4606      	mov	r6, r0
 8024888:	f7f5 ff2c 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 802488c:	aa02      	add	r2, sp, #8
 802488e:	f1b0 0b00 	subs.w	fp, r0, #0
 8024892:	f105 0303 	add.w	r3, r5, #3
 8024896:	4689      	mov	r9, r1
 8024898:	bfac      	ite	ge
 802489a:	2400      	movge	r4, #0
 802489c:	2404      	movlt	r4, #4
 802489e:	3513      	adds	r5, #19
 80248a0:	4692      	mov	sl, r2
 80248a2:	6818      	ldr	r0, [r3, #0]
 80248a4:	6859      	ldr	r1, [r3, #4]
 80248a6:	4694      	mov	ip, r2
 80248a8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80248ac:	3308      	adds	r3, #8
 80248ae:	42ab      	cmp	r3, r5
 80248b0:	4662      	mov	r2, ip
 80248b2:	d1f6      	bne.n	80248a2 <MobleConfigModel_ProcessAppKeyUpdate+0x36>
 80248b4:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 80248b8:	d302      	bcc.n	80248c0 <MobleConfigModel_ProcessAppKeyUpdate+0x54>
 80248ba:	2c00      	cmp	r4, #0
 80248bc:	bf08      	it	eq
 80248be:	2404      	moveq	r4, #4
 80248c0:	4630      	mov	r0, r6
 80248c2:	f7f4 fb97 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 80248c6:	4320      	orrs	r0, r4
 80248c8:	b2c3      	uxtb	r3, r0
 80248ca:	4827      	ldr	r0, [pc, #156]	; (8024968 <MobleConfigModel_ProcessAppKeyUpdate+0xfc>)
 80248cc:	4483      	add	fp, r0
 80248ce:	2b00      	cmp	r3, #0
 80248d0:	f89b 30c0 	ldrb.w	r3, [fp, #192]	; 0xc0
 80248d4:	bf08      	it	eq
 80248d6:	2404      	moveq	r4, #4
 80248d8:	2b01      	cmp	r3, #1
 80248da:	d002      	beq.n	80248e2 <MobleConfigModel_ProcessAppKeyUpdate+0x76>
 80248dc:	2c00      	cmp	r4, #0
 80248de:	bf08      	it	eq
 80248e0:	240b      	moveq	r4, #11
 80248e2:	4638      	mov	r0, r7
 80248e4:	f7f4 fba0 	bl	8019028 <MoblePalCryptoHasAppKey>
 80248e8:	bb00      	cbnz	r0, 802492c <MobleConfigModel_ProcessAppKeyUpdate+0xc0>
 80248ea:	2c00      	cmp	r4, #0
 80248ec:	bf08      	it	eq
 80248ee:	2403      	moveq	r4, #3
 80248f0:	f8ad 6018 	strh.w	r6, [sp, #24]
 80248f4:	f8ad 701a 	strh.w	r7, [sp, #26]
 80248f8:	b924      	cbnz	r4, 8024904 <MobleConfigModel_ProcessAppKeyUpdate+0x98>
 80248fa:	2310      	movs	r3, #16
 80248fc:	f8cd a020 	str.w	sl, [sp, #32]
 8024900:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8024904:	4b19      	ldr	r3, [pc, #100]	; (802496c <MobleConfigModel_ProcessAppKeyUpdate+0x100>)
 8024906:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
 802490a:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 802490e:	a806      	add	r0, sp, #24
 8024910:	68db      	ldr	r3, [r3, #12]
 8024912:	4798      	blx	r3
 8024914:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8024916:	4622      	mov	r2, r4
 8024918:	e9cd 7300 	strd	r7, r3, [sp]
 802491c:	4649      	mov	r1, r9
 802491e:	4633      	mov	r3, r6
 8024920:	4640      	mov	r0, r8
 8024922:	f7ff ff69 	bl	80247f8 <MobleConfigModel_SendAppKeyStatus>
 8024926:	b00b      	add	sp, #44	; 0x2c
 8024928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802492c:	2c00      	cmp	r4, #0
 802492e:	d1df      	bne.n	80248f0 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024930:	4639      	mov	r1, r7
 8024932:	4630      	mov	r0, r6
 8024934:	f7f5 fc6e 	bl	801a214 <MoblePalCryptoHasAppKeyIndex>
 8024938:	2803      	cmp	r0, #3
 802493a:	d011      	beq.n	8024960 <MobleConfigModel_ProcessAppKeyUpdate+0xf4>
 802493c:	2801      	cmp	r0, #1
 802493e:	d011      	beq.n	8024964 <MobleConfigModel_ProcessAppKeyUpdate+0xf8>
 8024940:	4632      	mov	r2, r6
 8024942:	4650      	mov	r0, sl
 8024944:	f7f4 fe92 	bl	801966c <MoblePalCryptoSetNewAppKey>
 8024948:	4604      	mov	r4, r0
 802494a:	b920      	cbnz	r0, 8024956 <MobleConfigModel_ProcessAppKeyUpdate+0xea>
 802494c:	f8d8 0000 	ldr.w	r0, [r8]
 8024950:	f7f8 fa92 	bl	801ce78 <MobleConfigNetworkSave>
 8024954:	e7cc      	b.n	80248f0 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024956:	2803      	cmp	r0, #3
 8024958:	bf0c      	ite	eq
 802495a:	2406      	moveq	r4, #6
 802495c:	2405      	movne	r4, #5
 802495e:	e7c7      	b.n	80248f0 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024960:	2411      	movs	r4, #17
 8024962:	e7c5      	b.n	80248f0 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024964:	2403      	movs	r4, #3
 8024966:	e7c3      	b.n	80248f0 <MobleConfigModel_ProcessAppKeyUpdate+0x84>
 8024968:	20000324 	.word	0x20000324
 802496c:	20002514 	.word	0x20002514

08024970 <MobleConfigModel_ProcessAppKeyDelete>:
 8024970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024974:	461a      	mov	r2, r3
 8024976:	b086      	sub	sp, #24
 8024978:	4605      	mov	r5, r0
 802497a:	4618      	mov	r0, r3
 802497c:	f7f2 ffa9 	bl	80178d2 <MobleConfigModelGetNetIdx>
 8024980:	7857      	ldrb	r7, [r2, #1]
 8024982:	7892      	ldrb	r2, [r2, #2]
 8024984:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8024988:	ea4f 1202 	mov.w	r2, r2, lsl #4
 802498c:	460e      	mov	r6, r1
 802498e:	4680      	mov	r8, r0
 8024990:	eb02 1717 	add.w	r7, r2, r7, lsr #4
 8024994:	d226      	bcs.n	80249e4 <MobleConfigModel_ProcessAppKeyDelete+0x74>
 8024996:	4601      	mov	r1, r0
 8024998:	4638      	mov	r0, r7
 802499a:	f7f5 fac3 	bl	8019f24 <MoblePalCryptoDeleteAppKey>
 802499e:	1e04      	subs	r4, r0, #0
 80249a0:	bf18      	it	ne
 80249a2:	2403      	movne	r4, #3
 80249a4:	6828      	ldr	r0, [r5, #0]
 80249a6:	f7f8 fa67 	bl	801ce78 <MobleConfigNetworkSave>
 80249aa:	f8ad 8008 	strh.w	r8, [sp, #8]
 80249ae:	f8ad 700a 	strh.w	r7, [sp, #10]
 80249b2:	f88d 4015 	strb.w	r4, [sp, #21]
 80249b6:	b9bc      	cbnz	r4, 80249e8 <MobleConfigModel_ProcessAppKeyDelete+0x78>
 80249b8:	9404      	str	r4, [sp, #16]
 80249ba:	2310      	movs	r3, #16
 80249bc:	f88d 3014 	strb.w	r3, [sp, #20]
 80249c0:	4b0a      	ldr	r3, [pc, #40]	; (80249ec <MobleConfigModel_ProcessAppKeyDelete+0x7c>)
 80249c2:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 80249c6:	a802      	add	r0, sp, #8
 80249c8:	685b      	ldr	r3, [r3, #4]
 80249ca:	4798      	blx	r3
 80249cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80249ce:	4622      	mov	r2, r4
 80249d0:	e9cd 7300 	strd	r7, r3, [sp]
 80249d4:	4631      	mov	r1, r6
 80249d6:	4643      	mov	r3, r8
 80249d8:	4628      	mov	r0, r5
 80249da:	f7ff ff0d 	bl	80247f8 <MobleConfigModel_SendAppKeyStatus>
 80249de:	b006      	add	sp, #24
 80249e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80249e4:	2404      	movs	r4, #4
 80249e6:	e7dd      	b.n	80249a4 <MobleConfigModel_ProcessAppKeyDelete+0x34>
 80249e8:	2300      	movs	r3, #0
 80249ea:	e7e7      	b.n	80249bc <MobleConfigModel_ProcessAppKeyDelete+0x4c>
 80249ec:	20002514 	.word	0x20002514

080249f0 <MobleConfigModel_ProcessAppKeyAdd>:
 80249f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80249f4:	461c      	mov	r4, r3
 80249f6:	b08b      	sub	sp, #44	; 0x2c
 80249f8:	4607      	mov	r7, r0
 80249fa:	4618      	mov	r0, r3
 80249fc:	f7f2 ff69 	bl	80178d2 <MobleConfigModelGetNetIdx>
 8024a00:	78a5      	ldrb	r5, [r4, #2]
 8024a02:	7863      	ldrb	r3, [r4, #1]
 8024a04:	012d      	lsls	r5, r5, #4
 8024a06:	aa02      	add	r2, sp, #8
 8024a08:	eb05 1513 	add.w	r5, r5, r3, lsr #4
 8024a0c:	4688      	mov	r8, r1
 8024a0e:	1ce3      	adds	r3, r4, #3
 8024a10:	4606      	mov	r6, r0
 8024a12:	3413      	adds	r4, #19
 8024a14:	4691      	mov	r9, r2
 8024a16:	6818      	ldr	r0, [r3, #0]
 8024a18:	6859      	ldr	r1, [r3, #4]
 8024a1a:	4694      	mov	ip, r2
 8024a1c:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8024a20:	3308      	adds	r3, #8
 8024a22:	42a3      	cmp	r3, r4
 8024a24:	4662      	mov	r2, ip
 8024a26:	d1f6      	bne.n	8024a16 <MobleConfigModel_ProcessAppKeyAdd+0x26>
 8024a28:	f5b6 5f80 	cmp.w	r6, #4096	; 0x1000
 8024a2c:	4630      	mov	r0, r6
 8024a2e:	bf2c      	ite	cs
 8024a30:	2404      	movcs	r4, #4
 8024a32:	2400      	movcc	r4, #0
 8024a34:	f7f4 fade 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 8024a38:	4320      	orrs	r0, r4
 8024a3a:	b2c0      	uxtb	r0, r0
 8024a3c:	2800      	cmp	r0, #0
 8024a3e:	4628      	mov	r0, r5
 8024a40:	bf08      	it	eq
 8024a42:	2404      	moveq	r4, #4
 8024a44:	f7f4 faf0 	bl	8019028 <MoblePalCryptoHasAppKey>
 8024a48:	2801      	cmp	r0, #1
 8024a4a:	d111      	bne.n	8024a70 <MobleConfigModel_ProcessAppKeyAdd+0x80>
 8024a4c:	b994      	cbnz	r4, 8024a74 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024a4e:	4628      	mov	r0, r5
 8024a50:	f7f5 f9e8 	bl	8019e24 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8024a54:	42b0      	cmp	r0, r6
 8024a56:	d12f      	bne.n	8024ab8 <MobleConfigModel_ProcessAppKeyAdd+0xc8>
 8024a58:	4632      	mov	r2, r6
 8024a5a:	4629      	mov	r1, r5
 8024a5c:	4648      	mov	r0, r9
 8024a5e:	f7f4 fe93 	bl	8019788 <MoblePalCryptoSetAppKey>
 8024a62:	4604      	mov	r4, r0
 8024a64:	bb18      	cbnz	r0, 8024aae <MobleConfigModel_ProcessAppKeyAdd+0xbe>
 8024a66:	6838      	ldr	r0, [r7, #0]
 8024a68:	6084      	str	r4, [r0, #8]
 8024a6a:	f7f8 fa05 	bl	801ce78 <MobleConfigNetworkSave>
 8024a6e:	e001      	b.n	8024a74 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024a70:	2c00      	cmp	r4, #0
 8024a72:	d0f1      	beq.n	8024a58 <MobleConfigModel_ProcessAppKeyAdd+0x68>
 8024a74:	2310      	movs	r3, #16
 8024a76:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8024a7a:	4b10      	ldr	r3, [pc, #64]	; (8024abc <MobleConfigModel_ProcessAppKeyAdd+0xcc>)
 8024a7c:	f88d 4025 	strb.w	r4, [sp, #37]	; 0x25
 8024a80:	f8d3 36f8 	ldr.w	r3, [r3, #1784]	; 0x6f8
 8024a84:	f8ad 6018 	strh.w	r6, [sp, #24]
 8024a88:	a806      	add	r0, sp, #24
 8024a8a:	681b      	ldr	r3, [r3, #0]
 8024a8c:	f8ad 501a 	strh.w	r5, [sp, #26]
 8024a90:	f8cd 9020 	str.w	r9, [sp, #32]
 8024a94:	4798      	blx	r3
 8024a96:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8024a98:	4622      	mov	r2, r4
 8024a9a:	e9cd 5300 	strd	r5, r3, [sp]
 8024a9e:	4641      	mov	r1, r8
 8024aa0:	4633      	mov	r3, r6
 8024aa2:	4638      	mov	r0, r7
 8024aa4:	f7ff fea8 	bl	80247f8 <MobleConfigModel_SendAppKeyStatus>
 8024aa8:	b00b      	add	sp, #44	; 0x2c
 8024aaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024aae:	2803      	cmp	r0, #3
 8024ab0:	bf0c      	ite	eq
 8024ab2:	2406      	moveq	r4, #6
 8024ab4:	2403      	movne	r4, #3
 8024ab6:	e7dd      	b.n	8024a74 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024ab8:	2404      	movs	r4, #4
 8024aba:	e7db      	b.n	8024a74 <MobleConfigModel_ProcessAppKeyAdd+0x84>
 8024abc:	20002514 	.word	0x20002514

08024ac0 <MobleConfigModel_SendAppKeyList>:
 8024ac0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8024ac4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8024ac6:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024aca:	4688      	mov	r8, r1
 8024acc:	4606      	mov	r6, r0
 8024ace:	b930      	cbnz	r0, 8024ade <MobleConfigModel_SendAppKeyList+0x1e>
 8024ad0:	4b16      	ldr	r3, [pc, #88]	; (8024b2c <MobleConfigModel_SendAppKeyList+0x6c>)
 8024ad2:	4a17      	ldr	r2, [pc, #92]	; (8024b30 <MobleConfigModel_SendAppKeyList+0x70>)
 8024ad4:	4817      	ldr	r0, [pc, #92]	; (8024b34 <MobleConfigModel_SendAppKeyList+0x74>)
 8024ad6:	f240 711a 	movw	r1, #1818	; 0x71a
 8024ada:	f003 fff5 	bl	8028ac8 <__assert_func>
 8024ade:	2302      	movs	r3, #2
 8024ae0:	2700      	movs	r7, #0
 8024ae2:	7023      	strb	r3, [r4, #0]
 8024ae4:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8024ae8:	7063      	strb	r3, [r4, #1]
 8024aea:	7222      	strb	r2, [r4, #8]
 8024aec:	f10d 0306 	add.w	r3, sp, #6
 8024af0:	f104 0209 	add.w	r2, r4, #9
 8024af4:	70a7      	strb	r7, [r4, #2]
 8024af6:	70e7      	strb	r7, [r4, #3]
 8024af8:	2101      	movs	r1, #1
 8024afa:	4638      	mov	r0, r7
 8024afc:	f7f2 fef0 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8024b00:	9b08      	ldr	r3, [sp, #32]
 8024b02:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8024b06:	f104 020b 	add.w	r2, r4, #11
 8024b0a:	4605      	mov	r5, r0
 8024b0c:	4638      	mov	r0, r7
 8024b0e:	f7f2 fee7 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8024b12:	4405      	add	r5, r0
 8024b14:	3501      	adds	r5, #1
 8024b16:	f8c4 50a3 	str.w	r5, [r4, #163]	; 0xa3
 8024b1a:	4623      	mov	r3, r4
 8024b1c:	4642      	mov	r2, r8
 8024b1e:	2101      	movs	r1, #1
 8024b20:	4630      	mov	r0, r6
 8024b22:	f7fd ffdd 	bl	8022ae0 <MobleModelSendPacket>
 8024b26:	b002      	add	sp, #8
 8024b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024b2c:	08033381 	.word	0x08033381
 8024b30:	08032325 	.word	0x08032325
 8024b34:	08033393 	.word	0x08033393

08024b38 <MobleConfigModel_ProcessAppKeyGet>:
 8024b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8024b3c:	4605      	mov	r5, r0
 8024b3e:	b08c      	sub	sp, #48	; 0x30
 8024b40:	4618      	mov	r0, r3
 8024b42:	f7f2 fec6 	bl	80178d2 <MobleConfigModelGetNetIdx>
 8024b46:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8024b4a:	bf28      	it	cs
 8024b4c:	2200      	movcs	r2, #0
 8024b4e:	460e      	mov	r6, r1
 8024b50:	bf28      	it	cs
 8024b52:	f8ad 201a 	strhcs.w	r2, [sp, #26]
 8024b56:	9005      	str	r0, [sp, #20]
 8024b58:	f7f4 fa4c 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 8024b5c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
 8024b60:	9b05      	ldr	r3, [sp, #20]
 8024b62:	b908      	cbnz	r0, 8024b68 <MobleConfigModel_ProcessAppKeyGet+0x30>
 8024b64:	f8ad 001a 	strh.w	r0, [sp, #26]
 8024b68:	af07      	add	r7, sp, #28
 8024b6a:	461a      	mov	r2, r3
 8024b6c:	f10d 011a 	add.w	r1, sp, #26
 8024b70:	4638      	mov	r0, r7
 8024b72:	9305      	str	r3, [sp, #20]
 8024b74:	f7f5 f916 	bl	8019da4 <MoblePalCryptoGetAppKeyIndexes>
 8024b78:	9b05      	ldr	r3, [sp, #20]
 8024b7a:	4604      	mov	r4, r0
 8024b7c:	b118      	cbz	r0, 8024b86 <MobleConfigModel_ProcessAppKeyGet+0x4e>
 8024b7e:	2200      	movs	r2, #0
 8024b80:	f8ad 201a 	strh.w	r2, [sp, #26]
 8024b84:	2404      	movs	r4, #4
 8024b86:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8024b8a:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8024b8e:	4a0f      	ldr	r2, [pc, #60]	; (8024bcc <MobleConfigModel_ProcessAppKeyGet+0x94>)
 8024b90:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
 8024b94:	f8d2 26f8 	ldr.w	r2, [r2, #1784]	; 0x6f8
 8024b98:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8024b9c:	6892      	ldr	r2, [r2, #8]
 8024b9e:	970a      	str	r7, [sp, #40]	; 0x28
 8024ba0:	a809      	add	r0, sp, #36	; 0x24
 8024ba2:	9305      	str	r3, [sp, #20]
 8024ba4:	4790      	blx	r2
 8024ba6:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8024baa:	9b05      	ldr	r3, [sp, #20]
 8024bac:	e9cd 2801 	strd	r2, r8, [sp, #4]
 8024bb0:	b944      	cbnz	r4, 8024bc4 <MobleConfigModel_ProcessAppKeyGet+0x8c>
 8024bb2:	9700      	str	r7, [sp, #0]
 8024bb4:	4622      	mov	r2, r4
 8024bb6:	4631      	mov	r1, r6
 8024bb8:	4628      	mov	r0, r5
 8024bba:	f7ff ff81 	bl	8024ac0 <MobleConfigModel_SendAppKeyList>
 8024bbe:	b00c      	add	sp, #48	; 0x30
 8024bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024bc4:	2200      	movs	r2, #0
 8024bc6:	9200      	str	r2, [sp, #0]
 8024bc8:	e7f4      	b.n	8024bb4 <MobleConfigModel_ProcessAppKeyGet+0x7c>
 8024bca:	bf00      	nop
 8024bcc:	20002514 	.word	0x20002514

08024bd0 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>:
 8024bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024bd4:	461d      	mov	r5, r3
 8024bd6:	f89d 8020 	ldrb.w	r8, [sp, #32]
 8024bda:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
 8024bde:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8024be2:	f8bd 702c 	ldrh.w	r7, [sp, #44]	; 0x2c
 8024be6:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
 8024bea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024bec:	b930      	cbnz	r0, 8024bfc <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x2c>
 8024bee:	4b14      	ldr	r3, [pc, #80]	; (8024c40 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x70>)
 8024bf0:	4a14      	ldr	r2, [pc, #80]	; (8024c44 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x74>)
 8024bf2:	4815      	ldr	r0, [pc, #84]	; (8024c48 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus+0x78>)
 8024bf4:	f240 71f1 	movw	r1, #2033	; 0x7f1
 8024bf8:	f003 ff66 	bl	8028ac8 <__assert_func>
 8024bfc:	2400      	movs	r4, #0
 8024bfe:	f04f 0906 	mov.w	r9, #6
 8024c02:	721a      	strb	r2, [r3, #8]
 8024c04:	f8a3 5009 	strh.w	r5, [r3, #9]
 8024c08:	220a      	movs	r2, #10
 8024c0a:	81df      	strh	r7, [r3, #14]
 8024c0c:	821e      	strh	r6, [r3, #16]
 8024c0e:	f883 9000 	strb.w	r9, [r3]
 8024c12:	705c      	strb	r4, [r3, #1]
 8024c14:	709c      	strb	r4, [r3, #2]
 8024c16:	70dc      	strb	r4, [r3, #3]
 8024c18:	f883 800b 	strb.w	r8, [r3, #11]
 8024c1c:	f883 e00c 	strb.w	lr, [r3, #12]
 8024c20:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8024c24:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8024c28:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8024c2c:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024c30:	460a      	mov	r2, r1
 8024c32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c36:	f883 c00d 	strb.w	ip, [r3, #13]
 8024c3a:	2101      	movs	r1, #1
 8024c3c:	f7fd bf50 	b.w	8022ae0 <MobleModelSendPacket>
 8024c40:	08033381 	.word	0x08033381
 8024c44:	08032345 	.word	0x08032345
 8024c48:	08033393 	.word	0x08033393

08024c4c <BnrgmConfigModel_ProcessHeartBeatPublicationSet>:
 8024c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024c50:	f8d3 9000 	ldr.w	r9, [r3]
 8024c54:	789e      	ldrb	r6, [r3, #2]
 8024c56:	461d      	mov	r5, r3
 8024c58:	fa1f f989 	uxth.w	r9, r9
 8024c5c:	f1a6 0312 	sub.w	r3, r6, #18
 8024c60:	f1b9 0f00 	cmp.w	r9, #0
 8024c64:	b2db      	uxtb	r3, r3
 8024c66:	78ea      	ldrb	r2, [r5, #3]
 8024c68:	f895 a004 	ldrb.w	sl, [r5, #4]
 8024c6c:	bf14      	ite	ne
 8024c6e:	2400      	movne	r4, #0
 8024c70:	2402      	moveq	r4, #2
 8024c72:	2bec      	cmp	r3, #236	; 0xec
 8024c74:	f995 3004 	ldrsb.w	r3, [r5, #4]
 8024c78:	bf98      	it	ls
 8024c7a:	2402      	movls	r4, #2
 8024c7c:	2a12      	cmp	r2, #18
 8024c7e:	bf28      	it	cs
 8024c80:	2402      	movcs	r4, #2
 8024c82:	b086      	sub	sp, #24
 8024c84:	2b00      	cmp	r3, #0
 8024c86:	4680      	mov	r8, r0
 8024c88:	f105 0007 	add.w	r0, r5, #7
 8024c8c:	bfb8      	it	lt
 8024c8e:	2402      	movlt	r4, #2
 8024c90:	f7f2 fe1f 	bl	80178d2 <MobleConfigModelGetNetIdx>
 8024c94:	4607      	mov	r7, r0
 8024c96:	2800      	cmp	r0, #0
 8024c98:	d041      	beq.n	8024d1e <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xd2>
 8024c9a:	4b30      	ldr	r3, [pc, #192]	; (8024d5c <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x110>)
 8024c9c:	207c      	movs	r0, #124	; 0x7c
 8024c9e:	fb00 3307 	mla	r3, r0, r7, r3
 8024ca2:	f893 3445 	ldrb.w	r3, [r3, #1093]	; 0x445
 8024ca6:	2b00      	cmp	r3, #0
 8024ca8:	bf14      	ite	ne
 8024caa:	f04f 0c00 	movne.w	ip, #0
 8024cae:	f04f 0c04 	moveq.w	ip, #4
 8024cb2:	bb84      	cbnz	r4, 8024d16 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xca>
 8024cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8024cb8:	f8d5 e005 	ldr.w	lr, [r5, #5]
 8024cbc:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8024cbe:	f8a5 901e 	strh.w	r9, [r5, #30]
 8024cc2:	bb76      	cbnz	r6, 8024d22 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xd6>
 8024cc4:	626e      	str	r6, [r5, #36]	; 0x24
 8024cc6:	2a00      	cmp	r2, #0
 8024cc8:	d13f      	bne.n	8024d4a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xfe>
 8024cca:	852a      	strh	r2, [r5, #40]	; 0x28
 8024ccc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8024cce:	f885 a01c 	strb.w	sl, [r5, #28]
 8024cd2:	f00e 000f 	and.w	r0, lr, #15
 8024cd6:	8568      	strh	r0, [r5, #42]	; 0x2a
 8024cd8:	85af      	strh	r7, [r5, #44]	; 0x2c
 8024cda:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8024cde:	e9cd a002 	strd	sl, r0, [sp, #8]
 8024ce2:	e9cd 6200 	strd	r6, r2, [sp]
 8024ce6:	464b      	mov	r3, r9
 8024ce8:	4662      	mov	r2, ip
 8024cea:	4640      	mov	r0, r8
 8024cec:	f7ff ff70 	bl	8024bd0 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 8024cf0:	f8d8 3000 	ldr.w	r3, [r8]
 8024cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024cf6:	4604      	mov	r4, r0
 8024cf8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8024cfa:	f7f2 ffb3 	bl	8017c64 <MoblePalTimerStop>
 8024cfe:	f8d8 3000 	ldr.w	r3, [r8]
 8024d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024d04:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024d06:	b132      	cbz	r2, 8024d16 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xca>
 8024d08:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8024d0a:	b122      	cbz	r2, 8024d16 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xca>
 8024d0c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8024d0e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024d12:	f7f2 ff7f 	bl	8017c14 <MoblePalTimerStartOnce>
 8024d16:	4620      	mov	r0, r4
 8024d18:	b006      	add	sp, #24
 8024d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024d1e:	4684      	mov	ip, r0
 8024d20:	e7c7      	b.n	8024cb2 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x66>
 8024d22:	2eff      	cmp	r6, #255	; 0xff
 8024d24:	d103      	bne.n	8024d2e <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xe2>
 8024d26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024d2a:	626b      	str	r3, [r5, #36]	; 0x24
 8024d2c:	e7cb      	b.n	8024cc6 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x7a>
 8024d2e:	2e11      	cmp	r6, #17
 8024d30:	d102      	bne.n	8024d38 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xec>
 8024d32:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8024d36:	e7f8      	b.n	8024d2a <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0xde>
 8024d38:	1e70      	subs	r0, r6, #1
 8024d3a:	b2c0      	uxtb	r0, r0
 8024d3c:	281f      	cmp	r0, #31
 8024d3e:	bf9c      	itt	ls
 8024d40:	2401      	movls	r4, #1
 8024d42:	4084      	lslls	r4, r0
 8024d44:	b2a4      	uxth	r4, r4
 8024d46:	626c      	str	r4, [r5, #36]	; 0x24
 8024d48:	e7bd      	b.n	8024cc6 <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x7a>
 8024d4a:	1e53      	subs	r3, r2, #1
 8024d4c:	b2d8      	uxtb	r0, r3
 8024d4e:	281f      	cmp	r0, #31
 8024d50:	bf9a      	itte	ls
 8024d52:	2301      	movls	r3, #1
 8024d54:	4083      	lslls	r3, r0
 8024d56:	2300      	movhi	r3, #0
 8024d58:	852b      	strh	r3, [r5, #40]	; 0x28
 8024d5a:	e7b7      	b.n	8024ccc <BnrgmConfigModel_ProcessHeartBeatPublicationSet+0x80>
 8024d5c:	2000141c 	.word	0x2000141c

08024d60 <BnrgmConfigModel_ProcessHeartBeatPublicationGet>:
 8024d60:	6803      	ldr	r3, [r0, #0]
 8024d62:	b570      	push	{r4, r5, r6, lr}
 8024d64:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8024d66:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8024d68:	b086      	sub	sp, #24
 8024d6a:	b313      	cbz	r3, 8024db2 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x52>
 8024d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024d70:	4293      	cmp	r3, r2
 8024d72:	d020      	beq.n	8024db6 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x56>
 8024d74:	2400      	movs	r4, #0
 8024d76:	3401      	adds	r4, #1
 8024d78:	2b01      	cmp	r3, #1
 8024d7a:	b2e4      	uxtb	r4, r4
 8024d7c:	d117      	bne.n	8024dae <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x4e>
 8024d7e:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
 8024d80:	b12a      	cbz	r2, 8024d8e <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x2e>
 8024d82:	4616      	mov	r6, r2
 8024d84:	2200      	movs	r2, #0
 8024d86:	1c53      	adds	r3, r2, #1
 8024d88:	2e01      	cmp	r6, #1
 8024d8a:	b2da      	uxtb	r2, r3
 8024d8c:	d115      	bne.n	8024dba <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x5a>
 8024d8e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8024d90:	8beb      	ldrh	r3, [r5, #30]
 8024d92:	9605      	str	r6, [sp, #20]
 8024d94:	8dae      	ldrh	r6, [r5, #44]	; 0x2c
 8024d96:	9604      	str	r6, [sp, #16]
 8024d98:	8d6e      	ldrh	r6, [r5, #42]	; 0x2a
 8024d9a:	9603      	str	r6, [sp, #12]
 8024d9c:	7f2d      	ldrb	r5, [r5, #28]
 8024d9e:	9400      	str	r4, [sp, #0]
 8024da0:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8024da4:	2200      	movs	r2, #0
 8024da6:	f7ff ff13 	bl	8024bd0 <BnrgmConfigModel_SendConfigHeartbeatPublicationStatus>
 8024daa:	b006      	add	sp, #24
 8024dac:	bd70      	pop	{r4, r5, r6, pc}
 8024dae:	085b      	lsrs	r3, r3, #1
 8024db0:	e7e1      	b.n	8024d76 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x16>
 8024db2:	461c      	mov	r4, r3
 8024db4:	e7e3      	b.n	8024d7e <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 8024db6:	24ff      	movs	r4, #255	; 0xff
 8024db8:	e7e1      	b.n	8024d7e <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x1e>
 8024dba:	0876      	lsrs	r6, r6, #1
 8024dbc:	e7e3      	b.n	8024d86 <BnrgmConfigModel_ProcessHeartBeatPublicationGet+0x26>
	...

08024dc0 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>:
 8024dc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024dc4:	461d      	mov	r5, r3
 8024dc6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
 8024dca:	f89d e024 	ldrb.w	lr, [sp, #36]	; 0x24
 8024dce:	f89d c028 	ldrb.w	ip, [sp, #40]	; 0x28
 8024dd2:	f89d 702c 	ldrb.w	r7, [sp, #44]	; 0x2c
 8024dd6:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
 8024dda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8024ddc:	b930      	cbnz	r0, 8024dec <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x2c>
 8024dde:	4b16      	ldr	r3, [pc, #88]	; (8024e38 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x78>)
 8024de0:	4a16      	ldr	r2, [pc, #88]	; (8024e3c <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x7c>)
 8024de2:	4817      	ldr	r0, [pc, #92]	; (8024e40 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus+0x80>)
 8024de4:	f640 0118 	movw	r1, #2072	; 0x818
 8024de8:	f003 fe6e 	bl	8028ac8 <__assert_func>
 8024dec:	f04f 093c 	mov.w	r9, #60	; 0x3c
 8024df0:	2400      	movs	r4, #0
 8024df2:	f883 9000 	strb.w	r9, [r3]
 8024df6:	721a      	strb	r2, [r3, #8]
 8024df8:	f06f 097f 	mvn.w	r9, #127	; 0x7f
 8024dfc:	2209      	movs	r2, #9
 8024dfe:	f8a3 5009 	strh.w	r5, [r3, #9]
 8024e02:	f8a3 800b 	strh.w	r8, [r3, #11]
 8024e06:	f883 9001 	strb.w	r9, [r3, #1]
 8024e0a:	709c      	strb	r4, [r3, #2]
 8024e0c:	70dc      	strb	r4, [r3, #3]
 8024e0e:	f883 e00d 	strb.w	lr, [r3, #13]
 8024e12:	73df      	strb	r7, [r3, #15]
 8024e14:	741e      	strb	r6, [r3, #16]
 8024e16:	f883 20a3 	strb.w	r2, [r3, #163]	; 0xa3
 8024e1a:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8024e1e:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8024e22:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8024e26:	460a      	mov	r2, r1
 8024e28:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e2c:	f883 c00e 	strb.w	ip, [r3, #14]
 8024e30:	2101      	movs	r1, #1
 8024e32:	f7fd be55 	b.w	8022ae0 <MobleModelSendPacket>
 8024e36:	bf00      	nop
 8024e38:	08033381 	.word	0x08033381
 8024e3c:	0803237b 	.word	0x0803237b
 8024e40:	08033393 	.word	0x08033393

08024e44 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet>:
 8024e44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8024e48:	460f      	mov	r7, r1
 8024e4a:	4946      	ldr	r1, [pc, #280]	; (8024f64 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x120>)
 8024e4c:	4605      	mov	r5, r0
 8024e4e:	2000      	movs	r0, #0
 8024e50:	f8c1 00e8 	str.w	r0, [r1, #232]	; 0xe8
 8024e54:	681a      	ldr	r2, [r3, #0]
 8024e56:	fa1f fc82 	uxth.w	ip, r2
 8024e5a:	b212      	sxth	r2, r2
 8024e5c:	4282      	cmp	r2, r0
 8024e5e:	b087      	sub	sp, #28
 8024e60:	dc03      	bgt.n	8024e6a <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x26>
 8024e62:	f1bc 0f00 	cmp.w	ip, #0
 8024e66:	d114      	bne.n	8024e92 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8024e68:	2001      	movs	r0, #1
 8024e6a:	f8d3 8002 	ldr.w	r8, [r3, #2]
 8024e6e:	fa1f f988 	uxth.w	r9, r8
 8024e72:	f1b9 0f00 	cmp.w	r9, #0
 8024e76:	d00e      	beq.n	8024e96 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x52>
 8024e78:	f408 4240 	and.w	r2, r8, #49152	; 0xc000
 8024e7c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8024e80:	d007      	beq.n	8024e92 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x4e>
 8024e82:	fa0f f288 	sxth.w	r2, r8
 8024e86:	2a00      	cmp	r2, #0
 8024e88:	dd06      	ble.n	8024e98 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x54>
 8024e8a:	682a      	ldr	r2, [r5, #0]
 8024e8c:	8852      	ldrh	r2, [r2, #2]
 8024e8e:	454a      	cmp	r2, r9
 8024e90:	d002      	beq.n	8024e98 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x54>
 8024e92:	2002      	movs	r0, #2
 8024e94:	e04c      	b.n	8024f30 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xec>
 8024e96:	2001      	movs	r0, #1
 8024e98:	791c      	ldrb	r4, [r3, #4]
 8024e9a:	682b      	ldr	r3, [r5, #0]
 8024e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024e9e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8024ea0:	4562      	cmp	r2, ip
 8024ea2:	d103      	bne.n	8024eac <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x68>
 8024ea4:	8eda      	ldrh	r2, [r3, #54]	; 0x36
 8024ea6:	454a      	cmp	r2, r9
 8024ea8:	d100      	bne.n	8024eac <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x68>
 8024eaa:	b114      	cbz	r4, 8024eb2 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x6e>
 8024eac:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 8024eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8024eb2:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8024eb4:	2a00      	cmp	r2, #0
 8024eb6:	d040      	beq.n	8024f3a <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf6>
 8024eb8:	f64f 76ff 	movw	r6, #65535	; 0xffff
 8024ebc:	42b2      	cmp	r2, r6
 8024ebe:	d03e      	beq.n	8024f3e <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xfa>
 8024ec0:	2600      	movs	r6, #0
 8024ec2:	3601      	adds	r6, #1
 8024ec4:	2a01      	cmp	r2, #1
 8024ec6:	b2f6      	uxtb	r6, r6
 8024ec8:	d135      	bne.n	8024f36 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xf2>
 8024eca:	2c00      	cmp	r4, #0
 8024ecc:	d139      	bne.n	8024f42 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xfe>
 8024ece:	635c      	str	r4, [r3, #52]	; 0x34
 8024ed0:	b108      	cbz	r0, 8024ed6 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x92>
 8024ed2:	2200      	movs	r2, #0
 8024ed4:	635a      	str	r2, [r3, #52]	; 0x34
 8024ed6:	2400      	movs	r4, #0
 8024ed8:	f8c1 40e8 	str.w	r4, [r1, #232]	; 0xe8
 8024edc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8024ede:	f7f2 fec1 	bl	8017c64 <MoblePalTimerStop>
 8024ee2:	682b      	ldr	r3, [r5, #0]
 8024ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8024ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8024ee8:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8024eec:	d304      	bcc.n	8024ef8 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xb4>
 8024eee:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8024ef0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8024ef4:	f7f2 fe5d 	bl	8017bb2 <MoblePalTimerStart>
 8024ef8:	fa0f f888 	sxth.w	r8, r8
 8024efc:	f1b8 0f00 	cmp.w	r8, #0
 8024f00:	dc02      	bgt.n	8024f08 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0xc4>
 8024f02:	4648      	mov	r0, r9
 8024f04:	f7f8 ff82 	bl	801de0c <BnrgmFrndMgmtSubscriptionListAdd>
 8024f08:	682b      	ldr	r3, [r5, #0]
 8024f0a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8024f0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8024f0e:	8e93      	ldrh	r3, [r2, #52]	; 0x34
 8024f10:	9105      	str	r1, [sp, #20]
 8024f12:	f892 103b 	ldrb.w	r1, [r2, #59]	; 0x3b
 8024f16:	9104      	str	r1, [sp, #16]
 8024f18:	f892 103a 	ldrb.w	r1, [r2, #58]	; 0x3a
 8024f1c:	9401      	str	r4, [sp, #4]
 8024f1e:	e9cd 6102 	strd	r6, r1, [sp, #8]
 8024f22:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8024f24:	9200      	str	r2, [sp, #0]
 8024f26:	4639      	mov	r1, r7
 8024f28:	2200      	movs	r2, #0
 8024f2a:	4628      	mov	r0, r5
 8024f2c:	f7ff ff48 	bl	8024dc0 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 8024f30:	b007      	add	sp, #28
 8024f32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8024f36:	0852      	lsrs	r2, r2, #1
 8024f38:	e7c3      	b.n	8024ec2 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x7e>
 8024f3a:	4616      	mov	r6, r2
 8024f3c:	e7c5      	b.n	8024eca <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x86>
 8024f3e:	26ff      	movs	r6, #255	; 0xff
 8024f40:	e7c3      	b.n	8024eca <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x86>
 8024f42:	f8a3 c034 	strh.w	ip, [r3, #52]	; 0x34
 8024f46:	f8a3 9036 	strh.w	r9, [r3, #54]	; 0x36
 8024f4a:	2800      	cmp	r0, #0
 8024f4c:	d1c1      	bne.n	8024ed2 <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x8e>
 8024f4e:	2c11      	cmp	r4, #17
 8024f50:	d8c4      	bhi.n	8024edc <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x98>
 8024f52:	1e62      	subs	r2, r4, #1
 8024f54:	b2d0      	uxtb	r0, r2
 8024f56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8024f5a:	4082      	lsls	r2, r0
 8024f5c:	f8c1 20e8 	str.w	r2, [r1, #232]	; 0xe8
 8024f60:	e7bc      	b.n	8024edc <BnrgmConfigModel_ProcessHeartBeatSubscriptionSet+0x98>
 8024f62:	bf00      	nop
 8024f64:	20000324 	.word	0x20000324

08024f68 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet>:
 8024f68:	6803      	ldr	r3, [r0, #0]
 8024f6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8024f6c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8024f6e:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
 8024f70:	b087      	sub	sp, #28
 8024f72:	468c      	mov	ip, r1
 8024f74:	b3a3      	cbz	r3, 8024fe0 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x78>
 8024f76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8024f7a:	4293      	cmp	r3, r2
 8024f7c:	d032      	beq.n	8024fe4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x7c>
 8024f7e:	2200      	movs	r2, #0
 8024f80:	3201      	adds	r2, #1
 8024f82:	2b01      	cmp	r3, #1
 8024f84:	b2d2      	uxtb	r2, r2
 8024f86:	d129      	bne.n	8024fdc <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x74>
 8024f88:	4b1c      	ldr	r3, [pc, #112]	; (8024ffc <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x94>)
 8024f8a:	f8d3 40e8 	ldr.w	r4, [r3, #232]	; 0xe8
 8024f8e:	f1b4 7f7a 	cmp.w	r4, #65536000	; 0x3e80000
 8024f92:	d229      	bcs.n	8024fe8 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x80>
 8024f94:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8024f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8024f9c:	fbb4 f3f3 	udiv	r3, r4, r3
 8024fa0:	b29b      	uxth	r3, r3
 8024fa2:	d326      	bcc.n	8024ff2 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8a>
 8024fa4:	2400      	movs	r4, #0
 8024fa6:	3401      	adds	r4, #1
 8024fa8:	2b01      	cmp	r3, #1
 8024faa:	b2e4      	uxtb	r4, r4
 8024fac:	d11f      	bne.n	8024fee <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x86>
 8024fae:	8eab      	ldrh	r3, [r5, #52]	; 0x34
 8024fb0:	f895 603a 	ldrb.w	r6, [r5, #58]	; 0x3a
 8024fb4:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 8024fb6:	b1f3      	cbz	r3, 8024ff6 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x8e>
 8024fb8:	2f00      	cmp	r7, #0
 8024fba:	bf08      	it	eq
 8024fbc:	2600      	moveq	r6, #0
 8024fbe:	990d      	ldr	r1, [sp, #52]	; 0x34
 8024fc0:	9105      	str	r1, [sp, #20]
 8024fc2:	f895 503b 	ldrb.w	r5, [r5, #59]	; 0x3b
 8024fc6:	9700      	str	r7, [sp, #0]
 8024fc8:	e9cd 4201 	strd	r4, r2, [sp, #4]
 8024fcc:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8024fd0:	2200      	movs	r2, #0
 8024fd2:	4661      	mov	r1, ip
 8024fd4:	f7ff fef4 	bl	8024dc0 <BnrgmConfigModel_SendConfigHeartbeatSubscriptionStatus>
 8024fd8:	b007      	add	sp, #28
 8024fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8024fdc:	085b      	lsrs	r3, r3, #1
 8024fde:	e7cf      	b.n	8024f80 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x18>
 8024fe0:	461a      	mov	r2, r3
 8024fe2:	e7d1      	b.n	8024f88 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 8024fe4:	22ff      	movs	r2, #255	; 0xff
 8024fe6:	e7cf      	b.n	8024f88 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x20>
 8024fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8024fec:	e7da      	b.n	8024fa4 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3c>
 8024fee:	085b      	lsrs	r3, r3, #1
 8024ff0:	e7d9      	b.n	8024fa6 <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x3e>
 8024ff2:	2400      	movs	r4, #0
 8024ff4:	e7db      	b.n	8024fae <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x46>
 8024ff6:	461e      	mov	r6, r3
 8024ff8:	e7e1      	b.n	8024fbe <BnrgmConfigModel_ProcessHeartBeatSubscriptionGet+0x56>
 8024ffa:	bf00      	nop
 8024ffc:	20000324 	.word	0x20000324

08025000 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>:
 8025000:	b570      	push	{r4, r5, r6, lr}
 8025002:	461d      	mov	r5, r3
 8025004:	9b04      	ldr	r3, [sp, #16]
 8025006:	b930      	cbnz	r0, 8025016 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x16>
 8025008:	4b10      	ldr	r3, [pc, #64]	; (802504c <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x4c>)
 802500a:	4a11      	ldr	r2, [pc, #68]	; (8025050 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x50>)
 802500c:	4811      	ldr	r0, [pc, #68]	; (8025054 <BnrgmConfigModel_SendConfigNetworkTransmitStatus+0x54>)
 802500e:	f640 111d 	movw	r1, #2333	; 0x91d
 8025012:	f003 fd59 	bl	8028ac8 <__assert_func>
 8025016:	ea42 05c5 	orr.w	r5, r2, r5, lsl #3
 802501a:	2625      	movs	r6, #37	; 0x25
 802501c:	2400      	movs	r4, #0
 802501e:	701e      	strb	r6, [r3, #0]
 8025020:	721d      	strb	r5, [r3, #8]
 8025022:	f06f 067f 	mvn.w	r6, #127	; 0x7f
 8025026:	2501      	movs	r5, #1
 8025028:	705e      	strb	r6, [r3, #1]
 802502a:	709c      	strb	r4, [r3, #2]
 802502c:	70dc      	strb	r4, [r3, #3]
 802502e:	f883 50a3 	strb.w	r5, [r3, #163]	; 0xa3
 8025032:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8025036:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802503a:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 802503e:	460a      	mov	r2, r1
 8025040:	4629      	mov	r1, r5
 8025042:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025046:	f7fd bd4b 	b.w	8022ae0 <MobleModelSendPacket>
 802504a:	bf00      	nop
 802504c:	08033381 	.word	0x08033381
 8025050:	080323b2 	.word	0x080323b2
 8025054:	08033393 	.word	0x08033393

08025058 <BnrgmConfigModel_ProcessNetworkTransmitSet>:
 8025058:	b410      	push	{r4}
 802505a:	6804      	ldr	r4, [r0, #0]
 802505c:	781b      	ldrb	r3, [r3, #0]
 802505e:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8025060:	f003 0207 	and.w	r2, r3, #7
 8025064:	08db      	lsrs	r3, r3, #3
 8025066:	72a2      	strb	r2, [r4, #10]
 8025068:	72e3      	strb	r3, [r4, #11]
 802506a:	9c02      	ldr	r4, [sp, #8]
 802506c:	9401      	str	r4, [sp, #4]
 802506e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025072:	f7ff bfc5 	b.w	8025000 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

08025076 <BnrgmConfigModel_ProcessNetworkTransmitGet>:
 8025076:	b410      	push	{r4}
 8025078:	6803      	ldr	r3, [r0, #0]
 802507a:	9c02      	ldr	r4, [sp, #8]
 802507c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 802507e:	7ad3      	ldrb	r3, [r2, #11]
 8025080:	7a92      	ldrb	r2, [r2, #10]
 8025082:	9401      	str	r4, [sp, #4]
 8025084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025088:	f7ff bfba 	b.w	8025000 <BnrgmConfigModel_SendConfigNetworkTransmitStatus>

0802508c <MobleConfigModel_ProcessDeviceCompositionDataGet>:
 802508c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025090:	ed2d 8b02 	vpush	{d8}
 8025094:	6803      	ldr	r3, [r0, #0]
 8025096:	b0df      	sub	sp, #380	; 0x17c
 8025098:	885a      	ldrh	r2, [r3, #2]
 802509a:	7f1b      	ldrb	r3, [r3, #28]
 802509c:	9303      	str	r3, [sp, #12]
 802509e:	4b7e      	ldr	r3, [pc, #504]	; (8025298 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x20c>)
 80250a0:	9208      	str	r2, [sp, #32]
 80250a2:	f893 40bd 	ldrb.w	r4, [r3, #189]	; 0xbd
 80250a6:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 80250aa:	9009      	str	r0, [sp, #36]	; 0x24
 80250ac:	3c02      	subs	r4, #2
 80250ae:	bf18      	it	ne
 80250b0:	2401      	movne	r4, #1
 80250b2:	2a02      	cmp	r2, #2
 80250b4:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 80250b8:	9e6b      	ldr	r6, [sp, #428]	; 0x1ac
 80250ba:	bf18      	it	ne
 80250bc:	f044 0402 	orrne.w	r4, r4, #2
 80250c0:	2a02      	cmp	r2, #2
 80250c2:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 80250c6:	685b      	ldr	r3, [r3, #4]
 80250c8:	bf18      	it	ne
 80250ca:	f044 0404 	orrne.w	r4, r4, #4
 80250ce:	699b      	ldr	r3, [r3, #24]
 80250d0:	2a02      	cmp	r2, #2
 80250d2:	ad1f      	add	r5, sp, #124	; 0x7c
 80250d4:	a80c      	add	r0, sp, #48	; 0x30
 80250d6:	bf18      	it	ne
 80250d8:	f044 0408 	orrne.w	r4, r4, #8
 80250dc:	ee08 1a10 	vmov	s16, r1
 80250e0:	4798      	blx	r3
 80250e2:	2202      	movs	r2, #2
 80250e4:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
 80250e8:	4628      	mov	r0, r5
 80250ea:	f7f6 fdfb 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 80250ee:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80250f2:	f10d 007e 	add.w	r0, sp, #126	; 0x7e
 80250f6:	f7f6 fdf5 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 80250fa:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 80250fe:	a820      	add	r0, sp, #128	; 0x80
 8025100:	f7f6 fdf0 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8025104:	2114      	movs	r1, #20
 8025106:	f10d 0082 	add.w	r0, sp, #130	; 0x82
 802510a:	f7f6 fdeb 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 802510e:	4621      	mov	r1, r4
 8025110:	a821      	add	r0, sp, #132	; 0x84
 8025112:	f7f6 fde7 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8025116:	9b03      	ldr	r3, [sp, #12]
 8025118:	9506      	str	r5, [sp, #24]
 802511a:	005b      	lsls	r3, r3, #1
 802511c:	3305      	adds	r3, #5
 802511e:	f04f 0b00 	mov.w	fp, #0
 8025122:	b2db      	uxtb	r3, r3
 8025124:	930a      	str	r3, [sp, #40]	; 0x28
 8025126:	46d8      	mov	r8, fp
 8025128:	465c      	mov	r4, fp
 802512a:	9a03      	ldr	r2, [sp, #12]
 802512c:	fa5f f38b 	uxtb.w	r3, fp
 8025130:	4293      	cmp	r3, r2
 8025132:	d321      	bcc.n	8025178 <MobleConfigModel_ProcessDeviceCompositionDataGet+0xec>
 8025134:	4a59      	ldr	r2, [pc, #356]	; (802529c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x210>)
 8025136:	f892 3a38 	ldrb.w	r3, [r2, #2616]	; 0xa38
 802513a:	3b02      	subs	r3, #2
 802513c:	f882 3a38 	strb.w	r3, [r2, #2616]	; 0xa38
 8025140:	2300      	movs	r3, #0
 8025142:	2202      	movs	r2, #2
 8025144:	7032      	strb	r2, [r6, #0]
 8025146:	7073      	strb	r3, [r6, #1]
 8025148:	4622      	mov	r2, r4
 802514a:	70b3      	strb	r3, [r6, #2]
 802514c:	70f3      	strb	r3, [r6, #3]
 802514e:	7233      	strb	r3, [r6, #8]
 8025150:	a91f      	add	r1, sp, #124	; 0x7c
 8025152:	f106 0009 	add.w	r0, r6, #9
 8025156:	3401      	adds	r4, #1
 8025158:	f004 fc3d 	bl	80299d6 <memcpy>
 802515c:	ee18 2a10 	vmov	r2, s16
 8025160:	9809      	ldr	r0, [sp, #36]	; 0x24
 8025162:	f8c6 40a3 	str.w	r4, [r6, #163]	; 0xa3
 8025166:	4633      	mov	r3, r6
 8025168:	2101      	movs	r1, #1
 802516a:	f7fd fcb9 	bl	8022ae0 <MobleModelSendPacket>
 802516e:	b05f      	add	sp, #380	; 0x17c
 8025170:	ecbd 8b02 	vpop	{d8}
 8025174:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025178:	4619      	mov	r1, r3
 802517a:	a80e      	add	r0, sp, #56	; 0x38
 802517c:	9304      	str	r3, [sp, #16]
 802517e:	f7f6 fffb 	bl	801c178 <MobleApplicationGetSigModelList>
 8025182:	9b04      	ldr	r3, [sp, #16]
 8025184:	930b      	str	r3, [sp, #44]	; 0x2c
 8025186:	4605      	mov	r5, r0
 8025188:	4619      	mov	r1, r3
 802518a:	a814      	add	r0, sp, #80	; 0x50
 802518c:	f7f7 f816 	bl	801c1bc <MobleApplicationGetVendorModelList>
 8025190:	1c6b      	adds	r3, r5, #1
 8025192:	9004      	str	r0, [sp, #16]
 8025194:	d07d      	beq.n	8025292 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x206>
 8025196:	4603      	mov	r3, r0
 8025198:	3301      	adds	r3, #1
 802519a:	d07a      	beq.n	8025292 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x206>
 802519c:	b2eb      	uxtb	r3, r5
 802519e:	2202      	movs	r2, #2
 80251a0:	f89d a010 	ldrb.w	sl, [sp, #16]
 80251a4:	9307      	str	r3, [sp, #28]
 80251a6:	fb12 5300 	smlabb	r3, r2, r0, r5
 80251aa:	9305      	str	r3, [sp, #20]
 80251ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251ae:	fa5a f785 	uxtab	r7, sl, r5
 80251b2:	b2ff      	uxtb	r7, r7
 80251b4:	2b00      	cmp	r3, #0
 80251b6:	d151      	bne.n	802525c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1d0>
 80251b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80251ba:	9905      	ldr	r1, [sp, #20]
 80251bc:	1854      	adds	r4, r2, r1
 80251be:	0064      	lsls	r4, r4, #1
 80251c0:	9a03      	ldr	r2, [sp, #12]
 80251c2:	9201      	str	r2, [sp, #4]
 80251c4:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 80251c8:	9a08      	ldr	r2, [sp, #32]
 80251ca:	9200      	str	r2, [sp, #0]
 80251cc:	4639      	mov	r1, r7
 80251ce:	9a07      	ldr	r2, [sp, #28]
 80251d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80251d2:	4648      	mov	r0, r9
 80251d4:	f7f7 f814 	bl	801c200 <MobleApplicationUpdateSigModelList>
 80251d8:	9b03      	ldr	r3, [sp, #12]
 80251da:	9301      	str	r3, [sp, #4]
 80251dc:	9b08      	ldr	r3, [sp, #32]
 80251de:	9300      	str	r3, [sp, #0]
 80251e0:	4652      	mov	r2, sl
 80251e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80251e4:	4639      	mov	r1, r7
 80251e6:	a814      	add	r0, sp, #80	; 0x50
 80251e8:	f7f7 f848 	bl	801c27c <MobleApplicationUpdateVendorModelList>
 80251ec:	9b06      	ldr	r3, [sp, #24]
 80251ee:	f108 000a 	add.w	r0, r8, #10
 80251f2:	2202      	movs	r2, #2
 80251f4:	4418      	add	r0, r3
 80251f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80251fa:	f7f6 fd73 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 80251fe:	f508 73bc 	add.w	r3, r8, #376	; 0x178
 8025202:	446b      	add	r3, sp
 8025204:	9a07      	ldr	r2, [sp, #28]
 8025206:	f803 acef 	strb.w	sl, [r3, #-239]
 802520a:	f803 2cf0 	strb.w	r2, [r3, #-240]
 802520e:	f108 030e 	add.w	r3, r8, #14
 8025212:	b2e4      	uxtb	r4, r4
 8025214:	f04f 0a00 	mov.w	sl, #0
 8025218:	9307      	str	r3, [sp, #28]
 802521a:	fa5f f38a 	uxtb.w	r3, sl
 802521e:	42ab      	cmp	r3, r5
 8025220:	f10a 0a01 	add.w	sl, sl, #1
 8025224:	db1e      	blt.n	8025264 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1d8>
 8025226:	f04f 0900 	mov.w	r9, #0
 802522a:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 802522e:	3507      	adds	r5, #7
 8025230:	9a04      	ldr	r2, [sp, #16]
 8025232:	fa5f f389 	uxtb.w	r3, r9
 8025236:	4293      	cmp	r3, r2
 8025238:	f109 0901 	add.w	r9, r9, #1
 802523c:	db1d      	blt.n	802527a <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1ee>
 802523e:	9b05      	ldr	r3, [sp, #20]
 8025240:	4a16      	ldr	r2, [pc, #88]	; (802529c <MobleConfigModel_ProcessDeviceCompositionDataGet+0x210>)
 8025242:	3302      	adds	r3, #2
 8025244:	eb08 0843 	add.w	r8, r8, r3, lsl #1
 8025248:	f892 3a38 	ldrb.w	r3, [r2, #2616]	; 0xa38
 802524c:	441f      	add	r7, r3
 802524e:	fa5f f888 	uxtb.w	r8, r8
 8025252:	f882 7a38 	strb.w	r7, [r2, #2616]	; 0xa38
 8025256:	f10b 0b01 	add.w	fp, fp, #1
 802525a:	e766      	b.n	802512a <MobleConfigModel_ProcessDeviceCompositionDataGet+0x9e>
 802525c:	9a05      	ldr	r2, [sp, #20]
 802525e:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8025262:	e7ad      	b.n	80251c0 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x134>
 8025264:	9a07      	ldr	r2, [sp, #28]
 8025266:	f839 1013 	ldrh.w	r1, [r9, r3, lsl #1]
 802526a:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 802526e:	9b06      	ldr	r3, [sp, #24]
 8025270:	2202      	movs	r2, #2
 8025272:	4418      	add	r0, r3
 8025274:	f7f6 fd36 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8025278:	e7cf      	b.n	802521a <MobleConfigModel_ProcessDeviceCompositionDataGet+0x18e>
 802527a:	eb05 0043 	add.w	r0, r5, r3, lsl #1
 802527e:	f85a 1023 	ldr.w	r1, [sl, r3, lsl #2]
 8025282:	9b06      	ldr	r3, [sp, #24]
 8025284:	eb08 0040 	add.w	r0, r8, r0, lsl #1
 8025288:	2204      	movs	r2, #4
 802528a:	4418      	add	r0, r3
 802528c:	f7f6 fd2a 	bl	801bce4 <MobleOutputStreamPutLittleEndian>
 8025290:	e7ce      	b.n	8025230 <MobleConfigModel_ProcessDeviceCompositionDataGet+0x1a4>
 8025292:	2002      	movs	r0, #2
 8025294:	e76b      	b.n	802516e <MobleConfigModel_ProcessDeviceCompositionDataGet+0xe2>
 8025296:	bf00      	nop
 8025298:	20000324 	.word	0x20000324
 802529c:	20002514 	.word	0x20002514

080252a0 <BnrgmHealthModelPublish_TimerCallback>:
 80252a0:	680b      	ldr	r3, [r1, #0]
 80252a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80252a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80252a6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80252aa:	b089      	sub	sp, #36	; 0x24
 80252ac:	460d      	mov	r5, r1
 80252ae:	2b00      	cmp	r3, #0
 80252b0:	d062      	beq.n	8025378 <BnrgmHealthModelPublish_TimerCallback+0xd8>
 80252b2:	4f32      	ldr	r7, [pc, #200]	; (802537c <BnrgmHealthModelPublish_TimerCallback+0xdc>)
 80252b4:	20a7      	movs	r0, #167	; 0xa7
 80252b6:	f7f5 fdf3 	bl	801aea0 <MobleMemAlloc>
 80252ba:	f8b7 610c 	ldrh.w	r6, [r7, #268]	; 0x10c
 80252be:	4604      	mov	r4, r0
 80252c0:	4630      	mov	r0, r6
 80252c2:	f7f4 fdaf 	bl	8019e24 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 80252c6:	4601      	mov	r1, r0
 80252c8:	f8ad 0012 	strh.w	r0, [sp, #18]
 80252cc:	4630      	mov	r0, r6
 80252ce:	f8ad 600e 	strh.w	r6, [sp, #14]
 80252d2:	f7f5 fa21 	bl	801a718 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 80252d6:	f88d 000c 	strb.w	r0, [sp, #12]
 80252da:	4608      	mov	r0, r1
 80252dc:	f7f5 fa02 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80252e0:	682b      	ldr	r3, [r5, #0]
 80252e2:	4e27      	ldr	r6, [pc, #156]	; (8025380 <BnrgmHealthModelPublish_TimerCallback+0xe0>)
 80252e4:	b2c0      	uxtb	r0, r0
 80252e6:	f88d 0010 	strb.w	r0, [sp, #16]
 80252ea:	f88d 0014 	strb.w	r0, [sp, #20]
 80252ee:	885b      	ldrh	r3, [r3, #2]
 80252f0:	f8ad 300a 	strh.w	r3, [sp, #10]
 80252f4:	f8b7 310a 	ldrh.w	r3, [r7, #266]	; 0x10a
 80252f8:	f8ad 3008 	strh.w	r3, [sp, #8]
 80252fc:	b36c      	cbz	r4, 802535a <BnrgmHealthModelPublish_TimerCallback+0xba>
 80252fe:	8873      	ldrh	r3, [r6, #2]
 8025300:	f8a4 3009 	strh.w	r3, [r4, #9]
 8025304:	682b      	ldr	r3, [r5, #0]
 8025306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025308:	2200      	movs	r2, #0
 802530a:	2104      	movs	r1, #4
 802530c:	7021      	strb	r1, [r4, #0]
 802530e:	7062      	strb	r2, [r4, #1]
 8025310:	70a2      	strb	r2, [r4, #2]
 8025312:	70e2      	strb	r2, [r4, #3]
 8025314:	7222      	strb	r2, [r4, #8]
 8025316:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 802531a:	f103 0754 	add.w	r7, r3, #84	; 0x54
 802531e:	f811 0b01 	ldrb.w	r0, [r1], #1
 8025322:	b128      	cbz	r0, 8025330 <BnrgmHealthModelPublish_TimerCallback+0x90>
 8025324:	eb04 0c02 	add.w	ip, r4, r2
 8025328:	3201      	adds	r2, #1
 802532a:	f88c 000b 	strb.w	r0, [ip, #11]
 802532e:	b2d2      	uxtb	r2, r2
 8025330:	428f      	cmp	r7, r1
 8025332:	d1f4      	bne.n	802531e <BnrgmHealthModelPublish_TimerCallback+0x7e>
 8025334:	3203      	adds	r2, #3
 8025336:	f8c4 20a3 	str.w	r2, [r4, #163]	; 0xa3
 802533a:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 802533e:	2b00      	cmp	r3, #0
 8025340:	bf0c      	ite	eq
 8025342:	2100      	moveq	r1, #0
 8025344:	2120      	movne	r1, #32
 8025346:	4623      	mov	r3, r4
 8025348:	466a      	mov	r2, sp
 802534a:	f041 0101 	orr.w	r1, r1, #1
 802534e:	4628      	mov	r0, r5
 8025350:	f7fd fbc6 	bl	8022ae0 <MobleModelSendPacket>
 8025354:	4620      	mov	r0, r4
 8025356:	f7f5 fe2d 	bl	801afb4 <MobleMemFree>
 802535a:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 802535e:	3b01      	subs	r3, #1
 8025360:	b2db      	uxtb	r3, r3
 8025362:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 8025366:	b93b      	cbnz	r3, 8025378 <BnrgmHealthModelPublish_TimerCallback+0xd8>
 8025368:	682b      	ldr	r3, [r5, #0]
 802536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 802536c:	6f58      	ldr	r0, [r3, #116]	; 0x74
 802536e:	f7f2 fc99 	bl	8017ca4 <MoblePalTimerDestroy>
 8025372:	2308      	movs	r3, #8
 8025374:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 8025378:	b009      	add	sp, #36	; 0x24
 802537a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802537c:	20000324 	.word	0x20000324
 8025380:	20000008 	.word	0x20000008

08025384 <BnrgmHealthModel_ProcessAttentionGet>:
 8025384:	b430      	push	{r4, r5}
 8025386:	460a      	mov	r2, r1
 8025388:	6801      	ldr	r1, [r0, #0]
 802538a:	9b03      	ldr	r3, [sp, #12]
 802538c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 802538e:	2507      	movs	r5, #7
 8025390:	f891 106e 	ldrb.w	r1, [r1, #110]	; 0x6e
 8025394:	7219      	strb	r1, [r3, #8]
 8025396:	2400      	movs	r4, #0
 8025398:	701d      	strb	r5, [r3, #0]
 802539a:	2101      	movs	r1, #1
 802539c:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80253a0:	705d      	strb	r5, [r3, #1]
 80253a2:	709c      	strb	r4, [r3, #2]
 80253a4:	70dc      	strb	r4, [r3, #3]
 80253a6:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 80253aa:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 80253ae:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 80253b2:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 80253b6:	bc30      	pop	{r4, r5}
 80253b8:	f7fd bb92 	b.w	8022ae0 <MobleModelSendPacket>

080253bc <BnrgmHealthModel_ProcessPeriodGet>:
 80253bc:	b430      	push	{r4, r5}
 80253be:	460a      	mov	r2, r1
 80253c0:	6801      	ldr	r1, [r0, #0]
 80253c2:	9b03      	ldr	r3, [sp, #12]
 80253c4:	6a49      	ldr	r1, [r1, #36]	; 0x24
 80253c6:	2537      	movs	r5, #55	; 0x37
 80253c8:	f891 106d 	ldrb.w	r1, [r1, #109]	; 0x6d
 80253cc:	7219      	strb	r1, [r3, #8]
 80253ce:	2400      	movs	r4, #0
 80253d0:	701d      	strb	r5, [r3, #0]
 80253d2:	2101      	movs	r1, #1
 80253d4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80253d8:	705d      	strb	r5, [r3, #1]
 80253da:	709c      	strb	r4, [r3, #2]
 80253dc:	70dc      	strb	r4, [r3, #3]
 80253de:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 80253e2:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 80253e6:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 80253ea:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 80253ee:	bc30      	pop	{r4, r5}
 80253f0:	f7fd bb76 	b.w	8022ae0 <MobleModelSendPacket>

080253f4 <MobleConfigModel_ProcessRelayGet>:
 80253f4:	b4f0      	push	{r4, r5, r6, r7}
 80253f6:	460a      	mov	r2, r1
 80253f8:	6801      	ldr	r1, [r0, #0]
 80253fa:	9b05      	ldr	r3, [sp, #20]
 80253fc:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80253fe:	7b61      	ldrb	r1, [r4, #13]
 8025400:	7b25      	ldrb	r5, [r4, #12]
 8025402:	7c66      	ldrb	r6, [r4, #17]
 8025404:	721e      	strb	r6, [r3, #8]
 8025406:	2728      	movs	r7, #40	; 0x28
 8025408:	2400      	movs	r4, #0
 802540a:	ea45 05c1 	orr.w	r5, r5, r1, lsl #3
 802540e:	701f      	strb	r7, [r3, #0]
 8025410:	2102      	movs	r1, #2
 8025412:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8025416:	705f      	strb	r7, [r3, #1]
 8025418:	709c      	strb	r4, [r3, #2]
 802541a:	70dc      	strb	r4, [r3, #3]
 802541c:	725d      	strb	r5, [r3, #9]
 802541e:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 8025422:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 8025426:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 802542a:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 802542e:	2101      	movs	r1, #1
 8025430:	bcf0      	pop	{r4, r5, r6, r7}
 8025432:	f7fd bb55 	b.w	8022ae0 <MobleModelSendPacket>
	...

08025438 <MobleConfigModel_ProcessNodeIdentityGet>:
 8025438:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 802543c:	4607      	mov	r7, r0
 802543e:	4618      	mov	r0, r3
 8025440:	f7f2 fa47 	bl	80178d2 <MobleConfigModelGetNetIdx>
 8025444:	4688      	mov	r8, r1
 8025446:	4606      	mov	r6, r0
 8025448:	f7f3 fdd4 	bl	8018ff4 <MoblePalCryptoHasNetworkKey>
 802544c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 802544e:	4605      	mov	r5, r0
 8025450:	b170      	cbz	r0, 8025470 <MobleConfigModel_ProcessNodeIdentityGet+0x38>
 8025452:	4630      	mov	r0, r6
 8025454:	f7f3 fe28 	bl	80190a8 <MoblePalCryptoGetNodeIdntyState>
 8025458:	2300      	movs	r3, #0
 802545a:	4605      	mov	r5, r0
 802545c:	f8ad 6006 	strh.w	r6, [sp, #6]
 8025460:	b947      	cbnz	r7, 8025474 <MobleConfigModel_ProcessNodeIdentityGet+0x3c>
 8025462:	4b16      	ldr	r3, [pc, #88]	; (80254bc <MobleConfigModel_ProcessNodeIdentityGet+0x84>)
 8025464:	4a16      	ldr	r2, [pc, #88]	; (80254c0 <MobleConfigModel_ProcessNodeIdentityGet+0x88>)
 8025466:	4817      	ldr	r0, [pc, #92]	; (80254c4 <MobleConfigModel_ProcessNodeIdentityGet+0x8c>)
 8025468:	f640 113a 	movw	r1, #2362	; 0x93a
 802546c:	f003 fb2c 	bl	8028ac8 <__assert_func>
 8025470:	2304      	movs	r3, #4
 8025472:	e7f3      	b.n	802545c <MobleConfigModel_ProcessNodeIdentityGet+0x24>
 8025474:	2248      	movs	r2, #72	; 0x48
 8025476:	2600      	movs	r6, #0
 8025478:	7022      	strb	r2, [r4, #0]
 802547a:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 802547e:	7062      	strb	r2, [r4, #1]
 8025480:	7223      	strb	r3, [r4, #8]
 8025482:	f104 0209 	add.w	r2, r4, #9
 8025486:	f10d 0306 	add.w	r3, sp, #6
 802548a:	2101      	movs	r1, #1
 802548c:	70a6      	strb	r6, [r4, #2]
 802548e:	70e6      	strb	r6, [r4, #3]
 8025490:	4630      	mov	r0, r6
 8025492:	f7f2 fa25 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8025496:	2304      	movs	r3, #4
 8025498:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 802549c:	72e5      	strb	r5, [r4, #11]
 802549e:	f884 60a4 	strb.w	r6, [r4, #164]	; 0xa4
 80254a2:	f884 60a5 	strb.w	r6, [r4, #165]	; 0xa5
 80254a6:	f884 60a6 	strb.w	r6, [r4, #166]	; 0xa6
 80254aa:	4623      	mov	r3, r4
 80254ac:	4642      	mov	r2, r8
 80254ae:	4638      	mov	r0, r7
 80254b0:	f7fd fb16 	bl	8022ae0 <MobleModelSendPacket>
 80254b4:	b002      	add	sp, #8
 80254b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80254ba:	bf00      	nop
 80254bc:	08033381 	.word	0x08033381
 80254c0:	080320a0 	.word	0x080320a0
 80254c4:	08033393 	.word	0x08033393

080254c8 <MobleConfigModel_ProcessKeyRefreshPhaseGet>:
 80254c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80254cc:	4606      	mov	r6, r0
 80254ce:	4618      	mov	r0, r3
 80254d0:	f7f2 f9ff 	bl	80178d2 <MobleConfigModelGetNetIdx>
 80254d4:	460f      	mov	r7, r1
 80254d6:	4601      	mov	r1, r0
 80254d8:	f7f5 f904 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 80254dc:	6833      	ldr	r3, [r6, #0]
 80254de:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80254e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80254e2:	f8ad 1006 	strh.w	r1, [sp, #6]
 80254e6:	1e02      	subs	r2, r0, #0
 80254e8:	bfb8      	it	lt
 80254ea:	2200      	movlt	r2, #0
 80254ec:	4413      	add	r3, r2
 80254ee:	f04f 0500 	mov.w	r5, #0
 80254f2:	f893 8014 	ldrb.w	r8, [r3, #20]
 80254f6:	70a5      	strb	r5, [r4, #2]
 80254f8:	f04f 0317 	mov.w	r3, #23
 80254fc:	bfb4      	ite	lt
 80254fe:	f04f 0c04 	movlt.w	ip, #4
 8025502:	f04f 0c00 	movge.w	ip, #0
 8025506:	7023      	strb	r3, [r4, #0]
 8025508:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 802550c:	7063      	strb	r3, [r4, #1]
 802550e:	f884 c008 	strb.w	ip, [r4, #8]
 8025512:	f10d 0306 	add.w	r3, sp, #6
 8025516:	f104 0209 	add.w	r2, r4, #9
 802551a:	2101      	movs	r1, #1
 802551c:	70e5      	strb	r5, [r4, #3]
 802551e:	4628      	mov	r0, r5
 8025520:	f7f2 f9de 	bl	80178e0 <MobleConfigModelPutKeyIdxs>
 8025524:	2304      	movs	r3, #4
 8025526:	f884 30a3 	strb.w	r3, [r4, #163]	; 0xa3
 802552a:	f884 800b 	strb.w	r8, [r4, #11]
 802552e:	f884 50a4 	strb.w	r5, [r4, #164]	; 0xa4
 8025532:	f884 50a5 	strb.w	r5, [r4, #165]	; 0xa5
 8025536:	f884 50a6 	strb.w	r5, [r4, #166]	; 0xa6
 802553a:	4623      	mov	r3, r4
 802553c:	463a      	mov	r2, r7
 802553e:	4630      	mov	r0, r6
 8025540:	f7fd face 	bl	8022ae0 <MobleModelSendPacket>
 8025544:	b002      	add	sp, #8
 8025546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0802554a <MobleConfigModel_ProcessDefaultTTLGet>:
 802554a:	b430      	push	{r4, r5}
 802554c:	460a      	mov	r2, r1
 802554e:	6801      	ldr	r1, [r0, #0]
 8025550:	9b03      	ldr	r3, [sp, #12]
 8025552:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8025554:	250e      	movs	r5, #14
 8025556:	7a49      	ldrb	r1, [r1, #9]
 8025558:	7219      	strb	r1, [r3, #8]
 802555a:	2400      	movs	r4, #0
 802555c:	701d      	strb	r5, [r3, #0]
 802555e:	2101      	movs	r1, #1
 8025560:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 8025564:	705d      	strb	r5, [r3, #1]
 8025566:	709c      	strb	r4, [r3, #2]
 8025568:	70dc      	strb	r4, [r3, #3]
 802556a:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 802556e:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 8025572:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 8025576:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 802557a:	bc30      	pop	{r4, r5}
 802557c:	f7fd bab0 	b.w	8022ae0 <MobleModelSendPacket>

08025580 <MobleConfigModel_ProcessBeaconGet>:
 8025580:	b570      	push	{r4, r5, r6, lr}
 8025582:	460a      	mov	r2, r1
 8025584:	4910      	ldr	r1, [pc, #64]	; (80255c8 <MobleConfigModel_ProcessBeaconGet+0x48>)
 8025586:	9b05      	ldr	r3, [sp, #20]
 8025588:	f891 10ba 	ldrb.w	r1, [r1, #186]	; 0xba
 802558c:	b930      	cbnz	r0, 802559c <MobleConfigModel_ProcessBeaconGet+0x1c>
 802558e:	4b0f      	ldr	r3, [pc, #60]	; (80255cc <MobleConfigModel_ProcessBeaconGet+0x4c>)
 8025590:	4a0f      	ldr	r2, [pc, #60]	; (80255d0 <MobleConfigModel_ProcessBeaconGet+0x50>)
 8025592:	4810      	ldr	r0, [pc, #64]	; (80255d4 <MobleConfigModel_ProcessBeaconGet+0x54>)
 8025594:	f240 7165 	movw	r1, #1893	; 0x765
 8025598:	f003 fa96 	bl	8028ac8 <__assert_func>
 802559c:	250b      	movs	r5, #11
 802559e:	2400      	movs	r4, #0
 80255a0:	701d      	strb	r5, [r3, #0]
 80255a2:	7219      	strb	r1, [r3, #8]
 80255a4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
 80255a8:	2101      	movs	r1, #1
 80255aa:	705d      	strb	r5, [r3, #1]
 80255ac:	709c      	strb	r4, [r3, #2]
 80255ae:	70dc      	strb	r4, [r3, #3]
 80255b0:	f883 40a4 	strb.w	r4, [r3, #164]	; 0xa4
 80255b4:	f883 40a5 	strb.w	r4, [r3, #165]	; 0xa5
 80255b8:	f883 40a6 	strb.w	r4, [r3, #166]	; 0xa6
 80255bc:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 80255c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80255c4:	f7fd ba8c 	b.w	8022ae0 <MobleModelSendPacket>
 80255c8:	20000324 	.word	0x20000324
 80255cc:	08033381 	.word	0x08033381
 80255d0:	080323e3 	.word	0x080323e3
 80255d4:	08033393 	.word	0x08033393

080255d8 <MobleBluemeshModelReadElement>:
 80255d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80255dc:	f04f 0800 	mov.w	r8, #0
 80255e0:	b08c      	sub	sp, #48	; 0x30
 80255e2:	4607      	mov	r7, r0
 80255e4:	460e      	mov	r6, r1
 80255e6:	4614      	mov	r4, r2
 80255e8:	4641      	mov	r1, r8
 80255ea:	2228      	movs	r2, #40	; 0x28
 80255ec:	a802      	add	r0, sp, #8
 80255ee:	461d      	mov	r5, r3
 80255f0:	f8cd 8000 	str.w	r8, [sp]
 80255f4:	f88d 8004 	strb.w	r8, [sp, #4]
 80255f8:	f004 f95c 	bl	80298b4 <memset>
 80255fc:	b3a7      	cbz	r7, 8025668 <MobleBluemeshModelReadElement+0x90>
 80255fe:	0164      	lsls	r4, r4, #5
 8025600:	f005 050f 	and.w	r5, r5, #15
 8025604:	f004 0420 	and.w	r4, r4, #32
 8025608:	f065 052f 	orn	r5, r5, #47	; 0x2f
 802560c:	e9dd 1212 	ldrd	r1, r2, [sp, #72]	; 0x48
 8025610:	2330      	movs	r3, #48	; 0x30
 8025612:	432c      	orrs	r4, r5
 8025614:	f10d 0003 	add.w	r0, sp, #3
 8025618:	f88d 4000 	strb.w	r4, [sp]
 802561c:	f88d 3001 	strb.w	r3, [sp, #1]
 8025620:	f88d 8002 	strb.w	r8, [sp, #2]
 8025624:	f7f5 fdef 	bl	801b206 <MobleOutputStreamPutArray>
 8025628:	88b3      	ldrh	r3, [r6, #4]
 802562a:	f8ad 301c 	strh.w	r3, [sp, #28]
 802562e:	88f3      	ldrh	r3, [r6, #6]
 8025630:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025634:	7af3      	ldrb	r3, [r6, #11]
 8025636:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 802563a:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 802563e:	7a73      	ldrb	r3, [r6, #9]
 8025640:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 8025644:	f10d 0303 	add.w	r3, sp, #3
 8025648:	466c      	mov	r4, sp
 802564a:	4418      	add	r0, r3
 802564c:	1b03      	subs	r3, r0, r4
 802564e:	4622      	mov	r2, r4
 8025650:	a902      	add	r1, sp, #8
 8025652:	4638      	mov	r0, r7
 8025654:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
 8025658:	f7fd f9b6 	bl	80229c8 <MobleApplicationSendPacket>
 802565c:	2801      	cmp	r0, #1
 802565e:	bf98      	it	ls
 8025660:	4640      	movls	r0, r8
 8025662:	b00c      	add	sp, #48	; 0x30
 8025664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025668:	2003      	movs	r0, #3
 802566a:	e7fa      	b.n	8025662 <MobleBluemeshModelReadElement+0x8a>

0802566c <MobleLibraryRequestData>:
 802566c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802566e:	4e0e      	ldr	r6, [pc, #56]	; (80256a8 <MobleLibraryRequestData+0x3c>)
 8025670:	f8d6 56f0 	ldr.w	r5, [r6, #1776]	; 0x6f0
 8025674:	b1b5      	cbz	r5, 80256a4 <MobleLibraryRequestData+0x38>
 8025676:	8884      	ldrh	r4, [r0, #4]
 8025678:	b1a4      	cbz	r4, 80256a4 <MobleLibraryRequestData+0x38>
 802567a:	f504 7480 	add.w	r4, r4, #256	; 0x100
 802567e:	b2a4      	uxth	r4, r4
 8025680:	2cfb      	cmp	r4, #251	; 0xfb
 8025682:	d90f      	bls.n	80256a4 <MobleLibraryRequestData+0x38>
 8025684:	2a10      	cmp	r2, #16
 8025686:	d80d      	bhi.n	80256a4 <MobleLibraryRequestData+0x38>
 8025688:	f896 46b4 	ldrb.w	r4, [r6, #1716]	; 0x6b4
 802568c:	b154      	cbz	r4, 80256a4 <MobleLibraryRequestData+0x38>
 802568e:	9c06      	ldr	r4, [sp, #24]
 8025690:	e9cd 3400 	strd	r3, r4, [sp]
 8025694:	4613      	mov	r3, r2
 8025696:	460a      	mov	r2, r1
 8025698:	4601      	mov	r1, r0
 802569a:	4628      	mov	r0, r5
 802569c:	f7ff ff9c 	bl	80255d8 <MobleBluemeshModelReadElement>
 80256a0:	b002      	add	sp, #8
 80256a2:	bd70      	pop	{r4, r5, r6, pc}
 80256a4:	2002      	movs	r0, #2
 80256a6:	e7fb      	b.n	80256a0 <MobleLibraryRequestData+0x34>
 80256a8:	20002514 	.word	0x20002514

080256ac <BLEMesh_ReadRemoteData>:
 80256ac:	b507      	push	{r0, r1, r2, lr}
 80256ae:	9300      	str	r3, [sp, #0]
 80256b0:	4613      	mov	r3, r2
 80256b2:	460a      	mov	r2, r1
 80256b4:	2101      	movs	r1, #1
 80256b6:	f7ff ffd9 	bl	802566c <MobleLibraryRequestData>
 80256ba:	b003      	add	sp, #12
 80256bc:	f85d fb04 	ldr.w	pc, [sp], #4

080256c0 <MobleBluemeshModelWriteElement>:
 80256c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80256c4:	4e2e      	ldr	r6, [pc, #184]	; (8025780 <MobleBluemeshModelWriteElement+0xc0>)
 80256c6:	b08b      	sub	sp, #44	; 0x2c
 80256c8:	4607      	mov	r7, r0
 80256ca:	f8b6 094e 	ldrh.w	r0, [r6, #2382]	; 0x94e
 80256ce:	4689      	mov	r9, r1
 80256d0:	4690      	mov	r8, r2
 80256d2:	e9dd ab15 	ldrd	sl, fp, [sp, #84]	; 0x54
 80256d6:	461d      	mov	r5, r3
 80256d8:	f7f5 fbe2 	bl	801aea0 <MobleMemAlloc>
 80256dc:	2228      	movs	r2, #40	; 0x28
 80256de:	4604      	mov	r4, r0
 80256e0:	2100      	movs	r1, #0
 80256e2:	4668      	mov	r0, sp
 80256e4:	f004 f8e6 	bl	80298b4 <memset>
 80256e8:	2c00      	cmp	r4, #0
 80256ea:	d047      	beq.n	802577c <MobleBluemeshModelWriteElement+0xbc>
 80256ec:	b157      	cbz	r7, 8025704 <MobleBluemeshModelWriteElement+0x44>
 80256ee:	f1ba 0f00 	cmp.w	sl, #0
 80256f2:	d007      	beq.n	8025704 <MobleBluemeshModelWriteElement+0x44>
 80256f4:	f1bb 0f00 	cmp.w	fp, #0
 80256f8:	d004      	beq.n	8025704 <MobleBluemeshModelWriteElement+0x44>
 80256fa:	f8b6 394e 	ldrh.w	r3, [r6, #2382]	; 0x94e
 80256fe:	3b04      	subs	r3, #4
 8025700:	455b      	cmp	r3, fp
 8025702:	d207      	bcs.n	8025714 <MobleBluemeshModelWriteElement+0x54>
 8025704:	4620      	mov	r0, r4
 8025706:	f7f5 fc55 	bl	801afb4 <MobleMemFree>
 802570a:	2503      	movs	r5, #3
 802570c:	4628      	mov	r0, r5
 802570e:	b00b      	add	sp, #44	; 0x2c
 8025710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025714:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8025718:	016d      	lsls	r5, r5, #5
 802571a:	f003 030f 	and.w	r3, r3, #15
 802571e:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8025722:	f005 0520 	and.w	r5, r5, #32
 8025726:	431d      	orrs	r5, r3
 8025728:	2600      	movs	r6, #0
 802572a:	2330      	movs	r3, #48	; 0x30
 802572c:	7025      	strb	r5, [r4, #0]
 802572e:	1ce5      	adds	r5, r4, #3
 8025730:	7063      	strb	r3, [r4, #1]
 8025732:	465a      	mov	r2, fp
 8025734:	4651      	mov	r1, sl
 8025736:	4628      	mov	r0, r5
 8025738:	70a6      	strb	r6, [r4, #2]
 802573a:	f7f5 fd64 	bl	801b206 <MobleOutputStreamPutArray>
 802573e:	683b      	ldr	r3, [r7, #0]
 8025740:	f8ad 601a 	strh.w	r6, [sp, #26]
 8025744:	885a      	ldrh	r2, [r3, #2]
 8025746:	f8ad 9016 	strh.w	r9, [sp, #22]
 802574a:	4428      	add	r0, r5
 802574c:	4490      	add	r8, r2
 802574e:	1b03      	subs	r3, r0, r4
 8025750:	4622      	mov	r2, r4
 8025752:	4669      	mov	r1, sp
 8025754:	4638      	mov	r0, r7
 8025756:	f8ad 8014 	strh.w	r8, [sp, #20]
 802575a:	f8ad 601e 	strh.w	r6, [sp, #30]
 802575e:	f8ad 6020 	strh.w	r6, [sp, #32]
 8025762:	f7fd f931 	bl	80229c8 <MobleApplicationSendPacket>
 8025766:	4605      	mov	r5, r0
 8025768:	2d01      	cmp	r5, #1
 802576a:	4620      	mov	r0, r4
 802576c:	d902      	bls.n	8025774 <MobleBluemeshModelWriteElement+0xb4>
 802576e:	f7f5 fc21 	bl	801afb4 <MobleMemFree>
 8025772:	e7cb      	b.n	802570c <MobleBluemeshModelWriteElement+0x4c>
 8025774:	f7f5 fc1e 	bl	801afb4 <MobleMemFree>
 8025778:	4635      	mov	r5, r6
 802577a:	e7c7      	b.n	802570c <MobleBluemeshModelWriteElement+0x4c>
 802577c:	4625      	mov	r5, r4
 802577e:	e7c5      	b.n	802570c <MobleBluemeshModelWriteElement+0x4c>
 8025780:	2000141c 	.word	0x2000141c

08025784 <MobleLibrarySendData>:
 8025784:	b5f0      	push	{r4, r5, r6, r7, lr}
 8025786:	4f10      	ldr	r7, [pc, #64]	; (80257c8 <MobleLibrarySendData+0x44>)
 8025788:	b085      	sub	sp, #20
 802578a:	f8d7 56f0 	ldr.w	r5, [r7, #1776]	; 0x6f0
 802578e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8025790:	b1c5      	cbz	r5, 80257c4 <MobleLibrarySendData+0x40>
 8025792:	b1bb      	cbz	r3, 80257c4 <MobleLibrarySendData+0x40>
 8025794:	b1b6      	cbz	r6, 80257c4 <MobleLibrarySendData+0x40>
 8025796:	b1a8      	cbz	r0, 80257c4 <MobleLibrarySendData+0x40>
 8025798:	f500 7480 	add.w	r4, r0, #256	; 0x100
 802579c:	b2a4      	uxth	r4, r4
 802579e:	2cfb      	cmp	r4, #251	; 0xfb
 80257a0:	d910      	bls.n	80257c4 <MobleLibrarySendData+0x40>
 80257a2:	2a10      	cmp	r2, #16
 80257a4:	d80e      	bhi.n	80257c4 <MobleLibrarySendData+0x40>
 80257a6:	f897 46b4 	ldrb.w	r4, [r7, #1716]	; 0x6b4
 80257aa:	b15c      	cbz	r4, 80257c4 <MobleLibrarySendData+0x40>
 80257ac:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80257b0:	9200      	str	r2, [sp, #0]
 80257b2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80257b6:	460a      	mov	r2, r1
 80257b8:	4601      	mov	r1, r0
 80257ba:	4628      	mov	r0, r5
 80257bc:	f7ff ff80 	bl	80256c0 <MobleBluemeshModelWriteElement>
 80257c0:	b005      	add	sp, #20
 80257c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80257c4:	2002      	movs	r0, #2
 80257c6:	e7fb      	b.n	80257c0 <MobleLibrarySendData+0x3c>
 80257c8:	20002514 	.word	0x20002514

080257cc <MobleBluemeshModelWritePublishElement>:
 80257cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80257d0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; 80258c0 <MobleBluemeshModelWritePublishElement+0xf4>
 80257d4:	b08d      	sub	sp, #52	; 0x34
 80257d6:	4607      	mov	r7, r0
 80257d8:	f8ba 094e 	ldrh.w	r0, [sl, #2382]	; 0x94e
 80257dc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80257e0:	4689      	mov	r9, r1
 80257e2:	4615      	mov	r5, r2
 80257e4:	461e      	mov	r6, r3
 80257e6:	f7f5 fb5b 	bl	801aea0 <MobleMemAlloc>
 80257ea:	f8d7 b000 	ldr.w	fp, [r7]
 80257ee:	464a      	mov	r2, r9
 80257f0:	4604      	mov	r4, r0
 80257f2:	4629      	mov	r1, r5
 80257f4:	f89b 001c 	ldrb.w	r0, [fp, #28]
 80257f8:	f7f4 ff30 	bl	801a65c <MoblePalCrypto_GetModelPublicationParameters>
 80257fc:	2228      	movs	r2, #40	; 0x28
 80257fe:	4681      	mov	r9, r0
 8025800:	2100      	movs	r1, #0
 8025802:	a802      	add	r0, sp, #8
 8025804:	f004 f856 	bl	80298b4 <memset>
 8025808:	2c00      	cmp	r4, #0
 802580a:	d055      	beq.n	80258b8 <MobleBluemeshModelWritePublishElement+0xec>
 802580c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802580e:	b13b      	cbz	r3, 8025820 <MobleBluemeshModelWritePublishElement+0x54>
 8025810:	f1b8 0f00 	cmp.w	r8, #0
 8025814:	d004      	beq.n	8025820 <MobleBluemeshModelWritePublishElement+0x54>
 8025816:	f8ba 394e 	ldrh.w	r3, [sl, #2382]	; 0x94e
 802581a:	3b04      	subs	r3, #4
 802581c:	4543      	cmp	r3, r8
 802581e:	d207      	bcs.n	8025830 <MobleBluemeshModelWritePublishElement+0x64>
 8025820:	4620      	mov	r0, r4
 8025822:	f7f5 fbc7 	bl	801afb4 <MobleMemFree>
 8025826:	2503      	movs	r5, #3
 8025828:	4628      	mov	r0, r5
 802582a:	b00d      	add	sp, #52	; 0x34
 802582c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025830:	f8b9 3004 	ldrh.w	r3, [r9, #4]
 8025834:	9301      	str	r3, [sp, #4]
 8025836:	2b00      	cmp	r3, #0
 8025838:	d040      	beq.n	80258bc <MobleBluemeshModelWritePublishElement+0xf0>
 802583a:	f8b9 9006 	ldrh.w	r9, [r9, #6]
 802583e:	4648      	mov	r0, r9
 8025840:	f7f4 faf0 	bl	8019e24 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8025844:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8025848:	9917      	ldr	r1, [sp, #92]	; 0x5c
 802584a:	1aad      	subs	r5, r5, r2
 802584c:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8025850:	0176      	lsls	r6, r6, #5
 8025852:	f002 020f 	and.w	r2, r2, #15
 8025856:	f062 023f 	orn	r2, r2, #63	; 0x3f
 802585a:	f006 0620 	and.w	r6, r6, #32
 802585e:	4316      	orrs	r6, r2
 8025860:	7026      	strb	r6, [r4, #0]
 8025862:	2230      	movs	r2, #48	; 0x30
 8025864:	2600      	movs	r6, #0
 8025866:	4682      	mov	sl, r0
 8025868:	7062      	strb	r2, [r4, #1]
 802586a:	1ce0      	adds	r0, r4, #3
 802586c:	4642      	mov	r2, r8
 802586e:	70a6      	strb	r6, [r4, #2]
 8025870:	4680      	mov	r8, r0
 8025872:	f7f5 fcc8 	bl	801b206 <MobleOutputStreamPutArray>
 8025876:	683a      	ldr	r2, [r7, #0]
 8025878:	9b01      	ldr	r3, [sp, #4]
 802587a:	8852      	ldrh	r2, [r2, #2]
 802587c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8025880:	4440      	add	r0, r8
 8025882:	b2ed      	uxtb	r5, r5
 8025884:	4415      	add	r5, r2
 8025886:	1b03      	subs	r3, r0, r4
 8025888:	4622      	mov	r2, r4
 802588a:	a902      	add	r1, sp, #8
 802588c:	4638      	mov	r0, r7
 802588e:	f8ad 501c 	strh.w	r5, [sp, #28]
 8025892:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 8025896:	f8ad a026 	strh.w	sl, [sp, #38]	; 0x26
 802589a:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 802589e:	f7fd f893 	bl	80229c8 <MobleApplicationSendPacket>
 80258a2:	4605      	mov	r5, r0
 80258a4:	2d01      	cmp	r5, #1
 80258a6:	4620      	mov	r0, r4
 80258a8:	d902      	bls.n	80258b0 <MobleBluemeshModelWritePublishElement+0xe4>
 80258aa:	f7f5 fb83 	bl	801afb4 <MobleMemFree>
 80258ae:	e7bb      	b.n	8025828 <MobleBluemeshModelWritePublishElement+0x5c>
 80258b0:	f7f5 fb80 	bl	801afb4 <MobleMemFree>
 80258b4:	4635      	mov	r5, r6
 80258b6:	e7b7      	b.n	8025828 <MobleBluemeshModelWritePublishElement+0x5c>
 80258b8:	4625      	mov	r5, r4
 80258ba:	e7b5      	b.n	8025828 <MobleBluemeshModelWritePublishElement+0x5c>
 80258bc:	2502      	movs	r5, #2
 80258be:	e7b3      	b.n	8025828 <MobleBluemeshModelWritePublishElement+0x5c>
 80258c0:	2000141c 	.word	0x2000141c

080258c4 <MobleLibrarySendRemoteData>:
 80258c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80258c6:	4f10      	ldr	r7, [pc, #64]	; (8025908 <MobleLibrarySendRemoteData+0x44>)
 80258c8:	b085      	sub	sp, #20
 80258ca:	f8d7 56f0 	ldr.w	r5, [r7, #1776]	; 0x6f0
 80258ce:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80258d0:	b1c5      	cbz	r5, 8025904 <MobleLibrarySendRemoteData+0x40>
 80258d2:	b1bb      	cbz	r3, 8025904 <MobleLibrarySendRemoteData+0x40>
 80258d4:	b1b6      	cbz	r6, 8025904 <MobleLibrarySendRemoteData+0x40>
 80258d6:	b1a9      	cbz	r1, 8025904 <MobleLibrarySendRemoteData+0x40>
 80258d8:	f501 7480 	add.w	r4, r1, #256	; 0x100
 80258dc:	b2a4      	uxth	r4, r4
 80258de:	2cfb      	cmp	r4, #251	; 0xfb
 80258e0:	d910      	bls.n	8025904 <MobleLibrarySendRemoteData+0x40>
 80258e2:	2a10      	cmp	r2, #16
 80258e4:	d80e      	bhi.n	8025904 <MobleLibrarySendRemoteData+0x40>
 80258e6:	f897 46b4 	ldrb.w	r4, [r7, #1716]	; 0x6b4
 80258ea:	b15c      	cbz	r4, 8025904 <MobleLibrarySendRemoteData+0x40>
 80258ec:	e9cd 3601 	strd	r3, r6, [sp, #4]
 80258f0:	9200      	str	r2, [sp, #0]
 80258f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80258f6:	460a      	mov	r2, r1
 80258f8:	4601      	mov	r1, r0
 80258fa:	4628      	mov	r0, r5
 80258fc:	f7ff ff66 	bl	80257cc <MobleBluemeshModelWritePublishElement>
 8025900:	b005      	add	sp, #20
 8025902:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8025904:	2002      	movs	r0, #2
 8025906:	e7fb      	b.n	8025900 <MobleLibrarySendRemoteData+0x3c>
 8025908:	20002514 	.word	0x20002514

0802590c <MobleBluemeshModelResponse>:
 802590c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025910:	b08b      	sub	sp, #44	; 0x2c
 8025912:	e9dd 9614 	ldrd	r9, r6, [sp, #80]	; 0x50
 8025916:	4680      	mov	r8, r0
 8025918:	468a      	mov	sl, r1
 802591a:	4617      	mov	r7, r2
 802591c:	2100      	movs	r1, #0
 802591e:	2228      	movs	r2, #40	; 0x28
 8025920:	4668      	mov	r0, sp
 8025922:	461d      	mov	r5, r3
 8025924:	f003 ffc6 	bl	80298b4 <memset>
 8025928:	f1b9 0f00 	cmp.w	r9, #0
 802592c:	d100      	bne.n	8025930 <MobleBluemeshModelResponse+0x24>
 802592e:	b996      	cbnz	r6, 8025956 <MobleBluemeshModelResponse+0x4a>
 8025930:	f8df b08c 	ldr.w	fp, [pc, #140]	; 80259c0 <MobleBluemeshModelResponse+0xb4>
 8025934:	f8bb 094e 	ldrh.w	r0, [fp, #2382]	; 0x94e
 8025938:	f7f5 fab2 	bl	801aea0 <MobleMemAlloc>
 802593c:	4604      	mov	r4, r0
 802593e:	b3c8      	cbz	r0, 80259b4 <MobleBluemeshModelResponse+0xa8>
 8025940:	f1b8 0f00 	cmp.w	r8, #0
 8025944:	d004      	beq.n	8025950 <MobleBluemeshModelResponse+0x44>
 8025946:	f8bb 394e 	ldrh.w	r3, [fp, #2382]	; 0x94e
 802594a:	3b03      	subs	r3, #3
 802594c:	42b3      	cmp	r3, r6
 802594e:	d204      	bcs.n	802595a <MobleBluemeshModelResponse+0x4e>
 8025950:	4620      	mov	r0, r4
 8025952:	f7f5 fb2f 	bl	801afb4 <MobleMemFree>
 8025956:	2503      	movs	r5, #3
 8025958:	e028      	b.n	80259ac <MobleBluemeshModelResponse+0xa0>
 802595a:	f005 050f 	and.w	r5, r5, #15
 802595e:	f065 052f 	orn	r5, r5, #47	; 0x2f
 8025962:	7005      	strb	r5, [r0, #0]
 8025964:	f8a0 a001 	strh.w	sl, [r0, #1]
 8025968:	f1b9 0f00 	cmp.w	r9, #0
 802596c:	d005      	beq.n	802597a <MobleBluemeshModelResponse+0x6e>
 802596e:	b126      	cbz	r6, 802597a <MobleBluemeshModelResponse+0x6e>
 8025970:	4632      	mov	r2, r6
 8025972:	4649      	mov	r1, r9
 8025974:	3003      	adds	r0, #3
 8025976:	f7f5 fc46 	bl	801b206 <MobleOutputStreamPutArray>
 802597a:	2300      	movs	r3, #0
 802597c:	f8ad 301a 	strh.w	r3, [sp, #26]
 8025980:	88fb      	ldrh	r3, [r7, #6]
 8025982:	f8ad 3014 	strh.w	r3, [sp, #20]
 8025986:	88bb      	ldrh	r3, [r7, #4]
 8025988:	f8ad 3016 	strh.w	r3, [sp, #22]
 802598c:	897b      	ldrh	r3, [r7, #10]
 802598e:	ba5b      	rev16	r3, r3
 8025990:	f8ad 301c 	strh.w	r3, [sp, #28]
 8025994:	4622      	mov	r2, r4
 8025996:	1cf3      	adds	r3, r6, #3
 8025998:	4669      	mov	r1, sp
 802599a:	4640      	mov	r0, r8
 802599c:	f7fd f814 	bl	80229c8 <MobleApplicationSendPacket>
 80259a0:	2801      	cmp	r0, #1
 80259a2:	4605      	mov	r5, r0
 80259a4:	d906      	bls.n	80259b4 <MobleBluemeshModelResponse+0xa8>
 80259a6:	4620      	mov	r0, r4
 80259a8:	f7f5 fb04 	bl	801afb4 <MobleMemFree>
 80259ac:	4628      	mov	r0, r5
 80259ae:	b00b      	add	sp, #44	; 0x2c
 80259b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259b4:	4620      	mov	r0, r4
 80259b6:	f7f5 fafd 	bl	801afb4 <MobleMemFree>
 80259ba:	2500      	movs	r5, #0
 80259bc:	e7f6      	b.n	80259ac <MobleBluemeshModelResponse+0xa0>
 80259be:	bf00      	nop
 80259c0:	2000141c 	.word	0x2000141c

080259c4 <VendorModel_SendResponse>:
 80259c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80259c6:	4c08      	ldr	r4, [pc, #32]	; (80259e8 <VendorModel_SendResponse+0x24>)
 80259c8:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	; 0x6f0
 80259cc:	b154      	cbz	r4, 80259e4 <VendorModel_SendResponse+0x20>
 80259ce:	9d06      	ldr	r5, [sp, #24]
 80259d0:	e9cd 3500 	strd	r3, r5, [sp]
 80259d4:	4613      	mov	r3, r2
 80259d6:	460a      	mov	r2, r1
 80259d8:	4601      	mov	r1, r0
 80259da:	4620      	mov	r0, r4
 80259dc:	f7ff ff96 	bl	802590c <MobleBluemeshModelResponse>
 80259e0:	b003      	add	sp, #12
 80259e2:	bd30      	pop	{r4, r5, pc}
 80259e4:	2002      	movs	r0, #2
 80259e6:	e7fb      	b.n	80259e0 <VendorModel_SendResponse+0x1c>
 80259e8:	20002514 	.word	0x20002514

080259ec <Test_UpperTester_Send02>:
 80259ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80259f0:	4b2c      	ldr	r3, [pc, #176]	; (8025aa4 <Test_UpperTester_Send02+0xb8>)
 80259f2:	b09d      	sub	sp, #116	; 0x74
 80259f4:	aa0f      	add	r2, sp, #60	; 0x3c
 80259f6:	4604      	mov	r4, r0
 80259f8:	460f      	mov	r7, r1
 80259fa:	f103 0c30 	add.w	ip, r3, #48	; 0x30
 80259fe:	4616      	mov	r6, r2
 8025a00:	6818      	ldr	r0, [r3, #0]
 8025a02:	6859      	ldr	r1, [r3, #4]
 8025a04:	4615      	mov	r5, r2
 8025a06:	c503      	stmia	r5!, {r0, r1}
 8025a08:	3308      	adds	r3, #8
 8025a0a:	4563      	cmp	r3, ip
 8025a0c:	462a      	mov	r2, r5
 8025a0e:	d1f7      	bne.n	8025a00 <Test_UpperTester_Send02+0x14>
 8025a10:	881b      	ldrh	r3, [r3, #0]
 8025a12:	802b      	strh	r3, [r5, #0]
 8025a14:	4b24      	ldr	r3, [pc, #144]	; (8025aa8 <Test_UpperTester_Send02+0xbc>)
 8025a16:	aa01      	add	r2, sp, #4
 8025a18:	f103 0e10 	add.w	lr, r3, #16
 8025a1c:	4615      	mov	r5, r2
 8025a1e:	6818      	ldr	r0, [r3, #0]
 8025a20:	6859      	ldr	r1, [r3, #4]
 8025a22:	4694      	mov	ip, r2
 8025a24:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8025a28:	3308      	adds	r3, #8
 8025a2a:	4573      	cmp	r3, lr
 8025a2c:	4662      	mov	r2, ip
 8025a2e:	d1f6      	bne.n	8025a1e <Test_UpperTester_Send02+0x32>
 8025a30:	f10d 0814 	add.w	r8, sp, #20
 8025a34:	2228      	movs	r2, #40	; 0x28
 8025a36:	2100      	movs	r1, #0
 8025a38:	4640      	mov	r0, r8
 8025a3a:	f003 ff3b 	bl	80298b4 <memset>
 8025a3e:	f897 9000 	ldrb.w	r9, [r7]
 8025a42:	f8b7 7001 	ldrh.w	r7, [r7, #1]
 8025a46:	ba7f      	rev16	r7, r7
 8025a48:	f407 4340 	and.w	r3, r7, #49152	; 0xc000
 8025a4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8025a50:	d112      	bne.n	8025a78 <Test_UpperTester_Send02+0x8c>
 8025a52:	4b16      	ldr	r3, [pc, #88]	; (8025aac <Test_UpperTester_Send02+0xc0>)
 8025a54:	685b      	ldr	r3, [r3, #4]
 8025a56:	4628      	mov	r0, r5
 8025a58:	695b      	ldr	r3, [r3, #20]
 8025a5a:	4798      	blx	r3
 8025a5c:	6822      	ldr	r2, [r4, #0]
 8025a5e:	320c      	adds	r2, #12
 8025a60:	462b      	mov	r3, r5
 8025a62:	cb03      	ldmia	r3!, {r0, r1}
 8025a64:	4543      	cmp	r3, r8
 8025a66:	6010      	str	r0, [r2, #0]
 8025a68:	6051      	str	r1, [r2, #4]
 8025a6a:	461d      	mov	r5, r3
 8025a6c:	f102 0208 	add.w	r2, r2, #8
 8025a70:	d1f6      	bne.n	8025a60 <Test_UpperTester_Send02+0x74>
 8025a72:	6820      	ldr	r0, [r4, #0]
 8025a74:	f7f7 fa00 	bl	801ce78 <MobleConfigNetworkSave>
 8025a78:	6822      	ldr	r2, [r4, #0]
 8025a7a:	2300      	movs	r3, #0
 8025a7c:	8852      	ldrh	r2, [r2, #2]
 8025a7e:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8025a82:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8025a86:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8025a8a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8025a8e:	4632      	mov	r2, r6
 8025a90:	464b      	mov	r3, r9
 8025a92:	4641      	mov	r1, r8
 8025a94:	4620      	mov	r0, r4
 8025a96:	f8ad 702a 	strh.w	r7, [sp, #42]	; 0x2a
 8025a9a:	f7fc ff95 	bl	80229c8 <MobleApplicationSendPacket>
 8025a9e:	b01d      	add	sp, #116	; 0x74
 8025aa0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8025aa4:	08033b4f 	.word	0x08033b4f
 8025aa8:	08033b82 	.word	0x08033b82
 8025aac:	20000324 	.word	0x20000324

08025ab0 <MobleTransSendControl>:
 8025ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025ab4:	b088      	sub	sp, #32
 8025ab6:	4605      	mov	r5, r0
 8025ab8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8025aba:	2e0e      	cmp	r6, #14
 8025abc:	460c      	mov	r4, r1
 8025abe:	4690      	mov	r8, r2
 8025ac0:	461f      	mov	r7, r3
 8025ac2:	dd06      	ble.n	8025ad2 <MobleTransSendControl+0x22>
 8025ac4:	4b15      	ldr	r3, [pc, #84]	; (8025b1c <MobleTransSendControl+0x6c>)
 8025ac6:	4a16      	ldr	r2, [pc, #88]	; (8025b20 <MobleTransSendControl+0x70>)
 8025ac8:	4816      	ldr	r0, [pc, #88]	; (8025b24 <MobleTransSendControl+0x74>)
 8025aca:	f240 412f 	movw	r1, #1071	; 0x42f
 8025ace:	f002 fffb 	bl	8028ac8 <__assert_func>
 8025ad2:	2210      	movs	r2, #16
 8025ad4:	eb0d 0002 	add.w	r0, sp, r2
 8025ad8:	2100      	movs	r1, #0
 8025ada:	f003 feeb 	bl	80298b4 <memset>
 8025ade:	2303      	movs	r3, #3
 8025ae0:	a904      	add	r1, sp, #16
 8025ae2:	4668      	mov	r0, sp
 8025ae4:	f88d 3000 	strb.w	r3, [sp]
 8025ae8:	f88d 8001 	strb.w	r8, [sp, #1]
 8025aec:	f7f6 fc96 	bl	801c41c <MobleTransportRenderHdr>
 8025af0:	4632      	mov	r2, r6
 8025af2:	4639      	mov	r1, r7
 8025af4:	f10d 0011 	add.w	r0, sp, #17
 8025af8:	f003 ff6d 	bl	80299d6 <memcpy>
 8025afc:	8b63      	ldrh	r3, [r4, #26]
 8025afe:	f043 0308 	orr.w	r3, r3, #8
 8025b02:	8363      	strh	r3, [r4, #26]
 8025b04:	682b      	ldr	r3, [r5, #0]
 8025b06:	885b      	ldrh	r3, [r3, #2]
 8025b08:	82a3      	strh	r3, [r4, #20]
 8025b0a:	aa04      	add	r2, sp, #16
 8025b0c:	1c73      	adds	r3, r6, #1
 8025b0e:	4621      	mov	r1, r4
 8025b10:	4628      	mov	r0, r5
 8025b12:	f7fc fc45 	bl	80223a0 <MobleNetworkSendData>
 8025b16:	b008      	add	sp, #32
 8025b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8025b1c:	08033b93 	.word	0x08033b93
 8025b20:	0803241d 	.word	0x0803241d
 8025b24:	08033678 	.word	0x08033678

08025b28 <MobleTransportSendHeartbeat>:
 8025b28:	b507      	push	{r0, r1, r2, lr}
 8025b2a:	9300      	str	r3, [sp, #0]
 8025b2c:	4613      	mov	r3, r2
 8025b2e:	220a      	movs	r2, #10
 8025b30:	f7ff ffbe 	bl	8025ab0 <MobleTransSendControl>
 8025b34:	b003      	add	sp, #12
 8025b36:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08025b3c <BnrgmConfigModelSendHeartbeat>:
 8025b3c:	b530      	push	{r4, r5, lr}
 8025b3e:	b08d      	sub	sp, #52	; 0x34
 8025b40:	4604      	mov	r4, r0
 8025b42:	2228      	movs	r2, #40	; 0x28
 8025b44:	2100      	movs	r1, #0
 8025b46:	a802      	add	r0, sp, #8
 8025b48:	f003 feb4 	bl	80298b4 <memset>
 8025b4c:	4b1c      	ldr	r3, [pc, #112]	; (8025bc0 <BnrgmConfigModelSendHeartbeat+0x84>)
 8025b4e:	f8b3 50ca 	ldrh.w	r5, [r3, #202]	; 0xca
 8025b52:	b395      	cbz	r5, 8025bba <BnrgmConfigModelSendHeartbeat+0x7e>
 8025b54:	f893 10bd 	ldrb.w	r1, [r3, #189]	; 0xbd
 8025b58:	f893 20bc 	ldrb.w	r2, [r3, #188]	; 0xbc
 8025b5c:	2902      	cmp	r1, #2
 8025b5e:	bf28      	it	cs
 8025b60:	2100      	movcs	r1, #0
 8025b62:	2a01      	cmp	r2, #1
 8025b64:	bf98      	it	ls
 8025b66:	ea41 0142 	orrls.w	r1, r1, r2, lsl #1
 8025b6a:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 8025b6e:	b289      	uxth	r1, r1
 8025b70:	2a01      	cmp	r2, #1
 8025b72:	bf98      	it	ls
 8025b74:	ea41 0182 	orrls.w	r1, r1, r2, lsl #2
 8025b78:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8025b7c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8025b80:	f88d 3004 	strb.w	r3, [sp, #4]
 8025b84:	2a01      	cmp	r2, #1
 8025b86:	bf98      	it	ls
 8025b88:	ea41 01c2 	orrls.w	r1, r1, r2, lsl #3
 8025b8c:	f10d 0005 	add.w	r0, sp, #5
 8025b90:	2202      	movs	r2, #2
 8025b92:	f7f5 fb45 	bl	801b220 <MobleOutputStreamPutBigEndian>
 8025b96:	f88d 3017 	strb.w	r3, [sp, #23]
 8025b9a:	2302      	movs	r3, #2
 8025b9c:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8025ba0:	aa01      	add	r2, sp, #4
 8025ba2:	2303      	movs	r3, #3
 8025ba4:	a902      	add	r1, sp, #8
 8025ba6:	4620      	mov	r0, r4
 8025ba8:	f8ad 501e 	strh.w	r5, [sp, #30]
 8025bac:	f7ff ffbc 	bl	8025b28 <MobleTransportSendHeartbeat>
 8025bb0:	2800      	cmp	r0, #0
 8025bb2:	bf18      	it	ne
 8025bb4:	2002      	movne	r0, #2
 8025bb6:	b00d      	add	sp, #52	; 0x34
 8025bb8:	bd30      	pop	{r4, r5, pc}
 8025bba:	2001      	movs	r0, #1
 8025bbc:	e7fb      	b.n	8025bb6 <BnrgmConfigModelSendHeartbeat+0x7a>
 8025bbe:	bf00      	nop
 8025bc0:	20000324 	.word	0x20000324

08025bc4 <MobleConfigModel_ProcessRelaySet>:
 8025bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025bc6:	4605      	mov	r5, r0
 8025bc8:	4618      	mov	r0, r3
 8025bca:	460a      	mov	r2, r1
 8025bcc:	7801      	ldrb	r1, [r0, #0]
 8025bce:	9b07      	ldr	r3, [sp, #28]
 8025bd0:	2901      	cmp	r1, #1
 8025bd2:	d839      	bhi.n	8025c48 <MobleConfigModel_ProcessRelaySet+0x84>
 8025bd4:	682c      	ldr	r4, [r5, #0]
 8025bd6:	6a64      	ldr	r4, [r4, #36]	; 0x24
 8025bd8:	7c66      	ldrb	r6, [r4, #17]
 8025bda:	2e02      	cmp	r6, #2
 8025bdc:	d006      	beq.n	8025bec <MobleConfigModel_ProcessRelaySet+0x28>
 8025bde:	7840      	ldrb	r0, [r0, #1]
 8025be0:	7461      	strb	r1, [r4, #17]
 8025be2:	f000 0107 	and.w	r1, r0, #7
 8025be6:	08c0      	lsrs	r0, r0, #3
 8025be8:	7321      	strb	r1, [r4, #12]
 8025bea:	7360      	strb	r0, [r4, #13]
 8025bec:	7b21      	ldrb	r1, [r4, #12]
 8025bee:	7c67      	ldrb	r7, [r4, #17]
 8025bf0:	7b64      	ldrb	r4, [r4, #13]
 8025bf2:	721f      	strb	r7, [r3, #8]
 8025bf4:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
 8025bf8:	f04f 0c28 	mov.w	ip, #40	; 0x28
 8025bfc:	2000      	movs	r0, #0
 8025bfe:	f883 c000 	strb.w	ip, [r3]
 8025c02:	7259      	strb	r1, [r3, #9]
 8025c04:	f06f 0c7f 	mvn.w	ip, #127	; 0x7f
 8025c08:	2102      	movs	r1, #2
 8025c0a:	7098      	strb	r0, [r3, #2]
 8025c0c:	70d8      	strb	r0, [r3, #3]
 8025c0e:	f883 10a3 	strb.w	r1, [r3, #163]	; 0xa3
 8025c12:	f883 00a4 	strb.w	r0, [r3, #164]	; 0xa4
 8025c16:	f883 00a5 	strb.w	r0, [r3, #165]	; 0xa5
 8025c1a:	f883 00a6 	strb.w	r0, [r3, #166]	; 0xa6
 8025c1e:	f883 c001 	strb.w	ip, [r3, #1]
 8025c22:	2101      	movs	r1, #1
 8025c24:	4628      	mov	r0, r5
 8025c26:	f7fc ff5b 	bl	8022ae0 <MobleModelSendPacket>
 8025c2a:	4604      	mov	r4, r0
 8025c2c:	b950      	cbnz	r0, 8025c44 <MobleConfigModel_ProcessRelaySet+0x80>
 8025c2e:	682b      	ldr	r3, [r5, #0]
 8025c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c32:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8025c34:	07d2      	lsls	r2, r2, #31
 8025c36:	d505      	bpl.n	8025c44 <MobleConfigModel_ProcessRelaySet+0x80>
 8025c38:	7c5b      	ldrb	r3, [r3, #17]
 8025c3a:	42b3      	cmp	r3, r6
 8025c3c:	d002      	beq.n	8025c44 <MobleConfigModel_ProcessRelaySet+0x80>
 8025c3e:	4628      	mov	r0, r5
 8025c40:	f7ff ff7c 	bl	8025b3c <BnrgmConfigModelSendHeartbeat>
 8025c44:	4620      	mov	r0, r4
 8025c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025c48:	2402      	movs	r4, #2
 8025c4a:	e7fb      	b.n	8025c44 <MobleConfigModel_ProcessRelaySet+0x80>

08025c4c <MobleConfigModel_ProcessGattProxySet>:
 8025c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025c4e:	460a      	mov	r2, r1
 8025c50:	7819      	ldrb	r1, [r3, #0]
 8025c52:	9c07      	ldr	r4, [sp, #28]
 8025c54:	2901      	cmp	r1, #1
 8025c56:	4605      	mov	r5, r0
 8025c58:	d82e      	bhi.n	8025cb8 <MobleConfigModel_ProcessGattProxySet+0x6c>
 8025c5a:	6803      	ldr	r3, [r0, #0]
 8025c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c5e:	2714      	movs	r7, #20
 8025c60:	7c1e      	ldrb	r6, [r3, #16]
 8025c62:	7419      	strb	r1, [r3, #16]
 8025c64:	2300      	movs	r3, #0
 8025c66:	7027      	strb	r7, [r4, #0]
 8025c68:	7221      	strb	r1, [r4, #8]
 8025c6a:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8025c6e:	2101      	movs	r1, #1
 8025c70:	70a3      	strb	r3, [r4, #2]
 8025c72:	70e3      	strb	r3, [r4, #3]
 8025c74:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8025c78:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025c7c:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8025c80:	7067      	strb	r7, [r4, #1]
 8025c82:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8025c86:	4623      	mov	r3, r4
 8025c88:	f7fc ff2a 	bl	8022ae0 <MobleModelSendPacket>
 8025c8c:	4604      	mov	r4, r0
 8025c8e:	b988      	cbnz	r0, 8025cb4 <MobleConfigModel_ProcessGattProxySet+0x68>
 8025c90:	682b      	ldr	r3, [r5, #0]
 8025c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025c94:	7c1a      	ldrb	r2, [r3, #16]
 8025c96:	42b2      	cmp	r2, r6
 8025c98:	d00c      	beq.n	8025cb4 <MobleConfigModel_ProcessGattProxySet+0x68>
 8025c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8025c9c:	079b      	lsls	r3, r3, #30
 8025c9e:	d502      	bpl.n	8025ca6 <MobleConfigModel_ProcessGattProxySet+0x5a>
 8025ca0:	4628      	mov	r0, r5
 8025ca2:	f7ff ff4b 	bl	8025b3c <BnrgmConfigModelSendHeartbeat>
 8025ca6:	682b      	ldr	r3, [r5, #0]
 8025ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025caa:	7c1b      	ldrb	r3, [r3, #16]
 8025cac:	2b01      	cmp	r3, #1
 8025cae:	d001      	beq.n	8025cb4 <MobleConfigModel_ProcessGattProxySet+0x68>
 8025cb0:	f7f9 fc82 	bl	801f5b8 <MoblePalBluetoothGracefulReset>
 8025cb4:	4620      	mov	r0, r4
 8025cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025cb8:	2402      	movs	r4, #2
 8025cba:	e7fb      	b.n	8025cb4 <MobleConfigModel_ProcessGattProxySet+0x68>

08025cbc <BnrgmConfigModelHeartbeatPublication_TimerCallback>:
 8025cbc:	b538      	push	{r3, r4, r5, lr}
 8025cbe:	4604      	mov	r4, r0
 8025cc0:	b330      	cbz	r0, 8025d10 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x54>
 8025cc2:	4d14      	ldr	r5, [pc, #80]	; (8025d14 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x58>)
 8025cc4:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8025cc8:	b1eb      	cbz	r3, 8025d06 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 8025cca:	f8b5 30d4 	ldrh.w	r3, [r5, #212]	; 0xd4
 8025cce:	b1d3      	cbz	r3, 8025d06 <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x4a>
 8025cd0:	4608      	mov	r0, r1
 8025cd2:	f7ff ff33 	bl	8025b3c <BnrgmConfigModelSendHeartbeat>
 8025cd6:	b948      	cbnz	r0, 8025cec <BnrgmConfigModelHeartbeatPublication_TimerCallback+0x30>
 8025cd8:	f8d5 30d0 	ldr.w	r3, [r5, #208]	; 0xd0
 8025cdc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8025ce0:	4293      	cmp	r3, r2
 8025ce2:	bf1c      	itt	ne
 8025ce4:	f103 33ff 	addne.w	r3, r3, #4294967295
 8025ce8:	f8c5 30d0 	strne.w	r3, [r5, #208]	; 0xd0
 8025cec:	f8b5 10d4 	ldrh.w	r1, [r5, #212]	; 0xd4
 8025cf0:	ebc1 1341 	rsb	r3, r1, r1, lsl #5
 8025cf4:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8025cf8:	00c9      	lsls	r1, r1, #3
 8025cfa:	4620      	mov	r0, r4
 8025cfc:	b289      	uxth	r1, r1
 8025cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025d02:	f7f1 bf87 	b.w	8017c14 <MoblePalTimerStartOnce>
 8025d06:	4620      	mov	r0, r4
 8025d08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8025d0c:	f7f1 bfaa 	b.w	8017c64 <MoblePalTimerStop>
 8025d10:	bd38      	pop	{r3, r4, r5, pc}
 8025d12:	bf00      	nop
 8025d14:	20000324 	.word	0x20000324

08025d18 <BnrgmFrndFnSendFriendPollResponse>:
 8025d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025d1c:	f892 932d 	ldrb.w	r9, [r2, #813]	; 0x32d
 8025d20:	252c      	movs	r5, #44	; 0x2c
 8025d22:	fb05 2309 	mla	r3, r5, r9, r2
 8025d26:	b08f      	sub	sp, #60	; 0x3c
 8025d28:	f893 8096 	ldrb.w	r8, [r3, #150]	; 0x96
 8025d2c:	f1b8 0f01 	cmp.w	r8, #1
 8025d30:	4606      	mov	r6, r0
 8025d32:	460f      	mov	r7, r1
 8025d34:	4614      	mov	r4, r2
 8025d36:	d004      	beq.n	8025d42 <BnrgmFrndFnSendFriendPollResponse+0x2a>
 8025d38:	b00f      	add	sp, #60	; 0x3c
 8025d3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8025d3e:	f7fa bdbd 	b.w	80208bc <BnrgmFrndFnSendLpnMsg>
 8025d42:	2228      	movs	r2, #40	; 0x28
 8025d44:	2100      	movs	r1, #0
 8025d46:	a804      	add	r0, sp, #16
 8025d48:	f003 fdb4 	bl	80298b4 <memset>
 8025d4c:	2385      	movs	r3, #133	; 0x85
 8025d4e:	fb15 3509 	smlabb	r5, r5, r9, r3
 8025d52:	1963      	adds	r3, r4, r5
 8025d54:	5960      	ldr	r0, [r4, r5]
 8025d56:	791b      	ldrb	r3, [r3, #4]
 8025d58:	f88d 300c 	strb.w	r3, [sp, #12]
 8025d5c:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8025d60:	9002      	str	r0, [sp, #8]
 8025d62:	2b01      	cmp	r3, #1
 8025d64:	bf94      	ite	ls
 8025d66:	2300      	movls	r3, #0
 8025d68:	2301      	movhi	r3, #1
 8025d6a:	f88d 300d 	strb.w	r3, [sp, #13]
 8025d6e:	2330      	movs	r3, #48	; 0x30
 8025d70:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8025d74:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8025d78:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8025d7c:	88a3      	ldrh	r3, [r4, #4]
 8025d7e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8025d82:	2306      	movs	r3, #6
 8025d84:	9300      	str	r3, [sp, #0]
 8025d86:	2202      	movs	r2, #2
 8025d88:	ab02      	add	r3, sp, #8
 8025d8a:	a904      	add	r1, sp, #16
 8025d8c:	4630      	mov	r0, r6
 8025d8e:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
 8025d92:	f88d 8033 	strb.w	r8, [sp, #51]	; 0x33
 8025d96:	f7ff fe8b 	bl	8025ab0 <MobleTransSendControl>
 8025d9a:	b00f      	add	sp, #60	; 0x3c
 8025d9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08025da0 <BnrgmFrndFnSendFrndClear>:
 8025da0:	b530      	push	{r4, r5, lr}
 8025da2:	460c      	mov	r4, r1
 8025da4:	b08f      	sub	sp, #60	; 0x3c
 8025da6:	4605      	mov	r5, r0
 8025da8:	2228      	movs	r2, #40	; 0x28
 8025daa:	2100      	movs	r1, #0
 8025dac:	a804      	add	r0, sp, #16
 8025dae:	f003 fd81 	bl	80298b4 <memset>
 8025db2:	8a23      	ldrh	r3, [r4, #16]
 8025db4:	b33b      	cbz	r3, 8025e06 <BnrgmFrndFnSendFrndClear+0x66>
 8025db6:	88a1      	ldrh	r1, [r4, #4]
 8025db8:	2202      	movs	r2, #2
 8025dba:	a803      	add	r0, sp, #12
 8025dbc:	f7f5 fa30 	bl	801b220 <MobleOutputStreamPutBigEndian>
 8025dc0:	2300      	movs	r3, #0
 8025dc2:	88e1      	ldrh	r1, [r4, #6]
 8025dc4:	2202      	movs	r2, #2
 8025dc6:	f10d 000e 	add.w	r0, sp, #14
 8025dca:	f7f5 fa29 	bl	801b220 <MobleOutputStreamPutBigEndian>
 8025dce:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8025dd2:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8025dd6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8025dda:	8a23      	ldrh	r3, [r4, #16]
 8025ddc:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8025de0:	237f      	movs	r3, #127	; 0x7f
 8025de2:	f88d 301f 	strb.w	r3, [sp, #31]
 8025de6:	4b09      	ldr	r3, [pc, #36]	; (8025e0c <BnrgmFrndFnSendFrndClear+0x6c>)
 8025de8:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8025dec:	3301      	adds	r3, #1
 8025dee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8025df2:	2304      	movs	r3, #4
 8025df4:	9300      	str	r3, [sp, #0]
 8025df6:	2205      	movs	r2, #5
 8025df8:	ab03      	add	r3, sp, #12
 8025dfa:	a904      	add	r1, sp, #16
 8025dfc:	4628      	mov	r0, r5
 8025dfe:	f7ff fe57 	bl	8025ab0 <MobleTransSendControl>
 8025e02:	b00f      	add	sp, #60	; 0x3c
 8025e04:	bd30      	pop	{r4, r5, pc}
 8025e06:	2002      	movs	r0, #2
 8025e08:	e7fb      	b.n	8025e02 <BnrgmFrndFnSendFrndClear+0x62>
 8025e0a:	bf00      	nop
 8025e0c:	20000324 	.word	0x20000324

08025e10 <BnrgmStackSendFrndClear>:
 8025e10:	b508      	push	{r3, lr}
 8025e12:	4601      	mov	r1, r0
 8025e14:	4801      	ldr	r0, [pc, #4]	; (8025e1c <BnrgmStackSendFrndClear+0xc>)
 8025e16:	f7ff ffc3 	bl	8025da0 <BnrgmFrndFnSendFrndClear>
 8025e1a:	bd08      	pop	{r3, pc}
 8025e1c:	20001a9c 	.word	0x20001a9c

08025e20 <BnrgmFrndFnClear_TimerCallback>:
 8025e20:	b510      	push	{r4, lr}
 8025e22:	460c      	mov	r4, r1
 8025e24:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8025e28:	428b      	cmp	r3, r1
 8025e2a:	bf8a      	itet	hi
 8025e2c:	1a5b      	subhi	r3, r3, r1
 8025e2e:	1acb      	subls	r3, r1, r3
 8025e30:	43db      	mvnhi	r3, r3
 8025e32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8025e36:	d30f      	bcc.n	8025e58 <BnrgmFrndFnClear_TimerCallback+0x38>
 8025e38:	005b      	lsls	r3, r3, #1
 8025e3a:	1e59      	subs	r1, r3, #1
 8025e3c:	f241 3287 	movw	r2, #4999	; 0x1387
 8025e40:	4291      	cmp	r1, r2
 8025e42:	d90b      	bls.n	8025e5c <BnrgmFrndFnClear_TimerCallback+0x3c>
 8025e44:	f7f1 ff2e 	bl	8017ca4 <MoblePalTimerDestroy>
 8025e48:	2300      	movs	r3, #0
 8025e4a:	6163      	str	r3, [r4, #20]
 8025e4c:	8223      	strh	r3, [r4, #16]
 8025e4e:	4620      	mov	r0, r4
 8025e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025e54:	f7ff bfdc 	b.w	8025e10 <BnrgmStackSendFrndClear>
 8025e58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8025e5c:	b299      	uxth	r1, r3
 8025e5e:	f7f1 fed9 	bl	8017c14 <MoblePalTimerStartOnce>
 8025e62:	e7f4      	b.n	8025e4e <BnrgmFrndFnClear_TimerCallback+0x2e>

08025e64 <BnrgmFrndLpnSendFrndClear.isra.0>:
 8025e64:	b530      	push	{r4, r5, lr}
 8025e66:	4605      	mov	r5, r0
 8025e68:	b08f      	sub	sp, #60	; 0x3c
 8025e6a:	460c      	mov	r4, r1
 8025e6c:	2228      	movs	r2, #40	; 0x28
 8025e6e:	2100      	movs	r1, #0
 8025e70:	a804      	add	r0, sp, #16
 8025e72:	f003 fd1f 	bl	80298b4 <memset>
 8025e76:	682b      	ldr	r3, [r5, #0]
 8025e78:	2202      	movs	r2, #2
 8025e7a:	8859      	ldrh	r1, [r3, #2]
 8025e7c:	a803      	add	r0, sp, #12
 8025e7e:	f7f5 f9cf 	bl	801b220 <MobleOutputStreamPutBigEndian>
 8025e82:	8a61      	ldrh	r1, [r4, #18]
 8025e84:	2202      	movs	r2, #2
 8025e86:	f10d 000e 	add.w	r0, sp, #14
 8025e8a:	f7f5 f9c9 	bl	801b220 <MobleOutputStreamPutBigEndian>
 8025e8e:	8a23      	ldrh	r3, [r4, #16]
 8025e90:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8025e94:	4b0d      	ldr	r3, [pc, #52]	; (8025ecc <BnrgmFrndLpnSendFrndClear.isra.0+0x68>)
 8025e96:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 8025e9a:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8025e9e:	f88d 201f 	strb.w	r2, [sp, #31]
 8025ea2:	2000      	movs	r0, #0
 8025ea4:	3301      	adds	r3, #1
 8025ea6:	8220      	strh	r0, [r4, #16]
 8025ea8:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 8025eac:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 8025eb0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
 8025eb4:	f7f4 fb32 	bl	801a51c <BnrgmPalCryptoDeleteFriendshipKeys>
 8025eb8:	2304      	movs	r3, #4
 8025eba:	9300      	str	r3, [sp, #0]
 8025ebc:	2205      	movs	r2, #5
 8025ebe:	ab03      	add	r3, sp, #12
 8025ec0:	a904      	add	r1, sp, #16
 8025ec2:	4628      	mov	r0, r5
 8025ec4:	f7ff fdf4 	bl	8025ab0 <MobleTransSendControl>
 8025ec8:	b00f      	add	sp, #60	; 0x3c
 8025eca:	bd30      	pop	{r4, r5, pc}
 8025ecc:	20000324 	.word	0x20000324

08025ed0 <BnrgmFrndMgmtBreakFriendship>:
 8025ed0:	b510      	push	{r4, lr}
 8025ed2:	4b0e      	ldr	r3, [pc, #56]	; (8025f0c <BnrgmFrndMgmtBreakFriendship+0x3c>)
 8025ed4:	f893 20bf 	ldrb.w	r2, [r3, #191]	; 0xbf
 8025ed8:	2a01      	cmp	r2, #1
 8025eda:	d109      	bne.n	8025ef0 <BnrgmFrndMgmtBreakFriendship+0x20>
 8025edc:	4b0c      	ldr	r3, [pc, #48]	; (8025f10 <BnrgmFrndMgmtBreakFriendship+0x40>)
 8025ede:	f8d3 4a04 	ldr.w	r4, [r3, #2564]	; 0xa04
 8025ee2:	4621      	mov	r1, r4
 8025ee4:	f7ff ffbe 	bl	8025e64 <BnrgmFrndLpnSendFrndClear.isra.0>
 8025ee8:	2000      	movs	r0, #0
 8025eea:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
 8025eee:	bd10      	pop	{r4, pc}
 8025ef0:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
 8025ef4:	2b01      	cmp	r3, #1
 8025ef6:	d106      	bne.n	8025f06 <BnrgmFrndMgmtBreakFriendship+0x36>
 8025ef8:	4b05      	ldr	r3, [pc, #20]	; (8025f10 <BnrgmFrndMgmtBreakFriendship+0x40>)
 8025efa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025efe:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 8025f02:	f7f8 b919 	b.w	801e138 <BnrgmFrndFnBreakFriendship>
 8025f06:	2001      	movs	r0, #1
 8025f08:	e7f1      	b.n	8025eee <BnrgmFrndMgmtBreakFriendship+0x1e>
 8025f0a:	bf00      	nop
 8025f0c:	20000324 	.word	0x20000324
 8025f10:	20002514 	.word	0x20002514

08025f14 <MobleConfigModel_ProcessFriendSet>:
 8025f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8025f16:	460a      	mov	r2, r1
 8025f18:	7819      	ldrb	r1, [r3, #0]
 8025f1a:	9c07      	ldr	r4, [sp, #28]
 8025f1c:	2901      	cmp	r1, #1
 8025f1e:	4605      	mov	r5, r0
 8025f20:	d82f      	bhi.n	8025f82 <MobleConfigModel_ProcessFriendSet+0x6e>
 8025f22:	6803      	ldr	r3, [r0, #0]
 8025f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f26:	2711      	movs	r7, #17
 8025f28:	7c9e      	ldrb	r6, [r3, #18]
 8025f2a:	7499      	strb	r1, [r3, #18]
 8025f2c:	2300      	movs	r3, #0
 8025f2e:	7027      	strb	r7, [r4, #0]
 8025f30:	7221      	strb	r1, [r4, #8]
 8025f32:	f06f 077f 	mvn.w	r7, #127	; 0x7f
 8025f36:	2101      	movs	r1, #1
 8025f38:	70a3      	strb	r3, [r4, #2]
 8025f3a:	70e3      	strb	r3, [r4, #3]
 8025f3c:	f884 30a4 	strb.w	r3, [r4, #164]	; 0xa4
 8025f40:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
 8025f44:	f884 30a6 	strb.w	r3, [r4, #166]	; 0xa6
 8025f48:	7067      	strb	r7, [r4, #1]
 8025f4a:	f884 10a3 	strb.w	r1, [r4, #163]	; 0xa3
 8025f4e:	4623      	mov	r3, r4
 8025f50:	f7fc fdc6 	bl	8022ae0 <MobleModelSendPacket>
 8025f54:	4604      	mov	r4, r0
 8025f56:	b990      	cbnz	r0, 8025f7e <MobleConfigModel_ProcessFriendSet+0x6a>
 8025f58:	682b      	ldr	r3, [r5, #0]
 8025f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f5c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8025f5e:	0752      	lsls	r2, r2, #29
 8025f60:	d505      	bpl.n	8025f6e <MobleConfigModel_ProcessFriendSet+0x5a>
 8025f62:	7c9b      	ldrb	r3, [r3, #18]
 8025f64:	42b3      	cmp	r3, r6
 8025f66:	d002      	beq.n	8025f6e <MobleConfigModel_ProcessFriendSet+0x5a>
 8025f68:	4628      	mov	r0, r5
 8025f6a:	f7ff fde7 	bl	8025b3c <BnrgmConfigModelSendHeartbeat>
 8025f6e:	682b      	ldr	r3, [r5, #0]
 8025f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8025f72:	7c9b      	ldrb	r3, [r3, #18]
 8025f74:	2b01      	cmp	r3, #1
 8025f76:	d002      	beq.n	8025f7e <MobleConfigModel_ProcessFriendSet+0x6a>
 8025f78:	4628      	mov	r0, r5
 8025f7a:	f7ff ffa9 	bl	8025ed0 <BnrgmFrndMgmtBreakFriendship>
 8025f7e:	4620      	mov	r0, r4
 8025f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8025f82:	2402      	movs	r4, #2
 8025f84:	e7fb      	b.n	8025f7e <MobleConfigModel_ProcessFriendSet+0x6a>

08025f86 <Test_UpperTester_Set06>:
 8025f86:	f7ff bfa3 	b.w	8025ed0 <BnrgmFrndMgmtBreakFriendship>
	...

08025f8c <BnrgmFrndFn_FSM>:
 8025f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025f90:	b08f      	sub	sp, #60	; 0x3c
 8025f92:	461c      	mov	r4, r3
 8025f94:	4617      	mov	r7, r2
 8025f96:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
 8025f9a:	4680      	mov	r8, r0
 8025f9c:	468a      	mov	sl, r1
 8025f9e:	f7e1 ff61 	bl	8007e64 <HAL_GetTick>
 8025fa2:	6823      	ldr	r3, [r4, #0]
 8025fa4:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 8025fa8:	4606      	mov	r6, r0
 8025faa:	1ac3      	subs	r3, r0, r3
 8025fac:	2a06      	cmp	r2, #6
 8025fae:	f200 80d1 	bhi.w	8026154 <BnrgmFrndFn_FSM+0x1c8>
 8025fb2:	e8df f012 	tbh	[pc, r2, lsl #1]
 8025fb6:	0007      	.short	0x0007
 8025fb8:	00640011 	.word	0x00640011
 8025fbc:	00a5007f 	.word	0x00a5007f
 8025fc0:	011400d9 	.word	0x011400d9
 8025fc4:	2d00      	cmp	r5, #0
 8025fc6:	d056      	beq.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8025fc8:	2d01      	cmp	r5, #1
 8025fca:	f040 8133 	bne.w	8026234 <BnrgmFrndFn_FSM+0x2a8>
 8025fce:	6020      	str	r0, [r4, #0]
 8025fd0:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
 8025fd4:	4615      	mov	r5, r2
 8025fd6:	e04e      	b.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8025fd8:	2d00      	cmp	r5, #0
 8025fda:	f040 812b 	bne.w	8026234 <BnrgmFrndFn_FSM+0x2a8>
 8025fde:	8b22      	ldrh	r2, [r4, #24]
 8025fe0:	429a      	cmp	r2, r3
 8025fe2:	d248      	bcs.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8025fe4:	f8ba 9000 	ldrh.w	r9, [sl]
 8025fe8:	f109 0901 	add.w	r9, r9, #1
 8025fec:	fa1f f989 	uxth.w	r9, r9
 8025ff0:	f8aa 9000 	strh.w	r9, [sl]
 8025ff4:	2228      	movs	r2, #40	; 0x28
 8025ff6:	4629      	mov	r1, r5
 8025ff8:	f8a4 9008 	strh.w	r9, [r4, #8]
 8025ffc:	a804      	add	r0, sp, #16
 8025ffe:	f003 fc59 	bl	80298b4 <memset>
 8026002:	f894 232e 	ldrb.w	r2, [r4, #814]	; 0x32e
 8026006:	f88d 200b 	strb.w	r2, [sp, #11]
 802600a:	23ff      	movs	r3, #255	; 0xff
 802600c:	f04f 0a10 	mov.w	sl, #16
 8026010:	f88d 3008 	strb.w	r3, [sp, #8]
 8026014:	2202      	movs	r2, #2
 8026016:	2306      	movs	r3, #6
 8026018:	4649      	mov	r1, r9
 802601a:	a803      	add	r0, sp, #12
 802601c:	f88d 300a 	strb.w	r3, [sp, #10]
 8026020:	f88d a009 	strb.w	sl, [sp, #9]
 8026024:	f7f5 f8fc 	bl	801b220 <MobleOutputStreamPutBigEndian>
 8026028:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 802602c:	f88d 202c 	strb.w	r2, [sp, #44]	; 0x2c
 8026030:	88a2      	ldrh	r2, [r4, #4]
 8026032:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
 8026036:	2201      	movs	r2, #1
 8026038:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 802603c:	9300      	str	r3, [sp, #0]
 802603e:	2204      	movs	r2, #4
 8026040:	ab02      	add	r3, sp, #8
 8026042:	eb0d 010a 	add.w	r1, sp, sl
 8026046:	4640      	mov	r0, r8
 8026048:	f8ad a02a 	strh.w	sl, [sp, #42]	; 0x2a
 802604c:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
 8026050:	f88d 501f 	strb.w	r5, [sp, #31]
 8026054:	f7ff fd2c 	bl	8025ab0 <MobleTransSendControl>
 8026058:	f8d8 3000 	ldr.w	r3, [r8]
 802605c:	88a1      	ldrh	r1, [r4, #4]
 802605e:	885a      	ldrh	r2, [r3, #2]
 8026060:	8923      	ldrh	r3, [r4, #8]
 8026062:	9300      	str	r3, [sp, #0]
 8026064:	9501      	str	r5, [sp, #4]
 8026066:	88e3      	ldrh	r3, [r4, #6]
 8026068:	4638      	mov	r0, r7
 802606a:	f7f4 f9c3 	bl	801a3f4 <BnrgmPalCryptoSetFriendshipKeys>
 802606e:	2302      	movs	r3, #2
 8026070:	6026      	str	r6, [r4, #0]
 8026072:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8026076:	4628      	mov	r0, r5
 8026078:	b00f      	add	sp, #60	; 0x3c
 802607a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802607e:	b95d      	cbnz	r5, 8026098 <BnrgmFrndFn_FSM+0x10c>
 8026080:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8026084:	d9f7      	bls.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8026086:	80a5      	strh	r5, [r4, #4]
 8026088:	4638      	mov	r0, r7
 802608a:	f7f4 fa47 	bl	801a51c <BnrgmPalCryptoDeleteFriendshipKeys>
 802608e:	f884 506a 	strb.w	r5, [r4, #106]	; 0x6a
 8026092:	6026      	str	r6, [r4, #0]
 8026094:	2501      	movs	r5, #1
 8026096:	e7ee      	b.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8026098:	3d02      	subs	r5, #2
 802609a:	2d01      	cmp	r5, #1
 802609c:	d89a      	bhi.n	8025fd4 <BnrgmFrndFn_FSM+0x48>
 802609e:	2500      	movs	r5, #0
 80260a0:	f8a4 532c 	strh.w	r5, [r4, #812]	; 0x32c
 80260a4:	4620      	mov	r0, r4
 80260a6:	f7f8 f89b 	bl	801e1e0 <BnrgmFrndFnInsertFriendUpdate>
 80260aa:	2303      	movs	r3, #3
 80260ac:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80260b0:	6026      	str	r6, [r4, #0]
 80260b2:	e7e0      	b.n	8026076 <BnrgmFrndFn_FSM+0xea>
 80260b4:	2d00      	cmp	r5, #0
 80260b6:	d1ed      	bne.n	8026094 <BnrgmFrndFn_FSM+0x108>
 80260b8:	f9b4 2010 	ldrsh.w	r2, [r4, #16]
 80260bc:	8a23      	ldrh	r3, [r4, #16]
 80260be:	2a00      	cmp	r2, #0
 80260c0:	dd10      	ble.n	80260e4 <BnrgmFrndFn_FSM+0x158>
 80260c2:	f8d8 2000 	ldr.w	r2, [r8]
 80260c6:	8852      	ldrh	r2, [r2, #2]
 80260c8:	429a      	cmp	r2, r3
 80260ca:	d00b      	beq.n	80260e4 <BnrgmFrndFn_FSM+0x158>
 80260cc:	495a      	ldr	r1, [pc, #360]	; (8026238 <BnrgmFrndFn_FSM+0x2ac>)
 80260ce:	4622      	mov	r2, r4
 80260d0:	f104 0014 	add.w	r0, r4, #20
 80260d4:	f7f1 fd34 	bl	8017b40 <MoblePalTimerCreate>
 80260d8:	2801      	cmp	r0, #1
 80260da:	d803      	bhi.n	80260e4 <BnrgmFrndFn_FSM+0x158>
 80260dc:	6960      	ldr	r0, [r4, #20]
 80260de:	2101      	movs	r1, #1
 80260e0:	f7f1 fd98 	bl	8017c14 <MoblePalTimerStartOnce>
 80260e4:	2305      	movs	r3, #5
 80260e6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 80260ea:	8a23      	ldrh	r3, [r4, #16]
 80260ec:	9300      	str	r3, [sp, #0]
 80260ee:	68e2      	ldr	r2, [r4, #12]
 80260f0:	f894 332f 	ldrb.w	r3, [r4, #815]	; 0x32f
 80260f4:	f894 1330 	ldrb.w	r1, [r4, #816]	; 0x330
 80260f8:	88a0      	ldrh	r0, [r4, #4]
 80260fa:	f7f7 f883 	bl	801d204 <BnrgmLibraryFnOnFriendshipEstablished>
 80260fe:	e7ba      	b.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8026100:	b9ad      	cbnz	r5, 802612e <BnrgmFrndFn_FSM+0x1a2>
 8026102:	68e2      	ldr	r2, [r4, #12]
 8026104:	429a      	cmp	r2, r3
 8026106:	d2b6      	bcs.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8026108:	88a1      	ldrh	r1, [r4, #4]
 802610a:	2002      	movs	r0, #2
 802610c:	f7e0 fa16 	bl	800653c <BLEMesh_FnFriendshipClearedCallback>
 8026110:	80a5      	strh	r5, [r4, #4]
 8026112:	4638      	mov	r0, r7
 8026114:	f7f4 fa02 	bl	801a51c <BnrgmPalCryptoDeleteFriendshipKeys>
 8026118:	6960      	ldr	r0, [r4, #20]
 802611a:	b108      	cbz	r0, 8026120 <BnrgmFrndFn_FSM+0x194>
 802611c:	f7f1 fdc2 	bl	8017ca4 <MoblePalTimerDestroy>
 8026120:	f44f 724d 	mov.w	r2, #820	; 0x334
 8026124:	2100      	movs	r1, #0
 8026126:	4620      	mov	r0, r4
 8026128:	f003 fbc4 	bl	80298b4 <memset>
 802612c:	e7b1      	b.n	8026092 <BnrgmFrndFn_FSM+0x106>
 802612e:	2d02      	cmp	r5, #2
 8026130:	d112      	bne.n	8026158 <BnrgmFrndFn_FSM+0x1cc>
 8026132:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8026136:	b14b      	cbz	r3, 802614c <BnrgmFrndFn_FSM+0x1c0>
 8026138:	3b01      	subs	r3, #1
 802613a:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 802613e:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 8026142:	3301      	adds	r3, #1
 8026144:	f003 030f 	and.w	r3, r3, #15
 8026148:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 802614c:	6026      	str	r6, [r4, #0]
 802614e:	2305      	movs	r3, #5
 8026150:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8026154:	2500      	movs	r5, #0
 8026156:	e78e      	b.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8026158:	2d03      	cmp	r5, #3
 802615a:	d0f7      	beq.n	802614c <BnrgmFrndFn_FSM+0x1c0>
 802615c:	1f2b      	subs	r3, r5, #4
 802615e:	2b01      	cmp	r3, #1
 8026160:	d827      	bhi.n	80261b2 <BnrgmFrndFn_FSM+0x226>
 8026162:	6020      	str	r0, [r4, #0]
 8026164:	2306      	movs	r3, #6
 8026166:	e7f3      	b.n	8026150 <BnrgmFrndFn_FSM+0x1c4>
 8026168:	b985      	cbnz	r5, 802618c <BnrgmFrndFn_FSM+0x200>
 802616a:	f894 2330 	ldrb.w	r2, [r4, #816]	; 0x330
 802616e:	429a      	cmp	r2, r3
 8026170:	d281      	bcs.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8026172:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8026176:	b913      	cbnz	r3, 802617e <BnrgmFrndFn_FSM+0x1f2>
 8026178:	4620      	mov	r0, r4
 802617a:	f7f8 f831 	bl	801e1e0 <BnrgmFrndFnInsertFriendUpdate>
 802617e:	4622      	mov	r2, r4
 8026180:	4639      	mov	r1, r7
 8026182:	4640      	mov	r0, r8
 8026184:	f7ff fdc8 	bl	8025d18 <BnrgmFrndFnSendFriendPollResponse>
 8026188:	2304      	movs	r3, #4
 802618a:	e78f      	b.n	80260ac <BnrgmFrndFn_FSM+0x120>
 802618c:	2d02      	cmp	r5, #2
 802618e:	d10e      	bne.n	80261ae <BnrgmFrndFn_FSM+0x222>
 8026190:	f894 332c 	ldrb.w	r3, [r4, #812]	; 0x32c
 8026194:	b14b      	cbz	r3, 80261aa <BnrgmFrndFn_FSM+0x21e>
 8026196:	3b01      	subs	r3, #1
 8026198:	f884 332c 	strb.w	r3, [r4, #812]	; 0x32c
 802619c:	f894 332d 	ldrb.w	r3, [r4, #813]	; 0x32d
 80261a0:	3301      	adds	r3, #1
 80261a2:	f003 030f 	and.w	r3, r3, #15
 80261a6:	f884 332d 	strb.w	r3, [r4, #813]	; 0x32d
 80261aa:	6026      	str	r6, [r4, #0]
 80261ac:	e7d2      	b.n	8026154 <BnrgmFrndFn_FSM+0x1c8>
 80261ae:	2d03      	cmp	r5, #3
 80261b0:	d0fb      	beq.n	80261aa <BnrgmFrndFn_FSM+0x21e>
 80261b2:	2d06      	cmp	r5, #6
 80261b4:	d13e      	bne.n	8026234 <BnrgmFrndFn_FSM+0x2a8>
 80261b6:	88a1      	ldrh	r1, [r4, #4]
 80261b8:	2003      	movs	r0, #3
 80261ba:	f7e0 f9bf 	bl	800653c <BLEMesh_FnFriendshipClearedCallback>
 80261be:	2300      	movs	r3, #0
 80261c0:	80a3      	strh	r3, [r4, #4]
 80261c2:	4638      	mov	r0, r7
 80261c4:	f7f4 f9aa 	bl	801a51c <BnrgmPalCryptoDeleteFriendshipKeys>
 80261c8:	6960      	ldr	r0, [r4, #20]
 80261ca:	b108      	cbz	r0, 80261d0 <BnrgmFrndFn_FSM+0x244>
 80261cc:	f7f1 fd6a 	bl	8017ca4 <MoblePalTimerDestroy>
 80261d0:	f44f 724d 	mov.w	r2, #820	; 0x334
 80261d4:	2100      	movs	r1, #0
 80261d6:	4620      	mov	r0, r4
 80261d8:	f003 fb6c 	bl	80298b4 <memset>
 80261dc:	e7ba      	b.n	8026154 <BnrgmFrndFn_FSM+0x1c8>
 80261de:	bb2d      	cbnz	r5, 802622c <BnrgmFrndFn_FSM+0x2a0>
 80261e0:	f894 2330 	ldrb.w	r2, [r4, #816]	; 0x330
 80261e4:	429a      	cmp	r2, r3
 80261e6:	f4bf af46 	bcs.w	8026076 <BnrgmFrndFn_FSM+0xea>
 80261ea:	4629      	mov	r1, r5
 80261ec:	2228      	movs	r2, #40	; 0x28
 80261ee:	a804      	add	r0, sp, #16
 80261f0:	f8b4 9004 	ldrh.w	r9, [r4, #4]
 80261f4:	f894 a068 	ldrb.w	sl, [r4, #104]	; 0x68
 80261f8:	f894 b332 	ldrb.w	fp, [r4, #818]	; 0x332
 80261fc:	f003 fb5a 	bl	80298b4 <memset>
 8026200:	2330      	movs	r3, #48	; 0x30
 8026202:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8026206:	2301      	movs	r3, #1
 8026208:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 802620c:	9300      	str	r3, [sp, #0]
 802620e:	2209      	movs	r2, #9
 8026210:	ab02      	add	r3, sp, #8
 8026212:	a904      	add	r1, sp, #16
 8026214:	4640      	mov	r0, r8
 8026216:	f88d b008 	strb.w	fp, [sp, #8]
 802621a:	f88d 7032 	strb.w	r7, [sp, #50]	; 0x32
 802621e:	f88d a02c 	strb.w	sl, [sp, #44]	; 0x2c
 8026222:	f8ad 9026 	strh.w	r9, [sp, #38]	; 0x26
 8026226:	f7ff fc43 	bl	8025ab0 <MobleTransSendControl>
 802622a:	e7ad      	b.n	8026188 <BnrgmFrndFn_FSM+0x1fc>
 802622c:	1f2b      	subs	r3, r5, #4
 802622e:	2b01      	cmp	r3, #1
 8026230:	d8bf      	bhi.n	80261b2 <BnrgmFrndFn_FSM+0x226>
 8026232:	e7ba      	b.n	80261aa <BnrgmFrndFn_FSM+0x21e>
 8026234:	2502      	movs	r5, #2
 8026236:	e71e      	b.n	8026076 <BnrgmFrndFn_FSM+0xea>
 8026238:	08025e21 	.word	0x08025e21

0802623c <BnrgmFrndFnProcessFrndPoll>:
 802623c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026240:	9c06      	ldr	r4, [sp, #24]
 8026242:	4615      	mov	r5, r2
 8026244:	4606      	mov	r6, r0
 8026246:	b930      	cbnz	r0, 8026256 <BnrgmFrndFnProcessFrndPoll+0x1a>
 8026248:	4b16      	ldr	r3, [pc, #88]	; (80262a4 <BnrgmFrndFnProcessFrndPoll+0x68>)
 802624a:	4a17      	ldr	r2, [pc, #92]	; (80262a8 <BnrgmFrndFnProcessFrndPoll+0x6c>)
 802624c:	4817      	ldr	r0, [pc, #92]	; (80262ac <BnrgmFrndFnProcessFrndPoll+0x70>)
 802624e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8026252:	f002 fc39 	bl	8028ac8 <__assert_func>
 8026256:	2c01      	cmp	r4, #1
 8026258:	d11e      	bne.n	8026298 <BnrgmFrndFnProcessFrndPoll+0x5c>
 802625a:	781f      	ldrb	r7, [r3, #0]
 802625c:	2f01      	cmp	r7, #1
 802625e:	d81b      	bhi.n	8026298 <BnrgmFrndFnProcessFrndPoll+0x5c>
 8026260:	4610      	mov	r0, r2
 8026262:	8a89      	ldrh	r1, [r1, #20]
 8026264:	f7f7 ff83 	bl	801e16e <BnrgmFrndFnGetLpnOffset>
 8026268:	1c42      	adds	r2, r0, #1
 802626a:	d018      	beq.n	802629e <BnrgmFrndFnProcessFrndPoll+0x62>
 802626c:	f44f 744d 	mov.w	r4, #820	; 0x334
 8026270:	4344      	muls	r4, r0
 8026272:	1d23      	adds	r3, r4, #4
 8026274:	442c      	add	r4, r5
 8026276:	b2c2      	uxtb	r2, r0
 8026278:	f894 1335 	ldrb.w	r1, [r4, #821]	; 0x335
 802627c:	42b9      	cmp	r1, r7
 802627e:	bf0e      	itee	eq
 8026280:	2103      	moveq	r1, #3
 8026282:	f884 7335 	strbne.w	r7, [r4, #821]	; 0x335
 8026286:	2102      	movne	r1, #2
 8026288:	9106      	str	r1, [sp, #24]
 802628a:	442b      	add	r3, r5
 802628c:	4629      	mov	r1, r5
 802628e:	4630      	mov	r0, r6
 8026290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026294:	f7ff be7a 	b.w	8025f8c <BnrgmFrndFn_FSM>
 8026298:	2002      	movs	r0, #2
 802629a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802629e:	4620      	mov	r0, r4
 80262a0:	e7fb      	b.n	802629a <BnrgmFrndFnProcessFrndPoll+0x5e>
 80262a2:	bf00      	nop
 80262a4:	08033338 	.word	0x08033338
 80262a8:	08032433 	.word	0x08032433
 80262ac:	0803390b 	.word	0x0803390b

080262b0 <BnrgmFrndFnProcessFrndRequest>:
 80262b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80262b4:	ed2d 8b02 	vpush	{d8}
 80262b8:	4688      	mov	r8, r1
 80262ba:	ee08 0a10 	vmov	s16, r0
 80262be:	b087      	sub	sp, #28
 80262c0:	4615      	mov	r5, r2
 80262c2:	461f      	mov	r7, r3
 80262c4:	b930      	cbnz	r0, 80262d4 <BnrgmFrndFnProcessFrndRequest+0x24>
 80262c6:	4b69      	ldr	r3, [pc, #420]	; (802646c <BnrgmFrndFnProcessFrndRequest+0x1bc>)
 80262c8:	4a69      	ldr	r2, [pc, #420]	; (8026470 <BnrgmFrndFnProcessFrndRequest+0x1c0>)
 80262ca:	486a      	ldr	r0, [pc, #424]	; (8026474 <BnrgmFrndFnProcessFrndRequest+0x1c4>)
 80262cc:	f240 2181 	movw	r1, #641	; 0x281
 80262d0:	f002 fbfa 	bl	8028ac8 <__assert_func>
 80262d4:	2f00      	cmp	r7, #0
 80262d6:	d064      	beq.n	80263a2 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80262d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80262da:	2b09      	cmp	r3, #9
 80262dc:	d961      	bls.n	80263a2 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80262de:	7bcb      	ldrb	r3, [r1, #15]
 80262e0:	2b00      	cmp	r3, #0
 80262e2:	d15e      	bne.n	80263a2 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80262e4:	7891      	ldrb	r1, [r2, #2]
 80262e6:	f44f 704d 	mov.w	r0, #820	; 0x334
 80262ea:	f102 0c08 	add.w	ip, r2, #8
 80262ee:	b2da      	uxtb	r2, r3
 80262f0:	4291      	cmp	r1, r2
 80262f2:	d929      	bls.n	8026348 <BnrgmFrndFnProcessFrndRequest+0x98>
 80262f4:	fb00 f403 	mul.w	r4, r0, r3
 80262f8:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 80262fc:	f83c e004 	ldrh.w	lr, [ip, r4]
 8026300:	4596      	cmp	lr, r2
 8026302:	461e      	mov	r6, r3
 8026304:	f103 0301 	add.w	r3, r3, #1
 8026308:	d1f1      	bne.n	80262ee <BnrgmFrndFnProcessFrndRequest+0x3e>
 802630a:	f104 0904 	add.w	r9, r4, #4
 802630e:	442c      	add	r4, r5
 8026310:	44a9      	add	r9, r5
 8026312:	8aa3      	ldrh	r3, [r4, #20]
 8026314:	b123      	cbz	r3, 8026320 <BnrgmFrndFnProcessFrndRequest+0x70>
 8026316:	ee18 0a10 	vmov	r0, s16
 802631a:	4649      	mov	r1, r9
 802631c:	f7ff fd40 	bl	8025da0 <BnrgmFrndFnSendFrndClear>
 8026320:	2001      	movs	r0, #1
 8026322:	8921      	ldrh	r1, [r4, #8]
 8026324:	f7e0 f90a 	bl	800653c <BLEMesh_FnFriendshipClearedCallback>
 8026328:	2300      	movs	r3, #0
 802632a:	8123      	strh	r3, [r4, #8]
 802632c:	f44f 734d 	mov.w	r3, #820	; 0x334
 8026330:	fb03 5606 	mla	r6, r3, r6, r5
 8026334:	69b0      	ldr	r0, [r6, #24]
 8026336:	b108      	cbz	r0, 802633c <BnrgmFrndFnProcessFrndRequest+0x8c>
 8026338:	f7f1 fcb4 	bl	8017ca4 <MoblePalTimerDestroy>
 802633c:	f44f 724d 	mov.w	r2, #820	; 0x334
 8026340:	2100      	movs	r1, #0
 8026342:	4648      	mov	r0, r9
 8026344:	f003 fab6 	bl	80298b4 <memset>
 8026348:	78aa      	ldrb	r2, [r5, #2]
 802634a:	2600      	movs	r6, #0
 802634c:	f5a5 714b 	sub.w	r1, r5, #812	; 0x32c
 8026350:	f44f 734d 	mov.w	r3, #820	; 0x334
 8026354:	fa5f fb86 	uxtb.w	fp, r6
 8026358:	455a      	cmp	r2, fp
 802635a:	d907      	bls.n	802636c <BnrgmFrndFnProcessFrndRequest+0xbc>
 802635c:	fb06 3403 	mla	r4, r6, r3, r3
 8026360:	1c70      	adds	r0, r6, #1
 8026362:	5b0c      	ldrh	r4, [r1, r4]
 8026364:	b924      	cbnz	r4, 8026370 <BnrgmFrndFnProcessFrndRequest+0xc0>
 8026366:	b276      	sxtb	r6, r6
 8026368:	1c72      	adds	r2, r6, #1
 802636a:	d103      	bne.n	8026374 <BnrgmFrndFnProcessFrndRequest+0xc4>
 802636c:	2001      	movs	r0, #1
 802636e:	e077      	b.n	8026460 <BnrgmFrndFnProcessFrndRequest+0x1b0>
 8026370:	4606      	mov	r6, r0
 8026372:	e7ef      	b.n	8026354 <BnrgmFrndFnProcessFrndRequest+0xa4>
 8026374:	783a      	ldrb	r2, [r7, #0]
 8026376:	f3c2 1341 	ubfx	r3, r2, #5, #2
 802637a:	1e59      	subs	r1, r3, #1
 802637c:	2902      	cmp	r1, #2
 802637e:	bf98      	it	ls
 8026380:	eb03 0383 	addls.w	r3, r3, r3, lsl #2
 8026384:	f3c2 04c1 	ubfx	r4, r2, #3, #2
 8026388:	bf94      	ite	ls
 802638a:	330a      	addls	r3, #10
 802638c:	230a      	movhi	r3, #10
 802638e:	9302      	str	r3, [sp, #8]
 8026390:	1e63      	subs	r3, r4, #1
 8026392:	2b02      	cmp	r3, #2
 8026394:	bf9a      	itte	ls
 8026396:	eb04 0484 	addls.w	r4, r4, r4, lsl #2
 802639a:	340a      	addls	r4, #10
 802639c:	240a      	movhi	r4, #10
 802639e:	0753      	lsls	r3, r2, #29
 80263a0:	d101      	bne.n	80263a6 <BnrgmFrndFnProcessFrndRequest+0xf6>
 80263a2:	2002      	movs	r0, #2
 80263a4:	e05c      	b.n	8026460 <BnrgmFrndFnProcessFrndRequest+0x1b0>
 80263a6:	787a      	ldrb	r2, [r7, #1]
 80263a8:	2a09      	cmp	r2, #9
 80263aa:	d9fa      	bls.n	80263a2 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80263ac:	f44f 734d 	mov.w	r3, #820	; 0x334
 80263b0:	4373      	muls	r3, r6
 80263b2:	eb05 0a03 	add.w	sl, r5, r3
 80263b6:	2103      	movs	r1, #3
 80263b8:	f88a 2334 	strb.w	r2, [sl, #820]	; 0x334
 80263bc:	1cb8      	adds	r0, r7, #2
 80263be:	aa04      	add	r2, sp, #16
 80263c0:	9303      	str	r3, [sp, #12]
 80263c2:	f7f4 ff03 	bl	801b1cc <MobleInputStreamGetBigEndian>
 80263c6:	9a04      	ldr	r2, [sp, #16]
 80263c8:	492b      	ldr	r1, [pc, #172]	; (8026478 <BnrgmFrndFnProcessFrndRequest+0x1c8>)
 80263ca:	f1a2 000a 	sub.w	r0, r2, #10
 80263ce:	4288      	cmp	r0, r1
 80263d0:	d8e7      	bhi.n	80263a2 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80263d2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80263d6:	fb09 f202 	mul.w	r2, r9, r2
 80263da:	f8ca 2010 	str.w	r2, [sl, #16]
 80263de:	2102      	movs	r1, #2
 80263e0:	aa05      	add	r2, sp, #20
 80263e2:	1d78      	adds	r0, r7, #5
 80263e4:	f7f4 fef2 	bl	801b1cc <MobleInputStreamGetBigEndian>
 80263e8:	9805      	ldr	r0, [sp, #20]
 80263ea:	f8aa 0014 	strh.w	r0, [sl, #20]
 80263ee:	79f8      	ldrb	r0, [r7, #7]
 80263f0:	f100 3cff 	add.w	ip, r0, #4294967295
 80263f4:	f1bc 0f04 	cmp.w	ip, #4
 80263f8:	d8d3      	bhi.n	80263a2 <BnrgmFrndFnProcessFrndRequest+0xf2>
 80263fa:	f88a 0333 	strb.w	r0, [sl, #819]	; 0x333
 80263fe:	f107 0008 	add.w	r0, r7, #8
 8026402:	f7f4 fee3 	bl	801b1cc <MobleInputStreamGetBigEndian>
 8026406:	9a05      	ldr	r2, [sp, #20]
 8026408:	f8aa 200a 	strh.w	r2, [sl, #10]
 802640c:	f998 2018 	ldrsb.w	r2, [r8, #24]
 8026410:	9b02      	ldr	r3, [sp, #8]
 8026412:	f44f 714d 	mov.w	r1, #820	; 0x334
 8026416:	fb01 5606 	mla	r6, r1, r6, r5
 802641a:	ebc4 2404 	rsb	r4, r4, r4, lsl #8
 802641e:	fb03 4412 	mls	r4, r3, r2, r4
 8026422:	f886 2332 	strb.w	r2, [r6, #818]	; 0x332
 8026426:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 802642a:	f8b8 2014 	ldrh.w	r2, [r8, #20]
 802642e:	bfa4      	itt	ge
 8026430:	f04f 090a 	movge.w	r9, #10
 8026434:	fb94 f9f9 	sdivge	r9, r4, r9
 8026438:	f8a6 901c 	strh.w	r9, [r6, #28]
 802643c:	f8aa 2008 	strh.w	r2, [sl, #8]
 8026440:	f898 1042 	ldrb.w	r1, [r8, #66]	; 0x42
 8026444:	4658      	mov	r0, fp
 8026446:	f7f3 ffbf 	bl	801a3c8 <BnrgmPalCryptoSetFriendshipNetKeyOffset>
 802644a:	9b03      	ldr	r3, [sp, #12]
 802644c:	2201      	movs	r2, #1
 802644e:	3304      	adds	r3, #4
 8026450:	9200      	str	r2, [sp, #0]
 8026452:	ee18 0a10 	vmov	r0, s16
 8026456:	442b      	add	r3, r5
 8026458:	465a      	mov	r2, fp
 802645a:	4629      	mov	r1, r5
 802645c:	f7ff fd96 	bl	8025f8c <BnrgmFrndFn_FSM>
 8026460:	b007      	add	sp, #28
 8026462:	ecbd 8b02 	vpop	{d8}
 8026466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802646a:	bf00      	nop
 802646c:	08033338 	.word	0x08033338
 8026470:	0803244e 	.word	0x0803244e
 8026474:	0803390b 	.word	0x0803390b
 8026478:	00034bb5 	.word	0x00034bb5

0802647c <BnrgmFrndFnProcess>:
 802647c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8026480:	2500      	movs	r5, #0
 8026482:	4606      	mov	r6, r0
 8026484:	460c      	mov	r4, r1
 8026486:	f44f 774d 	mov.w	r7, #820	; 0x334
 802648a:	46a8      	mov	r8, r5
 802648c:	78a3      	ldrb	r3, [r4, #2]
 802648e:	b2ea      	uxtb	r2, r5
 8026490:	4293      	cmp	r3, r2
 8026492:	d802      	bhi.n	802649a <BnrgmFrndFnProcess+0x1e>
 8026494:	b002      	add	sp, #8
 8026496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802649a:	fb07 4302 	mla	r3, r7, r2, r4
 802649e:	f8cd 8000 	str.w	r8, [sp]
 80264a2:	3304      	adds	r3, #4
 80264a4:	4621      	mov	r1, r4
 80264a6:	4630      	mov	r0, r6
 80264a8:	f7ff fd70 	bl	8025f8c <BnrgmFrndFn_FSM>
 80264ac:	3501      	adds	r5, #1
 80264ae:	e7ed      	b.n	802648c <BnrgmFrndFnProcess+0x10>

080264b0 <BnrgmFrndMgmtFriendshipProcess>:
 80264b0:	b508      	push	{r3, lr}
 80264b2:	4b0a      	ldr	r3, [pc, #40]	; (80264dc <BnrgmFrndMgmtFriendshipProcess+0x2c>)
 80264b4:	f893 20be 	ldrb.w	r2, [r3, #190]	; 0xbe
 80264b8:	2a01      	cmp	r2, #1
 80264ba:	d105      	bne.n	80264c8 <BnrgmFrndMgmtFriendshipProcess+0x18>
 80264bc:	4b08      	ldr	r3, [pc, #32]	; (80264e0 <BnrgmFrndMgmtFriendshipProcess+0x30>)
 80264be:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 80264c2:	f7ff ffdb 	bl	802647c <BnrgmFrndFnProcess>
 80264c6:	bd08      	pop	{r3, pc}
 80264c8:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 80264cc:	2b02      	cmp	r3, #2
 80264ce:	d0fa      	beq.n	80264c6 <BnrgmFrndMgmtFriendshipProcess+0x16>
 80264d0:	4b03      	ldr	r3, [pc, #12]	; (80264e0 <BnrgmFrndMgmtFriendshipProcess+0x30>)
 80264d2:	f8d3 1a04 	ldr.w	r1, [r3, #2564]	; 0xa04
 80264d6:	f7ed f839 	bl	801354c <BnrgmFrndLpnProcess>
 80264da:	e7f4      	b.n	80264c6 <BnrgmFrndMgmtFriendshipProcess+0x16>
 80264dc:	20000324 	.word	0x20000324
 80264e0:	20002514 	.word	0x20002514

080264e4 <MobleStackProcess>:
 80264e4:	b510      	push	{r4, lr}
 80264e6:	4c11      	ldr	r4, [pc, #68]	; (802652c <MobleStackProcess+0x48>)
 80264e8:	f894 37ec 	ldrb.w	r3, [r4, #2028]	; 0x7ec
 80264ec:	2b04      	cmp	r3, #4
 80264ee:	d01b      	beq.n	8026528 <MobleStackProcess+0x44>
 80264f0:	f7f9 f856 	bl	801f5a0 <BnrgmTransmitProcess>
 80264f4:	f7f4 fdee 	bl	801b0d4 <MoblePalProcess>
 80264f8:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 80264fc:	f7f5 fe1e 	bl	801c13c <MobleApplicationProcess>
 8026500:	f7f8 f9f4 	bl	801e8ec <MobleStackProcessIvUpdate>
 8026504:	f8d4 3680 	ldr.w	r3, [r4, #1664]	; 0x680
 8026508:	781b      	ldrb	r3, [r3, #0]
 802650a:	b16b      	cbz	r3, 8026528 <MobleStackProcess+0x44>
 802650c:	f894 3934 	ldrb.w	r3, [r4, #2356]	; 0x934
 8026510:	b153      	cbz	r3, 8026528 <MobleStackProcess+0x44>
 8026512:	f894 37ec 	ldrb.w	r3, [r4, #2028]	; 0x7ec
 8026516:	2b02      	cmp	r3, #2
 8026518:	d001      	beq.n	802651e <MobleStackProcess+0x3a>
 802651a:	f7df ffb9 	bl	8006490 <BLEMesh_ConfigurationCallback>
 802651e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026522:	4803      	ldr	r0, [pc, #12]	; (8026530 <MobleStackProcess+0x4c>)
 8026524:	f7ff bfc4 	b.w	80264b0 <BnrgmFrndMgmtFriendshipProcess>
 8026528:	bd10      	pop	{r4, pc}
 802652a:	bf00      	nop
 802652c:	2000141c 	.word	0x2000141c
 8026530:	20001a9c 	.word	0x20001a9c

08026534 <MobleLibraryProcess>:
 8026534:	b508      	push	{r3, lr}
 8026536:	4b05      	ldr	r3, [pc, #20]	; (802654c <MobleLibraryProcess+0x18>)
 8026538:	f8d3 36f0 	ldr.w	r3, [r3, #1776]	; 0x6f0
 802653c:	b11b      	cbz	r3, 8026546 <MobleLibraryProcess+0x12>
 802653e:	f7ff ffd1 	bl	80264e4 <MobleStackProcess>
 8026542:	2000      	movs	r0, #0
 8026544:	bd08      	pop	{r3, pc}
 8026546:	2002      	movs	r0, #2
 8026548:	e7fc      	b.n	8026544 <MobleLibraryProcess+0x10>
 802654a:	bf00      	nop
 802654c:	20002514 	.word	0x20002514

08026550 <BLEMesh_Process>:
 8026550:	f7ff bff0 	b.w	8026534 <MobleLibraryProcess>

08026554 <BnrgmFrndFnProcessFrndClear>:
 8026554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026558:	460f      	mov	r7, r1
 802655a:	b08e      	sub	sp, #56	; 0x38
 802655c:	4615      	mov	r5, r2
 802655e:	461c      	mov	r4, r3
 8026560:	4606      	mov	r6, r0
 8026562:	b930      	cbnz	r0, 8026572 <BnrgmFrndFnProcessFrndClear+0x1e>
 8026564:	4b38      	ldr	r3, [pc, #224]	; (8026648 <BnrgmFrndFnProcessFrndClear+0xf4>)
 8026566:	4a39      	ldr	r2, [pc, #228]	; (802664c <BnrgmFrndFnProcessFrndClear+0xf8>)
 8026568:	4839      	ldr	r0, [pc, #228]	; (8026650 <BnrgmFrndFnProcessFrndClear+0xfc>)
 802656a:	f240 3161 	movw	r1, #865	; 0x361
 802656e:	f002 faab 	bl	8028ac8 <__assert_func>
 8026572:	2b00      	cmp	r3, #0
 8026574:	d066      	beq.n	8026644 <BnrgmFrndFnProcessFrndClear+0xf0>
 8026576:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8026578:	2b04      	cmp	r3, #4
 802657a:	d163      	bne.n	8026644 <BnrgmFrndFnProcessFrndClear+0xf0>
 802657c:	aa02      	add	r2, sp, #8
 802657e:	2102      	movs	r1, #2
 8026580:	4620      	mov	r0, r4
 8026582:	f7f4 fe23 	bl	801b1cc <MobleInputStreamGetBigEndian>
 8026586:	1860      	adds	r0, r4, r1
 8026588:	f8bd a008 	ldrh.w	sl, [sp, #8]
 802658c:	f7f4 fe1e 	bl	801b1cc <MobleInputStreamGetBigEndian>
 8026590:	78a8      	ldrb	r0, [r5, #2]
 8026592:	f8bd 9008 	ldrh.w	r9, [sp, #8]
 8026596:	462a      	mov	r2, r5
 8026598:	2300      	movs	r3, #0
 802659a:	fa5f f883 	uxtb.w	r8, r3
 802659e:	4540      	cmp	r0, r8
 80265a0:	d90a      	bls.n	80265b8 <BnrgmFrndFnProcessFrndClear+0x64>
 80265a2:	8911      	ldrh	r1, [r2, #8]
 80265a4:	4551      	cmp	r1, sl
 80265a6:	d109      	bne.n	80265bc <BnrgmFrndFnProcessFrndClear+0x68>
 80265a8:	8951      	ldrh	r1, [r2, #10]
 80265aa:	eba9 0101 	sub.w	r1, r9, r1
 80265ae:	29ff      	cmp	r1, #255	; 0xff
 80265b0:	dc04      	bgt.n	80265bc <BnrgmFrndFnProcessFrndClear+0x68>
 80265b2:	b25c      	sxtb	r4, r3
 80265b4:	1c63      	adds	r3, r4, #1
 80265b6:	d105      	bne.n	80265c4 <BnrgmFrndFnProcessFrndClear+0x70>
 80265b8:	2001      	movs	r0, #1
 80265ba:	e040      	b.n	802663e <BnrgmFrndFnProcessFrndClear+0xea>
 80265bc:	3301      	adds	r3, #1
 80265be:	f502 724d 	add.w	r2, r2, #820	; 0x334
 80265c2:	e7ea      	b.n	802659a <BnrgmFrndFnProcessFrndClear+0x46>
 80265c4:	f44f 734d 	mov.w	r3, #820	; 0x334
 80265c8:	435c      	muls	r4, r3
 80265ca:	f104 0a04 	add.w	sl, r4, #4
 80265ce:	442c      	add	r4, r5
 80265d0:	2228      	movs	r2, #40	; 0x28
 80265d2:	2100      	movs	r1, #0
 80265d4:	a804      	add	r0, sp, #16
 80265d6:	f003 f96d 	bl	80298b4 <memset>
 80265da:	8921      	ldrh	r1, [r4, #8]
 80265dc:	2202      	movs	r2, #2
 80265de:	a803      	add	r0, sp, #12
 80265e0:	f7f4 fe1e 	bl	801b220 <MobleOutputStreamPutBigEndian>
 80265e4:	2310      	movs	r3, #16
 80265e6:	2202      	movs	r2, #2
 80265e8:	4649      	mov	r1, r9
 80265ea:	f10d 000e 	add.w	r0, sp, #14
 80265ee:	f7f4 fe17 	bl	801b220 <MobleOutputStreamPutBigEndian>
 80265f2:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80265f6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80265fa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 80265fe:	8abb      	ldrh	r3, [r7, #20]
 8026600:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8026604:	7bfb      	ldrb	r3, [r7, #15]
 8026606:	4a13      	ldr	r2, [pc, #76]	; (8026654 <BnrgmFrndFnProcessFrndClear+0x100>)
 8026608:	44aa      	add	sl, r5
 802660a:	b10b      	cbz	r3, 8026610 <BnrgmFrndFnProcessFrndClear+0xbc>
 802660c:	f892 30b5 	ldrb.w	r3, [r2, #181]	; 0xb5
 8026610:	f88d 301f 	strb.w	r3, [sp, #31]
 8026614:	f892 30b6 	ldrb.w	r3, [r2, #182]	; 0xb6
 8026618:	3301      	adds	r3, #1
 802661a:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
 802661e:	2304      	movs	r3, #4
 8026620:	9300      	str	r3, [sp, #0]
 8026622:	2206      	movs	r2, #6
 8026624:	ab03      	add	r3, sp, #12
 8026626:	a904      	add	r1, sp, #16
 8026628:	4630      	mov	r0, r6
 802662a:	f7ff fa41 	bl	8025ab0 <MobleTransSendControl>
 802662e:	2306      	movs	r3, #6
 8026630:	9300      	str	r3, [sp, #0]
 8026632:	4642      	mov	r2, r8
 8026634:	4653      	mov	r3, sl
 8026636:	4629      	mov	r1, r5
 8026638:	4630      	mov	r0, r6
 802663a:	f7ff fca7 	bl	8025f8c <BnrgmFrndFn_FSM>
 802663e:	b00e      	add	sp, #56	; 0x38
 8026640:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8026644:	2002      	movs	r0, #2
 8026646:	e7fa      	b.n	802663e <BnrgmFrndFnProcessFrndClear+0xea>
 8026648:	08033338 	.word	0x08033338
 802664c:	0803246c 	.word	0x0803246c
 8026650:	0803390b 	.word	0x0803390b
 8026654:	20000324 	.word	0x20000324

08026658 <BnrgmFrndFnProcessFrndSubscrListRem>:
 8026658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802665c:	b087      	sub	sp, #28
 802665e:	4614      	mov	r4, r2
 8026660:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8026662:	4699      	mov	r9, r3
 8026664:	4682      	mov	sl, r0
 8026666:	b930      	cbnz	r0, 8026676 <BnrgmFrndFnProcessFrndSubscrListRem+0x1e>
 8026668:	4b2f      	ldr	r3, [pc, #188]	; (8026728 <BnrgmFrndFnProcessFrndSubscrListRem+0xd0>)
 802666a:	4a30      	ldr	r2, [pc, #192]	; (802672c <BnrgmFrndFnProcessFrndSubscrListRem+0xd4>)
 802666c:	4830      	ldr	r0, [pc, #192]	; (8026730 <BnrgmFrndFnProcessFrndSubscrListRem+0xd8>)
 802666e:	f240 412d 	movw	r1, #1069	; 0x42d
 8026672:	f002 fa29 	bl	8028ac8 <__assert_func>
 8026676:	2b00      	cmp	r3, #0
 8026678:	d053      	beq.n	8026722 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 802667a:	2f02      	cmp	r7, #2
 802667c:	d951      	bls.n	8026722 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 802667e:	07fa      	lsls	r2, r7, #31
 8026680:	d54f      	bpl.n	8026722 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 8026682:	8a89      	ldrh	r1, [r1, #20]
 8026684:	4620      	mov	r0, r4
 8026686:	f7f7 fd72 	bl	801e16e <BnrgmFrndFnGetLpnOffset>
 802668a:	1c43      	adds	r3, r0, #1
 802668c:	4606      	mov	r6, r0
 802668e:	d048      	beq.n	8026722 <BnrgmFrndFnProcessFrndSubscrListRem+0xca>
 8026690:	f44f 754d 	mov.w	r5, #820	; 0x334
 8026694:	4345      	muls	r5, r0
 8026696:	1963      	adds	r3, r4, r5
 8026698:	f899 b000 	ldrb.w	fp, [r9]
 802669c:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80266a0:	455b      	cmp	r3, fp
 80266a2:	d02b      	beq.n	80266fc <BnrgmFrndFnProcessFrndSubscrListRem+0xa4>
 80266a4:	087b      	lsrs	r3, r7, #1
 80266a6:	351e      	adds	r5, #30
 80266a8:	2700      	movs	r7, #0
 80266aa:	9303      	str	r3, [sp, #12]
 80266ac:	4425      	add	r5, r4
 80266ae:	46b8      	mov	r8, r7
 80266b0:	2102      	movs	r1, #2
 80266b2:	fb01 9008 	mla	r0, r1, r8, r9
 80266b6:	aa05      	add	r2, sp, #20
 80266b8:	3001      	adds	r0, #1
 80266ba:	f7f4 fd87 	bl	801b1cc <MobleInputStreamGetBigEndian>
 80266be:	f8bd c014 	ldrh.w	ip, [sp, #20]
 80266c2:	4629      	mov	r1, r5
 80266c4:	2206      	movs	r2, #6
 80266c6:	2300      	movs	r3, #0
 80266c8:	f831 0b02 	ldrh.w	r0, [r1], #2
 80266cc:	b330      	cbz	r0, 802671c <BnrgmFrndFnProcessFrndSubscrListRem+0xc4>
 80266ce:	4584      	cmp	ip, r0
 80266d0:	d101      	bne.n	80266d6 <BnrgmFrndFnProcessFrndSubscrListRem+0x7e>
 80266d2:	f821 3c02 	strh.w	r3, [r1, #-2]
 80266d6:	3a01      	subs	r2, #1
 80266d8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 80266dc:	d1f4      	bne.n	80266c8 <BnrgmFrndFnProcessFrndSubscrListRem+0x70>
 80266de:	2f06      	cmp	r7, #6
 80266e0:	d006      	beq.n	80266f0 <BnrgmFrndFnProcessFrndSubscrListRem+0x98>
 80266e2:	9a03      	ldr	r2, [sp, #12]
 80266e4:	f108 0801 	add.w	r8, r8, #1
 80266e8:	fa5f f888 	uxtb.w	r8, r8
 80266ec:	4590      	cmp	r8, r2
 80266ee:	d3df      	bcc.n	80266b0 <BnrgmFrndFnProcessFrndSubscrListRem+0x58>
 80266f0:	f44f 734d 	mov.w	r3, #820	; 0x334
 80266f4:	fb03 4306 	mla	r3, r3, r6, r4
 80266f8:	f883 b336 	strb.w	fp, [r3, #822]	; 0x336
 80266fc:	f44f 734d 	mov.w	r3, #820	; 0x334
 8026700:	2205      	movs	r2, #5
 8026702:	fb03 4306 	mla	r3, r3, r6, r4
 8026706:	9200      	str	r2, [sp, #0]
 8026708:	3304      	adds	r3, #4
 802670a:	b2f2      	uxtb	r2, r6
 802670c:	4621      	mov	r1, r4
 802670e:	4650      	mov	r0, sl
 8026710:	f7ff fc3c 	bl	8025f8c <BnrgmFrndFn_FSM>
 8026714:	2000      	movs	r0, #0
 8026716:	b007      	add	sp, #28
 8026718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802671c:	3701      	adds	r7, #1
 802671e:	b2ff      	uxtb	r7, r7
 8026720:	e7d9      	b.n	80266d6 <BnrgmFrndFnProcessFrndSubscrListRem+0x7e>
 8026722:	2002      	movs	r0, #2
 8026724:	e7f7      	b.n	8026716 <BnrgmFrndFnProcessFrndSubscrListRem+0xbe>
 8026726:	bf00      	nop
 8026728:	08033338 	.word	0x08033338
 802672c:	08032488 	.word	0x08032488
 8026730:	0803390b 	.word	0x0803390b

08026734 <BnrgmFrndFnProcessFrndSubscrListAdd>:
 8026734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026738:	b087      	sub	sp, #28
 802673a:	4614      	mov	r4, r2
 802673c:	9f10      	ldr	r7, [sp, #64]	; 0x40
 802673e:	4698      	mov	r8, r3
 8026740:	4681      	mov	r9, r0
 8026742:	b930      	cbnz	r0, 8026752 <BnrgmFrndFnProcessFrndSubscrListAdd+0x1e>
 8026744:	4b32      	ldr	r3, [pc, #200]	; (8026810 <BnrgmFrndFnProcessFrndSubscrListAdd+0xdc>)
 8026746:	4a33      	ldr	r2, [pc, #204]	; (8026814 <BnrgmFrndFnProcessFrndSubscrListAdd+0xe0>)
 8026748:	4833      	ldr	r0, [pc, #204]	; (8026818 <BnrgmFrndFnProcessFrndSubscrListAdd+0xe4>)
 802674a:	f240 31d5 	movw	r1, #981	; 0x3d5
 802674e:	f002 f9bb 	bl	8028ac8 <__assert_func>
 8026752:	2b00      	cmp	r3, #0
 8026754:	d05a      	beq.n	802680c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 8026756:	2f02      	cmp	r7, #2
 8026758:	d958      	bls.n	802680c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 802675a:	07f8      	lsls	r0, r7, #31
 802675c:	d556      	bpl.n	802680c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 802675e:	4610      	mov	r0, r2
 8026760:	8a89      	ldrh	r1, [r1, #20]
 8026762:	f7f7 fd04 	bl	801e16e <BnrgmFrndFnGetLpnOffset>
 8026766:	1c42      	adds	r2, r0, #1
 8026768:	4605      	mov	r5, r0
 802676a:	d04f      	beq.n	802680c <BnrgmFrndFnProcessFrndSubscrListAdd+0xd8>
 802676c:	f44f 764d 	mov.w	r6, #820	; 0x334
 8026770:	4346      	muls	r6, r0
 8026772:	19a3      	adds	r3, r4, r6
 8026774:	f898 b000 	ldrb.w	fp, [r8]
 8026778:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 802677c:	455b      	cmp	r3, fp
 802677e:	d033      	beq.n	80267e8 <BnrgmFrndFnProcessFrndSubscrListAdd+0xb4>
 8026780:	087b      	lsrs	r3, r7, #1
 8026782:	361e      	adds	r6, #30
 8026784:	f44f 7acd 	mov.w	sl, #410	; 0x19a
 8026788:	9303      	str	r3, [sp, #12]
 802678a:	4426      	add	r6, r4
 802678c:	2700      	movs	r7, #0
 802678e:	fb0a fa00 	mul.w	sl, sl, r0
 8026792:	2102      	movs	r1, #2
 8026794:	fb01 8007 	mla	r0, r1, r7, r8
 8026798:	aa05      	add	r2, sp, #20
 802679a:	3001      	adds	r0, #1
 802679c:	f7f4 fd16 	bl	801b1cc <MobleInputStreamGetBigEndian>
 80267a0:	2300      	movs	r3, #0
 80267a2:	f8bd 0014 	ldrh.w	r0, [sp, #20]
 80267a6:	46b4      	mov	ip, r6
 80267a8:	4619      	mov	r1, r3
 80267aa:	f04f 32ff 	mov.w	r2, #4294967295
 80267ae:	f83c eb02 	ldrh.w	lr, [ip], #2
 80267b2:	f1be 0f00 	cmp.w	lr, #0
 80267b6:	d027      	beq.n	8026808 <BnrgmFrndFnProcessFrndSubscrListAdd+0xd4>
 80267b8:	4570      	cmp	r0, lr
 80267ba:	bf08      	it	eq
 80267bc:	2101      	moveq	r1, #1
 80267be:	3301      	adds	r3, #1
 80267c0:	2b06      	cmp	r3, #6
 80267c2:	d1f4      	bne.n	80267ae <BnrgmFrndFnProcessFrndSubscrListAdd+0x7a>
 80267c4:	1c53      	adds	r3, r2, #1
 80267c6:	d009      	beq.n	80267dc <BnrgmFrndFnProcessFrndSubscrListAdd+0xa8>
 80267c8:	b919      	cbnz	r1, 80267d2 <BnrgmFrndFnProcessFrndSubscrListAdd+0x9e>
 80267ca:	4452      	add	r2, sl
 80267cc:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80267d0:	83d0      	strh	r0, [r2, #30]
 80267d2:	9b03      	ldr	r3, [sp, #12]
 80267d4:	3701      	adds	r7, #1
 80267d6:	b2ff      	uxtb	r7, r7
 80267d8:	429f      	cmp	r7, r3
 80267da:	d3da      	bcc.n	8026792 <BnrgmFrndFnProcessFrndSubscrListAdd+0x5e>
 80267dc:	f44f 734d 	mov.w	r3, #820	; 0x334
 80267e0:	fb03 4305 	mla	r3, r3, r5, r4
 80267e4:	f883 b336 	strb.w	fp, [r3, #822]	; 0x336
 80267e8:	f44f 734d 	mov.w	r3, #820	; 0x334
 80267ec:	2204      	movs	r2, #4
 80267ee:	fb03 4305 	mla	r3, r3, r5, r4
 80267f2:	9200      	str	r2, [sp, #0]
 80267f4:	4413      	add	r3, r2
 80267f6:	4621      	mov	r1, r4
 80267f8:	b2ea      	uxtb	r2, r5
 80267fa:	4648      	mov	r0, r9
 80267fc:	f7ff fbc6 	bl	8025f8c <BnrgmFrndFn_FSM>
 8026800:	2000      	movs	r0, #0
 8026802:	b007      	add	sp, #28
 8026804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026808:	b25a      	sxtb	r2, r3
 802680a:	e7d8      	b.n	80267be <BnrgmFrndFnProcessFrndSubscrListAdd+0x8a>
 802680c:	2002      	movs	r0, #2
 802680e:	e7f8      	b.n	8026802 <BnrgmFrndFnProcessFrndSubscrListAdd+0xce>
 8026810:	08033338 	.word	0x08033338
 8026814:	080324ac 	.word	0x080324ac
 8026818:	0803390b 	.word	0x0803390b

0802681c <MobleTransSarSendAck.isra.0>:
 802681c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8026820:	b090      	sub	sp, #64	; 0x40
 8026822:	2400      	movs	r4, #0
 8026824:	4606      	mov	r6, r0
 8026826:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8026828:	9400      	str	r4, [sp, #0]
 802682a:	f8ad 4004 	strh.w	r4, [sp, #4]
 802682e:	f88d 4006 	strb.w	r4, [sp, #6]
 8026832:	f7f0 ffde 	bl	80177f2 <htobe32>
 8026836:	460d      	mov	r5, r1
 8026838:	4690      	mov	r8, r2
 802683a:	4682      	mov	sl, r0
 802683c:	2228      	movs	r2, #40	; 0x28
 802683e:	4621      	mov	r1, r4
 8026840:	a806      	add	r0, sp, #24
 8026842:	461f      	mov	r7, r3
 8026844:	f8bd 9060 	ldrh.w	r9, [sp, #96]	; 0x60
 8026848:	f003 f834 	bl	80298b4 <memset>
 802684c:	2302      	movs	r3, #2
 802684e:	f88d 3008 	strb.w	r3, [sp, #8]
 8026852:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 8026856:	f88d 300b 	strb.w	r3, [sp, #11]
 802685a:	a802      	add	r0, sp, #8
 802685c:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8026860:	f8ad 300c 	strh.w	r3, [sp, #12]
 8026864:	4669      	mov	r1, sp
 8026866:	f88d 4009 	strb.w	r4, [sp, #9]
 802686a:	f88d 400a 	strb.w	r4, [sp, #10]
 802686e:	f7f5 fdd5 	bl	801c41c <MobleTransportRenderHdr>
 8026872:	2308      	movs	r3, #8
 8026874:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8026878:	4b17      	ldr	r3, [pc, #92]	; (80268d8 <MobleTransSarSendAck.isra.0+0xbc>)
 802687a:	f8cd a003 	str.w	sl, [sp, #3]
 802687e:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
 8026882:	f893 30b6 	ldrb.w	r3, [r3, #182]	; 0xb6
 8026886:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 802688a:	3301      	adds	r3, #1
 802688c:	4648      	mov	r0, r9
 802688e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8026892:	f8ad 502e 	strh.w	r5, [sp, #46]	; 0x2e
 8026896:	f8ad 802c 	strh.w	r8, [sp, #44]	; 0x2c
 802689a:	f7f3 ff23 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 802689e:	f88d 0034 	strb.w	r0, [sp, #52]	; 0x34
 80268a2:	4638      	mov	r0, r7
 80268a4:	f7f3 ff38 	bl	801a718 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 80268a8:	6833      	ldr	r3, [r6, #0]
 80268aa:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
 80268ae:	885a      	ldrh	r2, [r3, #2]
 80268b0:	f8ad 9036 	strh.w	r9, [sp, #54]	; 0x36
 80268b4:	4295      	cmp	r5, r2
 80268b6:	f8ad 7038 	strh.w	r7, [sp, #56]	; 0x38
 80268ba:	d303      	bcc.n	80268c4 <MobleTransSarSendAck.isra.0+0xa8>
 80268bc:	7f1b      	ldrb	r3, [r3, #28]
 80268be:	4413      	add	r3, r2
 80268c0:	429d      	cmp	r5, r3
 80268c2:	db05      	blt.n	80268d0 <MobleTransSarSendAck.isra.0+0xb4>
 80268c4:	2307      	movs	r3, #7
 80268c6:	466a      	mov	r2, sp
 80268c8:	a906      	add	r1, sp, #24
 80268ca:	4630      	mov	r0, r6
 80268cc:	f7fb fd68 	bl	80223a0 <MobleNetworkSendData>
 80268d0:	b010      	add	sp, #64	; 0x40
 80268d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80268d6:	bf00      	nop
 80268d8:	20000324 	.word	0x20000324

080268dc <MobleTransSarAssemble>:
 80268dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80268e0:	b0b9      	sub	sp, #228	; 0xe4
 80268e2:	460c      	mov	r4, r1
 80268e4:	6909      	ldr	r1, [r1, #16]
 80268e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80268e8:	4615      	mov	r5, r2
 80268ea:	f421 53ff 	bic.w	r3, r1, #8160	; 0x1fe0
 80268ee:	8892      	ldrh	r2, [r2, #4]
 80268f0:	f8df 8284 	ldr.w	r8, [pc, #644]	; 8026b78 <MobleTransSarAssemble+0x29c>
 80268f4:	f3c1 010c 	ubfx	r1, r1, #0, #13
 80268f8:	f023 031f 	bic.w	r3, r3, #31
 80268fc:	4413      	add	r3, r2
 80268fe:	428a      	cmp	r2, r1
 8026900:	bf8c      	ite	hi
 8026902:	f44f 5200 	movhi.w	r2, #8192	; 0x2000
 8026906:	2200      	movls	r2, #0
 8026908:	1a9b      	subs	r3, r3, r2
 802690a:	4606      	mov	r6, r0
 802690c:	f8b8 094c 	ldrh.w	r0, [r8, #2380]	; 0x94c
 8026910:	930a      	str	r3, [sp, #40]	; 0x28
 8026912:	f7f4 fac5 	bl	801aea0 <MobleMemAlloc>
 8026916:	4607      	mov	r7, r0
 8026918:	b150      	cbz	r0, 8026930 <MobleTransSarAssemble+0x54>
 802691a:	f8b8 094e 	ldrh.w	r0, [r8, #2382]	; 0x94e
 802691e:	f7f4 fabf 	bl	801aea0 <MobleMemAlloc>
 8026922:	9008      	str	r0, [sp, #32]
 8026924:	2800      	cmp	r0, #0
 8026926:	f040 8122 	bne.w	8026b6e <MobleTransSarAssemble+0x292>
 802692a:	4638      	mov	r0, r7
 802692c:	f7f4 fb42 	bl	801afb4 <MobleMemFree>
 8026930:	2302      	movs	r3, #2
 8026932:	e085      	b.n	8026a40 <MobleTransSarAssemble+0x164>
 8026934:	79aa      	ldrb	r2, [r5, #6]
 8026936:	454a      	cmp	r2, r9
 8026938:	d142      	bne.n	80269c0 <MobleTransSarAssemble+0xe4>
 802693a:	a938      	add	r1, sp, #224	; 0xe0
 802693c:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8026940:	6922      	ldr	r2, [r4, #16]
 8026942:	f841 2c8c 	str.w	r2, [r1, #-140]
 8026946:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8026948:	f8dd a108 	ldr.w	sl, [sp, #264]	; 0x108
 802694c:	2a00      	cmp	r2, #0
 802694e:	f000 8101 	beq.w	8026b54 <MobleTransSarAssemble+0x278>
 8026952:	4611      	mov	r1, r2
 8026954:	4652      	mov	r2, sl
 8026956:	eb07 000b 	add.w	r0, r7, fp
 802695a:	f003 f83c 	bl	80299d6 <memcpy>
 802695e:	79ea      	ldrb	r2, [r5, #7]
 8026960:	454a      	cmp	r2, r9
 8026962:	44d3      	add	fp, sl
 8026964:	f109 0301 	add.w	r3, r9, #1
 8026968:	f040 80fd 	bne.w	8026b66 <MobleTransSarAssemble+0x28a>
 802696c:	68f3      	ldr	r3, [r6, #12]
 802696e:	3b01      	subs	r3, #1
 8026970:	60f3      	str	r3, [r6, #12]
 8026972:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
 8026976:	f413 7800 	ands.w	r8, r3, #512	; 0x200
 802697a:	f000 80a1 	beq.w	8026ac0 <MobleTransSarAssemble+0x1e4>
 802697e:	7ba3      	ldrb	r3, [r4, #14]
 8026980:	2b00      	cmp	r3, #0
 8026982:	d048      	beq.n	8026a16 <MobleTransSarAssemble+0x13a>
 8026984:	2200      	movs	r2, #0
 8026986:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
 802698a:	2b00      	cmp	r3, #0
 802698c:	dd16      	ble.n	80269bc <MobleTransSarAssemble+0xe0>
 802698e:	b112      	cbz	r2, 8026996 <MobleTransSarAssemble+0xba>
 8026990:	6833      	ldr	r3, [r6, #0]
 8026992:	885b      	ldrh	r3, [r3, #2]
 8026994:	82e3      	strh	r3, [r4, #22]
 8026996:	79eb      	ldrb	r3, [r5, #7]
 8026998:	1c59      	adds	r1, r3, #1
 802699a:	2301      	movs	r3, #1
 802699c:	408b      	lsls	r3, r1
 802699e:	3b01      	subs	r3, #1
 80269a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80269a4:	88ab      	ldrh	r3, [r5, #4]
 80269a6:	9301      	str	r3, [sp, #4]
 80269a8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80269ac:	9300      	str	r3, [sp, #0]
 80269ae:	8ae2      	ldrh	r2, [r4, #22]
 80269b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80269b4:	8aa1      	ldrh	r1, [r4, #20]
 80269b6:	4630      	mov	r0, r6
 80269b8:	f7ff ff30 	bl	802681c <MobleTransSarSendAck.isra.0>
 80269bc:	2300      	movs	r3, #0
 80269be:	e037      	b.n	8026a30 <MobleTransSarAssemble+0x154>
 80269c0:	222c      	movs	r2, #44	; 0x2c
 80269c2:	435a      	muls	r2, r3
 80269c4:	9209      	str	r2, [sp, #36]	; 0x24
 80269c6:	f8d8 c2e0 	ldr.w	ip, [r8, #736]	; 0x2e0
 80269ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80269cc:	f81c 1001 	ldrb.w	r1, [ip, r1]
 80269d0:	4462      	add	r2, ip
 80269d2:	2900      	cmp	r1, #0
 80269d4:	f000 80bf 	beq.w	8026b56 <MobleTransSarAssemble+0x27a>
 80269d8:	f8b2 e002 	ldrh.w	lr, [r2, #2]
 80269dc:	8aa1      	ldrh	r1, [r4, #20]
 80269de:	458e      	cmp	lr, r1
 80269e0:	f040 80b9 	bne.w	8026b56 <MobleTransSarAssemble+0x27a>
 80269e4:	6851      	ldr	r1, [r2, #4]
 80269e6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80269e8:	4281      	cmp	r1, r0
 80269ea:	f040 80b4 	bne.w	8026b56 <MobleTransSarAssemble+0x27a>
 80269ee:	7c91      	ldrb	r1, [r2, #18]
 80269f0:	4549      	cmp	r1, r9
 80269f2:	f040 80b0 	bne.w	8026b56 <MobleTransSarAssemble+0x27a>
 80269f6:	ab38      	add	r3, sp, #224	; 0xe0
 80269f8:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 80269fc:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8026a00:	f102 0115 	add.w	r1, r2, #21
 8026a04:	6892      	ldr	r2, [r2, #8]
 8026a06:	f843 2c8c 	str.w	r2, [r3, #-140]
 8026a0a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8026a0c:	f04f 0300 	mov.w	r3, #0
 8026a10:	f80c 3002 	strb.w	r3, [ip, r2]
 8026a14:	e79e      	b.n	8026954 <MobleTransSarAssemble+0x78>
 8026a16:	6832      	ldr	r2, [r6, #0]
 8026a18:	f892 a01c 	ldrb.w	sl, [r2, #28]
 8026a1c:	8aa2      	ldrh	r2, [r4, #20]
 8026a1e:	9209      	str	r2, [sp, #36]	; 0x24
 8026a20:	4698      	mov	r8, r3
 8026a22:	2302      	movs	r3, #2
 8026a24:	fa5f f288 	uxtb.w	r2, r8
 8026a28:	4592      	cmp	sl, r2
 8026a2a:	d80d      	bhi.n	8026a48 <MobleTransSarAssemble+0x16c>
 8026a2c:	2b01      	cmp	r3, #1
 8026a2e:	d035      	beq.n	8026a9c <MobleTransSarAssemble+0x1c0>
 8026a30:	4638      	mov	r0, r7
 8026a32:	9309      	str	r3, [sp, #36]	; 0x24
 8026a34:	f7f4 fabe 	bl	801afb4 <MobleMemFree>
 8026a38:	9808      	ldr	r0, [sp, #32]
 8026a3a:	f7f4 fabb 	bl	801afb4 <MobleMemFree>
 8026a3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a40:	4618      	mov	r0, r3
 8026a42:	b039      	add	sp, #228	; 0xe4
 8026a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026a48:	f894 0042 	ldrb.w	r0, [r4, #66]	; 0x42
 8026a4c:	8aa2      	ldrh	r2, [r4, #20]
 8026a4e:	f7fb f8eb 	bl	8021c28 <MobleConfigModel_KR_UseNewKeyDec>
 8026a52:	6833      	ldr	r3, [r6, #0]
 8026a54:	f895 c001 	ldrb.w	ip, [r5, #1]
 8026a58:	9005      	str	r0, [sp, #20]
 8026a5a:	330c      	adds	r3, #12
 8026a5c:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8026a60:	9b08      	ldr	r3, [sp, #32]
 8026a62:	78a9      	ldrb	r1, [r5, #2]
 8026a64:	9702      	str	r7, [sp, #8]
 8026a66:	e9cd b303 	strd	fp, r3, [sp, #12]
 8026a6a:	fa12 f288 	uxtah	r2, r2, r8
 8026a6e:	8ae3      	ldrh	r3, [r4, #22]
 8026a70:	b292      	uxth	r2, r2
 8026a72:	f1bc 0000 	subs.w	r0, ip, #0
 8026a76:	e9cd 2300 	strd	r2, r3, [sp]
 8026a7a:	bf18      	it	ne
 8026a7c:	2001      	movne	r0, #1
 8026a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8026a80:	78ea      	ldrb	r2, [r5, #3]
 8026a82:	f7f4 ffd3 	bl	801ba2c <MoblePalCryptoDecryptApp>
 8026a86:	fa1f f988 	uxth.w	r9, r8
 8026a8a:	4603      	mov	r3, r0
 8026a8c:	f108 0801 	add.w	r8, r8, #1
 8026a90:	2800      	cmp	r0, #0
 8026a92:	d1c7      	bne.n	8026a24 <MobleTransSarAssemble+0x148>
 8026a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8026a96:	4499      	add	r9, r3
 8026a98:	f8a4 9014 	strh.w	r9, [r4, #20]
 8026a9c:	78eb      	ldrb	r3, [r5, #3]
 8026a9e:	2b00      	cmp	r3, #0
 8026aa0:	bf14      	ite	ne
 8026aa2:	2308      	movne	r3, #8
 8026aa4:	2304      	moveq	r3, #4
 8026aa6:	ebab 0303 	sub.w	r3, fp, r3
 8026aaa:	9300      	str	r3, [sp, #0]
 8026aac:	462a      	mov	r2, r5
 8026aae:	9b08      	ldr	r3, [sp, #32]
 8026ab0:	4621      	mov	r1, r4
 8026ab2:	4630      	mov	r0, r6
 8026ab4:	f7f5 f920 	bl	801bcf8 <MobleApplicationProcessPacket>
 8026ab8:	2801      	cmp	r0, #1
 8026aba:	4603      	mov	r3, r0
 8026abc:	d8b8      	bhi.n	8026a30 <MobleTransSarAssemble+0x154>
 8026abe:	e761      	b.n	8026984 <MobleTransSarAssemble+0xa8>
 8026ac0:	055b      	lsls	r3, r3, #21
 8026ac2:	f57f af5f 	bpl.w	8026984 <MobleTransSarAssemble+0xa8>
 8026ac6:	2301      	movs	r3, #1
 8026ac8:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 8026acc:	78eb      	ldrb	r3, [r5, #3]
 8026ace:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
 8026ad2:	78ab      	ldrb	r3, [r5, #2]
 8026ad4:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 8026ad8:	786b      	ldrb	r3, [r5, #1]
 8026ada:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
 8026ade:	224c      	movs	r2, #76	; 0x4c
 8026ae0:	88ab      	ldrh	r3, [r5, #4]
 8026ae2:	f88d 903c 	strb.w	r9, [sp, #60]	; 0x3c
 8026ae6:	4621      	mov	r1, r4
 8026ae8:	a825      	add	r0, sp, #148	; 0x94
 8026aea:	f88d 8035 	strb.w	r8, [sp, #53]	; 0x35
 8026aee:	f8ad 3039 	strh.w	r3, [sp, #57]	; 0x39
 8026af2:	f002 ff70 	bl	80299d6 <memcpy>
 8026af6:	46c1      	mov	r9, r8
 8026af8:	fa5f fa88 	uxtb.w	sl, r8
 8026afc:	a911      	add	r1, sp, #68	; 0x44
 8026afe:	a80d      	add	r0, sp, #52	; 0x34
 8026b00:	f88d a03b 	strb.w	sl, [sp, #59]	; 0x3b
 8026b04:	f7f5 fc8a 	bl	801c41c <MobleTransportRenderHdr>
 8026b08:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8026b0c:	fb19 fa0a 	smulbb	sl, r9, sl
 8026b10:	4543      	cmp	r3, r8
 8026b12:	fa5f fa8a 	uxtb.w	sl, sl
 8026b16:	ab15      	add	r3, sp, #84	; 0x54
 8026b18:	bf0c      	ite	eq
 8026b1a:	ebab 090a 	subeq.w	r9, fp, sl
 8026b1e:	f04f 090c 	movne.w	r9, #12
 8026b22:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8026b26:	9329      	str	r3, [sp, #164]	; 0xa4
 8026b28:	464a      	mov	r2, r9
 8026b2a:	eb07 010a 	add.w	r1, r7, sl
 8026b2e:	a812      	add	r0, sp, #72	; 0x48
 8026b30:	f002 ff51 	bl	80299d6 <memcpy>
 8026b34:	f109 0304 	add.w	r3, r9, #4
 8026b38:	9300      	str	r3, [sp, #0]
 8026b3a:	aa0d      	add	r2, sp, #52	; 0x34
 8026b3c:	ab11      	add	r3, sp, #68	; 0x44
 8026b3e:	a925      	add	r1, sp, #148	; 0x94
 8026b40:	4630      	mov	r0, r6
 8026b42:	f7f7 fd01 	bl	801e548 <BnrgmFrndMgmtQueLpnPkt>
 8026b46:	79eb      	ldrb	r3, [r5, #7]
 8026b48:	f108 0801 	add.w	r8, r8, #1
 8026b4c:	4543      	cmp	r3, r8
 8026b4e:	dad3      	bge.n	8026af8 <MobleTransSarAssemble+0x21c>
 8026b50:	2201      	movs	r2, #1
 8026b52:	e718      	b.n	8026986 <MobleTransSarAssemble+0xaa>
 8026b54:	3b01      	subs	r3, #1
 8026b56:	3301      	adds	r3, #1
 8026b58:	f898 22dc 	ldrb.w	r2, [r8, #732]	; 0x2dc
 8026b5c:	429a      	cmp	r2, r3
 8026b5e:	f73f aee9 	bgt.w	8026934 <MobleTransSarAssemble+0x58>
 8026b62:	2302      	movs	r3, #2
 8026b64:	e764      	b.n	8026a30 <MobleTransSarAssemble+0x154>
 8026b66:	4699      	mov	r9, r3
 8026b68:	f04f 33ff 	mov.w	r3, #4294967295
 8026b6c:	e7f3      	b.n	8026b56 <MobleTransSarAssemble+0x27a>
 8026b6e:	2300      	movs	r3, #0
 8026b70:	469b      	mov	fp, r3
 8026b72:	4699      	mov	r9, r3
 8026b74:	e7f0      	b.n	8026b58 <MobleTransSarAssemble+0x27c>
 8026b76:	bf00      	nop
 8026b78:	2000141c 	.word	0x2000141c

08026b7c <MobleTransSarProcessSeg>:
 8026b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026b80:	b087      	sub	sp, #28
 8026b82:	4616      	mov	r6, r2
 8026b84:	460d      	mov	r5, r1
 8026b86:	6909      	ldr	r1, [r1, #16]
 8026b88:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8026b8a:	9204      	str	r2, [sp, #16]
 8026b8c:	f421 58ff 	bic.w	r8, r1, #8160	; 0x1fe0
 8026b90:	88b2      	ldrh	r2, [r6, #4]
 8026b92:	f028 081f 	bic.w	r8, r8, #31
 8026b96:	f3c1 040c 	ubfx	r4, r1, #0, #13
 8026b9a:	4490      	add	r8, r2
 8026b9c:	42a2      	cmp	r2, r4
 8026b9e:	bf8c      	ite	hi
 8026ba0:	f44f 5200 	movhi.w	r2, #8192	; 0x2000
 8026ba4:	2200      	movls	r2, #0
 8026ba6:	eba8 0802 	sub.w	r8, r8, r2
 8026baa:	4683      	mov	fp, r0
 8026bac:	b930      	cbnz	r0, 8026bbc <MobleTransSarProcessSeg+0x40>
 8026bae:	4bc0      	ldr	r3, [pc, #768]	; (8026eb0 <MobleTransSarProcessSeg+0x334>)
 8026bb0:	4ac0      	ldr	r2, [pc, #768]	; (8026eb4 <MobleTransSarProcessSeg+0x338>)
 8026bb2:	48c1      	ldr	r0, [pc, #772]	; (8026eb8 <MobleTransSarProcessSeg+0x33c>)
 8026bb4:	f240 41c9 	movw	r1, #1225	; 0x4c9
 8026bb8:	f001 ff86 	bl	8028ac8 <__assert_func>
 8026bbc:	4541      	cmp	r1, r8
 8026bbe:	d203      	bcs.n	8026bc8 <MobleTransSarProcessSeg+0x4c>
 8026bc0:	2002      	movs	r0, #2
 8026bc2:	b007      	add	sp, #28
 8026bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8026bc8:	79b1      	ldrb	r1, [r6, #6]
 8026bca:	79f2      	ldrb	r2, [r6, #7]
 8026bcc:	4291      	cmp	r1, r2
 8026bce:	d8f7      	bhi.n	8026bc0 <MobleTransSarProcessSeg+0x44>
 8026bd0:	4cba      	ldr	r4, [pc, #744]	; (8026ebc <MobleTransSarProcessSeg+0x340>)
 8026bd2:	2700      	movs	r7, #0
 8026bd4:	f04f 0a2c 	mov.w	sl, #44	; 0x2c
 8026bd8:	f894 02dc 	ldrb.w	r0, [r4, #732]	; 0x2dc
 8026bdc:	f8d4 12e4 	ldr.w	r1, [r4, #740]	; 0x2e4
 8026be0:	42b8      	cmp	r0, r7
 8026be2:	dc4d      	bgt.n	8026c80 <MobleTransSarProcessSeg+0x104>
 8026be4:	2700      	movs	r7, #0
 8026be6:	46b9      	mov	r9, r7
 8026be8:	f1a1 0a2c 	sub.w	sl, r1, #44	; 0x2c
 8026bec:	42b8      	cmp	r0, r7
 8026bee:	d02f      	beq.n	8026c50 <MobleTransSarProcessSeg+0xd4>
 8026bf0:	f109 0c2c 	add.w	ip, r9, #44	; 0x2c
 8026bf4:	eb01 0209 	add.w	r2, r1, r9
 8026bf8:	f81a e00c 	ldrb.w	lr, [sl, ip]
 8026bfc:	f1be 0f00 	cmp.w	lr, #0
 8026c00:	f040 80f3 	bne.w	8026dea <MobleTransSarProcessSeg+0x26e>
 8026c04:	2001      	movs	r0, #1
 8026c06:	8010      	strh	r0, [r2, #0]
 8026c08:	8aa9      	ldrh	r1, [r5, #20]
 8026c0a:	8091      	strh	r1, [r2, #4]
 8026c0c:	8ae9      	ldrh	r1, [r5, #22]
 8026c0e:	80d1      	strh	r1, [r2, #6]
 8026c10:	f8c2 800c 	str.w	r8, [r2, #12]
 8026c14:	f896 c006 	ldrb.w	ip, [r6, #6]
 8026c18:	f8c2 b028 	str.w	fp, [r2, #40]	; 0x28
 8026c1c:	b209      	sxth	r1, r1
 8026c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8026c22:	2900      	cmp	r1, #0
 8026c24:	6110      	str	r0, [r2, #16]
 8026c26:	dd13      	ble.n	8026c50 <MobleTransSarProcessSeg+0xd4>
 8026c28:	49a5      	ldr	r1, [pc, #660]	; (8026ec0 <MobleTransSarProcessSeg+0x344>)
 8026c2a:	9305      	str	r3, [sp, #20]
 8026c2c:	f102 0014 	add.w	r0, r2, #20
 8026c30:	f7f0 ff86 	bl	8017b40 <MoblePalTimerCreate>
 8026c34:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026c38:	444a      	add	r2, r9
 8026c3a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8026c3e:	6950      	ldr	r0, [r2, #20]
 8026c40:	f7f0 ffb7 	bl	8017bb2 <MoblePalTimerStart>
 8026c44:	f8db 200c 	ldr.w	r2, [fp, #12]
 8026c48:	9b05      	ldr	r3, [sp, #20]
 8026c4a:	3201      	adds	r2, #1
 8026c4c:	f8cb 200c 	str.w	r2, [fp, #12]
 8026c50:	79f1      	ldrb	r1, [r6, #7]
 8026c52:	f894 22dc 	ldrb.w	r2, [r4, #732]	; 0x2dc
 8026c56:	2900      	cmp	r1, #0
 8026c58:	f040 80ca 	bne.w	8026df0 <MobleTransSarProcessSeg+0x274>
 8026c5c:	4297      	cmp	r7, r2
 8026c5e:	f280 80c7 	bge.w	8026df0 <MobleTransSarProcessSeg+0x274>
 8026c62:	222c      	movs	r2, #44	; 0x2c
 8026c64:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026c68:	9305      	str	r3, [sp, #20]
 8026c6a:	4357      	muls	r7, r2
 8026c6c:	4438      	add	r0, r7
 8026c6e:	3014      	adds	r0, #20
 8026c70:	f7f1 f820 	bl	8017cb4 <MobleTransEraseTimer>
 8026c74:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026c78:	f240 1101 	movw	r1, #257	; 0x101
 8026c7c:	53d1      	strh	r1, [r2, r7]
 8026c7e:	e077      	b.n	8026d70 <MobleTransSarProcessSeg+0x1f4>
 8026c80:	fb0a f907 	mul.w	r9, sl, r7
 8026c84:	eb01 0009 	add.w	r0, r1, r9
 8026c88:	f811 1009 	ldrb.w	r1, [r1, r9]
 8026c8c:	f8b0 c004 	ldrh.w	ip, [r0, #4]
 8026c90:	8aaa      	ldrh	r2, [r5, #20]
 8026c92:	2900      	cmp	r1, #0
 8026c94:	f000 808d 	beq.w	8026db2 <MobleTransSarProcessSeg+0x236>
 8026c98:	4594      	cmp	ip, r2
 8026c9a:	f040 80a2 	bne.w	8026de2 <MobleTransSarProcessSeg+0x266>
 8026c9e:	68c2      	ldr	r2, [r0, #12]
 8026ca0:	4542      	cmp	r2, r8
 8026ca2:	f040 808b 	bne.w	8026dbc <MobleTransSarProcessSeg+0x240>
 8026ca6:	7842      	ldrb	r2, [r0, #1]
 8026ca8:	b392      	cbz	r2, 8026d10 <MobleTransSarProcessSeg+0x194>
 8026caa:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 8026cae:	8ae8      	ldrh	r0, [r5, #22]
 8026cb0:	2b00      	cmp	r3, #0
 8026cb2:	dd2b      	ble.n	8026d0c <MobleTransSarProcessSeg+0x190>
 8026cb4:	f7f7 fae2 	bl	801e27c <BnrgmFrndMgmtGetFriendshipStatus>
 8026cb8:	4680      	mov	r8, r0
 8026cba:	fab0 f780 	clz	r7, r0
 8026cbe:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026cc2:	4448      	add	r0, r9
 8026cc4:	3014      	adds	r0, #20
 8026cc6:	f7f0 fff5 	bl	8017cb4 <MobleTransEraseTimer>
 8026cca:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026cce:	4448      	add	r0, r9
 8026cd0:	301c      	adds	r0, #28
 8026cd2:	097f      	lsrs	r7, r7, #5
 8026cd4:	f7f0 ffee 	bl	8017cb4 <MobleTransEraseTimer>
 8026cd8:	f1b8 0f00 	cmp.w	r8, #0
 8026cdc:	d103      	bne.n	8026ce6 <MobleTransSarProcessSeg+0x16a>
 8026cde:	f8db 3000 	ldr.w	r3, [fp]
 8026ce2:	885b      	ldrh	r3, [r3, #2]
 8026ce4:	82eb      	strh	r3, [r5, #22]
 8026ce6:	79f3      	ldrb	r3, [r6, #7]
 8026ce8:	8aa9      	ldrh	r1, [r5, #20]
 8026cea:	1c5a      	adds	r2, r3, #1
 8026cec:	2301      	movs	r3, #1
 8026cee:	4093      	lsls	r3, r2
 8026cf0:	3b01      	subs	r3, #1
 8026cf2:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8026cf6:	88b3      	ldrh	r3, [r6, #4]
 8026cf8:	9301      	str	r3, [sp, #4]
 8026cfa:	f8b5 3044 	ldrh.w	r3, [r5, #68]	; 0x44
 8026cfe:	9300      	str	r3, [sp, #0]
 8026d00:	8aea      	ldrh	r2, [r5, #22]
 8026d02:	f8b5 3046 	ldrh.w	r3, [r5, #70]	; 0x46
 8026d06:	4658      	mov	r0, fp
 8026d08:	f7ff fd88 	bl	802681c <MobleTransSarSendAck.isra.0>
 8026d0c:	2000      	movs	r0, #0
 8026d0e:	e758      	b.n	8026bc2 <MobleTransSarProcessSeg+0x46>
 8026d10:	79b2      	ldrb	r2, [r6, #6]
 8026d12:	6901      	ldr	r1, [r0, #16]
 8026d14:	f04f 0a01 	mov.w	sl, #1
 8026d18:	fa0a f202 	lsl.w	r2, sl, r2
 8026d1c:	4211      	tst	r1, r2
 8026d1e:	d132      	bne.n	8026d86 <MobleTransSarProcessSeg+0x20a>
 8026d20:	4311      	orrs	r1, r2
 8026d22:	6101      	str	r1, [r0, #16]
 8026d24:	79f2      	ldrb	r2, [r6, #7]
 8026d26:	4452      	add	r2, sl
 8026d28:	fa0a f202 	lsl.w	r2, sl, r2
 8026d2c:	3a01      	subs	r2, #1
 8026d2e:	4291      	cmp	r1, r2
 8026d30:	d161      	bne.n	8026df6 <MobleTransSarProcessSeg+0x27a>
 8026d32:	3014      	adds	r0, #20
 8026d34:	9305      	str	r3, [sp, #20]
 8026d36:	f7f0 ffbd 	bl	8017cb4 <MobleTransEraseTimer>
 8026d3a:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026d3e:	4448      	add	r0, r9
 8026d40:	3020      	adds	r0, #32
 8026d42:	f7f0 ffb7 	bl	8017cb4 <MobleTransEraseTimer>
 8026d46:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026d4a:	495e      	ldr	r1, [pc, #376]	; (8026ec4 <MobleTransSarProcessSeg+0x348>)
 8026d4c:	444a      	add	r2, r9
 8026d4e:	f102 001c 	add.w	r0, r2, #28
 8026d52:	f7f0 fef5 	bl	8017b40 <MoblePalTimerCreate>
 8026d56:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026d5a:	444a      	add	r2, r9
 8026d5c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026d60:	69d0      	ldr	r0, [r2, #28]
 8026d62:	f7f0 ff57 	bl	8017c14 <MoblePalTimerStartOnce>
 8026d66:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026d6a:	4481      	add	r9, r0
 8026d6c:	f889 a001 	strb.w	sl, [r9, #1]
 8026d70:	9b04      	ldr	r3, [sp, #16]
 8026d72:	9310      	str	r3, [sp, #64]	; 0x40
 8026d74:	9b05      	ldr	r3, [sp, #20]
 8026d76:	4632      	mov	r2, r6
 8026d78:	4629      	mov	r1, r5
 8026d7a:	4658      	mov	r0, fp
 8026d7c:	b007      	add	sp, #28
 8026d7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8026d82:	f7ff bdab 	b.w	80268dc <MobleTransSarAssemble>
 8026d86:	301c      	adds	r0, #28
 8026d88:	f7f0 ff94 	bl	8017cb4 <MobleTransEraseTimer>
 8026d8c:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026d90:	494c      	ldr	r1, [pc, #304]	; (8026ec4 <MobleTransSarProcessSeg+0x348>)
 8026d92:	444a      	add	r2, r9
 8026d94:	f102 001c 	add.w	r0, r2, #28
 8026d98:	f7f0 fed2 	bl	8017b40 <MoblePalTimerCreate>
 8026d9c:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026da0:	4481      	add	r9, r0
 8026da2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8026da6:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8026daa:	f7f0 ff33 	bl	8017c14 <MoblePalTimerStartOnce>
 8026dae:	2001      	movs	r0, #1
 8026db0:	e707      	b.n	8026bc2 <MobleTransSarProcessSeg+0x46>
 8026db2:	4594      	cmp	ip, r2
 8026db4:	d115      	bne.n	8026de2 <MobleTransSarProcessSeg+0x266>
 8026db6:	68c2      	ldr	r2, [r0, #12]
 8026db8:	4542      	cmp	r2, r8
 8026dba:	d0f8      	beq.n	8026dae <MobleTransSarProcessSeg+0x232>
 8026dbc:	68c2      	ldr	r2, [r0, #12]
 8026dbe:	4542      	cmp	r2, r8
 8026dc0:	d211      	bcs.n	8026de6 <MobleTransSarProcessSeg+0x26a>
 8026dc2:	301c      	adds	r0, #28
 8026dc4:	9305      	str	r3, [sp, #20]
 8026dc6:	f7f0 ff75 	bl	8017cb4 <MobleTransEraseTimer>
 8026dca:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026dce:	4448      	add	r0, r9
 8026dd0:	3014      	adds	r0, #20
 8026dd2:	f7f0 ff6f 	bl	8017cb4 <MobleTransEraseTimer>
 8026dd6:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026dda:	9b05      	ldr	r3, [sp, #20]
 8026ddc:	2100      	movs	r1, #0
 8026dde:	f802 1009 	strb.w	r1, [r2, r9]
 8026de2:	3701      	adds	r7, #1
 8026de4:	e6f8      	b.n	8026bd8 <MobleTransSarProcessSeg+0x5c>
 8026de6:	d9fc      	bls.n	8026de2 <MobleTransSarProcessSeg+0x266>
 8026de8:	e6ea      	b.n	8026bc0 <MobleTransSarProcessSeg+0x44>
 8026dea:	3701      	adds	r7, #1
 8026dec:	46e1      	mov	r9, ip
 8026dee:	e6fd      	b.n	8026bec <MobleTransSarProcessSeg+0x70>
 8026df0:	4297      	cmp	r7, r2
 8026df2:	f43f aee5 	beq.w	8026bc0 <MobleTransSarProcessSeg+0x44>
 8026df6:	222c      	movs	r2, #44	; 0x2c
 8026df8:	f8d4 02e4 	ldr.w	r0, [r4, #740]	; 0x2e4
 8026dfc:	9305      	str	r3, [sp, #20]
 8026dfe:	4357      	muls	r7, r2
 8026e00:	4438      	add	r0, r7
 8026e02:	3020      	adds	r0, #32
 8026e04:	f7f0 ff56 	bl	8017cb4 <MobleTransEraseTimer>
 8026e08:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026e0c:	492e      	ldr	r1, [pc, #184]	; (8026ec8 <MobleTransSarProcessSeg+0x34c>)
 8026e0e:	443a      	add	r2, r7
 8026e10:	f102 0020 	add.w	r0, r2, #32
 8026e14:	f7f0 fe94 	bl	8017b40 <MoblePalTimerCreate>
 8026e18:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026e1c:	443a      	add	r2, r7
 8026e1e:	f64e 2160 	movw	r1, #60000	; 0xea60
 8026e22:	6a10      	ldr	r0, [r2, #32]
 8026e24:	f7f0 fef6 	bl	8017c14 <MoblePalTimerStartOnce>
 8026e28:	f9b5 2016 	ldrsh.w	r2, [r5, #22]
 8026e2c:	9b05      	ldr	r3, [sp, #20]
 8026e2e:	2a00      	cmp	r2, #0
 8026e30:	dd12      	ble.n	8026e58 <MobleTransSarProcessSeg+0x2dc>
 8026e32:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026e36:	443a      	add	r2, r7
 8026e38:	6951      	ldr	r1, [r2, #20]
 8026e3a:	b969      	cbnz	r1, 8026e58 <MobleTransSarProcessSeg+0x2dc>
 8026e3c:	4920      	ldr	r1, [pc, #128]	; (8026ec0 <MobleTransSarProcessSeg+0x344>)
 8026e3e:	f102 0014 	add.w	r0, r2, #20
 8026e42:	f7f0 fe7d 	bl	8017b40 <MoblePalTimerCreate>
 8026e46:	f8d4 22e4 	ldr.w	r2, [r4, #740]	; 0x2e4
 8026e4a:	4417      	add	r7, r2
 8026e4c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8026e50:	6978      	ldr	r0, [r7, #20]
 8026e52:	f7f0 feae 	bl	8017bb2 <MoblePalTimerStart>
 8026e56:	9b05      	ldr	r3, [sp, #20]
 8026e58:	f894 12dc 	ldrb.w	r1, [r4, #732]	; 0x2dc
 8026e5c:	f8d4 22e0 	ldr.w	r2, [r4, #736]	; 0x2e0
 8026e60:	f04f 0900 	mov.w	r9, #0
 8026e64:	4549      	cmp	r1, r9
 8026e66:	dd19      	ble.n	8026e9c <MobleTransSarProcessSeg+0x320>
 8026e68:	4617      	mov	r7, r2
 8026e6a:	f812 0b2c 	ldrb.w	r0, [r2], #44
 8026e6e:	b9d8      	cbnz	r0, 8026ea8 <MobleTransSarProcessSeg+0x32c>
 8026e70:	2201      	movs	r2, #1
 8026e72:	703a      	strb	r2, [r7, #0]
 8026e74:	8aaa      	ldrh	r2, [r5, #20]
 8026e76:	807a      	strh	r2, [r7, #2]
 8026e78:	692a      	ldr	r2, [r5, #16]
 8026e7a:	6830      	ldr	r0, [r6, #0]
 8026e7c:	6871      	ldr	r1, [r6, #4]
 8026e7e:	e9c7 8201 	strd	r8, r2, [r7, #4]
 8026e82:	f107 020c 	add.w	r2, r7, #12
 8026e86:	c203      	stmia	r2!, {r0, r1}
 8026e88:	7a31      	ldrb	r1, [r6, #8]
 8026e8a:	7011      	strb	r1, [r2, #0]
 8026e8c:	f107 0015 	add.w	r0, r7, #21
 8026e90:	4619      	mov	r1, r3
 8026e92:	9a04      	ldr	r2, [sp, #16]
 8026e94:	f002 fd9f 	bl	80299d6 <memcpy>
 8026e98:	9b04      	ldr	r3, [sp, #16]
 8026e9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8026e9c:	f894 32dc 	ldrb.w	r3, [r4, #732]	; 0x2dc
 8026ea0:	454b      	cmp	r3, r9
 8026ea2:	f47f af33 	bne.w	8026d0c <MobleTransSarProcessSeg+0x190>
 8026ea6:	e68b      	b.n	8026bc0 <MobleTransSarProcessSeg+0x44>
 8026ea8:	f109 0901 	add.w	r9, r9, #1
 8026eac:	e7da      	b.n	8026e64 <MobleTransSarProcessSeg+0x2e8>
 8026eae:	bf00      	nop
 8026eb0:	08033338 	.word	0x08033338
 8026eb4:	080324d0 	.word	0x080324d0
 8026eb8:	080337c8 	.word	0x080337c8
 8026ebc:	2000141c 	.word	0x2000141c
 8026ec0:	08026f11 	.word	0x08026f11
 8026ec4:	08026ecd 	.word	0x08026ecd
 8026ec8:	08017ced 	.word	0x08017ced

08026ecc <MobleTransSarOnAckSentInsurance>:
 8026ecc:	b530      	push	{r4, r5, lr}
 8026ece:	460c      	mov	r4, r1
 8026ed0:	b085      	sub	sp, #20
 8026ed2:	f101 001c 	add.w	r0, r1, #28
 8026ed6:	f7f0 feed 	bl	8017cb4 <MobleTransEraseTimer>
 8026eda:	88e0      	ldrh	r0, [r4, #6]
 8026edc:	f7f7 f9ce 	bl	801e27c <BnrgmFrndMgmtGetFriendshipStatus>
 8026ee0:	2800      	cmp	r0, #0
 8026ee2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026ee4:	6925      	ldr	r5, [r4, #16]
 8026ee6:	bf08      	it	eq
 8026ee8:	6802      	ldreq	r2, [r0, #0]
 8026eea:	88a1      	ldrh	r1, [r4, #4]
 8026eec:	bf0b      	itete	eq
 8026eee:	8852      	ldrheq	r2, [r2, #2]
 8026ef0:	88e2      	ldrhne	r2, [r4, #6]
 8026ef2:	2301      	moveq	r3, #1
 8026ef4:	2300      	movne	r3, #0
 8026ef6:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8026efa:	68e3      	ldr	r3, [r4, #12]
 8026efc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026f00:	9301      	str	r3, [sp, #4]
 8026f02:	8963      	ldrh	r3, [r4, #10]
 8026f04:	9300      	str	r3, [sp, #0]
 8026f06:	8923      	ldrh	r3, [r4, #8]
 8026f08:	f7ff fc88 	bl	802681c <MobleTransSarSendAck.isra.0>
 8026f0c:	b005      	add	sp, #20
 8026f0e:	bd30      	pop	{r4, r5, pc}

08026f10 <MobleTransSarOnAckTimer>:
 8026f10:	b530      	push	{r4, r5, lr}
 8026f12:	f891 3024 	ldrb.w	r3, [r1, #36]	; 0x24
 8026f16:	2b05      	cmp	r3, #5
 8026f18:	b085      	sub	sp, #20
 8026f1a:	460c      	mov	r4, r1
 8026f1c:	d906      	bls.n	8026f2c <MobleTransSarOnAckTimer+0x1c>
 8026f1e:	f101 0014 	add.w	r0, r1, #20
 8026f22:	b005      	add	sp, #20
 8026f24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026f28:	f7f0 bec4 	b.w	8017cb4 <MobleTransEraseTimer>
 8026f2c:	3301      	adds	r3, #1
 8026f2e:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
 8026f32:	88c8      	ldrh	r0, [r1, #6]
 8026f34:	f7f7 f9a2 	bl	801e27c <BnrgmFrndMgmtGetFriendshipStatus>
 8026f38:	2800      	cmp	r0, #0
 8026f3a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8026f3c:	6925      	ldr	r5, [r4, #16]
 8026f3e:	bf08      	it	eq
 8026f40:	6802      	ldreq	r2, [r0, #0]
 8026f42:	88a1      	ldrh	r1, [r4, #4]
 8026f44:	bf0b      	itete	eq
 8026f46:	8852      	ldrheq	r2, [r2, #2]
 8026f48:	88e2      	ldrhne	r2, [r4, #6]
 8026f4a:	2301      	moveq	r3, #1
 8026f4c:	2300      	movne	r3, #0
 8026f4e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8026f52:	68e3      	ldr	r3, [r4, #12]
 8026f54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8026f58:	9301      	str	r3, [sp, #4]
 8026f5a:	8963      	ldrh	r3, [r4, #10]
 8026f5c:	9300      	str	r3, [sp, #0]
 8026f5e:	8923      	ldrh	r3, [r4, #8]
 8026f60:	f7ff fc5c 	bl	802681c <MobleTransSarSendAck.isra.0>
 8026f64:	b005      	add	sp, #20
 8026f66:	bd30      	pop	{r4, r5, pc}

08026f68 <BnrgmHealthModelCreate>:
 8026f68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026f6a:	4d0d      	ldr	r5, [pc, #52]	; (8026fa0 <BnrgmHealthModelCreate+0x38>)
 8026f6c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
 8026f70:	2b01      	cmp	r3, #1
 8026f72:	d012      	beq.n	8026f9a <BnrgmHealthModelCreate+0x32>
 8026f74:	2301      	movs	r3, #1
 8026f76:	f885 30f4 	strb.w	r3, [r5, #244]	; 0xf4
 8026f7a:	2400      	movs	r4, #0
 8026f7c:	686b      	ldr	r3, [r5, #4]
 8026f7e:	f885 40f6 	strb.w	r4, [r5, #246]	; 0xf6
 8026f82:	699b      	ldr	r3, [r3, #24]
 8026f84:	4668      	mov	r0, sp
 8026f86:	4798      	blx	r3
 8026f88:	4b06      	ldr	r3, [pc, #24]	; (8026fa4 <BnrgmHealthModelCreate+0x3c>)
 8026f8a:	f8bd 2000 	ldrh.w	r2, [sp]
 8026f8e:	805a      	strh	r2, [r3, #2]
 8026f90:	f885 4f20 	strb.w	r4, [r5, #3872]	; 0xf20
 8026f94:	4620      	mov	r0, r4
 8026f96:	b003      	add	sp, #12
 8026f98:	bd30      	pop	{r4, r5, pc}
 8026f9a:	2002      	movs	r0, #2
 8026f9c:	e7fb      	b.n	8026f96 <BnrgmHealthModelCreate+0x2e>
 8026f9e:	bf00      	nop
 8026fa0:	20000324 	.word	0x20000324
 8026fa4:	20000008 	.word	0x20000008

08026fa8 <MobleLibraryInit>:
 8026fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8026faa:	b085      	sub	sp, #20
 8026fac:	4604      	mov	r4, r0
 8026fae:	f7f5 ff2d 	bl	801ce0c <MobleConfigInit>
 8026fb2:	2801      	cmp	r0, #1
 8026fb4:	d903      	bls.n	8026fbe <MobleLibraryInit+0x16>
 8026fb6:	2602      	movs	r6, #2
 8026fb8:	4630      	mov	r0, r6
 8026fba:	b005      	add	sp, #20
 8026fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8026fbe:	6a22      	ldr	r2, [r4, #32]
 8026fc0:	4d33      	ldr	r5, [pc, #204]	; (8027090 <MobleLibraryInit+0xe8>)
 8026fc2:	6813      	ldr	r3, [r2, #0]
 8026fc4:	8890      	ldrh	r0, [r2, #4]
 8026fc6:	88d1      	ldrh	r1, [r2, #6]
 8026fc8:	f8a5 1a08 	strh.w	r1, [r5, #2568]	; 0xa08
 8026fcc:	4403      	add	r3, r0
 8026fce:	f8c5 3a04 	str.w	r3, [r5, #2564]	; 0xa04
 8026fd2:	68a3      	ldr	r3, [r4, #8]
 8026fd4:	9301      	str	r3, [sp, #4]
 8026fd6:	7ea3      	ldrb	r3, [r4, #26]
 8026fd8:	9300      	str	r3, [sp, #0]
 8026fda:	f505 61de 	add.w	r1, r5, #1776	; 0x6f0
 8026fde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8026fe2:	f205 60b4 	addw	r0, r5, #1716	; 0x6b4
 8026fe6:	f7f9 fb2d 	bl	8020644 <MobleStackInit>
 8026fea:	2801      	cmp	r0, #1
 8026fec:	d8e3      	bhi.n	8026fb6 <MobleLibraryInit+0xe>
 8026fee:	6a23      	ldr	r3, [r4, #32]
 8026ff0:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8026ff4:	8959      	ldrh	r1, [r3, #10]
 8026ff6:	2900      	cmp	r1, #0
 8026ff8:	d03f      	beq.n	802707a <MobleLibraryInit+0xd2>
 8026ffa:	889a      	ldrh	r2, [r3, #4]
 8026ffc:	88de      	ldrh	r6, [r3, #6]
 8026ffe:	4416      	add	r6, r2
 8027000:	681a      	ldr	r2, [r3, #0]
 8027002:	4432      	add	r2, r6
 8027004:	6966      	ldr	r6, [r4, #20]
 8027006:	7937      	ldrb	r7, [r6, #4]
 8027008:	7833      	ldrb	r3, [r6, #0]
 802700a:	9703      	str	r7, [sp, #12]
 802700c:	78f7      	ldrb	r7, [r6, #3]
 802700e:	9702      	str	r7, [sp, #8]
 8027010:	78b7      	ldrb	r7, [r6, #2]
 8027012:	9701      	str	r7, [sp, #4]
 8027014:	7876      	ldrb	r6, [r6, #1]
 8027016:	9600      	str	r6, [sp, #0]
 8027018:	f7f6 f974 	bl	801d304 <BLEMesh_NeighborTableInit>
 802701c:	2801      	cmp	r0, #1
 802701e:	d8ca      	bhi.n	8026fb6 <MobleLibraryInit+0xe>
 8027020:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8027024:	f7f5 fee4 	bl	801cdf0 <MobleApplicationInit>
 8027028:	2801      	cmp	r0, #1
 802702a:	4606      	mov	r6, r0
 802702c:	d8c3      	bhi.n	8026fb6 <MobleLibraryInit+0xe>
 802702e:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8027032:	f7fa f80b 	bl	802104c <MobleConfigModelCreate>
 8027036:	2801      	cmp	r0, #1
 8027038:	d8bd      	bhi.n	8026fb6 <MobleLibraryInit+0xe>
 802703a:	e9d4 2303 	ldrd	r2, r3, [r4, #12]
 802703e:	8b21      	ldrh	r1, [r4, #24]
 8027040:	f8d5 06f0 	ldr.w	r0, [r5, #1776]	; 0x6f0
 8027044:	f7f9 ff38 	bl	8020eb8 <MobleConfigModelInit>
 8027048:	2801      	cmp	r0, #1
 802704a:	d8b4      	bhi.n	8026fb6 <MobleLibraryInit+0xe>
 802704c:	f8d5 36f0 	ldr.w	r3, [r5, #1776]	; 0x6f0
 8027050:	b15b      	cbz	r3, 802706a <MobleLibraryInit+0xc2>
 8027052:	681a      	ldr	r2, [r3, #0]
 8027054:	7812      	ldrb	r2, [r2, #0]
 8027056:	2a01      	cmp	r2, #1
 8027058:	d111      	bne.n	802707e <MobleLibraryInit+0xd6>
 802705a:	4b0e      	ldr	r3, [pc, #56]	; (8027094 <MobleLibraryInit+0xec>)
 802705c:	f893 30bf 	ldrb.w	r3, [r3, #191]	; 0xbf
 8027060:	2b02      	cmp	r3, #2
 8027062:	d010      	beq.n	8027086 <MobleLibraryInit+0xde>
 8027064:	2000      	movs	r0, #0
 8027066:	f7f8 fa65 	bl	801f534 <BnrgmTransmitSetAutoScanState>
 802706a:	f7ff ff7d 	bl	8026f68 <BnrgmHealthModelCreate>
 802706e:	2801      	cmp	r0, #1
 8027070:	d8a1      	bhi.n	8026fb6 <MobleLibraryInit+0xe>
 8027072:	4b08      	ldr	r3, [pc, #32]	; (8027094 <MobleLibraryInit+0xec>)
 8027074:	69e2      	ldr	r2, [r4, #28]
 8027076:	601a      	str	r2, [r3, #0]
 8027078:	e79e      	b.n	8026fb8 <MobleLibraryInit+0x10>
 802707a:	460a      	mov	r2, r1
 802707c:	e7c2      	b.n	8027004 <MobleLibraryInit+0x5c>
 802707e:	f893 31d4 	ldrb.w	r3, [r3, #468]	; 0x1d4
 8027082:	2b01      	cmp	r3, #1
 8027084:	d1e9      	bne.n	802705a <MobleLibraryInit+0xb2>
 8027086:	4b04      	ldr	r3, [pc, #16]	; (8027098 <MobleLibraryInit+0xf0>)
 8027088:	2201      	movs	r2, #1
 802708a:	f883 216a 	strb.w	r2, [r3, #362]	; 0x16a
 802708e:	e7ec      	b.n	802706a <MobleLibraryInit+0xc2>
 8027090:	20002514 	.word	0x20002514
 8027094:	20000324 	.word	0x20000324
 8027098:	20003f64 	.word	0x20003f64

0802709c <BLEMesh_Init>:
 802709c:	b510      	push	{r4, lr}
 802709e:	4604      	mov	r4, r0
 80270a0:	f7f4 f874 	bl	801b18c <mem_alloc_init>
 80270a4:	4620      	mov	r0, r4
 80270a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80270aa:	f7ff bf7d 	b.w	8026fa8 <MobleLibraryInit>

080270ae <BnrgmHealthModelAttentionTimerSet>:
 80270ae:	6803      	ldr	r3, [r0, #0]
 80270b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80270b2:	f883 106e 	strb.w	r1, [r3, #110]	; 0x6e
 80270b6:	f7f0 bd7f 	b.w	8017bb8 <BnrgmHealthModelSetAttentionTimer>
	...

080270bc <MobleProvision_UnprovisionedNode_DeInit>:
 80270bc:	b538      	push	{r3, r4, r5, lr}
 80270be:	4c0e      	ldr	r4, [pc, #56]	; (80270f8 <MobleProvision_UnprovisionedNode_DeInit+0x3c>)
 80270c0:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 80270c4:	f893 31a9 	ldrb.w	r3, [r3, #425]	; 0x1a9
 80270c8:	2b01      	cmp	r3, #1
 80270ca:	d106      	bne.n	80270da <MobleProvision_UnprovisionedNode_DeInit+0x1e>
 80270cc:	f7f2 fe48 	bl	8019d60 <MoblePalCryptoFreeEcc>
 80270d0:	f8d4 3a0c 	ldr.w	r3, [r4, #2572]	; 0xa0c
 80270d4:	2200      	movs	r2, #0
 80270d6:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 80270da:	2500      	movs	r5, #0
 80270dc:	f8d4 0a0c 	ldr.w	r0, [r4, #2572]	; 0xa0c
 80270e0:	f7f3 ff68 	bl	801afb4 <MobleMemFree>
 80270e4:	f8d4 06f0 	ldr.w	r0, [r4, #1776]	; 0x6f0
 80270e8:	f8c4 5a0c 	str.w	r5, [r4, #2572]	; 0xa0c
 80270ec:	4629      	mov	r1, r5
 80270ee:	f7ff ffde 	bl	80270ae <BnrgmHealthModelAttentionTimerSet>
 80270f2:	4628      	mov	r0, r5
 80270f4:	bd38      	pop	{r3, r4, r5, pc}
 80270f6:	bf00      	nop
 80270f8:	20002514 	.word	0x20002514

080270fc <MobleProvisionBearerGatt_DeInit>:
 80270fc:	b508      	push	{r3, lr}
 80270fe:	4906      	ldr	r1, [pc, #24]	; (8027118 <MobleProvisionBearerGatt_DeInit+0x1c>)
 8027100:	f501 6024 	add.w	r0, r1, #2624	; 0xa40
 8027104:	f7f8 f814 	bl	801f130 <MobleProvisionBearerGatt_DeleteTimer>
 8027108:	f601 2044 	addw	r0, r1, #2628	; 0xa44
 802710c:	f7f8 f810 	bl	801f130 <MobleProvisionBearerGatt_DeleteTimer>
 8027110:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8027114:	f7ff bfd2 	b.w	80270bc <MobleProvision_UnprovisionedNode_DeInit>
 8027118:	20002514 	.word	0x20002514

0802711c <MobleProvision_DeInit>:
 802711c:	b908      	cbnz	r0, 8027122 <MobleProvision_DeInit+0x6>
 802711e:	f7f8 be91 	b.w	801fe44 <MobleProvision_ProvisionerNode_DeInit>
 8027122:	f7ff bfcb 	b.w	80270bc <MobleProvision_UnprovisionedNode_DeInit>

08027126 <MoblePBADVCloseLink>:
 8027126:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8027128:	2300      	movs	r3, #0
 802712a:	4604      	mov	r4, r0
 802712c:	f88d 3007 	strb.w	r3, [sp, #7]
 8027130:	b149      	cbz	r1, 8027146 <MoblePBADVCloseLink+0x20>
 8027132:	2503      	movs	r5, #3
 8027134:	2301      	movs	r3, #1
 8027136:	f10d 0207 	add.w	r2, sp, #7
 802713a:	2102      	movs	r1, #2
 802713c:	4620      	mov	r0, r4
 802713e:	f7f3 fdcb 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 8027142:	3d01      	subs	r5, #1
 8027144:	d1f6      	bne.n	8027134 <MoblePBADVCloseLink+0xe>
 8027146:	f894 3020 	ldrb.w	r3, [r4, #32]
 802714a:	3b00      	subs	r3, #0
 802714c:	bf18      	it	ne
 802714e:	2301      	movne	r3, #1
 8027150:	7023      	strb	r3, [r4, #0]
 8027152:	2300      	movs	r3, #0
 8027154:	61e3      	str	r3, [r4, #28]
 8027156:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 802715a:	f8c4 30bc 	str.w	r3, [r4, #188]	; 0xbc
 802715e:	62a3      	str	r3, [r4, #40]	; 0x28
 8027160:	4620      	mov	r0, r4
 8027162:	f7f0 fdf8 	bl	8017d56 <MoblePBADVClearTimers>
 8027166:	f8d4 316c 	ldr.w	r3, [r4, #364]	; 0x16c
 802716a:	b113      	cbz	r3, 8027172 <MoblePBADVCloseLink+0x4c>
 802716c:	f8d4 0170 	ldr.w	r0, [r4, #368]	; 0x170
 8027170:	4798      	blx	r3
 8027172:	f894 315c 	ldrb.w	r3, [r4, #348]	; 0x15c
 8027176:	b91b      	cbnz	r3, 8027180 <MoblePBADVCloseLink+0x5a>
 8027178:	f894 0020 	ldrb.w	r0, [r4, #32]
 802717c:	f7ff ffce 	bl	802711c <MobleProvision_DeInit>
 8027180:	b003      	add	sp, #12
 8027182:	bd30      	pop	{r4, r5, pc}

08027184 <MoblePBADVOnOpenLinkRetransmit>:
 8027184:	b513      	push	{r0, r1, r4, lr}
 8027186:	f8d1 3158 	ldr.w	r3, [r1, #344]	; 0x158
 802718a:	9001      	str	r0, [sp, #4]
 802718c:	2b63      	cmp	r3, #99	; 0x63
 802718e:	460c      	mov	r4, r1
 8027190:	dd05      	ble.n	802719e <MoblePBADVOnOpenLinkRetransmit+0x1a>
 8027192:	2101      	movs	r1, #1
 8027194:	4620      	mov	r0, r4
 8027196:	f7ff ffc6 	bl	8027126 <MoblePBADVCloseLink>
 802719a:	b002      	add	sp, #8
 802719c:	bd10      	pop	{r4, pc}
 802719e:	a801      	add	r0, sp, #4
 80271a0:	f7f0 fdd0 	bl	8017d44 <MoblePBADVEraseTimer>
 80271a4:	f101 0208 	add.w	r2, r1, #8
 80271a8:	2310      	movs	r3, #16
 80271aa:	2100      	movs	r1, #0
 80271ac:	4620      	mov	r0, r4
 80271ae:	f7f3 fd93 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 80271b2:	e7f2      	b.n	802719a <MoblePBADVOnOpenLinkRetransmit+0x16>

080271b4 <MoblePBADVOnTransactionTimeout>:
 80271b4:	4608      	mov	r0, r1
 80271b6:	2100      	movs	r1, #0
 80271b8:	f7ff bfb5 	b.w	8027126 <MoblePBADVCloseLink>

080271bc <MoblePBADVOnLinkIdleTimeout>:
 80271bc:	4608      	mov	r0, r1
 80271be:	2101      	movs	r1, #1
 80271c0:	f7ff bfb1 	b.w	8027126 <MoblePBADVCloseLink>

080271c4 <MoblePBADVStopProvisioning>:
 80271c4:	b508      	push	{r3, lr}
 80271c6:	2101      	movs	r1, #1
 80271c8:	f7ff ffad 	bl	8027126 <MoblePBADVCloseLink>
 80271cc:	2000      	movs	r0, #0
 80271ce:	bd08      	pop	{r3, pc}

080271d0 <MoblePBADVSendTransaction.isra.0>:
 80271d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80271d4:	4604      	mov	r4, r0
 80271d6:	6840      	ldr	r0, [r0, #4]
 80271d8:	f8d0 3158 	ldr.w	r3, [r0, #344]	; 0x158
 80271dc:	2b63      	cmp	r3, #99	; 0x63
 80271de:	b0a2      	sub	sp, #136	; 0x88
 80271e0:	dd4a      	ble.n	8027278 <MoblePBADVSendTransaction.isra.0+0xa8>
 80271e2:	2101      	movs	r1, #1
 80271e4:	b022      	add	sp, #136	; 0x88
 80271e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80271ea:	f7ff bf9c 	b.w	8027126 <MoblePBADVCloseLink>
 80271ee:	89a5      	ldrh	r5, [r4, #12]
 80271f0:	3b01      	subs	r3, #1
 80271f2:	429e      	cmp	r6, r3
 80271f4:	fb06 7105 	mla	r1, r6, r5, r7
 80271f8:	d108      	bne.n	802720c <MoblePBADVSendTransaction.isra.0+0x3c>
 80271fa:	8a23      	ldrh	r3, [r4, #16]
 80271fc:	fbb3 f2f5 	udiv	r2, r3, r5
 8027200:	fb05 3312 	mls	r3, r5, r2, r3
 8027204:	b29b      	uxth	r3, r3
 8027206:	2b00      	cmp	r3, #0
 8027208:	bf18      	it	ne
 802720a:	461d      	movne	r5, r3
 802720c:	1dab      	adds	r3, r5, #6
 802720e:	f88d 3008 	strb.w	r3, [sp, #8]
 8027212:	69c3      	ldr	r3, [r0, #28]
 8027214:	f8cd 300a 	str.w	r3, [sp, #10]
 8027218:	462a      	mov	r2, r5
 802721a:	7823      	ldrb	r3, [r4, #0]
 802721c:	f88d 300e 	strb.w	r3, [sp, #14]
 8027220:	f10d 000f 	add.w	r0, sp, #15
 8027224:	f88d 8009 	strb.w	r8, [sp, #9]
 8027228:	f002 fbd5 	bl	80299d6 <memcpy>
 802722c:	2301      	movs	r3, #1
 802722e:	2114      	movs	r1, #20
 8027230:	e9cd 3100 	strd	r3, r1, [sp]
 8027234:	1dea      	adds	r2, r5, #7
 8027236:	2300      	movs	r3, #0
 8027238:	b2d2      	uxtb	r2, r2
 802723a:	a902      	add	r1, sp, #8
 802723c:	4618      	mov	r0, r3
 802723e:	f7f3 fd35 	bl	801acac <BnrgmTransmitSend>
 8027242:	3601      	adds	r6, #1
 8027244:	7a23      	ldrb	r3, [r4, #8]
 8027246:	6860      	ldr	r0, [r4, #4]
 8027248:	429e      	cmp	r6, r3
 802724a:	dbd0      	blt.n	80271ee <MoblePBADVSendTransaction.isra.0+0x1e>
 802724c:	f8d0 3158 	ldr.w	r3, [r0, #344]	; 0x158
 8027250:	490c      	ldr	r1, [pc, #48]	; (8027284 <MoblePBADVSendTransaction.isra.0+0xb4>)
 8027252:	3301      	adds	r3, #1
 8027254:	f8c0 3158 	str.w	r3, [r0, #344]	; 0x158
 8027258:	4622      	mov	r2, r4
 802725a:	f500 70aa 	add.w	r0, r0, #340	; 0x154
 802725e:	f7f0 fc6f 	bl	8017b40 <MoblePalTimerCreate>
 8027262:	b930      	cbnz	r0, 8027272 <MoblePBADVSendTransaction.isra.0+0xa2>
 8027264:	6863      	ldr	r3, [r4, #4]
 8027266:	f44f 7196 	mov.w	r1, #300	; 0x12c
 802726a:	f8d3 0154 	ldr.w	r0, [r3, #340]	; 0x154
 802726e:	f7f0 fcd1 	bl	8017c14 <MoblePalTimerStartOnce>
 8027272:	b022      	add	sp, #136	; 0x88
 8027274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027278:	2600      	movs	r6, #0
 802727a:	f104 0712 	add.w	r7, r4, #18
 802727e:	f04f 0829 	mov.w	r8, #41	; 0x29
 8027282:	e7df      	b.n	8027244 <MoblePBADVSendTransaction.isra.0+0x74>
 8027284:	08027289 	.word	0x08027289

08027288 <MoblePBADVOnRetransmit>:
 8027288:	b507      	push	{r0, r1, r2, lr}
 802728a:	9001      	str	r0, [sp, #4]
 802728c:	a801      	add	r0, sp, #4
 802728e:	f7f0 fd59 	bl	8017d44 <MoblePBADVEraseTimer>
 8027292:	4608      	mov	r0, r1
 8027294:	f7ff ff9c 	bl	80271d0 <MoblePBADVSendTransaction.isra.0>
 8027298:	b003      	add	sp, #12
 802729a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080272a0 <MoblePBADVFireProvisionStateMach>:
 80272a0:	b530      	push	{r4, r5, lr}
 80272a2:	f890 5020 	ldrb.w	r5, [r0, #32]
 80272a6:	b0a7      	sub	sp, #156	; 0x9c
 80272a8:	4604      	mov	r4, r0
 80272aa:	4628      	mov	r0, r5
 80272ac:	f7f9 f844 	bl	8020338 <MobleProvision_GetNextOperation>
 80272b0:	b118      	cbz	r0, 80272ba <MoblePBADVFireProvisionStateMach+0x1a>
 80272b2:	2802      	cmp	r0, #2
 80272b4:	d019      	beq.n	80272ea <MoblePBADVFireProvisionStateMach+0x4a>
 80272b6:	b027      	add	sp, #156	; 0x9c
 80272b8:	bd30      	pop	{r4, r5, pc}
 80272ba:	4628      	mov	r0, r5
 80272bc:	f7f9 f84f 	bl	802035e <MobleProvision_IsCompleted>
 80272c0:	2800      	cmp	r0, #0
 80272c2:	d0f8      	beq.n	80272b6 <MoblePBADVFireProvisionStateMach+0x16>
 80272c4:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 80272c8:	9003      	str	r0, [sp, #12]
 80272ca:	491f      	ldr	r1, [pc, #124]	; (8027348 <MoblePBADVFireProvisionStateMach+0xa8>)
 80272cc:	f7f0 fd3a 	bl	8017d44 <MoblePBADVEraseTimer>
 80272d0:	9803      	ldr	r0, [sp, #12]
 80272d2:	4622      	mov	r2, r4
 80272d4:	f7f0 fc34 	bl	8017b40 <MoblePalTimerCreate>
 80272d8:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
 80272dc:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80272e0:	b027      	add	sp, #156	; 0x9c
 80272e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80272e6:	f7f0 bc95 	b.w	8017c14 <MoblePalTimerStartOnce>
 80272ea:	ab05      	add	r3, sp, #20
 80272ec:	2280      	movs	r2, #128	; 0x80
 80272ee:	a906      	add	r1, sp, #24
 80272f0:	4628      	mov	r0, r5
 80272f2:	f7f9 f826 	bl	8020342 <MobleProvision_GetOutputMessage>
 80272f6:	b118      	cbz	r0, 8027300 <MoblePBADVFireProvisionStateMach+0x60>
 80272f8:	2101      	movs	r1, #1
 80272fa:	4620      	mov	r0, r4
 80272fc:	f7ff ff13 	bl	8027126 <MoblePBADVCloseLink>
 8027300:	2501      	movs	r5, #1
 8027302:	69a2      	ldr	r2, [r4, #24]
 8027304:	9905      	ldr	r1, [sp, #20]
 8027306:	9500      	str	r5, [sp, #0]
 8027308:	f104 03c0 	add.w	r3, r4, #192	; 0xc0
 802730c:	a806      	add	r0, sp, #24
 802730e:	f7f7 fc05 	bl	801eb1c <MobleSARSplit>
 8027312:	b118      	cbz	r0, 802731c <MoblePBADVFireProvisionStateMach+0x7c>
 8027314:	4629      	mov	r1, r5
 8027316:	4620      	mov	r0, r4
 8027318:	f7ff ff05 	bl	8027126 <MoblePBADVCloseLink>
 802731c:	2300      	movs	r3, #0
 802731e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
 8027322:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8027326:	f8c4 40bc 	str.w	r4, [r4, #188]	; 0xbc
 802732a:	f7ff ff51 	bl	80271d0 <MoblePBADVSendTransaction.isra.0>
 802732e:	f8d4 00bc 	ldr.w	r0, [r4, #188]	; 0xbc
 8027332:	f7f0 fc73 	bl	8017c1c <MoblePBADVRaiseTransTimeoutTimer>
 8027336:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 802733a:	f7f0 fd03 	bl	8017d44 <MoblePBADVEraseTimer>
 802733e:	4620      	mov	r0, r4
 8027340:	f7f0 fc7e 	bl	8017c40 <MoblePBADVRaiseLinkIdleTimer>
 8027344:	e7b7      	b.n	80272b6 <MoblePBADVFireProvisionStateMach+0x16>
 8027346:	bf00      	nop
 8027348:	080271bd 	.word	0x080271bd

0802734c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>:
 802734c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8027350:	4eb1      	ldr	r6, [pc, #708]	; (8027618 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2cc>)
 8027352:	b0bc      	sub	sp, #240	; 0xf0
 8027354:	4604      	mov	r4, r0
 8027356:	460f      	mov	r7, r1
 8027358:	4690      	mov	r8, r2
 802735a:	f7e0 fd83 	bl	8007e64 <HAL_GetTick>
 802735e:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 8027362:	f8d5 31a4 	ldr.w	r3, [r5, #420]	; 0x1a4
 8027366:	1ac0      	subs	r0, r0, r3
 8027368:	4bac      	ldr	r3, [pc, #688]	; (802761c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2d0>)
 802736a:	4298      	cmp	r0, r3
 802736c:	f200 8301 	bhi.w	8027972 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x626>
 8027370:	2c09      	cmp	r4, #9
 8027372:	d901      	bls.n	8027378 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2c>
 8027374:	2402      	movs	r4, #2
 8027376:	e058      	b.n	802742a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 8027378:	f7e0 fd74 	bl	8007e64 <HAL_GetTick>
 802737c:	f8c5 01a4 	str.w	r0, [r5, #420]	; 0x1a4
 8027380:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 8027384:	f895 9044 	ldrb.w	r9, [r5, #68]	; 0x44
 8027388:	f1b9 0f07 	cmp.w	r9, #7
 802738c:	f200 82eb 	bhi.w	8027966 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x61a>
 8027390:	e8df f019 	tbh	[pc, r9, lsl #1]
 8027394:	003d0008 	.word	0x003d0008
 8027398:	02e90146 	.word	0x02e90146
 802739c:	020601b6 	.word	0x020601b6
 80273a0:	02ed02ed 	.word	0x02ed02ed
 80273a4:	f895 0045 	ldrb.w	r0, [r5, #69]	; 0x45
 80273a8:	4304      	orrs	r4, r0
 80273aa:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80273ae:	f040 82de 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80273b2:	f1b8 0f01 	cmp.w	r8, #1
 80273b6:	f040 82da 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80273ba:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 80273be:	681a      	ldr	r2, [r3, #0]
 80273c0:	7812      	ldrb	r2, [r2, #0]
 80273c2:	2a01      	cmp	r2, #1
 80273c4:	f000 82d3 	beq.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80273c8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80273cc:	b10b      	cbz	r3, 80273d2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x86>
 80273ce:	7838      	ldrb	r0, [r7, #0]
 80273d0:	4798      	blx	r3
 80273d2:	7839      	ldrb	r1, [r7, #0]
 80273d4:	f8d6 06f0 	ldr.w	r0, [r6, #1776]	; 0x6f0
 80273d8:	f7ff fe69 	bl	80270ae <BnrgmHealthModelAttentionTimerSet>
 80273dc:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 80273e0:	783a      	ldrb	r2, [r7, #0]
 80273e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80273e6:	f8d3 2046 	ldr.w	r2, [r3, #70]	; 0x46
 80273ea:	f8c3 2052 	str.w	r2, [r3, #82]	; 0x52
 80273ee:	f8d3 204a 	ldr.w	r2, [r3, #74]	; 0x4a
 80273f2:	f8c3 2056 	str.w	r2, [r3, #86]	; 0x56
 80273f6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80273fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 80273fe:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8027402:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8027406:	4620      	mov	r0, r4
 8027408:	b03c      	add	sp, #240	; 0xf0
 802740a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802740e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 8027412:	2b00      	cmp	r3, #0
 8027414:	f040 809e 	bne.w	8027554 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x208>
 8027418:	2c02      	cmp	r4, #2
 802741a:	f040 82a8 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802741e:	f1b8 0f05 	cmp.w	r8, #5
 8027422:	f040 82a4 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027426:	783b      	ldrb	r3, [r7, #0]
 8027428:	b113      	cbz	r3, 8027430 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xe4>
 802742a:	f885 41a8 	strb.w	r4, [r5, #424]	; 0x1a8
 802742e:	e7ea      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027430:	787b      	ldrb	r3, [r7, #1]
 8027432:	2b01      	cmp	r3, #1
 8027434:	d805      	bhi.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8027436:	f8d6 86f0 	ldr.w	r8, [r6, #1776]	; 0x6f0
 802743a:	f898 21fe 	ldrb.w	r2, [r8, #510]	; 0x1fe
 802743e:	429a      	cmp	r2, r3
 8027440:	d203      	bcs.n	802744a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xfe>
 8027442:	2302      	movs	r3, #2
 8027444:	f885 31a8 	strb.w	r3, [r5, #424]	; 0x1a8
 8027448:	e7dd      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 802744a:	78b9      	ldrb	r1, [r7, #2]
 802744c:	2903      	cmp	r1, #3
 802744e:	d8ec      	bhi.n	802742a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xde>
 8027450:	2901      	cmp	r1, #1
 8027452:	78fa      	ldrb	r2, [r7, #3]
 8027454:	d815      	bhi.n	8027482 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x136>
 8027456:	2a00      	cmp	r2, #0
 8027458:	d1f3      	bne.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802745a:	793a      	ldrb	r2, [r7, #4]
 802745c:	2a00      	cmp	r2, #0
 802745e:	d1f0      	bne.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8027460:	f888 31fa 	strb.w	r3, [r8, #506]	; 0x1fa
 8027464:	78bb      	ldrb	r3, [r7, #2]
 8027466:	f888 31fb 	strb.w	r3, [r8, #507]	; 0x1fb
 802746a:	78fa      	ldrb	r2, [r7, #3]
 802746c:	f888 21fc 	strb.w	r2, [r8, #508]	; 0x1fc
 8027470:	7939      	ldrb	r1, [r7, #4]
 8027472:	f888 11fd 	strb.w	r1, [r8, #509]	; 0x1fd
 8027476:	2b03      	cmp	r3, #3
 8027478:	d82b      	bhi.n	80274d2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x186>
 802747a:	e8df f003 	tbb	[pc, r3]
 802747e:	1359      	.short	0x1359
 8027480:	4c19      	.short	0x4c19
 8027482:	2902      	cmp	r1, #2
 8027484:	d107      	bne.n	8027496 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x14a>
 8027486:	2a04      	cmp	r2, #4
 8027488:	f63f af74 	bhi.w	8027374 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 802748c:	793a      	ldrb	r2, [r7, #4]
 802748e:	3a01      	subs	r2, #1
 8027490:	2a07      	cmp	r2, #7
 8027492:	d9e5      	bls.n	8027460 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 8027494:	e76e      	b.n	8027374 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28>
 8027496:	2a03      	cmp	r2, #3
 8027498:	d8d3      	bhi.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802749a:	793a      	ldrb	r2, [r7, #4]
 802749c:	3a01      	subs	r2, #1
 802749e:	2a07      	cmp	r2, #7
 80274a0:	d9de      	bls.n	8027460 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x114>
 80274a2:	e7ce      	b.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 80274a4:	f898 31ff 	ldrb.w	r3, [r8, #511]	; 0x1ff
 80274a8:	f013 0f01 	tst.w	r3, #1
 80274ac:	d111      	bne.n	80274d2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x186>
 80274ae:	e7c8      	b.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 80274b0:	2a04      	cmp	r2, #4
 80274b2:	d904      	bls.n	80274be <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x172>
 80274b4:	2202      	movs	r2, #2
 80274b6:	f885 21a8 	strb.w	r2, [r5, #424]	; 0x1a8
 80274ba:	461c      	mov	r4, r3
 80274bc:	e7a3      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80274be:	f898 0206 	ldrb.w	r0, [r8, #518]	; 0x206
 80274c2:	4288      	cmp	r0, r1
 80274c4:	d3f6      	bcc.n	80274b4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x168>
 80274c6:	f8b8 1202 	ldrh.w	r1, [r8, #514]	; 0x202
 80274ca:	fa41 f202 	asr.w	r2, r1, r2
 80274ce:	07d1      	lsls	r1, r2, #31
 80274d0:	d5f0      	bpl.n	80274b4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x168>
 80274d2:	2205      	movs	r2, #5
 80274d4:	4639      	mov	r1, r7
 80274d6:	f105 005d 	add.w	r0, r5, #93	; 0x5d
 80274da:	f002 f9d1 	bl	8029880 <memmove>
 80274de:	f898 31fa 	ldrb.w	r3, [r8, #506]	; 0x1fa
 80274e2:	bb53      	cbnz	r3, 802753a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1ee>
 80274e4:	461d      	mov	r5, r3
 80274e6:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	; 0xa0c
 80274ea:	f7f0 fdc7 	bl	801807c <MoblePalBluetoothRandom>
 80274ee:	442f      	add	r7, r5
 80274f0:	3501      	adds	r5, #1
 80274f2:	2d20      	cmp	r5, #32
 80274f4:	f887 0142 	strb.w	r0, [r7, #322]	; 0x142
 80274f8:	d1f5      	bne.n	80274e6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x19a>
 80274fa:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	; 0xa0c
 80274fe:	2120      	movs	r1, #32
 8027500:	f500 70a1 	add.w	r0, r0, #322	; 0x142
 8027504:	f7f2 fc02 	bl	8019d0c <MoblePalCryptoInitEcc>
 8027508:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 802750c:	b1e8      	cbz	r0, 802754a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1fe>
 802750e:	2202      	movs	r2, #2
 8027510:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 8027514:	e777      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027516:	2a03      	cmp	r2, #3
 8027518:	d893      	bhi.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802751a:	f898 3207 	ldrb.w	r3, [r8, #519]	; 0x207
 802751e:	428b      	cmp	r3, r1
 8027520:	d38f      	bcc.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 8027522:	f8b8 3204 	ldrh.w	r3, [r8, #516]	; 0x204
 8027526:	fa43 f202 	asr.w	r2, r3, r2
 802752a:	f012 0f01 	tst.w	r2, #1
 802752e:	e7bd      	b.n	80274ac <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x160>
 8027530:	f898 3200 	ldrb.w	r3, [r8, #512]	; 0x200
 8027534:	2b00      	cmp	r3, #0
 8027536:	d1cc      	bne.n	80274d2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x186>
 8027538:	e783      	b.n	8027442 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xf6>
 802753a:	2220      	movs	r2, #32
 802753c:	f508 7112 	add.w	r1, r8, #584	; 0x248
 8027540:	f505 70a1 	add.w	r0, r5, #322	; 0x142
 8027544:	f002 f99c 	bl	8029880 <memmove>
 8027548:	e7d7      	b.n	80274fa <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x1ae>
 802754a:	2201      	movs	r2, #1
 802754c:	f883 21a9 	strb.w	r2, [r3, #425]	; 0x1a9
 8027550:	2400      	movs	r4, #0
 8027552:	e758      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027554:	2b01      	cmp	r3, #1
 8027556:	f040 820a 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802755a:	2c03      	cmp	r4, #3
 802755c:	f040 8207 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027560:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
 8027564:	f040 8203 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027568:	f8d6 16f0 	ldr.w	r1, [r6, #1776]	; 0x6f0
 802756c:	f891 31fa 	ldrb.w	r3, [r1, #506]	; 0x1fa
 8027570:	b32b      	cbz	r3, 80275be <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x272>
 8027572:	4642      	mov	r2, r8
 8027574:	f501 7102 	add.w	r1, r1, #520	; 0x208
 8027578:	f505 70b1 	add.w	r0, r5, #354	; 0x162
 802757c:	f002 f980 	bl	8029880 <memmove>
 8027580:	2240      	movs	r2, #64	; 0x40
 8027582:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	; 0xa0c
 8027586:	4639      	mov	r1, r7
 8027588:	f002 f97a 	bl	8029880 <memmove>
 802758c:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	; 0xa0c
 8027590:	aa2c      	add	r2, sp, #176	; 0xb0
 8027592:	f504 73b1 	add.w	r3, r4, #354	; 0x162
 8027596:	f504 7ed1 	add.w	lr, r4, #418	; 0x1a2
 802759a:	4615      	mov	r5, r2
 802759c:	6818      	ldr	r0, [r3, #0]
 802759e:	6859      	ldr	r1, [r3, #4]
 80275a0:	4694      	mov	ip, r2
 80275a2:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80275a6:	3308      	adds	r3, #8
 80275a8:	4573      	cmp	r3, lr
 80275aa:	4662      	mov	r2, ip
 80275ac:	d1f6      	bne.n	802759c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x250>
 80275ae:	4620      	mov	r0, r4
 80275b0:	f7f2 fbc0 	bl	8019d34 <MoblePalCryptoGetEccGenSecret>
 80275b4:	6420      	str	r0, [r4, #64]	; 0x40
 80275b6:	b9d0      	cbnz	r0, 80275ee <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2a2>
 80275b8:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 80275bc:	e005      	b.n	80275ca <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x27e>
 80275be:	a81c      	add	r0, sp, #112	; 0x70
 80275c0:	f7f1 fcb0 	bl	8018f24 <MoblePalCryptoGetEccPublicKey.part.0>
 80275c4:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 80275c8:	b118      	cbz	r0, 80275d2 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x286>
 80275ca:	2402      	movs	r4, #2
 80275cc:	f883 41a8 	strb.w	r4, [r3, #424]	; 0x1a8
 80275d0:	e719      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80275d2:	aa1c      	add	r2, sp, #112	; 0x70
 80275d4:	f503 73b1 	add.w	r3, r3, #354	; 0x162
 80275d8:	ad2c      	add	r5, sp, #176	; 0xb0
 80275da:	4614      	mov	r4, r2
 80275dc:	cc03      	ldmia	r4!, {r0, r1}
 80275de:	42ac      	cmp	r4, r5
 80275e0:	6018      	str	r0, [r3, #0]
 80275e2:	6059      	str	r1, [r3, #4]
 80275e4:	4622      	mov	r2, r4
 80275e6:	f103 0308 	add.w	r3, r3, #8
 80275ea:	d1f6      	bne.n	80275da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x28e>
 80275ec:	e7c8      	b.n	8027580 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x234>
 80275ee:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	; 0xa0c
 80275f2:	2240      	movs	r2, #64	; 0x40
 80275f4:	f104 0062 	add.w	r0, r4, #98	; 0x62
 80275f8:	4639      	mov	r1, r7
 80275fa:	f002 f941 	bl	8029880 <memmove>
 80275fe:	f104 03a2 	add.w	r3, r4, #162	; 0xa2
 8027602:	ac3c      	add	r4, sp, #240	; 0xf0
 8027604:	462a      	mov	r2, r5
 8027606:	ca03      	ldmia	r2!, {r0, r1}
 8027608:	42a2      	cmp	r2, r4
 802760a:	6018      	str	r0, [r3, #0]
 802760c:	6059      	str	r1, [r3, #4]
 802760e:	4615      	mov	r5, r2
 8027610:	f103 0308 	add.w	r3, r3, #8
 8027614:	d1f6      	bne.n	8027604 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2b8>
 8027616:	e79b      	b.n	8027550 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x204>
 8027618:	20002514 	.word	0x20002514
 802761c:	0001d4c0 	.word	0x0001d4c0
 8027620:	f895 a045 	ldrb.w	sl, [r5, #69]	; 0x45
 8027624:	f1ba 0f00 	cmp.w	sl, #0
 8027628:	f040 81a1 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802762c:	2c05      	cmp	r4, #5
 802762e:	f040 819e 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027632:	f1b8 0f10 	cmp.w	r8, #16
 8027636:	f040 819a 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802763a:	4628      	mov	r0, r5
 802763c:	f7f2 fb7a 	bl	8019d34 <MoblePalCryptoGetEccGenSecret>
 8027640:	6428      	str	r0, [r5, #64]	; 0x40
 8027642:	b930      	cbnz	r0, 8027652 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x306>
 8027644:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 8027648:	2202      	movs	r2, #2
 802764a:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 802764e:	464c      	mov	r4, r9
 8027650:	e6d9      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027652:	f8d6 4a0c 	ldr.w	r4, [r6, #2572]	; 0xa0c
 8027656:	4642      	mov	r2, r8
 8027658:	4639      	mov	r1, r7
 802765a:	f504 7089 	add.w	r0, r4, #274	; 0x112
 802765e:	f002 f90f 	bl	8029880 <memmove>
 8027662:	f104 03e2 	add.w	r3, r4, #226	; 0xe2
 8027666:	2291      	movs	r2, #145	; 0x91
 8027668:	f104 0151 	add.w	r1, r4, #81	; 0x51
 802766c:	a818      	add	r0, sp, #96	; 0x60
 802766e:	e9cd aa18 	strd	sl, sl, [sp, #96]	; 0x60
 8027672:	e9cd aa1a 	strd	sl, sl, [sp, #104]	; 0x68
 8027676:	f7f0 ffdb 	bl	8018630 <BAES_CmacCompute>
 802767a:	2304      	movs	r3, #4
 802767c:	f8d6 0a0c 	ldr.w	r0, [r6, #2572]	; 0xa0c
 8027680:	9302      	str	r3, [sp, #8]
 8027682:	4bbd      	ldr	r3, [pc, #756]	; (8027978 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x62c>)
 8027684:	e9cd 8300 	strd	r8, r3, [sp]
 8027688:	2220      	movs	r2, #32
 802768a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 802768c:	f100 03e2 	add.w	r3, r0, #226	; 0xe2
 8027690:	30f2      	adds	r0, #242	; 0xf2
 8027692:	f7f1 f89b 	bl	80187cc <MoblePalCryptoK1.part.0>
 8027696:	2800      	cmp	r0, #0
 8027698:	d1d4      	bne.n	8027644 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x2f8>
 802769a:	4604      	mov	r4, r0
 802769c:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 80276a0:	f7f0 fcec 	bl	801807c <MoblePalBluetoothRandom>
 80276a4:	4425      	add	r5, r4
 80276a6:	3401      	adds	r4, #1
 80276a8:	2c10      	cmp	r4, #16
 80276aa:	f885 0122 	strb.w	r0, [r5, #290]	; 0x122
 80276ae:	d1f5      	bne.n	802769c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x350>
 80276b0:	ac1c      	add	r4, sp, #112	; 0x70
 80276b2:	2300      	movs	r3, #0
 80276b4:	4620      	mov	r0, r4
 80276b6:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
 80276ba:	e9cd 331e 	strd	r3, r3, [sp, #120]	; 0x78
 80276be:	f7f7 fcef 	bl	801f0a0 <MobleProvisionGenerateAuthValue>
 80276c2:	f8d6 5a0c 	ldr.w	r5, [r6, #2572]	; 0xa0c
 80276c6:	ae2c      	add	r6, sp, #176	; 0xb0
 80276c8:	f505 7391 	add.w	r3, r5, #290	; 0x122
 80276cc:	f505 7799 	add.w	r7, r5, #306	; 0x132
 80276d0:	6818      	ldr	r0, [r3, #0]
 80276d2:	6859      	ldr	r1, [r3, #4]
 80276d4:	4632      	mov	r2, r6
 80276d6:	c203      	stmia	r2!, {r0, r1}
 80276d8:	3308      	adds	r3, #8
 80276da:	42bb      	cmp	r3, r7
 80276dc:	4616      	mov	r6, r2
 80276de:	d1f7      	bne.n	80276d0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x384>
 80276e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80276e4:	ae30      	add	r6, sp, #192	; 0xc0
 80276e6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 80276ea:	f505 7381 	add.w	r3, r5, #258	; 0x102
 80276ee:	2220      	movs	r2, #32
 80276f0:	a92c      	add	r1, sp, #176	; 0xb0
 80276f2:	f105 00f2 	add.w	r0, r5, #242	; 0xf2
 80276f6:	f7f0 ff9b 	bl	8018630 <BAES_CmacCompute>
 80276fa:	f04f 0900 	mov.w	r9, #0
 80276fe:	e7a6      	b.n	802764e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x302>
 8027700:	f895 9045 	ldrb.w	r9, [r5, #69]	; 0x45
 8027704:	f1b9 0f00 	cmp.w	r9, #0
 8027708:	f040 8131 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802770c:	2c06      	cmp	r4, #6
 802770e:	f040 812e 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 8027712:	f1b8 0f10 	cmp.w	r8, #16
 8027716:	f040 812a 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 802771a:	4639      	mov	r1, r7
 802771c:	4642      	mov	r2, r8
 802771e:	f505 7099 	add.w	r0, r5, #306	; 0x132
 8027722:	ac1c      	add	r4, sp, #112	; 0x70
 8027724:	f002 f8ac 	bl	8029880 <memmove>
 8027728:	4620      	mov	r0, r4
 802772a:	e9cd 9918 	strd	r9, r9, [sp, #96]	; 0x60
 802772e:	e9cd 991a 	strd	r9, r9, [sp, #104]	; 0x68
 8027732:	e9cd 991c 	strd	r9, r9, [sp, #112]	; 0x70
 8027736:	e9cd 991e 	strd	r9, r9, [sp, #120]	; 0x78
 802773a:	f7f7 fcb1 	bl	801f0a0 <MobleProvisionGenerateAuthValue>
 802773e:	f8d6 7a0c 	ldr.w	r7, [r6, #2572]	; 0xa0c
 8027742:	ad2c      	add	r5, sp, #176	; 0xb0
 8027744:	f507 7399 	add.w	r3, r7, #306	; 0x132
 8027748:	f507 7ca1 	add.w	ip, r7, #322	; 0x142
 802774c:	6818      	ldr	r0, [r3, #0]
 802774e:	6859      	ldr	r1, [r3, #4]
 8027750:	462a      	mov	r2, r5
 8027752:	c203      	stmia	r2!, {r0, r1}
 8027754:	3308      	adds	r3, #8
 8027756:	4563      	cmp	r3, ip
 8027758:	4615      	mov	r5, r2
 802775a:	d1f7      	bne.n	802774c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x400>
 802775c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8027760:	ad30      	add	r5, sp, #192	; 0xc0
 8027762:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8027766:	ab18      	add	r3, sp, #96	; 0x60
 8027768:	2220      	movs	r2, #32
 802776a:	a92c      	add	r1, sp, #176	; 0xb0
 802776c:	f107 00f2 	add.w	r0, r7, #242	; 0xf2
 8027770:	f7f0 ff5e 	bl	8018630 <BAES_CmacCompute>
 8027774:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 8027778:	ab18      	add	r3, sp, #96	; 0x60
 802777a:	f501 7289 	add.w	r2, r1, #274	; 0x112
 802777e:	f501 7091 	add.w	r0, r1, #290	; 0x122
 8027782:	f812 5b01 	ldrb.w	r5, [r2], #1
 8027786:	f813 4b01 	ldrb.w	r4, [r3], #1
 802778a:	42a5      	cmp	r5, r4
 802778c:	d005      	beq.n	802779a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x44e>
 802778e:	2304      	movs	r3, #4
 8027790:	f881 31a8 	strb.w	r3, [r1, #424]	; 0x1a8
 8027794:	f04f 0902 	mov.w	r9, #2
 8027798:	e759      	b.n	802764e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x302>
 802779a:	4282      	cmp	r2, r0
 802779c:	d1f1      	bne.n	8027782 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x436>
 802779e:	e756      	b.n	802764e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x302>
 80277a0:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
 80277a4:	2b00      	cmp	r3, #0
 80277a6:	f040 80e2 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80277aa:	2c07      	cmp	r4, #7
 80277ac:	f040 80df 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80277b0:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
 80277b4:	f040 80db 	bne.w	802796e <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x622>
 80277b8:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80277bc:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80277c0:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
 80277c4:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 80277c8:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 80277cc:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
 80277d0:	ac2c      	add	r4, sp, #176	; 0xb0
 80277d2:	f105 03e2 	add.w	r3, r5, #226	; 0xe2
 80277d6:	f105 0cf2 	add.w	ip, r5, #242	; 0xf2
 80277da:	6818      	ldr	r0, [r3, #0]
 80277dc:	6859      	ldr	r1, [r3, #4]
 80277de:	4622      	mov	r2, r4
 80277e0:	c203      	stmia	r2!, {r0, r1}
 80277e2:	3308      	adds	r3, #8
 80277e4:	4563      	cmp	r3, ip
 80277e6:	4614      	mov	r4, r2
 80277e8:	d1f7      	bne.n	80277da <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x48e>
 80277ea:	f505 7399 	add.w	r3, r5, #306	; 0x132
 80277ee:	ac30      	add	r4, sp, #192	; 0xc0
 80277f0:	f505 7ea1 	add.w	lr, r5, #322	; 0x142
 80277f4:	469c      	mov	ip, r3
 80277f6:	6818      	ldr	r0, [r3, #0]
 80277f8:	6859      	ldr	r1, [r3, #4]
 80277fa:	4622      	mov	r2, r4
 80277fc:	c203      	stmia	r2!, {r0, r1}
 80277fe:	3308      	adds	r3, #8
 8027800:	4573      	cmp	r3, lr
 8027802:	4614      	mov	r4, r2
 8027804:	d1f7      	bne.n	80277f6 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4aa>
 8027806:	f505 7591 	add.w	r5, r5, #290	; 0x122
 802780a:	aa34      	add	r2, sp, #208	; 0xd0
 802780c:	6828      	ldr	r0, [r5, #0]
 802780e:	6869      	ldr	r1, [r5, #4]
 8027810:	4613      	mov	r3, r2
 8027812:	c303      	stmia	r3!, {r0, r1}
 8027814:	3508      	adds	r5, #8
 8027816:	4565      	cmp	r5, ip
 8027818:	461a      	mov	r2, r3
 802781a:	d1f7      	bne.n	802780c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x4c0>
 802781c:	ab14      	add	r3, sp, #80	; 0x50
 802781e:	2230      	movs	r2, #48	; 0x30
 8027820:	a92c      	add	r1, sp, #176	; 0xb0
 8027822:	a810      	add	r0, sp, #64	; 0x40
 8027824:	f7f0 ff04 	bl	8018630 <BAES_CmacCompute>
 8027828:	f04f 0804 	mov.w	r8, #4
 802782c:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 8027830:	4b52      	ldr	r3, [pc, #328]	; (802797c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x630>)
 8027832:	9301      	str	r3, [sp, #4]
 8027834:	2510      	movs	r5, #16
 8027836:	f8cd 8008 	str.w	r8, [sp, #8]
 802783a:	9500      	str	r5, [sp, #0]
 802783c:	2220      	movs	r2, #32
 802783e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8027840:	ab14      	add	r3, sp, #80	; 0x50
 8027842:	eb0d 0002 	add.w	r0, sp, r2
 8027846:	f7f0 ffc1 	bl	80187cc <MoblePalCryptoK1.part.0>
 802784a:	2800      	cmp	r0, #0
 802784c:	f47f aeb4 	bne.w	80275b8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26c>
 8027850:	4b4b      	ldr	r3, [pc, #300]	; (8027980 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x634>)
 8027852:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 8027856:	f8cd 8008 	str.w	r8, [sp, #8]
 802785a:	e9cd 5300 	strd	r5, r3, [sp]
 802785e:	2220      	movs	r2, #32
 8027860:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8027862:	ab14      	add	r3, sp, #80	; 0x50
 8027864:	a80c      	add	r0, sp, #48	; 0x30
 8027866:	f7f0 ffb1 	bl	80187cc <MoblePalCryptoK1.part.0>
 802786a:	4604      	mov	r4, r0
 802786c:	2800      	cmp	r0, #0
 802786e:	f47f aea3 	bne.w	80275b8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26c>
 8027872:	2319      	movs	r3, #25
 8027874:	e9cd 7302 	strd	r7, r3, [sp, #8]
 8027878:	2308      	movs	r3, #8
 802787a:	3719      	adds	r7, #25
 802787c:	e9cd 0004 	strd	r0, r0, [sp, #16]
 8027880:	9301      	str	r3, [sp, #4]
 8027882:	9700      	str	r7, [sp, #0]
 8027884:	230d      	movs	r3, #13
 8027886:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 802788a:	a908      	add	r1, sp, #32
 802788c:	a81c      	add	r0, sp, #112	; 0x70
 802788e:	f7f2 f873 	bl	8019978 <MoblePalCryptoAesCcmDecrypt>
 8027892:	2801      	cmp	r0, #1
 8027894:	d906      	bls.n	80278a4 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x558>
 8027896:	f8d6 3a0c 	ldr.w	r3, [r6, #2572]	; 0xa0c
 802789a:	2206      	movs	r2, #6
 802789c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 80278a0:	2402      	movs	r4, #2
 80278a2:	e5b0      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80278a4:	4b37      	ldr	r3, [pc, #220]	; (8027984 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x638>)
 80278a6:	f8d6 1a0c 	ldr.w	r1, [r6, #2572]	; 0xa0c
 80278aa:	f8cd 8008 	str.w	r8, [sp, #8]
 80278ae:	e9cd 5300 	strd	r5, r3, [sp]
 80278b2:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 80278b6:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
 80278ba:	ab14      	add	r3, sp, #80	; 0x50
 80278bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80278be:	2220      	movs	r2, #32
 80278c0:	a818      	add	r0, sp, #96	; 0x60
 80278c2:	f7f0 ff83 	bl	80187cc <MoblePalCryptoK1.part.0>
 80278c6:	2801      	cmp	r0, #1
 80278c8:	f63f ae76 	bhi.w	80275b8 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x26c>
 80278cc:	f89d 5080 	ldrb.w	r5, [sp, #128]	; 0x80
 80278d0:	022d      	lsls	r5, r5, #8
 80278d2:	f405 6370 	and.w	r3, r5, #3840	; 0xf00
 80278d6:	f89d 5081 	ldrb.w	r5, [sp, #129]	; 0x81
 80278da:	a818      	add	r0, sp, #96	; 0x60
 80278dc:	441d      	add	r5, r3
 80278de:	f7f1 fcab 	bl	8019238 <MoblePalCryptoSetDevKey>
 80278e2:	4629      	mov	r1, r5
 80278e4:	a81c      	add	r0, sp, #112	; 0x70
 80278e6:	f7f2 f937 	bl	8019b58 <MoblePalCryptoSetNetworkKey>
 80278ea:	2801      	cmp	r0, #1
 80278ec:	4604      	mov	r4, r0
 80278ee:	f63f ad8a 	bhi.w	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 80278f2:	2101      	movs	r1, #1
 80278f4:	4628      	mov	r0, r5
 80278f6:	f7f1 fbb1 	bl	801905c <MoblePalCryptoSetNodeIdntyState>
 80278fa:	f89d 7082 	ldrb.w	r7, [sp, #130]	; 0x82
 80278fe:	07fa      	lsls	r2, r7, #31
 8027900:	d50b      	bpl.n	802791a <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x5ce>
 8027902:	4628      	mov	r0, r5
 8027904:	f7f2 feee 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 8027908:	4629      	mov	r1, r5
 802790a:	4604      	mov	r4, r0
 802790c:	a81c      	add	r0, sp, #112	; 0x70
 802790e:	f7f2 f8b9 	bl	8019a84 <MoblePalCryptoSetNewNetworkKey>
 8027912:	b2e1      	uxtb	r1, r4
 8027914:	2002      	movs	r0, #2
 8027916:	f7f9 fee9 	bl	80216ec <ModelConfigUpdateKRState>
 802791a:	07bb      	lsls	r3, r7, #30
 802791c:	bf42      	ittt	mi
 802791e:	4b1a      	ldrmi	r3, [pc, #104]	; (8027988 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x63c>)
 8027920:	2201      	movmi	r2, #1
 8027922:	f883 265c 	strbmi.w	r2, [r3, #1628]	; 0x65c
 8027926:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 802792a:	681a      	ldr	r2, [r3, #0]
 802792c:	2104      	movs	r1, #4
 802792e:	3204      	adds	r2, #4
 8027930:	f10d 0083 	add.w	r0, sp, #131	; 0x83
 8027934:	f7f3 fc4a 	bl	801b1cc <MobleInputStreamGetBigEndian>
 8027938:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 802793c:	681b      	ldr	r3, [r3, #0]
 802793e:	6858      	ldr	r0, [r3, #4]
 8027940:	f7f6 ff18 	bl	801e774 <MobleStackForcedSetIvIndex>
 8027944:	2400      	movs	r4, #0
 8027946:	aa07      	add	r2, sp, #28
 8027948:	2102      	movs	r1, #2
 802794a:	f10d 0087 	add.w	r0, sp, #135	; 0x87
 802794e:	9407      	str	r4, [sp, #28]
 8027950:	f7f3 fc3c 	bl	801b1cc <MobleInputStreamGetBigEndian>
 8027954:	f8d6 36f0 	ldr.w	r3, [r6, #1776]	; 0x6f0
 8027958:	9a07      	ldr	r2, [sp, #28]
 802795a:	681b      	ldr	r3, [r3, #0]
 802795c:	805a      	strh	r2, [r3, #2]
 802795e:	2205      	movs	r2, #5
 8027960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8027964:	e54f      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027966:	2301      	movs	r3, #1
 8027968:	f885 31a8 	strb.w	r3, [r5, #424]	; 0x1a8
 802796c:	e798      	b.n	80278a0 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x554>
 802796e:	2303      	movs	r3, #3
 8027970:	e7fa      	b.n	8027968 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0x61c>
 8027972:	2403      	movs	r4, #3
 8027974:	e547      	b.n	8027406 <MobleProvision_UnprovisionedNode_SetInputMessage.part.0+0xba>
 8027976:	bf00      	nop
 8027978:	08033a03 	.word	0x08033a03
 802797c:	08033a08 	.word	0x08033a08
 8027980:	08033a0d 	.word	0x08033a0d
 8027984:	08033a12 	.word	0x08033a12
 8027988:	2000141c 	.word	0x2000141c

0802798c <MobleProvision_UnprovisionedNode_SetInputMessage>:
 802798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802798e:	4b0d      	ldr	r3, [pc, #52]	; (80279c4 <MobleProvision_UnprovisionedNode_SetInputMessage+0x38>)
 8027990:	4605      	mov	r5, r0
 8027992:	460c      	mov	r4, r1
 8027994:	b939      	cbnz	r1, 80279a6 <MobleProvision_UnprovisionedNode_SetInputMessage+0x1a>
 8027996:	f8d3 3a0c 	ldr.w	r3, [r3, #2572]	; 0xa0c
 802799a:	2202      	movs	r2, #2
 802799c:	f883 21a8 	strb.w	r2, [r3, #424]	; 0x1a8
 80279a0:	2003      	movs	r0, #3
 80279a2:	b003      	add	sp, #12
 80279a4:	bd30      	pop	{r4, r5, pc}
 80279a6:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 80279aa:	9201      	str	r2, [sp, #4]
 80279ac:	f7f7 fad2 	bl	801ef54 <MobleProvisionGetRole>
 80279b0:	2801      	cmp	r0, #1
 80279b2:	d1f5      	bne.n	80279a0 <MobleProvision_UnprovisionedNode_SetInputMessage+0x14>
 80279b4:	9a01      	ldr	r2, [sp, #4]
 80279b6:	4621      	mov	r1, r4
 80279b8:	4628      	mov	r0, r5
 80279ba:	b003      	add	sp, #12
 80279bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80279c0:	f7ff bcc4 	b.w	802734c <MobleProvision_UnprovisionedNode_SetInputMessage.part.0>
 80279c4:	20002514 	.word	0x20002514

080279c8 <MobleProvisionBearerGatt_FSM>:
 80279c8:	b570      	push	{r4, r5, r6, lr}
 80279ca:	4e26      	ldr	r6, [pc, #152]	; (8027a64 <MobleProvisionBearerGatt_FSM+0x9c>)
 80279cc:	461d      	mov	r5, r3
 80279ce:	4604      	mov	r4, r0
 80279d0:	2c03      	cmp	r4, #3
 80279d2:	d804      	bhi.n	80279de <MobleProvisionBearerGatt_FSM+0x16>
 80279d4:	e8df f004 	tbb	[pc, r4]
 80279d8:	11443302 	.word	0x11443302
 80279dc:	b109      	cbz	r1, 80279e2 <MobleProvisionBearerGatt_FSM+0x1a>
 80279de:	2402      	movs	r4, #2
 80279e0:	e00b      	b.n	80279fa <MobleProvisionBearerGatt_FSM+0x32>
 80279e2:	f7f8 fa01 	bl	801fde8 <MobleProvision_UnprovisionedNode_IsCompleted>
 80279e6:	2801      	cmp	r0, #1
 80279e8:	d109      	bne.n	80279fe <MobleProvisionBearerGatt_FSM+0x36>
 80279ea:	4b1e      	ldr	r3, [pc, #120]	; (8027a64 <MobleProvisionBearerGatt_FSM+0x9c>)
 80279ec:	f8d3 0a44 	ldr.w	r0, [r3, #2628]	; 0xa44
 80279f0:	f7f0 f938 	bl	8017c64 <MoblePalTimerStop>
 80279f4:	f7f0 fba2 	bl	801813c <MoblePalBluetoothPrvnCmpltReset>
 80279f8:	2403      	movs	r4, #3
 80279fa:	4620      	mov	r0, r4
 80279fc:	bd70      	pop	{r4, r5, r6, pc}
 80279fe:	f7f7 fc01 	bl	801f204 <MobleProvision_UnprovisionedNode_GetNextOperation>
 8027a02:	2801      	cmp	r0, #1
 8027a04:	4604      	mov	r4, r0
 8027a06:	d0f8      	beq.n	80279fa <MobleProvisionBearerGatt_FSM+0x32>
 8027a08:	2802      	cmp	r0, #2
 8027a0a:	d1e8      	bne.n	80279de <MobleProvisionBearerGatt_FSM+0x16>
 8027a0c:	f8d6 0a44 	ldr.w	r0, [r6, #2628]	; 0xa44
 8027a10:	f7f0 f928 	bl	8017c64 <MoblePalTimerStop>
 8027a14:	f241 3188 	movw	r1, #5000	; 0x1388
 8027a18:	f8d6 0a44 	ldr.w	r0, [r6, #2628]	; 0xa44
 8027a1c:	f7f0 f8fa 	bl	8017c14 <MoblePalTimerStartOnce>
 8027a20:	2801      	cmp	r0, #1
 8027a22:	d8dc      	bhi.n	80279de <MobleProvisionBearerGatt_FSM+0x16>
 8027a24:	f7f8 f9ce 	bl	801fdc4 <MobleProvisionBearerGatt_Transmit>
 8027a28:	f7f9 fd16 	bl	8021458 <MobleProvision_UnprovisionedNode_CompleteOperation>
 8027a2c:	f7f7 fc0a 	bl	801f244 <BnrgmProvision_UnprovisionedGetState>
 8027a30:	2807      	cmp	r0, #7
 8027a32:	bf18      	it	ne
 8027a34:	2400      	movne	r4, #0
 8027a36:	2500      	movs	r5, #0
 8027a38:	462a      	mov	r2, r5
 8027a3a:	4629      	mov	r1, r5
 8027a3c:	e7c8      	b.n	80279d0 <MobleProvisionBearerGatt_FSM+0x8>
 8027a3e:	2901      	cmp	r1, #1
 8027a40:	d1cd      	bne.n	80279de <MobleProvisionBearerGatt_FSM+0x16>
 8027a42:	4611      	mov	r1, r2
 8027a44:	f8d6 0a44 	ldr.w	r0, [r6, #2628]	; 0xa44
 8027a48:	3d01      	subs	r5, #1
 8027a4a:	f7f0 f90b 	bl	8017c64 <MoblePalTimerStop>
 8027a4e:	b2ea      	uxtb	r2, r5
 8027a50:	f811 0b01 	ldrb.w	r0, [r1], #1
 8027a54:	f7ff ff9a 	bl	802798c <MobleProvision_UnprovisionedNode_SetInputMessage>
 8027a58:	2400      	movs	r4, #0
 8027a5a:	f7f9 fcfd 	bl	8021458 <MobleProvision_UnprovisionedNode_CompleteOperation>
 8027a5e:	e7ea      	b.n	8027a36 <MobleProvisionBearerGatt_FSM+0x6e>
 8027a60:	2401      	movs	r4, #1
 8027a62:	e7ca      	b.n	80279fa <MobleProvisionBearerGatt_FSM+0x32>
 8027a64:	20002514 	.word	0x20002514

08027a68 <MobleProvisionBearerGatt_TimerCallback>:
 8027a68:	b510      	push	{r4, lr}
 8027a6a:	460c      	mov	r4, r1
 8027a6c:	2300      	movs	r3, #0
 8027a6e:	7820      	ldrb	r0, [r4, #0]
 8027a70:	461a      	mov	r2, r3
 8027a72:	2102      	movs	r1, #2
 8027a74:	f7ff ffa8 	bl	80279c8 <MobleProvisionBearerGatt_FSM>
 8027a78:	7020      	strb	r0, [r4, #0]
 8027a7a:	f7f9 faa7 	bl	8020fcc <MobleStackConfigInvalidate>
 8027a7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027a82:	f7f7 bd99 	b.w	801f5b8 <MoblePalBluetoothGracefulReset>
	...

08027a88 <MobleProvisionBearerGatt_Init>:
 8027a88:	b538      	push	{r3, r4, r5, lr}
 8027a8a:	f7f7 fb5b 	bl	801f144 <MobleProvision_UnprovisionedNode_Init>
 8027a8e:	2801      	cmp	r0, #1
 8027a90:	4604      	mov	r4, r0
 8027a92:	d81a      	bhi.n	8027aca <MobleProvisionBearerGatt_Init+0x42>
 8027a94:	4d15      	ldr	r5, [pc, #84]	; (8027aec <MobleProvisionBearerGatt_Init+0x64>)
 8027a96:	4916      	ldr	r1, [pc, #88]	; (8027af0 <MobleProvisionBearerGatt_Init+0x68>)
 8027a98:	2302      	movs	r3, #2
 8027a9a:	f605 223c 	addw	r2, r5, #2620	; 0xa3c
 8027a9e:	f505 6024 	add.w	r0, r5, #2624	; 0xa40
 8027aa2:	f885 3a3c 	strb.w	r3, [r5, #2620]	; 0xa3c
 8027aa6:	f7f0 f84b 	bl	8017b40 <MoblePalTimerCreate>
 8027aaa:	2801      	cmp	r0, #1
 8027aac:	4604      	mov	r4, r0
 8027aae:	d80c      	bhi.n	8027aca <MobleProvisionBearerGatt_Init+0x42>
 8027ab0:	4910      	ldr	r1, [pc, #64]	; (8027af4 <MobleProvisionBearerGatt_Init+0x6c>)
 8027ab2:	2200      	movs	r2, #0
 8027ab4:	f605 2044 	addw	r0, r5, #2628	; 0xa44
 8027ab8:	f7f0 f842 	bl	8017b40 <MoblePalTimerCreate>
 8027abc:	2801      	cmp	r0, #1
 8027abe:	4604      	mov	r4, r0
 8027ac0:	d905      	bls.n	8027ace <MobleProvisionBearerGatt_Init+0x46>
 8027ac2:	f505 6024 	add.w	r0, r5, #2624	; 0xa40
 8027ac6:	f7f7 fb33 	bl	801f130 <MobleProvisionBearerGatt_DeleteTimer>
 8027aca:	4620      	mov	r0, r4
 8027acc:	bd38      	pop	{r3, r4, r5, pc}
 8027ace:	2300      	movs	r3, #0
 8027ad0:	4619      	mov	r1, r3
 8027ad2:	461a      	mov	r2, r3
 8027ad4:	4618      	mov	r0, r3
 8027ad6:	f7ff ff77 	bl	80279c8 <MobleProvisionBearerGatt_FSM>
 8027ada:	f24c 3150 	movw	r1, #50000	; 0xc350
 8027ade:	f885 0a3c 	strb.w	r0, [r5, #2620]	; 0xa3c
 8027ae2:	f8d5 0a40 	ldr.w	r0, [r5, #2624]	; 0xa40
 8027ae6:	f7f0 f895 	bl	8017c14 <MoblePalTimerStartOnce>
 8027aea:	e7ee      	b.n	8027aca <MobleProvisionBearerGatt_Init+0x42>
 8027aec:	20002514 	.word	0x20002514
 8027af0:	08027a69 	.word	0x08027a69
 8027af4:	080178d1 	.word	0x080178d1

08027af8 <MobleGattOnConnectDisconnect>:
 8027af8:	b508      	push	{r3, lr}
 8027afa:	b318      	cbz	r0, 8027b44 <MobleGattOnConnectDisconnect+0x4c>
 8027afc:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
 8027b00:	b313      	cbz	r3, 8027b48 <MobleGattOnConnectDisconnect+0x50>
 8027b02:	4a12      	ldr	r2, [pc, #72]	; (8027b4c <MobleGattOnConnectDisconnect+0x54>)
 8027b04:	2901      	cmp	r1, #1
 8027b06:	8992      	ldrh	r2, [r2, #12]
 8027b08:	d112      	bne.n	8027b30 <MobleGattOnConnectDisconnect+0x38>
 8027b0a:	f8c0 3168 	str.w	r3, [r0, #360]	; 0x168
 8027b0e:	881b      	ldrh	r3, [r3, #0]
 8027b10:	4293      	cmp	r3, r2
 8027b12:	d008      	beq.n	8027b26 <MobleGattOnConnectDisconnect+0x2e>
 8027b14:	f7f5 fef2 	bl	801d8fc <BnrgmProxyProtocol_Init>
 8027b18:	4b0d      	ldr	r3, [pc, #52]	; (8027b50 <MobleGattOnConnectDisconnect+0x58>)
 8027b1a:	2000      	movs	r0, #0
 8027b1c:	f883 06f4 	strb.w	r0, [r3, #1780]	; 0x6f4
 8027b20:	f8a3 06f6 	strh.w	r0, [r3, #1782]	; 0x6f6
 8027b24:	e003      	b.n	8027b2e <MobleGattOnConnectDisconnect+0x36>
 8027b26:	f7ff ffaf 	bl	8027a88 <MobleProvisionBearerGatt_Init>
 8027b2a:	2801      	cmp	r0, #1
 8027b2c:	d9f2      	bls.n	8027b14 <MobleGattOnConnectDisconnect+0x1c>
 8027b2e:	bd08      	pop	{r3, pc}
 8027b30:	f8d0 3168 	ldr.w	r3, [r0, #360]	; 0x168
 8027b34:	881b      	ldrh	r3, [r3, #0]
 8027b36:	4293      	cmp	r3, r2
 8027b38:	d101      	bne.n	8027b3e <MobleGattOnConnectDisconnect+0x46>
 8027b3a:	f7ff fadf 	bl	80270fc <MobleProvisionBearerGatt_DeInit>
 8027b3e:	f7f5 fecf 	bl	801d8e0 <BnrgmProxyProtocol_DeInit>
 8027b42:	e7e9      	b.n	8027b18 <MobleGattOnConnectDisconnect+0x20>
 8027b44:	2003      	movs	r0, #3
 8027b46:	e7f2      	b.n	8027b2e <MobleGattOnConnectDisconnect+0x36>
 8027b48:	2002      	movs	r0, #2
 8027b4a:	e7f0      	b.n	8027b2e <MobleGattOnConnectDisconnect+0x36>
 8027b4c:	20000008 	.word	0x20000008
 8027b50:	20002514 	.word	0x20002514

08027b54 <MobleStackConnectionCallback>:
 8027b54:	b510      	push	{r4, lr}
 8027b56:	f7f0 fa31 	bl	8017fbc <MoblePalBluetoothGetConnectionState>
 8027b5a:	2801      	cmp	r0, #1
 8027b5c:	4604      	mov	r4, r0
 8027b5e:	d01b      	beq.n	8027b98 <MobleStackConnectionCallback+0x44>
 8027b60:	2802      	cmp	r0, #2
 8027b62:	d01d      	beq.n	8027ba0 <MobleStackConnectionCallback+0x4c>
 8027b64:	bb50      	cbnz	r0, 8027bbc <MobleStackConnectionCallback+0x68>
 8027b66:	4c16      	ldr	r4, [pc, #88]	; (8027bc0 <MobleStackConnectionCallback+0x6c>)
 8027b68:	f7f5 ff1a 	bl	801d9a0 <BnrgmProxyConfig_ResetFilter>
 8027b6c:	f7f7 fcc6 	bl	801f4fc <MobleTransmitSuspendAll>
 8027b70:	f7f7 fcd4 	bl	801f51c <MobleTransmitResumeAll>
 8027b74:	2101      	movs	r1, #1
 8027b76:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 8027b7a:	f7ff ffbd 	bl	8027af8 <MobleGattOnConnectDisconnect>
 8027b7e:	2101      	movs	r1, #1
 8027b80:	f504 60d0 	add.w	r0, r4, #1664	; 0x680
 8027b84:	f7f8 fcf0 	bl	8020568 <MobleStackFSM>
 8027b88:	f8d4 07f8 	ldr.w	r0, [r4, #2040]	; 0x7f8
 8027b8c:	f504 61d0 	add.w	r1, r4, #1664	; 0x680
 8027b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027b94:	f7f3 b858 	b.w	801ac48 <MobleStackFastAdvTimeoutTimerCallback>
 8027b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027b9c:	f7f7 bcbe 	b.w	801f51c <MobleTransmitResumeAll>
 8027ba0:	f7f7 fcbc 	bl	801f51c <MobleTransmitResumeAll>
 8027ba4:	2100      	movs	r1, #0
 8027ba6:	4807      	ldr	r0, [pc, #28]	; (8027bc4 <MobleStackConnectionCallback+0x70>)
 8027ba8:	f7ff ffa6 	bl	8027af8 <MobleGattOnConnectDisconnect>
 8027bac:	4621      	mov	r1, r4
 8027bae:	4805      	ldr	r0, [pc, #20]	; (8027bc4 <MobleStackConnectionCallback+0x70>)
 8027bb0:	f7f8 fcda 	bl	8020568 <MobleStackFSM>
 8027bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8027bb8:	f7f5 bb32 	b.w	801d220 <MobleStackCreateStartFastAdvTimer>
 8027bbc:	bd10      	pop	{r4, pc}
 8027bbe:	bf00      	nop
 8027bc0:	2000141c 	.word	0x2000141c
 8027bc4:	20001a9c 	.word	0x20001a9c

08027bc8 <MobleProvisionBearerGatt_ProcessPacket>:
 8027bc8:	b510      	push	{r4, lr}
 8027bca:	4602      	mov	r2, r0
 8027bcc:	4c07      	ldr	r4, [pc, #28]	; (8027bec <MobleProvisionBearerGatt_ProcessPacket+0x24>)
 8027bce:	460b      	mov	r3, r1
 8027bd0:	b141      	cbz	r1, 8027be4 <MobleProvisionBearerGatt_ProcessPacket+0x1c>
 8027bd2:	f894 0a3c 	ldrb.w	r0, [r4, #2620]	; 0xa3c
 8027bd6:	2101      	movs	r1, #1
 8027bd8:	f7ff fef6 	bl	80279c8 <MobleProvisionBearerGatt_FSM>
 8027bdc:	f884 0a3c 	strb.w	r0, [r4, #2620]	; 0xa3c
 8027be0:	2000      	movs	r0, #0
 8027be2:	bd10      	pop	{r4, pc}
 8027be4:	2302      	movs	r3, #2
 8027be6:	f884 3a3c 	strb.w	r3, [r4, #2620]	; 0xa3c
 8027bea:	e7f9      	b.n	8027be0 <MobleProvisionBearerGatt_ProcessPacket+0x18>
 8027bec:	20002514 	.word	0x20002514

08027bf0 <BnrgmProxyProtocol_ProcessPacket>:
 8027bf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8027bf4:	460e      	mov	r6, r1
 8027bf6:	4611      	mov	r1, r2
 8027bf8:	2a00      	cmp	r2, #0
 8027bfa:	f000 80a1 	beq.w	8027d40 <BnrgmProxyProtocol_ProcessPacket+0x150>
 8027bfe:	2e00      	cmp	r6, #0
 8027c00:	f000 809e 	beq.w	8027d40 <BnrgmProxyProtocol_ProcessPacket+0x150>
 8027c04:	7833      	ldrb	r3, [r6, #0]
 8027c06:	f003 083f 	and.w	r8, r3, #63	; 0x3f
 8027c0a:	b920      	cbnz	r0, 8027c16 <BnrgmProxyProtocol_ProcessPacket+0x26>
 8027c0c:	f1b8 0f03 	cmp.w	r8, #3
 8027c10:	d106      	bne.n	8027c20 <BnrgmProxyProtocol_ProcessPacket+0x30>
 8027c12:	2502      	movs	r5, #2
 8027c14:	e042      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027c16:	2801      	cmp	r0, #1
 8027c18:	d102      	bne.n	8027c20 <BnrgmProxyProtocol_ProcessPacket+0x30>
 8027c1a:	f1b8 0f03 	cmp.w	r8, #3
 8027c1e:	d1f8      	bne.n	8027c12 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027c20:	f003 05c0 	and.w	r5, r3, #192	; 0xc0
 8027c24:	2d40      	cmp	r5, #64	; 0x40
 8027c26:	d050      	beq.n	8027cca <BnrgmProxyProtocol_ProcessPacket+0xda>
 8027c28:	d802      	bhi.n	8027c30 <BnrgmProxyProtocol_ProcessPacket+0x40>
 8027c2a:	b30d      	cbz	r5, 8027c70 <BnrgmProxyProtocol_ProcessPacket+0x80>
 8027c2c:	2500      	movs	r5, #0
 8027c2e:	e035      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027c30:	061b      	lsls	r3, r3, #24
 8027c32:	d5fb      	bpl.n	8027c2c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027c34:	4f43      	ldr	r7, [pc, #268]	; (8027d44 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8027c36:	7a3b      	ldrb	r3, [r7, #8]
 8027c38:	2b00      	cmp	r3, #0
 8027c3a:	d0ea      	beq.n	8027c12 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027c3c:	7a7b      	ldrb	r3, [r7, #9]
 8027c3e:	4543      	cmp	r3, r8
 8027c40:	d1e7      	bne.n	8027c12 <BnrgmProxyProtocol_ProcessPacket+0x22>
 8027c42:	1e4c      	subs	r4, r1, #1
 8027c44:	b2e1      	uxtb	r1, r4
 8027c46:	1c70      	adds	r0, r6, #1
 8027c48:	f7f5 fe92 	bl	801d970 <BnrgmProxyProtocol_AddFragment>
 8027c4c:	2800      	cmp	r0, #0
 8027c4e:	d047      	beq.n	8027ce0 <BnrgmProxyProtocol_ProcessPacket+0xf0>
 8027c50:	7833      	ldrb	r3, [r6, #0]
 8027c52:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8027c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8027c5a:	2b80      	cmp	r3, #128	; 0x80
 8027c5c:	d14b      	bne.n	8027cf6 <BnrgmProxyProtocol_ProcessPacket+0x106>
 8027c5e:	f7f0 f801 	bl	8017c64 <MoblePalTimerStop>
 8027c62:	f644 6120 	movw	r1, #20000	; 0x4e20
 8027c66:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8027c6a:	f7ef ffd3 	bl	8017c14 <MoblePalTimerStartOnce>
 8027c6e:	e7dd      	b.n	8027c2c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027c70:	4b34      	ldr	r3, [pc, #208]	; (8027d44 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8027c72:	7a1b      	ldrb	r3, [r3, #8]
 8027c74:	b10b      	cbz	r3, 8027c7a <BnrgmProxyProtocol_ProcessPacket+0x8a>
 8027c76:	f7f5 fe6d 	bl	801d954 <BnrgmProxyProtocol_ResetSar>
 8027c7a:	f1b8 0f03 	cmp.w	r8, #3
 8027c7e:	d8d5      	bhi.n	8027c2c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027c80:	e8df f008 	tbb	[pc, r8]
 8027c84:	1d171002 	.word	0x1d171002
 8027c88:	237f      	movs	r3, #127	; 0x7f
 8027c8a:	1e4a      	subs	r2, r1, #1
 8027c8c:	9300      	str	r3, [sp, #0]
 8027c8e:	2301      	movs	r3, #1
 8027c90:	b2d2      	uxtb	r2, r2
 8027c92:	18f1      	adds	r1, r6, r3
 8027c94:	2000      	movs	r0, #0
 8027c96:	f7fa fb73 	bl	8022380 <MobleStackProcessData>
 8027c9a:	4645      	mov	r5, r8
 8027c9c:	4628      	mov	r0, r5
 8027c9e:	b002      	add	sp, #8
 8027ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027ca4:	237f      	movs	r3, #127	; 0x7f
 8027ca6:	2200      	movs	r2, #0
 8027ca8:	3901      	subs	r1, #1
 8027caa:	1c70      	adds	r0, r6, #1
 8027cac:	f7f9 fd6e 	bl	802178c <MobleStackProcessBeacon>
 8027cb0:	e7f4      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027cb2:	3901      	subs	r1, #1
 8027cb4:	b2c9      	uxtb	r1, r1
 8027cb6:	1c70      	adds	r0, r6, #1
 8027cb8:	f7f5 ffce 	bl	801dc58 <BnrgmProxyConfig_ProcessData>
 8027cbc:	e7ee      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027cbe:	3901      	subs	r1, #1
 8027cc0:	b2c9      	uxtb	r1, r1
 8027cc2:	1c70      	adds	r0, r6, #1
 8027cc4:	f7ff ff80 	bl	8027bc8 <MobleProvisionBearerGatt_ProcessPacket>
 8027cc8:	e7e8      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027cca:	4d1e      	ldr	r5, [pc, #120]	; (8027d44 <BnrgmProxyProtocol_ProcessPacket+0x154>)
 8027ccc:	7a2b      	ldrb	r3, [r5, #8]
 8027cce:	b10b      	cbz	r3, 8027cd4 <BnrgmProxyProtocol_ProcessPacket+0xe4>
 8027cd0:	f7f5 fe40 	bl	801d954 <BnrgmProxyProtocol_ResetSar>
 8027cd4:	3901      	subs	r1, #1
 8027cd6:	b2c9      	uxtb	r1, r1
 8027cd8:	1c70      	adds	r0, r6, #1
 8027cda:	f7f5 fe49 	bl	801d970 <BnrgmProxyProtocol_AddFragment>
 8027cde:	b908      	cbnz	r0, 8027ce4 <BnrgmProxyProtocol_ProcessPacket+0xf4>
 8027ce0:	2504      	movs	r5, #4
 8027ce2:	e7db      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027ce4:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
 8027ce8:	f644 6120 	movw	r1, #20000	; 0x4e20
 8027cec:	f7ef ff92 	bl	8017c14 <MoblePalTimerStartOnce>
 8027cf0:	f885 8009 	strb.w	r8, [r5, #9]
 8027cf4:	e79a      	b.n	8027c2c <BnrgmProxyProtocol_ProcessPacket+0x3c>
 8027cf6:	f7ef ffb5 	bl	8017c64 <MoblePalTimerStop>
 8027cfa:	7a7b      	ldrb	r3, [r7, #9]
 8027cfc:	2b03      	cmp	r3, #3
 8027cfe:	d80b      	bhi.n	8027d18 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027d00:	e8df f003 	tbb	[pc, r3]
 8027d04:	19140d02 	.word	0x19140d02
 8027d08:	237f      	movs	r3, #127	; 0x7f
 8027d0a:	9300      	str	r3, [sp, #0]
 8027d0c:	7a3a      	ldrb	r2, [r7, #8]
 8027d0e:	490e      	ldr	r1, [pc, #56]	; (8027d48 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027d10:	2301      	movs	r3, #1
 8027d12:	2000      	movs	r0, #0
 8027d14:	f7fa fb34 	bl	8022380 <MobleStackProcessData>
 8027d18:	2500      	movs	r5, #0
 8027d1a:	723d      	strb	r5, [r7, #8]
 8027d1c:	e7be      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027d1e:	7a39      	ldrb	r1, [r7, #8]
 8027d20:	4809      	ldr	r0, [pc, #36]	; (8027d48 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027d22:	237f      	movs	r3, #127	; 0x7f
 8027d24:	2200      	movs	r2, #0
 8027d26:	f7f9 fd31 	bl	802178c <MobleStackProcessBeacon>
 8027d2a:	e7f5      	b.n	8027d18 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027d2c:	7a39      	ldrb	r1, [r7, #8]
 8027d2e:	4806      	ldr	r0, [pc, #24]	; (8027d48 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027d30:	f7f5 ff92 	bl	801dc58 <BnrgmProxyConfig_ProcessData>
 8027d34:	e7f0      	b.n	8027d18 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027d36:	7a39      	ldrb	r1, [r7, #8]
 8027d38:	4803      	ldr	r0, [pc, #12]	; (8027d48 <BnrgmProxyProtocol_ProcessPacket+0x158>)
 8027d3a:	f7ff ff45 	bl	8027bc8 <MobleProvisionBearerGatt_ProcessPacket>
 8027d3e:	e7eb      	b.n	8027d18 <BnrgmProxyProtocol_ProcessPacket+0x128>
 8027d40:	2503      	movs	r5, #3
 8027d42:	e7ab      	b.n	8027c9c <BnrgmProxyProtocol_ProcessPacket+0xac>
 8027d44:	20000324 	.word	0x20000324
 8027d48:	2000032e 	.word	0x2000032e

08027d4c <MobleGattWriteCallback>:
 8027d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027d4e:	460c      	mov	r4, r1
 8027d50:	4611      	mov	r1, r2
 8027d52:	461a      	mov	r2, r3
 8027d54:	2800      	cmp	r0, #0
 8027d56:	d052      	beq.n	8027dfe <MobleGattWriteCallback+0xb2>
 8027d58:	2900      	cmp	r1, #0
 8027d5a:	d050      	beq.n	8027dfe <MobleGattWriteCallback+0xb2>
 8027d5c:	2b00      	cmp	r3, #0
 8027d5e:	d04e      	beq.n	8027dfe <MobleGattWriteCallback+0xb2>
 8027d60:	f8d0 3164 	ldr.w	r3, [r0, #356]	; 0x164
 8027d64:	2b00      	cmp	r3, #0
 8027d66:	d048      	beq.n	8027dfa <MobleGattWriteCallback+0xae>
 8027d68:	6858      	ldr	r0, [r3, #4]
 8027d6a:	2800      	cmp	r0, #0
 8027d6c:	d045      	beq.n	8027dfa <MobleGattWriteCallback+0xae>
 8027d6e:	789f      	ldrb	r7, [r3, #2]
 8027d70:	2f00      	cmp	r7, #0
 8027d72:	d042      	beq.n	8027dfa <MobleGattWriteCallback+0xae>
 8027d74:	2500      	movs	r5, #0
 8027d76:	8983      	ldrh	r3, [r0, #12]
 8027d78:	1c5e      	adds	r6, r3, #1
 8027d7a:	b2b6      	uxth	r6, r6
 8027d7c:	42b4      	cmp	r4, r6
 8027d7e:	d116      	bne.n	8027dae <MobleGattWriteCallback+0x62>
 8027d80:	7903      	ldrb	r3, [r0, #4]
 8027d82:	4293      	cmp	r3, r2
 8027d84:	d33b      	bcc.n	8027dfe <MobleGattWriteCallback+0xb2>
 8027d86:	7883      	ldrb	r3, [r0, #2]
 8027d88:	f013 0f06 	tst.w	r3, #6
 8027d8c:	d035      	beq.n	8027dfa <MobleGattWriteCallback+0xae>
 8027d8e:	8803      	ldrh	r3, [r0, #0]
 8027d90:	f642 20db 	movw	r0, #10971	; 0x2adb
 8027d94:	4283      	cmp	r3, r0
 8027d96:	d008      	beq.n	8027daa <MobleGattWriteCallback+0x5e>
 8027d98:	f642 20dd 	movw	r0, #10973	; 0x2add
 8027d9c:	4283      	cmp	r3, r0
 8027d9e:	d12c      	bne.n	8027dfa <MobleGattWriteCallback+0xae>
 8027da0:	2000      	movs	r0, #0
 8027da2:	f7ff ff25 	bl	8027bf0 <BnrgmProxyProtocol_ProcessPacket>
 8027da6:	2000      	movs	r0, #0
 8027da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8027daa:	2001      	movs	r0, #1
 8027dac:	e7f9      	b.n	8027da2 <MobleGattWriteCallback+0x56>
 8027dae:	3302      	adds	r3, #2
 8027db0:	b29b      	uxth	r3, r3
 8027db2:	429c      	cmp	r4, r3
 8027db4:	d11b      	bne.n	8027dee <MobleGattWriteCallback+0xa2>
 8027db6:	7883      	ldrb	r3, [r0, #2]
 8027db8:	071b      	lsls	r3, r3, #28
 8027dba:	d51e      	bpl.n	8027dfa <MobleGattWriteCallback+0xae>
 8027dbc:	8803      	ldrh	r3, [r0, #0]
 8027dbe:	f642 22dc 	movw	r2, #10972	; 0x2adc
 8027dc2:	4293      	cmp	r3, r2
 8027dc4:	d00c      	beq.n	8027de0 <MobleGattWriteCallback+0x94>
 8027dc6:	f642 22de 	movw	r2, #10974	; 0x2ade
 8027dca:	4293      	cmp	r3, r2
 8027dcc:	d115      	bne.n	8027dfa <MobleGattWriteCallback+0xae>
 8027dce:	780b      	ldrb	r3, [r1, #0]
 8027dd0:	4a0c      	ldr	r2, [pc, #48]	; (8027e04 <MobleGattWriteCallback+0xb8>)
 8027dd2:	f003 0301 	and.w	r3, r3, #1
 8027dd6:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 8027dda:	f7f5 fe85 	bl	801dae8 <BnrgmStackSendBeaconOverGatt>
 8027dde:	e7e2      	b.n	8027da6 <MobleGattWriteCallback+0x5a>
 8027de0:	780b      	ldrb	r3, [r1, #0]
 8027de2:	4a08      	ldr	r2, [pc, #32]	; (8027e04 <MobleGattWriteCallback+0xb8>)
 8027de4:	f003 0301 	and.w	r3, r3, #1
 8027de8:	f882 308e 	strb.w	r3, [r2, #142]	; 0x8e
 8027dec:	e7db      	b.n	8027da6 <MobleGattWriteCallback+0x5a>
 8027dee:	3501      	adds	r5, #1
 8027df0:	b2eb      	uxtb	r3, r5
 8027df2:	429f      	cmp	r7, r3
 8027df4:	f100 0010 	add.w	r0, r0, #16
 8027df8:	d8bd      	bhi.n	8027d76 <MobleGattWriteCallback+0x2a>
 8027dfa:	2002      	movs	r0, #2
 8027dfc:	e7d4      	b.n	8027da8 <MobleGattWriteCallback+0x5c>
 8027dfe:	2003      	movs	r0, #3
 8027e00:	e7d2      	b.n	8027da8 <MobleGattWriteCallback+0x5c>
 8027e02:	bf00      	nop
 8027e04:	20000324 	.word	0x20000324

08027e08 <MobleProvision_SetInputMessage>:
 8027e08:	b410      	push	{r4}
 8027e0a:	4604      	mov	r4, r0
 8027e0c:	4608      	mov	r0, r1
 8027e0e:	4611      	mov	r1, r2
 8027e10:	461a      	mov	r2, r3
 8027e12:	b91c      	cbnz	r4, 8027e1c <MobleProvision_SetInputMessage+0x14>
 8027e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027e18:	f7f8 b944 	b.w	80200a4 <MobleProvision_ProvisionerNode_SetInputMessage>
 8027e1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8027e20:	f7ff bdb4 	b.w	802798c <MobleProvision_UnprovisionedNode_SetInputMessage>

08027e24 <MoblePBADVProcessData>:
 8027e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8027e28:	2a05      	cmp	r2, #5
 8027e2a:	b0a5      	sub	sp, #148	; 0x94
 8027e2c:	4605      	mov	r5, r0
 8027e2e:	460c      	mov	r4, r1
 8027e30:	4693      	mov	fp, r2
 8027e32:	f240 8165 	bls.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027e36:	7a03      	ldrb	r3, [r0, #8]
 8027e38:	680f      	ldr	r7, [r1, #0]
 8027e3a:	f891 9004 	ldrb.w	r9, [r1, #4]
 8027e3e:	b113      	cbz	r3, 8027e46 <MoblePBADVProcessData+0x22>
 8027e40:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8027e42:	4297      	cmp	r7, r2
 8027e44:	d025      	beq.n	8027e92 <MoblePBADVProcessData+0x6e>
 8027e46:	f895 217c 	ldrb.w	r2, [r5, #380]	; 0x17c
 8027e4a:	2a00      	cmp	r2, #0
 8027e4c:	f000 814f 	beq.w	80280ee <MoblePBADVProcessData+0x2ca>
 8027e50:	f8d5 1198 	ldr.w	r1, [r5, #408]	; 0x198
 8027e54:	428f      	cmp	r7, r1
 8027e56:	f040 8155 	bne.w	8028104 <MoblePBADVProcessData+0x2e0>
 8027e5a:	2601      	movs	r6, #1
 8027e5c:	f44f 78ba 	mov.w	r8, #372	; 0x174
 8027e60:	fb08 f806 	mul.w	r8, r8, r6
 8027e64:	f108 0708 	add.w	r7, r8, #8
 8027e68:	f508 70aa 	add.w	r0, r8, #340	; 0x154
 8027e6c:	4428      	add	r0, r5
 8027e6e:	442f      	add	r7, r5
 8027e70:	f7ef ff68 	bl	8017d44 <MoblePBADVEraseTimer>
 8027e74:	4638      	mov	r0, r7
 8027e76:	f7ef fee3 	bl	8017c40 <MoblePBADVRaiseLinkIdleTimer>
 8027e7a:	7963      	ldrb	r3, [r4, #5]
 8027e7c:	f003 0203 	and.w	r2, r3, #3
 8027e80:	2a03      	cmp	r2, #3
 8027e82:	d108      	bne.n	8027e96 <MoblePBADVProcessData+0x72>
 8027e84:	089b      	lsrs	r3, r3, #2
 8027e86:	2b03      	cmp	r3, #3
 8027e88:	d835      	bhi.n	8027ef6 <MoblePBADVProcessData+0xd2>
 8027e8a:	e8df f003 	tbb	[pc, r3]
 8027e8e:	a686      	.short	0xa686
 8027e90:	0874      	.short	0x0874
 8027e92:	2600      	movs	r6, #0
 8027e94:	e7e2      	b.n	8027e5c <MoblePBADVProcessData+0x38>
 8027e96:	2a01      	cmp	r2, #1
 8027e98:	d12f      	bne.n	8027efa <MoblePBADVProcessData+0xd6>
 8027e9a:	2b01      	cmp	r3, #1
 8027e9c:	d1f2      	bne.n	8027e84 <MoblePBADVProcessData+0x60>
 8027e9e:	f44f 79ba 	mov.w	r9, #372	; 0x174
 8027ea2:	fb09 5906 	mla	r9, r9, r6, r5
 8027ea6:	f8d9 30c4 	ldr.w	r3, [r9, #196]	; 0xc4
 8027eaa:	2b00      	cmp	r3, #0
 8027eac:	f000 8128 	beq.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027eb0:	7922      	ldrb	r2, [r4, #4]
 8027eb2:	f899 30c0 	ldrb.w	r3, [r9, #192]	; 0xc0
 8027eb6:	429a      	cmp	r2, r3
 8027eb8:	f040 8122 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027ebc:	4638      	mov	r0, r7
 8027ebe:	f7ef ff4a 	bl	8017d56 <MoblePBADVClearTimers>
 8027ec2:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
 8027ec6:	4428      	add	r0, r5
 8027ec8:	f7ef fdb3 	bl	8017a32 <MoblePBADVEraseTransaction>
 8027ecc:	f899 30c0 	ldrb.w	r3, [r9, #192]	; 0xc0
 8027ed0:	3301      	adds	r3, #1
 8027ed2:	f889 30c0 	strb.w	r3, [r9, #192]	; 0xc0
 8027ed6:	f899 3164 	ldrb.w	r3, [r9, #356]	; 0x164
 8027eda:	b3c3      	cbz	r3, 8027f4e <MoblePBADVProcessData+0x12a>
 8027edc:	f8d9 316c 	ldr.w	r3, [r9, #364]	; 0x16c
 8027ee0:	f8d9 0178 	ldr.w	r0, [r9, #376]	; 0x178
 8027ee4:	4798      	blx	r3
 8027ee6:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8027eea:	fb00 5606 	mla	r6, r0, r6, r5
 8027eee:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8027ef2:	2b03      	cmp	r3, #3
 8027ef4:	d03a      	beq.n	8027f6c <MoblePBADVProcessData+0x148>
 8027ef6:	2400      	movs	r4, #0
 8027ef8:	e13f      	b.n	802817a <MoblePBADVProcessData+0x356>
 8027efa:	eb05 0308 	add.w	r3, r5, r8
 8027efe:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8027f02:	2a01      	cmp	r2, #1
 8027f04:	d801      	bhi.n	8027f0a <MoblePBADVProcessData+0xe6>
 8027f06:	f883 902c 	strb.w	r9, [r3, #44]	; 0x2c
 8027f0a:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8027f0e:	fb03 5606 	mla	r6, r3, r6, r5
 8027f12:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8027f16:	4599      	cmp	r9, r3
 8027f18:	f000 8090 	beq.w	802803c <MoblePBADVProcessData+0x218>
 8027f1c:	3b01      	subs	r3, #1
 8027f1e:	454b      	cmp	r3, r9
 8027f20:	f040 80ee 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027f24:	2300      	movs	r3, #0
 8027f26:	461a      	mov	r2, r3
 8027f28:	f886 902c 	strb.w	r9, [r6, #44]	; 0x2c
 8027f2c:	2103      	movs	r1, #3
 8027f2e:	4638      	mov	r0, r7
 8027f30:	f7f2 fed2 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 8027f34:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8027f38:	3301      	adds	r3, #1
 8027f3a:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 8027f3e:	e0df      	b.n	8028100 <MoblePBADVProcessData+0x2dc>
 8027f40:	2a01      	cmp	r2, #1
 8027f42:	f040 80dd 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027f46:	2b01      	cmp	r3, #1
 8027f48:	f040 80ec 	bne.w	8028124 <MoblePBADVProcessData+0x300>
 8027f4c:	e0d8      	b.n	8028100 <MoblePBADVProcessData+0x2dc>
 8027f4e:	f899 2028 	ldrb.w	r2, [r9, #40]	; 0x28
 8027f52:	2a01      	cmp	r2, #1
 8027f54:	d103      	bne.n	8027f5e <MoblePBADVProcessData+0x13a>
 8027f56:	f7f7 f975 	bl	801f244 <BnrgmProvision_UnprovisionedGetState>
 8027f5a:	2807      	cmp	r0, #7
 8027f5c:	d0c3      	beq.n	8027ee6 <MoblePBADVProcessData+0xc2>
 8027f5e:	4610      	mov	r0, r2
 8027f60:	f7f9 fba8 	bl	80216b4 <MobleProvision_CompleteOperation>
 8027f64:	4638      	mov	r0, r7
 8027f66:	f7ff f99b 	bl	80272a0 <MoblePBADVFireProvisionStateMach>
 8027f6a:	e7bc      	b.n	8027ee6 <MoblePBADVProcessData+0xc2>
 8027f6c:	2101      	movs	r1, #1
 8027f6e:	4638      	mov	r0, r7
 8027f70:	f7ff f8d9 	bl	8027126 <MoblePBADVCloseLink>
 8027f74:	e7bf      	b.n	8027ef6 <MoblePBADVProcessData+0xd2>
 8027f76:	6823      	ldr	r3, [r4, #0]
 8027f78:	9303      	str	r3, [sp, #12]
 8027f7a:	2204      	movs	r2, #4
 8027f7c:	69fb      	ldr	r3, [r7, #28]
 8027f7e:	9304      	str	r3, [sp, #16]
 8027f80:	a903      	add	r1, sp, #12
 8027f82:	a804      	add	r0, sp, #16
 8027f84:	f001 fc6c 	bl	8029860 <memcmp>
 8027f88:	4604      	mov	r4, r0
 8027f8a:	2800      	cmp	r0, #0
 8027f8c:	f040 80b8 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027f90:	4601      	mov	r1, r0
 8027f92:	4638      	mov	r0, r7
 8027f94:	f7ff f8c7 	bl	8027126 <MoblePBADVCloseLink>
 8027f98:	e0ef      	b.n	802817a <MoblePBADVProcessData+0x356>
 8027f9a:	7924      	ldrb	r4, [r4, #4]
 8027f9c:	2c00      	cmp	r4, #0
 8027f9e:	f040 80af 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027fa2:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8027fa6:	fb00 5606 	mla	r6, r0, r6, r5
 8027faa:	f896 5028 	ldrb.w	r5, [r6, #40]	; 0x28
 8027fae:	2d01      	cmp	r5, #1
 8027fb0:	f040 80a6 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027fb4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8027fb8:	2b03      	cmp	r3, #3
 8027fba:	f000 80a1 	beq.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027fbe:	2380      	movs	r3, #128	; 0x80
 8027fc0:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
 8027fc4:	f886 402c 	strb.w	r4, [r6, #44]	; 0x2c
 8027fc8:	4623      	mov	r3, r4
 8027fca:	4622      	mov	r2, r4
 8027fcc:	4629      	mov	r1, r5
 8027fce:	4638      	mov	r0, r7
 8027fd0:	f7f2 fe82 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 8027fd4:	f886 502c 	strb.w	r5, [r6, #44]	; 0x2c
 8027fd8:	e0cf      	b.n	802817a <MoblePBADVProcessData+0x356>
 8027fda:	7923      	ldrb	r3, [r4, #4]
 8027fdc:	2b00      	cmp	r3, #0
 8027fde:	f040 808f 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027fe2:	f44f 73ba 	mov.w	r3, #372	; 0x174
 8027fe6:	fb03 5606 	mla	r6, r3, r6, r5
 8027fea:	f896 4028 	ldrb.w	r4, [r6, #40]	; 0x28
 8027fee:	2c00      	cmp	r4, #0
 8027ff0:	f040 8086 	bne.w	8028100 <MoblePBADVProcessData+0x2dc>
 8027ff4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
 8027ff8:	2b03      	cmp	r3, #3
 8027ffa:	d101      	bne.n	8028000 <MoblePBADVProcessData+0x1dc>
 8027ffc:	2101      	movs	r1, #1
 8027ffe:	e7c8      	b.n	8027f92 <MoblePBADVProcessData+0x16e>
 8028000:	2b01      	cmp	r3, #1
 8028002:	d17d      	bne.n	8028100 <MoblePBADVProcessData+0x2dc>
 8028004:	2302      	movs	r3, #2
 8028006:	f108 00c0 	add.w	r0, r8, #192	; 0xc0
 802800a:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 802800e:	4428      	add	r0, r5
 8028010:	f886 40c0 	strb.w	r4, [r6, #192]	; 0xc0
 8028014:	f7ef fd0d 	bl	8017a32 <MoblePBADVEraseTransaction>
 8028018:	4638      	mov	r0, r7
 802801a:	f7ef fe9c 	bl	8017d56 <MoblePBADVClearTimers>
 802801e:	f896 3164 	ldrb.w	r3, [r6, #356]	; 0x164
 8028022:	b13b      	cbz	r3, 8028034 <MoblePBADVProcessData+0x210>
 8028024:	f8d6 3170 	ldr.w	r3, [r6, #368]	; 0x170
 8028028:	f8d6 0178 	ldr.w	r0, [r6, #376]	; 0x178
 802802c:	4798      	blx	r3
 802802e:	f7de fa09 	bl	8006444 <BLEMesh_PbAdvLinkOpenCb>
 8028032:	e0a2      	b.n	802817a <MoblePBADVProcessData+0x356>
 8028034:	4638      	mov	r0, r7
 8028036:	f7ff f933 	bl	80272a0 <MoblePBADVFireProvisionStateMach>
 802803a:	e7f8      	b.n	802802e <MoblePBADVProcessData+0x20a>
 802803c:	f8d6 90c4 	ldr.w	r9, [r6, #196]	; 0xc4
 8028040:	f1b9 0f00 	cmp.w	r9, #0
 8028044:	d15c      	bne.n	8028100 <MoblePBADVProcessData+0x2dc>
 8028046:	ab03      	add	r3, sp, #12
 8028048:	f108 0034 	add.w	r0, r8, #52	; 0x34
 802804c:	f04f 0a01 	mov.w	sl, #1
 8028050:	9300      	str	r3, [sp, #0]
 8028052:	1d61      	adds	r1, r4, #5
 8028054:	f8cd a004 	str.w	sl, [sp, #4]
 8028058:	ab04      	add	r3, sp, #16
 802805a:	f1ab 0205 	sub.w	r2, fp, #5
 802805e:	4428      	add	r0, r5
 8028060:	f7f6 fcd6 	bl	801ea10 <MobleSARJoin>
 8028064:	4604      	mov	r4, r0
 8028066:	bbc8      	cbnz	r0, 80280dc <MoblePBADVProcessData+0x2b8>
 8028068:	f896 1029 	ldrb.w	r1, [r6, #41]	; 0x29
 802806c:	2903      	cmp	r1, #3
 802806e:	d105      	bne.n	802807c <MoblePBADVProcessData+0x258>
 8028070:	4603      	mov	r3, r0
 8028072:	4602      	mov	r2, r0
 8028074:	4638      	mov	r0, r7
 8028076:	f7f2 fe2f 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 802807a:	e7bf      	b.n	8027ffc <MoblePBADVProcessData+0x1d8>
 802807c:	4603      	mov	r3, r0
 802807e:	4602      	mov	r2, r0
 8028080:	2103      	movs	r1, #3
 8028082:	4638      	mov	r0, r7
 8028084:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8028088:	f7f2 fe26 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 802808c:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
 8028090:	f108 002c 	add.w	r0, r8, #44	; 0x2c
 8028094:	3301      	adds	r3, #1
 8028096:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 802809a:	4428      	add	r0, r5
 802809c:	f7ef fcc9 	bl	8017a32 <MoblePBADVEraseTransaction>
 80280a0:	f896 3164 	ldrb.w	r3, [r6, #356]	; 0x164
 80280a4:	b13b      	cbz	r3, 80280b6 <MoblePBADVProcessData+0x292>
 80280a6:	f8d6 3168 	ldr.w	r3, [r6, #360]	; 0x168
 80280aa:	f8d6 0178 	ldr.w	r0, [r6, #376]	; 0x178
 80280ae:	464a      	mov	r2, r9
 80280b0:	a904      	add	r1, sp, #16
 80280b2:	4798      	blx	r3
 80280b4:	e061      	b.n	802817a <MoblePBADVProcessData+0x356>
 80280b6:	f109 33ff 	add.w	r3, r9, #4294967295
 80280ba:	f89d 1010 	ldrb.w	r1, [sp, #16]
 80280be:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 80280c2:	b2db      	uxtb	r3, r3
 80280c4:	f10d 0211 	add.w	r2, sp, #17
 80280c8:	f7ff fe9e 	bl	8027e08 <MobleProvision_SetInputMessage>
 80280cc:	f896 0028 	ldrb.w	r0, [r6, #40]	; 0x28
 80280d0:	f7f9 faf0 	bl	80216b4 <MobleProvision_CompleteOperation>
 80280d4:	4638      	mov	r0, r7
 80280d6:	f7ff f8e3 	bl	80272a0 <MoblePBADVFireProvisionStateMach>
 80280da:	e04e      	b.n	802817a <MoblePBADVProcessData+0x356>
 80280dc:	2801      	cmp	r0, #1
 80280de:	f43f af0a 	beq.w	8027ef6 <MoblePBADVProcessData+0xd2>
 80280e2:	4638      	mov	r0, r7
 80280e4:	f7ff f86e 	bl	80271c4 <MoblePBADVStopProvisioning>
 80280e8:	e705      	b.n	8027ef6 <MoblePBADVProcessData+0xd2>
 80280ea:	461c      	mov	r4, r3
 80280ec:	e045      	b.n	802817a <MoblePBADVProcessData+0x356>
 80280ee:	b13b      	cbz	r3, 8028100 <MoblePBADVProcessData+0x2dc>
 80280f0:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 80280f4:	2b01      	cmp	r3, #1
 80280f6:	d102      	bne.n	80280fe <MoblePBADVProcessData+0x2da>
 80280f8:	f895 6029 	ldrb.w	r6, [r5, #41]	; 0x29
 80280fc:	b166      	cbz	r6, 8028118 <MoblePBADVProcessData+0x2f4>
 80280fe:	b91a      	cbnz	r2, 8028108 <MoblePBADVProcessData+0x2e4>
 8028100:	2401      	movs	r4, #1
 8028102:	e03a      	b.n	802817a <MoblePBADVProcessData+0x356>
 8028104:	2b00      	cmp	r3, #0
 8028106:	d1f3      	bne.n	80280f0 <MoblePBADVProcessData+0x2cc>
 8028108:	f895 619c 	ldrb.w	r6, [r5, #412]	; 0x19c
 802810c:	2e01      	cmp	r6, #1
 802810e:	d1f7      	bne.n	8028100 <MoblePBADVProcessData+0x2dc>
 8028110:	f895 319d 	ldrb.w	r3, [r5, #413]	; 0x19d
 8028114:	2b00      	cmp	r3, #0
 8028116:	d1f3      	bne.n	8028100 <MoblePBADVProcessData+0x2dc>
 8028118:	7963      	ldrb	r3, [r4, #5]
 802811a:	f003 0203 	and.w	r2, r3, #3
 802811e:	2a03      	cmp	r2, #3
 8028120:	f47f af0e 	bne.w	8027f40 <MoblePBADVProcessData+0x11c>
 8028124:	089b      	lsrs	r3, r3, #2
 8028126:	d1eb      	bne.n	8028100 <MoblePBADVProcessData+0x2dc>
 8028128:	f1b9 0f00 	cmp.w	r9, #0
 802812c:	d1e8      	bne.n	8028100 <MoblePBADVProcessData+0x2dc>
 802812e:	f1bb 0f14 	cmp.w	fp, #20
 8028132:	d9e5      	bls.n	8028100 <MoblePBADVProcessData+0x2dc>
 8028134:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8028138:	4346      	muls	r6, r0
 802813a:	f106 0010 	add.w	r0, r6, #16
 802813e:	2210      	movs	r2, #16
 8028140:	1da1      	adds	r1, r4, #6
 8028142:	4428      	add	r0, r5
 8028144:	f001 fb8c 	bl	8029860 <memcmp>
 8028148:	2800      	cmp	r0, #0
 802814a:	d1d9      	bne.n	8028100 <MoblePBADVProcessData+0x2dc>
 802814c:	f7f6 fffa 	bl	801f144 <MobleProvision_UnprovisionedNode_Init>
 8028150:	2302      	movs	r3, #2
 8028152:	4604      	mov	r4, r0
 8028154:	2800      	cmp	r0, #0
 8028156:	d1c8      	bne.n	80280ea <MoblePBADVProcessData+0x2c6>
 8028158:	eb05 0806 	add.w	r8, r5, r6
 802815c:	f106 0008 	add.w	r0, r6, #8
 8028160:	f888 3029 	strb.w	r3, [r8, #41]	; 0x29
 8028164:	f8c8 7024 	str.w	r7, [r8, #36]	; 0x24
 8028168:	464b      	mov	r3, r9
 802816a:	464a      	mov	r2, r9
 802816c:	2101      	movs	r1, #1
 802816e:	4428      	add	r0, r5
 8028170:	f7f2 fdb2 	bl	801acd8 <MoblePBADVSendControl.isra.0>
 8028174:	2301      	movs	r3, #1
 8028176:	f888 302c 	strb.w	r3, [r8, #44]	; 0x2c
 802817a:	4620      	mov	r0, r4
 802817c:	b025      	add	sp, #148	; 0x94
 802817e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028182 <MobleStackScanCallback>:
 8028182:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028186:	4689      	mov	r9, r1
 8028188:	f99d b030 	ldrsb.w	fp, [sp, #48]	; 0x30
 802818c:	4692      	mov	sl, r2
 802818e:	461f      	mov	r7, r3
 8028190:	4680      	mov	r8, r0
 8028192:	2800      	cmp	r0, #0
 8028194:	d044      	beq.n	8028220 <MobleStackScanCallback+0x9e>
 8028196:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 802819a:	3b02      	subs	r3, #2
 802819c:	2b01      	cmp	r3, #1
 802819e:	d83f      	bhi.n	8028220 <MobleStackScanCallback+0x9e>
 80281a0:	2f01      	cmp	r7, #1
 80281a2:	d93d      	bls.n	8028220 <MobleStackScanCallback+0x9e>
 80281a4:	2500      	movs	r5, #0
 80281a6:	f81a 4005 	ldrb.w	r4, [sl, r5]
 80281aa:	2c01      	cmp	r4, #1
 80281ac:	eb0a 0605 	add.w	r6, sl, r5
 80281b0:	d936      	bls.n	8028220 <MobleStackScanCallback+0x9e>
 80281b2:	1b7a      	subs	r2, r7, r5
 80281b4:	42a2      	cmp	r2, r4
 80281b6:	dd33      	ble.n	8028220 <MobleStackScanCallback+0x9e>
 80281b8:	7873      	ldrb	r3, [r6, #1]
 80281ba:	1e61      	subs	r1, r4, #1
 80281bc:	2b2a      	cmp	r3, #42	; 0x2a
 80281be:	b2c9      	uxtb	r1, r1
 80281c0:	d111      	bne.n	80281e6 <MobleStackScanCallback+0x64>
 80281c2:	3c0d      	subs	r4, #13
 80281c4:	2c13      	cmp	r4, #19
 80281c6:	d807      	bhi.n	80281d8 <MobleStackScanCallback+0x56>
 80281c8:	460a      	mov	r2, r1
 80281ca:	f8cd b000 	str.w	fp, [sp]
 80281ce:	2300      	movs	r3, #0
 80281d0:	1cb1      	adds	r1, r6, #2
 80281d2:	4648      	mov	r0, r9
 80281d4:	f7fa f8d4 	bl	8022380 <MobleStackProcessData>
 80281d8:	7833      	ldrb	r3, [r6, #0]
 80281da:	3301      	adds	r3, #1
 80281dc:	441d      	add	r5, r3
 80281de:	b2ed      	uxtb	r5, r5
 80281e0:	42af      	cmp	r7, r5
 80281e2:	d8e0      	bhi.n	80281a6 <MobleStackScanCallback+0x24>
 80281e4:	e01c      	b.n	8028220 <MobleStackScanCallback+0x9e>
 80281e6:	2b29      	cmp	r3, #41	; 0x29
 80281e8:	d10d      	bne.n	8028206 <MobleStackScanCallback+0x84>
 80281ea:	3c07      	subs	r4, #7
 80281ec:	2c19      	cmp	r4, #25
 80281ee:	d8f3      	bhi.n	80281d8 <MobleStackScanCallback+0x56>
 80281f0:	f898 31d4 	ldrb.w	r3, [r8, #468]	; 0x1d4
 80281f4:	2b01      	cmp	r3, #1
 80281f6:	d1ef      	bne.n	80281d8 <MobleStackScanCallback+0x56>
 80281f8:	460a      	mov	r2, r1
 80281fa:	f8d8 029c 	ldr.w	r0, [r8, #668]	; 0x29c
 80281fe:	1cb1      	adds	r1, r6, #2
 8028200:	f7ff fe10 	bl	8027e24 <MoblePBADVProcessData>
 8028204:	e7e8      	b.n	80281d8 <MobleStackScanCallback+0x56>
 8028206:	2b2b      	cmp	r3, #43	; 0x2b
 8028208:	465b      	mov	r3, fp
 802820a:	d104      	bne.n	8028216 <MobleStackScanCallback+0x94>
 802820c:	464a      	mov	r2, r9
 802820e:	1cb0      	adds	r0, r6, #2
 8028210:	f7f9 fabc 	bl	802178c <MobleStackProcessBeacon>
 8028214:	e7e0      	b.n	80281d8 <MobleStackScanCallback+0x56>
 8028216:	b2d2      	uxtb	r2, r2
 8028218:	4631      	mov	r1, r6
 802821a:	4648      	mov	r0, r9
 802821c:	f7f4 ffe9 	bl	801d1f2 <BLEMesh_CustomBeaconReceivedCallback>
 8028220:	b003      	add	sp, #12
 8028222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08028226 <BnrgmHealthModelSetFault>:
 8028226:	2a08      	cmp	r2, #8
 8028228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802822c:	4605      	mov	r5, r0
 802822e:	d902      	bls.n	8028236 <BnrgmHealthModelSetFault+0x10>
 8028230:	2004      	movs	r0, #4
 8028232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028236:	b352      	cbz	r2, 802828e <BnrgmHealthModelSetFault+0x68>
 8028238:	3a01      	subs	r2, #1
 802823a:	1e4e      	subs	r6, r1, #1
 802823c:	fa51 f482 	uxtab	r4, r1, r2
 8028240:	f04f 0801 	mov.w	r8, #1
 8028244:	f816 9f01 	ldrb.w	r9, [r6, #1]!
 8028248:	f1b9 0f00 	cmp.w	r9, #0
 802824c:	d014      	beq.n	8028278 <BnrgmHealthModelSetFault+0x52>
 802824e:	682b      	ldr	r3, [r5, #0]
 8028250:	6a5f      	ldr	r7, [r3, #36]	; 0x24
 8028252:	f107 0a4c 	add.w	sl, r7, #76	; 0x4c
 8028256:	2208      	movs	r2, #8
 8028258:	4649      	mov	r1, r9
 802825a:	4650      	mov	r0, sl
 802825c:	f7d7 ff90 	bl	8000180 <memchr>
 8028260:	4603      	mov	r3, r0
 8028262:	b958      	cbnz	r0, 802827c <BnrgmHealthModelSetFault+0x56>
 8028264:	f81a 2b01 	ldrb.w	r2, [sl], #1
 8028268:	b96a      	cbnz	r2, 8028286 <BnrgmHealthModelSetFault+0x60>
 802826a:	443b      	add	r3, r7
 802826c:	f883 904c 	strb.w	r9, [r3, #76]	; 0x4c
 8028270:	f883 9054 	strb.w	r9, [r3, #84]	; 0x54
 8028274:	f887 8049 	strb.w	r8, [r7, #73]	; 0x49
 8028278:	42a6      	cmp	r6, r4
 802827a:	d1e3      	bne.n	8028244 <BnrgmHealthModelSetFault+0x1e>
 802827c:	4628      	mov	r0, r5
 802827e:	f7ef fd85 	bl	8017d8c <BnrgmHealthModelSetPublishTimer.isra.0>
 8028282:	2000      	movs	r0, #0
 8028284:	e7d5      	b.n	8028232 <BnrgmHealthModelSetFault+0xc>
 8028286:	3301      	adds	r3, #1
 8028288:	2b08      	cmp	r3, #8
 802828a:	d1eb      	bne.n	8028264 <BnrgmHealthModelSetFault+0x3e>
 802828c:	e7d0      	b.n	8028230 <BnrgmHealthModelSetFault+0xa>
 802828e:	2003      	movs	r0, #3
 8028290:	e7cf      	b.n	8028232 <BnrgmHealthModelSetFault+0xc>
	...

08028294 <BLEMesh_SetFault>:
 8028294:	b410      	push	{r4}
 8028296:	b198      	cbz	r0, 80282c0 <BLEMesh_SetFault+0x2c>
 8028298:	1e4b      	subs	r3, r1, #1
 802829a:	2b07      	cmp	r3, #7
 802829c:	d810      	bhi.n	80282c0 <BLEMesh_SetFault+0x2c>
 802829e:	1e43      	subs	r3, r0, #1
 80282a0:	1dc2      	adds	r2, r0, #7
 80282a2:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80282a6:	2c32      	cmp	r4, #50	; 0x32
 80282a8:	d80a      	bhi.n	80282c0 <BLEMesh_SetFault+0x2c>
 80282aa:	4293      	cmp	r3, r2
 80282ac:	d1f9      	bne.n	80282a2 <BLEMesh_SetFault+0xe>
 80282ae:	4b06      	ldr	r3, [pc, #24]	; (80282c8 <BLEMesh_SetFault+0x34>)
 80282b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80282b4:	460a      	mov	r2, r1
 80282b6:	4601      	mov	r1, r0
 80282b8:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 80282bc:	f7ff bfb3 	b.w	8028226 <BnrgmHealthModelSetFault>
 80282c0:	2003      	movs	r0, #3
 80282c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80282c6:	4770      	bx	lr
 80282c8:	20002514 	.word	0x20002514

080282cc <BnrgmHealthModelClearFault>:
 80282cc:	2a08      	cmp	r2, #8
 80282ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80282d0:	4606      	mov	r6, r0
 80282d2:	d833      	bhi.n	802833c <BnrgmHealthModelClearFault+0x70>
 80282d4:	b3a2      	cbz	r2, 8028340 <BnrgmHealthModelClearFault+0x74>
 80282d6:	2300      	movs	r3, #0
 80282d8:	3901      	subs	r1, #1
 80282da:	461d      	mov	r5, r3
 80282dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80282e0:	b980      	cbnz	r0, 8028304 <BnrgmHealthModelClearFault+0x38>
 80282e2:	3301      	adds	r3, #1
 80282e4:	b2db      	uxtb	r3, r3
 80282e6:	429a      	cmp	r2, r3
 80282e8:	d1f8      	bne.n	80282dc <BnrgmHealthModelClearFault+0x10>
 80282ea:	2500      	movs	r5, #0
 80282ec:	6833      	ldr	r3, [r6, #0]
 80282ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80282f0:	195a      	adds	r2, r3, r5
 80282f2:	f892 404c 	ldrb.w	r4, [r2, #76]	; 0x4c
 80282f6:	b1b4      	cbz	r4, 8028326 <BnrgmHealthModelClearFault+0x5a>
 80282f8:	2201      	movs	r2, #1
 80282fa:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 80282fe:	2400      	movs	r4, #0
 8028300:	4620      	mov	r0, r4
 8028302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028304:	6830      	ldr	r0, [r6, #0]
 8028306:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8028308:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 802830c:	3454      	adds	r4, #84	; 0x54
 802830e:	f810 7b01 	ldrb.w	r7, [r0], #1
 8028312:	f891 c000 	ldrb.w	ip, [r1]
 8028316:	45bc      	cmp	ip, r7
 8028318:	bf04      	itt	eq
 802831a:	f800 5c01 	strbeq.w	r5, [r0, #-1]
 802831e:	71c5      	strbeq	r5, [r0, #7]
 8028320:	4284      	cmp	r4, r0
 8028322:	d1f4      	bne.n	802830e <BnrgmHealthModelClearFault+0x42>
 8028324:	e7dd      	b.n	80282e2 <BnrgmHealthModelClearFault+0x16>
 8028326:	2d07      	cmp	r5, #7
 8028328:	d104      	bne.n	8028334 <BnrgmHealthModelClearFault+0x68>
 802832a:	f883 4049 	strb.w	r4, [r3, #73]	; 0x49
 802832e:	4630      	mov	r0, r6
 8028330:	f7ef fd2c 	bl	8017d8c <BnrgmHealthModelSetPublishTimer.isra.0>
 8028334:	3501      	adds	r5, #1
 8028336:	2d08      	cmp	r5, #8
 8028338:	d1d8      	bne.n	80282ec <BnrgmHealthModelClearFault+0x20>
 802833a:	e7e1      	b.n	8028300 <BnrgmHealthModelClearFault+0x34>
 802833c:	2404      	movs	r4, #4
 802833e:	e7df      	b.n	8028300 <BnrgmHealthModelClearFault+0x34>
 8028340:	2403      	movs	r4, #3
 8028342:	e7dd      	b.n	8028300 <BnrgmHealthModelClearFault+0x34>

08028344 <BLEMesh_ClearFault>:
 8028344:	460a      	mov	r2, r1
 8028346:	b130      	cbz	r0, 8028356 <BLEMesh_ClearFault+0x12>
 8028348:	b129      	cbz	r1, 8028356 <BLEMesh_ClearFault+0x12>
 802834a:	4b04      	ldr	r3, [pc, #16]	; (802835c <BLEMesh_ClearFault+0x18>)
 802834c:	4601      	mov	r1, r0
 802834e:	f8d3 06f0 	ldr.w	r0, [r3, #1776]	; 0x6f0
 8028352:	f7ff bfbb 	b.w	80282cc <BnrgmHealthModelClearFault>
 8028356:	2002      	movs	r0, #2
 8028358:	4770      	bx	lr
 802835a:	bf00      	nop
 802835c:	20002514 	.word	0x20002514

08028360 <Test_UpperTester_Set10>:
 8028360:	784b      	ldrb	r3, [r1, #1]
 8028362:	2b31      	cmp	r3, #49	; 0x31
 8028364:	4608      	mov	r0, r1
 8028366:	d102      	bne.n	802836e <Test_UpperTester_Set10+0xe>
 8028368:	2101      	movs	r1, #1
 802836a:	f7ff bf93 	b.w	8028294 <BLEMesh_SetFault>
 802836e:	2b30      	cmp	r3, #48	; 0x30
 8028370:	d102      	bne.n	8028378 <Test_UpperTester_Set10+0x18>
 8028372:	2101      	movs	r1, #1
 8028374:	f7ff bfe6 	b.w	8028344 <BLEMesh_ClearFault>
 8028378:	2000      	movs	r0, #0
 802837a:	4770      	bx	lr

0802837c <BLEMesh_SetSIGModelsCbMap>:
 802837c:	4b04      	ldr	r3, [pc, #16]	; (8028390 <BLEMesh_SetSIGModelsCbMap+0x14>)
 802837e:	2800      	cmp	r0, #0
 8028380:	f8c3 0a28 	str.w	r0, [r3, #2600]	; 0xa28
 8028384:	f8c3 1a34 	str.w	r1, [r3, #2612]	; 0xa34
 8028388:	bf0c      	ite	eq
 802838a:	2003      	moveq	r0, #3
 802838c:	2000      	movne	r0, #0
 802838e:	4770      	bx	lr
 8028390:	20002514 	.word	0x20002514

08028394 <MobleSIGModelReplyStatus>:
 8028394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028398:	ed2d 8b02 	vpush	{d8}
 802839c:	b08b      	sub	sp, #44	; 0x2c
 802839e:	ee08 0a10 	vmov	s16, r0
 80283a2:	20a7      	movs	r0, #167	; 0xa7
 80283a4:	460d      	mov	r5, r1
 80283a6:	4617      	mov	r7, r2
 80283a8:	9305      	str	r3, [sp, #20]
 80283aa:	f7f2 fd79 	bl	801aea0 <MobleMemAlloc>
 80283ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80283b0:	f8df b10c 	ldr.w	fp, [pc, #268]	; 80284c0 <MobleSIGModelReplyStatus+0x12c>
 80283b4:	4606      	mov	r6, r0
 80283b6:	f103 0020 	add.w	r0, r3, #32
 80283ba:	f7f2 fd71 	bl	801aea0 <MobleMemAlloc>
 80283be:	88ab      	ldrh	r3, [r5, #4]
 80283c0:	8103      	strh	r3, [r0, #8]
 80283c2:	88eb      	ldrh	r3, [r5, #6]
 80283c4:	8143      	strh	r3, [r0, #10]
 80283c6:	7a2b      	ldrb	r3, [r5, #8]
 80283c8:	70c3      	strb	r3, [r0, #3]
 80283ca:	7a6b      	ldrb	r3, [r5, #9]
 80283cc:	7583      	strb	r3, [r0, #22]
 80283ce:	7aeb      	ldrb	r3, [r5, #11]
 80283d0:	7403      	strb	r3, [r0, #16]
 80283d2:	7aab      	ldrb	r3, [r5, #10]
 80283d4:	f8db 2a28 	ldr.w	r2, [fp, #2600]	; 0xa28
 80283d8:	7303      	strb	r3, [r0, #12]
 80283da:	4604      	mov	r4, r0
 80283dc:	f8cb 2a24 	str.w	r2, [fp, #2596]	; 0xa24
 80283e0:	f04f 0800 	mov.w	r8, #0
 80283e4:	f60b 292c 	addw	r9, fp, #2604	; 0xa2c
 80283e8:	f8db 2a34 	ldr.w	r2, [fp, #2612]	; 0xa34
 80283ec:	f8db 1a24 	ldr.w	r1, [fp, #2596]	; 0xa24
 80283f0:	4542      	cmp	r2, r8
 80283f2:	d846      	bhi.n	8028482 <MobleSIGModelReplyStatus+0xee>
 80283f4:	f04f 0802 	mov.w	r8, #2
 80283f8:	f8db 1a30 	ldr.w	r1, [fp, #2608]	; 0xa30
 80283fc:	f8bb 2a2c 	ldrh.w	r2, [fp, #2604]	; 0xa2c
 8028400:	9206      	str	r2, [sp, #24]
 8028402:	4638      	mov	r0, r7
 8028404:	9104      	str	r1, [sp, #16]
 8028406:	f7f8 fb45 	bl	8020a94 <MobleModelGetResponseOpCode>
 802840a:	46b2      	mov	sl, r6
 802840c:	9a06      	ldr	r2, [sp, #24]
 802840e:	9904      	ldr	r1, [sp, #16]
 8028410:	f84a 0b08 	str.w	r0, [sl], #8
 8028414:	4681      	mov	r9, r0
 8028416:	4638      	mov	r0, r7
 8028418:	9207      	str	r2, [sp, #28]
 802841a:	9106      	str	r1, [sp, #24]
 802841c:	f7f8 fb54 	bl	8020ac8 <MobleModelGetMinResponseLength>
 8028420:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8028424:	9004      	str	r0, [sp, #16]
 8028426:	4638      	mov	r0, r7
 8028428:	f7f8 fb68 	bl	8020afc <MobleModelGetMaxResponseLength>
 802842c:	2200      	movs	r2, #0
 802842e:	f8db 3a24 	ldr.w	r3, [fp, #2596]	; 0xa24
 8028432:	9202      	str	r2, [sp, #8]
 8028434:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8028436:	9201      	str	r2, [sp, #4]
 8028438:	9a05      	ldr	r2, [sp, #20]
 802843a:	9200      	str	r2, [sp, #0]
 802843c:	f8d3 b004 	ldr.w	fp, [r3, #4]
 8028440:	4652      	mov	r2, sl
 8028442:	ab09      	add	r3, sp, #36	; 0x24
 8028444:	4607      	mov	r7, r0
 8028446:	4649      	mov	r1, r9
 8028448:	4628      	mov	r0, r5
 802844a:	47d8      	blx	fp
 802844c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802844e:	9a04      	ldr	r2, [sp, #16]
 8028450:	429a      	cmp	r2, r3
 8028452:	d92e      	bls.n	80284b2 <MobleSIGModelReplyStatus+0x11e>
 8028454:	9209      	str	r2, [sp, #36]	; 0x24
 8028456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028458:	f8c6 30a3 	str.w	r3, [r6, #163]	; 0xa3
 802845c:	4622      	mov	r2, r4
 802845e:	4633      	mov	r3, r6
 8028460:	2100      	movs	r1, #0
 8028462:	ee18 0a10 	vmov	r0, s16
 8028466:	f7fa fb3b 	bl	8022ae0 <MobleModelSendPacket>
 802846a:	4630      	mov	r0, r6
 802846c:	f7f2 fda2 	bl	801afb4 <MobleMemFree>
 8028470:	4620      	mov	r0, r4
 8028472:	f7f2 fd9f 	bl	801afb4 <MobleMemFree>
 8028476:	4640      	mov	r0, r8
 8028478:	b00b      	add	sp, #44	; 0x2c
 802847a:	ecbd 8b02 	vpop	{d8}
 802847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028482:	680a      	ldr	r2, [r1, #0]
 8028484:	480d      	ldr	r0, [pc, #52]	; (80284bc <MobleSIGModelReplyStatus+0x128>)
 8028486:	4649      	mov	r1, r9
 8028488:	4790      	blx	r2
 802848a:	f8bb 2a2c 	ldrh.w	r2, [fp, #2604]	; 0xa2c
 802848e:	f8db 1a30 	ldr.w	r1, [fp, #2608]	; 0xa30
 8028492:	4638      	mov	r0, r7
 8028494:	f7f8 fa9f 	bl	80209d6 <MobleModelCheckOpcodeValidity>
 8028498:	2801      	cmp	r0, #1
 802849a:	d007      	beq.n	80284ac <MobleSIGModelReplyStatus+0x118>
 802849c:	f8db 2a24 	ldr.w	r2, [fp, #2596]	; 0xa24
 80284a0:	320c      	adds	r2, #12
 80284a2:	f8cb 2a24 	str.w	r2, [fp, #2596]	; 0xa24
 80284a6:	f108 0801 	add.w	r8, r8, #1
 80284aa:	e79d      	b.n	80283e8 <MobleSIGModelReplyStatus+0x54>
 80284ac:	f04f 0800 	mov.w	r8, #0
 80284b0:	e7a2      	b.n	80283f8 <MobleSIGModelReplyStatus+0x64>
 80284b2:	42bb      	cmp	r3, r7
 80284b4:	bf88      	it	hi
 80284b6:	9709      	strhi	r7, [sp, #36]	; 0x24
 80284b8:	e7cd      	b.n	8028456 <MobleSIGModelReplyStatus+0xc2>
 80284ba:	bf00      	nop
 80284bc:	20002f44 	.word	0x20002f44
 80284c0:	20002514 	.word	0x20002514

080284c4 <Model_SendResponse>:
 80284c4:	b513      	push	{r0, r1, r4, lr}
 80284c6:	4c07      	ldr	r4, [pc, #28]	; (80284e4 <Model_SendResponse+0x20>)
 80284c8:	f8d4 46f0 	ldr.w	r4, [r4, #1776]	; 0x6f0
 80284cc:	b144      	cbz	r4, 80284e0 <Model_SendResponse+0x1c>
 80284ce:	9300      	str	r3, [sp, #0]
 80284d0:	4613      	mov	r3, r2
 80284d2:	460a      	mov	r2, r1
 80284d4:	4601      	mov	r1, r0
 80284d6:	4620      	mov	r0, r4
 80284d8:	f7ff ff5c 	bl	8028394 <MobleSIGModelReplyStatus>
 80284dc:	b002      	add	sp, #8
 80284de:	bd10      	pop	{r4, pc}
 80284e0:	2002      	movs	r0, #2
 80284e2:	e7fb      	b.n	80284dc <Model_SendResponse+0x18>
 80284e4:	20002514 	.word	0x20002514

080284e8 <MobleLibraryGenericSendData>:
 80284e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80284ec:	4607      	mov	r7, r0
 80284ee:	20a7      	movs	r0, #167	; 0xa7
 80284f0:	4616      	mov	r6, r2
 80284f2:	468a      	mov	sl, r1
 80284f4:	4699      	mov	r9, r3
 80284f6:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 80284fa:	f7f2 fcd1 	bl	801aea0 <MobleMemAlloc>
 80284fe:	4605      	mov	r5, r0
 8028500:	f108 0020 	add.w	r0, r8, #32
 8028504:	f7f2 fccc 	bl	801aea0 <MobleMemAlloc>
 8028508:	683b      	ldr	r3, [r7, #0]
 802850a:	f8a0 a008 	strh.w	sl, [r0, #8]
 802850e:	885a      	ldrh	r2, [r3, #2]
 8028510:	4416      	add	r6, r2
 8028512:	8146      	strh	r6, [r0, #10]
 8028514:	2600      	movs	r6, #0
 8028516:	4604      	mov	r4, r0
 8028518:	7406      	strb	r6, [r0, #16]
 802851a:	7306      	strb	r6, [r0, #12]
 802851c:	8246      	strh	r6, [r0, #18]
 802851e:	81c6      	strh	r6, [r0, #14]
 8028520:	b1e5      	cbz	r5, 802855c <MobleLibraryGenericSendData+0x74>
 8028522:	9908      	ldr	r1, [sp, #32]
 8028524:	f8c5 9000 	str.w	r9, [r5]
 8028528:	f8c5 80a3 	str.w	r8, [r5, #163]	; 0xa3
 802852c:	4642      	mov	r2, r8
 802852e:	f105 0008 	add.w	r0, r5, #8
 8028532:	f7f2 fe68 	bl	801b206 <MobleOutputStreamPutArray>
 8028536:	f1b8 0f9a 	cmp.w	r8, #154	; 0x9a
 802853a:	d811      	bhi.n	8028560 <MobleLibraryGenericSendData+0x78>
 802853c:	4631      	mov	r1, r6
 802853e:	462b      	mov	r3, r5
 8028540:	4622      	mov	r2, r4
 8028542:	4638      	mov	r0, r7
 8028544:	f7fa facc 	bl	8022ae0 <MobleModelSendPacket>
 8028548:	4606      	mov	r6, r0
 802854a:	4628      	mov	r0, r5
 802854c:	f7f2 fd32 	bl	801afb4 <MobleMemFree>
 8028550:	4620      	mov	r0, r4
 8028552:	f7f2 fd2f 	bl	801afb4 <MobleMemFree>
 8028556:	4630      	mov	r0, r6
 8028558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802855c:	2604      	movs	r6, #4
 802855e:	e7f4      	b.n	802854a <MobleLibraryGenericSendData+0x62>
 8028560:	2602      	movs	r6, #2
 8028562:	e7f2      	b.n	802854a <MobleLibraryGenericSendData+0x62>

08028564 <BLEMesh_SetRemoteData>:
 8028564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028566:	f89d e01c 	ldrb.w	lr, [sp, #28]
 802856a:	9f05      	ldr	r7, [sp, #20]
 802856c:	f89d c018 	ldrb.w	ip, [sp, #24]
 8028570:	f1be 0f01 	cmp.w	lr, #1
 8028574:	d106      	bne.n	8028584 <BLEMesh_SetRemoteData+0x20>
 8028576:	f8cd c018 	str.w	ip, [sp, #24]
 802857a:	b2d2      	uxtb	r2, r2
 802857c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028580:	f7fd b900 	b.w	8025784 <MobleLibrarySendData>
 8028584:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 8028588:	9305      	str	r3, [sp, #20]
 802858a:	4613      	mov	r3, r2
 802858c:	460a      	mov	r2, r1
 802858e:	4601      	mov	r1, r0
 8028590:	4803      	ldr	r0, [pc, #12]	; (80285a0 <BLEMesh_SetRemoteData+0x3c>)
 8028592:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028596:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 802859a:	f7ff bfa5 	b.w	80284e8 <MobleLibraryGenericSendData>
 802859e:	bf00      	nop
 80285a0:	20002514 	.word	0x20002514

080285a4 <MobleLibraryGenericSendRemoteData>:
 80285a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80285a8:	4698      	mov	r8, r3
 80285aa:	6803      	ldr	r3, [r0, #0]
 80285ac:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80285ae:	4691      	mov	r9, r2
 80285b0:	4606      	mov	r6, r0
 80285b2:	460a      	mov	r2, r1
 80285b4:	7f18      	ldrb	r0, [r3, #28]
 80285b6:	4649      	mov	r1, r9
 80285b8:	f7f2 f850 	bl	801a65c <MoblePalCrypto_GetModelPublicationParameters>
 80285bc:	8883      	ldrh	r3, [r0, #4]
 80285be:	4605      	mov	r5, r0
 80285c0:	2b00      	cmp	r3, #0
 80285c2:	d042      	beq.n	802864a <MobleLibraryGenericSendRemoteData+0xa6>
 80285c4:	f107 0020 	add.w	r0, r7, #32
 80285c8:	f7f2 fc6a 	bl	801aea0 <MobleMemAlloc>
 80285cc:	4604      	mov	r4, r0
 80285ce:	b950      	cbnz	r0, 80285e6 <MobleLibraryGenericSendRemoteData+0x42>
 80285d0:	2500      	movs	r5, #0
 80285d2:	2604      	movs	r6, #4
 80285d4:	4628      	mov	r0, r5
 80285d6:	f7f2 fced 	bl	801afb4 <MobleMemFree>
 80285da:	4620      	mov	r0, r4
 80285dc:	f7f2 fcea 	bl	801afb4 <MobleMemFree>
 80285e0:	4630      	mov	r0, r6
 80285e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80285e6:	2220      	movs	r2, #32
 80285e8:	2100      	movs	r1, #0
 80285ea:	f001 f963 	bl	80298b4 <memset>
 80285ee:	f8a4 900a 	strh.w	r9, [r4, #10]
 80285f2:	f8b5 9006 	ldrh.w	r9, [r5, #6]
 80285f6:	88ab      	ldrh	r3, [r5, #4]
 80285f8:	8123      	strh	r3, [r4, #8]
 80285fa:	f8a4 900e 	strh.w	r9, [r4, #14]
 80285fe:	4648      	mov	r0, r9
 8028600:	f7f1 fc10 	bl	8019e24 <MoblePalCryptoGetNetKeyIndexforAppKeyIndex>
 8028604:	8260      	strh	r0, [r4, #18]
 8028606:	f7f2 f86d 	bl	801a6e4 <MoblePalCrypto_GetNetKeyOffset_NetKeyIndex>
 802860a:	7420      	strb	r0, [r4, #16]
 802860c:	4648      	mov	r0, r9
 802860e:	f7f2 f883 	bl	801a718 <MoblePalCrypto_GetAppKeyOffset_AppKeyIndex>
 8028612:	7320      	strb	r0, [r4, #12]
 8028614:	20a7      	movs	r0, #167	; 0xa7
 8028616:	f7f2 fc43 	bl	801aea0 <MobleMemAlloc>
 802861a:	4605      	mov	r5, r0
 802861c:	2800      	cmp	r0, #0
 802861e:	d0d7      	beq.n	80285d0 <MobleLibraryGenericSendRemoteData+0x2c>
 8028620:	f8c0 8000 	str.w	r8, [r0]
 8028624:	f8c0 70a3 	str.w	r7, [r0, #163]	; 0xa3
 8028628:	9908      	ldr	r1, [sp, #32]
 802862a:	463a      	mov	r2, r7
 802862c:	3008      	adds	r0, #8
 802862e:	f7f2 fdea 	bl	801b206 <MobleOutputStreamPutArray>
 8028632:	2f9a      	cmp	r7, #154	; 0x9a
 8028634:	d807      	bhi.n	8028646 <MobleLibraryGenericSendRemoteData+0xa2>
 8028636:	4630      	mov	r0, r6
 8028638:	462b      	mov	r3, r5
 802863a:	4622      	mov	r2, r4
 802863c:	2100      	movs	r1, #0
 802863e:	f7fa fa4f 	bl	8022ae0 <MobleModelSendPacket>
 8028642:	4606      	mov	r6, r0
 8028644:	e7c6      	b.n	80285d4 <MobleLibraryGenericSendRemoteData+0x30>
 8028646:	2602      	movs	r6, #2
 8028648:	e7c4      	b.n	80285d4 <MobleLibraryGenericSendRemoteData+0x30>
 802864a:	2602      	movs	r6, #2
 802864c:	e7c8      	b.n	80285e0 <MobleLibraryGenericSendRemoteData+0x3c>
	...

08028650 <BLEMesh_SetRemotePublication>:
 8028650:	b5f0      	push	{r4, r5, r6, r7, lr}
 8028652:	f89d e01c 	ldrb.w	lr, [sp, #28]
 8028656:	9f05      	ldr	r7, [sp, #20]
 8028658:	f89d c018 	ldrb.w	ip, [sp, #24]
 802865c:	f1be 0f01 	cmp.w	lr, #1
 8028660:	d106      	bne.n	8028670 <BLEMesh_SetRemotePublication+0x20>
 8028662:	f8cd c018 	str.w	ip, [sp, #24]
 8028666:	b2d2      	uxtb	r2, r2
 8028668:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 802866c:	f7fd b92a 	b.w	80258c4 <MobleLibrarySendRemoteData>
 8028670:	e9cd 7c06 	strd	r7, ip, [sp, #24]
 8028674:	9305      	str	r3, [sp, #20]
 8028676:	4613      	mov	r3, r2
 8028678:	460a      	mov	r2, r1
 802867a:	4601      	mov	r1, r0
 802867c:	4803      	ldr	r0, [pc, #12]	; (802868c <BLEMesh_SetRemotePublication+0x3c>)
 802867e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8028682:	f8d0 06f0 	ldr.w	r0, [r0, #1776]	; 0x6f0
 8028686:	f7ff bf8d 	b.w	80285a4 <MobleLibraryGenericSendRemoteData>
 802868a:	bf00      	nop
 802868c:	20002514 	.word	0x20002514

08028690 <Test_UpperTester_ProcessData>:
 8028690:	4b05      	ldr	r3, [pc, #20]	; (80286a8 <Test_UpperTester_ProcessData+0x18>)
 8028692:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8028696:	b410      	push	{r4}
 8028698:	460c      	mov	r4, r1
 802869a:	4620      	mov	r0, r4
 802869c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80286a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80286a4:	4611      	mov	r1, r2
 80286a6:	4718      	bx	r3
 80286a8:	08032454 	.word	0x08032454

080286ac <MobleUpperTesterDataProcess>:
 80286ac:	4b02      	ldr	r3, [pc, #8]	; (80286b8 <MobleUpperTesterDataProcess+0xc>)
 80286ae:	460a      	mov	r2, r1
 80286b0:	f8d3 16f0 	ldr.w	r1, [r3, #1776]	; 0x6f0
 80286b4:	f7ff bfec 	b.w	8028690 <Test_UpperTester_ProcessData>
 80286b8:	20002514 	.word	0x20002514

080286bc <BLEMesh_UpperTesterDataProcess>:
 80286bc:	f7ff bff6 	b.w	80286ac <MobleUpperTesterDataProcess>

080286c0 <Test_Upper_Tester_PrintStringCb>:
 80286c0:	b40f      	push	{r0, r1, r2, r3}
 80286c2:	b004      	add	sp, #16
 80286c4:	4770      	bx	lr
	...

080286c8 <Test_UpperTester_Print01>:
 80286c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80286cc:	4605      	mov	r5, r0
 80286ce:	485a      	ldr	r0, [pc, #360]	; (8028838 <Test_UpperTester_Print01+0x170>)
 80286d0:	f7ff fff6 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80286d4:	682b      	ldr	r3, [r5, #0]
 80286d6:	781b      	ldrb	r3, [r3, #0]
 80286d8:	2b00      	cmp	r3, #0
 80286da:	d038      	beq.n	802874e <Test_UpperTester_Print01+0x86>
 80286dc:	4857      	ldr	r0, [pc, #348]	; (802883c <Test_UpperTester_Print01+0x174>)
 80286de:	4f58      	ldr	r7, [pc, #352]	; (8028840 <Test_UpperTester_Print01+0x178>)
 80286e0:	f7ff ffee 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80286e4:	682b      	ldr	r3, [r5, #0]
 80286e6:	885b      	ldrh	r3, [r3, #2]
 80286e8:	f88d 3005 	strb.w	r3, [sp, #5]
 80286ec:	0a1a      	lsrs	r2, r3, #8
 80286ee:	2102      	movs	r1, #2
 80286f0:	a801      	add	r0, sp, #4
 80286f2:	f88d 2004 	strb.w	r2, [sp, #4]
 80286f6:	f7e9 ffc1 	bl	801267c <BLEMesh_PrintDataCb>
 80286fa:	f04f 0a00 	mov.w	sl, #0
 80286fe:	f207 4824 	addw	r8, r7, #1060	; 0x424
 8028702:	682b      	ldr	r3, [r5, #0]
 8028704:	6a1b      	ldr	r3, [r3, #32]
 8028706:	f893 31f8 	ldrb.w	r3, [r3, #504]	; 0x1f8
 802870a:	fa5f f48a 	uxtb.w	r4, sl
 802870e:	42a3      	cmp	r3, r4
 8028710:	d81f      	bhi.n	8028752 <Test_UpperTester_Print01+0x8a>
 8028712:	f8df a154 	ldr.w	sl, [pc, #340]	; 8028868 <Test_UpperTester_Print01+0x1a0>
 8028716:	f8df 9154 	ldr.w	r9, [pc, #340]	; 802886c <Test_UpperTester_Print01+0x1a4>
 802871a:	f04f 0800 	mov.w	r8, #0
 802871e:	682b      	ldr	r3, [r5, #0]
 8028720:	6a1b      	ldr	r3, [r3, #32]
 8028722:	f893 31f9 	ldrb.w	r3, [r3, #505]	; 0x1f9
 8028726:	fa5f f488 	uxtb.w	r4, r8
 802872a:	42a3      	cmp	r3, r4
 802872c:	d85b      	bhi.n	80287e6 <Test_UpperTester_Print01+0x11e>
 802872e:	4845      	ldr	r0, [pc, #276]	; (8028844 <Test_UpperTester_Print01+0x17c>)
 8028730:	f7ff ffc6 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028734:	4844      	ldr	r0, [pc, #272]	; (8028848 <Test_UpperTester_Print01+0x180>)
 8028736:	2110      	movs	r1, #16
 8028738:	f7e9 ffa0 	bl	801267c <BLEMesh_PrintDataCb>
 802873c:	f8d7 1658 	ldr.w	r1, [r7, #1624]	; 0x658
 8028740:	4842      	ldr	r0, [pc, #264]	; (802884c <Test_UpperTester_Print01+0x184>)
 8028742:	f7ff ffbd 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028746:	2000      	movs	r0, #0
 8028748:	b003      	add	sp, #12
 802874a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802874e:	4840      	ldr	r0, [pc, #256]	; (8028850 <Test_UpperTester_Print01+0x188>)
 8028750:	e7c5      	b.n	80286de <Test_UpperTester_Print01+0x16>
 8028752:	267c      	movs	r6, #124	; 0x7c
 8028754:	fb06 7904 	mla	r9, r6, r4, r7
 8028758:	483e      	ldr	r0, [pc, #248]	; (8028854 <Test_UpperTester_Print01+0x18c>)
 802875a:	4621      	mov	r1, r4
 802875c:	f7ff ffb0 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028760:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 8028764:	2b01      	cmp	r3, #1
 8028766:	bf0c      	ite	eq
 8028768:	4620      	moveq	r0, r4
 802876a:	2000      	movne	r0, #0
 802876c:	b200      	sxth	r0, r0
 802876e:	ebc0 1040 	rsb	r0, r0, r0, lsl #5
 8028772:	2110      	movs	r1, #16
 8028774:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8028778:	f7e9 ff80 	bl	801267c <BLEMesh_PrintDataCb>
 802877c:	4836      	ldr	r0, [pc, #216]	; (8028858 <Test_UpperTester_Print01+0x190>)
 802877e:	4621      	mov	r1, r4
 8028780:	f7ff ff9e 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028784:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 8028788:	2b01      	cmp	r3, #1
 802878a:	bf0c      	ite	eq
 802878c:	4620      	moveq	r0, r4
 802878e:	2000      	movne	r0, #0
 8028790:	233c      	movs	r3, #60	; 0x3c
 8028792:	fb16 3000 	smlabb	r0, r6, r0, r3
 8028796:	2110      	movs	r1, #16
 8028798:	4440      	add	r0, r8
 802879a:	f7e9 ff6f 	bl	801267c <BLEMesh_PrintDataCb>
 802879e:	482f      	ldr	r0, [pc, #188]	; (802885c <Test_UpperTester_Print01+0x194>)
 80287a0:	4621      	mov	r1, r4
 80287a2:	f7ff ff8d 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80287a6:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 80287aa:	2b01      	cmp	r3, #1
 80287ac:	bf0c      	ite	eq
 80287ae:	4620      	moveq	r0, r4
 80287b0:	2000      	movne	r0, #0
 80287b2:	2328      	movs	r3, #40	; 0x28
 80287b4:	fb16 3000 	smlabb	r0, r6, r0, r3
 80287b8:	2108      	movs	r1, #8
 80287ba:	4440      	add	r0, r8
 80287bc:	f7e9 ff5e 	bl	801267c <BLEMesh_PrintDataCb>
 80287c0:	4621      	mov	r1, r4
 80287c2:	4827      	ldr	r0, [pc, #156]	; (8028860 <Test_UpperTester_Print01+0x198>)
 80287c4:	f7ff ff7c 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80287c8:	f899 3445 	ldrb.w	r3, [r9, #1093]	; 0x445
 80287cc:	2b01      	cmp	r3, #1
 80287ce:	bf18      	it	ne
 80287d0:	2400      	movne	r4, #0
 80287d2:	2038      	movs	r0, #56	; 0x38
 80287d4:	fb16 0004 	smlabb	r0, r6, r4, r0
 80287d8:	2101      	movs	r1, #1
 80287da:	4440      	add	r0, r8
 80287dc:	f7e9 ff4e 	bl	801267c <BLEMesh_PrintDataCb>
 80287e0:	f10a 0a01 	add.w	sl, sl, #1
 80287e4:	e78d      	b.n	8028702 <Test_UpperTester_Print01+0x3a>
 80287e6:	262c      	movs	r6, #44	; 0x2c
 80287e8:	fb06 7b04 	mla	fp, r6, r4, r7
 80287ec:	4650      	mov	r0, sl
 80287ee:	4621      	mov	r1, r4
 80287f0:	f7ff ff66 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80287f4:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	; 0x5b8
 80287f8:	2b01      	cmp	r3, #1
 80287fa:	bf0c      	ite	eq
 80287fc:	4620      	moveq	r0, r4
 80287fe:	2000      	movne	r0, #0
 8028800:	f44f 73cc 	mov.w	r3, #408	; 0x198
 8028804:	fb16 3000 	smlabb	r0, r6, r0, r3
 8028808:	2101      	movs	r1, #1
 802880a:	4448      	add	r0, r9
 802880c:	f7e9 ff36 	bl	801267c <BLEMesh_PrintDataCb>
 8028810:	4621      	mov	r1, r4
 8028812:	4814      	ldr	r0, [pc, #80]	; (8028864 <Test_UpperTester_Print01+0x19c>)
 8028814:	f7ff ff54 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028818:	f89b 35b8 	ldrb.w	r3, [fp, #1464]	; 0x5b8
 802881c:	2b01      	cmp	r3, #1
 802881e:	bf18      	it	ne
 8028820:	2400      	movne	r4, #0
 8028822:	f44f 70ba 	mov.w	r0, #372	; 0x174
 8028826:	fb16 0004 	smlabb	r0, r6, r4, r0
 802882a:	2110      	movs	r1, #16
 802882c:	4448      	add	r0, r9
 802882e:	f7e9 ff25 	bl	801267c <BLEMesh_PrintDataCb>
 8028832:	f108 0801 	add.w	r8, r8, #1
 8028836:	e772      	b.n	802871e <Test_UpperTester_Print01+0x56>
 8028838:	08033be0 	.word	0x08033be0
 802883c:	08033bff 	.word	0x08033bff
 8028840:	2000141c 	.word	0x2000141c
 8028844:	08033cd1 	.word	0x08033cd1
 8028848:	20001a3c 	.word	0x20001a3c
 802884c:	08033cda 	.word	0x08033cda
 8028850:	08033c24 	.word	0x08033c24
 8028854:	08033c4b 	.word	0x08033c4b
 8028858:	08033c64 	.word	0x08033c64
 802885c:	08033c80 	.word	0x08033c80
 8028860:	08033c98 	.word	0x08033c98
 8028864:	08033cbc 	.word	0x08033cbc
 8028868:	08033caa 	.word	0x08033caa
 802886c:	20001840 	.word	0x20001840

08028870 <Test_UpperTester_Set15>:
 8028870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8028872:	6803      	ldr	r3, [r0, #0]
 8028874:	2400      	movs	r4, #0
 8028876:	7f1f      	ldrb	r7, [r3, #28]
 8028878:	4605      	mov	r5, r0
 802887a:	4626      	mov	r6, r4
 802887c:	b2e3      	uxtb	r3, r4
 802887e:	429f      	cmp	r7, r3
 8028880:	d801      	bhi.n	8028886 <Test_UpperTester_Set15+0x16>
 8028882:	2000      	movs	r0, #0
 8028884:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8028886:	682b      	ldr	r3, [r5, #0]
 8028888:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802888c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 802888e:	f101 0380 	add.w	r3, r1, #128	; 0x80
 8028892:	f501 713a 	add.w	r1, r1, #744	; 0x2e8
 8028896:	f853 2c08 	ldr.w	r2, [r3, #-8]
 802889a:	b1aa      	cbz	r2, 80288c8 <Test_UpperTester_Set15+0x58>
 802889c:	4618      	mov	r0, r3
 802889e:	2200      	movs	r2, #0
 80288a0:	f830 cb02 	ldrh.w	ip, [r0], #2
 80288a4:	f1bc 0f00 	cmp.w	ip, #0
 80288a8:	d005      	beq.n	80288b6 <Test_UpperTester_Set15+0x46>
 80288aa:	3201      	adds	r2, #1
 80288ac:	b2d2      	uxtb	r2, r2
 80288ae:	2a0a      	cmp	r2, #10
 80288b0:	f820 6c02 	strh.w	r6, [r0, #-2]
 80288b4:	d1f4      	bne.n	80288a0 <Test_UpperTester_Set15+0x30>
 80288b6:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 80288ba:	b10a      	cbz	r2, 80288c0 <Test_UpperTester_Set15+0x50>
 80288bc:	f823 6c04 	strh.w	r6, [r3, #-4]
 80288c0:	3338      	adds	r3, #56	; 0x38
 80288c2:	428b      	cmp	r3, r1
 80288c4:	d1e7      	bne.n	8028896 <Test_UpperTester_Set15+0x26>
 80288c6:	e005      	b.n	80288d4 <Test_UpperTester_Set15+0x64>
 80288c8:	4803      	ldr	r0, [pc, #12]	; (80288d8 <Test_UpperTester_Set15+0x68>)
 80288ca:	f7ff fef9 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80288ce:	4803      	ldr	r0, [pc, #12]	; (80288dc <Test_UpperTester_Set15+0x6c>)
 80288d0:	f7ff fef6 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80288d4:	3401      	adds	r4, #1
 80288d6:	e7d1      	b.n	802887c <Test_UpperTester_Set15+0xc>
 80288d8:	08033cea 	.word	0x08033cea
 80288dc:	08033d03 	.word	0x08033d03

080288e0 <Test_UpperTester_Set13>:
 80288e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80288e4:	4b37      	ldr	r3, [pc, #220]	; (80289c4 <Test_UpperTester_Set13+0xe4>)
 80288e6:	f893 961c 	ldrb.w	r9, [r3, #1564]	; 0x61c
 80288ea:	f893 761d 	ldrb.w	r7, [r3, #1565]	; 0x61d
 80288ee:	4604      	mov	r4, r0
 80288f0:	f1b9 0f00 	cmp.w	r9, #0
 80288f4:	d061      	beq.n	80289ba <Test_UpperTester_Set13+0xda>
 80288f6:	2500      	movs	r5, #0
 80288f8:	f04f 087c 	mov.w	r8, #124	; 0x7c
 80288fc:	46ab      	mov	fp, r5
 80288fe:	f04f 0a10 	mov.w	sl, #16
 8028902:	6823      	ldr	r3, [r4, #0]
 8028904:	1c6e      	adds	r6, r5, #1
 8028906:	6a1b      	ldr	r3, [r3, #32]
 8028908:	b2f6      	uxtb	r6, r6
 802890a:	fb08 3206 	mla	r2, r8, r6, r3
 802890e:	ebc6 1046 	rsb	r0, r6, r6, lsl #5
 8028912:	f882 b021 	strb.w	fp, [r2, #33]	; 0x21
 8028916:	fb08 3205 	mla	r2, r8, r5, r3
 802891a:	2100      	movs	r1, #0
 802891c:	f882 b022 	strb.w	fp, [r2, #34]	; 0x22
 8028920:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8028924:	2210      	movs	r2, #16
 8028926:	f000 ffc5 	bl	80298b4 <memset>
 802892a:	6822      	ldr	r2, [r4, #0]
 802892c:	6a10      	ldr	r0, [r2, #32]
 802892e:	fb18 a305 	smlabb	r3, r8, r5, sl
 8028932:	2210      	movs	r2, #16
 8028934:	2100      	movs	r1, #0
 8028936:	4418      	add	r0, r3
 8028938:	f000 ffbc 	bl	80298b4 <memset>
 802893c:	2d00      	cmp	r5, #0
 802893e:	d03a      	beq.n	80289b6 <Test_UpperTester_Set13+0xd6>
 8028940:	6823      	ldr	r3, [r4, #0]
 8028942:	6a1a      	ldr	r2, [r3, #32]
 8028944:	f892 31f8 	ldrb.w	r3, [r2, #504]	; 0x1f8
 8028948:	3b01      	subs	r3, #1
 802894a:	f882 31f8 	strb.w	r3, [r2, #504]	; 0x1f8
 802894e:	4635      	mov	r5, r6
 8028950:	454d      	cmp	r5, r9
 8028952:	d3d6      	bcc.n	8028902 <Test_UpperTester_Set13+0x22>
 8028954:	481c      	ldr	r0, [pc, #112]	; (80289c8 <Test_UpperTester_Set13+0xe8>)
 8028956:	f7ff feb3 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 802895a:	b387      	cbz	r7, 80289be <Test_UpperTester_Set13+0xde>
 802895c:	2500      	movs	r5, #0
 802895e:	f44f 76ba 	mov.w	r6, #372	; 0x174
 8028962:	f04f 092c 	mov.w	r9, #44	; 0x2c
 8028966:	46a8      	mov	r8, r5
 8028968:	6823      	ldr	r3, [r4, #0]
 802896a:	6a18      	ldr	r0, [r3, #32]
 802896c:	fb09 0305 	mla	r3, r9, r5, r0
 8028970:	2210      	movs	r2, #16
 8028972:	f8a3 8194 	strh.w	r8, [r3, #404]	; 0x194
 8028976:	2100      	movs	r1, #0
 8028978:	4430      	add	r0, r6
 802897a:	f000 ff9b 	bl	80298b4 <memset>
 802897e:	6822      	ldr	r2, [r4, #0]
 8028980:	6a10      	ldr	r0, [r2, #32]
 8028982:	f106 0310 	add.w	r3, r6, #16
 8028986:	2210      	movs	r2, #16
 8028988:	4418      	add	r0, r3
 802898a:	2100      	movs	r1, #0
 802898c:	f000 ff92 	bl	80298b4 <memset>
 8028990:	6823      	ldr	r3, [r4, #0]
 8028992:	6a1a      	ldr	r2, [r3, #32]
 8028994:	f892 31f9 	ldrb.w	r3, [r2, #505]	; 0x1f9
 8028998:	3501      	adds	r5, #1
 802899a:	3b01      	subs	r3, #1
 802899c:	f882 31f9 	strb.w	r3, [r2, #505]	; 0x1f9
 80289a0:	b2eb      	uxtb	r3, r5
 80289a2:	429f      	cmp	r7, r3
 80289a4:	f106 062c 	add.w	r6, r6, #44	; 0x2c
 80289a8:	d8de      	bhi.n	8028968 <Test_UpperTester_Set13+0x88>
 80289aa:	4808      	ldr	r0, [pc, #32]	; (80289cc <Test_UpperTester_Set13+0xec>)
 80289ac:	f7ff fe88 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80289b0:	2000      	movs	r0, #0
 80289b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80289b6:	2501      	movs	r5, #1
 80289b8:	e7ca      	b.n	8028950 <Test_UpperTester_Set13+0x70>
 80289ba:	4805      	ldr	r0, [pc, #20]	; (80289d0 <Test_UpperTester_Set13+0xf0>)
 80289bc:	e7cb      	b.n	8028956 <Test_UpperTester_Set13+0x76>
 80289be:	4805      	ldr	r0, [pc, #20]	; (80289d4 <Test_UpperTester_Set13+0xf4>)
 80289c0:	e7f4      	b.n	80289ac <Test_UpperTester_Set13+0xcc>
 80289c2:	bf00      	nop
 80289c4:	2000141c 	.word	0x2000141c
 80289c8:	08033d1d 	.word	0x08033d1d
 80289cc:	08033d52 	.word	0x08033d52
 80289d0:	08033d38 	.word	0x08033d38
 80289d4:	08033d6d 	.word	0x08033d6d

080289d8 <Test_UpperTester_Set05>:
 80289d8:	b508      	push	{r3, lr}
 80289da:	780b      	ldrb	r3, [r1, #0]
 80289dc:	2b30      	cmp	r3, #48	; 0x30
 80289de:	d108      	bne.n	80289f2 <Test_UpperTester_Set05+0x1a>
 80289e0:	480c      	ldr	r0, [pc, #48]	; (8028a14 <Test_UpperTester_Set05+0x3c>)
 80289e2:	f7ff fe6d 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80289e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80289ea:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 80289ee:	f7f5 bb11 	b.w	801e014 <BnrgmFrndMgmtSubscriptionListRemove>
 80289f2:	2b31      	cmp	r3, #49	; 0x31
 80289f4:	d108      	bne.n	8028a08 <Test_UpperTester_Set05+0x30>
 80289f6:	4808      	ldr	r0, [pc, #32]	; (8028a18 <Test_UpperTester_Set05+0x40>)
 80289f8:	f7ff fe62 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 80289fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8028a00:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8028a04:	f7f5 ba02 	b.w	801de0c <BnrgmFrndMgmtSubscriptionListAdd>
 8028a08:	4804      	ldr	r0, [pc, #16]	; (8028a1c <Test_UpperTester_Set05+0x44>)
 8028a0a:	f7ff fe59 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a0e:	2003      	movs	r0, #3
 8028a10:	bd08      	pop	{r3, pc}
 8028a12:	bf00      	nop
 8028a14:	08033d87 	.word	0x08033d87
 8028a18:	08033d9c 	.word	0x08033d9c
 8028a1c:	08033daf 	.word	0x08033daf

08028a20 <Test_UpperTester_Set03>:
 8028a20:	780b      	ldrb	r3, [r1, #0]
 8028a22:	2b30      	cmp	r3, #48	; 0x30
 8028a24:	b510      	push	{r4, lr}
 8028a26:	4604      	mov	r4, r0
 8028a28:	d107      	bne.n	8028a3a <Test_UpperTester_Set03+0x1a>
 8028a2a:	2301      	movs	r3, #1
 8028a2c:	f880 32ac 	strb.w	r3, [r0, #684]	; 0x2ac
 8028a30:	4809      	ldr	r0, [pc, #36]	; (8028a58 <Test_UpperTester_Set03+0x38>)
 8028a32:	f7ff fe45 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a36:	2000      	movs	r0, #0
 8028a38:	bd10      	pop	{r4, pc}
 8028a3a:	2b31      	cmp	r3, #49	; 0x31
 8028a3c:	d106      	bne.n	8028a4c <Test_UpperTester_Set03+0x2c>
 8028a3e:	4806      	ldr	r0, [pc, #24]	; (8028a58 <Test_UpperTester_Set03+0x38>)
 8028a40:	f7ff fe3e 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a44:	2300      	movs	r3, #0
 8028a46:	f884 32ac 	strb.w	r3, [r4, #684]	; 0x2ac
 8028a4a:	e7f4      	b.n	8028a36 <Test_UpperTester_Set03+0x16>
 8028a4c:	4803      	ldr	r0, [pc, #12]	; (8028a5c <Test_UpperTester_Set03+0x3c>)
 8028a4e:	f7ff fe37 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a52:	2003      	movs	r0, #3
 8028a54:	e7f0      	b.n	8028a38 <Test_UpperTester_Set03+0x18>
 8028a56:	bf00      	nop
 8028a58:	08033dc2 	.word	0x08033dc2
 8028a5c:	08033daf 	.word	0x08033daf

08028a60 <Test_UpperTester_Set02>:
 8028a60:	b510      	push	{r4, lr}
 8028a62:	f7f8 fab3 	bl	8020fcc <MobleStackConfigInvalidate>
 8028a66:	4604      	mov	r4, r0
 8028a68:	b930      	cbnz	r0, 8028a78 <Test_UpperTester_Set02+0x18>
 8028a6a:	f7f6 fda5 	bl	801f5b8 <MoblePalBluetoothGracefulReset>
 8028a6e:	4806      	ldr	r0, [pc, #24]	; (8028a88 <Test_UpperTester_Set02+0x28>)
 8028a70:	f7ff fe26 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a74:	4620      	mov	r0, r4
 8028a76:	bd10      	pop	{r4, pc}
 8028a78:	2801      	cmp	r0, #1
 8028a7a:	d1fb      	bne.n	8028a74 <Test_UpperTester_Set02+0x14>
 8028a7c:	4803      	ldr	r0, [pc, #12]	; (8028a8c <Test_UpperTester_Set02+0x2c>)
 8028a7e:	f7ff fe1f 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a82:	2400      	movs	r4, #0
 8028a84:	e7f6      	b.n	8028a74 <Test_UpperTester_Set02+0x14>
 8028a86:	bf00      	nop
 8028a88:	08033de4 	.word	0x08033de4
 8028a8c:	08033e06 	.word	0x08033e06

08028a90 <Test_UpperTester_Set01>:
 8028a90:	b508      	push	{r3, lr}
 8028a92:	4809      	ldr	r0, [pc, #36]	; (8028ab8 <Test_UpperTester_Set01+0x28>)
 8028a94:	f7ff fe14 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a98:	4808      	ldr	r0, [pc, #32]	; (8028abc <Test_UpperTester_Set01+0x2c>)
 8028a9a:	f7ff fe11 	bl	80286c0 <Test_Upper_Tester_PrintStringCb>
 8028a9e:	f3bf 8f4f 	dsb	sy
 8028aa2:	4907      	ldr	r1, [pc, #28]	; (8028ac0 <Test_UpperTester_Set01+0x30>)
 8028aa4:	4b07      	ldr	r3, [pc, #28]	; (8028ac4 <Test_UpperTester_Set01+0x34>)
 8028aa6:	68ca      	ldr	r2, [r1, #12]
 8028aa8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8028aac:	4313      	orrs	r3, r2
 8028aae:	60cb      	str	r3, [r1, #12]
 8028ab0:	f3bf 8f4f 	dsb	sy
 8028ab4:	bf00      	nop
 8028ab6:	e7fd      	b.n	8028ab4 <Test_UpperTester_Set01+0x24>
 8028ab8:	08033e23 	.word	0x08033e23
 8028abc:	08033e31 	.word	0x08033e31
 8028ac0:	e000ed00 	.word	0xe000ed00
 8028ac4:	05fa0004 	.word	0x05fa0004

08028ac8 <__assert_func>:
 8028ac8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8028aca:	4614      	mov	r4, r2
 8028acc:	461a      	mov	r2, r3
 8028ace:	4b09      	ldr	r3, [pc, #36]	; (8028af4 <__assert_func+0x2c>)
 8028ad0:	681b      	ldr	r3, [r3, #0]
 8028ad2:	4605      	mov	r5, r0
 8028ad4:	68d8      	ldr	r0, [r3, #12]
 8028ad6:	b14c      	cbz	r4, 8028aec <__assert_func+0x24>
 8028ad8:	4b07      	ldr	r3, [pc, #28]	; (8028af8 <__assert_func+0x30>)
 8028ada:	9100      	str	r1, [sp, #0]
 8028adc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8028ae0:	4906      	ldr	r1, [pc, #24]	; (8028afc <__assert_func+0x34>)
 8028ae2:	462b      	mov	r3, r5
 8028ae4:	f000 fd18 	bl	8029518 <fiprintf>
 8028ae8:	f000 ff83 	bl	80299f2 <abort>
 8028aec:	4b04      	ldr	r3, [pc, #16]	; (8028b00 <__assert_func+0x38>)
 8028aee:	461c      	mov	r4, r3
 8028af0:	e7f3      	b.n	8028ada <__assert_func+0x12>
 8028af2:	bf00      	nop
 8028af4:	20000124 	.word	0x20000124
 8028af8:	08033e42 	.word	0x08033e42
 8028afc:	08033e4f 	.word	0x08033e4f
 8028b00:	0803343f 	.word	0x0803343f

08028b04 <__cvt>:
 8028b04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8028b08:	ec55 4b10 	vmov	r4, r5, d0
 8028b0c:	2d00      	cmp	r5, #0
 8028b0e:	460e      	mov	r6, r1
 8028b10:	4619      	mov	r1, r3
 8028b12:	462b      	mov	r3, r5
 8028b14:	bfbb      	ittet	lt
 8028b16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8028b1a:	461d      	movlt	r5, r3
 8028b1c:	2300      	movge	r3, #0
 8028b1e:	232d      	movlt	r3, #45	; 0x2d
 8028b20:	700b      	strb	r3, [r1, #0]
 8028b22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8028b24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8028b28:	4691      	mov	r9, r2
 8028b2a:	f023 0820 	bic.w	r8, r3, #32
 8028b2e:	bfbc      	itt	lt
 8028b30:	4622      	movlt	r2, r4
 8028b32:	4614      	movlt	r4, r2
 8028b34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8028b38:	d005      	beq.n	8028b46 <__cvt+0x42>
 8028b3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8028b3e:	d100      	bne.n	8028b42 <__cvt+0x3e>
 8028b40:	3601      	adds	r6, #1
 8028b42:	2102      	movs	r1, #2
 8028b44:	e000      	b.n	8028b48 <__cvt+0x44>
 8028b46:	2103      	movs	r1, #3
 8028b48:	ab03      	add	r3, sp, #12
 8028b4a:	9301      	str	r3, [sp, #4]
 8028b4c:	ab02      	add	r3, sp, #8
 8028b4e:	9300      	str	r3, [sp, #0]
 8028b50:	ec45 4b10 	vmov	d0, r4, r5
 8028b54:	4653      	mov	r3, sl
 8028b56:	4632      	mov	r2, r6
 8028b58:	f000 ffda 	bl	8029b10 <_dtoa_r>
 8028b5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8028b60:	4607      	mov	r7, r0
 8028b62:	d102      	bne.n	8028b6a <__cvt+0x66>
 8028b64:	f019 0f01 	tst.w	r9, #1
 8028b68:	d022      	beq.n	8028bb0 <__cvt+0xac>
 8028b6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8028b6e:	eb07 0906 	add.w	r9, r7, r6
 8028b72:	d110      	bne.n	8028b96 <__cvt+0x92>
 8028b74:	783b      	ldrb	r3, [r7, #0]
 8028b76:	2b30      	cmp	r3, #48	; 0x30
 8028b78:	d10a      	bne.n	8028b90 <__cvt+0x8c>
 8028b7a:	2200      	movs	r2, #0
 8028b7c:	2300      	movs	r3, #0
 8028b7e:	4620      	mov	r0, r4
 8028b80:	4629      	mov	r1, r5
 8028b82:	f7d7 ff79 	bl	8000a78 <__aeabi_dcmpeq>
 8028b86:	b918      	cbnz	r0, 8028b90 <__cvt+0x8c>
 8028b88:	f1c6 0601 	rsb	r6, r6, #1
 8028b8c:	f8ca 6000 	str.w	r6, [sl]
 8028b90:	f8da 3000 	ldr.w	r3, [sl]
 8028b94:	4499      	add	r9, r3
 8028b96:	2200      	movs	r2, #0
 8028b98:	2300      	movs	r3, #0
 8028b9a:	4620      	mov	r0, r4
 8028b9c:	4629      	mov	r1, r5
 8028b9e:	f7d7 ff6b 	bl	8000a78 <__aeabi_dcmpeq>
 8028ba2:	b108      	cbz	r0, 8028ba8 <__cvt+0xa4>
 8028ba4:	f8cd 900c 	str.w	r9, [sp, #12]
 8028ba8:	2230      	movs	r2, #48	; 0x30
 8028baa:	9b03      	ldr	r3, [sp, #12]
 8028bac:	454b      	cmp	r3, r9
 8028bae:	d307      	bcc.n	8028bc0 <__cvt+0xbc>
 8028bb0:	9b03      	ldr	r3, [sp, #12]
 8028bb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8028bb4:	1bdb      	subs	r3, r3, r7
 8028bb6:	4638      	mov	r0, r7
 8028bb8:	6013      	str	r3, [r2, #0]
 8028bba:	b004      	add	sp, #16
 8028bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8028bc0:	1c59      	adds	r1, r3, #1
 8028bc2:	9103      	str	r1, [sp, #12]
 8028bc4:	701a      	strb	r2, [r3, #0]
 8028bc6:	e7f0      	b.n	8028baa <__cvt+0xa6>

08028bc8 <__exponent>:
 8028bc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8028bca:	4603      	mov	r3, r0
 8028bcc:	2900      	cmp	r1, #0
 8028bce:	bfb8      	it	lt
 8028bd0:	4249      	neglt	r1, r1
 8028bd2:	f803 2b02 	strb.w	r2, [r3], #2
 8028bd6:	bfb4      	ite	lt
 8028bd8:	222d      	movlt	r2, #45	; 0x2d
 8028bda:	222b      	movge	r2, #43	; 0x2b
 8028bdc:	2909      	cmp	r1, #9
 8028bde:	7042      	strb	r2, [r0, #1]
 8028be0:	dd2a      	ble.n	8028c38 <__exponent+0x70>
 8028be2:	f10d 0207 	add.w	r2, sp, #7
 8028be6:	4617      	mov	r7, r2
 8028be8:	260a      	movs	r6, #10
 8028bea:	4694      	mov	ip, r2
 8028bec:	fb91 f5f6 	sdiv	r5, r1, r6
 8028bf0:	fb06 1415 	mls	r4, r6, r5, r1
 8028bf4:	3430      	adds	r4, #48	; 0x30
 8028bf6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8028bfa:	460c      	mov	r4, r1
 8028bfc:	2c63      	cmp	r4, #99	; 0x63
 8028bfe:	f102 32ff 	add.w	r2, r2, #4294967295
 8028c02:	4629      	mov	r1, r5
 8028c04:	dcf1      	bgt.n	8028bea <__exponent+0x22>
 8028c06:	3130      	adds	r1, #48	; 0x30
 8028c08:	f1ac 0402 	sub.w	r4, ip, #2
 8028c0c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8028c10:	1c41      	adds	r1, r0, #1
 8028c12:	4622      	mov	r2, r4
 8028c14:	42ba      	cmp	r2, r7
 8028c16:	d30a      	bcc.n	8028c2e <__exponent+0x66>
 8028c18:	f10d 0209 	add.w	r2, sp, #9
 8028c1c:	eba2 020c 	sub.w	r2, r2, ip
 8028c20:	42bc      	cmp	r4, r7
 8028c22:	bf88      	it	hi
 8028c24:	2200      	movhi	r2, #0
 8028c26:	4413      	add	r3, r2
 8028c28:	1a18      	subs	r0, r3, r0
 8028c2a:	b003      	add	sp, #12
 8028c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8028c2e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8028c32:	f801 5f01 	strb.w	r5, [r1, #1]!
 8028c36:	e7ed      	b.n	8028c14 <__exponent+0x4c>
 8028c38:	2330      	movs	r3, #48	; 0x30
 8028c3a:	3130      	adds	r1, #48	; 0x30
 8028c3c:	7083      	strb	r3, [r0, #2]
 8028c3e:	70c1      	strb	r1, [r0, #3]
 8028c40:	1d03      	adds	r3, r0, #4
 8028c42:	e7f1      	b.n	8028c28 <__exponent+0x60>

08028c44 <_printf_float>:
 8028c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8028c48:	ed2d 8b02 	vpush	{d8}
 8028c4c:	b08d      	sub	sp, #52	; 0x34
 8028c4e:	460c      	mov	r4, r1
 8028c50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8028c54:	4616      	mov	r6, r2
 8028c56:	461f      	mov	r7, r3
 8028c58:	4605      	mov	r5, r0
 8028c5a:	f000 fe45 	bl	80298e8 <_localeconv_r>
 8028c5e:	f8d0 a000 	ldr.w	sl, [r0]
 8028c62:	4650      	mov	r0, sl
 8028c64:	f7d7 fadc 	bl	8000220 <strlen>
 8028c68:	2300      	movs	r3, #0
 8028c6a:	930a      	str	r3, [sp, #40]	; 0x28
 8028c6c:	6823      	ldr	r3, [r4, #0]
 8028c6e:	9305      	str	r3, [sp, #20]
 8028c70:	f8d8 3000 	ldr.w	r3, [r8]
 8028c74:	f894 b018 	ldrb.w	fp, [r4, #24]
 8028c78:	3307      	adds	r3, #7
 8028c7a:	f023 0307 	bic.w	r3, r3, #7
 8028c7e:	f103 0208 	add.w	r2, r3, #8
 8028c82:	f8c8 2000 	str.w	r2, [r8]
 8028c86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8028c8a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8028c8e:	9307      	str	r3, [sp, #28]
 8028c90:	f8cd 8018 	str.w	r8, [sp, #24]
 8028c94:	ee08 0a10 	vmov	s16, r0
 8028c98:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8028c9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8028ca0:	4b9e      	ldr	r3, [pc, #632]	; (8028f1c <_printf_float+0x2d8>)
 8028ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8028ca6:	f7d7 ff19 	bl	8000adc <__aeabi_dcmpun>
 8028caa:	bb88      	cbnz	r0, 8028d10 <_printf_float+0xcc>
 8028cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8028cb0:	4b9a      	ldr	r3, [pc, #616]	; (8028f1c <_printf_float+0x2d8>)
 8028cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8028cb6:	f7d7 fef3 	bl	8000aa0 <__aeabi_dcmple>
 8028cba:	bb48      	cbnz	r0, 8028d10 <_printf_float+0xcc>
 8028cbc:	2200      	movs	r2, #0
 8028cbe:	2300      	movs	r3, #0
 8028cc0:	4640      	mov	r0, r8
 8028cc2:	4649      	mov	r1, r9
 8028cc4:	f7d7 fee2 	bl	8000a8c <__aeabi_dcmplt>
 8028cc8:	b110      	cbz	r0, 8028cd0 <_printf_float+0x8c>
 8028cca:	232d      	movs	r3, #45	; 0x2d
 8028ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028cd0:	4a93      	ldr	r2, [pc, #588]	; (8028f20 <_printf_float+0x2dc>)
 8028cd2:	4b94      	ldr	r3, [pc, #592]	; (8028f24 <_printf_float+0x2e0>)
 8028cd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8028cd8:	bf94      	ite	ls
 8028cda:	4690      	movls	r8, r2
 8028cdc:	4698      	movhi	r8, r3
 8028cde:	2303      	movs	r3, #3
 8028ce0:	6123      	str	r3, [r4, #16]
 8028ce2:	9b05      	ldr	r3, [sp, #20]
 8028ce4:	f023 0304 	bic.w	r3, r3, #4
 8028ce8:	6023      	str	r3, [r4, #0]
 8028cea:	f04f 0900 	mov.w	r9, #0
 8028cee:	9700      	str	r7, [sp, #0]
 8028cf0:	4633      	mov	r3, r6
 8028cf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8028cf4:	4621      	mov	r1, r4
 8028cf6:	4628      	mov	r0, r5
 8028cf8:	f000 f9da 	bl	80290b0 <_printf_common>
 8028cfc:	3001      	adds	r0, #1
 8028cfe:	f040 8090 	bne.w	8028e22 <_printf_float+0x1de>
 8028d02:	f04f 30ff 	mov.w	r0, #4294967295
 8028d06:	b00d      	add	sp, #52	; 0x34
 8028d08:	ecbd 8b02 	vpop	{d8}
 8028d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8028d10:	4642      	mov	r2, r8
 8028d12:	464b      	mov	r3, r9
 8028d14:	4640      	mov	r0, r8
 8028d16:	4649      	mov	r1, r9
 8028d18:	f7d7 fee0 	bl	8000adc <__aeabi_dcmpun>
 8028d1c:	b140      	cbz	r0, 8028d30 <_printf_float+0xec>
 8028d1e:	464b      	mov	r3, r9
 8028d20:	2b00      	cmp	r3, #0
 8028d22:	bfbc      	itt	lt
 8028d24:	232d      	movlt	r3, #45	; 0x2d
 8028d26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8028d2a:	4a7f      	ldr	r2, [pc, #508]	; (8028f28 <_printf_float+0x2e4>)
 8028d2c:	4b7f      	ldr	r3, [pc, #508]	; (8028f2c <_printf_float+0x2e8>)
 8028d2e:	e7d1      	b.n	8028cd4 <_printf_float+0x90>
 8028d30:	6863      	ldr	r3, [r4, #4]
 8028d32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8028d36:	9206      	str	r2, [sp, #24]
 8028d38:	1c5a      	adds	r2, r3, #1
 8028d3a:	d13f      	bne.n	8028dbc <_printf_float+0x178>
 8028d3c:	2306      	movs	r3, #6
 8028d3e:	6063      	str	r3, [r4, #4]
 8028d40:	9b05      	ldr	r3, [sp, #20]
 8028d42:	6861      	ldr	r1, [r4, #4]
 8028d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8028d48:	2300      	movs	r3, #0
 8028d4a:	9303      	str	r3, [sp, #12]
 8028d4c:	ab0a      	add	r3, sp, #40	; 0x28
 8028d4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8028d52:	ab09      	add	r3, sp, #36	; 0x24
 8028d54:	ec49 8b10 	vmov	d0, r8, r9
 8028d58:	9300      	str	r3, [sp, #0]
 8028d5a:	6022      	str	r2, [r4, #0]
 8028d5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8028d60:	4628      	mov	r0, r5
 8028d62:	f7ff fecf 	bl	8028b04 <__cvt>
 8028d66:	9b06      	ldr	r3, [sp, #24]
 8028d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8028d6a:	2b47      	cmp	r3, #71	; 0x47
 8028d6c:	4680      	mov	r8, r0
 8028d6e:	d108      	bne.n	8028d82 <_printf_float+0x13e>
 8028d70:	1cc8      	adds	r0, r1, #3
 8028d72:	db02      	blt.n	8028d7a <_printf_float+0x136>
 8028d74:	6863      	ldr	r3, [r4, #4]
 8028d76:	4299      	cmp	r1, r3
 8028d78:	dd41      	ble.n	8028dfe <_printf_float+0x1ba>
 8028d7a:	f1ab 0302 	sub.w	r3, fp, #2
 8028d7e:	fa5f fb83 	uxtb.w	fp, r3
 8028d82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8028d86:	d820      	bhi.n	8028dca <_printf_float+0x186>
 8028d88:	3901      	subs	r1, #1
 8028d8a:	465a      	mov	r2, fp
 8028d8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8028d90:	9109      	str	r1, [sp, #36]	; 0x24
 8028d92:	f7ff ff19 	bl	8028bc8 <__exponent>
 8028d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028d98:	1813      	adds	r3, r2, r0
 8028d9a:	2a01      	cmp	r2, #1
 8028d9c:	4681      	mov	r9, r0
 8028d9e:	6123      	str	r3, [r4, #16]
 8028da0:	dc02      	bgt.n	8028da8 <_printf_float+0x164>
 8028da2:	6822      	ldr	r2, [r4, #0]
 8028da4:	07d2      	lsls	r2, r2, #31
 8028da6:	d501      	bpl.n	8028dac <_printf_float+0x168>
 8028da8:	3301      	adds	r3, #1
 8028daa:	6123      	str	r3, [r4, #16]
 8028dac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8028db0:	2b00      	cmp	r3, #0
 8028db2:	d09c      	beq.n	8028cee <_printf_float+0xaa>
 8028db4:	232d      	movs	r3, #45	; 0x2d
 8028db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8028dba:	e798      	b.n	8028cee <_printf_float+0xaa>
 8028dbc:	9a06      	ldr	r2, [sp, #24]
 8028dbe:	2a47      	cmp	r2, #71	; 0x47
 8028dc0:	d1be      	bne.n	8028d40 <_printf_float+0xfc>
 8028dc2:	2b00      	cmp	r3, #0
 8028dc4:	d1bc      	bne.n	8028d40 <_printf_float+0xfc>
 8028dc6:	2301      	movs	r3, #1
 8028dc8:	e7b9      	b.n	8028d3e <_printf_float+0xfa>
 8028dca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8028dce:	d118      	bne.n	8028e02 <_printf_float+0x1be>
 8028dd0:	2900      	cmp	r1, #0
 8028dd2:	6863      	ldr	r3, [r4, #4]
 8028dd4:	dd0b      	ble.n	8028dee <_printf_float+0x1aa>
 8028dd6:	6121      	str	r1, [r4, #16]
 8028dd8:	b913      	cbnz	r3, 8028de0 <_printf_float+0x19c>
 8028dda:	6822      	ldr	r2, [r4, #0]
 8028ddc:	07d0      	lsls	r0, r2, #31
 8028dde:	d502      	bpl.n	8028de6 <_printf_float+0x1a2>
 8028de0:	3301      	adds	r3, #1
 8028de2:	440b      	add	r3, r1
 8028de4:	6123      	str	r3, [r4, #16]
 8028de6:	65a1      	str	r1, [r4, #88]	; 0x58
 8028de8:	f04f 0900 	mov.w	r9, #0
 8028dec:	e7de      	b.n	8028dac <_printf_float+0x168>
 8028dee:	b913      	cbnz	r3, 8028df6 <_printf_float+0x1b2>
 8028df0:	6822      	ldr	r2, [r4, #0]
 8028df2:	07d2      	lsls	r2, r2, #31
 8028df4:	d501      	bpl.n	8028dfa <_printf_float+0x1b6>
 8028df6:	3302      	adds	r3, #2
 8028df8:	e7f4      	b.n	8028de4 <_printf_float+0x1a0>
 8028dfa:	2301      	movs	r3, #1
 8028dfc:	e7f2      	b.n	8028de4 <_printf_float+0x1a0>
 8028dfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8028e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028e04:	4299      	cmp	r1, r3
 8028e06:	db05      	blt.n	8028e14 <_printf_float+0x1d0>
 8028e08:	6823      	ldr	r3, [r4, #0]
 8028e0a:	6121      	str	r1, [r4, #16]
 8028e0c:	07d8      	lsls	r0, r3, #31
 8028e0e:	d5ea      	bpl.n	8028de6 <_printf_float+0x1a2>
 8028e10:	1c4b      	adds	r3, r1, #1
 8028e12:	e7e7      	b.n	8028de4 <_printf_float+0x1a0>
 8028e14:	2900      	cmp	r1, #0
 8028e16:	bfd4      	ite	le
 8028e18:	f1c1 0202 	rsble	r2, r1, #2
 8028e1c:	2201      	movgt	r2, #1
 8028e1e:	4413      	add	r3, r2
 8028e20:	e7e0      	b.n	8028de4 <_printf_float+0x1a0>
 8028e22:	6823      	ldr	r3, [r4, #0]
 8028e24:	055a      	lsls	r2, r3, #21
 8028e26:	d407      	bmi.n	8028e38 <_printf_float+0x1f4>
 8028e28:	6923      	ldr	r3, [r4, #16]
 8028e2a:	4642      	mov	r2, r8
 8028e2c:	4631      	mov	r1, r6
 8028e2e:	4628      	mov	r0, r5
 8028e30:	47b8      	blx	r7
 8028e32:	3001      	adds	r0, #1
 8028e34:	d12c      	bne.n	8028e90 <_printf_float+0x24c>
 8028e36:	e764      	b.n	8028d02 <_printf_float+0xbe>
 8028e38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8028e3c:	f240 80e0 	bls.w	8029000 <_printf_float+0x3bc>
 8028e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8028e44:	2200      	movs	r2, #0
 8028e46:	2300      	movs	r3, #0
 8028e48:	f7d7 fe16 	bl	8000a78 <__aeabi_dcmpeq>
 8028e4c:	2800      	cmp	r0, #0
 8028e4e:	d034      	beq.n	8028eba <_printf_float+0x276>
 8028e50:	4a37      	ldr	r2, [pc, #220]	; (8028f30 <_printf_float+0x2ec>)
 8028e52:	2301      	movs	r3, #1
 8028e54:	4631      	mov	r1, r6
 8028e56:	4628      	mov	r0, r5
 8028e58:	47b8      	blx	r7
 8028e5a:	3001      	adds	r0, #1
 8028e5c:	f43f af51 	beq.w	8028d02 <_printf_float+0xbe>
 8028e60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8028e64:	429a      	cmp	r2, r3
 8028e66:	db02      	blt.n	8028e6e <_printf_float+0x22a>
 8028e68:	6823      	ldr	r3, [r4, #0]
 8028e6a:	07d8      	lsls	r0, r3, #31
 8028e6c:	d510      	bpl.n	8028e90 <_printf_float+0x24c>
 8028e6e:	ee18 3a10 	vmov	r3, s16
 8028e72:	4652      	mov	r2, sl
 8028e74:	4631      	mov	r1, r6
 8028e76:	4628      	mov	r0, r5
 8028e78:	47b8      	blx	r7
 8028e7a:	3001      	adds	r0, #1
 8028e7c:	f43f af41 	beq.w	8028d02 <_printf_float+0xbe>
 8028e80:	f04f 0800 	mov.w	r8, #0
 8028e84:	f104 091a 	add.w	r9, r4, #26
 8028e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028e8a:	3b01      	subs	r3, #1
 8028e8c:	4543      	cmp	r3, r8
 8028e8e:	dc09      	bgt.n	8028ea4 <_printf_float+0x260>
 8028e90:	6823      	ldr	r3, [r4, #0]
 8028e92:	079b      	lsls	r3, r3, #30
 8028e94:	f100 8107 	bmi.w	80290a6 <_printf_float+0x462>
 8028e98:	68e0      	ldr	r0, [r4, #12]
 8028e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8028e9c:	4298      	cmp	r0, r3
 8028e9e:	bfb8      	it	lt
 8028ea0:	4618      	movlt	r0, r3
 8028ea2:	e730      	b.n	8028d06 <_printf_float+0xc2>
 8028ea4:	2301      	movs	r3, #1
 8028ea6:	464a      	mov	r2, r9
 8028ea8:	4631      	mov	r1, r6
 8028eaa:	4628      	mov	r0, r5
 8028eac:	47b8      	blx	r7
 8028eae:	3001      	adds	r0, #1
 8028eb0:	f43f af27 	beq.w	8028d02 <_printf_float+0xbe>
 8028eb4:	f108 0801 	add.w	r8, r8, #1
 8028eb8:	e7e6      	b.n	8028e88 <_printf_float+0x244>
 8028eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028ebc:	2b00      	cmp	r3, #0
 8028ebe:	dc39      	bgt.n	8028f34 <_printf_float+0x2f0>
 8028ec0:	4a1b      	ldr	r2, [pc, #108]	; (8028f30 <_printf_float+0x2ec>)
 8028ec2:	2301      	movs	r3, #1
 8028ec4:	4631      	mov	r1, r6
 8028ec6:	4628      	mov	r0, r5
 8028ec8:	47b8      	blx	r7
 8028eca:	3001      	adds	r0, #1
 8028ecc:	f43f af19 	beq.w	8028d02 <_printf_float+0xbe>
 8028ed0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8028ed4:	4313      	orrs	r3, r2
 8028ed6:	d102      	bne.n	8028ede <_printf_float+0x29a>
 8028ed8:	6823      	ldr	r3, [r4, #0]
 8028eda:	07d9      	lsls	r1, r3, #31
 8028edc:	d5d8      	bpl.n	8028e90 <_printf_float+0x24c>
 8028ede:	ee18 3a10 	vmov	r3, s16
 8028ee2:	4652      	mov	r2, sl
 8028ee4:	4631      	mov	r1, r6
 8028ee6:	4628      	mov	r0, r5
 8028ee8:	47b8      	blx	r7
 8028eea:	3001      	adds	r0, #1
 8028eec:	f43f af09 	beq.w	8028d02 <_printf_float+0xbe>
 8028ef0:	f04f 0900 	mov.w	r9, #0
 8028ef4:	f104 0a1a 	add.w	sl, r4, #26
 8028ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8028efa:	425b      	negs	r3, r3
 8028efc:	454b      	cmp	r3, r9
 8028efe:	dc01      	bgt.n	8028f04 <_printf_float+0x2c0>
 8028f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8028f02:	e792      	b.n	8028e2a <_printf_float+0x1e6>
 8028f04:	2301      	movs	r3, #1
 8028f06:	4652      	mov	r2, sl
 8028f08:	4631      	mov	r1, r6
 8028f0a:	4628      	mov	r0, r5
 8028f0c:	47b8      	blx	r7
 8028f0e:	3001      	adds	r0, #1
 8028f10:	f43f aef7 	beq.w	8028d02 <_printf_float+0xbe>
 8028f14:	f109 0901 	add.w	r9, r9, #1
 8028f18:	e7ee      	b.n	8028ef8 <_printf_float+0x2b4>
 8028f1a:	bf00      	nop
 8028f1c:	7fefffff 	.word	0x7fefffff
 8028f20:	08033e7e 	.word	0x08033e7e
 8028f24:	08033e82 	.word	0x08033e82
 8028f28:	08033e86 	.word	0x08033e86
 8028f2c:	08033e8a 	.word	0x08033e8a
 8028f30:	08033d6b 	.word	0x08033d6b
 8028f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8028f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8028f38:	429a      	cmp	r2, r3
 8028f3a:	bfa8      	it	ge
 8028f3c:	461a      	movge	r2, r3
 8028f3e:	2a00      	cmp	r2, #0
 8028f40:	4691      	mov	r9, r2
 8028f42:	dc37      	bgt.n	8028fb4 <_printf_float+0x370>
 8028f44:	f04f 0b00 	mov.w	fp, #0
 8028f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028f4c:	f104 021a 	add.w	r2, r4, #26
 8028f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8028f52:	9305      	str	r3, [sp, #20]
 8028f54:	eba3 0309 	sub.w	r3, r3, r9
 8028f58:	455b      	cmp	r3, fp
 8028f5a:	dc33      	bgt.n	8028fc4 <_printf_float+0x380>
 8028f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8028f60:	429a      	cmp	r2, r3
 8028f62:	db3b      	blt.n	8028fdc <_printf_float+0x398>
 8028f64:	6823      	ldr	r3, [r4, #0]
 8028f66:	07da      	lsls	r2, r3, #31
 8028f68:	d438      	bmi.n	8028fdc <_printf_float+0x398>
 8028f6a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8028f6e:	eba2 0903 	sub.w	r9, r2, r3
 8028f72:	9b05      	ldr	r3, [sp, #20]
 8028f74:	1ad2      	subs	r2, r2, r3
 8028f76:	4591      	cmp	r9, r2
 8028f78:	bfa8      	it	ge
 8028f7a:	4691      	movge	r9, r2
 8028f7c:	f1b9 0f00 	cmp.w	r9, #0
 8028f80:	dc35      	bgt.n	8028fee <_printf_float+0x3aa>
 8028f82:	f04f 0800 	mov.w	r8, #0
 8028f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8028f8a:	f104 0a1a 	add.w	sl, r4, #26
 8028f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8028f92:	1a9b      	subs	r3, r3, r2
 8028f94:	eba3 0309 	sub.w	r3, r3, r9
 8028f98:	4543      	cmp	r3, r8
 8028f9a:	f77f af79 	ble.w	8028e90 <_printf_float+0x24c>
 8028f9e:	2301      	movs	r3, #1
 8028fa0:	4652      	mov	r2, sl
 8028fa2:	4631      	mov	r1, r6
 8028fa4:	4628      	mov	r0, r5
 8028fa6:	47b8      	blx	r7
 8028fa8:	3001      	adds	r0, #1
 8028faa:	f43f aeaa 	beq.w	8028d02 <_printf_float+0xbe>
 8028fae:	f108 0801 	add.w	r8, r8, #1
 8028fb2:	e7ec      	b.n	8028f8e <_printf_float+0x34a>
 8028fb4:	4613      	mov	r3, r2
 8028fb6:	4631      	mov	r1, r6
 8028fb8:	4642      	mov	r2, r8
 8028fba:	4628      	mov	r0, r5
 8028fbc:	47b8      	blx	r7
 8028fbe:	3001      	adds	r0, #1
 8028fc0:	d1c0      	bne.n	8028f44 <_printf_float+0x300>
 8028fc2:	e69e      	b.n	8028d02 <_printf_float+0xbe>
 8028fc4:	2301      	movs	r3, #1
 8028fc6:	4631      	mov	r1, r6
 8028fc8:	4628      	mov	r0, r5
 8028fca:	9205      	str	r2, [sp, #20]
 8028fcc:	47b8      	blx	r7
 8028fce:	3001      	adds	r0, #1
 8028fd0:	f43f ae97 	beq.w	8028d02 <_printf_float+0xbe>
 8028fd4:	9a05      	ldr	r2, [sp, #20]
 8028fd6:	f10b 0b01 	add.w	fp, fp, #1
 8028fda:	e7b9      	b.n	8028f50 <_printf_float+0x30c>
 8028fdc:	ee18 3a10 	vmov	r3, s16
 8028fe0:	4652      	mov	r2, sl
 8028fe2:	4631      	mov	r1, r6
 8028fe4:	4628      	mov	r0, r5
 8028fe6:	47b8      	blx	r7
 8028fe8:	3001      	adds	r0, #1
 8028fea:	d1be      	bne.n	8028f6a <_printf_float+0x326>
 8028fec:	e689      	b.n	8028d02 <_printf_float+0xbe>
 8028fee:	9a05      	ldr	r2, [sp, #20]
 8028ff0:	464b      	mov	r3, r9
 8028ff2:	4442      	add	r2, r8
 8028ff4:	4631      	mov	r1, r6
 8028ff6:	4628      	mov	r0, r5
 8028ff8:	47b8      	blx	r7
 8028ffa:	3001      	adds	r0, #1
 8028ffc:	d1c1      	bne.n	8028f82 <_printf_float+0x33e>
 8028ffe:	e680      	b.n	8028d02 <_printf_float+0xbe>
 8029000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8029002:	2a01      	cmp	r2, #1
 8029004:	dc01      	bgt.n	802900a <_printf_float+0x3c6>
 8029006:	07db      	lsls	r3, r3, #31
 8029008:	d53a      	bpl.n	8029080 <_printf_float+0x43c>
 802900a:	2301      	movs	r3, #1
 802900c:	4642      	mov	r2, r8
 802900e:	4631      	mov	r1, r6
 8029010:	4628      	mov	r0, r5
 8029012:	47b8      	blx	r7
 8029014:	3001      	adds	r0, #1
 8029016:	f43f ae74 	beq.w	8028d02 <_printf_float+0xbe>
 802901a:	ee18 3a10 	vmov	r3, s16
 802901e:	4652      	mov	r2, sl
 8029020:	4631      	mov	r1, r6
 8029022:	4628      	mov	r0, r5
 8029024:	47b8      	blx	r7
 8029026:	3001      	adds	r0, #1
 8029028:	f43f ae6b 	beq.w	8028d02 <_printf_float+0xbe>
 802902c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8029030:	2200      	movs	r2, #0
 8029032:	2300      	movs	r3, #0
 8029034:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8029038:	f7d7 fd1e 	bl	8000a78 <__aeabi_dcmpeq>
 802903c:	b9d8      	cbnz	r0, 8029076 <_printf_float+0x432>
 802903e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8029042:	f108 0201 	add.w	r2, r8, #1
 8029046:	4631      	mov	r1, r6
 8029048:	4628      	mov	r0, r5
 802904a:	47b8      	blx	r7
 802904c:	3001      	adds	r0, #1
 802904e:	d10e      	bne.n	802906e <_printf_float+0x42a>
 8029050:	e657      	b.n	8028d02 <_printf_float+0xbe>
 8029052:	2301      	movs	r3, #1
 8029054:	4652      	mov	r2, sl
 8029056:	4631      	mov	r1, r6
 8029058:	4628      	mov	r0, r5
 802905a:	47b8      	blx	r7
 802905c:	3001      	adds	r0, #1
 802905e:	f43f ae50 	beq.w	8028d02 <_printf_float+0xbe>
 8029062:	f108 0801 	add.w	r8, r8, #1
 8029066:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029068:	3b01      	subs	r3, #1
 802906a:	4543      	cmp	r3, r8
 802906c:	dcf1      	bgt.n	8029052 <_printf_float+0x40e>
 802906e:	464b      	mov	r3, r9
 8029070:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8029074:	e6da      	b.n	8028e2c <_printf_float+0x1e8>
 8029076:	f04f 0800 	mov.w	r8, #0
 802907a:	f104 0a1a 	add.w	sl, r4, #26
 802907e:	e7f2      	b.n	8029066 <_printf_float+0x422>
 8029080:	2301      	movs	r3, #1
 8029082:	4642      	mov	r2, r8
 8029084:	e7df      	b.n	8029046 <_printf_float+0x402>
 8029086:	2301      	movs	r3, #1
 8029088:	464a      	mov	r2, r9
 802908a:	4631      	mov	r1, r6
 802908c:	4628      	mov	r0, r5
 802908e:	47b8      	blx	r7
 8029090:	3001      	adds	r0, #1
 8029092:	f43f ae36 	beq.w	8028d02 <_printf_float+0xbe>
 8029096:	f108 0801 	add.w	r8, r8, #1
 802909a:	68e3      	ldr	r3, [r4, #12]
 802909c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802909e:	1a5b      	subs	r3, r3, r1
 80290a0:	4543      	cmp	r3, r8
 80290a2:	dcf0      	bgt.n	8029086 <_printf_float+0x442>
 80290a4:	e6f8      	b.n	8028e98 <_printf_float+0x254>
 80290a6:	f04f 0800 	mov.w	r8, #0
 80290aa:	f104 0919 	add.w	r9, r4, #25
 80290ae:	e7f4      	b.n	802909a <_printf_float+0x456>

080290b0 <_printf_common>:
 80290b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80290b4:	4616      	mov	r6, r2
 80290b6:	4699      	mov	r9, r3
 80290b8:	688a      	ldr	r2, [r1, #8]
 80290ba:	690b      	ldr	r3, [r1, #16]
 80290bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80290c0:	4293      	cmp	r3, r2
 80290c2:	bfb8      	it	lt
 80290c4:	4613      	movlt	r3, r2
 80290c6:	6033      	str	r3, [r6, #0]
 80290c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80290cc:	4607      	mov	r7, r0
 80290ce:	460c      	mov	r4, r1
 80290d0:	b10a      	cbz	r2, 80290d6 <_printf_common+0x26>
 80290d2:	3301      	adds	r3, #1
 80290d4:	6033      	str	r3, [r6, #0]
 80290d6:	6823      	ldr	r3, [r4, #0]
 80290d8:	0699      	lsls	r1, r3, #26
 80290da:	bf42      	ittt	mi
 80290dc:	6833      	ldrmi	r3, [r6, #0]
 80290de:	3302      	addmi	r3, #2
 80290e0:	6033      	strmi	r3, [r6, #0]
 80290e2:	6825      	ldr	r5, [r4, #0]
 80290e4:	f015 0506 	ands.w	r5, r5, #6
 80290e8:	d106      	bne.n	80290f8 <_printf_common+0x48>
 80290ea:	f104 0a19 	add.w	sl, r4, #25
 80290ee:	68e3      	ldr	r3, [r4, #12]
 80290f0:	6832      	ldr	r2, [r6, #0]
 80290f2:	1a9b      	subs	r3, r3, r2
 80290f4:	42ab      	cmp	r3, r5
 80290f6:	dc26      	bgt.n	8029146 <_printf_common+0x96>
 80290f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80290fc:	1e13      	subs	r3, r2, #0
 80290fe:	6822      	ldr	r2, [r4, #0]
 8029100:	bf18      	it	ne
 8029102:	2301      	movne	r3, #1
 8029104:	0692      	lsls	r2, r2, #26
 8029106:	d42b      	bmi.n	8029160 <_printf_common+0xb0>
 8029108:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802910c:	4649      	mov	r1, r9
 802910e:	4638      	mov	r0, r7
 8029110:	47c0      	blx	r8
 8029112:	3001      	adds	r0, #1
 8029114:	d01e      	beq.n	8029154 <_printf_common+0xa4>
 8029116:	6823      	ldr	r3, [r4, #0]
 8029118:	6922      	ldr	r2, [r4, #16]
 802911a:	f003 0306 	and.w	r3, r3, #6
 802911e:	2b04      	cmp	r3, #4
 8029120:	bf02      	ittt	eq
 8029122:	68e5      	ldreq	r5, [r4, #12]
 8029124:	6833      	ldreq	r3, [r6, #0]
 8029126:	1aed      	subeq	r5, r5, r3
 8029128:	68a3      	ldr	r3, [r4, #8]
 802912a:	bf0c      	ite	eq
 802912c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8029130:	2500      	movne	r5, #0
 8029132:	4293      	cmp	r3, r2
 8029134:	bfc4      	itt	gt
 8029136:	1a9b      	subgt	r3, r3, r2
 8029138:	18ed      	addgt	r5, r5, r3
 802913a:	2600      	movs	r6, #0
 802913c:	341a      	adds	r4, #26
 802913e:	42b5      	cmp	r5, r6
 8029140:	d11a      	bne.n	8029178 <_printf_common+0xc8>
 8029142:	2000      	movs	r0, #0
 8029144:	e008      	b.n	8029158 <_printf_common+0xa8>
 8029146:	2301      	movs	r3, #1
 8029148:	4652      	mov	r2, sl
 802914a:	4649      	mov	r1, r9
 802914c:	4638      	mov	r0, r7
 802914e:	47c0      	blx	r8
 8029150:	3001      	adds	r0, #1
 8029152:	d103      	bne.n	802915c <_printf_common+0xac>
 8029154:	f04f 30ff 	mov.w	r0, #4294967295
 8029158:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802915c:	3501      	adds	r5, #1
 802915e:	e7c6      	b.n	80290ee <_printf_common+0x3e>
 8029160:	18e1      	adds	r1, r4, r3
 8029162:	1c5a      	adds	r2, r3, #1
 8029164:	2030      	movs	r0, #48	; 0x30
 8029166:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 802916a:	4422      	add	r2, r4
 802916c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8029170:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8029174:	3302      	adds	r3, #2
 8029176:	e7c7      	b.n	8029108 <_printf_common+0x58>
 8029178:	2301      	movs	r3, #1
 802917a:	4622      	mov	r2, r4
 802917c:	4649      	mov	r1, r9
 802917e:	4638      	mov	r0, r7
 8029180:	47c0      	blx	r8
 8029182:	3001      	adds	r0, #1
 8029184:	d0e6      	beq.n	8029154 <_printf_common+0xa4>
 8029186:	3601      	adds	r6, #1
 8029188:	e7d9      	b.n	802913e <_printf_common+0x8e>
	...

0802918c <_printf_i>:
 802918c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8029190:	7e0f      	ldrb	r7, [r1, #24]
 8029192:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8029194:	2f78      	cmp	r7, #120	; 0x78
 8029196:	4691      	mov	r9, r2
 8029198:	4680      	mov	r8, r0
 802919a:	460c      	mov	r4, r1
 802919c:	469a      	mov	sl, r3
 802919e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80291a2:	d807      	bhi.n	80291b4 <_printf_i+0x28>
 80291a4:	2f62      	cmp	r7, #98	; 0x62
 80291a6:	d80a      	bhi.n	80291be <_printf_i+0x32>
 80291a8:	2f00      	cmp	r7, #0
 80291aa:	f000 80d4 	beq.w	8029356 <_printf_i+0x1ca>
 80291ae:	2f58      	cmp	r7, #88	; 0x58
 80291b0:	f000 80c0 	beq.w	8029334 <_printf_i+0x1a8>
 80291b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80291b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80291bc:	e03a      	b.n	8029234 <_printf_i+0xa8>
 80291be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80291c2:	2b15      	cmp	r3, #21
 80291c4:	d8f6      	bhi.n	80291b4 <_printf_i+0x28>
 80291c6:	a101      	add	r1, pc, #4	; (adr r1, 80291cc <_printf_i+0x40>)
 80291c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80291cc:	08029225 	.word	0x08029225
 80291d0:	08029239 	.word	0x08029239
 80291d4:	080291b5 	.word	0x080291b5
 80291d8:	080291b5 	.word	0x080291b5
 80291dc:	080291b5 	.word	0x080291b5
 80291e0:	080291b5 	.word	0x080291b5
 80291e4:	08029239 	.word	0x08029239
 80291e8:	080291b5 	.word	0x080291b5
 80291ec:	080291b5 	.word	0x080291b5
 80291f0:	080291b5 	.word	0x080291b5
 80291f4:	080291b5 	.word	0x080291b5
 80291f8:	0802933d 	.word	0x0802933d
 80291fc:	08029265 	.word	0x08029265
 8029200:	080292f7 	.word	0x080292f7
 8029204:	080291b5 	.word	0x080291b5
 8029208:	080291b5 	.word	0x080291b5
 802920c:	0802935f 	.word	0x0802935f
 8029210:	080291b5 	.word	0x080291b5
 8029214:	08029265 	.word	0x08029265
 8029218:	080291b5 	.word	0x080291b5
 802921c:	080291b5 	.word	0x080291b5
 8029220:	080292ff 	.word	0x080292ff
 8029224:	682b      	ldr	r3, [r5, #0]
 8029226:	1d1a      	adds	r2, r3, #4
 8029228:	681b      	ldr	r3, [r3, #0]
 802922a:	602a      	str	r2, [r5, #0]
 802922c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8029230:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8029234:	2301      	movs	r3, #1
 8029236:	e09f      	b.n	8029378 <_printf_i+0x1ec>
 8029238:	6820      	ldr	r0, [r4, #0]
 802923a:	682b      	ldr	r3, [r5, #0]
 802923c:	0607      	lsls	r7, r0, #24
 802923e:	f103 0104 	add.w	r1, r3, #4
 8029242:	6029      	str	r1, [r5, #0]
 8029244:	d501      	bpl.n	802924a <_printf_i+0xbe>
 8029246:	681e      	ldr	r6, [r3, #0]
 8029248:	e003      	b.n	8029252 <_printf_i+0xc6>
 802924a:	0646      	lsls	r6, r0, #25
 802924c:	d5fb      	bpl.n	8029246 <_printf_i+0xba>
 802924e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8029252:	2e00      	cmp	r6, #0
 8029254:	da03      	bge.n	802925e <_printf_i+0xd2>
 8029256:	232d      	movs	r3, #45	; 0x2d
 8029258:	4276      	negs	r6, r6
 802925a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 802925e:	485a      	ldr	r0, [pc, #360]	; (80293c8 <_printf_i+0x23c>)
 8029260:	230a      	movs	r3, #10
 8029262:	e012      	b.n	802928a <_printf_i+0xfe>
 8029264:	682b      	ldr	r3, [r5, #0]
 8029266:	6820      	ldr	r0, [r4, #0]
 8029268:	1d19      	adds	r1, r3, #4
 802926a:	6029      	str	r1, [r5, #0]
 802926c:	0605      	lsls	r5, r0, #24
 802926e:	d501      	bpl.n	8029274 <_printf_i+0xe8>
 8029270:	681e      	ldr	r6, [r3, #0]
 8029272:	e002      	b.n	802927a <_printf_i+0xee>
 8029274:	0641      	lsls	r1, r0, #25
 8029276:	d5fb      	bpl.n	8029270 <_printf_i+0xe4>
 8029278:	881e      	ldrh	r6, [r3, #0]
 802927a:	4853      	ldr	r0, [pc, #332]	; (80293c8 <_printf_i+0x23c>)
 802927c:	2f6f      	cmp	r7, #111	; 0x6f
 802927e:	bf0c      	ite	eq
 8029280:	2308      	moveq	r3, #8
 8029282:	230a      	movne	r3, #10
 8029284:	2100      	movs	r1, #0
 8029286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802928a:	6865      	ldr	r5, [r4, #4]
 802928c:	60a5      	str	r5, [r4, #8]
 802928e:	2d00      	cmp	r5, #0
 8029290:	bfa2      	ittt	ge
 8029292:	6821      	ldrge	r1, [r4, #0]
 8029294:	f021 0104 	bicge.w	r1, r1, #4
 8029298:	6021      	strge	r1, [r4, #0]
 802929a:	b90e      	cbnz	r6, 80292a0 <_printf_i+0x114>
 802929c:	2d00      	cmp	r5, #0
 802929e:	d04b      	beq.n	8029338 <_printf_i+0x1ac>
 80292a0:	4615      	mov	r5, r2
 80292a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80292a6:	fb03 6711 	mls	r7, r3, r1, r6
 80292aa:	5dc7      	ldrb	r7, [r0, r7]
 80292ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80292b0:	4637      	mov	r7, r6
 80292b2:	42bb      	cmp	r3, r7
 80292b4:	460e      	mov	r6, r1
 80292b6:	d9f4      	bls.n	80292a2 <_printf_i+0x116>
 80292b8:	2b08      	cmp	r3, #8
 80292ba:	d10b      	bne.n	80292d4 <_printf_i+0x148>
 80292bc:	6823      	ldr	r3, [r4, #0]
 80292be:	07de      	lsls	r6, r3, #31
 80292c0:	d508      	bpl.n	80292d4 <_printf_i+0x148>
 80292c2:	6923      	ldr	r3, [r4, #16]
 80292c4:	6861      	ldr	r1, [r4, #4]
 80292c6:	4299      	cmp	r1, r3
 80292c8:	bfde      	ittt	le
 80292ca:	2330      	movle	r3, #48	; 0x30
 80292cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80292d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80292d4:	1b52      	subs	r2, r2, r5
 80292d6:	6122      	str	r2, [r4, #16]
 80292d8:	f8cd a000 	str.w	sl, [sp]
 80292dc:	464b      	mov	r3, r9
 80292de:	aa03      	add	r2, sp, #12
 80292e0:	4621      	mov	r1, r4
 80292e2:	4640      	mov	r0, r8
 80292e4:	f7ff fee4 	bl	80290b0 <_printf_common>
 80292e8:	3001      	adds	r0, #1
 80292ea:	d14a      	bne.n	8029382 <_printf_i+0x1f6>
 80292ec:	f04f 30ff 	mov.w	r0, #4294967295
 80292f0:	b004      	add	sp, #16
 80292f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80292f6:	6823      	ldr	r3, [r4, #0]
 80292f8:	f043 0320 	orr.w	r3, r3, #32
 80292fc:	6023      	str	r3, [r4, #0]
 80292fe:	4833      	ldr	r0, [pc, #204]	; (80293cc <_printf_i+0x240>)
 8029300:	2778      	movs	r7, #120	; 0x78
 8029302:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8029306:	6823      	ldr	r3, [r4, #0]
 8029308:	6829      	ldr	r1, [r5, #0]
 802930a:	061f      	lsls	r7, r3, #24
 802930c:	f851 6b04 	ldr.w	r6, [r1], #4
 8029310:	d402      	bmi.n	8029318 <_printf_i+0x18c>
 8029312:	065f      	lsls	r7, r3, #25
 8029314:	bf48      	it	mi
 8029316:	b2b6      	uxthmi	r6, r6
 8029318:	07df      	lsls	r7, r3, #31
 802931a:	bf48      	it	mi
 802931c:	f043 0320 	orrmi.w	r3, r3, #32
 8029320:	6029      	str	r1, [r5, #0]
 8029322:	bf48      	it	mi
 8029324:	6023      	strmi	r3, [r4, #0]
 8029326:	b91e      	cbnz	r6, 8029330 <_printf_i+0x1a4>
 8029328:	6823      	ldr	r3, [r4, #0]
 802932a:	f023 0320 	bic.w	r3, r3, #32
 802932e:	6023      	str	r3, [r4, #0]
 8029330:	2310      	movs	r3, #16
 8029332:	e7a7      	b.n	8029284 <_printf_i+0xf8>
 8029334:	4824      	ldr	r0, [pc, #144]	; (80293c8 <_printf_i+0x23c>)
 8029336:	e7e4      	b.n	8029302 <_printf_i+0x176>
 8029338:	4615      	mov	r5, r2
 802933a:	e7bd      	b.n	80292b8 <_printf_i+0x12c>
 802933c:	682b      	ldr	r3, [r5, #0]
 802933e:	6826      	ldr	r6, [r4, #0]
 8029340:	6961      	ldr	r1, [r4, #20]
 8029342:	1d18      	adds	r0, r3, #4
 8029344:	6028      	str	r0, [r5, #0]
 8029346:	0635      	lsls	r5, r6, #24
 8029348:	681b      	ldr	r3, [r3, #0]
 802934a:	d501      	bpl.n	8029350 <_printf_i+0x1c4>
 802934c:	6019      	str	r1, [r3, #0]
 802934e:	e002      	b.n	8029356 <_printf_i+0x1ca>
 8029350:	0670      	lsls	r0, r6, #25
 8029352:	d5fb      	bpl.n	802934c <_printf_i+0x1c0>
 8029354:	8019      	strh	r1, [r3, #0]
 8029356:	2300      	movs	r3, #0
 8029358:	6123      	str	r3, [r4, #16]
 802935a:	4615      	mov	r5, r2
 802935c:	e7bc      	b.n	80292d8 <_printf_i+0x14c>
 802935e:	682b      	ldr	r3, [r5, #0]
 8029360:	1d1a      	adds	r2, r3, #4
 8029362:	602a      	str	r2, [r5, #0]
 8029364:	681d      	ldr	r5, [r3, #0]
 8029366:	6862      	ldr	r2, [r4, #4]
 8029368:	2100      	movs	r1, #0
 802936a:	4628      	mov	r0, r5
 802936c:	f7d6 ff08 	bl	8000180 <memchr>
 8029370:	b108      	cbz	r0, 8029376 <_printf_i+0x1ea>
 8029372:	1b40      	subs	r0, r0, r5
 8029374:	6060      	str	r0, [r4, #4]
 8029376:	6863      	ldr	r3, [r4, #4]
 8029378:	6123      	str	r3, [r4, #16]
 802937a:	2300      	movs	r3, #0
 802937c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8029380:	e7aa      	b.n	80292d8 <_printf_i+0x14c>
 8029382:	6923      	ldr	r3, [r4, #16]
 8029384:	462a      	mov	r2, r5
 8029386:	4649      	mov	r1, r9
 8029388:	4640      	mov	r0, r8
 802938a:	47d0      	blx	sl
 802938c:	3001      	adds	r0, #1
 802938e:	d0ad      	beq.n	80292ec <_printf_i+0x160>
 8029390:	6823      	ldr	r3, [r4, #0]
 8029392:	079b      	lsls	r3, r3, #30
 8029394:	d413      	bmi.n	80293be <_printf_i+0x232>
 8029396:	68e0      	ldr	r0, [r4, #12]
 8029398:	9b03      	ldr	r3, [sp, #12]
 802939a:	4298      	cmp	r0, r3
 802939c:	bfb8      	it	lt
 802939e:	4618      	movlt	r0, r3
 80293a0:	e7a6      	b.n	80292f0 <_printf_i+0x164>
 80293a2:	2301      	movs	r3, #1
 80293a4:	4632      	mov	r2, r6
 80293a6:	4649      	mov	r1, r9
 80293a8:	4640      	mov	r0, r8
 80293aa:	47d0      	blx	sl
 80293ac:	3001      	adds	r0, #1
 80293ae:	d09d      	beq.n	80292ec <_printf_i+0x160>
 80293b0:	3501      	adds	r5, #1
 80293b2:	68e3      	ldr	r3, [r4, #12]
 80293b4:	9903      	ldr	r1, [sp, #12]
 80293b6:	1a5b      	subs	r3, r3, r1
 80293b8:	42ab      	cmp	r3, r5
 80293ba:	dcf2      	bgt.n	80293a2 <_printf_i+0x216>
 80293bc:	e7eb      	b.n	8029396 <_printf_i+0x20a>
 80293be:	2500      	movs	r5, #0
 80293c0:	f104 0619 	add.w	r6, r4, #25
 80293c4:	e7f5      	b.n	80293b2 <_printf_i+0x226>
 80293c6:	bf00      	nop
 80293c8:	08033e8e 	.word	0x08033e8e
 80293cc:	08033e9f 	.word	0x08033e9f

080293d0 <std>:
 80293d0:	2300      	movs	r3, #0
 80293d2:	b510      	push	{r4, lr}
 80293d4:	4604      	mov	r4, r0
 80293d6:	e9c0 3300 	strd	r3, r3, [r0]
 80293da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80293de:	6083      	str	r3, [r0, #8]
 80293e0:	8181      	strh	r1, [r0, #12]
 80293e2:	6643      	str	r3, [r0, #100]	; 0x64
 80293e4:	81c2      	strh	r2, [r0, #14]
 80293e6:	6183      	str	r3, [r0, #24]
 80293e8:	4619      	mov	r1, r3
 80293ea:	2208      	movs	r2, #8
 80293ec:	305c      	adds	r0, #92	; 0x5c
 80293ee:	f000 fa61 	bl	80298b4 <memset>
 80293f2:	4b0d      	ldr	r3, [pc, #52]	; (8029428 <std+0x58>)
 80293f4:	6263      	str	r3, [r4, #36]	; 0x24
 80293f6:	4b0d      	ldr	r3, [pc, #52]	; (802942c <std+0x5c>)
 80293f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80293fa:	4b0d      	ldr	r3, [pc, #52]	; (8029430 <std+0x60>)
 80293fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80293fe:	4b0d      	ldr	r3, [pc, #52]	; (8029434 <std+0x64>)
 8029400:	6323      	str	r3, [r4, #48]	; 0x30
 8029402:	4b0d      	ldr	r3, [pc, #52]	; (8029438 <std+0x68>)
 8029404:	6224      	str	r4, [r4, #32]
 8029406:	429c      	cmp	r4, r3
 8029408:	d006      	beq.n	8029418 <std+0x48>
 802940a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 802940e:	4294      	cmp	r4, r2
 8029410:	d002      	beq.n	8029418 <std+0x48>
 8029412:	33d0      	adds	r3, #208	; 0xd0
 8029414:	429c      	cmp	r4, r3
 8029416:	d105      	bne.n	8029424 <std+0x54>
 8029418:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802941c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029420:	f000 bad6 	b.w	80299d0 <__retarget_lock_init_recursive>
 8029424:	bd10      	pop	{r4, pc}
 8029426:	bf00      	nop
 8029428:	080296ad 	.word	0x080296ad
 802942c:	080296d3 	.word	0x080296d3
 8029430:	0802970b 	.word	0x0802970b
 8029434:	0802972f 	.word	0x0802972f
 8029438:	20007fb8 	.word	0x20007fb8

0802943c <stdio_exit_handler>:
 802943c:	4a02      	ldr	r2, [pc, #8]	; (8029448 <stdio_exit_handler+0xc>)
 802943e:	4903      	ldr	r1, [pc, #12]	; (802944c <stdio_exit_handler+0x10>)
 8029440:	4803      	ldr	r0, [pc, #12]	; (8029450 <stdio_exit_handler+0x14>)
 8029442:	f000 b87b 	b.w	802953c <_fwalk_sglue>
 8029446:	bf00      	nop
 8029448:	200000cc 	.word	0x200000cc
 802944c:	0802b9c1 	.word	0x0802b9c1
 8029450:	200000d8 	.word	0x200000d8

08029454 <cleanup_stdio>:
 8029454:	6841      	ldr	r1, [r0, #4]
 8029456:	4b0c      	ldr	r3, [pc, #48]	; (8029488 <cleanup_stdio+0x34>)
 8029458:	4299      	cmp	r1, r3
 802945a:	b510      	push	{r4, lr}
 802945c:	4604      	mov	r4, r0
 802945e:	d001      	beq.n	8029464 <cleanup_stdio+0x10>
 8029460:	f002 faae 	bl	802b9c0 <_fflush_r>
 8029464:	68a1      	ldr	r1, [r4, #8]
 8029466:	4b09      	ldr	r3, [pc, #36]	; (802948c <cleanup_stdio+0x38>)
 8029468:	4299      	cmp	r1, r3
 802946a:	d002      	beq.n	8029472 <cleanup_stdio+0x1e>
 802946c:	4620      	mov	r0, r4
 802946e:	f002 faa7 	bl	802b9c0 <_fflush_r>
 8029472:	68e1      	ldr	r1, [r4, #12]
 8029474:	4b06      	ldr	r3, [pc, #24]	; (8029490 <cleanup_stdio+0x3c>)
 8029476:	4299      	cmp	r1, r3
 8029478:	d004      	beq.n	8029484 <cleanup_stdio+0x30>
 802947a:	4620      	mov	r0, r4
 802947c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8029480:	f002 ba9e 	b.w	802b9c0 <_fflush_r>
 8029484:	bd10      	pop	{r4, pc}
 8029486:	bf00      	nop
 8029488:	20007fb8 	.word	0x20007fb8
 802948c:	20008020 	.word	0x20008020
 8029490:	20008088 	.word	0x20008088

08029494 <global_stdio_init.part.0>:
 8029494:	b510      	push	{r4, lr}
 8029496:	4b0b      	ldr	r3, [pc, #44]	; (80294c4 <global_stdio_init.part.0+0x30>)
 8029498:	4c0b      	ldr	r4, [pc, #44]	; (80294c8 <global_stdio_init.part.0+0x34>)
 802949a:	4a0c      	ldr	r2, [pc, #48]	; (80294cc <global_stdio_init.part.0+0x38>)
 802949c:	601a      	str	r2, [r3, #0]
 802949e:	4620      	mov	r0, r4
 80294a0:	2200      	movs	r2, #0
 80294a2:	2104      	movs	r1, #4
 80294a4:	f7ff ff94 	bl	80293d0 <std>
 80294a8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80294ac:	2201      	movs	r2, #1
 80294ae:	2109      	movs	r1, #9
 80294b0:	f7ff ff8e 	bl	80293d0 <std>
 80294b4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80294b8:	2202      	movs	r2, #2
 80294ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80294be:	2112      	movs	r1, #18
 80294c0:	f7ff bf86 	b.w	80293d0 <std>
 80294c4:	200080f0 	.word	0x200080f0
 80294c8:	20007fb8 	.word	0x20007fb8
 80294cc:	0802943d 	.word	0x0802943d

080294d0 <__sfp_lock_acquire>:
 80294d0:	4801      	ldr	r0, [pc, #4]	; (80294d8 <__sfp_lock_acquire+0x8>)
 80294d2:	f000 ba7e 	b.w	80299d2 <__retarget_lock_acquire_recursive>
 80294d6:	bf00      	nop
 80294d8:	200080f9 	.word	0x200080f9

080294dc <__sfp_lock_release>:
 80294dc:	4801      	ldr	r0, [pc, #4]	; (80294e4 <__sfp_lock_release+0x8>)
 80294de:	f000 ba79 	b.w	80299d4 <__retarget_lock_release_recursive>
 80294e2:	bf00      	nop
 80294e4:	200080f9 	.word	0x200080f9

080294e8 <__sinit>:
 80294e8:	b510      	push	{r4, lr}
 80294ea:	4604      	mov	r4, r0
 80294ec:	f7ff fff0 	bl	80294d0 <__sfp_lock_acquire>
 80294f0:	6a23      	ldr	r3, [r4, #32]
 80294f2:	b11b      	cbz	r3, 80294fc <__sinit+0x14>
 80294f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80294f8:	f7ff bff0 	b.w	80294dc <__sfp_lock_release>
 80294fc:	4b04      	ldr	r3, [pc, #16]	; (8029510 <__sinit+0x28>)
 80294fe:	6223      	str	r3, [r4, #32]
 8029500:	4b04      	ldr	r3, [pc, #16]	; (8029514 <__sinit+0x2c>)
 8029502:	681b      	ldr	r3, [r3, #0]
 8029504:	2b00      	cmp	r3, #0
 8029506:	d1f5      	bne.n	80294f4 <__sinit+0xc>
 8029508:	f7ff ffc4 	bl	8029494 <global_stdio_init.part.0>
 802950c:	e7f2      	b.n	80294f4 <__sinit+0xc>
 802950e:	bf00      	nop
 8029510:	08029455 	.word	0x08029455
 8029514:	200080f0 	.word	0x200080f0

08029518 <fiprintf>:
 8029518:	b40e      	push	{r1, r2, r3}
 802951a:	b503      	push	{r0, r1, lr}
 802951c:	4601      	mov	r1, r0
 802951e:	ab03      	add	r3, sp, #12
 8029520:	4805      	ldr	r0, [pc, #20]	; (8029538 <fiprintf+0x20>)
 8029522:	f853 2b04 	ldr.w	r2, [r3], #4
 8029526:	6800      	ldr	r0, [r0, #0]
 8029528:	9301      	str	r3, [sp, #4]
 802952a:	f001 ff5b 	bl	802b3e4 <_vfiprintf_r>
 802952e:	b002      	add	sp, #8
 8029530:	f85d eb04 	ldr.w	lr, [sp], #4
 8029534:	b003      	add	sp, #12
 8029536:	4770      	bx	lr
 8029538:	20000124 	.word	0x20000124

0802953c <_fwalk_sglue>:
 802953c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8029540:	4607      	mov	r7, r0
 8029542:	4688      	mov	r8, r1
 8029544:	4614      	mov	r4, r2
 8029546:	2600      	movs	r6, #0
 8029548:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802954c:	f1b9 0901 	subs.w	r9, r9, #1
 8029550:	d505      	bpl.n	802955e <_fwalk_sglue+0x22>
 8029552:	6824      	ldr	r4, [r4, #0]
 8029554:	2c00      	cmp	r4, #0
 8029556:	d1f7      	bne.n	8029548 <_fwalk_sglue+0xc>
 8029558:	4630      	mov	r0, r6
 802955a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802955e:	89ab      	ldrh	r3, [r5, #12]
 8029560:	2b01      	cmp	r3, #1
 8029562:	d907      	bls.n	8029574 <_fwalk_sglue+0x38>
 8029564:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8029568:	3301      	adds	r3, #1
 802956a:	d003      	beq.n	8029574 <_fwalk_sglue+0x38>
 802956c:	4629      	mov	r1, r5
 802956e:	4638      	mov	r0, r7
 8029570:	47c0      	blx	r8
 8029572:	4306      	orrs	r6, r0
 8029574:	3568      	adds	r5, #104	; 0x68
 8029576:	e7e9      	b.n	802954c <_fwalk_sglue+0x10>

08029578 <iprintf>:
 8029578:	b40f      	push	{r0, r1, r2, r3}
 802957a:	b507      	push	{r0, r1, r2, lr}
 802957c:	4906      	ldr	r1, [pc, #24]	; (8029598 <iprintf+0x20>)
 802957e:	ab04      	add	r3, sp, #16
 8029580:	6808      	ldr	r0, [r1, #0]
 8029582:	f853 2b04 	ldr.w	r2, [r3], #4
 8029586:	6881      	ldr	r1, [r0, #8]
 8029588:	9301      	str	r3, [sp, #4]
 802958a:	f001 ff2b 	bl	802b3e4 <_vfiprintf_r>
 802958e:	b003      	add	sp, #12
 8029590:	f85d eb04 	ldr.w	lr, [sp], #4
 8029594:	b004      	add	sp, #16
 8029596:	4770      	bx	lr
 8029598:	20000124 	.word	0x20000124

0802959c <_puts_r>:
 802959c:	6a03      	ldr	r3, [r0, #32]
 802959e:	b570      	push	{r4, r5, r6, lr}
 80295a0:	6884      	ldr	r4, [r0, #8]
 80295a2:	4605      	mov	r5, r0
 80295a4:	460e      	mov	r6, r1
 80295a6:	b90b      	cbnz	r3, 80295ac <_puts_r+0x10>
 80295a8:	f7ff ff9e 	bl	80294e8 <__sinit>
 80295ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80295ae:	07db      	lsls	r3, r3, #31
 80295b0:	d405      	bmi.n	80295be <_puts_r+0x22>
 80295b2:	89a3      	ldrh	r3, [r4, #12]
 80295b4:	0598      	lsls	r0, r3, #22
 80295b6:	d402      	bmi.n	80295be <_puts_r+0x22>
 80295b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80295ba:	f000 fa0a 	bl	80299d2 <__retarget_lock_acquire_recursive>
 80295be:	89a3      	ldrh	r3, [r4, #12]
 80295c0:	0719      	lsls	r1, r3, #28
 80295c2:	d513      	bpl.n	80295ec <_puts_r+0x50>
 80295c4:	6923      	ldr	r3, [r4, #16]
 80295c6:	b18b      	cbz	r3, 80295ec <_puts_r+0x50>
 80295c8:	3e01      	subs	r6, #1
 80295ca:	68a3      	ldr	r3, [r4, #8]
 80295cc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80295d0:	3b01      	subs	r3, #1
 80295d2:	60a3      	str	r3, [r4, #8]
 80295d4:	b9e9      	cbnz	r1, 8029612 <_puts_r+0x76>
 80295d6:	2b00      	cmp	r3, #0
 80295d8:	da2e      	bge.n	8029638 <_puts_r+0x9c>
 80295da:	4622      	mov	r2, r4
 80295dc:	210a      	movs	r1, #10
 80295de:	4628      	mov	r0, r5
 80295e0:	f000 f8a9 	bl	8029736 <__swbuf_r>
 80295e4:	3001      	adds	r0, #1
 80295e6:	d007      	beq.n	80295f8 <_puts_r+0x5c>
 80295e8:	250a      	movs	r5, #10
 80295ea:	e007      	b.n	80295fc <_puts_r+0x60>
 80295ec:	4621      	mov	r1, r4
 80295ee:	4628      	mov	r0, r5
 80295f0:	f000 f8de 	bl	80297b0 <__swsetup_r>
 80295f4:	2800      	cmp	r0, #0
 80295f6:	d0e7      	beq.n	80295c8 <_puts_r+0x2c>
 80295f8:	f04f 35ff 	mov.w	r5, #4294967295
 80295fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80295fe:	07da      	lsls	r2, r3, #31
 8029600:	d405      	bmi.n	802960e <_puts_r+0x72>
 8029602:	89a3      	ldrh	r3, [r4, #12]
 8029604:	059b      	lsls	r3, r3, #22
 8029606:	d402      	bmi.n	802960e <_puts_r+0x72>
 8029608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802960a:	f000 f9e3 	bl	80299d4 <__retarget_lock_release_recursive>
 802960e:	4628      	mov	r0, r5
 8029610:	bd70      	pop	{r4, r5, r6, pc}
 8029612:	2b00      	cmp	r3, #0
 8029614:	da04      	bge.n	8029620 <_puts_r+0x84>
 8029616:	69a2      	ldr	r2, [r4, #24]
 8029618:	429a      	cmp	r2, r3
 802961a:	dc06      	bgt.n	802962a <_puts_r+0x8e>
 802961c:	290a      	cmp	r1, #10
 802961e:	d004      	beq.n	802962a <_puts_r+0x8e>
 8029620:	6823      	ldr	r3, [r4, #0]
 8029622:	1c5a      	adds	r2, r3, #1
 8029624:	6022      	str	r2, [r4, #0]
 8029626:	7019      	strb	r1, [r3, #0]
 8029628:	e7cf      	b.n	80295ca <_puts_r+0x2e>
 802962a:	4622      	mov	r2, r4
 802962c:	4628      	mov	r0, r5
 802962e:	f000 f882 	bl	8029736 <__swbuf_r>
 8029632:	3001      	adds	r0, #1
 8029634:	d1c9      	bne.n	80295ca <_puts_r+0x2e>
 8029636:	e7df      	b.n	80295f8 <_puts_r+0x5c>
 8029638:	6823      	ldr	r3, [r4, #0]
 802963a:	250a      	movs	r5, #10
 802963c:	1c5a      	adds	r2, r3, #1
 802963e:	6022      	str	r2, [r4, #0]
 8029640:	701d      	strb	r5, [r3, #0]
 8029642:	e7db      	b.n	80295fc <_puts_r+0x60>

08029644 <puts>:
 8029644:	4b02      	ldr	r3, [pc, #8]	; (8029650 <puts+0xc>)
 8029646:	4601      	mov	r1, r0
 8029648:	6818      	ldr	r0, [r3, #0]
 802964a:	f7ff bfa7 	b.w	802959c <_puts_r>
 802964e:	bf00      	nop
 8029650:	20000124 	.word	0x20000124

08029654 <siscanf>:
 8029654:	b40e      	push	{r1, r2, r3}
 8029656:	b510      	push	{r4, lr}
 8029658:	b09f      	sub	sp, #124	; 0x7c
 802965a:	ac21      	add	r4, sp, #132	; 0x84
 802965c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8029660:	f854 2b04 	ldr.w	r2, [r4], #4
 8029664:	9201      	str	r2, [sp, #4]
 8029666:	f8ad 101c 	strh.w	r1, [sp, #28]
 802966a:	9004      	str	r0, [sp, #16]
 802966c:	9008      	str	r0, [sp, #32]
 802966e:	f7d6 fdd7 	bl	8000220 <strlen>
 8029672:	4b0c      	ldr	r3, [pc, #48]	; (80296a4 <siscanf+0x50>)
 8029674:	9005      	str	r0, [sp, #20]
 8029676:	9009      	str	r0, [sp, #36]	; 0x24
 8029678:	930d      	str	r3, [sp, #52]	; 0x34
 802967a:	480b      	ldr	r0, [pc, #44]	; (80296a8 <siscanf+0x54>)
 802967c:	9a01      	ldr	r2, [sp, #4]
 802967e:	6800      	ldr	r0, [r0, #0]
 8029680:	9403      	str	r4, [sp, #12]
 8029682:	2300      	movs	r3, #0
 8029684:	9311      	str	r3, [sp, #68]	; 0x44
 8029686:	9316      	str	r3, [sp, #88]	; 0x58
 8029688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 802968c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8029690:	a904      	add	r1, sp, #16
 8029692:	4623      	mov	r3, r4
 8029694:	f001 fd04 	bl	802b0a0 <__ssvfiscanf_r>
 8029698:	b01f      	add	sp, #124	; 0x7c
 802969a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802969e:	b003      	add	sp, #12
 80296a0:	4770      	bx	lr
 80296a2:	bf00      	nop
 80296a4:	080296cf 	.word	0x080296cf
 80296a8:	20000124 	.word	0x20000124

080296ac <__sread>:
 80296ac:	b510      	push	{r4, lr}
 80296ae:	460c      	mov	r4, r1
 80296b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296b4:	f000 f93e 	bl	8029934 <_read_r>
 80296b8:	2800      	cmp	r0, #0
 80296ba:	bfab      	itete	ge
 80296bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80296be:	89a3      	ldrhlt	r3, [r4, #12]
 80296c0:	181b      	addge	r3, r3, r0
 80296c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80296c6:	bfac      	ite	ge
 80296c8:	6563      	strge	r3, [r4, #84]	; 0x54
 80296ca:	81a3      	strhlt	r3, [r4, #12]
 80296cc:	bd10      	pop	{r4, pc}

080296ce <__seofread>:
 80296ce:	2000      	movs	r0, #0
 80296d0:	4770      	bx	lr

080296d2 <__swrite>:
 80296d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80296d6:	461f      	mov	r7, r3
 80296d8:	898b      	ldrh	r3, [r1, #12]
 80296da:	05db      	lsls	r3, r3, #23
 80296dc:	4605      	mov	r5, r0
 80296de:	460c      	mov	r4, r1
 80296e0:	4616      	mov	r6, r2
 80296e2:	d505      	bpl.n	80296f0 <__swrite+0x1e>
 80296e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80296e8:	2302      	movs	r3, #2
 80296ea:	2200      	movs	r2, #0
 80296ec:	f000 f910 	bl	8029910 <_lseek_r>
 80296f0:	89a3      	ldrh	r3, [r4, #12]
 80296f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80296f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80296fa:	81a3      	strh	r3, [r4, #12]
 80296fc:	4632      	mov	r2, r6
 80296fe:	463b      	mov	r3, r7
 8029700:	4628      	mov	r0, r5
 8029702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8029706:	f000 b927 	b.w	8029958 <_write_r>

0802970a <__sseek>:
 802970a:	b510      	push	{r4, lr}
 802970c:	460c      	mov	r4, r1
 802970e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029712:	f000 f8fd 	bl	8029910 <_lseek_r>
 8029716:	1c43      	adds	r3, r0, #1
 8029718:	89a3      	ldrh	r3, [r4, #12]
 802971a:	bf15      	itete	ne
 802971c:	6560      	strne	r0, [r4, #84]	; 0x54
 802971e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8029722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8029726:	81a3      	strheq	r3, [r4, #12]
 8029728:	bf18      	it	ne
 802972a:	81a3      	strhne	r3, [r4, #12]
 802972c:	bd10      	pop	{r4, pc}

0802972e <__sclose>:
 802972e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8029732:	f000 b8dd 	b.w	80298f0 <_close_r>

08029736 <__swbuf_r>:
 8029736:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8029738:	460e      	mov	r6, r1
 802973a:	4614      	mov	r4, r2
 802973c:	4605      	mov	r5, r0
 802973e:	b118      	cbz	r0, 8029748 <__swbuf_r+0x12>
 8029740:	6a03      	ldr	r3, [r0, #32]
 8029742:	b90b      	cbnz	r3, 8029748 <__swbuf_r+0x12>
 8029744:	f7ff fed0 	bl	80294e8 <__sinit>
 8029748:	69a3      	ldr	r3, [r4, #24]
 802974a:	60a3      	str	r3, [r4, #8]
 802974c:	89a3      	ldrh	r3, [r4, #12]
 802974e:	071a      	lsls	r2, r3, #28
 8029750:	d525      	bpl.n	802979e <__swbuf_r+0x68>
 8029752:	6923      	ldr	r3, [r4, #16]
 8029754:	b31b      	cbz	r3, 802979e <__swbuf_r+0x68>
 8029756:	6823      	ldr	r3, [r4, #0]
 8029758:	6922      	ldr	r2, [r4, #16]
 802975a:	1a98      	subs	r0, r3, r2
 802975c:	6963      	ldr	r3, [r4, #20]
 802975e:	b2f6      	uxtb	r6, r6
 8029760:	4283      	cmp	r3, r0
 8029762:	4637      	mov	r7, r6
 8029764:	dc04      	bgt.n	8029770 <__swbuf_r+0x3a>
 8029766:	4621      	mov	r1, r4
 8029768:	4628      	mov	r0, r5
 802976a:	f002 f929 	bl	802b9c0 <_fflush_r>
 802976e:	b9e0      	cbnz	r0, 80297aa <__swbuf_r+0x74>
 8029770:	68a3      	ldr	r3, [r4, #8]
 8029772:	3b01      	subs	r3, #1
 8029774:	60a3      	str	r3, [r4, #8]
 8029776:	6823      	ldr	r3, [r4, #0]
 8029778:	1c5a      	adds	r2, r3, #1
 802977a:	6022      	str	r2, [r4, #0]
 802977c:	701e      	strb	r6, [r3, #0]
 802977e:	6962      	ldr	r2, [r4, #20]
 8029780:	1c43      	adds	r3, r0, #1
 8029782:	429a      	cmp	r2, r3
 8029784:	d004      	beq.n	8029790 <__swbuf_r+0x5a>
 8029786:	89a3      	ldrh	r3, [r4, #12]
 8029788:	07db      	lsls	r3, r3, #31
 802978a:	d506      	bpl.n	802979a <__swbuf_r+0x64>
 802978c:	2e0a      	cmp	r6, #10
 802978e:	d104      	bne.n	802979a <__swbuf_r+0x64>
 8029790:	4621      	mov	r1, r4
 8029792:	4628      	mov	r0, r5
 8029794:	f002 f914 	bl	802b9c0 <_fflush_r>
 8029798:	b938      	cbnz	r0, 80297aa <__swbuf_r+0x74>
 802979a:	4638      	mov	r0, r7
 802979c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802979e:	4621      	mov	r1, r4
 80297a0:	4628      	mov	r0, r5
 80297a2:	f000 f805 	bl	80297b0 <__swsetup_r>
 80297a6:	2800      	cmp	r0, #0
 80297a8:	d0d5      	beq.n	8029756 <__swbuf_r+0x20>
 80297aa:	f04f 37ff 	mov.w	r7, #4294967295
 80297ae:	e7f4      	b.n	802979a <__swbuf_r+0x64>

080297b0 <__swsetup_r>:
 80297b0:	b538      	push	{r3, r4, r5, lr}
 80297b2:	4b2a      	ldr	r3, [pc, #168]	; (802985c <__swsetup_r+0xac>)
 80297b4:	4605      	mov	r5, r0
 80297b6:	6818      	ldr	r0, [r3, #0]
 80297b8:	460c      	mov	r4, r1
 80297ba:	b118      	cbz	r0, 80297c4 <__swsetup_r+0x14>
 80297bc:	6a03      	ldr	r3, [r0, #32]
 80297be:	b90b      	cbnz	r3, 80297c4 <__swsetup_r+0x14>
 80297c0:	f7ff fe92 	bl	80294e8 <__sinit>
 80297c4:	89a3      	ldrh	r3, [r4, #12]
 80297c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80297ca:	0718      	lsls	r0, r3, #28
 80297cc:	d422      	bmi.n	8029814 <__swsetup_r+0x64>
 80297ce:	06d9      	lsls	r1, r3, #27
 80297d0:	d407      	bmi.n	80297e2 <__swsetup_r+0x32>
 80297d2:	2309      	movs	r3, #9
 80297d4:	602b      	str	r3, [r5, #0]
 80297d6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80297da:	81a3      	strh	r3, [r4, #12]
 80297dc:	f04f 30ff 	mov.w	r0, #4294967295
 80297e0:	e034      	b.n	802984c <__swsetup_r+0x9c>
 80297e2:	0758      	lsls	r0, r3, #29
 80297e4:	d512      	bpl.n	802980c <__swsetup_r+0x5c>
 80297e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80297e8:	b141      	cbz	r1, 80297fc <__swsetup_r+0x4c>
 80297ea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80297ee:	4299      	cmp	r1, r3
 80297f0:	d002      	beq.n	80297f8 <__swsetup_r+0x48>
 80297f2:	4628      	mov	r0, r5
 80297f4:	f000 ff7e 	bl	802a6f4 <_free_r>
 80297f8:	2300      	movs	r3, #0
 80297fa:	6363      	str	r3, [r4, #52]	; 0x34
 80297fc:	89a3      	ldrh	r3, [r4, #12]
 80297fe:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8029802:	81a3      	strh	r3, [r4, #12]
 8029804:	2300      	movs	r3, #0
 8029806:	6063      	str	r3, [r4, #4]
 8029808:	6923      	ldr	r3, [r4, #16]
 802980a:	6023      	str	r3, [r4, #0]
 802980c:	89a3      	ldrh	r3, [r4, #12]
 802980e:	f043 0308 	orr.w	r3, r3, #8
 8029812:	81a3      	strh	r3, [r4, #12]
 8029814:	6923      	ldr	r3, [r4, #16]
 8029816:	b94b      	cbnz	r3, 802982c <__swsetup_r+0x7c>
 8029818:	89a3      	ldrh	r3, [r4, #12]
 802981a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802981e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8029822:	d003      	beq.n	802982c <__swsetup_r+0x7c>
 8029824:	4621      	mov	r1, r4
 8029826:	4628      	mov	r0, r5
 8029828:	f002 f918 	bl	802ba5c <__smakebuf_r>
 802982c:	89a0      	ldrh	r0, [r4, #12]
 802982e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8029832:	f010 0301 	ands.w	r3, r0, #1
 8029836:	d00a      	beq.n	802984e <__swsetup_r+0x9e>
 8029838:	2300      	movs	r3, #0
 802983a:	60a3      	str	r3, [r4, #8]
 802983c:	6963      	ldr	r3, [r4, #20]
 802983e:	425b      	negs	r3, r3
 8029840:	61a3      	str	r3, [r4, #24]
 8029842:	6923      	ldr	r3, [r4, #16]
 8029844:	b943      	cbnz	r3, 8029858 <__swsetup_r+0xa8>
 8029846:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802984a:	d1c4      	bne.n	80297d6 <__swsetup_r+0x26>
 802984c:	bd38      	pop	{r3, r4, r5, pc}
 802984e:	0781      	lsls	r1, r0, #30
 8029850:	bf58      	it	pl
 8029852:	6963      	ldrpl	r3, [r4, #20]
 8029854:	60a3      	str	r3, [r4, #8]
 8029856:	e7f4      	b.n	8029842 <__swsetup_r+0x92>
 8029858:	2000      	movs	r0, #0
 802985a:	e7f7      	b.n	802984c <__swsetup_r+0x9c>
 802985c:	20000124 	.word	0x20000124

08029860 <memcmp>:
 8029860:	b510      	push	{r4, lr}
 8029862:	3901      	subs	r1, #1
 8029864:	4402      	add	r2, r0
 8029866:	4290      	cmp	r0, r2
 8029868:	d101      	bne.n	802986e <memcmp+0xe>
 802986a:	2000      	movs	r0, #0
 802986c:	e005      	b.n	802987a <memcmp+0x1a>
 802986e:	7803      	ldrb	r3, [r0, #0]
 8029870:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8029874:	42a3      	cmp	r3, r4
 8029876:	d001      	beq.n	802987c <memcmp+0x1c>
 8029878:	1b18      	subs	r0, r3, r4
 802987a:	bd10      	pop	{r4, pc}
 802987c:	3001      	adds	r0, #1
 802987e:	e7f2      	b.n	8029866 <memcmp+0x6>

08029880 <memmove>:
 8029880:	4288      	cmp	r0, r1
 8029882:	b510      	push	{r4, lr}
 8029884:	eb01 0402 	add.w	r4, r1, r2
 8029888:	d902      	bls.n	8029890 <memmove+0x10>
 802988a:	4284      	cmp	r4, r0
 802988c:	4623      	mov	r3, r4
 802988e:	d807      	bhi.n	80298a0 <memmove+0x20>
 8029890:	1e43      	subs	r3, r0, #1
 8029892:	42a1      	cmp	r1, r4
 8029894:	d008      	beq.n	80298a8 <memmove+0x28>
 8029896:	f811 2b01 	ldrb.w	r2, [r1], #1
 802989a:	f803 2f01 	strb.w	r2, [r3, #1]!
 802989e:	e7f8      	b.n	8029892 <memmove+0x12>
 80298a0:	4402      	add	r2, r0
 80298a2:	4601      	mov	r1, r0
 80298a4:	428a      	cmp	r2, r1
 80298a6:	d100      	bne.n	80298aa <memmove+0x2a>
 80298a8:	bd10      	pop	{r4, pc}
 80298aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80298ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80298b2:	e7f7      	b.n	80298a4 <memmove+0x24>

080298b4 <memset>:
 80298b4:	4402      	add	r2, r0
 80298b6:	4603      	mov	r3, r0
 80298b8:	4293      	cmp	r3, r2
 80298ba:	d100      	bne.n	80298be <memset+0xa>
 80298bc:	4770      	bx	lr
 80298be:	f803 1b01 	strb.w	r1, [r3], #1
 80298c2:	e7f9      	b.n	80298b8 <memset+0x4>

080298c4 <strncmp>:
 80298c4:	b510      	push	{r4, lr}
 80298c6:	b16a      	cbz	r2, 80298e4 <strncmp+0x20>
 80298c8:	3901      	subs	r1, #1
 80298ca:	1884      	adds	r4, r0, r2
 80298cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80298d0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80298d4:	429a      	cmp	r2, r3
 80298d6:	d103      	bne.n	80298e0 <strncmp+0x1c>
 80298d8:	42a0      	cmp	r0, r4
 80298da:	d001      	beq.n	80298e0 <strncmp+0x1c>
 80298dc:	2a00      	cmp	r2, #0
 80298de:	d1f5      	bne.n	80298cc <strncmp+0x8>
 80298e0:	1ad0      	subs	r0, r2, r3
 80298e2:	bd10      	pop	{r4, pc}
 80298e4:	4610      	mov	r0, r2
 80298e6:	e7fc      	b.n	80298e2 <strncmp+0x1e>

080298e8 <_localeconv_r>:
 80298e8:	4800      	ldr	r0, [pc, #0]	; (80298ec <_localeconv_r+0x4>)
 80298ea:	4770      	bx	lr
 80298ec:	20000218 	.word	0x20000218

080298f0 <_close_r>:
 80298f0:	b538      	push	{r3, r4, r5, lr}
 80298f2:	4d06      	ldr	r5, [pc, #24]	; (802990c <_close_r+0x1c>)
 80298f4:	2300      	movs	r3, #0
 80298f6:	4604      	mov	r4, r0
 80298f8:	4608      	mov	r0, r1
 80298fa:	602b      	str	r3, [r5, #0]
 80298fc:	f7d9 fdf8 	bl	80034f0 <_close>
 8029900:	1c43      	adds	r3, r0, #1
 8029902:	d102      	bne.n	802990a <_close_r+0x1a>
 8029904:	682b      	ldr	r3, [r5, #0]
 8029906:	b103      	cbz	r3, 802990a <_close_r+0x1a>
 8029908:	6023      	str	r3, [r4, #0]
 802990a:	bd38      	pop	{r3, r4, r5, pc}
 802990c:	200080f4 	.word	0x200080f4

08029910 <_lseek_r>:
 8029910:	b538      	push	{r3, r4, r5, lr}
 8029912:	4d07      	ldr	r5, [pc, #28]	; (8029930 <_lseek_r+0x20>)
 8029914:	4604      	mov	r4, r0
 8029916:	4608      	mov	r0, r1
 8029918:	4611      	mov	r1, r2
 802991a:	2200      	movs	r2, #0
 802991c:	602a      	str	r2, [r5, #0]
 802991e:	461a      	mov	r2, r3
 8029920:	f7d9 fe0d 	bl	800353e <_lseek>
 8029924:	1c43      	adds	r3, r0, #1
 8029926:	d102      	bne.n	802992e <_lseek_r+0x1e>
 8029928:	682b      	ldr	r3, [r5, #0]
 802992a:	b103      	cbz	r3, 802992e <_lseek_r+0x1e>
 802992c:	6023      	str	r3, [r4, #0]
 802992e:	bd38      	pop	{r3, r4, r5, pc}
 8029930:	200080f4 	.word	0x200080f4

08029934 <_read_r>:
 8029934:	b538      	push	{r3, r4, r5, lr}
 8029936:	4d07      	ldr	r5, [pc, #28]	; (8029954 <_read_r+0x20>)
 8029938:	4604      	mov	r4, r0
 802993a:	4608      	mov	r0, r1
 802993c:	4611      	mov	r1, r2
 802993e:	2200      	movs	r2, #0
 8029940:	602a      	str	r2, [r5, #0]
 8029942:	461a      	mov	r2, r3
 8029944:	f7d9 fdb7 	bl	80034b6 <_read>
 8029948:	1c43      	adds	r3, r0, #1
 802994a:	d102      	bne.n	8029952 <_read_r+0x1e>
 802994c:	682b      	ldr	r3, [r5, #0]
 802994e:	b103      	cbz	r3, 8029952 <_read_r+0x1e>
 8029950:	6023      	str	r3, [r4, #0]
 8029952:	bd38      	pop	{r3, r4, r5, pc}
 8029954:	200080f4 	.word	0x200080f4

08029958 <_write_r>:
 8029958:	b538      	push	{r3, r4, r5, lr}
 802995a:	4d07      	ldr	r5, [pc, #28]	; (8029978 <_write_r+0x20>)
 802995c:	4604      	mov	r4, r0
 802995e:	4608      	mov	r0, r1
 8029960:	4611      	mov	r1, r2
 8029962:	2200      	movs	r2, #0
 8029964:	602a      	str	r2, [r5, #0]
 8029966:	461a      	mov	r2, r3
 8029968:	f7ec ff44 	bl	80167f4 <_write>
 802996c:	1c43      	adds	r3, r0, #1
 802996e:	d102      	bne.n	8029976 <_write_r+0x1e>
 8029970:	682b      	ldr	r3, [r5, #0]
 8029972:	b103      	cbz	r3, 8029976 <_write_r+0x1e>
 8029974:	6023      	str	r3, [r4, #0]
 8029976:	bd38      	pop	{r3, r4, r5, pc}
 8029978:	200080f4 	.word	0x200080f4

0802997c <__errno>:
 802997c:	4b01      	ldr	r3, [pc, #4]	; (8029984 <__errno+0x8>)
 802997e:	6818      	ldr	r0, [r3, #0]
 8029980:	4770      	bx	lr
 8029982:	bf00      	nop
 8029984:	20000124 	.word	0x20000124

08029988 <__libc_init_array>:
 8029988:	b570      	push	{r4, r5, r6, lr}
 802998a:	4d0d      	ldr	r5, [pc, #52]	; (80299c0 <__libc_init_array+0x38>)
 802998c:	4c0d      	ldr	r4, [pc, #52]	; (80299c4 <__libc_init_array+0x3c>)
 802998e:	1b64      	subs	r4, r4, r5
 8029990:	10a4      	asrs	r4, r4, #2
 8029992:	2600      	movs	r6, #0
 8029994:	42a6      	cmp	r6, r4
 8029996:	d109      	bne.n	80299ac <__libc_init_array+0x24>
 8029998:	4d0b      	ldr	r5, [pc, #44]	; (80299c8 <__libc_init_array+0x40>)
 802999a:	4c0c      	ldr	r4, [pc, #48]	; (80299cc <__libc_init_array+0x44>)
 802999c:	f003 fa4e 	bl	802ce3c <_init>
 80299a0:	1b64      	subs	r4, r4, r5
 80299a2:	10a4      	asrs	r4, r4, #2
 80299a4:	2600      	movs	r6, #0
 80299a6:	42a6      	cmp	r6, r4
 80299a8:	d105      	bne.n	80299b6 <__libc_init_array+0x2e>
 80299aa:	bd70      	pop	{r4, r5, r6, pc}
 80299ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80299b0:	4798      	blx	r3
 80299b2:	3601      	adds	r6, #1
 80299b4:	e7ee      	b.n	8029994 <__libc_init_array+0xc>
 80299b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80299ba:	4798      	blx	r3
 80299bc:	3601      	adds	r6, #1
 80299be:	e7f2      	b.n	80299a6 <__libc_init_array+0x1e>
 80299c0:	08034208 	.word	0x08034208
 80299c4:	08034208 	.word	0x08034208
 80299c8:	08034208 	.word	0x08034208
 80299cc:	0803420c 	.word	0x0803420c

080299d0 <__retarget_lock_init_recursive>:
 80299d0:	4770      	bx	lr

080299d2 <__retarget_lock_acquire_recursive>:
 80299d2:	4770      	bx	lr

080299d4 <__retarget_lock_release_recursive>:
 80299d4:	4770      	bx	lr

080299d6 <memcpy>:
 80299d6:	440a      	add	r2, r1
 80299d8:	4291      	cmp	r1, r2
 80299da:	f100 33ff 	add.w	r3, r0, #4294967295
 80299de:	d100      	bne.n	80299e2 <memcpy+0xc>
 80299e0:	4770      	bx	lr
 80299e2:	b510      	push	{r4, lr}
 80299e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80299e8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80299ec:	4291      	cmp	r1, r2
 80299ee:	d1f9      	bne.n	80299e4 <memcpy+0xe>
 80299f0:	bd10      	pop	{r4, pc}

080299f2 <abort>:
 80299f2:	b508      	push	{r3, lr}
 80299f4:	2006      	movs	r0, #6
 80299f6:	f002 f909 	bl	802bc0c <raise>
 80299fa:	2001      	movs	r0, #1
 80299fc:	f7d9 fd51 	bl	80034a2 <_exit>

08029a00 <quorem>:
 8029a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029a04:	6903      	ldr	r3, [r0, #16]
 8029a06:	690c      	ldr	r4, [r1, #16]
 8029a08:	42a3      	cmp	r3, r4
 8029a0a:	4607      	mov	r7, r0
 8029a0c:	db7e      	blt.n	8029b0c <quorem+0x10c>
 8029a0e:	3c01      	subs	r4, #1
 8029a10:	f101 0814 	add.w	r8, r1, #20
 8029a14:	f100 0514 	add.w	r5, r0, #20
 8029a18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029a1c:	9301      	str	r3, [sp, #4]
 8029a1e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8029a22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029a26:	3301      	adds	r3, #1
 8029a28:	429a      	cmp	r2, r3
 8029a2a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8029a2e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8029a32:	fbb2 f6f3 	udiv	r6, r2, r3
 8029a36:	d331      	bcc.n	8029a9c <quorem+0x9c>
 8029a38:	f04f 0e00 	mov.w	lr, #0
 8029a3c:	4640      	mov	r0, r8
 8029a3e:	46ac      	mov	ip, r5
 8029a40:	46f2      	mov	sl, lr
 8029a42:	f850 2b04 	ldr.w	r2, [r0], #4
 8029a46:	b293      	uxth	r3, r2
 8029a48:	fb06 e303 	mla	r3, r6, r3, lr
 8029a4c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8029a50:	0c1a      	lsrs	r2, r3, #16
 8029a52:	b29b      	uxth	r3, r3
 8029a54:	ebaa 0303 	sub.w	r3, sl, r3
 8029a58:	f8dc a000 	ldr.w	sl, [ip]
 8029a5c:	fa13 f38a 	uxtah	r3, r3, sl
 8029a60:	fb06 220e 	mla	r2, r6, lr, r2
 8029a64:	9300      	str	r3, [sp, #0]
 8029a66:	9b00      	ldr	r3, [sp, #0]
 8029a68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8029a6c:	b292      	uxth	r2, r2
 8029a6e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8029a72:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8029a76:	f8bd 3000 	ldrh.w	r3, [sp]
 8029a7a:	4581      	cmp	r9, r0
 8029a7c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029a80:	f84c 3b04 	str.w	r3, [ip], #4
 8029a84:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8029a88:	d2db      	bcs.n	8029a42 <quorem+0x42>
 8029a8a:	f855 300b 	ldr.w	r3, [r5, fp]
 8029a8e:	b92b      	cbnz	r3, 8029a9c <quorem+0x9c>
 8029a90:	9b01      	ldr	r3, [sp, #4]
 8029a92:	3b04      	subs	r3, #4
 8029a94:	429d      	cmp	r5, r3
 8029a96:	461a      	mov	r2, r3
 8029a98:	d32c      	bcc.n	8029af4 <quorem+0xf4>
 8029a9a:	613c      	str	r4, [r7, #16]
 8029a9c:	4638      	mov	r0, r7
 8029a9e:	f001 f9a5 	bl	802adec <__mcmp>
 8029aa2:	2800      	cmp	r0, #0
 8029aa4:	db22      	blt.n	8029aec <quorem+0xec>
 8029aa6:	3601      	adds	r6, #1
 8029aa8:	4629      	mov	r1, r5
 8029aaa:	2000      	movs	r0, #0
 8029aac:	f858 2b04 	ldr.w	r2, [r8], #4
 8029ab0:	f8d1 c000 	ldr.w	ip, [r1]
 8029ab4:	b293      	uxth	r3, r2
 8029ab6:	1ac3      	subs	r3, r0, r3
 8029ab8:	0c12      	lsrs	r2, r2, #16
 8029aba:	fa13 f38c 	uxtah	r3, r3, ip
 8029abe:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8029ac2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8029ac6:	b29b      	uxth	r3, r3
 8029ac8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8029acc:	45c1      	cmp	r9, r8
 8029ace:	f841 3b04 	str.w	r3, [r1], #4
 8029ad2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8029ad6:	d2e9      	bcs.n	8029aac <quorem+0xac>
 8029ad8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8029adc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8029ae0:	b922      	cbnz	r2, 8029aec <quorem+0xec>
 8029ae2:	3b04      	subs	r3, #4
 8029ae4:	429d      	cmp	r5, r3
 8029ae6:	461a      	mov	r2, r3
 8029ae8:	d30a      	bcc.n	8029b00 <quorem+0x100>
 8029aea:	613c      	str	r4, [r7, #16]
 8029aec:	4630      	mov	r0, r6
 8029aee:	b003      	add	sp, #12
 8029af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029af4:	6812      	ldr	r2, [r2, #0]
 8029af6:	3b04      	subs	r3, #4
 8029af8:	2a00      	cmp	r2, #0
 8029afa:	d1ce      	bne.n	8029a9a <quorem+0x9a>
 8029afc:	3c01      	subs	r4, #1
 8029afe:	e7c9      	b.n	8029a94 <quorem+0x94>
 8029b00:	6812      	ldr	r2, [r2, #0]
 8029b02:	3b04      	subs	r3, #4
 8029b04:	2a00      	cmp	r2, #0
 8029b06:	d1f0      	bne.n	8029aea <quorem+0xea>
 8029b08:	3c01      	subs	r4, #1
 8029b0a:	e7eb      	b.n	8029ae4 <quorem+0xe4>
 8029b0c:	2000      	movs	r0, #0
 8029b0e:	e7ee      	b.n	8029aee <quorem+0xee>

08029b10 <_dtoa_r>:
 8029b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8029b14:	ed2d 8b04 	vpush	{d8-d9}
 8029b18:	69c5      	ldr	r5, [r0, #28]
 8029b1a:	b093      	sub	sp, #76	; 0x4c
 8029b1c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8029b20:	ec57 6b10 	vmov	r6, r7, d0
 8029b24:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8029b28:	9107      	str	r1, [sp, #28]
 8029b2a:	4604      	mov	r4, r0
 8029b2c:	920a      	str	r2, [sp, #40]	; 0x28
 8029b2e:	930d      	str	r3, [sp, #52]	; 0x34
 8029b30:	b975      	cbnz	r5, 8029b50 <_dtoa_r+0x40>
 8029b32:	2010      	movs	r0, #16
 8029b34:	f000 fe2a 	bl	802a78c <malloc>
 8029b38:	4602      	mov	r2, r0
 8029b3a:	61e0      	str	r0, [r4, #28]
 8029b3c:	b920      	cbnz	r0, 8029b48 <_dtoa_r+0x38>
 8029b3e:	4bae      	ldr	r3, [pc, #696]	; (8029df8 <_dtoa_r+0x2e8>)
 8029b40:	21ef      	movs	r1, #239	; 0xef
 8029b42:	48ae      	ldr	r0, [pc, #696]	; (8029dfc <_dtoa_r+0x2ec>)
 8029b44:	f7fe ffc0 	bl	8028ac8 <__assert_func>
 8029b48:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8029b4c:	6005      	str	r5, [r0, #0]
 8029b4e:	60c5      	str	r5, [r0, #12]
 8029b50:	69e3      	ldr	r3, [r4, #28]
 8029b52:	6819      	ldr	r1, [r3, #0]
 8029b54:	b151      	cbz	r1, 8029b6c <_dtoa_r+0x5c>
 8029b56:	685a      	ldr	r2, [r3, #4]
 8029b58:	604a      	str	r2, [r1, #4]
 8029b5a:	2301      	movs	r3, #1
 8029b5c:	4093      	lsls	r3, r2
 8029b5e:	608b      	str	r3, [r1, #8]
 8029b60:	4620      	mov	r0, r4
 8029b62:	f000 ff07 	bl	802a974 <_Bfree>
 8029b66:	69e3      	ldr	r3, [r4, #28]
 8029b68:	2200      	movs	r2, #0
 8029b6a:	601a      	str	r2, [r3, #0]
 8029b6c:	1e3b      	subs	r3, r7, #0
 8029b6e:	bfbb      	ittet	lt
 8029b70:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8029b74:	9303      	strlt	r3, [sp, #12]
 8029b76:	2300      	movge	r3, #0
 8029b78:	2201      	movlt	r2, #1
 8029b7a:	bfac      	ite	ge
 8029b7c:	f8c8 3000 	strge.w	r3, [r8]
 8029b80:	f8c8 2000 	strlt.w	r2, [r8]
 8029b84:	4b9e      	ldr	r3, [pc, #632]	; (8029e00 <_dtoa_r+0x2f0>)
 8029b86:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8029b8a:	ea33 0308 	bics.w	r3, r3, r8
 8029b8e:	d11b      	bne.n	8029bc8 <_dtoa_r+0xb8>
 8029b90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029b92:	f242 730f 	movw	r3, #9999	; 0x270f
 8029b96:	6013      	str	r3, [r2, #0]
 8029b98:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8029b9c:	4333      	orrs	r3, r6
 8029b9e:	f000 8593 	beq.w	802a6c8 <_dtoa_r+0xbb8>
 8029ba2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029ba4:	b963      	cbnz	r3, 8029bc0 <_dtoa_r+0xb0>
 8029ba6:	4b97      	ldr	r3, [pc, #604]	; (8029e04 <_dtoa_r+0x2f4>)
 8029ba8:	e027      	b.n	8029bfa <_dtoa_r+0xea>
 8029baa:	4b97      	ldr	r3, [pc, #604]	; (8029e08 <_dtoa_r+0x2f8>)
 8029bac:	9300      	str	r3, [sp, #0]
 8029bae:	3308      	adds	r3, #8
 8029bb0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8029bb2:	6013      	str	r3, [r2, #0]
 8029bb4:	9800      	ldr	r0, [sp, #0]
 8029bb6:	b013      	add	sp, #76	; 0x4c
 8029bb8:	ecbd 8b04 	vpop	{d8-d9}
 8029bbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8029bc0:	4b90      	ldr	r3, [pc, #576]	; (8029e04 <_dtoa_r+0x2f4>)
 8029bc2:	9300      	str	r3, [sp, #0]
 8029bc4:	3303      	adds	r3, #3
 8029bc6:	e7f3      	b.n	8029bb0 <_dtoa_r+0xa0>
 8029bc8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8029bcc:	2200      	movs	r2, #0
 8029bce:	ec51 0b17 	vmov	r0, r1, d7
 8029bd2:	eeb0 8a47 	vmov.f32	s16, s14
 8029bd6:	eef0 8a67 	vmov.f32	s17, s15
 8029bda:	2300      	movs	r3, #0
 8029bdc:	f7d6 ff4c 	bl	8000a78 <__aeabi_dcmpeq>
 8029be0:	4681      	mov	r9, r0
 8029be2:	b160      	cbz	r0, 8029bfe <_dtoa_r+0xee>
 8029be4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8029be6:	2301      	movs	r3, #1
 8029be8:	6013      	str	r3, [r2, #0]
 8029bea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8029bec:	2b00      	cmp	r3, #0
 8029bee:	f000 8568 	beq.w	802a6c2 <_dtoa_r+0xbb2>
 8029bf2:	4b86      	ldr	r3, [pc, #536]	; (8029e0c <_dtoa_r+0x2fc>)
 8029bf4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8029bf6:	6013      	str	r3, [r2, #0]
 8029bf8:	3b01      	subs	r3, #1
 8029bfa:	9300      	str	r3, [sp, #0]
 8029bfc:	e7da      	b.n	8029bb4 <_dtoa_r+0xa4>
 8029bfe:	aa10      	add	r2, sp, #64	; 0x40
 8029c00:	a911      	add	r1, sp, #68	; 0x44
 8029c02:	4620      	mov	r0, r4
 8029c04:	eeb0 0a48 	vmov.f32	s0, s16
 8029c08:	eef0 0a68 	vmov.f32	s1, s17
 8029c0c:	f001 f994 	bl	802af38 <__d2b>
 8029c10:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8029c14:	4682      	mov	sl, r0
 8029c16:	2d00      	cmp	r5, #0
 8029c18:	d07f      	beq.n	8029d1a <_dtoa_r+0x20a>
 8029c1a:	ee18 3a90 	vmov	r3, s17
 8029c1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8029c22:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8029c26:	ec51 0b18 	vmov	r0, r1, d8
 8029c2a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8029c2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8029c32:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8029c36:	4619      	mov	r1, r3
 8029c38:	2200      	movs	r2, #0
 8029c3a:	4b75      	ldr	r3, [pc, #468]	; (8029e10 <_dtoa_r+0x300>)
 8029c3c:	f7d6 fafc 	bl	8000238 <__aeabi_dsub>
 8029c40:	a367      	add	r3, pc, #412	; (adr r3, 8029de0 <_dtoa_r+0x2d0>)
 8029c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029c46:	f7d6 fcaf 	bl	80005a8 <__aeabi_dmul>
 8029c4a:	a367      	add	r3, pc, #412	; (adr r3, 8029de8 <_dtoa_r+0x2d8>)
 8029c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029c50:	f7d6 faf4 	bl	800023c <__adddf3>
 8029c54:	4606      	mov	r6, r0
 8029c56:	4628      	mov	r0, r5
 8029c58:	460f      	mov	r7, r1
 8029c5a:	f7d6 fc3b 	bl	80004d4 <__aeabi_i2d>
 8029c5e:	a364      	add	r3, pc, #400	; (adr r3, 8029df0 <_dtoa_r+0x2e0>)
 8029c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029c64:	f7d6 fca0 	bl	80005a8 <__aeabi_dmul>
 8029c68:	4602      	mov	r2, r0
 8029c6a:	460b      	mov	r3, r1
 8029c6c:	4630      	mov	r0, r6
 8029c6e:	4639      	mov	r1, r7
 8029c70:	f7d6 fae4 	bl	800023c <__adddf3>
 8029c74:	4606      	mov	r6, r0
 8029c76:	460f      	mov	r7, r1
 8029c78:	f7d6 ff46 	bl	8000b08 <__aeabi_d2iz>
 8029c7c:	2200      	movs	r2, #0
 8029c7e:	4683      	mov	fp, r0
 8029c80:	2300      	movs	r3, #0
 8029c82:	4630      	mov	r0, r6
 8029c84:	4639      	mov	r1, r7
 8029c86:	f7d6 ff01 	bl	8000a8c <__aeabi_dcmplt>
 8029c8a:	b148      	cbz	r0, 8029ca0 <_dtoa_r+0x190>
 8029c8c:	4658      	mov	r0, fp
 8029c8e:	f7d6 fc21 	bl	80004d4 <__aeabi_i2d>
 8029c92:	4632      	mov	r2, r6
 8029c94:	463b      	mov	r3, r7
 8029c96:	f7d6 feef 	bl	8000a78 <__aeabi_dcmpeq>
 8029c9a:	b908      	cbnz	r0, 8029ca0 <_dtoa_r+0x190>
 8029c9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029ca0:	f1bb 0f16 	cmp.w	fp, #22
 8029ca4:	d857      	bhi.n	8029d56 <_dtoa_r+0x246>
 8029ca6:	4b5b      	ldr	r3, [pc, #364]	; (8029e14 <_dtoa_r+0x304>)
 8029ca8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8029cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029cb0:	ec51 0b18 	vmov	r0, r1, d8
 8029cb4:	f7d6 feea 	bl	8000a8c <__aeabi_dcmplt>
 8029cb8:	2800      	cmp	r0, #0
 8029cba:	d04e      	beq.n	8029d5a <_dtoa_r+0x24a>
 8029cbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8029cc0:	2300      	movs	r3, #0
 8029cc2:	930c      	str	r3, [sp, #48]	; 0x30
 8029cc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8029cc6:	1b5b      	subs	r3, r3, r5
 8029cc8:	1e5a      	subs	r2, r3, #1
 8029cca:	bf45      	ittet	mi
 8029ccc:	f1c3 0301 	rsbmi	r3, r3, #1
 8029cd0:	9305      	strmi	r3, [sp, #20]
 8029cd2:	2300      	movpl	r3, #0
 8029cd4:	2300      	movmi	r3, #0
 8029cd6:	9206      	str	r2, [sp, #24]
 8029cd8:	bf54      	ite	pl
 8029cda:	9305      	strpl	r3, [sp, #20]
 8029cdc:	9306      	strmi	r3, [sp, #24]
 8029cde:	f1bb 0f00 	cmp.w	fp, #0
 8029ce2:	db3c      	blt.n	8029d5e <_dtoa_r+0x24e>
 8029ce4:	9b06      	ldr	r3, [sp, #24]
 8029ce6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8029cea:	445b      	add	r3, fp
 8029cec:	9306      	str	r3, [sp, #24]
 8029cee:	2300      	movs	r3, #0
 8029cf0:	9308      	str	r3, [sp, #32]
 8029cf2:	9b07      	ldr	r3, [sp, #28]
 8029cf4:	2b09      	cmp	r3, #9
 8029cf6:	d868      	bhi.n	8029dca <_dtoa_r+0x2ba>
 8029cf8:	2b05      	cmp	r3, #5
 8029cfa:	bfc4      	itt	gt
 8029cfc:	3b04      	subgt	r3, #4
 8029cfe:	9307      	strgt	r3, [sp, #28]
 8029d00:	9b07      	ldr	r3, [sp, #28]
 8029d02:	f1a3 0302 	sub.w	r3, r3, #2
 8029d06:	bfcc      	ite	gt
 8029d08:	2500      	movgt	r5, #0
 8029d0a:	2501      	movle	r5, #1
 8029d0c:	2b03      	cmp	r3, #3
 8029d0e:	f200 8085 	bhi.w	8029e1c <_dtoa_r+0x30c>
 8029d12:	e8df f003 	tbb	[pc, r3]
 8029d16:	3b2e      	.short	0x3b2e
 8029d18:	5839      	.short	0x5839
 8029d1a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8029d1e:	441d      	add	r5, r3
 8029d20:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8029d24:	2b20      	cmp	r3, #32
 8029d26:	bfc1      	itttt	gt
 8029d28:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8029d2c:	fa08 f803 	lslgt.w	r8, r8, r3
 8029d30:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8029d34:	fa26 f303 	lsrgt.w	r3, r6, r3
 8029d38:	bfd6      	itet	le
 8029d3a:	f1c3 0320 	rsble	r3, r3, #32
 8029d3e:	ea48 0003 	orrgt.w	r0, r8, r3
 8029d42:	fa06 f003 	lslle.w	r0, r6, r3
 8029d46:	f7d6 fbb5 	bl	80004b4 <__aeabi_ui2d>
 8029d4a:	2201      	movs	r2, #1
 8029d4c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8029d50:	3d01      	subs	r5, #1
 8029d52:	920e      	str	r2, [sp, #56]	; 0x38
 8029d54:	e76f      	b.n	8029c36 <_dtoa_r+0x126>
 8029d56:	2301      	movs	r3, #1
 8029d58:	e7b3      	b.n	8029cc2 <_dtoa_r+0x1b2>
 8029d5a:	900c      	str	r0, [sp, #48]	; 0x30
 8029d5c:	e7b2      	b.n	8029cc4 <_dtoa_r+0x1b4>
 8029d5e:	9b05      	ldr	r3, [sp, #20]
 8029d60:	eba3 030b 	sub.w	r3, r3, fp
 8029d64:	9305      	str	r3, [sp, #20]
 8029d66:	f1cb 0300 	rsb	r3, fp, #0
 8029d6a:	9308      	str	r3, [sp, #32]
 8029d6c:	2300      	movs	r3, #0
 8029d6e:	930b      	str	r3, [sp, #44]	; 0x2c
 8029d70:	e7bf      	b.n	8029cf2 <_dtoa_r+0x1e2>
 8029d72:	2300      	movs	r3, #0
 8029d74:	9309      	str	r3, [sp, #36]	; 0x24
 8029d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029d78:	2b00      	cmp	r3, #0
 8029d7a:	dc52      	bgt.n	8029e22 <_dtoa_r+0x312>
 8029d7c:	2301      	movs	r3, #1
 8029d7e:	9301      	str	r3, [sp, #4]
 8029d80:	9304      	str	r3, [sp, #16]
 8029d82:	461a      	mov	r2, r3
 8029d84:	920a      	str	r2, [sp, #40]	; 0x28
 8029d86:	e00b      	b.n	8029da0 <_dtoa_r+0x290>
 8029d88:	2301      	movs	r3, #1
 8029d8a:	e7f3      	b.n	8029d74 <_dtoa_r+0x264>
 8029d8c:	2300      	movs	r3, #0
 8029d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8029d90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029d92:	445b      	add	r3, fp
 8029d94:	9301      	str	r3, [sp, #4]
 8029d96:	3301      	adds	r3, #1
 8029d98:	2b01      	cmp	r3, #1
 8029d9a:	9304      	str	r3, [sp, #16]
 8029d9c:	bfb8      	it	lt
 8029d9e:	2301      	movlt	r3, #1
 8029da0:	69e0      	ldr	r0, [r4, #28]
 8029da2:	2100      	movs	r1, #0
 8029da4:	2204      	movs	r2, #4
 8029da6:	f102 0614 	add.w	r6, r2, #20
 8029daa:	429e      	cmp	r6, r3
 8029dac:	d93d      	bls.n	8029e2a <_dtoa_r+0x31a>
 8029dae:	6041      	str	r1, [r0, #4]
 8029db0:	4620      	mov	r0, r4
 8029db2:	f000 fd9f 	bl	802a8f4 <_Balloc>
 8029db6:	9000      	str	r0, [sp, #0]
 8029db8:	2800      	cmp	r0, #0
 8029dba:	d139      	bne.n	8029e30 <_dtoa_r+0x320>
 8029dbc:	4b16      	ldr	r3, [pc, #88]	; (8029e18 <_dtoa_r+0x308>)
 8029dbe:	4602      	mov	r2, r0
 8029dc0:	f240 11af 	movw	r1, #431	; 0x1af
 8029dc4:	e6bd      	b.n	8029b42 <_dtoa_r+0x32>
 8029dc6:	2301      	movs	r3, #1
 8029dc8:	e7e1      	b.n	8029d8e <_dtoa_r+0x27e>
 8029dca:	2501      	movs	r5, #1
 8029dcc:	2300      	movs	r3, #0
 8029dce:	9307      	str	r3, [sp, #28]
 8029dd0:	9509      	str	r5, [sp, #36]	; 0x24
 8029dd2:	f04f 33ff 	mov.w	r3, #4294967295
 8029dd6:	9301      	str	r3, [sp, #4]
 8029dd8:	9304      	str	r3, [sp, #16]
 8029dda:	2200      	movs	r2, #0
 8029ddc:	2312      	movs	r3, #18
 8029dde:	e7d1      	b.n	8029d84 <_dtoa_r+0x274>
 8029de0:	636f4361 	.word	0x636f4361
 8029de4:	3fd287a7 	.word	0x3fd287a7
 8029de8:	8b60c8b3 	.word	0x8b60c8b3
 8029dec:	3fc68a28 	.word	0x3fc68a28
 8029df0:	509f79fb 	.word	0x509f79fb
 8029df4:	3fd34413 	.word	0x3fd34413
 8029df8:	08033ebd 	.word	0x08033ebd
 8029dfc:	08033ed4 	.word	0x08033ed4
 8029e00:	7ff00000 	.word	0x7ff00000
 8029e04:	08033eb9 	.word	0x08033eb9
 8029e08:	08033eb0 	.word	0x08033eb0
 8029e0c:	08033d6c 	.word	0x08033d6c
 8029e10:	3ff80000 	.word	0x3ff80000
 8029e14:	08033fc0 	.word	0x08033fc0
 8029e18:	08033f2c 	.word	0x08033f2c
 8029e1c:	2301      	movs	r3, #1
 8029e1e:	9309      	str	r3, [sp, #36]	; 0x24
 8029e20:	e7d7      	b.n	8029dd2 <_dtoa_r+0x2c2>
 8029e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029e24:	9301      	str	r3, [sp, #4]
 8029e26:	9304      	str	r3, [sp, #16]
 8029e28:	e7ba      	b.n	8029da0 <_dtoa_r+0x290>
 8029e2a:	3101      	adds	r1, #1
 8029e2c:	0052      	lsls	r2, r2, #1
 8029e2e:	e7ba      	b.n	8029da6 <_dtoa_r+0x296>
 8029e30:	69e3      	ldr	r3, [r4, #28]
 8029e32:	9a00      	ldr	r2, [sp, #0]
 8029e34:	601a      	str	r2, [r3, #0]
 8029e36:	9b04      	ldr	r3, [sp, #16]
 8029e38:	2b0e      	cmp	r3, #14
 8029e3a:	f200 80a8 	bhi.w	8029f8e <_dtoa_r+0x47e>
 8029e3e:	2d00      	cmp	r5, #0
 8029e40:	f000 80a5 	beq.w	8029f8e <_dtoa_r+0x47e>
 8029e44:	f1bb 0f00 	cmp.w	fp, #0
 8029e48:	dd38      	ble.n	8029ebc <_dtoa_r+0x3ac>
 8029e4a:	4bc0      	ldr	r3, [pc, #768]	; (802a14c <_dtoa_r+0x63c>)
 8029e4c:	f00b 020f 	and.w	r2, fp, #15
 8029e50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029e54:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8029e58:	e9d3 6700 	ldrd	r6, r7, [r3]
 8029e5c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8029e60:	d019      	beq.n	8029e96 <_dtoa_r+0x386>
 8029e62:	4bbb      	ldr	r3, [pc, #748]	; (802a150 <_dtoa_r+0x640>)
 8029e64:	ec51 0b18 	vmov	r0, r1, d8
 8029e68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8029e6c:	f7d6 fcc6 	bl	80007fc <__aeabi_ddiv>
 8029e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029e74:	f008 080f 	and.w	r8, r8, #15
 8029e78:	2503      	movs	r5, #3
 8029e7a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 802a150 <_dtoa_r+0x640>
 8029e7e:	f1b8 0f00 	cmp.w	r8, #0
 8029e82:	d10a      	bne.n	8029e9a <_dtoa_r+0x38a>
 8029e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8029e88:	4632      	mov	r2, r6
 8029e8a:	463b      	mov	r3, r7
 8029e8c:	f7d6 fcb6 	bl	80007fc <__aeabi_ddiv>
 8029e90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029e94:	e02b      	b.n	8029eee <_dtoa_r+0x3de>
 8029e96:	2502      	movs	r5, #2
 8029e98:	e7ef      	b.n	8029e7a <_dtoa_r+0x36a>
 8029e9a:	f018 0f01 	tst.w	r8, #1
 8029e9e:	d008      	beq.n	8029eb2 <_dtoa_r+0x3a2>
 8029ea0:	4630      	mov	r0, r6
 8029ea2:	4639      	mov	r1, r7
 8029ea4:	e9d9 2300 	ldrd	r2, r3, [r9]
 8029ea8:	f7d6 fb7e 	bl	80005a8 <__aeabi_dmul>
 8029eac:	3501      	adds	r5, #1
 8029eae:	4606      	mov	r6, r0
 8029eb0:	460f      	mov	r7, r1
 8029eb2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8029eb6:	f109 0908 	add.w	r9, r9, #8
 8029eba:	e7e0      	b.n	8029e7e <_dtoa_r+0x36e>
 8029ebc:	f000 809f 	beq.w	8029ffe <_dtoa_r+0x4ee>
 8029ec0:	f1cb 0600 	rsb	r6, fp, #0
 8029ec4:	4ba1      	ldr	r3, [pc, #644]	; (802a14c <_dtoa_r+0x63c>)
 8029ec6:	4fa2      	ldr	r7, [pc, #648]	; (802a150 <_dtoa_r+0x640>)
 8029ec8:	f006 020f 	and.w	r2, r6, #15
 8029ecc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8029ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8029ed4:	ec51 0b18 	vmov	r0, r1, d8
 8029ed8:	f7d6 fb66 	bl	80005a8 <__aeabi_dmul>
 8029edc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029ee0:	1136      	asrs	r6, r6, #4
 8029ee2:	2300      	movs	r3, #0
 8029ee4:	2502      	movs	r5, #2
 8029ee6:	2e00      	cmp	r6, #0
 8029ee8:	d17e      	bne.n	8029fe8 <_dtoa_r+0x4d8>
 8029eea:	2b00      	cmp	r3, #0
 8029eec:	d1d0      	bne.n	8029e90 <_dtoa_r+0x380>
 8029eee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8029ef0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8029ef4:	2b00      	cmp	r3, #0
 8029ef6:	f000 8084 	beq.w	802a002 <_dtoa_r+0x4f2>
 8029efa:	4b96      	ldr	r3, [pc, #600]	; (802a154 <_dtoa_r+0x644>)
 8029efc:	2200      	movs	r2, #0
 8029efe:	4640      	mov	r0, r8
 8029f00:	4649      	mov	r1, r9
 8029f02:	f7d6 fdc3 	bl	8000a8c <__aeabi_dcmplt>
 8029f06:	2800      	cmp	r0, #0
 8029f08:	d07b      	beq.n	802a002 <_dtoa_r+0x4f2>
 8029f0a:	9b04      	ldr	r3, [sp, #16]
 8029f0c:	2b00      	cmp	r3, #0
 8029f0e:	d078      	beq.n	802a002 <_dtoa_r+0x4f2>
 8029f10:	9b01      	ldr	r3, [sp, #4]
 8029f12:	2b00      	cmp	r3, #0
 8029f14:	dd39      	ble.n	8029f8a <_dtoa_r+0x47a>
 8029f16:	4b90      	ldr	r3, [pc, #576]	; (802a158 <_dtoa_r+0x648>)
 8029f18:	2200      	movs	r2, #0
 8029f1a:	4640      	mov	r0, r8
 8029f1c:	4649      	mov	r1, r9
 8029f1e:	f7d6 fb43 	bl	80005a8 <__aeabi_dmul>
 8029f22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029f26:	9e01      	ldr	r6, [sp, #4]
 8029f28:	f10b 37ff 	add.w	r7, fp, #4294967295
 8029f2c:	3501      	adds	r5, #1
 8029f2e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8029f32:	4628      	mov	r0, r5
 8029f34:	f7d6 face 	bl	80004d4 <__aeabi_i2d>
 8029f38:	4642      	mov	r2, r8
 8029f3a:	464b      	mov	r3, r9
 8029f3c:	f7d6 fb34 	bl	80005a8 <__aeabi_dmul>
 8029f40:	4b86      	ldr	r3, [pc, #536]	; (802a15c <_dtoa_r+0x64c>)
 8029f42:	2200      	movs	r2, #0
 8029f44:	f7d6 f97a 	bl	800023c <__adddf3>
 8029f48:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8029f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8029f50:	9303      	str	r3, [sp, #12]
 8029f52:	2e00      	cmp	r6, #0
 8029f54:	d158      	bne.n	802a008 <_dtoa_r+0x4f8>
 8029f56:	4b82      	ldr	r3, [pc, #520]	; (802a160 <_dtoa_r+0x650>)
 8029f58:	2200      	movs	r2, #0
 8029f5a:	4640      	mov	r0, r8
 8029f5c:	4649      	mov	r1, r9
 8029f5e:	f7d6 f96b 	bl	8000238 <__aeabi_dsub>
 8029f62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029f66:	4680      	mov	r8, r0
 8029f68:	4689      	mov	r9, r1
 8029f6a:	f7d6 fdad 	bl	8000ac8 <__aeabi_dcmpgt>
 8029f6e:	2800      	cmp	r0, #0
 8029f70:	f040 8296 	bne.w	802a4a0 <_dtoa_r+0x990>
 8029f74:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8029f78:	4640      	mov	r0, r8
 8029f7a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8029f7e:	4649      	mov	r1, r9
 8029f80:	f7d6 fd84 	bl	8000a8c <__aeabi_dcmplt>
 8029f84:	2800      	cmp	r0, #0
 8029f86:	f040 8289 	bne.w	802a49c <_dtoa_r+0x98c>
 8029f8a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8029f8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8029f90:	2b00      	cmp	r3, #0
 8029f92:	f2c0 814e 	blt.w	802a232 <_dtoa_r+0x722>
 8029f96:	f1bb 0f0e 	cmp.w	fp, #14
 8029f9a:	f300 814a 	bgt.w	802a232 <_dtoa_r+0x722>
 8029f9e:	4b6b      	ldr	r3, [pc, #428]	; (802a14c <_dtoa_r+0x63c>)
 8029fa0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8029fa4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8029fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8029faa:	2b00      	cmp	r3, #0
 8029fac:	f280 80dc 	bge.w	802a168 <_dtoa_r+0x658>
 8029fb0:	9b04      	ldr	r3, [sp, #16]
 8029fb2:	2b00      	cmp	r3, #0
 8029fb4:	f300 80d8 	bgt.w	802a168 <_dtoa_r+0x658>
 8029fb8:	f040 826f 	bne.w	802a49a <_dtoa_r+0x98a>
 8029fbc:	4b68      	ldr	r3, [pc, #416]	; (802a160 <_dtoa_r+0x650>)
 8029fbe:	2200      	movs	r2, #0
 8029fc0:	4640      	mov	r0, r8
 8029fc2:	4649      	mov	r1, r9
 8029fc4:	f7d6 faf0 	bl	80005a8 <__aeabi_dmul>
 8029fc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8029fcc:	f7d6 fd72 	bl	8000ab4 <__aeabi_dcmpge>
 8029fd0:	9e04      	ldr	r6, [sp, #16]
 8029fd2:	4637      	mov	r7, r6
 8029fd4:	2800      	cmp	r0, #0
 8029fd6:	f040 8245 	bne.w	802a464 <_dtoa_r+0x954>
 8029fda:	9d00      	ldr	r5, [sp, #0]
 8029fdc:	2331      	movs	r3, #49	; 0x31
 8029fde:	f805 3b01 	strb.w	r3, [r5], #1
 8029fe2:	f10b 0b01 	add.w	fp, fp, #1
 8029fe6:	e241      	b.n	802a46c <_dtoa_r+0x95c>
 8029fe8:	07f2      	lsls	r2, r6, #31
 8029fea:	d505      	bpl.n	8029ff8 <_dtoa_r+0x4e8>
 8029fec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8029ff0:	f7d6 fada 	bl	80005a8 <__aeabi_dmul>
 8029ff4:	3501      	adds	r5, #1
 8029ff6:	2301      	movs	r3, #1
 8029ff8:	1076      	asrs	r6, r6, #1
 8029ffa:	3708      	adds	r7, #8
 8029ffc:	e773      	b.n	8029ee6 <_dtoa_r+0x3d6>
 8029ffe:	2502      	movs	r5, #2
 802a000:	e775      	b.n	8029eee <_dtoa_r+0x3de>
 802a002:	9e04      	ldr	r6, [sp, #16]
 802a004:	465f      	mov	r7, fp
 802a006:	e792      	b.n	8029f2e <_dtoa_r+0x41e>
 802a008:	9900      	ldr	r1, [sp, #0]
 802a00a:	4b50      	ldr	r3, [pc, #320]	; (802a14c <_dtoa_r+0x63c>)
 802a00c:	ed9d 7b02 	vldr	d7, [sp, #8]
 802a010:	4431      	add	r1, r6
 802a012:	9102      	str	r1, [sp, #8]
 802a014:	9909      	ldr	r1, [sp, #36]	; 0x24
 802a016:	eeb0 9a47 	vmov.f32	s18, s14
 802a01a:	eef0 9a67 	vmov.f32	s19, s15
 802a01e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 802a022:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802a026:	2900      	cmp	r1, #0
 802a028:	d044      	beq.n	802a0b4 <_dtoa_r+0x5a4>
 802a02a:	494e      	ldr	r1, [pc, #312]	; (802a164 <_dtoa_r+0x654>)
 802a02c:	2000      	movs	r0, #0
 802a02e:	f7d6 fbe5 	bl	80007fc <__aeabi_ddiv>
 802a032:	ec53 2b19 	vmov	r2, r3, d9
 802a036:	f7d6 f8ff 	bl	8000238 <__aeabi_dsub>
 802a03a:	9d00      	ldr	r5, [sp, #0]
 802a03c:	ec41 0b19 	vmov	d9, r0, r1
 802a040:	4649      	mov	r1, r9
 802a042:	4640      	mov	r0, r8
 802a044:	f7d6 fd60 	bl	8000b08 <__aeabi_d2iz>
 802a048:	4606      	mov	r6, r0
 802a04a:	f7d6 fa43 	bl	80004d4 <__aeabi_i2d>
 802a04e:	4602      	mov	r2, r0
 802a050:	460b      	mov	r3, r1
 802a052:	4640      	mov	r0, r8
 802a054:	4649      	mov	r1, r9
 802a056:	f7d6 f8ef 	bl	8000238 <__aeabi_dsub>
 802a05a:	3630      	adds	r6, #48	; 0x30
 802a05c:	f805 6b01 	strb.w	r6, [r5], #1
 802a060:	ec53 2b19 	vmov	r2, r3, d9
 802a064:	4680      	mov	r8, r0
 802a066:	4689      	mov	r9, r1
 802a068:	f7d6 fd10 	bl	8000a8c <__aeabi_dcmplt>
 802a06c:	2800      	cmp	r0, #0
 802a06e:	d164      	bne.n	802a13a <_dtoa_r+0x62a>
 802a070:	4642      	mov	r2, r8
 802a072:	464b      	mov	r3, r9
 802a074:	4937      	ldr	r1, [pc, #220]	; (802a154 <_dtoa_r+0x644>)
 802a076:	2000      	movs	r0, #0
 802a078:	f7d6 f8de 	bl	8000238 <__aeabi_dsub>
 802a07c:	ec53 2b19 	vmov	r2, r3, d9
 802a080:	f7d6 fd04 	bl	8000a8c <__aeabi_dcmplt>
 802a084:	2800      	cmp	r0, #0
 802a086:	f040 80b6 	bne.w	802a1f6 <_dtoa_r+0x6e6>
 802a08a:	9b02      	ldr	r3, [sp, #8]
 802a08c:	429d      	cmp	r5, r3
 802a08e:	f43f af7c 	beq.w	8029f8a <_dtoa_r+0x47a>
 802a092:	4b31      	ldr	r3, [pc, #196]	; (802a158 <_dtoa_r+0x648>)
 802a094:	ec51 0b19 	vmov	r0, r1, d9
 802a098:	2200      	movs	r2, #0
 802a09a:	f7d6 fa85 	bl	80005a8 <__aeabi_dmul>
 802a09e:	4b2e      	ldr	r3, [pc, #184]	; (802a158 <_dtoa_r+0x648>)
 802a0a0:	ec41 0b19 	vmov	d9, r0, r1
 802a0a4:	2200      	movs	r2, #0
 802a0a6:	4640      	mov	r0, r8
 802a0a8:	4649      	mov	r1, r9
 802a0aa:	f7d6 fa7d 	bl	80005a8 <__aeabi_dmul>
 802a0ae:	4680      	mov	r8, r0
 802a0b0:	4689      	mov	r9, r1
 802a0b2:	e7c5      	b.n	802a040 <_dtoa_r+0x530>
 802a0b4:	ec51 0b17 	vmov	r0, r1, d7
 802a0b8:	f7d6 fa76 	bl	80005a8 <__aeabi_dmul>
 802a0bc:	9b02      	ldr	r3, [sp, #8]
 802a0be:	9d00      	ldr	r5, [sp, #0]
 802a0c0:	930f      	str	r3, [sp, #60]	; 0x3c
 802a0c2:	ec41 0b19 	vmov	d9, r0, r1
 802a0c6:	4649      	mov	r1, r9
 802a0c8:	4640      	mov	r0, r8
 802a0ca:	f7d6 fd1d 	bl	8000b08 <__aeabi_d2iz>
 802a0ce:	4606      	mov	r6, r0
 802a0d0:	f7d6 fa00 	bl	80004d4 <__aeabi_i2d>
 802a0d4:	3630      	adds	r6, #48	; 0x30
 802a0d6:	4602      	mov	r2, r0
 802a0d8:	460b      	mov	r3, r1
 802a0da:	4640      	mov	r0, r8
 802a0dc:	4649      	mov	r1, r9
 802a0de:	f7d6 f8ab 	bl	8000238 <__aeabi_dsub>
 802a0e2:	f805 6b01 	strb.w	r6, [r5], #1
 802a0e6:	9b02      	ldr	r3, [sp, #8]
 802a0e8:	429d      	cmp	r5, r3
 802a0ea:	4680      	mov	r8, r0
 802a0ec:	4689      	mov	r9, r1
 802a0ee:	f04f 0200 	mov.w	r2, #0
 802a0f2:	d124      	bne.n	802a13e <_dtoa_r+0x62e>
 802a0f4:	4b1b      	ldr	r3, [pc, #108]	; (802a164 <_dtoa_r+0x654>)
 802a0f6:	ec51 0b19 	vmov	r0, r1, d9
 802a0fa:	f7d6 f89f 	bl	800023c <__adddf3>
 802a0fe:	4602      	mov	r2, r0
 802a100:	460b      	mov	r3, r1
 802a102:	4640      	mov	r0, r8
 802a104:	4649      	mov	r1, r9
 802a106:	f7d6 fcdf 	bl	8000ac8 <__aeabi_dcmpgt>
 802a10a:	2800      	cmp	r0, #0
 802a10c:	d173      	bne.n	802a1f6 <_dtoa_r+0x6e6>
 802a10e:	ec53 2b19 	vmov	r2, r3, d9
 802a112:	4914      	ldr	r1, [pc, #80]	; (802a164 <_dtoa_r+0x654>)
 802a114:	2000      	movs	r0, #0
 802a116:	f7d6 f88f 	bl	8000238 <__aeabi_dsub>
 802a11a:	4602      	mov	r2, r0
 802a11c:	460b      	mov	r3, r1
 802a11e:	4640      	mov	r0, r8
 802a120:	4649      	mov	r1, r9
 802a122:	f7d6 fcb3 	bl	8000a8c <__aeabi_dcmplt>
 802a126:	2800      	cmp	r0, #0
 802a128:	f43f af2f 	beq.w	8029f8a <_dtoa_r+0x47a>
 802a12c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802a12e:	1e6b      	subs	r3, r5, #1
 802a130:	930f      	str	r3, [sp, #60]	; 0x3c
 802a132:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 802a136:	2b30      	cmp	r3, #48	; 0x30
 802a138:	d0f8      	beq.n	802a12c <_dtoa_r+0x61c>
 802a13a:	46bb      	mov	fp, r7
 802a13c:	e04a      	b.n	802a1d4 <_dtoa_r+0x6c4>
 802a13e:	4b06      	ldr	r3, [pc, #24]	; (802a158 <_dtoa_r+0x648>)
 802a140:	f7d6 fa32 	bl	80005a8 <__aeabi_dmul>
 802a144:	4680      	mov	r8, r0
 802a146:	4689      	mov	r9, r1
 802a148:	e7bd      	b.n	802a0c6 <_dtoa_r+0x5b6>
 802a14a:	bf00      	nop
 802a14c:	08033fc0 	.word	0x08033fc0
 802a150:	08033f98 	.word	0x08033f98
 802a154:	3ff00000 	.word	0x3ff00000
 802a158:	40240000 	.word	0x40240000
 802a15c:	401c0000 	.word	0x401c0000
 802a160:	40140000 	.word	0x40140000
 802a164:	3fe00000 	.word	0x3fe00000
 802a168:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802a16c:	9d00      	ldr	r5, [sp, #0]
 802a16e:	4642      	mov	r2, r8
 802a170:	464b      	mov	r3, r9
 802a172:	4630      	mov	r0, r6
 802a174:	4639      	mov	r1, r7
 802a176:	f7d6 fb41 	bl	80007fc <__aeabi_ddiv>
 802a17a:	f7d6 fcc5 	bl	8000b08 <__aeabi_d2iz>
 802a17e:	9001      	str	r0, [sp, #4]
 802a180:	f7d6 f9a8 	bl	80004d4 <__aeabi_i2d>
 802a184:	4642      	mov	r2, r8
 802a186:	464b      	mov	r3, r9
 802a188:	f7d6 fa0e 	bl	80005a8 <__aeabi_dmul>
 802a18c:	4602      	mov	r2, r0
 802a18e:	460b      	mov	r3, r1
 802a190:	4630      	mov	r0, r6
 802a192:	4639      	mov	r1, r7
 802a194:	f7d6 f850 	bl	8000238 <__aeabi_dsub>
 802a198:	9e01      	ldr	r6, [sp, #4]
 802a19a:	9f04      	ldr	r7, [sp, #16]
 802a19c:	3630      	adds	r6, #48	; 0x30
 802a19e:	f805 6b01 	strb.w	r6, [r5], #1
 802a1a2:	9e00      	ldr	r6, [sp, #0]
 802a1a4:	1bae      	subs	r6, r5, r6
 802a1a6:	42b7      	cmp	r7, r6
 802a1a8:	4602      	mov	r2, r0
 802a1aa:	460b      	mov	r3, r1
 802a1ac:	d134      	bne.n	802a218 <_dtoa_r+0x708>
 802a1ae:	f7d6 f845 	bl	800023c <__adddf3>
 802a1b2:	4642      	mov	r2, r8
 802a1b4:	464b      	mov	r3, r9
 802a1b6:	4606      	mov	r6, r0
 802a1b8:	460f      	mov	r7, r1
 802a1ba:	f7d6 fc85 	bl	8000ac8 <__aeabi_dcmpgt>
 802a1be:	b9c8      	cbnz	r0, 802a1f4 <_dtoa_r+0x6e4>
 802a1c0:	4642      	mov	r2, r8
 802a1c2:	464b      	mov	r3, r9
 802a1c4:	4630      	mov	r0, r6
 802a1c6:	4639      	mov	r1, r7
 802a1c8:	f7d6 fc56 	bl	8000a78 <__aeabi_dcmpeq>
 802a1cc:	b110      	cbz	r0, 802a1d4 <_dtoa_r+0x6c4>
 802a1ce:	9b01      	ldr	r3, [sp, #4]
 802a1d0:	07db      	lsls	r3, r3, #31
 802a1d2:	d40f      	bmi.n	802a1f4 <_dtoa_r+0x6e4>
 802a1d4:	4651      	mov	r1, sl
 802a1d6:	4620      	mov	r0, r4
 802a1d8:	f000 fbcc 	bl	802a974 <_Bfree>
 802a1dc:	2300      	movs	r3, #0
 802a1de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 802a1e0:	702b      	strb	r3, [r5, #0]
 802a1e2:	f10b 0301 	add.w	r3, fp, #1
 802a1e6:	6013      	str	r3, [r2, #0]
 802a1e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a1ea:	2b00      	cmp	r3, #0
 802a1ec:	f43f ace2 	beq.w	8029bb4 <_dtoa_r+0xa4>
 802a1f0:	601d      	str	r5, [r3, #0]
 802a1f2:	e4df      	b.n	8029bb4 <_dtoa_r+0xa4>
 802a1f4:	465f      	mov	r7, fp
 802a1f6:	462b      	mov	r3, r5
 802a1f8:	461d      	mov	r5, r3
 802a1fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a1fe:	2a39      	cmp	r2, #57	; 0x39
 802a200:	d106      	bne.n	802a210 <_dtoa_r+0x700>
 802a202:	9a00      	ldr	r2, [sp, #0]
 802a204:	429a      	cmp	r2, r3
 802a206:	d1f7      	bne.n	802a1f8 <_dtoa_r+0x6e8>
 802a208:	9900      	ldr	r1, [sp, #0]
 802a20a:	2230      	movs	r2, #48	; 0x30
 802a20c:	3701      	adds	r7, #1
 802a20e:	700a      	strb	r2, [r1, #0]
 802a210:	781a      	ldrb	r2, [r3, #0]
 802a212:	3201      	adds	r2, #1
 802a214:	701a      	strb	r2, [r3, #0]
 802a216:	e790      	b.n	802a13a <_dtoa_r+0x62a>
 802a218:	4ba3      	ldr	r3, [pc, #652]	; (802a4a8 <_dtoa_r+0x998>)
 802a21a:	2200      	movs	r2, #0
 802a21c:	f7d6 f9c4 	bl	80005a8 <__aeabi_dmul>
 802a220:	2200      	movs	r2, #0
 802a222:	2300      	movs	r3, #0
 802a224:	4606      	mov	r6, r0
 802a226:	460f      	mov	r7, r1
 802a228:	f7d6 fc26 	bl	8000a78 <__aeabi_dcmpeq>
 802a22c:	2800      	cmp	r0, #0
 802a22e:	d09e      	beq.n	802a16e <_dtoa_r+0x65e>
 802a230:	e7d0      	b.n	802a1d4 <_dtoa_r+0x6c4>
 802a232:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a234:	2a00      	cmp	r2, #0
 802a236:	f000 80ca 	beq.w	802a3ce <_dtoa_r+0x8be>
 802a23a:	9a07      	ldr	r2, [sp, #28]
 802a23c:	2a01      	cmp	r2, #1
 802a23e:	f300 80ad 	bgt.w	802a39c <_dtoa_r+0x88c>
 802a242:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802a244:	2a00      	cmp	r2, #0
 802a246:	f000 80a5 	beq.w	802a394 <_dtoa_r+0x884>
 802a24a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 802a24e:	9e08      	ldr	r6, [sp, #32]
 802a250:	9d05      	ldr	r5, [sp, #20]
 802a252:	9a05      	ldr	r2, [sp, #20]
 802a254:	441a      	add	r2, r3
 802a256:	9205      	str	r2, [sp, #20]
 802a258:	9a06      	ldr	r2, [sp, #24]
 802a25a:	2101      	movs	r1, #1
 802a25c:	441a      	add	r2, r3
 802a25e:	4620      	mov	r0, r4
 802a260:	9206      	str	r2, [sp, #24]
 802a262:	f000 fc3d 	bl	802aae0 <__i2b>
 802a266:	4607      	mov	r7, r0
 802a268:	b165      	cbz	r5, 802a284 <_dtoa_r+0x774>
 802a26a:	9b06      	ldr	r3, [sp, #24]
 802a26c:	2b00      	cmp	r3, #0
 802a26e:	dd09      	ble.n	802a284 <_dtoa_r+0x774>
 802a270:	42ab      	cmp	r3, r5
 802a272:	9a05      	ldr	r2, [sp, #20]
 802a274:	bfa8      	it	ge
 802a276:	462b      	movge	r3, r5
 802a278:	1ad2      	subs	r2, r2, r3
 802a27a:	9205      	str	r2, [sp, #20]
 802a27c:	9a06      	ldr	r2, [sp, #24]
 802a27e:	1aed      	subs	r5, r5, r3
 802a280:	1ad3      	subs	r3, r2, r3
 802a282:	9306      	str	r3, [sp, #24]
 802a284:	9b08      	ldr	r3, [sp, #32]
 802a286:	b1f3      	cbz	r3, 802a2c6 <_dtoa_r+0x7b6>
 802a288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a28a:	2b00      	cmp	r3, #0
 802a28c:	f000 80a3 	beq.w	802a3d6 <_dtoa_r+0x8c6>
 802a290:	2e00      	cmp	r6, #0
 802a292:	dd10      	ble.n	802a2b6 <_dtoa_r+0x7a6>
 802a294:	4639      	mov	r1, r7
 802a296:	4632      	mov	r2, r6
 802a298:	4620      	mov	r0, r4
 802a29a:	f000 fce1 	bl	802ac60 <__pow5mult>
 802a29e:	4652      	mov	r2, sl
 802a2a0:	4601      	mov	r1, r0
 802a2a2:	4607      	mov	r7, r0
 802a2a4:	4620      	mov	r0, r4
 802a2a6:	f000 fc31 	bl	802ab0c <__multiply>
 802a2aa:	4651      	mov	r1, sl
 802a2ac:	4680      	mov	r8, r0
 802a2ae:	4620      	mov	r0, r4
 802a2b0:	f000 fb60 	bl	802a974 <_Bfree>
 802a2b4:	46c2      	mov	sl, r8
 802a2b6:	9b08      	ldr	r3, [sp, #32]
 802a2b8:	1b9a      	subs	r2, r3, r6
 802a2ba:	d004      	beq.n	802a2c6 <_dtoa_r+0x7b6>
 802a2bc:	4651      	mov	r1, sl
 802a2be:	4620      	mov	r0, r4
 802a2c0:	f000 fcce 	bl	802ac60 <__pow5mult>
 802a2c4:	4682      	mov	sl, r0
 802a2c6:	2101      	movs	r1, #1
 802a2c8:	4620      	mov	r0, r4
 802a2ca:	f000 fc09 	bl	802aae0 <__i2b>
 802a2ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a2d0:	2b00      	cmp	r3, #0
 802a2d2:	4606      	mov	r6, r0
 802a2d4:	f340 8081 	ble.w	802a3da <_dtoa_r+0x8ca>
 802a2d8:	461a      	mov	r2, r3
 802a2da:	4601      	mov	r1, r0
 802a2dc:	4620      	mov	r0, r4
 802a2de:	f000 fcbf 	bl	802ac60 <__pow5mult>
 802a2e2:	9b07      	ldr	r3, [sp, #28]
 802a2e4:	2b01      	cmp	r3, #1
 802a2e6:	4606      	mov	r6, r0
 802a2e8:	dd7a      	ble.n	802a3e0 <_dtoa_r+0x8d0>
 802a2ea:	f04f 0800 	mov.w	r8, #0
 802a2ee:	6933      	ldr	r3, [r6, #16]
 802a2f0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 802a2f4:	6918      	ldr	r0, [r3, #16]
 802a2f6:	f000 fba5 	bl	802aa44 <__hi0bits>
 802a2fa:	f1c0 0020 	rsb	r0, r0, #32
 802a2fe:	9b06      	ldr	r3, [sp, #24]
 802a300:	4418      	add	r0, r3
 802a302:	f010 001f 	ands.w	r0, r0, #31
 802a306:	f000 8094 	beq.w	802a432 <_dtoa_r+0x922>
 802a30a:	f1c0 0320 	rsb	r3, r0, #32
 802a30e:	2b04      	cmp	r3, #4
 802a310:	f340 8085 	ble.w	802a41e <_dtoa_r+0x90e>
 802a314:	9b05      	ldr	r3, [sp, #20]
 802a316:	f1c0 001c 	rsb	r0, r0, #28
 802a31a:	4403      	add	r3, r0
 802a31c:	9305      	str	r3, [sp, #20]
 802a31e:	9b06      	ldr	r3, [sp, #24]
 802a320:	4403      	add	r3, r0
 802a322:	4405      	add	r5, r0
 802a324:	9306      	str	r3, [sp, #24]
 802a326:	9b05      	ldr	r3, [sp, #20]
 802a328:	2b00      	cmp	r3, #0
 802a32a:	dd05      	ble.n	802a338 <_dtoa_r+0x828>
 802a32c:	4651      	mov	r1, sl
 802a32e:	461a      	mov	r2, r3
 802a330:	4620      	mov	r0, r4
 802a332:	f000 fcef 	bl	802ad14 <__lshift>
 802a336:	4682      	mov	sl, r0
 802a338:	9b06      	ldr	r3, [sp, #24]
 802a33a:	2b00      	cmp	r3, #0
 802a33c:	dd05      	ble.n	802a34a <_dtoa_r+0x83a>
 802a33e:	4631      	mov	r1, r6
 802a340:	461a      	mov	r2, r3
 802a342:	4620      	mov	r0, r4
 802a344:	f000 fce6 	bl	802ad14 <__lshift>
 802a348:	4606      	mov	r6, r0
 802a34a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802a34c:	2b00      	cmp	r3, #0
 802a34e:	d072      	beq.n	802a436 <_dtoa_r+0x926>
 802a350:	4631      	mov	r1, r6
 802a352:	4650      	mov	r0, sl
 802a354:	f000 fd4a 	bl	802adec <__mcmp>
 802a358:	2800      	cmp	r0, #0
 802a35a:	da6c      	bge.n	802a436 <_dtoa_r+0x926>
 802a35c:	2300      	movs	r3, #0
 802a35e:	4651      	mov	r1, sl
 802a360:	220a      	movs	r2, #10
 802a362:	4620      	mov	r0, r4
 802a364:	f000 fb28 	bl	802a9b8 <__multadd>
 802a368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a36a:	f10b 3bff 	add.w	fp, fp, #4294967295
 802a36e:	4682      	mov	sl, r0
 802a370:	2b00      	cmp	r3, #0
 802a372:	f000 81b0 	beq.w	802a6d6 <_dtoa_r+0xbc6>
 802a376:	2300      	movs	r3, #0
 802a378:	4639      	mov	r1, r7
 802a37a:	220a      	movs	r2, #10
 802a37c:	4620      	mov	r0, r4
 802a37e:	f000 fb1b 	bl	802a9b8 <__multadd>
 802a382:	9b01      	ldr	r3, [sp, #4]
 802a384:	2b00      	cmp	r3, #0
 802a386:	4607      	mov	r7, r0
 802a388:	f300 8096 	bgt.w	802a4b8 <_dtoa_r+0x9a8>
 802a38c:	9b07      	ldr	r3, [sp, #28]
 802a38e:	2b02      	cmp	r3, #2
 802a390:	dc59      	bgt.n	802a446 <_dtoa_r+0x936>
 802a392:	e091      	b.n	802a4b8 <_dtoa_r+0x9a8>
 802a394:	9b10      	ldr	r3, [sp, #64]	; 0x40
 802a396:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 802a39a:	e758      	b.n	802a24e <_dtoa_r+0x73e>
 802a39c:	9b04      	ldr	r3, [sp, #16]
 802a39e:	1e5e      	subs	r6, r3, #1
 802a3a0:	9b08      	ldr	r3, [sp, #32]
 802a3a2:	42b3      	cmp	r3, r6
 802a3a4:	bfbf      	itttt	lt
 802a3a6:	9b08      	ldrlt	r3, [sp, #32]
 802a3a8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 802a3aa:	9608      	strlt	r6, [sp, #32]
 802a3ac:	1af3      	sublt	r3, r6, r3
 802a3ae:	bfb4      	ite	lt
 802a3b0:	18d2      	addlt	r2, r2, r3
 802a3b2:	1b9e      	subge	r6, r3, r6
 802a3b4:	9b04      	ldr	r3, [sp, #16]
 802a3b6:	bfbc      	itt	lt
 802a3b8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 802a3ba:	2600      	movlt	r6, #0
 802a3bc:	2b00      	cmp	r3, #0
 802a3be:	bfb7      	itett	lt
 802a3c0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 802a3c4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 802a3c8:	1a9d      	sublt	r5, r3, r2
 802a3ca:	2300      	movlt	r3, #0
 802a3cc:	e741      	b.n	802a252 <_dtoa_r+0x742>
 802a3ce:	9e08      	ldr	r6, [sp, #32]
 802a3d0:	9d05      	ldr	r5, [sp, #20]
 802a3d2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 802a3d4:	e748      	b.n	802a268 <_dtoa_r+0x758>
 802a3d6:	9a08      	ldr	r2, [sp, #32]
 802a3d8:	e770      	b.n	802a2bc <_dtoa_r+0x7ac>
 802a3da:	9b07      	ldr	r3, [sp, #28]
 802a3dc:	2b01      	cmp	r3, #1
 802a3de:	dc19      	bgt.n	802a414 <_dtoa_r+0x904>
 802a3e0:	9b02      	ldr	r3, [sp, #8]
 802a3e2:	b9bb      	cbnz	r3, 802a414 <_dtoa_r+0x904>
 802a3e4:	9b03      	ldr	r3, [sp, #12]
 802a3e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802a3ea:	b99b      	cbnz	r3, 802a414 <_dtoa_r+0x904>
 802a3ec:	9b03      	ldr	r3, [sp, #12]
 802a3ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 802a3f2:	0d1b      	lsrs	r3, r3, #20
 802a3f4:	051b      	lsls	r3, r3, #20
 802a3f6:	b183      	cbz	r3, 802a41a <_dtoa_r+0x90a>
 802a3f8:	9b05      	ldr	r3, [sp, #20]
 802a3fa:	3301      	adds	r3, #1
 802a3fc:	9305      	str	r3, [sp, #20]
 802a3fe:	9b06      	ldr	r3, [sp, #24]
 802a400:	3301      	adds	r3, #1
 802a402:	9306      	str	r3, [sp, #24]
 802a404:	f04f 0801 	mov.w	r8, #1
 802a408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802a40a:	2b00      	cmp	r3, #0
 802a40c:	f47f af6f 	bne.w	802a2ee <_dtoa_r+0x7de>
 802a410:	2001      	movs	r0, #1
 802a412:	e774      	b.n	802a2fe <_dtoa_r+0x7ee>
 802a414:	f04f 0800 	mov.w	r8, #0
 802a418:	e7f6      	b.n	802a408 <_dtoa_r+0x8f8>
 802a41a:	4698      	mov	r8, r3
 802a41c:	e7f4      	b.n	802a408 <_dtoa_r+0x8f8>
 802a41e:	d082      	beq.n	802a326 <_dtoa_r+0x816>
 802a420:	9a05      	ldr	r2, [sp, #20]
 802a422:	331c      	adds	r3, #28
 802a424:	441a      	add	r2, r3
 802a426:	9205      	str	r2, [sp, #20]
 802a428:	9a06      	ldr	r2, [sp, #24]
 802a42a:	441a      	add	r2, r3
 802a42c:	441d      	add	r5, r3
 802a42e:	9206      	str	r2, [sp, #24]
 802a430:	e779      	b.n	802a326 <_dtoa_r+0x816>
 802a432:	4603      	mov	r3, r0
 802a434:	e7f4      	b.n	802a420 <_dtoa_r+0x910>
 802a436:	9b04      	ldr	r3, [sp, #16]
 802a438:	2b00      	cmp	r3, #0
 802a43a:	dc37      	bgt.n	802a4ac <_dtoa_r+0x99c>
 802a43c:	9b07      	ldr	r3, [sp, #28]
 802a43e:	2b02      	cmp	r3, #2
 802a440:	dd34      	ble.n	802a4ac <_dtoa_r+0x99c>
 802a442:	9b04      	ldr	r3, [sp, #16]
 802a444:	9301      	str	r3, [sp, #4]
 802a446:	9b01      	ldr	r3, [sp, #4]
 802a448:	b963      	cbnz	r3, 802a464 <_dtoa_r+0x954>
 802a44a:	4631      	mov	r1, r6
 802a44c:	2205      	movs	r2, #5
 802a44e:	4620      	mov	r0, r4
 802a450:	f000 fab2 	bl	802a9b8 <__multadd>
 802a454:	4601      	mov	r1, r0
 802a456:	4606      	mov	r6, r0
 802a458:	4650      	mov	r0, sl
 802a45a:	f000 fcc7 	bl	802adec <__mcmp>
 802a45e:	2800      	cmp	r0, #0
 802a460:	f73f adbb 	bgt.w	8029fda <_dtoa_r+0x4ca>
 802a464:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802a466:	9d00      	ldr	r5, [sp, #0]
 802a468:	ea6f 0b03 	mvn.w	fp, r3
 802a46c:	f04f 0800 	mov.w	r8, #0
 802a470:	4631      	mov	r1, r6
 802a472:	4620      	mov	r0, r4
 802a474:	f000 fa7e 	bl	802a974 <_Bfree>
 802a478:	2f00      	cmp	r7, #0
 802a47a:	f43f aeab 	beq.w	802a1d4 <_dtoa_r+0x6c4>
 802a47e:	f1b8 0f00 	cmp.w	r8, #0
 802a482:	d005      	beq.n	802a490 <_dtoa_r+0x980>
 802a484:	45b8      	cmp	r8, r7
 802a486:	d003      	beq.n	802a490 <_dtoa_r+0x980>
 802a488:	4641      	mov	r1, r8
 802a48a:	4620      	mov	r0, r4
 802a48c:	f000 fa72 	bl	802a974 <_Bfree>
 802a490:	4639      	mov	r1, r7
 802a492:	4620      	mov	r0, r4
 802a494:	f000 fa6e 	bl	802a974 <_Bfree>
 802a498:	e69c      	b.n	802a1d4 <_dtoa_r+0x6c4>
 802a49a:	2600      	movs	r6, #0
 802a49c:	4637      	mov	r7, r6
 802a49e:	e7e1      	b.n	802a464 <_dtoa_r+0x954>
 802a4a0:	46bb      	mov	fp, r7
 802a4a2:	4637      	mov	r7, r6
 802a4a4:	e599      	b.n	8029fda <_dtoa_r+0x4ca>
 802a4a6:	bf00      	nop
 802a4a8:	40240000 	.word	0x40240000
 802a4ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802a4ae:	2b00      	cmp	r3, #0
 802a4b0:	f000 80c8 	beq.w	802a644 <_dtoa_r+0xb34>
 802a4b4:	9b04      	ldr	r3, [sp, #16]
 802a4b6:	9301      	str	r3, [sp, #4]
 802a4b8:	2d00      	cmp	r5, #0
 802a4ba:	dd05      	ble.n	802a4c8 <_dtoa_r+0x9b8>
 802a4bc:	4639      	mov	r1, r7
 802a4be:	462a      	mov	r2, r5
 802a4c0:	4620      	mov	r0, r4
 802a4c2:	f000 fc27 	bl	802ad14 <__lshift>
 802a4c6:	4607      	mov	r7, r0
 802a4c8:	f1b8 0f00 	cmp.w	r8, #0
 802a4cc:	d05b      	beq.n	802a586 <_dtoa_r+0xa76>
 802a4ce:	6879      	ldr	r1, [r7, #4]
 802a4d0:	4620      	mov	r0, r4
 802a4d2:	f000 fa0f 	bl	802a8f4 <_Balloc>
 802a4d6:	4605      	mov	r5, r0
 802a4d8:	b928      	cbnz	r0, 802a4e6 <_dtoa_r+0x9d6>
 802a4da:	4b83      	ldr	r3, [pc, #524]	; (802a6e8 <_dtoa_r+0xbd8>)
 802a4dc:	4602      	mov	r2, r0
 802a4de:	f240 21ef 	movw	r1, #751	; 0x2ef
 802a4e2:	f7ff bb2e 	b.w	8029b42 <_dtoa_r+0x32>
 802a4e6:	693a      	ldr	r2, [r7, #16]
 802a4e8:	3202      	adds	r2, #2
 802a4ea:	0092      	lsls	r2, r2, #2
 802a4ec:	f107 010c 	add.w	r1, r7, #12
 802a4f0:	300c      	adds	r0, #12
 802a4f2:	f7ff fa70 	bl	80299d6 <memcpy>
 802a4f6:	2201      	movs	r2, #1
 802a4f8:	4629      	mov	r1, r5
 802a4fa:	4620      	mov	r0, r4
 802a4fc:	f000 fc0a 	bl	802ad14 <__lshift>
 802a500:	9b00      	ldr	r3, [sp, #0]
 802a502:	3301      	adds	r3, #1
 802a504:	9304      	str	r3, [sp, #16]
 802a506:	e9dd 2300 	ldrd	r2, r3, [sp]
 802a50a:	4413      	add	r3, r2
 802a50c:	9308      	str	r3, [sp, #32]
 802a50e:	9b02      	ldr	r3, [sp, #8]
 802a510:	f003 0301 	and.w	r3, r3, #1
 802a514:	46b8      	mov	r8, r7
 802a516:	9306      	str	r3, [sp, #24]
 802a518:	4607      	mov	r7, r0
 802a51a:	9b04      	ldr	r3, [sp, #16]
 802a51c:	4631      	mov	r1, r6
 802a51e:	3b01      	subs	r3, #1
 802a520:	4650      	mov	r0, sl
 802a522:	9301      	str	r3, [sp, #4]
 802a524:	f7ff fa6c 	bl	8029a00 <quorem>
 802a528:	4641      	mov	r1, r8
 802a52a:	9002      	str	r0, [sp, #8]
 802a52c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802a530:	4650      	mov	r0, sl
 802a532:	f000 fc5b 	bl	802adec <__mcmp>
 802a536:	463a      	mov	r2, r7
 802a538:	9005      	str	r0, [sp, #20]
 802a53a:	4631      	mov	r1, r6
 802a53c:	4620      	mov	r0, r4
 802a53e:	f000 fc71 	bl	802ae24 <__mdiff>
 802a542:	68c2      	ldr	r2, [r0, #12]
 802a544:	4605      	mov	r5, r0
 802a546:	bb02      	cbnz	r2, 802a58a <_dtoa_r+0xa7a>
 802a548:	4601      	mov	r1, r0
 802a54a:	4650      	mov	r0, sl
 802a54c:	f000 fc4e 	bl	802adec <__mcmp>
 802a550:	4602      	mov	r2, r0
 802a552:	4629      	mov	r1, r5
 802a554:	4620      	mov	r0, r4
 802a556:	9209      	str	r2, [sp, #36]	; 0x24
 802a558:	f000 fa0c 	bl	802a974 <_Bfree>
 802a55c:	9b07      	ldr	r3, [sp, #28]
 802a55e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802a560:	9d04      	ldr	r5, [sp, #16]
 802a562:	ea43 0102 	orr.w	r1, r3, r2
 802a566:	9b06      	ldr	r3, [sp, #24]
 802a568:	4319      	orrs	r1, r3
 802a56a:	d110      	bne.n	802a58e <_dtoa_r+0xa7e>
 802a56c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802a570:	d029      	beq.n	802a5c6 <_dtoa_r+0xab6>
 802a572:	9b05      	ldr	r3, [sp, #20]
 802a574:	2b00      	cmp	r3, #0
 802a576:	dd02      	ble.n	802a57e <_dtoa_r+0xa6e>
 802a578:	9b02      	ldr	r3, [sp, #8]
 802a57a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 802a57e:	9b01      	ldr	r3, [sp, #4]
 802a580:	f883 9000 	strb.w	r9, [r3]
 802a584:	e774      	b.n	802a470 <_dtoa_r+0x960>
 802a586:	4638      	mov	r0, r7
 802a588:	e7ba      	b.n	802a500 <_dtoa_r+0x9f0>
 802a58a:	2201      	movs	r2, #1
 802a58c:	e7e1      	b.n	802a552 <_dtoa_r+0xa42>
 802a58e:	9b05      	ldr	r3, [sp, #20]
 802a590:	2b00      	cmp	r3, #0
 802a592:	db04      	blt.n	802a59e <_dtoa_r+0xa8e>
 802a594:	9907      	ldr	r1, [sp, #28]
 802a596:	430b      	orrs	r3, r1
 802a598:	9906      	ldr	r1, [sp, #24]
 802a59a:	430b      	orrs	r3, r1
 802a59c:	d120      	bne.n	802a5e0 <_dtoa_r+0xad0>
 802a59e:	2a00      	cmp	r2, #0
 802a5a0:	dded      	ble.n	802a57e <_dtoa_r+0xa6e>
 802a5a2:	4651      	mov	r1, sl
 802a5a4:	2201      	movs	r2, #1
 802a5a6:	4620      	mov	r0, r4
 802a5a8:	f000 fbb4 	bl	802ad14 <__lshift>
 802a5ac:	4631      	mov	r1, r6
 802a5ae:	4682      	mov	sl, r0
 802a5b0:	f000 fc1c 	bl	802adec <__mcmp>
 802a5b4:	2800      	cmp	r0, #0
 802a5b6:	dc03      	bgt.n	802a5c0 <_dtoa_r+0xab0>
 802a5b8:	d1e1      	bne.n	802a57e <_dtoa_r+0xa6e>
 802a5ba:	f019 0f01 	tst.w	r9, #1
 802a5be:	d0de      	beq.n	802a57e <_dtoa_r+0xa6e>
 802a5c0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802a5c4:	d1d8      	bne.n	802a578 <_dtoa_r+0xa68>
 802a5c6:	9a01      	ldr	r2, [sp, #4]
 802a5c8:	2339      	movs	r3, #57	; 0x39
 802a5ca:	7013      	strb	r3, [r2, #0]
 802a5cc:	462b      	mov	r3, r5
 802a5ce:	461d      	mov	r5, r3
 802a5d0:	3b01      	subs	r3, #1
 802a5d2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 802a5d6:	2a39      	cmp	r2, #57	; 0x39
 802a5d8:	d06c      	beq.n	802a6b4 <_dtoa_r+0xba4>
 802a5da:	3201      	adds	r2, #1
 802a5dc:	701a      	strb	r2, [r3, #0]
 802a5de:	e747      	b.n	802a470 <_dtoa_r+0x960>
 802a5e0:	2a00      	cmp	r2, #0
 802a5e2:	dd07      	ble.n	802a5f4 <_dtoa_r+0xae4>
 802a5e4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 802a5e8:	d0ed      	beq.n	802a5c6 <_dtoa_r+0xab6>
 802a5ea:	9a01      	ldr	r2, [sp, #4]
 802a5ec:	f109 0301 	add.w	r3, r9, #1
 802a5f0:	7013      	strb	r3, [r2, #0]
 802a5f2:	e73d      	b.n	802a470 <_dtoa_r+0x960>
 802a5f4:	9b04      	ldr	r3, [sp, #16]
 802a5f6:	9a08      	ldr	r2, [sp, #32]
 802a5f8:	f803 9c01 	strb.w	r9, [r3, #-1]
 802a5fc:	4293      	cmp	r3, r2
 802a5fe:	d043      	beq.n	802a688 <_dtoa_r+0xb78>
 802a600:	4651      	mov	r1, sl
 802a602:	2300      	movs	r3, #0
 802a604:	220a      	movs	r2, #10
 802a606:	4620      	mov	r0, r4
 802a608:	f000 f9d6 	bl	802a9b8 <__multadd>
 802a60c:	45b8      	cmp	r8, r7
 802a60e:	4682      	mov	sl, r0
 802a610:	f04f 0300 	mov.w	r3, #0
 802a614:	f04f 020a 	mov.w	r2, #10
 802a618:	4641      	mov	r1, r8
 802a61a:	4620      	mov	r0, r4
 802a61c:	d107      	bne.n	802a62e <_dtoa_r+0xb1e>
 802a61e:	f000 f9cb 	bl	802a9b8 <__multadd>
 802a622:	4680      	mov	r8, r0
 802a624:	4607      	mov	r7, r0
 802a626:	9b04      	ldr	r3, [sp, #16]
 802a628:	3301      	adds	r3, #1
 802a62a:	9304      	str	r3, [sp, #16]
 802a62c:	e775      	b.n	802a51a <_dtoa_r+0xa0a>
 802a62e:	f000 f9c3 	bl	802a9b8 <__multadd>
 802a632:	4639      	mov	r1, r7
 802a634:	4680      	mov	r8, r0
 802a636:	2300      	movs	r3, #0
 802a638:	220a      	movs	r2, #10
 802a63a:	4620      	mov	r0, r4
 802a63c:	f000 f9bc 	bl	802a9b8 <__multadd>
 802a640:	4607      	mov	r7, r0
 802a642:	e7f0      	b.n	802a626 <_dtoa_r+0xb16>
 802a644:	9b04      	ldr	r3, [sp, #16]
 802a646:	9301      	str	r3, [sp, #4]
 802a648:	9d00      	ldr	r5, [sp, #0]
 802a64a:	4631      	mov	r1, r6
 802a64c:	4650      	mov	r0, sl
 802a64e:	f7ff f9d7 	bl	8029a00 <quorem>
 802a652:	f100 0930 	add.w	r9, r0, #48	; 0x30
 802a656:	9b00      	ldr	r3, [sp, #0]
 802a658:	f805 9b01 	strb.w	r9, [r5], #1
 802a65c:	1aea      	subs	r2, r5, r3
 802a65e:	9b01      	ldr	r3, [sp, #4]
 802a660:	4293      	cmp	r3, r2
 802a662:	dd07      	ble.n	802a674 <_dtoa_r+0xb64>
 802a664:	4651      	mov	r1, sl
 802a666:	2300      	movs	r3, #0
 802a668:	220a      	movs	r2, #10
 802a66a:	4620      	mov	r0, r4
 802a66c:	f000 f9a4 	bl	802a9b8 <__multadd>
 802a670:	4682      	mov	sl, r0
 802a672:	e7ea      	b.n	802a64a <_dtoa_r+0xb3a>
 802a674:	9b01      	ldr	r3, [sp, #4]
 802a676:	2b00      	cmp	r3, #0
 802a678:	bfc8      	it	gt
 802a67a:	461d      	movgt	r5, r3
 802a67c:	9b00      	ldr	r3, [sp, #0]
 802a67e:	bfd8      	it	le
 802a680:	2501      	movle	r5, #1
 802a682:	441d      	add	r5, r3
 802a684:	f04f 0800 	mov.w	r8, #0
 802a688:	4651      	mov	r1, sl
 802a68a:	2201      	movs	r2, #1
 802a68c:	4620      	mov	r0, r4
 802a68e:	f000 fb41 	bl	802ad14 <__lshift>
 802a692:	4631      	mov	r1, r6
 802a694:	4682      	mov	sl, r0
 802a696:	f000 fba9 	bl	802adec <__mcmp>
 802a69a:	2800      	cmp	r0, #0
 802a69c:	dc96      	bgt.n	802a5cc <_dtoa_r+0xabc>
 802a69e:	d102      	bne.n	802a6a6 <_dtoa_r+0xb96>
 802a6a0:	f019 0f01 	tst.w	r9, #1
 802a6a4:	d192      	bne.n	802a5cc <_dtoa_r+0xabc>
 802a6a6:	462b      	mov	r3, r5
 802a6a8:	461d      	mov	r5, r3
 802a6aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 802a6ae:	2a30      	cmp	r2, #48	; 0x30
 802a6b0:	d0fa      	beq.n	802a6a8 <_dtoa_r+0xb98>
 802a6b2:	e6dd      	b.n	802a470 <_dtoa_r+0x960>
 802a6b4:	9a00      	ldr	r2, [sp, #0]
 802a6b6:	429a      	cmp	r2, r3
 802a6b8:	d189      	bne.n	802a5ce <_dtoa_r+0xabe>
 802a6ba:	f10b 0b01 	add.w	fp, fp, #1
 802a6be:	2331      	movs	r3, #49	; 0x31
 802a6c0:	e796      	b.n	802a5f0 <_dtoa_r+0xae0>
 802a6c2:	4b0a      	ldr	r3, [pc, #40]	; (802a6ec <_dtoa_r+0xbdc>)
 802a6c4:	f7ff ba99 	b.w	8029bfa <_dtoa_r+0xea>
 802a6c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802a6ca:	2b00      	cmp	r3, #0
 802a6cc:	f47f aa6d 	bne.w	8029baa <_dtoa_r+0x9a>
 802a6d0:	4b07      	ldr	r3, [pc, #28]	; (802a6f0 <_dtoa_r+0xbe0>)
 802a6d2:	f7ff ba92 	b.w	8029bfa <_dtoa_r+0xea>
 802a6d6:	9b01      	ldr	r3, [sp, #4]
 802a6d8:	2b00      	cmp	r3, #0
 802a6da:	dcb5      	bgt.n	802a648 <_dtoa_r+0xb38>
 802a6dc:	9b07      	ldr	r3, [sp, #28]
 802a6de:	2b02      	cmp	r3, #2
 802a6e0:	f73f aeb1 	bgt.w	802a446 <_dtoa_r+0x936>
 802a6e4:	e7b0      	b.n	802a648 <_dtoa_r+0xb38>
 802a6e6:	bf00      	nop
 802a6e8:	08033f2c 	.word	0x08033f2c
 802a6ec:	08033d6b 	.word	0x08033d6b
 802a6f0:	08033eb0 	.word	0x08033eb0

0802a6f4 <_free_r>:
 802a6f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802a6f6:	2900      	cmp	r1, #0
 802a6f8:	d044      	beq.n	802a784 <_free_r+0x90>
 802a6fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802a6fe:	9001      	str	r0, [sp, #4]
 802a700:	2b00      	cmp	r3, #0
 802a702:	f1a1 0404 	sub.w	r4, r1, #4
 802a706:	bfb8      	it	lt
 802a708:	18e4      	addlt	r4, r4, r3
 802a70a:	f000 f8e7 	bl	802a8dc <__malloc_lock>
 802a70e:	4a1e      	ldr	r2, [pc, #120]	; (802a788 <_free_r+0x94>)
 802a710:	9801      	ldr	r0, [sp, #4]
 802a712:	6813      	ldr	r3, [r2, #0]
 802a714:	b933      	cbnz	r3, 802a724 <_free_r+0x30>
 802a716:	6063      	str	r3, [r4, #4]
 802a718:	6014      	str	r4, [r2, #0]
 802a71a:	b003      	add	sp, #12
 802a71c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802a720:	f000 b8e2 	b.w	802a8e8 <__malloc_unlock>
 802a724:	42a3      	cmp	r3, r4
 802a726:	d908      	bls.n	802a73a <_free_r+0x46>
 802a728:	6825      	ldr	r5, [r4, #0]
 802a72a:	1961      	adds	r1, r4, r5
 802a72c:	428b      	cmp	r3, r1
 802a72e:	bf01      	itttt	eq
 802a730:	6819      	ldreq	r1, [r3, #0]
 802a732:	685b      	ldreq	r3, [r3, #4]
 802a734:	1949      	addeq	r1, r1, r5
 802a736:	6021      	streq	r1, [r4, #0]
 802a738:	e7ed      	b.n	802a716 <_free_r+0x22>
 802a73a:	461a      	mov	r2, r3
 802a73c:	685b      	ldr	r3, [r3, #4]
 802a73e:	b10b      	cbz	r3, 802a744 <_free_r+0x50>
 802a740:	42a3      	cmp	r3, r4
 802a742:	d9fa      	bls.n	802a73a <_free_r+0x46>
 802a744:	6811      	ldr	r1, [r2, #0]
 802a746:	1855      	adds	r5, r2, r1
 802a748:	42a5      	cmp	r5, r4
 802a74a:	d10b      	bne.n	802a764 <_free_r+0x70>
 802a74c:	6824      	ldr	r4, [r4, #0]
 802a74e:	4421      	add	r1, r4
 802a750:	1854      	adds	r4, r2, r1
 802a752:	42a3      	cmp	r3, r4
 802a754:	6011      	str	r1, [r2, #0]
 802a756:	d1e0      	bne.n	802a71a <_free_r+0x26>
 802a758:	681c      	ldr	r4, [r3, #0]
 802a75a:	685b      	ldr	r3, [r3, #4]
 802a75c:	6053      	str	r3, [r2, #4]
 802a75e:	440c      	add	r4, r1
 802a760:	6014      	str	r4, [r2, #0]
 802a762:	e7da      	b.n	802a71a <_free_r+0x26>
 802a764:	d902      	bls.n	802a76c <_free_r+0x78>
 802a766:	230c      	movs	r3, #12
 802a768:	6003      	str	r3, [r0, #0]
 802a76a:	e7d6      	b.n	802a71a <_free_r+0x26>
 802a76c:	6825      	ldr	r5, [r4, #0]
 802a76e:	1961      	adds	r1, r4, r5
 802a770:	428b      	cmp	r3, r1
 802a772:	bf04      	itt	eq
 802a774:	6819      	ldreq	r1, [r3, #0]
 802a776:	685b      	ldreq	r3, [r3, #4]
 802a778:	6063      	str	r3, [r4, #4]
 802a77a:	bf04      	itt	eq
 802a77c:	1949      	addeq	r1, r1, r5
 802a77e:	6021      	streq	r1, [r4, #0]
 802a780:	6054      	str	r4, [r2, #4]
 802a782:	e7ca      	b.n	802a71a <_free_r+0x26>
 802a784:	b003      	add	sp, #12
 802a786:	bd30      	pop	{r4, r5, pc}
 802a788:	200080fc 	.word	0x200080fc

0802a78c <malloc>:
 802a78c:	4b02      	ldr	r3, [pc, #8]	; (802a798 <malloc+0xc>)
 802a78e:	4601      	mov	r1, r0
 802a790:	6818      	ldr	r0, [r3, #0]
 802a792:	f000 b823 	b.w	802a7dc <_malloc_r>
 802a796:	bf00      	nop
 802a798:	20000124 	.word	0x20000124

0802a79c <sbrk_aligned>:
 802a79c:	b570      	push	{r4, r5, r6, lr}
 802a79e:	4e0e      	ldr	r6, [pc, #56]	; (802a7d8 <sbrk_aligned+0x3c>)
 802a7a0:	460c      	mov	r4, r1
 802a7a2:	6831      	ldr	r1, [r6, #0]
 802a7a4:	4605      	mov	r5, r0
 802a7a6:	b911      	cbnz	r1, 802a7ae <sbrk_aligned+0x12>
 802a7a8:	f001 fa6e 	bl	802bc88 <_sbrk_r>
 802a7ac:	6030      	str	r0, [r6, #0]
 802a7ae:	4621      	mov	r1, r4
 802a7b0:	4628      	mov	r0, r5
 802a7b2:	f001 fa69 	bl	802bc88 <_sbrk_r>
 802a7b6:	1c43      	adds	r3, r0, #1
 802a7b8:	d00a      	beq.n	802a7d0 <sbrk_aligned+0x34>
 802a7ba:	1cc4      	adds	r4, r0, #3
 802a7bc:	f024 0403 	bic.w	r4, r4, #3
 802a7c0:	42a0      	cmp	r0, r4
 802a7c2:	d007      	beq.n	802a7d4 <sbrk_aligned+0x38>
 802a7c4:	1a21      	subs	r1, r4, r0
 802a7c6:	4628      	mov	r0, r5
 802a7c8:	f001 fa5e 	bl	802bc88 <_sbrk_r>
 802a7cc:	3001      	adds	r0, #1
 802a7ce:	d101      	bne.n	802a7d4 <sbrk_aligned+0x38>
 802a7d0:	f04f 34ff 	mov.w	r4, #4294967295
 802a7d4:	4620      	mov	r0, r4
 802a7d6:	bd70      	pop	{r4, r5, r6, pc}
 802a7d8:	20008100 	.word	0x20008100

0802a7dc <_malloc_r>:
 802a7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802a7e0:	1ccd      	adds	r5, r1, #3
 802a7e2:	f025 0503 	bic.w	r5, r5, #3
 802a7e6:	3508      	adds	r5, #8
 802a7e8:	2d0c      	cmp	r5, #12
 802a7ea:	bf38      	it	cc
 802a7ec:	250c      	movcc	r5, #12
 802a7ee:	2d00      	cmp	r5, #0
 802a7f0:	4607      	mov	r7, r0
 802a7f2:	db01      	blt.n	802a7f8 <_malloc_r+0x1c>
 802a7f4:	42a9      	cmp	r1, r5
 802a7f6:	d905      	bls.n	802a804 <_malloc_r+0x28>
 802a7f8:	230c      	movs	r3, #12
 802a7fa:	603b      	str	r3, [r7, #0]
 802a7fc:	2600      	movs	r6, #0
 802a7fe:	4630      	mov	r0, r6
 802a800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802a804:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 802a8d8 <_malloc_r+0xfc>
 802a808:	f000 f868 	bl	802a8dc <__malloc_lock>
 802a80c:	f8d8 3000 	ldr.w	r3, [r8]
 802a810:	461c      	mov	r4, r3
 802a812:	bb5c      	cbnz	r4, 802a86c <_malloc_r+0x90>
 802a814:	4629      	mov	r1, r5
 802a816:	4638      	mov	r0, r7
 802a818:	f7ff ffc0 	bl	802a79c <sbrk_aligned>
 802a81c:	1c43      	adds	r3, r0, #1
 802a81e:	4604      	mov	r4, r0
 802a820:	d155      	bne.n	802a8ce <_malloc_r+0xf2>
 802a822:	f8d8 4000 	ldr.w	r4, [r8]
 802a826:	4626      	mov	r6, r4
 802a828:	2e00      	cmp	r6, #0
 802a82a:	d145      	bne.n	802a8b8 <_malloc_r+0xdc>
 802a82c:	2c00      	cmp	r4, #0
 802a82e:	d048      	beq.n	802a8c2 <_malloc_r+0xe6>
 802a830:	6823      	ldr	r3, [r4, #0]
 802a832:	4631      	mov	r1, r6
 802a834:	4638      	mov	r0, r7
 802a836:	eb04 0903 	add.w	r9, r4, r3
 802a83a:	f001 fa25 	bl	802bc88 <_sbrk_r>
 802a83e:	4581      	cmp	r9, r0
 802a840:	d13f      	bne.n	802a8c2 <_malloc_r+0xe6>
 802a842:	6821      	ldr	r1, [r4, #0]
 802a844:	1a6d      	subs	r5, r5, r1
 802a846:	4629      	mov	r1, r5
 802a848:	4638      	mov	r0, r7
 802a84a:	f7ff ffa7 	bl	802a79c <sbrk_aligned>
 802a84e:	3001      	adds	r0, #1
 802a850:	d037      	beq.n	802a8c2 <_malloc_r+0xe6>
 802a852:	6823      	ldr	r3, [r4, #0]
 802a854:	442b      	add	r3, r5
 802a856:	6023      	str	r3, [r4, #0]
 802a858:	f8d8 3000 	ldr.w	r3, [r8]
 802a85c:	2b00      	cmp	r3, #0
 802a85e:	d038      	beq.n	802a8d2 <_malloc_r+0xf6>
 802a860:	685a      	ldr	r2, [r3, #4]
 802a862:	42a2      	cmp	r2, r4
 802a864:	d12b      	bne.n	802a8be <_malloc_r+0xe2>
 802a866:	2200      	movs	r2, #0
 802a868:	605a      	str	r2, [r3, #4]
 802a86a:	e00f      	b.n	802a88c <_malloc_r+0xb0>
 802a86c:	6822      	ldr	r2, [r4, #0]
 802a86e:	1b52      	subs	r2, r2, r5
 802a870:	d41f      	bmi.n	802a8b2 <_malloc_r+0xd6>
 802a872:	2a0b      	cmp	r2, #11
 802a874:	d917      	bls.n	802a8a6 <_malloc_r+0xca>
 802a876:	1961      	adds	r1, r4, r5
 802a878:	42a3      	cmp	r3, r4
 802a87a:	6025      	str	r5, [r4, #0]
 802a87c:	bf18      	it	ne
 802a87e:	6059      	strne	r1, [r3, #4]
 802a880:	6863      	ldr	r3, [r4, #4]
 802a882:	bf08      	it	eq
 802a884:	f8c8 1000 	streq.w	r1, [r8]
 802a888:	5162      	str	r2, [r4, r5]
 802a88a:	604b      	str	r3, [r1, #4]
 802a88c:	4638      	mov	r0, r7
 802a88e:	f104 060b 	add.w	r6, r4, #11
 802a892:	f000 f829 	bl	802a8e8 <__malloc_unlock>
 802a896:	f026 0607 	bic.w	r6, r6, #7
 802a89a:	1d23      	adds	r3, r4, #4
 802a89c:	1af2      	subs	r2, r6, r3
 802a89e:	d0ae      	beq.n	802a7fe <_malloc_r+0x22>
 802a8a0:	1b9b      	subs	r3, r3, r6
 802a8a2:	50a3      	str	r3, [r4, r2]
 802a8a4:	e7ab      	b.n	802a7fe <_malloc_r+0x22>
 802a8a6:	42a3      	cmp	r3, r4
 802a8a8:	6862      	ldr	r2, [r4, #4]
 802a8aa:	d1dd      	bne.n	802a868 <_malloc_r+0x8c>
 802a8ac:	f8c8 2000 	str.w	r2, [r8]
 802a8b0:	e7ec      	b.n	802a88c <_malloc_r+0xb0>
 802a8b2:	4623      	mov	r3, r4
 802a8b4:	6864      	ldr	r4, [r4, #4]
 802a8b6:	e7ac      	b.n	802a812 <_malloc_r+0x36>
 802a8b8:	4634      	mov	r4, r6
 802a8ba:	6876      	ldr	r6, [r6, #4]
 802a8bc:	e7b4      	b.n	802a828 <_malloc_r+0x4c>
 802a8be:	4613      	mov	r3, r2
 802a8c0:	e7cc      	b.n	802a85c <_malloc_r+0x80>
 802a8c2:	230c      	movs	r3, #12
 802a8c4:	603b      	str	r3, [r7, #0]
 802a8c6:	4638      	mov	r0, r7
 802a8c8:	f000 f80e 	bl	802a8e8 <__malloc_unlock>
 802a8cc:	e797      	b.n	802a7fe <_malloc_r+0x22>
 802a8ce:	6025      	str	r5, [r4, #0]
 802a8d0:	e7dc      	b.n	802a88c <_malloc_r+0xb0>
 802a8d2:	605b      	str	r3, [r3, #4]
 802a8d4:	deff      	udf	#255	; 0xff
 802a8d6:	bf00      	nop
 802a8d8:	200080fc 	.word	0x200080fc

0802a8dc <__malloc_lock>:
 802a8dc:	4801      	ldr	r0, [pc, #4]	; (802a8e4 <__malloc_lock+0x8>)
 802a8de:	f7ff b878 	b.w	80299d2 <__retarget_lock_acquire_recursive>
 802a8e2:	bf00      	nop
 802a8e4:	200080f8 	.word	0x200080f8

0802a8e8 <__malloc_unlock>:
 802a8e8:	4801      	ldr	r0, [pc, #4]	; (802a8f0 <__malloc_unlock+0x8>)
 802a8ea:	f7ff b873 	b.w	80299d4 <__retarget_lock_release_recursive>
 802a8ee:	bf00      	nop
 802a8f0:	200080f8 	.word	0x200080f8

0802a8f4 <_Balloc>:
 802a8f4:	b570      	push	{r4, r5, r6, lr}
 802a8f6:	69c6      	ldr	r6, [r0, #28]
 802a8f8:	4604      	mov	r4, r0
 802a8fa:	460d      	mov	r5, r1
 802a8fc:	b976      	cbnz	r6, 802a91c <_Balloc+0x28>
 802a8fe:	2010      	movs	r0, #16
 802a900:	f7ff ff44 	bl	802a78c <malloc>
 802a904:	4602      	mov	r2, r0
 802a906:	61e0      	str	r0, [r4, #28]
 802a908:	b920      	cbnz	r0, 802a914 <_Balloc+0x20>
 802a90a:	4b18      	ldr	r3, [pc, #96]	; (802a96c <_Balloc+0x78>)
 802a90c:	4818      	ldr	r0, [pc, #96]	; (802a970 <_Balloc+0x7c>)
 802a90e:	216b      	movs	r1, #107	; 0x6b
 802a910:	f7fe f8da 	bl	8028ac8 <__assert_func>
 802a914:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a918:	6006      	str	r6, [r0, #0]
 802a91a:	60c6      	str	r6, [r0, #12]
 802a91c:	69e6      	ldr	r6, [r4, #28]
 802a91e:	68f3      	ldr	r3, [r6, #12]
 802a920:	b183      	cbz	r3, 802a944 <_Balloc+0x50>
 802a922:	69e3      	ldr	r3, [r4, #28]
 802a924:	68db      	ldr	r3, [r3, #12]
 802a926:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 802a92a:	b9b8      	cbnz	r0, 802a95c <_Balloc+0x68>
 802a92c:	2101      	movs	r1, #1
 802a92e:	fa01 f605 	lsl.w	r6, r1, r5
 802a932:	1d72      	adds	r2, r6, #5
 802a934:	0092      	lsls	r2, r2, #2
 802a936:	4620      	mov	r0, r4
 802a938:	f001 f9b6 	bl	802bca8 <_calloc_r>
 802a93c:	b160      	cbz	r0, 802a958 <_Balloc+0x64>
 802a93e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802a942:	e00e      	b.n	802a962 <_Balloc+0x6e>
 802a944:	2221      	movs	r2, #33	; 0x21
 802a946:	2104      	movs	r1, #4
 802a948:	4620      	mov	r0, r4
 802a94a:	f001 f9ad 	bl	802bca8 <_calloc_r>
 802a94e:	69e3      	ldr	r3, [r4, #28]
 802a950:	60f0      	str	r0, [r6, #12]
 802a952:	68db      	ldr	r3, [r3, #12]
 802a954:	2b00      	cmp	r3, #0
 802a956:	d1e4      	bne.n	802a922 <_Balloc+0x2e>
 802a958:	2000      	movs	r0, #0
 802a95a:	bd70      	pop	{r4, r5, r6, pc}
 802a95c:	6802      	ldr	r2, [r0, #0]
 802a95e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802a962:	2300      	movs	r3, #0
 802a964:	e9c0 3303 	strd	r3, r3, [r0, #12]
 802a968:	e7f7      	b.n	802a95a <_Balloc+0x66>
 802a96a:	bf00      	nop
 802a96c:	08033ebd 	.word	0x08033ebd
 802a970:	08033f3d 	.word	0x08033f3d

0802a974 <_Bfree>:
 802a974:	b570      	push	{r4, r5, r6, lr}
 802a976:	69c6      	ldr	r6, [r0, #28]
 802a978:	4605      	mov	r5, r0
 802a97a:	460c      	mov	r4, r1
 802a97c:	b976      	cbnz	r6, 802a99c <_Bfree+0x28>
 802a97e:	2010      	movs	r0, #16
 802a980:	f7ff ff04 	bl	802a78c <malloc>
 802a984:	4602      	mov	r2, r0
 802a986:	61e8      	str	r0, [r5, #28]
 802a988:	b920      	cbnz	r0, 802a994 <_Bfree+0x20>
 802a98a:	4b09      	ldr	r3, [pc, #36]	; (802a9b0 <_Bfree+0x3c>)
 802a98c:	4809      	ldr	r0, [pc, #36]	; (802a9b4 <_Bfree+0x40>)
 802a98e:	218f      	movs	r1, #143	; 0x8f
 802a990:	f7fe f89a 	bl	8028ac8 <__assert_func>
 802a994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 802a998:	6006      	str	r6, [r0, #0]
 802a99a:	60c6      	str	r6, [r0, #12]
 802a99c:	b13c      	cbz	r4, 802a9ae <_Bfree+0x3a>
 802a99e:	69eb      	ldr	r3, [r5, #28]
 802a9a0:	6862      	ldr	r2, [r4, #4]
 802a9a2:	68db      	ldr	r3, [r3, #12]
 802a9a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 802a9a8:	6021      	str	r1, [r4, #0]
 802a9aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 802a9ae:	bd70      	pop	{r4, r5, r6, pc}
 802a9b0:	08033ebd 	.word	0x08033ebd
 802a9b4:	08033f3d 	.word	0x08033f3d

0802a9b8 <__multadd>:
 802a9b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802a9bc:	690d      	ldr	r5, [r1, #16]
 802a9be:	4607      	mov	r7, r0
 802a9c0:	460c      	mov	r4, r1
 802a9c2:	461e      	mov	r6, r3
 802a9c4:	f101 0c14 	add.w	ip, r1, #20
 802a9c8:	2000      	movs	r0, #0
 802a9ca:	f8dc 3000 	ldr.w	r3, [ip]
 802a9ce:	b299      	uxth	r1, r3
 802a9d0:	fb02 6101 	mla	r1, r2, r1, r6
 802a9d4:	0c1e      	lsrs	r6, r3, #16
 802a9d6:	0c0b      	lsrs	r3, r1, #16
 802a9d8:	fb02 3306 	mla	r3, r2, r6, r3
 802a9dc:	b289      	uxth	r1, r1
 802a9de:	3001      	adds	r0, #1
 802a9e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 802a9e4:	4285      	cmp	r5, r0
 802a9e6:	f84c 1b04 	str.w	r1, [ip], #4
 802a9ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 802a9ee:	dcec      	bgt.n	802a9ca <__multadd+0x12>
 802a9f0:	b30e      	cbz	r6, 802aa36 <__multadd+0x7e>
 802a9f2:	68a3      	ldr	r3, [r4, #8]
 802a9f4:	42ab      	cmp	r3, r5
 802a9f6:	dc19      	bgt.n	802aa2c <__multadd+0x74>
 802a9f8:	6861      	ldr	r1, [r4, #4]
 802a9fa:	4638      	mov	r0, r7
 802a9fc:	3101      	adds	r1, #1
 802a9fe:	f7ff ff79 	bl	802a8f4 <_Balloc>
 802aa02:	4680      	mov	r8, r0
 802aa04:	b928      	cbnz	r0, 802aa12 <__multadd+0x5a>
 802aa06:	4602      	mov	r2, r0
 802aa08:	4b0c      	ldr	r3, [pc, #48]	; (802aa3c <__multadd+0x84>)
 802aa0a:	480d      	ldr	r0, [pc, #52]	; (802aa40 <__multadd+0x88>)
 802aa0c:	21ba      	movs	r1, #186	; 0xba
 802aa0e:	f7fe f85b 	bl	8028ac8 <__assert_func>
 802aa12:	6922      	ldr	r2, [r4, #16]
 802aa14:	3202      	adds	r2, #2
 802aa16:	f104 010c 	add.w	r1, r4, #12
 802aa1a:	0092      	lsls	r2, r2, #2
 802aa1c:	300c      	adds	r0, #12
 802aa1e:	f7fe ffda 	bl	80299d6 <memcpy>
 802aa22:	4621      	mov	r1, r4
 802aa24:	4638      	mov	r0, r7
 802aa26:	f7ff ffa5 	bl	802a974 <_Bfree>
 802aa2a:	4644      	mov	r4, r8
 802aa2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 802aa30:	3501      	adds	r5, #1
 802aa32:	615e      	str	r6, [r3, #20]
 802aa34:	6125      	str	r5, [r4, #16]
 802aa36:	4620      	mov	r0, r4
 802aa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802aa3c:	08033f2c 	.word	0x08033f2c
 802aa40:	08033f3d 	.word	0x08033f3d

0802aa44 <__hi0bits>:
 802aa44:	0c03      	lsrs	r3, r0, #16
 802aa46:	041b      	lsls	r3, r3, #16
 802aa48:	b9d3      	cbnz	r3, 802aa80 <__hi0bits+0x3c>
 802aa4a:	0400      	lsls	r0, r0, #16
 802aa4c:	2310      	movs	r3, #16
 802aa4e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 802aa52:	bf04      	itt	eq
 802aa54:	0200      	lsleq	r0, r0, #8
 802aa56:	3308      	addeq	r3, #8
 802aa58:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 802aa5c:	bf04      	itt	eq
 802aa5e:	0100      	lsleq	r0, r0, #4
 802aa60:	3304      	addeq	r3, #4
 802aa62:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 802aa66:	bf04      	itt	eq
 802aa68:	0080      	lsleq	r0, r0, #2
 802aa6a:	3302      	addeq	r3, #2
 802aa6c:	2800      	cmp	r0, #0
 802aa6e:	db05      	blt.n	802aa7c <__hi0bits+0x38>
 802aa70:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 802aa74:	f103 0301 	add.w	r3, r3, #1
 802aa78:	bf08      	it	eq
 802aa7a:	2320      	moveq	r3, #32
 802aa7c:	4618      	mov	r0, r3
 802aa7e:	4770      	bx	lr
 802aa80:	2300      	movs	r3, #0
 802aa82:	e7e4      	b.n	802aa4e <__hi0bits+0xa>

0802aa84 <__lo0bits>:
 802aa84:	6803      	ldr	r3, [r0, #0]
 802aa86:	f013 0207 	ands.w	r2, r3, #7
 802aa8a:	d00c      	beq.n	802aaa6 <__lo0bits+0x22>
 802aa8c:	07d9      	lsls	r1, r3, #31
 802aa8e:	d422      	bmi.n	802aad6 <__lo0bits+0x52>
 802aa90:	079a      	lsls	r2, r3, #30
 802aa92:	bf49      	itett	mi
 802aa94:	085b      	lsrmi	r3, r3, #1
 802aa96:	089b      	lsrpl	r3, r3, #2
 802aa98:	6003      	strmi	r3, [r0, #0]
 802aa9a:	2201      	movmi	r2, #1
 802aa9c:	bf5c      	itt	pl
 802aa9e:	6003      	strpl	r3, [r0, #0]
 802aaa0:	2202      	movpl	r2, #2
 802aaa2:	4610      	mov	r0, r2
 802aaa4:	4770      	bx	lr
 802aaa6:	b299      	uxth	r1, r3
 802aaa8:	b909      	cbnz	r1, 802aaae <__lo0bits+0x2a>
 802aaaa:	0c1b      	lsrs	r3, r3, #16
 802aaac:	2210      	movs	r2, #16
 802aaae:	b2d9      	uxtb	r1, r3
 802aab0:	b909      	cbnz	r1, 802aab6 <__lo0bits+0x32>
 802aab2:	3208      	adds	r2, #8
 802aab4:	0a1b      	lsrs	r3, r3, #8
 802aab6:	0719      	lsls	r1, r3, #28
 802aab8:	bf04      	itt	eq
 802aaba:	091b      	lsreq	r3, r3, #4
 802aabc:	3204      	addeq	r2, #4
 802aabe:	0799      	lsls	r1, r3, #30
 802aac0:	bf04      	itt	eq
 802aac2:	089b      	lsreq	r3, r3, #2
 802aac4:	3202      	addeq	r2, #2
 802aac6:	07d9      	lsls	r1, r3, #31
 802aac8:	d403      	bmi.n	802aad2 <__lo0bits+0x4e>
 802aaca:	085b      	lsrs	r3, r3, #1
 802aacc:	f102 0201 	add.w	r2, r2, #1
 802aad0:	d003      	beq.n	802aada <__lo0bits+0x56>
 802aad2:	6003      	str	r3, [r0, #0]
 802aad4:	e7e5      	b.n	802aaa2 <__lo0bits+0x1e>
 802aad6:	2200      	movs	r2, #0
 802aad8:	e7e3      	b.n	802aaa2 <__lo0bits+0x1e>
 802aada:	2220      	movs	r2, #32
 802aadc:	e7e1      	b.n	802aaa2 <__lo0bits+0x1e>
	...

0802aae0 <__i2b>:
 802aae0:	b510      	push	{r4, lr}
 802aae2:	460c      	mov	r4, r1
 802aae4:	2101      	movs	r1, #1
 802aae6:	f7ff ff05 	bl	802a8f4 <_Balloc>
 802aaea:	4602      	mov	r2, r0
 802aaec:	b928      	cbnz	r0, 802aafa <__i2b+0x1a>
 802aaee:	4b05      	ldr	r3, [pc, #20]	; (802ab04 <__i2b+0x24>)
 802aaf0:	4805      	ldr	r0, [pc, #20]	; (802ab08 <__i2b+0x28>)
 802aaf2:	f240 1145 	movw	r1, #325	; 0x145
 802aaf6:	f7fd ffe7 	bl	8028ac8 <__assert_func>
 802aafa:	2301      	movs	r3, #1
 802aafc:	6144      	str	r4, [r0, #20]
 802aafe:	6103      	str	r3, [r0, #16]
 802ab00:	bd10      	pop	{r4, pc}
 802ab02:	bf00      	nop
 802ab04:	08033f2c 	.word	0x08033f2c
 802ab08:	08033f3d 	.word	0x08033f3d

0802ab0c <__multiply>:
 802ab0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ab10:	4691      	mov	r9, r2
 802ab12:	690a      	ldr	r2, [r1, #16]
 802ab14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 802ab18:	429a      	cmp	r2, r3
 802ab1a:	bfb8      	it	lt
 802ab1c:	460b      	movlt	r3, r1
 802ab1e:	460c      	mov	r4, r1
 802ab20:	bfbc      	itt	lt
 802ab22:	464c      	movlt	r4, r9
 802ab24:	4699      	movlt	r9, r3
 802ab26:	6927      	ldr	r7, [r4, #16]
 802ab28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 802ab2c:	68a3      	ldr	r3, [r4, #8]
 802ab2e:	6861      	ldr	r1, [r4, #4]
 802ab30:	eb07 060a 	add.w	r6, r7, sl
 802ab34:	42b3      	cmp	r3, r6
 802ab36:	b085      	sub	sp, #20
 802ab38:	bfb8      	it	lt
 802ab3a:	3101      	addlt	r1, #1
 802ab3c:	f7ff feda 	bl	802a8f4 <_Balloc>
 802ab40:	b930      	cbnz	r0, 802ab50 <__multiply+0x44>
 802ab42:	4602      	mov	r2, r0
 802ab44:	4b44      	ldr	r3, [pc, #272]	; (802ac58 <__multiply+0x14c>)
 802ab46:	4845      	ldr	r0, [pc, #276]	; (802ac5c <__multiply+0x150>)
 802ab48:	f44f 71b1 	mov.w	r1, #354	; 0x162
 802ab4c:	f7fd ffbc 	bl	8028ac8 <__assert_func>
 802ab50:	f100 0514 	add.w	r5, r0, #20
 802ab54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 802ab58:	462b      	mov	r3, r5
 802ab5a:	2200      	movs	r2, #0
 802ab5c:	4543      	cmp	r3, r8
 802ab5e:	d321      	bcc.n	802aba4 <__multiply+0x98>
 802ab60:	f104 0314 	add.w	r3, r4, #20
 802ab64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 802ab68:	f109 0314 	add.w	r3, r9, #20
 802ab6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 802ab70:	9202      	str	r2, [sp, #8]
 802ab72:	1b3a      	subs	r2, r7, r4
 802ab74:	3a15      	subs	r2, #21
 802ab76:	f022 0203 	bic.w	r2, r2, #3
 802ab7a:	3204      	adds	r2, #4
 802ab7c:	f104 0115 	add.w	r1, r4, #21
 802ab80:	428f      	cmp	r7, r1
 802ab82:	bf38      	it	cc
 802ab84:	2204      	movcc	r2, #4
 802ab86:	9201      	str	r2, [sp, #4]
 802ab88:	9a02      	ldr	r2, [sp, #8]
 802ab8a:	9303      	str	r3, [sp, #12]
 802ab8c:	429a      	cmp	r2, r3
 802ab8e:	d80c      	bhi.n	802abaa <__multiply+0x9e>
 802ab90:	2e00      	cmp	r6, #0
 802ab92:	dd03      	ble.n	802ab9c <__multiply+0x90>
 802ab94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 802ab98:	2b00      	cmp	r3, #0
 802ab9a:	d05b      	beq.n	802ac54 <__multiply+0x148>
 802ab9c:	6106      	str	r6, [r0, #16]
 802ab9e:	b005      	add	sp, #20
 802aba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802aba4:	f843 2b04 	str.w	r2, [r3], #4
 802aba8:	e7d8      	b.n	802ab5c <__multiply+0x50>
 802abaa:	f8b3 a000 	ldrh.w	sl, [r3]
 802abae:	f1ba 0f00 	cmp.w	sl, #0
 802abb2:	d024      	beq.n	802abfe <__multiply+0xf2>
 802abb4:	f104 0e14 	add.w	lr, r4, #20
 802abb8:	46a9      	mov	r9, r5
 802abba:	f04f 0c00 	mov.w	ip, #0
 802abbe:	f85e 2b04 	ldr.w	r2, [lr], #4
 802abc2:	f8d9 1000 	ldr.w	r1, [r9]
 802abc6:	fa1f fb82 	uxth.w	fp, r2
 802abca:	b289      	uxth	r1, r1
 802abcc:	fb0a 110b 	mla	r1, sl, fp, r1
 802abd0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 802abd4:	f8d9 2000 	ldr.w	r2, [r9]
 802abd8:	4461      	add	r1, ip
 802abda:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802abde:	fb0a c20b 	mla	r2, sl, fp, ip
 802abe2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 802abe6:	b289      	uxth	r1, r1
 802abe8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802abec:	4577      	cmp	r7, lr
 802abee:	f849 1b04 	str.w	r1, [r9], #4
 802abf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 802abf6:	d8e2      	bhi.n	802abbe <__multiply+0xb2>
 802abf8:	9a01      	ldr	r2, [sp, #4]
 802abfa:	f845 c002 	str.w	ip, [r5, r2]
 802abfe:	9a03      	ldr	r2, [sp, #12]
 802ac00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 802ac04:	3304      	adds	r3, #4
 802ac06:	f1b9 0f00 	cmp.w	r9, #0
 802ac0a:	d021      	beq.n	802ac50 <__multiply+0x144>
 802ac0c:	6829      	ldr	r1, [r5, #0]
 802ac0e:	f104 0c14 	add.w	ip, r4, #20
 802ac12:	46ae      	mov	lr, r5
 802ac14:	f04f 0a00 	mov.w	sl, #0
 802ac18:	f8bc b000 	ldrh.w	fp, [ip]
 802ac1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 802ac20:	fb09 220b 	mla	r2, r9, fp, r2
 802ac24:	4452      	add	r2, sl
 802ac26:	b289      	uxth	r1, r1
 802ac28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 802ac2c:	f84e 1b04 	str.w	r1, [lr], #4
 802ac30:	f85c 1b04 	ldr.w	r1, [ip], #4
 802ac34:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ac38:	f8be 1000 	ldrh.w	r1, [lr]
 802ac3c:	fb09 110a 	mla	r1, r9, sl, r1
 802ac40:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 802ac44:	4567      	cmp	r7, ip
 802ac46:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 802ac4a:	d8e5      	bhi.n	802ac18 <__multiply+0x10c>
 802ac4c:	9a01      	ldr	r2, [sp, #4]
 802ac4e:	50a9      	str	r1, [r5, r2]
 802ac50:	3504      	adds	r5, #4
 802ac52:	e799      	b.n	802ab88 <__multiply+0x7c>
 802ac54:	3e01      	subs	r6, #1
 802ac56:	e79b      	b.n	802ab90 <__multiply+0x84>
 802ac58:	08033f2c 	.word	0x08033f2c
 802ac5c:	08033f3d 	.word	0x08033f3d

0802ac60 <__pow5mult>:
 802ac60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802ac64:	4615      	mov	r5, r2
 802ac66:	f012 0203 	ands.w	r2, r2, #3
 802ac6a:	4606      	mov	r6, r0
 802ac6c:	460f      	mov	r7, r1
 802ac6e:	d007      	beq.n	802ac80 <__pow5mult+0x20>
 802ac70:	4c25      	ldr	r4, [pc, #148]	; (802ad08 <__pow5mult+0xa8>)
 802ac72:	3a01      	subs	r2, #1
 802ac74:	2300      	movs	r3, #0
 802ac76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 802ac7a:	f7ff fe9d 	bl	802a9b8 <__multadd>
 802ac7e:	4607      	mov	r7, r0
 802ac80:	10ad      	asrs	r5, r5, #2
 802ac82:	d03d      	beq.n	802ad00 <__pow5mult+0xa0>
 802ac84:	69f4      	ldr	r4, [r6, #28]
 802ac86:	b97c      	cbnz	r4, 802aca8 <__pow5mult+0x48>
 802ac88:	2010      	movs	r0, #16
 802ac8a:	f7ff fd7f 	bl	802a78c <malloc>
 802ac8e:	4602      	mov	r2, r0
 802ac90:	61f0      	str	r0, [r6, #28]
 802ac92:	b928      	cbnz	r0, 802aca0 <__pow5mult+0x40>
 802ac94:	4b1d      	ldr	r3, [pc, #116]	; (802ad0c <__pow5mult+0xac>)
 802ac96:	481e      	ldr	r0, [pc, #120]	; (802ad10 <__pow5mult+0xb0>)
 802ac98:	f240 11b3 	movw	r1, #435	; 0x1b3
 802ac9c:	f7fd ff14 	bl	8028ac8 <__assert_func>
 802aca0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 802aca4:	6004      	str	r4, [r0, #0]
 802aca6:	60c4      	str	r4, [r0, #12]
 802aca8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 802acac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 802acb0:	b94c      	cbnz	r4, 802acc6 <__pow5mult+0x66>
 802acb2:	f240 2171 	movw	r1, #625	; 0x271
 802acb6:	4630      	mov	r0, r6
 802acb8:	f7ff ff12 	bl	802aae0 <__i2b>
 802acbc:	2300      	movs	r3, #0
 802acbe:	f8c8 0008 	str.w	r0, [r8, #8]
 802acc2:	4604      	mov	r4, r0
 802acc4:	6003      	str	r3, [r0, #0]
 802acc6:	f04f 0900 	mov.w	r9, #0
 802acca:	07eb      	lsls	r3, r5, #31
 802accc:	d50a      	bpl.n	802ace4 <__pow5mult+0x84>
 802acce:	4639      	mov	r1, r7
 802acd0:	4622      	mov	r2, r4
 802acd2:	4630      	mov	r0, r6
 802acd4:	f7ff ff1a 	bl	802ab0c <__multiply>
 802acd8:	4639      	mov	r1, r7
 802acda:	4680      	mov	r8, r0
 802acdc:	4630      	mov	r0, r6
 802acde:	f7ff fe49 	bl	802a974 <_Bfree>
 802ace2:	4647      	mov	r7, r8
 802ace4:	106d      	asrs	r5, r5, #1
 802ace6:	d00b      	beq.n	802ad00 <__pow5mult+0xa0>
 802ace8:	6820      	ldr	r0, [r4, #0]
 802acea:	b938      	cbnz	r0, 802acfc <__pow5mult+0x9c>
 802acec:	4622      	mov	r2, r4
 802acee:	4621      	mov	r1, r4
 802acf0:	4630      	mov	r0, r6
 802acf2:	f7ff ff0b 	bl	802ab0c <__multiply>
 802acf6:	6020      	str	r0, [r4, #0]
 802acf8:	f8c0 9000 	str.w	r9, [r0]
 802acfc:	4604      	mov	r4, r0
 802acfe:	e7e4      	b.n	802acca <__pow5mult+0x6a>
 802ad00:	4638      	mov	r0, r7
 802ad02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802ad06:	bf00      	nop
 802ad08:	08034088 	.word	0x08034088
 802ad0c:	08033ebd 	.word	0x08033ebd
 802ad10:	08033f3d 	.word	0x08033f3d

0802ad14 <__lshift>:
 802ad14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802ad18:	460c      	mov	r4, r1
 802ad1a:	6849      	ldr	r1, [r1, #4]
 802ad1c:	6923      	ldr	r3, [r4, #16]
 802ad1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 802ad22:	68a3      	ldr	r3, [r4, #8]
 802ad24:	4607      	mov	r7, r0
 802ad26:	4691      	mov	r9, r2
 802ad28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 802ad2c:	f108 0601 	add.w	r6, r8, #1
 802ad30:	42b3      	cmp	r3, r6
 802ad32:	db0b      	blt.n	802ad4c <__lshift+0x38>
 802ad34:	4638      	mov	r0, r7
 802ad36:	f7ff fddd 	bl	802a8f4 <_Balloc>
 802ad3a:	4605      	mov	r5, r0
 802ad3c:	b948      	cbnz	r0, 802ad52 <__lshift+0x3e>
 802ad3e:	4602      	mov	r2, r0
 802ad40:	4b28      	ldr	r3, [pc, #160]	; (802ade4 <__lshift+0xd0>)
 802ad42:	4829      	ldr	r0, [pc, #164]	; (802ade8 <__lshift+0xd4>)
 802ad44:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 802ad48:	f7fd febe 	bl	8028ac8 <__assert_func>
 802ad4c:	3101      	adds	r1, #1
 802ad4e:	005b      	lsls	r3, r3, #1
 802ad50:	e7ee      	b.n	802ad30 <__lshift+0x1c>
 802ad52:	2300      	movs	r3, #0
 802ad54:	f100 0114 	add.w	r1, r0, #20
 802ad58:	f100 0210 	add.w	r2, r0, #16
 802ad5c:	4618      	mov	r0, r3
 802ad5e:	4553      	cmp	r3, sl
 802ad60:	db33      	blt.n	802adca <__lshift+0xb6>
 802ad62:	6920      	ldr	r0, [r4, #16]
 802ad64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 802ad68:	f104 0314 	add.w	r3, r4, #20
 802ad6c:	f019 091f 	ands.w	r9, r9, #31
 802ad70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 802ad74:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 802ad78:	d02b      	beq.n	802add2 <__lshift+0xbe>
 802ad7a:	f1c9 0e20 	rsb	lr, r9, #32
 802ad7e:	468a      	mov	sl, r1
 802ad80:	2200      	movs	r2, #0
 802ad82:	6818      	ldr	r0, [r3, #0]
 802ad84:	fa00 f009 	lsl.w	r0, r0, r9
 802ad88:	4310      	orrs	r0, r2
 802ad8a:	f84a 0b04 	str.w	r0, [sl], #4
 802ad8e:	f853 2b04 	ldr.w	r2, [r3], #4
 802ad92:	459c      	cmp	ip, r3
 802ad94:	fa22 f20e 	lsr.w	r2, r2, lr
 802ad98:	d8f3      	bhi.n	802ad82 <__lshift+0x6e>
 802ad9a:	ebac 0304 	sub.w	r3, ip, r4
 802ad9e:	3b15      	subs	r3, #21
 802ada0:	f023 0303 	bic.w	r3, r3, #3
 802ada4:	3304      	adds	r3, #4
 802ada6:	f104 0015 	add.w	r0, r4, #21
 802adaa:	4584      	cmp	ip, r0
 802adac:	bf38      	it	cc
 802adae:	2304      	movcc	r3, #4
 802adb0:	50ca      	str	r2, [r1, r3]
 802adb2:	b10a      	cbz	r2, 802adb8 <__lshift+0xa4>
 802adb4:	f108 0602 	add.w	r6, r8, #2
 802adb8:	3e01      	subs	r6, #1
 802adba:	4638      	mov	r0, r7
 802adbc:	612e      	str	r6, [r5, #16]
 802adbe:	4621      	mov	r1, r4
 802adc0:	f7ff fdd8 	bl	802a974 <_Bfree>
 802adc4:	4628      	mov	r0, r5
 802adc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802adca:	f842 0f04 	str.w	r0, [r2, #4]!
 802adce:	3301      	adds	r3, #1
 802add0:	e7c5      	b.n	802ad5e <__lshift+0x4a>
 802add2:	3904      	subs	r1, #4
 802add4:	f853 2b04 	ldr.w	r2, [r3], #4
 802add8:	f841 2f04 	str.w	r2, [r1, #4]!
 802addc:	459c      	cmp	ip, r3
 802adde:	d8f9      	bhi.n	802add4 <__lshift+0xc0>
 802ade0:	e7ea      	b.n	802adb8 <__lshift+0xa4>
 802ade2:	bf00      	nop
 802ade4:	08033f2c 	.word	0x08033f2c
 802ade8:	08033f3d 	.word	0x08033f3d

0802adec <__mcmp>:
 802adec:	b530      	push	{r4, r5, lr}
 802adee:	6902      	ldr	r2, [r0, #16]
 802adf0:	690c      	ldr	r4, [r1, #16]
 802adf2:	1b12      	subs	r2, r2, r4
 802adf4:	d10e      	bne.n	802ae14 <__mcmp+0x28>
 802adf6:	f100 0314 	add.w	r3, r0, #20
 802adfa:	3114      	adds	r1, #20
 802adfc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 802ae00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 802ae04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 802ae08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 802ae0c:	42a5      	cmp	r5, r4
 802ae0e:	d003      	beq.n	802ae18 <__mcmp+0x2c>
 802ae10:	d305      	bcc.n	802ae1e <__mcmp+0x32>
 802ae12:	2201      	movs	r2, #1
 802ae14:	4610      	mov	r0, r2
 802ae16:	bd30      	pop	{r4, r5, pc}
 802ae18:	4283      	cmp	r3, r0
 802ae1a:	d3f3      	bcc.n	802ae04 <__mcmp+0x18>
 802ae1c:	e7fa      	b.n	802ae14 <__mcmp+0x28>
 802ae1e:	f04f 32ff 	mov.w	r2, #4294967295
 802ae22:	e7f7      	b.n	802ae14 <__mcmp+0x28>

0802ae24 <__mdiff>:
 802ae24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802ae28:	460c      	mov	r4, r1
 802ae2a:	4606      	mov	r6, r0
 802ae2c:	4611      	mov	r1, r2
 802ae2e:	4620      	mov	r0, r4
 802ae30:	4690      	mov	r8, r2
 802ae32:	f7ff ffdb 	bl	802adec <__mcmp>
 802ae36:	1e05      	subs	r5, r0, #0
 802ae38:	d110      	bne.n	802ae5c <__mdiff+0x38>
 802ae3a:	4629      	mov	r1, r5
 802ae3c:	4630      	mov	r0, r6
 802ae3e:	f7ff fd59 	bl	802a8f4 <_Balloc>
 802ae42:	b930      	cbnz	r0, 802ae52 <__mdiff+0x2e>
 802ae44:	4b3a      	ldr	r3, [pc, #232]	; (802af30 <__mdiff+0x10c>)
 802ae46:	4602      	mov	r2, r0
 802ae48:	f240 2137 	movw	r1, #567	; 0x237
 802ae4c:	4839      	ldr	r0, [pc, #228]	; (802af34 <__mdiff+0x110>)
 802ae4e:	f7fd fe3b 	bl	8028ac8 <__assert_func>
 802ae52:	2301      	movs	r3, #1
 802ae54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 802ae58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802ae5c:	bfa4      	itt	ge
 802ae5e:	4643      	movge	r3, r8
 802ae60:	46a0      	movge	r8, r4
 802ae62:	4630      	mov	r0, r6
 802ae64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802ae68:	bfa6      	itte	ge
 802ae6a:	461c      	movge	r4, r3
 802ae6c:	2500      	movge	r5, #0
 802ae6e:	2501      	movlt	r5, #1
 802ae70:	f7ff fd40 	bl	802a8f4 <_Balloc>
 802ae74:	b920      	cbnz	r0, 802ae80 <__mdiff+0x5c>
 802ae76:	4b2e      	ldr	r3, [pc, #184]	; (802af30 <__mdiff+0x10c>)
 802ae78:	4602      	mov	r2, r0
 802ae7a:	f240 2145 	movw	r1, #581	; 0x245
 802ae7e:	e7e5      	b.n	802ae4c <__mdiff+0x28>
 802ae80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 802ae84:	6926      	ldr	r6, [r4, #16]
 802ae86:	60c5      	str	r5, [r0, #12]
 802ae88:	f104 0914 	add.w	r9, r4, #20
 802ae8c:	f108 0514 	add.w	r5, r8, #20
 802ae90:	f100 0e14 	add.w	lr, r0, #20
 802ae94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 802ae98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 802ae9c:	f108 0210 	add.w	r2, r8, #16
 802aea0:	46f2      	mov	sl, lr
 802aea2:	2100      	movs	r1, #0
 802aea4:	f859 3b04 	ldr.w	r3, [r9], #4
 802aea8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 802aeac:	fa11 f88b 	uxtah	r8, r1, fp
 802aeb0:	b299      	uxth	r1, r3
 802aeb2:	0c1b      	lsrs	r3, r3, #16
 802aeb4:	eba8 0801 	sub.w	r8, r8, r1
 802aeb8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 802aebc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 802aec0:	fa1f f888 	uxth.w	r8, r8
 802aec4:	1419      	asrs	r1, r3, #16
 802aec6:	454e      	cmp	r6, r9
 802aec8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 802aecc:	f84a 3b04 	str.w	r3, [sl], #4
 802aed0:	d8e8      	bhi.n	802aea4 <__mdiff+0x80>
 802aed2:	1b33      	subs	r3, r6, r4
 802aed4:	3b15      	subs	r3, #21
 802aed6:	f023 0303 	bic.w	r3, r3, #3
 802aeda:	3304      	adds	r3, #4
 802aedc:	3415      	adds	r4, #21
 802aede:	42a6      	cmp	r6, r4
 802aee0:	bf38      	it	cc
 802aee2:	2304      	movcc	r3, #4
 802aee4:	441d      	add	r5, r3
 802aee6:	4473      	add	r3, lr
 802aee8:	469e      	mov	lr, r3
 802aeea:	462e      	mov	r6, r5
 802aeec:	4566      	cmp	r6, ip
 802aeee:	d30e      	bcc.n	802af0e <__mdiff+0xea>
 802aef0:	f10c 0203 	add.w	r2, ip, #3
 802aef4:	1b52      	subs	r2, r2, r5
 802aef6:	f022 0203 	bic.w	r2, r2, #3
 802aefa:	3d03      	subs	r5, #3
 802aefc:	45ac      	cmp	ip, r5
 802aefe:	bf38      	it	cc
 802af00:	2200      	movcc	r2, #0
 802af02:	4413      	add	r3, r2
 802af04:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 802af08:	b17a      	cbz	r2, 802af2a <__mdiff+0x106>
 802af0a:	6107      	str	r7, [r0, #16]
 802af0c:	e7a4      	b.n	802ae58 <__mdiff+0x34>
 802af0e:	f856 8b04 	ldr.w	r8, [r6], #4
 802af12:	fa11 f288 	uxtah	r2, r1, r8
 802af16:	1414      	asrs	r4, r2, #16
 802af18:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 802af1c:	b292      	uxth	r2, r2
 802af1e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 802af22:	f84e 2b04 	str.w	r2, [lr], #4
 802af26:	1421      	asrs	r1, r4, #16
 802af28:	e7e0      	b.n	802aeec <__mdiff+0xc8>
 802af2a:	3f01      	subs	r7, #1
 802af2c:	e7ea      	b.n	802af04 <__mdiff+0xe0>
 802af2e:	bf00      	nop
 802af30:	08033f2c 	.word	0x08033f2c
 802af34:	08033f3d 	.word	0x08033f3d

0802af38 <__d2b>:
 802af38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 802af3c:	460f      	mov	r7, r1
 802af3e:	2101      	movs	r1, #1
 802af40:	ec59 8b10 	vmov	r8, r9, d0
 802af44:	4616      	mov	r6, r2
 802af46:	f7ff fcd5 	bl	802a8f4 <_Balloc>
 802af4a:	4604      	mov	r4, r0
 802af4c:	b930      	cbnz	r0, 802af5c <__d2b+0x24>
 802af4e:	4602      	mov	r2, r0
 802af50:	4b24      	ldr	r3, [pc, #144]	; (802afe4 <__d2b+0xac>)
 802af52:	4825      	ldr	r0, [pc, #148]	; (802afe8 <__d2b+0xb0>)
 802af54:	f240 310f 	movw	r1, #783	; 0x30f
 802af58:	f7fd fdb6 	bl	8028ac8 <__assert_func>
 802af5c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 802af60:	f3c9 0313 	ubfx	r3, r9, #0, #20
 802af64:	bb2d      	cbnz	r5, 802afb2 <__d2b+0x7a>
 802af66:	9301      	str	r3, [sp, #4]
 802af68:	f1b8 0300 	subs.w	r3, r8, #0
 802af6c:	d026      	beq.n	802afbc <__d2b+0x84>
 802af6e:	4668      	mov	r0, sp
 802af70:	9300      	str	r3, [sp, #0]
 802af72:	f7ff fd87 	bl	802aa84 <__lo0bits>
 802af76:	e9dd 1200 	ldrd	r1, r2, [sp]
 802af7a:	b1e8      	cbz	r0, 802afb8 <__d2b+0x80>
 802af7c:	f1c0 0320 	rsb	r3, r0, #32
 802af80:	fa02 f303 	lsl.w	r3, r2, r3
 802af84:	430b      	orrs	r3, r1
 802af86:	40c2      	lsrs	r2, r0
 802af88:	6163      	str	r3, [r4, #20]
 802af8a:	9201      	str	r2, [sp, #4]
 802af8c:	9b01      	ldr	r3, [sp, #4]
 802af8e:	61a3      	str	r3, [r4, #24]
 802af90:	2b00      	cmp	r3, #0
 802af92:	bf14      	ite	ne
 802af94:	2202      	movne	r2, #2
 802af96:	2201      	moveq	r2, #1
 802af98:	6122      	str	r2, [r4, #16]
 802af9a:	b1bd      	cbz	r5, 802afcc <__d2b+0x94>
 802af9c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 802afa0:	4405      	add	r5, r0
 802afa2:	603d      	str	r5, [r7, #0]
 802afa4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 802afa8:	6030      	str	r0, [r6, #0]
 802afaa:	4620      	mov	r0, r4
 802afac:	b003      	add	sp, #12
 802afae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802afb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802afb6:	e7d6      	b.n	802af66 <__d2b+0x2e>
 802afb8:	6161      	str	r1, [r4, #20]
 802afba:	e7e7      	b.n	802af8c <__d2b+0x54>
 802afbc:	a801      	add	r0, sp, #4
 802afbe:	f7ff fd61 	bl	802aa84 <__lo0bits>
 802afc2:	9b01      	ldr	r3, [sp, #4]
 802afc4:	6163      	str	r3, [r4, #20]
 802afc6:	3020      	adds	r0, #32
 802afc8:	2201      	movs	r2, #1
 802afca:	e7e5      	b.n	802af98 <__d2b+0x60>
 802afcc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 802afd0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802afd4:	6038      	str	r0, [r7, #0]
 802afd6:	6918      	ldr	r0, [r3, #16]
 802afd8:	f7ff fd34 	bl	802aa44 <__hi0bits>
 802afdc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802afe0:	e7e2      	b.n	802afa8 <__d2b+0x70>
 802afe2:	bf00      	nop
 802afe4:	08033f2c 	.word	0x08033f2c
 802afe8:	08033f3d 	.word	0x08033f3d

0802afec <_sungetc_r>:
 802afec:	b538      	push	{r3, r4, r5, lr}
 802afee:	1c4b      	adds	r3, r1, #1
 802aff0:	4614      	mov	r4, r2
 802aff2:	d103      	bne.n	802affc <_sungetc_r+0x10>
 802aff4:	f04f 35ff 	mov.w	r5, #4294967295
 802aff8:	4628      	mov	r0, r5
 802affa:	bd38      	pop	{r3, r4, r5, pc}
 802affc:	8993      	ldrh	r3, [r2, #12]
 802affe:	f023 0320 	bic.w	r3, r3, #32
 802b002:	8193      	strh	r3, [r2, #12]
 802b004:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b006:	6852      	ldr	r2, [r2, #4]
 802b008:	b2cd      	uxtb	r5, r1
 802b00a:	b18b      	cbz	r3, 802b030 <_sungetc_r+0x44>
 802b00c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802b00e:	4293      	cmp	r3, r2
 802b010:	dd08      	ble.n	802b024 <_sungetc_r+0x38>
 802b012:	6823      	ldr	r3, [r4, #0]
 802b014:	1e5a      	subs	r2, r3, #1
 802b016:	6022      	str	r2, [r4, #0]
 802b018:	f803 5c01 	strb.w	r5, [r3, #-1]
 802b01c:	6863      	ldr	r3, [r4, #4]
 802b01e:	3301      	adds	r3, #1
 802b020:	6063      	str	r3, [r4, #4]
 802b022:	e7e9      	b.n	802aff8 <_sungetc_r+0xc>
 802b024:	4621      	mov	r1, r4
 802b026:	f000 fd8e 	bl	802bb46 <__submore>
 802b02a:	2800      	cmp	r0, #0
 802b02c:	d0f1      	beq.n	802b012 <_sungetc_r+0x26>
 802b02e:	e7e1      	b.n	802aff4 <_sungetc_r+0x8>
 802b030:	6921      	ldr	r1, [r4, #16]
 802b032:	6823      	ldr	r3, [r4, #0]
 802b034:	b151      	cbz	r1, 802b04c <_sungetc_r+0x60>
 802b036:	4299      	cmp	r1, r3
 802b038:	d208      	bcs.n	802b04c <_sungetc_r+0x60>
 802b03a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802b03e:	42a9      	cmp	r1, r5
 802b040:	d104      	bne.n	802b04c <_sungetc_r+0x60>
 802b042:	3b01      	subs	r3, #1
 802b044:	3201      	adds	r2, #1
 802b046:	6023      	str	r3, [r4, #0]
 802b048:	6062      	str	r2, [r4, #4]
 802b04a:	e7d5      	b.n	802aff8 <_sungetc_r+0xc>
 802b04c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802b050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b054:	6363      	str	r3, [r4, #52]	; 0x34
 802b056:	2303      	movs	r3, #3
 802b058:	63a3      	str	r3, [r4, #56]	; 0x38
 802b05a:	4623      	mov	r3, r4
 802b05c:	f803 5f46 	strb.w	r5, [r3, #70]!
 802b060:	6023      	str	r3, [r4, #0]
 802b062:	2301      	movs	r3, #1
 802b064:	e7dc      	b.n	802b020 <_sungetc_r+0x34>

0802b066 <__ssrefill_r>:
 802b066:	b510      	push	{r4, lr}
 802b068:	460c      	mov	r4, r1
 802b06a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802b06c:	b169      	cbz	r1, 802b08a <__ssrefill_r+0x24>
 802b06e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b072:	4299      	cmp	r1, r3
 802b074:	d001      	beq.n	802b07a <__ssrefill_r+0x14>
 802b076:	f7ff fb3d 	bl	802a6f4 <_free_r>
 802b07a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b07c:	6063      	str	r3, [r4, #4]
 802b07e:	2000      	movs	r0, #0
 802b080:	6360      	str	r0, [r4, #52]	; 0x34
 802b082:	b113      	cbz	r3, 802b08a <__ssrefill_r+0x24>
 802b084:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 802b086:	6023      	str	r3, [r4, #0]
 802b088:	bd10      	pop	{r4, pc}
 802b08a:	6923      	ldr	r3, [r4, #16]
 802b08c:	6023      	str	r3, [r4, #0]
 802b08e:	2300      	movs	r3, #0
 802b090:	6063      	str	r3, [r4, #4]
 802b092:	89a3      	ldrh	r3, [r4, #12]
 802b094:	f043 0320 	orr.w	r3, r3, #32
 802b098:	81a3      	strh	r3, [r4, #12]
 802b09a:	f04f 30ff 	mov.w	r0, #4294967295
 802b09e:	e7f3      	b.n	802b088 <__ssrefill_r+0x22>

0802b0a0 <__ssvfiscanf_r>:
 802b0a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802b0a4:	460c      	mov	r4, r1
 802b0a6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 802b0aa:	2100      	movs	r1, #0
 802b0ac:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 802b0b0:	49a6      	ldr	r1, [pc, #664]	; (802b34c <__ssvfiscanf_r+0x2ac>)
 802b0b2:	91a0      	str	r1, [sp, #640]	; 0x280
 802b0b4:	f10d 0804 	add.w	r8, sp, #4
 802b0b8:	49a5      	ldr	r1, [pc, #660]	; (802b350 <__ssvfiscanf_r+0x2b0>)
 802b0ba:	4fa6      	ldr	r7, [pc, #664]	; (802b354 <__ssvfiscanf_r+0x2b4>)
 802b0bc:	f8df 9298 	ldr.w	r9, [pc, #664]	; 802b358 <__ssvfiscanf_r+0x2b8>
 802b0c0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 802b0c4:	4606      	mov	r6, r0
 802b0c6:	91a1      	str	r1, [sp, #644]	; 0x284
 802b0c8:	9300      	str	r3, [sp, #0]
 802b0ca:	7813      	ldrb	r3, [r2, #0]
 802b0cc:	2b00      	cmp	r3, #0
 802b0ce:	f000 815a 	beq.w	802b386 <__ssvfiscanf_r+0x2e6>
 802b0d2:	5cf9      	ldrb	r1, [r7, r3]
 802b0d4:	f011 0108 	ands.w	r1, r1, #8
 802b0d8:	f102 0501 	add.w	r5, r2, #1
 802b0dc:	d019      	beq.n	802b112 <__ssvfiscanf_r+0x72>
 802b0de:	6863      	ldr	r3, [r4, #4]
 802b0e0:	2b00      	cmp	r3, #0
 802b0e2:	dd0f      	ble.n	802b104 <__ssvfiscanf_r+0x64>
 802b0e4:	6823      	ldr	r3, [r4, #0]
 802b0e6:	781a      	ldrb	r2, [r3, #0]
 802b0e8:	5cba      	ldrb	r2, [r7, r2]
 802b0ea:	0712      	lsls	r2, r2, #28
 802b0ec:	d401      	bmi.n	802b0f2 <__ssvfiscanf_r+0x52>
 802b0ee:	462a      	mov	r2, r5
 802b0f0:	e7eb      	b.n	802b0ca <__ssvfiscanf_r+0x2a>
 802b0f2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b0f4:	3201      	adds	r2, #1
 802b0f6:	9245      	str	r2, [sp, #276]	; 0x114
 802b0f8:	6862      	ldr	r2, [r4, #4]
 802b0fa:	3301      	adds	r3, #1
 802b0fc:	3a01      	subs	r2, #1
 802b0fe:	6062      	str	r2, [r4, #4]
 802b100:	6023      	str	r3, [r4, #0]
 802b102:	e7ec      	b.n	802b0de <__ssvfiscanf_r+0x3e>
 802b104:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b106:	4621      	mov	r1, r4
 802b108:	4630      	mov	r0, r6
 802b10a:	4798      	blx	r3
 802b10c:	2800      	cmp	r0, #0
 802b10e:	d0e9      	beq.n	802b0e4 <__ssvfiscanf_r+0x44>
 802b110:	e7ed      	b.n	802b0ee <__ssvfiscanf_r+0x4e>
 802b112:	2b25      	cmp	r3, #37	; 0x25
 802b114:	d012      	beq.n	802b13c <__ssvfiscanf_r+0x9c>
 802b116:	469a      	mov	sl, r3
 802b118:	6863      	ldr	r3, [r4, #4]
 802b11a:	2b00      	cmp	r3, #0
 802b11c:	f340 8091 	ble.w	802b242 <__ssvfiscanf_r+0x1a2>
 802b120:	6822      	ldr	r2, [r4, #0]
 802b122:	7813      	ldrb	r3, [r2, #0]
 802b124:	4553      	cmp	r3, sl
 802b126:	f040 812e 	bne.w	802b386 <__ssvfiscanf_r+0x2e6>
 802b12a:	6863      	ldr	r3, [r4, #4]
 802b12c:	3b01      	subs	r3, #1
 802b12e:	6063      	str	r3, [r4, #4]
 802b130:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802b132:	3201      	adds	r2, #1
 802b134:	3301      	adds	r3, #1
 802b136:	6022      	str	r2, [r4, #0]
 802b138:	9345      	str	r3, [sp, #276]	; 0x114
 802b13a:	e7d8      	b.n	802b0ee <__ssvfiscanf_r+0x4e>
 802b13c:	9141      	str	r1, [sp, #260]	; 0x104
 802b13e:	9143      	str	r1, [sp, #268]	; 0x10c
 802b140:	7853      	ldrb	r3, [r2, #1]
 802b142:	2b2a      	cmp	r3, #42	; 0x2a
 802b144:	bf02      	ittt	eq
 802b146:	2310      	moveq	r3, #16
 802b148:	1c95      	addeq	r5, r2, #2
 802b14a:	9341      	streq	r3, [sp, #260]	; 0x104
 802b14c:	220a      	movs	r2, #10
 802b14e:	46aa      	mov	sl, r5
 802b150:	f81a 1b01 	ldrb.w	r1, [sl], #1
 802b154:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 802b158:	2b09      	cmp	r3, #9
 802b15a:	d91c      	bls.n	802b196 <__ssvfiscanf_r+0xf6>
 802b15c:	487e      	ldr	r0, [pc, #504]	; (802b358 <__ssvfiscanf_r+0x2b8>)
 802b15e:	2203      	movs	r2, #3
 802b160:	f7d5 f80e 	bl	8000180 <memchr>
 802b164:	b138      	cbz	r0, 802b176 <__ssvfiscanf_r+0xd6>
 802b166:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b168:	eba0 0009 	sub.w	r0, r0, r9
 802b16c:	2301      	movs	r3, #1
 802b16e:	4083      	lsls	r3, r0
 802b170:	4313      	orrs	r3, r2
 802b172:	9341      	str	r3, [sp, #260]	; 0x104
 802b174:	4655      	mov	r5, sl
 802b176:	f815 3b01 	ldrb.w	r3, [r5], #1
 802b17a:	2b78      	cmp	r3, #120	; 0x78
 802b17c:	d806      	bhi.n	802b18c <__ssvfiscanf_r+0xec>
 802b17e:	2b57      	cmp	r3, #87	; 0x57
 802b180:	d810      	bhi.n	802b1a4 <__ssvfiscanf_r+0x104>
 802b182:	2b25      	cmp	r3, #37	; 0x25
 802b184:	d0c7      	beq.n	802b116 <__ssvfiscanf_r+0x76>
 802b186:	d857      	bhi.n	802b238 <__ssvfiscanf_r+0x198>
 802b188:	2b00      	cmp	r3, #0
 802b18a:	d065      	beq.n	802b258 <__ssvfiscanf_r+0x1b8>
 802b18c:	2303      	movs	r3, #3
 802b18e:	9347      	str	r3, [sp, #284]	; 0x11c
 802b190:	230a      	movs	r3, #10
 802b192:	9342      	str	r3, [sp, #264]	; 0x108
 802b194:	e076      	b.n	802b284 <__ssvfiscanf_r+0x1e4>
 802b196:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802b198:	fb02 1103 	mla	r1, r2, r3, r1
 802b19c:	3930      	subs	r1, #48	; 0x30
 802b19e:	9143      	str	r1, [sp, #268]	; 0x10c
 802b1a0:	4655      	mov	r5, sl
 802b1a2:	e7d4      	b.n	802b14e <__ssvfiscanf_r+0xae>
 802b1a4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 802b1a8:	2a20      	cmp	r2, #32
 802b1aa:	d8ef      	bhi.n	802b18c <__ssvfiscanf_r+0xec>
 802b1ac:	a101      	add	r1, pc, #4	; (adr r1, 802b1b4 <__ssvfiscanf_r+0x114>)
 802b1ae:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 802b1b2:	bf00      	nop
 802b1b4:	0802b267 	.word	0x0802b267
 802b1b8:	0802b18d 	.word	0x0802b18d
 802b1bc:	0802b18d 	.word	0x0802b18d
 802b1c0:	0802b2c5 	.word	0x0802b2c5
 802b1c4:	0802b18d 	.word	0x0802b18d
 802b1c8:	0802b18d 	.word	0x0802b18d
 802b1cc:	0802b18d 	.word	0x0802b18d
 802b1d0:	0802b18d 	.word	0x0802b18d
 802b1d4:	0802b18d 	.word	0x0802b18d
 802b1d8:	0802b18d 	.word	0x0802b18d
 802b1dc:	0802b18d 	.word	0x0802b18d
 802b1e0:	0802b2db 	.word	0x0802b2db
 802b1e4:	0802b2c1 	.word	0x0802b2c1
 802b1e8:	0802b23f 	.word	0x0802b23f
 802b1ec:	0802b23f 	.word	0x0802b23f
 802b1f0:	0802b23f 	.word	0x0802b23f
 802b1f4:	0802b18d 	.word	0x0802b18d
 802b1f8:	0802b27d 	.word	0x0802b27d
 802b1fc:	0802b18d 	.word	0x0802b18d
 802b200:	0802b18d 	.word	0x0802b18d
 802b204:	0802b18d 	.word	0x0802b18d
 802b208:	0802b18d 	.word	0x0802b18d
 802b20c:	0802b2eb 	.word	0x0802b2eb
 802b210:	0802b2b9 	.word	0x0802b2b9
 802b214:	0802b25f 	.word	0x0802b25f
 802b218:	0802b18d 	.word	0x0802b18d
 802b21c:	0802b18d 	.word	0x0802b18d
 802b220:	0802b2e7 	.word	0x0802b2e7
 802b224:	0802b18d 	.word	0x0802b18d
 802b228:	0802b2c1 	.word	0x0802b2c1
 802b22c:	0802b18d 	.word	0x0802b18d
 802b230:	0802b18d 	.word	0x0802b18d
 802b234:	0802b267 	.word	0x0802b267
 802b238:	3b45      	subs	r3, #69	; 0x45
 802b23a:	2b02      	cmp	r3, #2
 802b23c:	d8a6      	bhi.n	802b18c <__ssvfiscanf_r+0xec>
 802b23e:	2305      	movs	r3, #5
 802b240:	e01f      	b.n	802b282 <__ssvfiscanf_r+0x1e2>
 802b242:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b244:	4621      	mov	r1, r4
 802b246:	4630      	mov	r0, r6
 802b248:	4798      	blx	r3
 802b24a:	2800      	cmp	r0, #0
 802b24c:	f43f af68 	beq.w	802b120 <__ssvfiscanf_r+0x80>
 802b250:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b252:	2800      	cmp	r0, #0
 802b254:	f040 808d 	bne.w	802b372 <__ssvfiscanf_r+0x2d2>
 802b258:	f04f 30ff 	mov.w	r0, #4294967295
 802b25c:	e08f      	b.n	802b37e <__ssvfiscanf_r+0x2de>
 802b25e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b260:	f042 0220 	orr.w	r2, r2, #32
 802b264:	9241      	str	r2, [sp, #260]	; 0x104
 802b266:	9a41      	ldr	r2, [sp, #260]	; 0x104
 802b268:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b26c:	9241      	str	r2, [sp, #260]	; 0x104
 802b26e:	2210      	movs	r2, #16
 802b270:	2b6f      	cmp	r3, #111	; 0x6f
 802b272:	9242      	str	r2, [sp, #264]	; 0x108
 802b274:	bf34      	ite	cc
 802b276:	2303      	movcc	r3, #3
 802b278:	2304      	movcs	r3, #4
 802b27a:	e002      	b.n	802b282 <__ssvfiscanf_r+0x1e2>
 802b27c:	2300      	movs	r3, #0
 802b27e:	9342      	str	r3, [sp, #264]	; 0x108
 802b280:	2303      	movs	r3, #3
 802b282:	9347      	str	r3, [sp, #284]	; 0x11c
 802b284:	6863      	ldr	r3, [r4, #4]
 802b286:	2b00      	cmp	r3, #0
 802b288:	dd3d      	ble.n	802b306 <__ssvfiscanf_r+0x266>
 802b28a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b28c:	0659      	lsls	r1, r3, #25
 802b28e:	d404      	bmi.n	802b29a <__ssvfiscanf_r+0x1fa>
 802b290:	6823      	ldr	r3, [r4, #0]
 802b292:	781a      	ldrb	r2, [r3, #0]
 802b294:	5cba      	ldrb	r2, [r7, r2]
 802b296:	0712      	lsls	r2, r2, #28
 802b298:	d43c      	bmi.n	802b314 <__ssvfiscanf_r+0x274>
 802b29a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 802b29c:	2b02      	cmp	r3, #2
 802b29e:	dc4b      	bgt.n	802b338 <__ssvfiscanf_r+0x298>
 802b2a0:	466b      	mov	r3, sp
 802b2a2:	4622      	mov	r2, r4
 802b2a4:	a941      	add	r1, sp, #260	; 0x104
 802b2a6:	4630      	mov	r0, r6
 802b2a8:	f000 f9b6 	bl	802b618 <_scanf_chars>
 802b2ac:	2801      	cmp	r0, #1
 802b2ae:	d06a      	beq.n	802b386 <__ssvfiscanf_r+0x2e6>
 802b2b0:	2802      	cmp	r0, #2
 802b2b2:	f47f af1c 	bne.w	802b0ee <__ssvfiscanf_r+0x4e>
 802b2b6:	e7cb      	b.n	802b250 <__ssvfiscanf_r+0x1b0>
 802b2b8:	2308      	movs	r3, #8
 802b2ba:	9342      	str	r3, [sp, #264]	; 0x108
 802b2bc:	2304      	movs	r3, #4
 802b2be:	e7e0      	b.n	802b282 <__ssvfiscanf_r+0x1e2>
 802b2c0:	220a      	movs	r2, #10
 802b2c2:	e7d5      	b.n	802b270 <__ssvfiscanf_r+0x1d0>
 802b2c4:	4629      	mov	r1, r5
 802b2c6:	4640      	mov	r0, r8
 802b2c8:	f000 fc04 	bl	802bad4 <__sccl>
 802b2cc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b2d2:	9341      	str	r3, [sp, #260]	; 0x104
 802b2d4:	4605      	mov	r5, r0
 802b2d6:	2301      	movs	r3, #1
 802b2d8:	e7d3      	b.n	802b282 <__ssvfiscanf_r+0x1e2>
 802b2da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 802b2dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b2e0:	9341      	str	r3, [sp, #260]	; 0x104
 802b2e2:	2300      	movs	r3, #0
 802b2e4:	e7cd      	b.n	802b282 <__ssvfiscanf_r+0x1e2>
 802b2e6:	2302      	movs	r3, #2
 802b2e8:	e7cb      	b.n	802b282 <__ssvfiscanf_r+0x1e2>
 802b2ea:	9841      	ldr	r0, [sp, #260]	; 0x104
 802b2ec:	06c3      	lsls	r3, r0, #27
 802b2ee:	f53f aefe 	bmi.w	802b0ee <__ssvfiscanf_r+0x4e>
 802b2f2:	9b00      	ldr	r3, [sp, #0]
 802b2f4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b2f6:	1d19      	adds	r1, r3, #4
 802b2f8:	9100      	str	r1, [sp, #0]
 802b2fa:	681b      	ldr	r3, [r3, #0]
 802b2fc:	07c0      	lsls	r0, r0, #31
 802b2fe:	bf4c      	ite	mi
 802b300:	801a      	strhmi	r2, [r3, #0]
 802b302:	601a      	strpl	r2, [r3, #0]
 802b304:	e6f3      	b.n	802b0ee <__ssvfiscanf_r+0x4e>
 802b306:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b308:	4621      	mov	r1, r4
 802b30a:	4630      	mov	r0, r6
 802b30c:	4798      	blx	r3
 802b30e:	2800      	cmp	r0, #0
 802b310:	d0bb      	beq.n	802b28a <__ssvfiscanf_r+0x1ea>
 802b312:	e79d      	b.n	802b250 <__ssvfiscanf_r+0x1b0>
 802b314:	9a45      	ldr	r2, [sp, #276]	; 0x114
 802b316:	3201      	adds	r2, #1
 802b318:	9245      	str	r2, [sp, #276]	; 0x114
 802b31a:	6862      	ldr	r2, [r4, #4]
 802b31c:	3a01      	subs	r2, #1
 802b31e:	2a00      	cmp	r2, #0
 802b320:	6062      	str	r2, [r4, #4]
 802b322:	dd02      	ble.n	802b32a <__ssvfiscanf_r+0x28a>
 802b324:	3301      	adds	r3, #1
 802b326:	6023      	str	r3, [r4, #0]
 802b328:	e7b2      	b.n	802b290 <__ssvfiscanf_r+0x1f0>
 802b32a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802b32c:	4621      	mov	r1, r4
 802b32e:	4630      	mov	r0, r6
 802b330:	4798      	blx	r3
 802b332:	2800      	cmp	r0, #0
 802b334:	d0ac      	beq.n	802b290 <__ssvfiscanf_r+0x1f0>
 802b336:	e78b      	b.n	802b250 <__ssvfiscanf_r+0x1b0>
 802b338:	2b04      	cmp	r3, #4
 802b33a:	dc0f      	bgt.n	802b35c <__ssvfiscanf_r+0x2bc>
 802b33c:	466b      	mov	r3, sp
 802b33e:	4622      	mov	r2, r4
 802b340:	a941      	add	r1, sp, #260	; 0x104
 802b342:	4630      	mov	r0, r6
 802b344:	f000 f9c2 	bl	802b6cc <_scanf_i>
 802b348:	e7b0      	b.n	802b2ac <__ssvfiscanf_r+0x20c>
 802b34a:	bf00      	nop
 802b34c:	0802afed 	.word	0x0802afed
 802b350:	0802b067 	.word	0x0802b067
 802b354:	080340cb 	.word	0x080340cb
 802b358:	08034094 	.word	0x08034094
 802b35c:	4b0b      	ldr	r3, [pc, #44]	; (802b38c <__ssvfiscanf_r+0x2ec>)
 802b35e:	2b00      	cmp	r3, #0
 802b360:	f43f aec5 	beq.w	802b0ee <__ssvfiscanf_r+0x4e>
 802b364:	466b      	mov	r3, sp
 802b366:	4622      	mov	r2, r4
 802b368:	a941      	add	r1, sp, #260	; 0x104
 802b36a:	4630      	mov	r0, r6
 802b36c:	f3af 8000 	nop.w
 802b370:	e79c      	b.n	802b2ac <__ssvfiscanf_r+0x20c>
 802b372:	89a3      	ldrh	r3, [r4, #12]
 802b374:	f013 0f40 	tst.w	r3, #64	; 0x40
 802b378:	bf18      	it	ne
 802b37a:	f04f 30ff 	movne.w	r0, #4294967295
 802b37e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 802b382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802b386:	9844      	ldr	r0, [sp, #272]	; 0x110
 802b388:	e7f9      	b.n	802b37e <__ssvfiscanf_r+0x2de>
 802b38a:	bf00      	nop
 802b38c:	00000000 	.word	0x00000000

0802b390 <__sfputc_r>:
 802b390:	6893      	ldr	r3, [r2, #8]
 802b392:	3b01      	subs	r3, #1
 802b394:	2b00      	cmp	r3, #0
 802b396:	b410      	push	{r4}
 802b398:	6093      	str	r3, [r2, #8]
 802b39a:	da08      	bge.n	802b3ae <__sfputc_r+0x1e>
 802b39c:	6994      	ldr	r4, [r2, #24]
 802b39e:	42a3      	cmp	r3, r4
 802b3a0:	db01      	blt.n	802b3a6 <__sfputc_r+0x16>
 802b3a2:	290a      	cmp	r1, #10
 802b3a4:	d103      	bne.n	802b3ae <__sfputc_r+0x1e>
 802b3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b3aa:	f7fe b9c4 	b.w	8029736 <__swbuf_r>
 802b3ae:	6813      	ldr	r3, [r2, #0]
 802b3b0:	1c58      	adds	r0, r3, #1
 802b3b2:	6010      	str	r0, [r2, #0]
 802b3b4:	7019      	strb	r1, [r3, #0]
 802b3b6:	4608      	mov	r0, r1
 802b3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 802b3bc:	4770      	bx	lr

0802b3be <__sfputs_r>:
 802b3be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802b3c0:	4606      	mov	r6, r0
 802b3c2:	460f      	mov	r7, r1
 802b3c4:	4614      	mov	r4, r2
 802b3c6:	18d5      	adds	r5, r2, r3
 802b3c8:	42ac      	cmp	r4, r5
 802b3ca:	d101      	bne.n	802b3d0 <__sfputs_r+0x12>
 802b3cc:	2000      	movs	r0, #0
 802b3ce:	e007      	b.n	802b3e0 <__sfputs_r+0x22>
 802b3d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b3d4:	463a      	mov	r2, r7
 802b3d6:	4630      	mov	r0, r6
 802b3d8:	f7ff ffda 	bl	802b390 <__sfputc_r>
 802b3dc:	1c43      	adds	r3, r0, #1
 802b3de:	d1f3      	bne.n	802b3c8 <__sfputs_r+0xa>
 802b3e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802b3e4 <_vfiprintf_r>:
 802b3e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b3e8:	460d      	mov	r5, r1
 802b3ea:	b09d      	sub	sp, #116	; 0x74
 802b3ec:	4614      	mov	r4, r2
 802b3ee:	4698      	mov	r8, r3
 802b3f0:	4606      	mov	r6, r0
 802b3f2:	b118      	cbz	r0, 802b3fc <_vfiprintf_r+0x18>
 802b3f4:	6a03      	ldr	r3, [r0, #32]
 802b3f6:	b90b      	cbnz	r3, 802b3fc <_vfiprintf_r+0x18>
 802b3f8:	f7fe f876 	bl	80294e8 <__sinit>
 802b3fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b3fe:	07d9      	lsls	r1, r3, #31
 802b400:	d405      	bmi.n	802b40e <_vfiprintf_r+0x2a>
 802b402:	89ab      	ldrh	r3, [r5, #12]
 802b404:	059a      	lsls	r2, r3, #22
 802b406:	d402      	bmi.n	802b40e <_vfiprintf_r+0x2a>
 802b408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b40a:	f7fe fae2 	bl	80299d2 <__retarget_lock_acquire_recursive>
 802b40e:	89ab      	ldrh	r3, [r5, #12]
 802b410:	071b      	lsls	r3, r3, #28
 802b412:	d501      	bpl.n	802b418 <_vfiprintf_r+0x34>
 802b414:	692b      	ldr	r3, [r5, #16]
 802b416:	b99b      	cbnz	r3, 802b440 <_vfiprintf_r+0x5c>
 802b418:	4629      	mov	r1, r5
 802b41a:	4630      	mov	r0, r6
 802b41c:	f7fe f9c8 	bl	80297b0 <__swsetup_r>
 802b420:	b170      	cbz	r0, 802b440 <_vfiprintf_r+0x5c>
 802b422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b424:	07dc      	lsls	r4, r3, #31
 802b426:	d504      	bpl.n	802b432 <_vfiprintf_r+0x4e>
 802b428:	f04f 30ff 	mov.w	r0, #4294967295
 802b42c:	b01d      	add	sp, #116	; 0x74
 802b42e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b432:	89ab      	ldrh	r3, [r5, #12]
 802b434:	0598      	lsls	r0, r3, #22
 802b436:	d4f7      	bmi.n	802b428 <_vfiprintf_r+0x44>
 802b438:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b43a:	f7fe facb 	bl	80299d4 <__retarget_lock_release_recursive>
 802b43e:	e7f3      	b.n	802b428 <_vfiprintf_r+0x44>
 802b440:	2300      	movs	r3, #0
 802b442:	9309      	str	r3, [sp, #36]	; 0x24
 802b444:	2320      	movs	r3, #32
 802b446:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802b44a:	f8cd 800c 	str.w	r8, [sp, #12]
 802b44e:	2330      	movs	r3, #48	; 0x30
 802b450:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 802b604 <_vfiprintf_r+0x220>
 802b454:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802b458:	f04f 0901 	mov.w	r9, #1
 802b45c:	4623      	mov	r3, r4
 802b45e:	469a      	mov	sl, r3
 802b460:	f813 2b01 	ldrb.w	r2, [r3], #1
 802b464:	b10a      	cbz	r2, 802b46a <_vfiprintf_r+0x86>
 802b466:	2a25      	cmp	r2, #37	; 0x25
 802b468:	d1f9      	bne.n	802b45e <_vfiprintf_r+0x7a>
 802b46a:	ebba 0b04 	subs.w	fp, sl, r4
 802b46e:	d00b      	beq.n	802b488 <_vfiprintf_r+0xa4>
 802b470:	465b      	mov	r3, fp
 802b472:	4622      	mov	r2, r4
 802b474:	4629      	mov	r1, r5
 802b476:	4630      	mov	r0, r6
 802b478:	f7ff ffa1 	bl	802b3be <__sfputs_r>
 802b47c:	3001      	adds	r0, #1
 802b47e:	f000 80a9 	beq.w	802b5d4 <_vfiprintf_r+0x1f0>
 802b482:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802b484:	445a      	add	r2, fp
 802b486:	9209      	str	r2, [sp, #36]	; 0x24
 802b488:	f89a 3000 	ldrb.w	r3, [sl]
 802b48c:	2b00      	cmp	r3, #0
 802b48e:	f000 80a1 	beq.w	802b5d4 <_vfiprintf_r+0x1f0>
 802b492:	2300      	movs	r3, #0
 802b494:	f04f 32ff 	mov.w	r2, #4294967295
 802b498:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802b49c:	f10a 0a01 	add.w	sl, sl, #1
 802b4a0:	9304      	str	r3, [sp, #16]
 802b4a2:	9307      	str	r3, [sp, #28]
 802b4a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802b4a8:	931a      	str	r3, [sp, #104]	; 0x68
 802b4aa:	4654      	mov	r4, sl
 802b4ac:	2205      	movs	r2, #5
 802b4ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b4b2:	4854      	ldr	r0, [pc, #336]	; (802b604 <_vfiprintf_r+0x220>)
 802b4b4:	f7d4 fe64 	bl	8000180 <memchr>
 802b4b8:	9a04      	ldr	r2, [sp, #16]
 802b4ba:	b9d8      	cbnz	r0, 802b4f4 <_vfiprintf_r+0x110>
 802b4bc:	06d1      	lsls	r1, r2, #27
 802b4be:	bf44      	itt	mi
 802b4c0:	2320      	movmi	r3, #32
 802b4c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b4c6:	0713      	lsls	r3, r2, #28
 802b4c8:	bf44      	itt	mi
 802b4ca:	232b      	movmi	r3, #43	; 0x2b
 802b4cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802b4d0:	f89a 3000 	ldrb.w	r3, [sl]
 802b4d4:	2b2a      	cmp	r3, #42	; 0x2a
 802b4d6:	d015      	beq.n	802b504 <_vfiprintf_r+0x120>
 802b4d8:	9a07      	ldr	r2, [sp, #28]
 802b4da:	4654      	mov	r4, sl
 802b4dc:	2000      	movs	r0, #0
 802b4de:	f04f 0c0a 	mov.w	ip, #10
 802b4e2:	4621      	mov	r1, r4
 802b4e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 802b4e8:	3b30      	subs	r3, #48	; 0x30
 802b4ea:	2b09      	cmp	r3, #9
 802b4ec:	d94d      	bls.n	802b58a <_vfiprintf_r+0x1a6>
 802b4ee:	b1b0      	cbz	r0, 802b51e <_vfiprintf_r+0x13a>
 802b4f0:	9207      	str	r2, [sp, #28]
 802b4f2:	e014      	b.n	802b51e <_vfiprintf_r+0x13a>
 802b4f4:	eba0 0308 	sub.w	r3, r0, r8
 802b4f8:	fa09 f303 	lsl.w	r3, r9, r3
 802b4fc:	4313      	orrs	r3, r2
 802b4fe:	9304      	str	r3, [sp, #16]
 802b500:	46a2      	mov	sl, r4
 802b502:	e7d2      	b.n	802b4aa <_vfiprintf_r+0xc6>
 802b504:	9b03      	ldr	r3, [sp, #12]
 802b506:	1d19      	adds	r1, r3, #4
 802b508:	681b      	ldr	r3, [r3, #0]
 802b50a:	9103      	str	r1, [sp, #12]
 802b50c:	2b00      	cmp	r3, #0
 802b50e:	bfbb      	ittet	lt
 802b510:	425b      	neglt	r3, r3
 802b512:	f042 0202 	orrlt.w	r2, r2, #2
 802b516:	9307      	strge	r3, [sp, #28]
 802b518:	9307      	strlt	r3, [sp, #28]
 802b51a:	bfb8      	it	lt
 802b51c:	9204      	strlt	r2, [sp, #16]
 802b51e:	7823      	ldrb	r3, [r4, #0]
 802b520:	2b2e      	cmp	r3, #46	; 0x2e
 802b522:	d10c      	bne.n	802b53e <_vfiprintf_r+0x15a>
 802b524:	7863      	ldrb	r3, [r4, #1]
 802b526:	2b2a      	cmp	r3, #42	; 0x2a
 802b528:	d134      	bne.n	802b594 <_vfiprintf_r+0x1b0>
 802b52a:	9b03      	ldr	r3, [sp, #12]
 802b52c:	1d1a      	adds	r2, r3, #4
 802b52e:	681b      	ldr	r3, [r3, #0]
 802b530:	9203      	str	r2, [sp, #12]
 802b532:	2b00      	cmp	r3, #0
 802b534:	bfb8      	it	lt
 802b536:	f04f 33ff 	movlt.w	r3, #4294967295
 802b53a:	3402      	adds	r4, #2
 802b53c:	9305      	str	r3, [sp, #20]
 802b53e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 802b614 <_vfiprintf_r+0x230>
 802b542:	7821      	ldrb	r1, [r4, #0]
 802b544:	2203      	movs	r2, #3
 802b546:	4650      	mov	r0, sl
 802b548:	f7d4 fe1a 	bl	8000180 <memchr>
 802b54c:	b138      	cbz	r0, 802b55e <_vfiprintf_r+0x17a>
 802b54e:	9b04      	ldr	r3, [sp, #16]
 802b550:	eba0 000a 	sub.w	r0, r0, sl
 802b554:	2240      	movs	r2, #64	; 0x40
 802b556:	4082      	lsls	r2, r0
 802b558:	4313      	orrs	r3, r2
 802b55a:	3401      	adds	r4, #1
 802b55c:	9304      	str	r3, [sp, #16]
 802b55e:	f814 1b01 	ldrb.w	r1, [r4], #1
 802b562:	4829      	ldr	r0, [pc, #164]	; (802b608 <_vfiprintf_r+0x224>)
 802b564:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 802b568:	2206      	movs	r2, #6
 802b56a:	f7d4 fe09 	bl	8000180 <memchr>
 802b56e:	2800      	cmp	r0, #0
 802b570:	d03f      	beq.n	802b5f2 <_vfiprintf_r+0x20e>
 802b572:	4b26      	ldr	r3, [pc, #152]	; (802b60c <_vfiprintf_r+0x228>)
 802b574:	bb1b      	cbnz	r3, 802b5be <_vfiprintf_r+0x1da>
 802b576:	9b03      	ldr	r3, [sp, #12]
 802b578:	3307      	adds	r3, #7
 802b57a:	f023 0307 	bic.w	r3, r3, #7
 802b57e:	3308      	adds	r3, #8
 802b580:	9303      	str	r3, [sp, #12]
 802b582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802b584:	443b      	add	r3, r7
 802b586:	9309      	str	r3, [sp, #36]	; 0x24
 802b588:	e768      	b.n	802b45c <_vfiprintf_r+0x78>
 802b58a:	fb0c 3202 	mla	r2, ip, r2, r3
 802b58e:	460c      	mov	r4, r1
 802b590:	2001      	movs	r0, #1
 802b592:	e7a6      	b.n	802b4e2 <_vfiprintf_r+0xfe>
 802b594:	2300      	movs	r3, #0
 802b596:	3401      	adds	r4, #1
 802b598:	9305      	str	r3, [sp, #20]
 802b59a:	4619      	mov	r1, r3
 802b59c:	f04f 0c0a 	mov.w	ip, #10
 802b5a0:	4620      	mov	r0, r4
 802b5a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 802b5a6:	3a30      	subs	r2, #48	; 0x30
 802b5a8:	2a09      	cmp	r2, #9
 802b5aa:	d903      	bls.n	802b5b4 <_vfiprintf_r+0x1d0>
 802b5ac:	2b00      	cmp	r3, #0
 802b5ae:	d0c6      	beq.n	802b53e <_vfiprintf_r+0x15a>
 802b5b0:	9105      	str	r1, [sp, #20]
 802b5b2:	e7c4      	b.n	802b53e <_vfiprintf_r+0x15a>
 802b5b4:	fb0c 2101 	mla	r1, ip, r1, r2
 802b5b8:	4604      	mov	r4, r0
 802b5ba:	2301      	movs	r3, #1
 802b5bc:	e7f0      	b.n	802b5a0 <_vfiprintf_r+0x1bc>
 802b5be:	ab03      	add	r3, sp, #12
 802b5c0:	9300      	str	r3, [sp, #0]
 802b5c2:	462a      	mov	r2, r5
 802b5c4:	4b12      	ldr	r3, [pc, #72]	; (802b610 <_vfiprintf_r+0x22c>)
 802b5c6:	a904      	add	r1, sp, #16
 802b5c8:	4630      	mov	r0, r6
 802b5ca:	f7fd fb3b 	bl	8028c44 <_printf_float>
 802b5ce:	4607      	mov	r7, r0
 802b5d0:	1c78      	adds	r0, r7, #1
 802b5d2:	d1d6      	bne.n	802b582 <_vfiprintf_r+0x19e>
 802b5d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802b5d6:	07d9      	lsls	r1, r3, #31
 802b5d8:	d405      	bmi.n	802b5e6 <_vfiprintf_r+0x202>
 802b5da:	89ab      	ldrh	r3, [r5, #12]
 802b5dc:	059a      	lsls	r2, r3, #22
 802b5de:	d402      	bmi.n	802b5e6 <_vfiprintf_r+0x202>
 802b5e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802b5e2:	f7fe f9f7 	bl	80299d4 <__retarget_lock_release_recursive>
 802b5e6:	89ab      	ldrh	r3, [r5, #12]
 802b5e8:	065b      	lsls	r3, r3, #25
 802b5ea:	f53f af1d 	bmi.w	802b428 <_vfiprintf_r+0x44>
 802b5ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 802b5f0:	e71c      	b.n	802b42c <_vfiprintf_r+0x48>
 802b5f2:	ab03      	add	r3, sp, #12
 802b5f4:	9300      	str	r3, [sp, #0]
 802b5f6:	462a      	mov	r2, r5
 802b5f8:	4b05      	ldr	r3, [pc, #20]	; (802b610 <_vfiprintf_r+0x22c>)
 802b5fa:	a904      	add	r1, sp, #16
 802b5fc:	4630      	mov	r0, r6
 802b5fe:	f7fd fdc5 	bl	802918c <_printf_i>
 802b602:	e7e4      	b.n	802b5ce <_vfiprintf_r+0x1ea>
 802b604:	08034098 	.word	0x08034098
 802b608:	0803409e 	.word	0x0803409e
 802b60c:	08028c45 	.word	0x08028c45
 802b610:	0802b3bf 	.word	0x0802b3bf
 802b614:	08034094 	.word	0x08034094

0802b618 <_scanf_chars>:
 802b618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 802b61c:	4615      	mov	r5, r2
 802b61e:	688a      	ldr	r2, [r1, #8]
 802b620:	4680      	mov	r8, r0
 802b622:	460c      	mov	r4, r1
 802b624:	b932      	cbnz	r2, 802b634 <_scanf_chars+0x1c>
 802b626:	698a      	ldr	r2, [r1, #24]
 802b628:	2a00      	cmp	r2, #0
 802b62a:	bf0c      	ite	eq
 802b62c:	2201      	moveq	r2, #1
 802b62e:	f04f 32ff 	movne.w	r2, #4294967295
 802b632:	608a      	str	r2, [r1, #8]
 802b634:	6822      	ldr	r2, [r4, #0]
 802b636:	f8df 9090 	ldr.w	r9, [pc, #144]	; 802b6c8 <_scanf_chars+0xb0>
 802b63a:	06d1      	lsls	r1, r2, #27
 802b63c:	bf5f      	itttt	pl
 802b63e:	681a      	ldrpl	r2, [r3, #0]
 802b640:	1d11      	addpl	r1, r2, #4
 802b642:	6019      	strpl	r1, [r3, #0]
 802b644:	6816      	ldrpl	r6, [r2, #0]
 802b646:	2700      	movs	r7, #0
 802b648:	69a0      	ldr	r0, [r4, #24]
 802b64a:	b188      	cbz	r0, 802b670 <_scanf_chars+0x58>
 802b64c:	2801      	cmp	r0, #1
 802b64e:	d107      	bne.n	802b660 <_scanf_chars+0x48>
 802b650:	682a      	ldr	r2, [r5, #0]
 802b652:	7811      	ldrb	r1, [r2, #0]
 802b654:	6962      	ldr	r2, [r4, #20]
 802b656:	5c52      	ldrb	r2, [r2, r1]
 802b658:	b952      	cbnz	r2, 802b670 <_scanf_chars+0x58>
 802b65a:	2f00      	cmp	r7, #0
 802b65c:	d031      	beq.n	802b6c2 <_scanf_chars+0xaa>
 802b65e:	e022      	b.n	802b6a6 <_scanf_chars+0x8e>
 802b660:	2802      	cmp	r0, #2
 802b662:	d120      	bne.n	802b6a6 <_scanf_chars+0x8e>
 802b664:	682b      	ldr	r3, [r5, #0]
 802b666:	781b      	ldrb	r3, [r3, #0]
 802b668:	f819 3003 	ldrb.w	r3, [r9, r3]
 802b66c:	071b      	lsls	r3, r3, #28
 802b66e:	d41a      	bmi.n	802b6a6 <_scanf_chars+0x8e>
 802b670:	6823      	ldr	r3, [r4, #0]
 802b672:	06da      	lsls	r2, r3, #27
 802b674:	bf5e      	ittt	pl
 802b676:	682b      	ldrpl	r3, [r5, #0]
 802b678:	781b      	ldrbpl	r3, [r3, #0]
 802b67a:	f806 3b01 	strbpl.w	r3, [r6], #1
 802b67e:	682a      	ldr	r2, [r5, #0]
 802b680:	686b      	ldr	r3, [r5, #4]
 802b682:	3201      	adds	r2, #1
 802b684:	602a      	str	r2, [r5, #0]
 802b686:	68a2      	ldr	r2, [r4, #8]
 802b688:	3b01      	subs	r3, #1
 802b68a:	3a01      	subs	r2, #1
 802b68c:	606b      	str	r3, [r5, #4]
 802b68e:	3701      	adds	r7, #1
 802b690:	60a2      	str	r2, [r4, #8]
 802b692:	b142      	cbz	r2, 802b6a6 <_scanf_chars+0x8e>
 802b694:	2b00      	cmp	r3, #0
 802b696:	dcd7      	bgt.n	802b648 <_scanf_chars+0x30>
 802b698:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802b69c:	4629      	mov	r1, r5
 802b69e:	4640      	mov	r0, r8
 802b6a0:	4798      	blx	r3
 802b6a2:	2800      	cmp	r0, #0
 802b6a4:	d0d0      	beq.n	802b648 <_scanf_chars+0x30>
 802b6a6:	6823      	ldr	r3, [r4, #0]
 802b6a8:	f013 0310 	ands.w	r3, r3, #16
 802b6ac:	d105      	bne.n	802b6ba <_scanf_chars+0xa2>
 802b6ae:	68e2      	ldr	r2, [r4, #12]
 802b6b0:	3201      	adds	r2, #1
 802b6b2:	60e2      	str	r2, [r4, #12]
 802b6b4:	69a2      	ldr	r2, [r4, #24]
 802b6b6:	b102      	cbz	r2, 802b6ba <_scanf_chars+0xa2>
 802b6b8:	7033      	strb	r3, [r6, #0]
 802b6ba:	6923      	ldr	r3, [r4, #16]
 802b6bc:	443b      	add	r3, r7
 802b6be:	6123      	str	r3, [r4, #16]
 802b6c0:	2000      	movs	r0, #0
 802b6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802b6c6:	bf00      	nop
 802b6c8:	080340cb 	.word	0x080340cb

0802b6cc <_scanf_i>:
 802b6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802b6d0:	4698      	mov	r8, r3
 802b6d2:	4b74      	ldr	r3, [pc, #464]	; (802b8a4 <_scanf_i+0x1d8>)
 802b6d4:	460c      	mov	r4, r1
 802b6d6:	4682      	mov	sl, r0
 802b6d8:	4616      	mov	r6, r2
 802b6da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 802b6de:	b087      	sub	sp, #28
 802b6e0:	ab03      	add	r3, sp, #12
 802b6e2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 802b6e6:	4b70      	ldr	r3, [pc, #448]	; (802b8a8 <_scanf_i+0x1dc>)
 802b6e8:	69a1      	ldr	r1, [r4, #24]
 802b6ea:	4a70      	ldr	r2, [pc, #448]	; (802b8ac <_scanf_i+0x1e0>)
 802b6ec:	2903      	cmp	r1, #3
 802b6ee:	bf18      	it	ne
 802b6f0:	461a      	movne	r2, r3
 802b6f2:	68a3      	ldr	r3, [r4, #8]
 802b6f4:	9201      	str	r2, [sp, #4]
 802b6f6:	1e5a      	subs	r2, r3, #1
 802b6f8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 802b6fc:	bf88      	it	hi
 802b6fe:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 802b702:	4627      	mov	r7, r4
 802b704:	bf82      	ittt	hi
 802b706:	eb03 0905 	addhi.w	r9, r3, r5
 802b70a:	f240 135d 	movwhi	r3, #349	; 0x15d
 802b70e:	60a3      	strhi	r3, [r4, #8]
 802b710:	f857 3b1c 	ldr.w	r3, [r7], #28
 802b714:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 802b718:	bf98      	it	ls
 802b71a:	f04f 0900 	movls.w	r9, #0
 802b71e:	6023      	str	r3, [r4, #0]
 802b720:	463d      	mov	r5, r7
 802b722:	f04f 0b00 	mov.w	fp, #0
 802b726:	6831      	ldr	r1, [r6, #0]
 802b728:	ab03      	add	r3, sp, #12
 802b72a:	7809      	ldrb	r1, [r1, #0]
 802b72c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 802b730:	2202      	movs	r2, #2
 802b732:	f7d4 fd25 	bl	8000180 <memchr>
 802b736:	b328      	cbz	r0, 802b784 <_scanf_i+0xb8>
 802b738:	f1bb 0f01 	cmp.w	fp, #1
 802b73c:	d159      	bne.n	802b7f2 <_scanf_i+0x126>
 802b73e:	6862      	ldr	r2, [r4, #4]
 802b740:	b92a      	cbnz	r2, 802b74e <_scanf_i+0x82>
 802b742:	6822      	ldr	r2, [r4, #0]
 802b744:	2308      	movs	r3, #8
 802b746:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802b74a:	6063      	str	r3, [r4, #4]
 802b74c:	6022      	str	r2, [r4, #0]
 802b74e:	6822      	ldr	r2, [r4, #0]
 802b750:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 802b754:	6022      	str	r2, [r4, #0]
 802b756:	68a2      	ldr	r2, [r4, #8]
 802b758:	1e51      	subs	r1, r2, #1
 802b75a:	60a1      	str	r1, [r4, #8]
 802b75c:	b192      	cbz	r2, 802b784 <_scanf_i+0xb8>
 802b75e:	6832      	ldr	r2, [r6, #0]
 802b760:	1c51      	adds	r1, r2, #1
 802b762:	6031      	str	r1, [r6, #0]
 802b764:	7812      	ldrb	r2, [r2, #0]
 802b766:	f805 2b01 	strb.w	r2, [r5], #1
 802b76a:	6872      	ldr	r2, [r6, #4]
 802b76c:	3a01      	subs	r2, #1
 802b76e:	2a00      	cmp	r2, #0
 802b770:	6072      	str	r2, [r6, #4]
 802b772:	dc07      	bgt.n	802b784 <_scanf_i+0xb8>
 802b774:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 802b778:	4631      	mov	r1, r6
 802b77a:	4650      	mov	r0, sl
 802b77c:	4790      	blx	r2
 802b77e:	2800      	cmp	r0, #0
 802b780:	f040 8085 	bne.w	802b88e <_scanf_i+0x1c2>
 802b784:	f10b 0b01 	add.w	fp, fp, #1
 802b788:	f1bb 0f03 	cmp.w	fp, #3
 802b78c:	d1cb      	bne.n	802b726 <_scanf_i+0x5a>
 802b78e:	6863      	ldr	r3, [r4, #4]
 802b790:	b90b      	cbnz	r3, 802b796 <_scanf_i+0xca>
 802b792:	230a      	movs	r3, #10
 802b794:	6063      	str	r3, [r4, #4]
 802b796:	6863      	ldr	r3, [r4, #4]
 802b798:	4945      	ldr	r1, [pc, #276]	; (802b8b0 <_scanf_i+0x1e4>)
 802b79a:	6960      	ldr	r0, [r4, #20]
 802b79c:	1ac9      	subs	r1, r1, r3
 802b79e:	f000 f999 	bl	802bad4 <__sccl>
 802b7a2:	f04f 0b00 	mov.w	fp, #0
 802b7a6:	68a3      	ldr	r3, [r4, #8]
 802b7a8:	6822      	ldr	r2, [r4, #0]
 802b7aa:	2b00      	cmp	r3, #0
 802b7ac:	d03d      	beq.n	802b82a <_scanf_i+0x15e>
 802b7ae:	6831      	ldr	r1, [r6, #0]
 802b7b0:	6960      	ldr	r0, [r4, #20]
 802b7b2:	f891 c000 	ldrb.w	ip, [r1]
 802b7b6:	f810 000c 	ldrb.w	r0, [r0, ip]
 802b7ba:	2800      	cmp	r0, #0
 802b7bc:	d035      	beq.n	802b82a <_scanf_i+0x15e>
 802b7be:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 802b7c2:	d124      	bne.n	802b80e <_scanf_i+0x142>
 802b7c4:	0510      	lsls	r0, r2, #20
 802b7c6:	d522      	bpl.n	802b80e <_scanf_i+0x142>
 802b7c8:	f10b 0b01 	add.w	fp, fp, #1
 802b7cc:	f1b9 0f00 	cmp.w	r9, #0
 802b7d0:	d003      	beq.n	802b7da <_scanf_i+0x10e>
 802b7d2:	3301      	adds	r3, #1
 802b7d4:	f109 39ff 	add.w	r9, r9, #4294967295
 802b7d8:	60a3      	str	r3, [r4, #8]
 802b7da:	6873      	ldr	r3, [r6, #4]
 802b7dc:	3b01      	subs	r3, #1
 802b7de:	2b00      	cmp	r3, #0
 802b7e0:	6073      	str	r3, [r6, #4]
 802b7e2:	dd1b      	ble.n	802b81c <_scanf_i+0x150>
 802b7e4:	6833      	ldr	r3, [r6, #0]
 802b7e6:	3301      	adds	r3, #1
 802b7e8:	6033      	str	r3, [r6, #0]
 802b7ea:	68a3      	ldr	r3, [r4, #8]
 802b7ec:	3b01      	subs	r3, #1
 802b7ee:	60a3      	str	r3, [r4, #8]
 802b7f0:	e7d9      	b.n	802b7a6 <_scanf_i+0xda>
 802b7f2:	f1bb 0f02 	cmp.w	fp, #2
 802b7f6:	d1ae      	bne.n	802b756 <_scanf_i+0x8a>
 802b7f8:	6822      	ldr	r2, [r4, #0]
 802b7fa:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 802b7fe:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 802b802:	d1bf      	bne.n	802b784 <_scanf_i+0xb8>
 802b804:	2310      	movs	r3, #16
 802b806:	6063      	str	r3, [r4, #4]
 802b808:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 802b80c:	e7a2      	b.n	802b754 <_scanf_i+0x88>
 802b80e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 802b812:	6022      	str	r2, [r4, #0]
 802b814:	780b      	ldrb	r3, [r1, #0]
 802b816:	f805 3b01 	strb.w	r3, [r5], #1
 802b81a:	e7de      	b.n	802b7da <_scanf_i+0x10e>
 802b81c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 802b820:	4631      	mov	r1, r6
 802b822:	4650      	mov	r0, sl
 802b824:	4798      	blx	r3
 802b826:	2800      	cmp	r0, #0
 802b828:	d0df      	beq.n	802b7ea <_scanf_i+0x11e>
 802b82a:	6823      	ldr	r3, [r4, #0]
 802b82c:	05d9      	lsls	r1, r3, #23
 802b82e:	d50d      	bpl.n	802b84c <_scanf_i+0x180>
 802b830:	42bd      	cmp	r5, r7
 802b832:	d909      	bls.n	802b848 <_scanf_i+0x17c>
 802b834:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 802b838:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 802b83c:	4632      	mov	r2, r6
 802b83e:	4650      	mov	r0, sl
 802b840:	4798      	blx	r3
 802b842:	f105 39ff 	add.w	r9, r5, #4294967295
 802b846:	464d      	mov	r5, r9
 802b848:	42bd      	cmp	r5, r7
 802b84a:	d028      	beq.n	802b89e <_scanf_i+0x1d2>
 802b84c:	6822      	ldr	r2, [r4, #0]
 802b84e:	f012 0210 	ands.w	r2, r2, #16
 802b852:	d113      	bne.n	802b87c <_scanf_i+0x1b0>
 802b854:	702a      	strb	r2, [r5, #0]
 802b856:	6863      	ldr	r3, [r4, #4]
 802b858:	9e01      	ldr	r6, [sp, #4]
 802b85a:	4639      	mov	r1, r7
 802b85c:	4650      	mov	r0, sl
 802b85e:	47b0      	blx	r6
 802b860:	f8d8 3000 	ldr.w	r3, [r8]
 802b864:	6821      	ldr	r1, [r4, #0]
 802b866:	1d1a      	adds	r2, r3, #4
 802b868:	f8c8 2000 	str.w	r2, [r8]
 802b86c:	f011 0f20 	tst.w	r1, #32
 802b870:	681b      	ldr	r3, [r3, #0]
 802b872:	d00f      	beq.n	802b894 <_scanf_i+0x1c8>
 802b874:	6018      	str	r0, [r3, #0]
 802b876:	68e3      	ldr	r3, [r4, #12]
 802b878:	3301      	adds	r3, #1
 802b87a:	60e3      	str	r3, [r4, #12]
 802b87c:	6923      	ldr	r3, [r4, #16]
 802b87e:	1bed      	subs	r5, r5, r7
 802b880:	445d      	add	r5, fp
 802b882:	442b      	add	r3, r5
 802b884:	6123      	str	r3, [r4, #16]
 802b886:	2000      	movs	r0, #0
 802b888:	b007      	add	sp, #28
 802b88a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802b88e:	f04f 0b00 	mov.w	fp, #0
 802b892:	e7ca      	b.n	802b82a <_scanf_i+0x15e>
 802b894:	07ca      	lsls	r2, r1, #31
 802b896:	bf4c      	ite	mi
 802b898:	8018      	strhmi	r0, [r3, #0]
 802b89a:	6018      	strpl	r0, [r3, #0]
 802b89c:	e7eb      	b.n	802b876 <_scanf_i+0x1aa>
 802b89e:	2001      	movs	r0, #1
 802b8a0:	e7f2      	b.n	802b888 <_scanf_i+0x1bc>
 802b8a2:	bf00      	nop
 802b8a4:	08032550 	.word	0x08032550
 802b8a8:	0802bf45 	.word	0x0802bf45
 802b8ac:	0802be5d 	.word	0x0802be5d
 802b8b0:	080340b5 	.word	0x080340b5

0802b8b4 <__sflush_r>:
 802b8b4:	898a      	ldrh	r2, [r1, #12]
 802b8b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802b8ba:	4605      	mov	r5, r0
 802b8bc:	0710      	lsls	r0, r2, #28
 802b8be:	460c      	mov	r4, r1
 802b8c0:	d458      	bmi.n	802b974 <__sflush_r+0xc0>
 802b8c2:	684b      	ldr	r3, [r1, #4]
 802b8c4:	2b00      	cmp	r3, #0
 802b8c6:	dc05      	bgt.n	802b8d4 <__sflush_r+0x20>
 802b8c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802b8ca:	2b00      	cmp	r3, #0
 802b8cc:	dc02      	bgt.n	802b8d4 <__sflush_r+0x20>
 802b8ce:	2000      	movs	r0, #0
 802b8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802b8d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b8d6:	2e00      	cmp	r6, #0
 802b8d8:	d0f9      	beq.n	802b8ce <__sflush_r+0x1a>
 802b8da:	2300      	movs	r3, #0
 802b8dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802b8e0:	682f      	ldr	r7, [r5, #0]
 802b8e2:	6a21      	ldr	r1, [r4, #32]
 802b8e4:	602b      	str	r3, [r5, #0]
 802b8e6:	d032      	beq.n	802b94e <__sflush_r+0x9a>
 802b8e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802b8ea:	89a3      	ldrh	r3, [r4, #12]
 802b8ec:	075a      	lsls	r2, r3, #29
 802b8ee:	d505      	bpl.n	802b8fc <__sflush_r+0x48>
 802b8f0:	6863      	ldr	r3, [r4, #4]
 802b8f2:	1ac0      	subs	r0, r0, r3
 802b8f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802b8f6:	b10b      	cbz	r3, 802b8fc <__sflush_r+0x48>
 802b8f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802b8fa:	1ac0      	subs	r0, r0, r3
 802b8fc:	2300      	movs	r3, #0
 802b8fe:	4602      	mov	r2, r0
 802b900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802b902:	6a21      	ldr	r1, [r4, #32]
 802b904:	4628      	mov	r0, r5
 802b906:	47b0      	blx	r6
 802b908:	1c43      	adds	r3, r0, #1
 802b90a:	89a3      	ldrh	r3, [r4, #12]
 802b90c:	d106      	bne.n	802b91c <__sflush_r+0x68>
 802b90e:	6829      	ldr	r1, [r5, #0]
 802b910:	291d      	cmp	r1, #29
 802b912:	d82b      	bhi.n	802b96c <__sflush_r+0xb8>
 802b914:	4a29      	ldr	r2, [pc, #164]	; (802b9bc <__sflush_r+0x108>)
 802b916:	410a      	asrs	r2, r1
 802b918:	07d6      	lsls	r6, r2, #31
 802b91a:	d427      	bmi.n	802b96c <__sflush_r+0xb8>
 802b91c:	2200      	movs	r2, #0
 802b91e:	6062      	str	r2, [r4, #4]
 802b920:	04d9      	lsls	r1, r3, #19
 802b922:	6922      	ldr	r2, [r4, #16]
 802b924:	6022      	str	r2, [r4, #0]
 802b926:	d504      	bpl.n	802b932 <__sflush_r+0x7e>
 802b928:	1c42      	adds	r2, r0, #1
 802b92a:	d101      	bne.n	802b930 <__sflush_r+0x7c>
 802b92c:	682b      	ldr	r3, [r5, #0]
 802b92e:	b903      	cbnz	r3, 802b932 <__sflush_r+0x7e>
 802b930:	6560      	str	r0, [r4, #84]	; 0x54
 802b932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802b934:	602f      	str	r7, [r5, #0]
 802b936:	2900      	cmp	r1, #0
 802b938:	d0c9      	beq.n	802b8ce <__sflush_r+0x1a>
 802b93a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802b93e:	4299      	cmp	r1, r3
 802b940:	d002      	beq.n	802b948 <__sflush_r+0x94>
 802b942:	4628      	mov	r0, r5
 802b944:	f7fe fed6 	bl	802a6f4 <_free_r>
 802b948:	2000      	movs	r0, #0
 802b94a:	6360      	str	r0, [r4, #52]	; 0x34
 802b94c:	e7c0      	b.n	802b8d0 <__sflush_r+0x1c>
 802b94e:	2301      	movs	r3, #1
 802b950:	4628      	mov	r0, r5
 802b952:	47b0      	blx	r6
 802b954:	1c41      	adds	r1, r0, #1
 802b956:	d1c8      	bne.n	802b8ea <__sflush_r+0x36>
 802b958:	682b      	ldr	r3, [r5, #0]
 802b95a:	2b00      	cmp	r3, #0
 802b95c:	d0c5      	beq.n	802b8ea <__sflush_r+0x36>
 802b95e:	2b1d      	cmp	r3, #29
 802b960:	d001      	beq.n	802b966 <__sflush_r+0xb2>
 802b962:	2b16      	cmp	r3, #22
 802b964:	d101      	bne.n	802b96a <__sflush_r+0xb6>
 802b966:	602f      	str	r7, [r5, #0]
 802b968:	e7b1      	b.n	802b8ce <__sflush_r+0x1a>
 802b96a:	89a3      	ldrh	r3, [r4, #12]
 802b96c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b970:	81a3      	strh	r3, [r4, #12]
 802b972:	e7ad      	b.n	802b8d0 <__sflush_r+0x1c>
 802b974:	690f      	ldr	r7, [r1, #16]
 802b976:	2f00      	cmp	r7, #0
 802b978:	d0a9      	beq.n	802b8ce <__sflush_r+0x1a>
 802b97a:	0793      	lsls	r3, r2, #30
 802b97c:	680e      	ldr	r6, [r1, #0]
 802b97e:	bf08      	it	eq
 802b980:	694b      	ldreq	r3, [r1, #20]
 802b982:	600f      	str	r7, [r1, #0]
 802b984:	bf18      	it	ne
 802b986:	2300      	movne	r3, #0
 802b988:	eba6 0807 	sub.w	r8, r6, r7
 802b98c:	608b      	str	r3, [r1, #8]
 802b98e:	f1b8 0f00 	cmp.w	r8, #0
 802b992:	dd9c      	ble.n	802b8ce <__sflush_r+0x1a>
 802b994:	6a21      	ldr	r1, [r4, #32]
 802b996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802b998:	4643      	mov	r3, r8
 802b99a:	463a      	mov	r2, r7
 802b99c:	4628      	mov	r0, r5
 802b99e:	47b0      	blx	r6
 802b9a0:	2800      	cmp	r0, #0
 802b9a2:	dc06      	bgt.n	802b9b2 <__sflush_r+0xfe>
 802b9a4:	89a3      	ldrh	r3, [r4, #12]
 802b9a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802b9aa:	81a3      	strh	r3, [r4, #12]
 802b9ac:	f04f 30ff 	mov.w	r0, #4294967295
 802b9b0:	e78e      	b.n	802b8d0 <__sflush_r+0x1c>
 802b9b2:	4407      	add	r7, r0
 802b9b4:	eba8 0800 	sub.w	r8, r8, r0
 802b9b8:	e7e9      	b.n	802b98e <__sflush_r+0xda>
 802b9ba:	bf00      	nop
 802b9bc:	dfbffffe 	.word	0xdfbffffe

0802b9c0 <_fflush_r>:
 802b9c0:	b538      	push	{r3, r4, r5, lr}
 802b9c2:	690b      	ldr	r3, [r1, #16]
 802b9c4:	4605      	mov	r5, r0
 802b9c6:	460c      	mov	r4, r1
 802b9c8:	b913      	cbnz	r3, 802b9d0 <_fflush_r+0x10>
 802b9ca:	2500      	movs	r5, #0
 802b9cc:	4628      	mov	r0, r5
 802b9ce:	bd38      	pop	{r3, r4, r5, pc}
 802b9d0:	b118      	cbz	r0, 802b9da <_fflush_r+0x1a>
 802b9d2:	6a03      	ldr	r3, [r0, #32]
 802b9d4:	b90b      	cbnz	r3, 802b9da <_fflush_r+0x1a>
 802b9d6:	f7fd fd87 	bl	80294e8 <__sinit>
 802b9da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802b9de:	2b00      	cmp	r3, #0
 802b9e0:	d0f3      	beq.n	802b9ca <_fflush_r+0xa>
 802b9e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 802b9e4:	07d0      	lsls	r0, r2, #31
 802b9e6:	d404      	bmi.n	802b9f2 <_fflush_r+0x32>
 802b9e8:	0599      	lsls	r1, r3, #22
 802b9ea:	d402      	bmi.n	802b9f2 <_fflush_r+0x32>
 802b9ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802b9ee:	f7fd fff0 	bl	80299d2 <__retarget_lock_acquire_recursive>
 802b9f2:	4628      	mov	r0, r5
 802b9f4:	4621      	mov	r1, r4
 802b9f6:	f7ff ff5d 	bl	802b8b4 <__sflush_r>
 802b9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802b9fc:	07da      	lsls	r2, r3, #31
 802b9fe:	4605      	mov	r5, r0
 802ba00:	d4e4      	bmi.n	802b9cc <_fflush_r+0xc>
 802ba02:	89a3      	ldrh	r3, [r4, #12]
 802ba04:	059b      	lsls	r3, r3, #22
 802ba06:	d4e1      	bmi.n	802b9cc <_fflush_r+0xc>
 802ba08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802ba0a:	f7fd ffe3 	bl	80299d4 <__retarget_lock_release_recursive>
 802ba0e:	e7dd      	b.n	802b9cc <_fflush_r+0xc>

0802ba10 <__swhatbuf_r>:
 802ba10:	b570      	push	{r4, r5, r6, lr}
 802ba12:	460c      	mov	r4, r1
 802ba14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802ba18:	2900      	cmp	r1, #0
 802ba1a:	b096      	sub	sp, #88	; 0x58
 802ba1c:	4615      	mov	r5, r2
 802ba1e:	461e      	mov	r6, r3
 802ba20:	da0d      	bge.n	802ba3e <__swhatbuf_r+0x2e>
 802ba22:	89a3      	ldrh	r3, [r4, #12]
 802ba24:	f013 0f80 	tst.w	r3, #128	; 0x80
 802ba28:	f04f 0100 	mov.w	r1, #0
 802ba2c:	bf0c      	ite	eq
 802ba2e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 802ba32:	2340      	movne	r3, #64	; 0x40
 802ba34:	2000      	movs	r0, #0
 802ba36:	6031      	str	r1, [r6, #0]
 802ba38:	602b      	str	r3, [r5, #0]
 802ba3a:	b016      	add	sp, #88	; 0x58
 802ba3c:	bd70      	pop	{r4, r5, r6, pc}
 802ba3e:	466a      	mov	r2, sp
 802ba40:	f000 f8ec 	bl	802bc1c <_fstat_r>
 802ba44:	2800      	cmp	r0, #0
 802ba46:	dbec      	blt.n	802ba22 <__swhatbuf_r+0x12>
 802ba48:	9901      	ldr	r1, [sp, #4]
 802ba4a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 802ba4e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 802ba52:	4259      	negs	r1, r3
 802ba54:	4159      	adcs	r1, r3
 802ba56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802ba5a:	e7eb      	b.n	802ba34 <__swhatbuf_r+0x24>

0802ba5c <__smakebuf_r>:
 802ba5c:	898b      	ldrh	r3, [r1, #12]
 802ba5e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802ba60:	079d      	lsls	r5, r3, #30
 802ba62:	4606      	mov	r6, r0
 802ba64:	460c      	mov	r4, r1
 802ba66:	d507      	bpl.n	802ba78 <__smakebuf_r+0x1c>
 802ba68:	f104 0347 	add.w	r3, r4, #71	; 0x47
 802ba6c:	6023      	str	r3, [r4, #0]
 802ba6e:	6123      	str	r3, [r4, #16]
 802ba70:	2301      	movs	r3, #1
 802ba72:	6163      	str	r3, [r4, #20]
 802ba74:	b002      	add	sp, #8
 802ba76:	bd70      	pop	{r4, r5, r6, pc}
 802ba78:	ab01      	add	r3, sp, #4
 802ba7a:	466a      	mov	r2, sp
 802ba7c:	f7ff ffc8 	bl	802ba10 <__swhatbuf_r>
 802ba80:	9900      	ldr	r1, [sp, #0]
 802ba82:	4605      	mov	r5, r0
 802ba84:	4630      	mov	r0, r6
 802ba86:	f7fe fea9 	bl	802a7dc <_malloc_r>
 802ba8a:	b948      	cbnz	r0, 802baa0 <__smakebuf_r+0x44>
 802ba8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802ba90:	059a      	lsls	r2, r3, #22
 802ba92:	d4ef      	bmi.n	802ba74 <__smakebuf_r+0x18>
 802ba94:	f023 0303 	bic.w	r3, r3, #3
 802ba98:	f043 0302 	orr.w	r3, r3, #2
 802ba9c:	81a3      	strh	r3, [r4, #12]
 802ba9e:	e7e3      	b.n	802ba68 <__smakebuf_r+0xc>
 802baa0:	89a3      	ldrh	r3, [r4, #12]
 802baa2:	6020      	str	r0, [r4, #0]
 802baa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802baa8:	81a3      	strh	r3, [r4, #12]
 802baaa:	9b00      	ldr	r3, [sp, #0]
 802baac:	6163      	str	r3, [r4, #20]
 802baae:	9b01      	ldr	r3, [sp, #4]
 802bab0:	6120      	str	r0, [r4, #16]
 802bab2:	b15b      	cbz	r3, 802bacc <__smakebuf_r+0x70>
 802bab4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802bab8:	4630      	mov	r0, r6
 802baba:	f000 f8c1 	bl	802bc40 <_isatty_r>
 802babe:	b128      	cbz	r0, 802bacc <__smakebuf_r+0x70>
 802bac0:	89a3      	ldrh	r3, [r4, #12]
 802bac2:	f023 0303 	bic.w	r3, r3, #3
 802bac6:	f043 0301 	orr.w	r3, r3, #1
 802baca:	81a3      	strh	r3, [r4, #12]
 802bacc:	89a3      	ldrh	r3, [r4, #12]
 802bace:	431d      	orrs	r5, r3
 802bad0:	81a5      	strh	r5, [r4, #12]
 802bad2:	e7cf      	b.n	802ba74 <__smakebuf_r+0x18>

0802bad4 <__sccl>:
 802bad4:	b570      	push	{r4, r5, r6, lr}
 802bad6:	780b      	ldrb	r3, [r1, #0]
 802bad8:	4604      	mov	r4, r0
 802bada:	2b5e      	cmp	r3, #94	; 0x5e
 802badc:	bf0b      	itete	eq
 802bade:	784b      	ldrbeq	r3, [r1, #1]
 802bae0:	1c4a      	addne	r2, r1, #1
 802bae2:	1c8a      	addeq	r2, r1, #2
 802bae4:	2100      	movne	r1, #0
 802bae6:	bf08      	it	eq
 802bae8:	2101      	moveq	r1, #1
 802baea:	3801      	subs	r0, #1
 802baec:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 802baf0:	f800 1f01 	strb.w	r1, [r0, #1]!
 802baf4:	42a8      	cmp	r0, r5
 802baf6:	d1fb      	bne.n	802baf0 <__sccl+0x1c>
 802baf8:	b90b      	cbnz	r3, 802bafe <__sccl+0x2a>
 802bafa:	1e50      	subs	r0, r2, #1
 802bafc:	bd70      	pop	{r4, r5, r6, pc}
 802bafe:	f081 0101 	eor.w	r1, r1, #1
 802bb02:	54e1      	strb	r1, [r4, r3]
 802bb04:	4610      	mov	r0, r2
 802bb06:	4602      	mov	r2, r0
 802bb08:	f812 5b01 	ldrb.w	r5, [r2], #1
 802bb0c:	2d2d      	cmp	r5, #45	; 0x2d
 802bb0e:	d005      	beq.n	802bb1c <__sccl+0x48>
 802bb10:	2d5d      	cmp	r5, #93	; 0x5d
 802bb12:	d016      	beq.n	802bb42 <__sccl+0x6e>
 802bb14:	2d00      	cmp	r5, #0
 802bb16:	d0f1      	beq.n	802bafc <__sccl+0x28>
 802bb18:	462b      	mov	r3, r5
 802bb1a:	e7f2      	b.n	802bb02 <__sccl+0x2e>
 802bb1c:	7846      	ldrb	r6, [r0, #1]
 802bb1e:	2e5d      	cmp	r6, #93	; 0x5d
 802bb20:	d0fa      	beq.n	802bb18 <__sccl+0x44>
 802bb22:	42b3      	cmp	r3, r6
 802bb24:	dcf8      	bgt.n	802bb18 <__sccl+0x44>
 802bb26:	3002      	adds	r0, #2
 802bb28:	461a      	mov	r2, r3
 802bb2a:	3201      	adds	r2, #1
 802bb2c:	4296      	cmp	r6, r2
 802bb2e:	54a1      	strb	r1, [r4, r2]
 802bb30:	dcfb      	bgt.n	802bb2a <__sccl+0x56>
 802bb32:	1af2      	subs	r2, r6, r3
 802bb34:	3a01      	subs	r2, #1
 802bb36:	1c5d      	adds	r5, r3, #1
 802bb38:	42b3      	cmp	r3, r6
 802bb3a:	bfa8      	it	ge
 802bb3c:	2200      	movge	r2, #0
 802bb3e:	18ab      	adds	r3, r5, r2
 802bb40:	e7e1      	b.n	802bb06 <__sccl+0x32>
 802bb42:	4610      	mov	r0, r2
 802bb44:	e7da      	b.n	802bafc <__sccl+0x28>

0802bb46 <__submore>:
 802bb46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bb4a:	460c      	mov	r4, r1
 802bb4c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 802bb4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802bb52:	4299      	cmp	r1, r3
 802bb54:	d11d      	bne.n	802bb92 <__submore+0x4c>
 802bb56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 802bb5a:	f7fe fe3f 	bl	802a7dc <_malloc_r>
 802bb5e:	b918      	cbnz	r0, 802bb68 <__submore+0x22>
 802bb60:	f04f 30ff 	mov.w	r0, #4294967295
 802bb64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bb68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802bb6c:	63a3      	str	r3, [r4, #56]	; 0x38
 802bb6e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 802bb72:	6360      	str	r0, [r4, #52]	; 0x34
 802bb74:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 802bb78:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 802bb7c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 802bb80:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 802bb84:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 802bb88:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 802bb8c:	6020      	str	r0, [r4, #0]
 802bb8e:	2000      	movs	r0, #0
 802bb90:	e7e8      	b.n	802bb64 <__submore+0x1e>
 802bb92:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 802bb94:	0077      	lsls	r7, r6, #1
 802bb96:	463a      	mov	r2, r7
 802bb98:	f000 f8ae 	bl	802bcf8 <_realloc_r>
 802bb9c:	4605      	mov	r5, r0
 802bb9e:	2800      	cmp	r0, #0
 802bba0:	d0de      	beq.n	802bb60 <__submore+0x1a>
 802bba2:	eb00 0806 	add.w	r8, r0, r6
 802bba6:	4601      	mov	r1, r0
 802bba8:	4632      	mov	r2, r6
 802bbaa:	4640      	mov	r0, r8
 802bbac:	f7fd ff13 	bl	80299d6 <memcpy>
 802bbb0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802bbb4:	f8c4 8000 	str.w	r8, [r4]
 802bbb8:	e7e9      	b.n	802bb8e <__submore+0x48>

0802bbba <_raise_r>:
 802bbba:	291f      	cmp	r1, #31
 802bbbc:	b538      	push	{r3, r4, r5, lr}
 802bbbe:	4604      	mov	r4, r0
 802bbc0:	460d      	mov	r5, r1
 802bbc2:	d904      	bls.n	802bbce <_raise_r+0x14>
 802bbc4:	2316      	movs	r3, #22
 802bbc6:	6003      	str	r3, [r0, #0]
 802bbc8:	f04f 30ff 	mov.w	r0, #4294967295
 802bbcc:	bd38      	pop	{r3, r4, r5, pc}
 802bbce:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 802bbd0:	b112      	cbz	r2, 802bbd8 <_raise_r+0x1e>
 802bbd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802bbd6:	b94b      	cbnz	r3, 802bbec <_raise_r+0x32>
 802bbd8:	4620      	mov	r0, r4
 802bbda:	f000 f853 	bl	802bc84 <_getpid_r>
 802bbde:	462a      	mov	r2, r5
 802bbe0:	4601      	mov	r1, r0
 802bbe2:	4620      	mov	r0, r4
 802bbe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802bbe8:	f000 b83a 	b.w	802bc60 <_kill_r>
 802bbec:	2b01      	cmp	r3, #1
 802bbee:	d00a      	beq.n	802bc06 <_raise_r+0x4c>
 802bbf0:	1c59      	adds	r1, r3, #1
 802bbf2:	d103      	bne.n	802bbfc <_raise_r+0x42>
 802bbf4:	2316      	movs	r3, #22
 802bbf6:	6003      	str	r3, [r0, #0]
 802bbf8:	2001      	movs	r0, #1
 802bbfa:	e7e7      	b.n	802bbcc <_raise_r+0x12>
 802bbfc:	2400      	movs	r4, #0
 802bbfe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802bc02:	4628      	mov	r0, r5
 802bc04:	4798      	blx	r3
 802bc06:	2000      	movs	r0, #0
 802bc08:	e7e0      	b.n	802bbcc <_raise_r+0x12>
	...

0802bc0c <raise>:
 802bc0c:	4b02      	ldr	r3, [pc, #8]	; (802bc18 <raise+0xc>)
 802bc0e:	4601      	mov	r1, r0
 802bc10:	6818      	ldr	r0, [r3, #0]
 802bc12:	f7ff bfd2 	b.w	802bbba <_raise_r>
 802bc16:	bf00      	nop
 802bc18:	20000124 	.word	0x20000124

0802bc1c <_fstat_r>:
 802bc1c:	b538      	push	{r3, r4, r5, lr}
 802bc1e:	4d07      	ldr	r5, [pc, #28]	; (802bc3c <_fstat_r+0x20>)
 802bc20:	2300      	movs	r3, #0
 802bc22:	4604      	mov	r4, r0
 802bc24:	4608      	mov	r0, r1
 802bc26:	4611      	mov	r1, r2
 802bc28:	602b      	str	r3, [r5, #0]
 802bc2a:	f7d7 fc6d 	bl	8003508 <_fstat>
 802bc2e:	1c43      	adds	r3, r0, #1
 802bc30:	d102      	bne.n	802bc38 <_fstat_r+0x1c>
 802bc32:	682b      	ldr	r3, [r5, #0]
 802bc34:	b103      	cbz	r3, 802bc38 <_fstat_r+0x1c>
 802bc36:	6023      	str	r3, [r4, #0]
 802bc38:	bd38      	pop	{r3, r4, r5, pc}
 802bc3a:	bf00      	nop
 802bc3c:	200080f4 	.word	0x200080f4

0802bc40 <_isatty_r>:
 802bc40:	b538      	push	{r3, r4, r5, lr}
 802bc42:	4d06      	ldr	r5, [pc, #24]	; (802bc5c <_isatty_r+0x1c>)
 802bc44:	2300      	movs	r3, #0
 802bc46:	4604      	mov	r4, r0
 802bc48:	4608      	mov	r0, r1
 802bc4a:	602b      	str	r3, [r5, #0]
 802bc4c:	f7d7 fc6c 	bl	8003528 <_isatty>
 802bc50:	1c43      	adds	r3, r0, #1
 802bc52:	d102      	bne.n	802bc5a <_isatty_r+0x1a>
 802bc54:	682b      	ldr	r3, [r5, #0]
 802bc56:	b103      	cbz	r3, 802bc5a <_isatty_r+0x1a>
 802bc58:	6023      	str	r3, [r4, #0]
 802bc5a:	bd38      	pop	{r3, r4, r5, pc}
 802bc5c:	200080f4 	.word	0x200080f4

0802bc60 <_kill_r>:
 802bc60:	b538      	push	{r3, r4, r5, lr}
 802bc62:	4d07      	ldr	r5, [pc, #28]	; (802bc80 <_kill_r+0x20>)
 802bc64:	2300      	movs	r3, #0
 802bc66:	4604      	mov	r4, r0
 802bc68:	4608      	mov	r0, r1
 802bc6a:	4611      	mov	r1, r2
 802bc6c:	602b      	str	r3, [r5, #0]
 802bc6e:	f7d7 fc08 	bl	8003482 <_kill>
 802bc72:	1c43      	adds	r3, r0, #1
 802bc74:	d102      	bne.n	802bc7c <_kill_r+0x1c>
 802bc76:	682b      	ldr	r3, [r5, #0]
 802bc78:	b103      	cbz	r3, 802bc7c <_kill_r+0x1c>
 802bc7a:	6023      	str	r3, [r4, #0]
 802bc7c:	bd38      	pop	{r3, r4, r5, pc}
 802bc7e:	bf00      	nop
 802bc80:	200080f4 	.word	0x200080f4

0802bc84 <_getpid_r>:
 802bc84:	f7d7 bbf5 	b.w	8003472 <_getpid>

0802bc88 <_sbrk_r>:
 802bc88:	b538      	push	{r3, r4, r5, lr}
 802bc8a:	4d06      	ldr	r5, [pc, #24]	; (802bca4 <_sbrk_r+0x1c>)
 802bc8c:	2300      	movs	r3, #0
 802bc8e:	4604      	mov	r4, r0
 802bc90:	4608      	mov	r0, r1
 802bc92:	602b      	str	r3, [r5, #0]
 802bc94:	f7d7 fc60 	bl	8003558 <_sbrk>
 802bc98:	1c43      	adds	r3, r0, #1
 802bc9a:	d102      	bne.n	802bca2 <_sbrk_r+0x1a>
 802bc9c:	682b      	ldr	r3, [r5, #0]
 802bc9e:	b103      	cbz	r3, 802bca2 <_sbrk_r+0x1a>
 802bca0:	6023      	str	r3, [r4, #0]
 802bca2:	bd38      	pop	{r3, r4, r5, pc}
 802bca4:	200080f4 	.word	0x200080f4

0802bca8 <_calloc_r>:
 802bca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802bcaa:	fba1 2402 	umull	r2, r4, r1, r2
 802bcae:	b94c      	cbnz	r4, 802bcc4 <_calloc_r+0x1c>
 802bcb0:	4611      	mov	r1, r2
 802bcb2:	9201      	str	r2, [sp, #4]
 802bcb4:	f7fe fd92 	bl	802a7dc <_malloc_r>
 802bcb8:	9a01      	ldr	r2, [sp, #4]
 802bcba:	4605      	mov	r5, r0
 802bcbc:	b930      	cbnz	r0, 802bccc <_calloc_r+0x24>
 802bcbe:	4628      	mov	r0, r5
 802bcc0:	b003      	add	sp, #12
 802bcc2:	bd30      	pop	{r4, r5, pc}
 802bcc4:	220c      	movs	r2, #12
 802bcc6:	6002      	str	r2, [r0, #0]
 802bcc8:	2500      	movs	r5, #0
 802bcca:	e7f8      	b.n	802bcbe <_calloc_r+0x16>
 802bccc:	4621      	mov	r1, r4
 802bcce:	f7fd fdf1 	bl	80298b4 <memset>
 802bcd2:	e7f4      	b.n	802bcbe <_calloc_r+0x16>

0802bcd4 <__ascii_mbtowc>:
 802bcd4:	b082      	sub	sp, #8
 802bcd6:	b901      	cbnz	r1, 802bcda <__ascii_mbtowc+0x6>
 802bcd8:	a901      	add	r1, sp, #4
 802bcda:	b142      	cbz	r2, 802bcee <__ascii_mbtowc+0x1a>
 802bcdc:	b14b      	cbz	r3, 802bcf2 <__ascii_mbtowc+0x1e>
 802bcde:	7813      	ldrb	r3, [r2, #0]
 802bce0:	600b      	str	r3, [r1, #0]
 802bce2:	7812      	ldrb	r2, [r2, #0]
 802bce4:	1e10      	subs	r0, r2, #0
 802bce6:	bf18      	it	ne
 802bce8:	2001      	movne	r0, #1
 802bcea:	b002      	add	sp, #8
 802bcec:	4770      	bx	lr
 802bcee:	4610      	mov	r0, r2
 802bcf0:	e7fb      	b.n	802bcea <__ascii_mbtowc+0x16>
 802bcf2:	f06f 0001 	mvn.w	r0, #1
 802bcf6:	e7f8      	b.n	802bcea <__ascii_mbtowc+0x16>

0802bcf8 <_realloc_r>:
 802bcf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802bcfc:	4680      	mov	r8, r0
 802bcfe:	4614      	mov	r4, r2
 802bd00:	460e      	mov	r6, r1
 802bd02:	b921      	cbnz	r1, 802bd0e <_realloc_r+0x16>
 802bd04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802bd08:	4611      	mov	r1, r2
 802bd0a:	f7fe bd67 	b.w	802a7dc <_malloc_r>
 802bd0e:	b92a      	cbnz	r2, 802bd1c <_realloc_r+0x24>
 802bd10:	f7fe fcf0 	bl	802a6f4 <_free_r>
 802bd14:	4625      	mov	r5, r4
 802bd16:	4628      	mov	r0, r5
 802bd18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802bd1c:	f000 f921 	bl	802bf62 <_malloc_usable_size_r>
 802bd20:	4284      	cmp	r4, r0
 802bd22:	4607      	mov	r7, r0
 802bd24:	d802      	bhi.n	802bd2c <_realloc_r+0x34>
 802bd26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802bd2a:	d812      	bhi.n	802bd52 <_realloc_r+0x5a>
 802bd2c:	4621      	mov	r1, r4
 802bd2e:	4640      	mov	r0, r8
 802bd30:	f7fe fd54 	bl	802a7dc <_malloc_r>
 802bd34:	4605      	mov	r5, r0
 802bd36:	2800      	cmp	r0, #0
 802bd38:	d0ed      	beq.n	802bd16 <_realloc_r+0x1e>
 802bd3a:	42bc      	cmp	r4, r7
 802bd3c:	4622      	mov	r2, r4
 802bd3e:	4631      	mov	r1, r6
 802bd40:	bf28      	it	cs
 802bd42:	463a      	movcs	r2, r7
 802bd44:	f7fd fe47 	bl	80299d6 <memcpy>
 802bd48:	4631      	mov	r1, r6
 802bd4a:	4640      	mov	r0, r8
 802bd4c:	f7fe fcd2 	bl	802a6f4 <_free_r>
 802bd50:	e7e1      	b.n	802bd16 <_realloc_r+0x1e>
 802bd52:	4635      	mov	r5, r6
 802bd54:	e7df      	b.n	802bd16 <_realloc_r+0x1e>
	...

0802bd58 <_strtol_l.constprop.0>:
 802bd58:	2b01      	cmp	r3, #1
 802bd5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 802bd5e:	d001      	beq.n	802bd64 <_strtol_l.constprop.0+0xc>
 802bd60:	2b24      	cmp	r3, #36	; 0x24
 802bd62:	d906      	bls.n	802bd72 <_strtol_l.constprop.0+0x1a>
 802bd64:	f7fd fe0a 	bl	802997c <__errno>
 802bd68:	2316      	movs	r3, #22
 802bd6a:	6003      	str	r3, [r0, #0]
 802bd6c:	2000      	movs	r0, #0
 802bd6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802bd72:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 802be58 <_strtol_l.constprop.0+0x100>
 802bd76:	460d      	mov	r5, r1
 802bd78:	462e      	mov	r6, r5
 802bd7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bd7e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 802bd82:	f017 0708 	ands.w	r7, r7, #8
 802bd86:	d1f7      	bne.n	802bd78 <_strtol_l.constprop.0+0x20>
 802bd88:	2c2d      	cmp	r4, #45	; 0x2d
 802bd8a:	d132      	bne.n	802bdf2 <_strtol_l.constprop.0+0x9a>
 802bd8c:	782c      	ldrb	r4, [r5, #0]
 802bd8e:	2701      	movs	r7, #1
 802bd90:	1cb5      	adds	r5, r6, #2
 802bd92:	2b00      	cmp	r3, #0
 802bd94:	d05b      	beq.n	802be4e <_strtol_l.constprop.0+0xf6>
 802bd96:	2b10      	cmp	r3, #16
 802bd98:	d109      	bne.n	802bdae <_strtol_l.constprop.0+0x56>
 802bd9a:	2c30      	cmp	r4, #48	; 0x30
 802bd9c:	d107      	bne.n	802bdae <_strtol_l.constprop.0+0x56>
 802bd9e:	782c      	ldrb	r4, [r5, #0]
 802bda0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 802bda4:	2c58      	cmp	r4, #88	; 0x58
 802bda6:	d14d      	bne.n	802be44 <_strtol_l.constprop.0+0xec>
 802bda8:	786c      	ldrb	r4, [r5, #1]
 802bdaa:	2310      	movs	r3, #16
 802bdac:	3502      	adds	r5, #2
 802bdae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 802bdb2:	f108 38ff 	add.w	r8, r8, #4294967295
 802bdb6:	f04f 0e00 	mov.w	lr, #0
 802bdba:	fbb8 f9f3 	udiv	r9, r8, r3
 802bdbe:	4676      	mov	r6, lr
 802bdc0:	fb03 8a19 	mls	sl, r3, r9, r8
 802bdc4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802bdc8:	f1bc 0f09 	cmp.w	ip, #9
 802bdcc:	d816      	bhi.n	802bdfc <_strtol_l.constprop.0+0xa4>
 802bdce:	4664      	mov	r4, ip
 802bdd0:	42a3      	cmp	r3, r4
 802bdd2:	dd24      	ble.n	802be1e <_strtol_l.constprop.0+0xc6>
 802bdd4:	f1be 3fff 	cmp.w	lr, #4294967295
 802bdd8:	d008      	beq.n	802bdec <_strtol_l.constprop.0+0x94>
 802bdda:	45b1      	cmp	r9, r6
 802bddc:	d31c      	bcc.n	802be18 <_strtol_l.constprop.0+0xc0>
 802bdde:	d101      	bne.n	802bde4 <_strtol_l.constprop.0+0x8c>
 802bde0:	45a2      	cmp	sl, r4
 802bde2:	db19      	blt.n	802be18 <_strtol_l.constprop.0+0xc0>
 802bde4:	fb06 4603 	mla	r6, r6, r3, r4
 802bde8:	f04f 0e01 	mov.w	lr, #1
 802bdec:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bdf0:	e7e8      	b.n	802bdc4 <_strtol_l.constprop.0+0x6c>
 802bdf2:	2c2b      	cmp	r4, #43	; 0x2b
 802bdf4:	bf04      	itt	eq
 802bdf6:	782c      	ldrbeq	r4, [r5, #0]
 802bdf8:	1cb5      	addeq	r5, r6, #2
 802bdfa:	e7ca      	b.n	802bd92 <_strtol_l.constprop.0+0x3a>
 802bdfc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802be00:	f1bc 0f19 	cmp.w	ip, #25
 802be04:	d801      	bhi.n	802be0a <_strtol_l.constprop.0+0xb2>
 802be06:	3c37      	subs	r4, #55	; 0x37
 802be08:	e7e2      	b.n	802bdd0 <_strtol_l.constprop.0+0x78>
 802be0a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802be0e:	f1bc 0f19 	cmp.w	ip, #25
 802be12:	d804      	bhi.n	802be1e <_strtol_l.constprop.0+0xc6>
 802be14:	3c57      	subs	r4, #87	; 0x57
 802be16:	e7db      	b.n	802bdd0 <_strtol_l.constprop.0+0x78>
 802be18:	f04f 3eff 	mov.w	lr, #4294967295
 802be1c:	e7e6      	b.n	802bdec <_strtol_l.constprop.0+0x94>
 802be1e:	f1be 3fff 	cmp.w	lr, #4294967295
 802be22:	d105      	bne.n	802be30 <_strtol_l.constprop.0+0xd8>
 802be24:	2322      	movs	r3, #34	; 0x22
 802be26:	6003      	str	r3, [r0, #0]
 802be28:	4646      	mov	r6, r8
 802be2a:	b942      	cbnz	r2, 802be3e <_strtol_l.constprop.0+0xe6>
 802be2c:	4630      	mov	r0, r6
 802be2e:	e79e      	b.n	802bd6e <_strtol_l.constprop.0+0x16>
 802be30:	b107      	cbz	r7, 802be34 <_strtol_l.constprop.0+0xdc>
 802be32:	4276      	negs	r6, r6
 802be34:	2a00      	cmp	r2, #0
 802be36:	d0f9      	beq.n	802be2c <_strtol_l.constprop.0+0xd4>
 802be38:	f1be 0f00 	cmp.w	lr, #0
 802be3c:	d000      	beq.n	802be40 <_strtol_l.constprop.0+0xe8>
 802be3e:	1e69      	subs	r1, r5, #1
 802be40:	6011      	str	r1, [r2, #0]
 802be42:	e7f3      	b.n	802be2c <_strtol_l.constprop.0+0xd4>
 802be44:	2430      	movs	r4, #48	; 0x30
 802be46:	2b00      	cmp	r3, #0
 802be48:	d1b1      	bne.n	802bdae <_strtol_l.constprop.0+0x56>
 802be4a:	2308      	movs	r3, #8
 802be4c:	e7af      	b.n	802bdae <_strtol_l.constprop.0+0x56>
 802be4e:	2c30      	cmp	r4, #48	; 0x30
 802be50:	d0a5      	beq.n	802bd9e <_strtol_l.constprop.0+0x46>
 802be52:	230a      	movs	r3, #10
 802be54:	e7ab      	b.n	802bdae <_strtol_l.constprop.0+0x56>
 802be56:	bf00      	nop
 802be58:	080340cb 	.word	0x080340cb

0802be5c <_strtol_r>:
 802be5c:	f7ff bf7c 	b.w	802bd58 <_strtol_l.constprop.0>

0802be60 <_strtoul_l.constprop.0>:
 802be60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802be64:	4f36      	ldr	r7, [pc, #216]	; (802bf40 <_strtoul_l.constprop.0+0xe0>)
 802be66:	4686      	mov	lr, r0
 802be68:	460d      	mov	r5, r1
 802be6a:	4628      	mov	r0, r5
 802be6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 802be70:	5d3e      	ldrb	r6, [r7, r4]
 802be72:	f016 0608 	ands.w	r6, r6, #8
 802be76:	d1f8      	bne.n	802be6a <_strtoul_l.constprop.0+0xa>
 802be78:	2c2d      	cmp	r4, #45	; 0x2d
 802be7a:	d130      	bne.n	802bede <_strtoul_l.constprop.0+0x7e>
 802be7c:	782c      	ldrb	r4, [r5, #0]
 802be7e:	2601      	movs	r6, #1
 802be80:	1c85      	adds	r5, r0, #2
 802be82:	2b00      	cmp	r3, #0
 802be84:	d057      	beq.n	802bf36 <_strtoul_l.constprop.0+0xd6>
 802be86:	2b10      	cmp	r3, #16
 802be88:	d109      	bne.n	802be9e <_strtoul_l.constprop.0+0x3e>
 802be8a:	2c30      	cmp	r4, #48	; 0x30
 802be8c:	d107      	bne.n	802be9e <_strtoul_l.constprop.0+0x3e>
 802be8e:	7828      	ldrb	r0, [r5, #0]
 802be90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 802be94:	2858      	cmp	r0, #88	; 0x58
 802be96:	d149      	bne.n	802bf2c <_strtoul_l.constprop.0+0xcc>
 802be98:	786c      	ldrb	r4, [r5, #1]
 802be9a:	2310      	movs	r3, #16
 802be9c:	3502      	adds	r5, #2
 802be9e:	f04f 38ff 	mov.w	r8, #4294967295
 802bea2:	2700      	movs	r7, #0
 802bea4:	fbb8 f8f3 	udiv	r8, r8, r3
 802bea8:	fb03 f908 	mul.w	r9, r3, r8
 802beac:	ea6f 0909 	mvn.w	r9, r9
 802beb0:	4638      	mov	r0, r7
 802beb2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 802beb6:	f1bc 0f09 	cmp.w	ip, #9
 802beba:	d815      	bhi.n	802bee8 <_strtoul_l.constprop.0+0x88>
 802bebc:	4664      	mov	r4, ip
 802bebe:	42a3      	cmp	r3, r4
 802bec0:	dd23      	ble.n	802bf0a <_strtoul_l.constprop.0+0xaa>
 802bec2:	f1b7 3fff 	cmp.w	r7, #4294967295
 802bec6:	d007      	beq.n	802bed8 <_strtoul_l.constprop.0+0x78>
 802bec8:	4580      	cmp	r8, r0
 802beca:	d31b      	bcc.n	802bf04 <_strtoul_l.constprop.0+0xa4>
 802becc:	d101      	bne.n	802bed2 <_strtoul_l.constprop.0+0x72>
 802bece:	45a1      	cmp	r9, r4
 802bed0:	db18      	blt.n	802bf04 <_strtoul_l.constprop.0+0xa4>
 802bed2:	fb00 4003 	mla	r0, r0, r3, r4
 802bed6:	2701      	movs	r7, #1
 802bed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 802bedc:	e7e9      	b.n	802beb2 <_strtoul_l.constprop.0+0x52>
 802bede:	2c2b      	cmp	r4, #43	; 0x2b
 802bee0:	bf04      	itt	eq
 802bee2:	782c      	ldrbeq	r4, [r5, #0]
 802bee4:	1c85      	addeq	r5, r0, #2
 802bee6:	e7cc      	b.n	802be82 <_strtoul_l.constprop.0+0x22>
 802bee8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 802beec:	f1bc 0f19 	cmp.w	ip, #25
 802bef0:	d801      	bhi.n	802bef6 <_strtoul_l.constprop.0+0x96>
 802bef2:	3c37      	subs	r4, #55	; 0x37
 802bef4:	e7e3      	b.n	802bebe <_strtoul_l.constprop.0+0x5e>
 802bef6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 802befa:	f1bc 0f19 	cmp.w	ip, #25
 802befe:	d804      	bhi.n	802bf0a <_strtoul_l.constprop.0+0xaa>
 802bf00:	3c57      	subs	r4, #87	; 0x57
 802bf02:	e7dc      	b.n	802bebe <_strtoul_l.constprop.0+0x5e>
 802bf04:	f04f 37ff 	mov.w	r7, #4294967295
 802bf08:	e7e6      	b.n	802bed8 <_strtoul_l.constprop.0+0x78>
 802bf0a:	1c7b      	adds	r3, r7, #1
 802bf0c:	d106      	bne.n	802bf1c <_strtoul_l.constprop.0+0xbc>
 802bf0e:	2322      	movs	r3, #34	; 0x22
 802bf10:	f8ce 3000 	str.w	r3, [lr]
 802bf14:	4638      	mov	r0, r7
 802bf16:	b932      	cbnz	r2, 802bf26 <_strtoul_l.constprop.0+0xc6>
 802bf18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 802bf1c:	b106      	cbz	r6, 802bf20 <_strtoul_l.constprop.0+0xc0>
 802bf1e:	4240      	negs	r0, r0
 802bf20:	2a00      	cmp	r2, #0
 802bf22:	d0f9      	beq.n	802bf18 <_strtoul_l.constprop.0+0xb8>
 802bf24:	b107      	cbz	r7, 802bf28 <_strtoul_l.constprop.0+0xc8>
 802bf26:	1e69      	subs	r1, r5, #1
 802bf28:	6011      	str	r1, [r2, #0]
 802bf2a:	e7f5      	b.n	802bf18 <_strtoul_l.constprop.0+0xb8>
 802bf2c:	2430      	movs	r4, #48	; 0x30
 802bf2e:	2b00      	cmp	r3, #0
 802bf30:	d1b5      	bne.n	802be9e <_strtoul_l.constprop.0+0x3e>
 802bf32:	2308      	movs	r3, #8
 802bf34:	e7b3      	b.n	802be9e <_strtoul_l.constprop.0+0x3e>
 802bf36:	2c30      	cmp	r4, #48	; 0x30
 802bf38:	d0a9      	beq.n	802be8e <_strtoul_l.constprop.0+0x2e>
 802bf3a:	230a      	movs	r3, #10
 802bf3c:	e7af      	b.n	802be9e <_strtoul_l.constprop.0+0x3e>
 802bf3e:	bf00      	nop
 802bf40:	080340cb 	.word	0x080340cb

0802bf44 <_strtoul_r>:
 802bf44:	f7ff bf8c 	b.w	802be60 <_strtoul_l.constprop.0>

0802bf48 <__ascii_wctomb>:
 802bf48:	b149      	cbz	r1, 802bf5e <__ascii_wctomb+0x16>
 802bf4a:	2aff      	cmp	r2, #255	; 0xff
 802bf4c:	bf85      	ittet	hi
 802bf4e:	238a      	movhi	r3, #138	; 0x8a
 802bf50:	6003      	strhi	r3, [r0, #0]
 802bf52:	700a      	strbls	r2, [r1, #0]
 802bf54:	f04f 30ff 	movhi.w	r0, #4294967295
 802bf58:	bf98      	it	ls
 802bf5a:	2001      	movls	r0, #1
 802bf5c:	4770      	bx	lr
 802bf5e:	4608      	mov	r0, r1
 802bf60:	4770      	bx	lr

0802bf62 <_malloc_usable_size_r>:
 802bf62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802bf66:	1f18      	subs	r0, r3, #4
 802bf68:	2b00      	cmp	r3, #0
 802bf6a:	bfbc      	itt	lt
 802bf6c:	580b      	ldrlt	r3, [r1, r0]
 802bf6e:	18c0      	addlt	r0, r0, r3
 802bf70:	4770      	bx	lr
	...

0802bf74 <pow>:
 802bf74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802bf76:	ed2d 8b02 	vpush	{d8}
 802bf7a:	eeb0 8a40 	vmov.f32	s16, s0
 802bf7e:	eef0 8a60 	vmov.f32	s17, s1
 802bf82:	ec55 4b11 	vmov	r4, r5, d1
 802bf86:	f000 f977 	bl	802c278 <__ieee754_pow>
 802bf8a:	4622      	mov	r2, r4
 802bf8c:	462b      	mov	r3, r5
 802bf8e:	4620      	mov	r0, r4
 802bf90:	4629      	mov	r1, r5
 802bf92:	ec57 6b10 	vmov	r6, r7, d0
 802bf96:	f7d4 fda1 	bl	8000adc <__aeabi_dcmpun>
 802bf9a:	2800      	cmp	r0, #0
 802bf9c:	d13b      	bne.n	802c016 <pow+0xa2>
 802bf9e:	ec51 0b18 	vmov	r0, r1, d8
 802bfa2:	2200      	movs	r2, #0
 802bfa4:	2300      	movs	r3, #0
 802bfa6:	f7d4 fd67 	bl	8000a78 <__aeabi_dcmpeq>
 802bfaa:	b1b8      	cbz	r0, 802bfdc <pow+0x68>
 802bfac:	2200      	movs	r2, #0
 802bfae:	2300      	movs	r3, #0
 802bfb0:	4620      	mov	r0, r4
 802bfb2:	4629      	mov	r1, r5
 802bfb4:	f7d4 fd60 	bl	8000a78 <__aeabi_dcmpeq>
 802bfb8:	2800      	cmp	r0, #0
 802bfba:	d146      	bne.n	802c04a <pow+0xd6>
 802bfbc:	ec45 4b10 	vmov	d0, r4, r5
 802bfc0:	f000 f874 	bl	802c0ac <finite>
 802bfc4:	b338      	cbz	r0, 802c016 <pow+0xa2>
 802bfc6:	2200      	movs	r2, #0
 802bfc8:	2300      	movs	r3, #0
 802bfca:	4620      	mov	r0, r4
 802bfcc:	4629      	mov	r1, r5
 802bfce:	f7d4 fd5d 	bl	8000a8c <__aeabi_dcmplt>
 802bfd2:	b300      	cbz	r0, 802c016 <pow+0xa2>
 802bfd4:	f7fd fcd2 	bl	802997c <__errno>
 802bfd8:	2322      	movs	r3, #34	; 0x22
 802bfda:	e01b      	b.n	802c014 <pow+0xa0>
 802bfdc:	ec47 6b10 	vmov	d0, r6, r7
 802bfe0:	f000 f864 	bl	802c0ac <finite>
 802bfe4:	b9e0      	cbnz	r0, 802c020 <pow+0xac>
 802bfe6:	eeb0 0a48 	vmov.f32	s0, s16
 802bfea:	eef0 0a68 	vmov.f32	s1, s17
 802bfee:	f000 f85d 	bl	802c0ac <finite>
 802bff2:	b1a8      	cbz	r0, 802c020 <pow+0xac>
 802bff4:	ec45 4b10 	vmov	d0, r4, r5
 802bff8:	f000 f858 	bl	802c0ac <finite>
 802bffc:	b180      	cbz	r0, 802c020 <pow+0xac>
 802bffe:	4632      	mov	r2, r6
 802c000:	463b      	mov	r3, r7
 802c002:	4630      	mov	r0, r6
 802c004:	4639      	mov	r1, r7
 802c006:	f7d4 fd69 	bl	8000adc <__aeabi_dcmpun>
 802c00a:	2800      	cmp	r0, #0
 802c00c:	d0e2      	beq.n	802bfd4 <pow+0x60>
 802c00e:	f7fd fcb5 	bl	802997c <__errno>
 802c012:	2321      	movs	r3, #33	; 0x21
 802c014:	6003      	str	r3, [r0, #0]
 802c016:	ecbd 8b02 	vpop	{d8}
 802c01a:	ec47 6b10 	vmov	d0, r6, r7
 802c01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802c020:	2200      	movs	r2, #0
 802c022:	2300      	movs	r3, #0
 802c024:	4630      	mov	r0, r6
 802c026:	4639      	mov	r1, r7
 802c028:	f7d4 fd26 	bl	8000a78 <__aeabi_dcmpeq>
 802c02c:	2800      	cmp	r0, #0
 802c02e:	d0f2      	beq.n	802c016 <pow+0xa2>
 802c030:	eeb0 0a48 	vmov.f32	s0, s16
 802c034:	eef0 0a68 	vmov.f32	s1, s17
 802c038:	f000 f838 	bl	802c0ac <finite>
 802c03c:	2800      	cmp	r0, #0
 802c03e:	d0ea      	beq.n	802c016 <pow+0xa2>
 802c040:	ec45 4b10 	vmov	d0, r4, r5
 802c044:	f000 f832 	bl	802c0ac <finite>
 802c048:	e7c3      	b.n	802bfd2 <pow+0x5e>
 802c04a:	4f01      	ldr	r7, [pc, #4]	; (802c050 <pow+0xdc>)
 802c04c:	2600      	movs	r6, #0
 802c04e:	e7e2      	b.n	802c016 <pow+0xa2>
 802c050:	3ff00000 	.word	0x3ff00000

0802c054 <sqrt>:
 802c054:	b538      	push	{r3, r4, r5, lr}
 802c056:	ed2d 8b02 	vpush	{d8}
 802c05a:	ec55 4b10 	vmov	r4, r5, d0
 802c05e:	f000 f831 	bl	802c0c4 <__ieee754_sqrt>
 802c062:	4622      	mov	r2, r4
 802c064:	462b      	mov	r3, r5
 802c066:	4620      	mov	r0, r4
 802c068:	4629      	mov	r1, r5
 802c06a:	eeb0 8a40 	vmov.f32	s16, s0
 802c06e:	eef0 8a60 	vmov.f32	s17, s1
 802c072:	f7d4 fd33 	bl	8000adc <__aeabi_dcmpun>
 802c076:	b990      	cbnz	r0, 802c09e <sqrt+0x4a>
 802c078:	2200      	movs	r2, #0
 802c07a:	2300      	movs	r3, #0
 802c07c:	4620      	mov	r0, r4
 802c07e:	4629      	mov	r1, r5
 802c080:	f7d4 fd04 	bl	8000a8c <__aeabi_dcmplt>
 802c084:	b158      	cbz	r0, 802c09e <sqrt+0x4a>
 802c086:	f7fd fc79 	bl	802997c <__errno>
 802c08a:	2321      	movs	r3, #33	; 0x21
 802c08c:	6003      	str	r3, [r0, #0]
 802c08e:	2200      	movs	r2, #0
 802c090:	2300      	movs	r3, #0
 802c092:	4610      	mov	r0, r2
 802c094:	4619      	mov	r1, r3
 802c096:	f7d4 fbb1 	bl	80007fc <__aeabi_ddiv>
 802c09a:	ec41 0b18 	vmov	d8, r0, r1
 802c09e:	eeb0 0a48 	vmov.f32	s0, s16
 802c0a2:	eef0 0a68 	vmov.f32	s1, s17
 802c0a6:	ecbd 8b02 	vpop	{d8}
 802c0aa:	bd38      	pop	{r3, r4, r5, pc}

0802c0ac <finite>:
 802c0ac:	b082      	sub	sp, #8
 802c0ae:	ed8d 0b00 	vstr	d0, [sp]
 802c0b2:	9801      	ldr	r0, [sp, #4]
 802c0b4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 802c0b8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 802c0bc:	0fc0      	lsrs	r0, r0, #31
 802c0be:	b002      	add	sp, #8
 802c0c0:	4770      	bx	lr
	...

0802c0c4 <__ieee754_sqrt>:
 802c0c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c0c8:	ec55 4b10 	vmov	r4, r5, d0
 802c0cc:	4e67      	ldr	r6, [pc, #412]	; (802c26c <__ieee754_sqrt+0x1a8>)
 802c0ce:	43ae      	bics	r6, r5
 802c0d0:	ee10 0a10 	vmov	r0, s0
 802c0d4:	ee10 2a10 	vmov	r2, s0
 802c0d8:	4629      	mov	r1, r5
 802c0da:	462b      	mov	r3, r5
 802c0dc:	d10d      	bne.n	802c0fa <__ieee754_sqrt+0x36>
 802c0de:	f7d4 fa63 	bl	80005a8 <__aeabi_dmul>
 802c0e2:	4602      	mov	r2, r0
 802c0e4:	460b      	mov	r3, r1
 802c0e6:	4620      	mov	r0, r4
 802c0e8:	4629      	mov	r1, r5
 802c0ea:	f7d4 f8a7 	bl	800023c <__adddf3>
 802c0ee:	4604      	mov	r4, r0
 802c0f0:	460d      	mov	r5, r1
 802c0f2:	ec45 4b10 	vmov	d0, r4, r5
 802c0f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c0fa:	2d00      	cmp	r5, #0
 802c0fc:	dc0b      	bgt.n	802c116 <__ieee754_sqrt+0x52>
 802c0fe:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 802c102:	4326      	orrs	r6, r4
 802c104:	d0f5      	beq.n	802c0f2 <__ieee754_sqrt+0x2e>
 802c106:	b135      	cbz	r5, 802c116 <__ieee754_sqrt+0x52>
 802c108:	f7d4 f896 	bl	8000238 <__aeabi_dsub>
 802c10c:	4602      	mov	r2, r0
 802c10e:	460b      	mov	r3, r1
 802c110:	f7d4 fb74 	bl	80007fc <__aeabi_ddiv>
 802c114:	e7eb      	b.n	802c0ee <__ieee754_sqrt+0x2a>
 802c116:	1509      	asrs	r1, r1, #20
 802c118:	f000 808d 	beq.w	802c236 <__ieee754_sqrt+0x172>
 802c11c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802c120:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 802c124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802c128:	07c9      	lsls	r1, r1, #31
 802c12a:	bf5c      	itt	pl
 802c12c:	005b      	lslpl	r3, r3, #1
 802c12e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 802c132:	ea4f 0343 	mov.w	r3, r3, lsl #1
 802c136:	bf58      	it	pl
 802c138:	0052      	lslpl	r2, r2, #1
 802c13a:	2500      	movs	r5, #0
 802c13c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802c140:	1076      	asrs	r6, r6, #1
 802c142:	0052      	lsls	r2, r2, #1
 802c144:	f04f 0e16 	mov.w	lr, #22
 802c148:	46ac      	mov	ip, r5
 802c14a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 802c14e:	eb0c 0001 	add.w	r0, ip, r1
 802c152:	4298      	cmp	r0, r3
 802c154:	bfde      	ittt	le
 802c156:	1a1b      	suble	r3, r3, r0
 802c158:	eb00 0c01 	addle.w	ip, r0, r1
 802c15c:	186d      	addle	r5, r5, r1
 802c15e:	005b      	lsls	r3, r3, #1
 802c160:	f1be 0e01 	subs.w	lr, lr, #1
 802c164:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802c168:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802c16c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802c170:	d1ed      	bne.n	802c14e <__ieee754_sqrt+0x8a>
 802c172:	4674      	mov	r4, lr
 802c174:	2720      	movs	r7, #32
 802c176:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 802c17a:	4563      	cmp	r3, ip
 802c17c:	eb01 000e 	add.w	r0, r1, lr
 802c180:	dc02      	bgt.n	802c188 <__ieee754_sqrt+0xc4>
 802c182:	d113      	bne.n	802c1ac <__ieee754_sqrt+0xe8>
 802c184:	4290      	cmp	r0, r2
 802c186:	d811      	bhi.n	802c1ac <__ieee754_sqrt+0xe8>
 802c188:	2800      	cmp	r0, #0
 802c18a:	eb00 0e01 	add.w	lr, r0, r1
 802c18e:	da57      	bge.n	802c240 <__ieee754_sqrt+0x17c>
 802c190:	f1be 0f00 	cmp.w	lr, #0
 802c194:	db54      	blt.n	802c240 <__ieee754_sqrt+0x17c>
 802c196:	f10c 0801 	add.w	r8, ip, #1
 802c19a:	eba3 030c 	sub.w	r3, r3, ip
 802c19e:	4290      	cmp	r0, r2
 802c1a0:	bf88      	it	hi
 802c1a2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 802c1a6:	1a12      	subs	r2, r2, r0
 802c1a8:	440c      	add	r4, r1
 802c1aa:	46c4      	mov	ip, r8
 802c1ac:	005b      	lsls	r3, r3, #1
 802c1ae:	3f01      	subs	r7, #1
 802c1b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 802c1b4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 802c1b8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 802c1bc:	d1dd      	bne.n	802c17a <__ieee754_sqrt+0xb6>
 802c1be:	4313      	orrs	r3, r2
 802c1c0:	d01b      	beq.n	802c1fa <__ieee754_sqrt+0x136>
 802c1c2:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 802c270 <__ieee754_sqrt+0x1ac>
 802c1c6:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 802c274 <__ieee754_sqrt+0x1b0>
 802c1ca:	e9da 0100 	ldrd	r0, r1, [sl]
 802c1ce:	e9db 2300 	ldrd	r2, r3, [fp]
 802c1d2:	f7d4 f831 	bl	8000238 <__aeabi_dsub>
 802c1d6:	e9da 8900 	ldrd	r8, r9, [sl]
 802c1da:	4602      	mov	r2, r0
 802c1dc:	460b      	mov	r3, r1
 802c1de:	4640      	mov	r0, r8
 802c1e0:	4649      	mov	r1, r9
 802c1e2:	f7d4 fc5d 	bl	8000aa0 <__aeabi_dcmple>
 802c1e6:	b140      	cbz	r0, 802c1fa <__ieee754_sqrt+0x136>
 802c1e8:	f1b4 3fff 	cmp.w	r4, #4294967295
 802c1ec:	e9da 0100 	ldrd	r0, r1, [sl]
 802c1f0:	e9db 2300 	ldrd	r2, r3, [fp]
 802c1f4:	d126      	bne.n	802c244 <__ieee754_sqrt+0x180>
 802c1f6:	3501      	adds	r5, #1
 802c1f8:	463c      	mov	r4, r7
 802c1fa:	106a      	asrs	r2, r5, #1
 802c1fc:	0863      	lsrs	r3, r4, #1
 802c1fe:	07e9      	lsls	r1, r5, #31
 802c200:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 802c204:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 802c208:	bf48      	it	mi
 802c20a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 802c20e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 802c212:	461c      	mov	r4, r3
 802c214:	e76d      	b.n	802c0f2 <__ieee754_sqrt+0x2e>
 802c216:	0ad3      	lsrs	r3, r2, #11
 802c218:	3815      	subs	r0, #21
 802c21a:	0552      	lsls	r2, r2, #21
 802c21c:	2b00      	cmp	r3, #0
 802c21e:	d0fa      	beq.n	802c216 <__ieee754_sqrt+0x152>
 802c220:	02dc      	lsls	r4, r3, #11
 802c222:	d50a      	bpl.n	802c23a <__ieee754_sqrt+0x176>
 802c224:	f1c1 0420 	rsb	r4, r1, #32
 802c228:	fa22 f404 	lsr.w	r4, r2, r4
 802c22c:	1e4d      	subs	r5, r1, #1
 802c22e:	408a      	lsls	r2, r1
 802c230:	4323      	orrs	r3, r4
 802c232:	1b41      	subs	r1, r0, r5
 802c234:	e772      	b.n	802c11c <__ieee754_sqrt+0x58>
 802c236:	4608      	mov	r0, r1
 802c238:	e7f0      	b.n	802c21c <__ieee754_sqrt+0x158>
 802c23a:	005b      	lsls	r3, r3, #1
 802c23c:	3101      	adds	r1, #1
 802c23e:	e7ef      	b.n	802c220 <__ieee754_sqrt+0x15c>
 802c240:	46e0      	mov	r8, ip
 802c242:	e7aa      	b.n	802c19a <__ieee754_sqrt+0xd6>
 802c244:	f7d3 fffa 	bl	800023c <__adddf3>
 802c248:	e9da 8900 	ldrd	r8, r9, [sl]
 802c24c:	4602      	mov	r2, r0
 802c24e:	460b      	mov	r3, r1
 802c250:	4640      	mov	r0, r8
 802c252:	4649      	mov	r1, r9
 802c254:	f7d4 fc1a 	bl	8000a8c <__aeabi_dcmplt>
 802c258:	b120      	cbz	r0, 802c264 <__ieee754_sqrt+0x1a0>
 802c25a:	1ca0      	adds	r0, r4, #2
 802c25c:	bf08      	it	eq
 802c25e:	3501      	addeq	r5, #1
 802c260:	3402      	adds	r4, #2
 802c262:	e7ca      	b.n	802c1fa <__ieee754_sqrt+0x136>
 802c264:	3401      	adds	r4, #1
 802c266:	f024 0401 	bic.w	r4, r4, #1
 802c26a:	e7c6      	b.n	802c1fa <__ieee754_sqrt+0x136>
 802c26c:	7ff00000 	.word	0x7ff00000
 802c270:	20000298 	.word	0x20000298
 802c274:	200002a0 	.word	0x200002a0

0802c278 <__ieee754_pow>:
 802c278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c27c:	ed2d 8b06 	vpush	{d8-d10}
 802c280:	b089      	sub	sp, #36	; 0x24
 802c282:	ed8d 1b00 	vstr	d1, [sp]
 802c286:	e9dd 2900 	ldrd	r2, r9, [sp]
 802c28a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802c28e:	ea58 0102 	orrs.w	r1, r8, r2
 802c292:	ec57 6b10 	vmov	r6, r7, d0
 802c296:	d115      	bne.n	802c2c4 <__ieee754_pow+0x4c>
 802c298:	19b3      	adds	r3, r6, r6
 802c29a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802c29e:	4152      	adcs	r2, r2
 802c2a0:	4299      	cmp	r1, r3
 802c2a2:	4b89      	ldr	r3, [pc, #548]	; (802c4c8 <__ieee754_pow+0x250>)
 802c2a4:	4193      	sbcs	r3, r2
 802c2a6:	f080 84d1 	bcs.w	802cc4c <__ieee754_pow+0x9d4>
 802c2aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c2ae:	4630      	mov	r0, r6
 802c2b0:	4639      	mov	r1, r7
 802c2b2:	f7d3 ffc3 	bl	800023c <__adddf3>
 802c2b6:	ec41 0b10 	vmov	d0, r0, r1
 802c2ba:	b009      	add	sp, #36	; 0x24
 802c2bc:	ecbd 8b06 	vpop	{d8-d10}
 802c2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802c2c4:	4b81      	ldr	r3, [pc, #516]	; (802c4cc <__ieee754_pow+0x254>)
 802c2c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 802c2ca:	429c      	cmp	r4, r3
 802c2cc:	ee10 aa10 	vmov	sl, s0
 802c2d0:	463d      	mov	r5, r7
 802c2d2:	dc06      	bgt.n	802c2e2 <__ieee754_pow+0x6a>
 802c2d4:	d101      	bne.n	802c2da <__ieee754_pow+0x62>
 802c2d6:	2e00      	cmp	r6, #0
 802c2d8:	d1e7      	bne.n	802c2aa <__ieee754_pow+0x32>
 802c2da:	4598      	cmp	r8, r3
 802c2dc:	dc01      	bgt.n	802c2e2 <__ieee754_pow+0x6a>
 802c2de:	d10f      	bne.n	802c300 <__ieee754_pow+0x88>
 802c2e0:	b172      	cbz	r2, 802c300 <__ieee754_pow+0x88>
 802c2e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 802c2e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 802c2ea:	ea55 050a 	orrs.w	r5, r5, sl
 802c2ee:	d1dc      	bne.n	802c2aa <__ieee754_pow+0x32>
 802c2f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 802c2f4:	18db      	adds	r3, r3, r3
 802c2f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 802c2fa:	4152      	adcs	r2, r2
 802c2fc:	429d      	cmp	r5, r3
 802c2fe:	e7d0      	b.n	802c2a2 <__ieee754_pow+0x2a>
 802c300:	2d00      	cmp	r5, #0
 802c302:	da3b      	bge.n	802c37c <__ieee754_pow+0x104>
 802c304:	4b72      	ldr	r3, [pc, #456]	; (802c4d0 <__ieee754_pow+0x258>)
 802c306:	4598      	cmp	r8, r3
 802c308:	dc51      	bgt.n	802c3ae <__ieee754_pow+0x136>
 802c30a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802c30e:	4598      	cmp	r8, r3
 802c310:	f340 84ab 	ble.w	802cc6a <__ieee754_pow+0x9f2>
 802c314:	ea4f 5328 	mov.w	r3, r8, asr #20
 802c318:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802c31c:	2b14      	cmp	r3, #20
 802c31e:	dd0f      	ble.n	802c340 <__ieee754_pow+0xc8>
 802c320:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 802c324:	fa22 f103 	lsr.w	r1, r2, r3
 802c328:	fa01 f303 	lsl.w	r3, r1, r3
 802c32c:	4293      	cmp	r3, r2
 802c32e:	f040 849c 	bne.w	802cc6a <__ieee754_pow+0x9f2>
 802c332:	f001 0101 	and.w	r1, r1, #1
 802c336:	f1c1 0302 	rsb	r3, r1, #2
 802c33a:	9304      	str	r3, [sp, #16]
 802c33c:	b182      	cbz	r2, 802c360 <__ieee754_pow+0xe8>
 802c33e:	e05f      	b.n	802c400 <__ieee754_pow+0x188>
 802c340:	2a00      	cmp	r2, #0
 802c342:	d15b      	bne.n	802c3fc <__ieee754_pow+0x184>
 802c344:	f1c3 0314 	rsb	r3, r3, #20
 802c348:	fa48 f103 	asr.w	r1, r8, r3
 802c34c:	fa01 f303 	lsl.w	r3, r1, r3
 802c350:	4543      	cmp	r3, r8
 802c352:	f040 8487 	bne.w	802cc64 <__ieee754_pow+0x9ec>
 802c356:	f001 0101 	and.w	r1, r1, #1
 802c35a:	f1c1 0302 	rsb	r3, r1, #2
 802c35e:	9304      	str	r3, [sp, #16]
 802c360:	4b5c      	ldr	r3, [pc, #368]	; (802c4d4 <__ieee754_pow+0x25c>)
 802c362:	4598      	cmp	r8, r3
 802c364:	d132      	bne.n	802c3cc <__ieee754_pow+0x154>
 802c366:	f1b9 0f00 	cmp.w	r9, #0
 802c36a:	f280 8477 	bge.w	802cc5c <__ieee754_pow+0x9e4>
 802c36e:	4959      	ldr	r1, [pc, #356]	; (802c4d4 <__ieee754_pow+0x25c>)
 802c370:	4632      	mov	r2, r6
 802c372:	463b      	mov	r3, r7
 802c374:	2000      	movs	r0, #0
 802c376:	f7d4 fa41 	bl	80007fc <__aeabi_ddiv>
 802c37a:	e79c      	b.n	802c2b6 <__ieee754_pow+0x3e>
 802c37c:	2300      	movs	r3, #0
 802c37e:	9304      	str	r3, [sp, #16]
 802c380:	2a00      	cmp	r2, #0
 802c382:	d13d      	bne.n	802c400 <__ieee754_pow+0x188>
 802c384:	4b51      	ldr	r3, [pc, #324]	; (802c4cc <__ieee754_pow+0x254>)
 802c386:	4598      	cmp	r8, r3
 802c388:	d1ea      	bne.n	802c360 <__ieee754_pow+0xe8>
 802c38a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802c38e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 802c392:	ea53 030a 	orrs.w	r3, r3, sl
 802c396:	f000 8459 	beq.w	802cc4c <__ieee754_pow+0x9d4>
 802c39a:	4b4f      	ldr	r3, [pc, #316]	; (802c4d8 <__ieee754_pow+0x260>)
 802c39c:	429c      	cmp	r4, r3
 802c39e:	dd08      	ble.n	802c3b2 <__ieee754_pow+0x13a>
 802c3a0:	f1b9 0f00 	cmp.w	r9, #0
 802c3a4:	f2c0 8456 	blt.w	802cc54 <__ieee754_pow+0x9dc>
 802c3a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c3ac:	e783      	b.n	802c2b6 <__ieee754_pow+0x3e>
 802c3ae:	2302      	movs	r3, #2
 802c3b0:	e7e5      	b.n	802c37e <__ieee754_pow+0x106>
 802c3b2:	f1b9 0f00 	cmp.w	r9, #0
 802c3b6:	f04f 0000 	mov.w	r0, #0
 802c3ba:	f04f 0100 	mov.w	r1, #0
 802c3be:	f6bf af7a 	bge.w	802c2b6 <__ieee754_pow+0x3e>
 802c3c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 802c3c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 802c3ca:	e774      	b.n	802c2b6 <__ieee754_pow+0x3e>
 802c3cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 802c3d0:	d106      	bne.n	802c3e0 <__ieee754_pow+0x168>
 802c3d2:	4632      	mov	r2, r6
 802c3d4:	463b      	mov	r3, r7
 802c3d6:	4630      	mov	r0, r6
 802c3d8:	4639      	mov	r1, r7
 802c3da:	f7d4 f8e5 	bl	80005a8 <__aeabi_dmul>
 802c3de:	e76a      	b.n	802c2b6 <__ieee754_pow+0x3e>
 802c3e0:	4b3e      	ldr	r3, [pc, #248]	; (802c4dc <__ieee754_pow+0x264>)
 802c3e2:	4599      	cmp	r9, r3
 802c3e4:	d10c      	bne.n	802c400 <__ieee754_pow+0x188>
 802c3e6:	2d00      	cmp	r5, #0
 802c3e8:	db0a      	blt.n	802c400 <__ieee754_pow+0x188>
 802c3ea:	ec47 6b10 	vmov	d0, r6, r7
 802c3ee:	b009      	add	sp, #36	; 0x24
 802c3f0:	ecbd 8b06 	vpop	{d8-d10}
 802c3f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c3f8:	f7ff be64 	b.w	802c0c4 <__ieee754_sqrt>
 802c3fc:	2300      	movs	r3, #0
 802c3fe:	9304      	str	r3, [sp, #16]
 802c400:	ec47 6b10 	vmov	d0, r6, r7
 802c404:	f000 fc62 	bl	802cccc <fabs>
 802c408:	ec51 0b10 	vmov	r0, r1, d0
 802c40c:	f1ba 0f00 	cmp.w	sl, #0
 802c410:	d129      	bne.n	802c466 <__ieee754_pow+0x1ee>
 802c412:	b124      	cbz	r4, 802c41e <__ieee754_pow+0x1a6>
 802c414:	4b2f      	ldr	r3, [pc, #188]	; (802c4d4 <__ieee754_pow+0x25c>)
 802c416:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802c41a:	429a      	cmp	r2, r3
 802c41c:	d123      	bne.n	802c466 <__ieee754_pow+0x1ee>
 802c41e:	f1b9 0f00 	cmp.w	r9, #0
 802c422:	da05      	bge.n	802c430 <__ieee754_pow+0x1b8>
 802c424:	4602      	mov	r2, r0
 802c426:	460b      	mov	r3, r1
 802c428:	2000      	movs	r0, #0
 802c42a:	492a      	ldr	r1, [pc, #168]	; (802c4d4 <__ieee754_pow+0x25c>)
 802c42c:	f7d4 f9e6 	bl	80007fc <__aeabi_ddiv>
 802c430:	2d00      	cmp	r5, #0
 802c432:	f6bf af40 	bge.w	802c2b6 <__ieee754_pow+0x3e>
 802c436:	9b04      	ldr	r3, [sp, #16]
 802c438:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802c43c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 802c440:	431c      	orrs	r4, r3
 802c442:	d108      	bne.n	802c456 <__ieee754_pow+0x1de>
 802c444:	4602      	mov	r2, r0
 802c446:	460b      	mov	r3, r1
 802c448:	4610      	mov	r0, r2
 802c44a:	4619      	mov	r1, r3
 802c44c:	f7d3 fef4 	bl	8000238 <__aeabi_dsub>
 802c450:	4602      	mov	r2, r0
 802c452:	460b      	mov	r3, r1
 802c454:	e78f      	b.n	802c376 <__ieee754_pow+0xfe>
 802c456:	9b04      	ldr	r3, [sp, #16]
 802c458:	2b01      	cmp	r3, #1
 802c45a:	f47f af2c 	bne.w	802c2b6 <__ieee754_pow+0x3e>
 802c45e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 802c462:	4619      	mov	r1, r3
 802c464:	e727      	b.n	802c2b6 <__ieee754_pow+0x3e>
 802c466:	0feb      	lsrs	r3, r5, #31
 802c468:	3b01      	subs	r3, #1
 802c46a:	9306      	str	r3, [sp, #24]
 802c46c:	9a06      	ldr	r2, [sp, #24]
 802c46e:	9b04      	ldr	r3, [sp, #16]
 802c470:	4313      	orrs	r3, r2
 802c472:	d102      	bne.n	802c47a <__ieee754_pow+0x202>
 802c474:	4632      	mov	r2, r6
 802c476:	463b      	mov	r3, r7
 802c478:	e7e6      	b.n	802c448 <__ieee754_pow+0x1d0>
 802c47a:	4b19      	ldr	r3, [pc, #100]	; (802c4e0 <__ieee754_pow+0x268>)
 802c47c:	4598      	cmp	r8, r3
 802c47e:	f340 80fb 	ble.w	802c678 <__ieee754_pow+0x400>
 802c482:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 802c486:	4598      	cmp	r8, r3
 802c488:	4b13      	ldr	r3, [pc, #76]	; (802c4d8 <__ieee754_pow+0x260>)
 802c48a:	dd0c      	ble.n	802c4a6 <__ieee754_pow+0x22e>
 802c48c:	429c      	cmp	r4, r3
 802c48e:	dc0f      	bgt.n	802c4b0 <__ieee754_pow+0x238>
 802c490:	f1b9 0f00 	cmp.w	r9, #0
 802c494:	da0f      	bge.n	802c4b6 <__ieee754_pow+0x23e>
 802c496:	2000      	movs	r0, #0
 802c498:	b009      	add	sp, #36	; 0x24
 802c49a:	ecbd 8b06 	vpop	{d8-d10}
 802c49e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4a2:	f000 bcc2 	b.w	802ce2a <__math_oflow>
 802c4a6:	429c      	cmp	r4, r3
 802c4a8:	dbf2      	blt.n	802c490 <__ieee754_pow+0x218>
 802c4aa:	4b0a      	ldr	r3, [pc, #40]	; (802c4d4 <__ieee754_pow+0x25c>)
 802c4ac:	429c      	cmp	r4, r3
 802c4ae:	dd19      	ble.n	802c4e4 <__ieee754_pow+0x26c>
 802c4b0:	f1b9 0f00 	cmp.w	r9, #0
 802c4b4:	dcef      	bgt.n	802c496 <__ieee754_pow+0x21e>
 802c4b6:	2000      	movs	r0, #0
 802c4b8:	b009      	add	sp, #36	; 0x24
 802c4ba:	ecbd 8b06 	vpop	{d8-d10}
 802c4be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802c4c2:	f000 bca9 	b.w	802ce18 <__math_uflow>
 802c4c6:	bf00      	nop
 802c4c8:	fff00000 	.word	0xfff00000
 802c4cc:	7ff00000 	.word	0x7ff00000
 802c4d0:	433fffff 	.word	0x433fffff
 802c4d4:	3ff00000 	.word	0x3ff00000
 802c4d8:	3fefffff 	.word	0x3fefffff
 802c4dc:	3fe00000 	.word	0x3fe00000
 802c4e0:	41e00000 	.word	0x41e00000
 802c4e4:	4b60      	ldr	r3, [pc, #384]	; (802c668 <__ieee754_pow+0x3f0>)
 802c4e6:	2200      	movs	r2, #0
 802c4e8:	f7d3 fea6 	bl	8000238 <__aeabi_dsub>
 802c4ec:	a354      	add	r3, pc, #336	; (adr r3, 802c640 <__ieee754_pow+0x3c8>)
 802c4ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c4f2:	4604      	mov	r4, r0
 802c4f4:	460d      	mov	r5, r1
 802c4f6:	f7d4 f857 	bl	80005a8 <__aeabi_dmul>
 802c4fa:	a353      	add	r3, pc, #332	; (adr r3, 802c648 <__ieee754_pow+0x3d0>)
 802c4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c500:	4606      	mov	r6, r0
 802c502:	460f      	mov	r7, r1
 802c504:	4620      	mov	r0, r4
 802c506:	4629      	mov	r1, r5
 802c508:	f7d4 f84e 	bl	80005a8 <__aeabi_dmul>
 802c50c:	4b57      	ldr	r3, [pc, #348]	; (802c66c <__ieee754_pow+0x3f4>)
 802c50e:	4682      	mov	sl, r0
 802c510:	468b      	mov	fp, r1
 802c512:	2200      	movs	r2, #0
 802c514:	4620      	mov	r0, r4
 802c516:	4629      	mov	r1, r5
 802c518:	f7d4 f846 	bl	80005a8 <__aeabi_dmul>
 802c51c:	4602      	mov	r2, r0
 802c51e:	460b      	mov	r3, r1
 802c520:	a14b      	add	r1, pc, #300	; (adr r1, 802c650 <__ieee754_pow+0x3d8>)
 802c522:	e9d1 0100 	ldrd	r0, r1, [r1]
 802c526:	f7d3 fe87 	bl	8000238 <__aeabi_dsub>
 802c52a:	4622      	mov	r2, r4
 802c52c:	462b      	mov	r3, r5
 802c52e:	f7d4 f83b 	bl	80005a8 <__aeabi_dmul>
 802c532:	4602      	mov	r2, r0
 802c534:	460b      	mov	r3, r1
 802c536:	2000      	movs	r0, #0
 802c538:	494d      	ldr	r1, [pc, #308]	; (802c670 <__ieee754_pow+0x3f8>)
 802c53a:	f7d3 fe7d 	bl	8000238 <__aeabi_dsub>
 802c53e:	4622      	mov	r2, r4
 802c540:	4680      	mov	r8, r0
 802c542:	4689      	mov	r9, r1
 802c544:	462b      	mov	r3, r5
 802c546:	4620      	mov	r0, r4
 802c548:	4629      	mov	r1, r5
 802c54a:	f7d4 f82d 	bl	80005a8 <__aeabi_dmul>
 802c54e:	4602      	mov	r2, r0
 802c550:	460b      	mov	r3, r1
 802c552:	4640      	mov	r0, r8
 802c554:	4649      	mov	r1, r9
 802c556:	f7d4 f827 	bl	80005a8 <__aeabi_dmul>
 802c55a:	a33f      	add	r3, pc, #252	; (adr r3, 802c658 <__ieee754_pow+0x3e0>)
 802c55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c560:	f7d4 f822 	bl	80005a8 <__aeabi_dmul>
 802c564:	4602      	mov	r2, r0
 802c566:	460b      	mov	r3, r1
 802c568:	4650      	mov	r0, sl
 802c56a:	4659      	mov	r1, fp
 802c56c:	f7d3 fe64 	bl	8000238 <__aeabi_dsub>
 802c570:	4602      	mov	r2, r0
 802c572:	460b      	mov	r3, r1
 802c574:	4680      	mov	r8, r0
 802c576:	4689      	mov	r9, r1
 802c578:	4630      	mov	r0, r6
 802c57a:	4639      	mov	r1, r7
 802c57c:	f7d3 fe5e 	bl	800023c <__adddf3>
 802c580:	2000      	movs	r0, #0
 802c582:	4632      	mov	r2, r6
 802c584:	463b      	mov	r3, r7
 802c586:	4604      	mov	r4, r0
 802c588:	460d      	mov	r5, r1
 802c58a:	f7d3 fe55 	bl	8000238 <__aeabi_dsub>
 802c58e:	4602      	mov	r2, r0
 802c590:	460b      	mov	r3, r1
 802c592:	4640      	mov	r0, r8
 802c594:	4649      	mov	r1, r9
 802c596:	f7d3 fe4f 	bl	8000238 <__aeabi_dsub>
 802c59a:	9b04      	ldr	r3, [sp, #16]
 802c59c:	9a06      	ldr	r2, [sp, #24]
 802c59e:	3b01      	subs	r3, #1
 802c5a0:	4313      	orrs	r3, r2
 802c5a2:	4682      	mov	sl, r0
 802c5a4:	468b      	mov	fp, r1
 802c5a6:	f040 81e7 	bne.w	802c978 <__ieee754_pow+0x700>
 802c5aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 802c660 <__ieee754_pow+0x3e8>
 802c5ae:	eeb0 8a47 	vmov.f32	s16, s14
 802c5b2:	eef0 8a67 	vmov.f32	s17, s15
 802c5b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 802c5ba:	2600      	movs	r6, #0
 802c5bc:	4632      	mov	r2, r6
 802c5be:	463b      	mov	r3, r7
 802c5c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 802c5c4:	f7d3 fe38 	bl	8000238 <__aeabi_dsub>
 802c5c8:	4622      	mov	r2, r4
 802c5ca:	462b      	mov	r3, r5
 802c5cc:	f7d3 ffec 	bl	80005a8 <__aeabi_dmul>
 802c5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 802c5d4:	4680      	mov	r8, r0
 802c5d6:	4689      	mov	r9, r1
 802c5d8:	4650      	mov	r0, sl
 802c5da:	4659      	mov	r1, fp
 802c5dc:	f7d3 ffe4 	bl	80005a8 <__aeabi_dmul>
 802c5e0:	4602      	mov	r2, r0
 802c5e2:	460b      	mov	r3, r1
 802c5e4:	4640      	mov	r0, r8
 802c5e6:	4649      	mov	r1, r9
 802c5e8:	f7d3 fe28 	bl	800023c <__adddf3>
 802c5ec:	4632      	mov	r2, r6
 802c5ee:	463b      	mov	r3, r7
 802c5f0:	4680      	mov	r8, r0
 802c5f2:	4689      	mov	r9, r1
 802c5f4:	4620      	mov	r0, r4
 802c5f6:	4629      	mov	r1, r5
 802c5f8:	f7d3 ffd6 	bl	80005a8 <__aeabi_dmul>
 802c5fc:	460b      	mov	r3, r1
 802c5fe:	4604      	mov	r4, r0
 802c600:	460d      	mov	r5, r1
 802c602:	4602      	mov	r2, r0
 802c604:	4649      	mov	r1, r9
 802c606:	4640      	mov	r0, r8
 802c608:	f7d3 fe18 	bl	800023c <__adddf3>
 802c60c:	4b19      	ldr	r3, [pc, #100]	; (802c674 <__ieee754_pow+0x3fc>)
 802c60e:	4299      	cmp	r1, r3
 802c610:	ec45 4b19 	vmov	d9, r4, r5
 802c614:	4606      	mov	r6, r0
 802c616:	460f      	mov	r7, r1
 802c618:	468b      	mov	fp, r1
 802c61a:	f340 82f0 	ble.w	802cbfe <__ieee754_pow+0x986>
 802c61e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 802c622:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 802c626:	4303      	orrs	r3, r0
 802c628:	f000 81e4 	beq.w	802c9f4 <__ieee754_pow+0x77c>
 802c62c:	ec51 0b18 	vmov	r0, r1, d8
 802c630:	2200      	movs	r2, #0
 802c632:	2300      	movs	r3, #0
 802c634:	f7d4 fa2a 	bl	8000a8c <__aeabi_dcmplt>
 802c638:	3800      	subs	r0, #0
 802c63a:	bf18      	it	ne
 802c63c:	2001      	movne	r0, #1
 802c63e:	e72b      	b.n	802c498 <__ieee754_pow+0x220>
 802c640:	60000000 	.word	0x60000000
 802c644:	3ff71547 	.word	0x3ff71547
 802c648:	f85ddf44 	.word	0xf85ddf44
 802c64c:	3e54ae0b 	.word	0x3e54ae0b
 802c650:	55555555 	.word	0x55555555
 802c654:	3fd55555 	.word	0x3fd55555
 802c658:	652b82fe 	.word	0x652b82fe
 802c65c:	3ff71547 	.word	0x3ff71547
 802c660:	00000000 	.word	0x00000000
 802c664:	bff00000 	.word	0xbff00000
 802c668:	3ff00000 	.word	0x3ff00000
 802c66c:	3fd00000 	.word	0x3fd00000
 802c670:	3fe00000 	.word	0x3fe00000
 802c674:	408fffff 	.word	0x408fffff
 802c678:	4bd5      	ldr	r3, [pc, #852]	; (802c9d0 <__ieee754_pow+0x758>)
 802c67a:	402b      	ands	r3, r5
 802c67c:	2200      	movs	r2, #0
 802c67e:	b92b      	cbnz	r3, 802c68c <__ieee754_pow+0x414>
 802c680:	4bd4      	ldr	r3, [pc, #848]	; (802c9d4 <__ieee754_pow+0x75c>)
 802c682:	f7d3 ff91 	bl	80005a8 <__aeabi_dmul>
 802c686:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802c68a:	460c      	mov	r4, r1
 802c68c:	1523      	asrs	r3, r4, #20
 802c68e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802c692:	4413      	add	r3, r2
 802c694:	9305      	str	r3, [sp, #20]
 802c696:	4bd0      	ldr	r3, [pc, #832]	; (802c9d8 <__ieee754_pow+0x760>)
 802c698:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802c69c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 802c6a0:	429c      	cmp	r4, r3
 802c6a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 802c6a6:	dd08      	ble.n	802c6ba <__ieee754_pow+0x442>
 802c6a8:	4bcc      	ldr	r3, [pc, #816]	; (802c9dc <__ieee754_pow+0x764>)
 802c6aa:	429c      	cmp	r4, r3
 802c6ac:	f340 8162 	ble.w	802c974 <__ieee754_pow+0x6fc>
 802c6b0:	9b05      	ldr	r3, [sp, #20]
 802c6b2:	3301      	adds	r3, #1
 802c6b4:	9305      	str	r3, [sp, #20]
 802c6b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 802c6ba:	2400      	movs	r4, #0
 802c6bc:	00e3      	lsls	r3, r4, #3
 802c6be:	9307      	str	r3, [sp, #28]
 802c6c0:	4bc7      	ldr	r3, [pc, #796]	; (802c9e0 <__ieee754_pow+0x768>)
 802c6c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802c6c6:	ed93 7b00 	vldr	d7, [r3]
 802c6ca:	4629      	mov	r1, r5
 802c6cc:	ec53 2b17 	vmov	r2, r3, d7
 802c6d0:	eeb0 9a47 	vmov.f32	s18, s14
 802c6d4:	eef0 9a67 	vmov.f32	s19, s15
 802c6d8:	4682      	mov	sl, r0
 802c6da:	f7d3 fdad 	bl	8000238 <__aeabi_dsub>
 802c6de:	4652      	mov	r2, sl
 802c6e0:	4606      	mov	r6, r0
 802c6e2:	460f      	mov	r7, r1
 802c6e4:	462b      	mov	r3, r5
 802c6e6:	ec51 0b19 	vmov	r0, r1, d9
 802c6ea:	f7d3 fda7 	bl	800023c <__adddf3>
 802c6ee:	4602      	mov	r2, r0
 802c6f0:	460b      	mov	r3, r1
 802c6f2:	2000      	movs	r0, #0
 802c6f4:	49bb      	ldr	r1, [pc, #748]	; (802c9e4 <__ieee754_pow+0x76c>)
 802c6f6:	f7d4 f881 	bl	80007fc <__aeabi_ddiv>
 802c6fa:	ec41 0b1a 	vmov	d10, r0, r1
 802c6fe:	4602      	mov	r2, r0
 802c700:	460b      	mov	r3, r1
 802c702:	4630      	mov	r0, r6
 802c704:	4639      	mov	r1, r7
 802c706:	f7d3 ff4f 	bl	80005a8 <__aeabi_dmul>
 802c70a:	2300      	movs	r3, #0
 802c70c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802c710:	9302      	str	r3, [sp, #8]
 802c712:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 802c716:	46ab      	mov	fp, r5
 802c718:	106d      	asrs	r5, r5, #1
 802c71a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802c71e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 802c722:	ec41 0b18 	vmov	d8, r0, r1
 802c726:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802c72a:	2200      	movs	r2, #0
 802c72c:	4640      	mov	r0, r8
 802c72e:	4649      	mov	r1, r9
 802c730:	4614      	mov	r4, r2
 802c732:	461d      	mov	r5, r3
 802c734:	f7d3 ff38 	bl	80005a8 <__aeabi_dmul>
 802c738:	4602      	mov	r2, r0
 802c73a:	460b      	mov	r3, r1
 802c73c:	4630      	mov	r0, r6
 802c73e:	4639      	mov	r1, r7
 802c740:	f7d3 fd7a 	bl	8000238 <__aeabi_dsub>
 802c744:	ec53 2b19 	vmov	r2, r3, d9
 802c748:	4606      	mov	r6, r0
 802c74a:	460f      	mov	r7, r1
 802c74c:	4620      	mov	r0, r4
 802c74e:	4629      	mov	r1, r5
 802c750:	f7d3 fd72 	bl	8000238 <__aeabi_dsub>
 802c754:	4602      	mov	r2, r0
 802c756:	460b      	mov	r3, r1
 802c758:	4650      	mov	r0, sl
 802c75a:	4659      	mov	r1, fp
 802c75c:	f7d3 fd6c 	bl	8000238 <__aeabi_dsub>
 802c760:	4642      	mov	r2, r8
 802c762:	464b      	mov	r3, r9
 802c764:	f7d3 ff20 	bl	80005a8 <__aeabi_dmul>
 802c768:	4602      	mov	r2, r0
 802c76a:	460b      	mov	r3, r1
 802c76c:	4630      	mov	r0, r6
 802c76e:	4639      	mov	r1, r7
 802c770:	f7d3 fd62 	bl	8000238 <__aeabi_dsub>
 802c774:	ec53 2b1a 	vmov	r2, r3, d10
 802c778:	f7d3 ff16 	bl	80005a8 <__aeabi_dmul>
 802c77c:	ec53 2b18 	vmov	r2, r3, d8
 802c780:	ec41 0b19 	vmov	d9, r0, r1
 802c784:	ec51 0b18 	vmov	r0, r1, d8
 802c788:	f7d3 ff0e 	bl	80005a8 <__aeabi_dmul>
 802c78c:	a37c      	add	r3, pc, #496	; (adr r3, 802c980 <__ieee754_pow+0x708>)
 802c78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c792:	4604      	mov	r4, r0
 802c794:	460d      	mov	r5, r1
 802c796:	f7d3 ff07 	bl	80005a8 <__aeabi_dmul>
 802c79a:	a37b      	add	r3, pc, #492	; (adr r3, 802c988 <__ieee754_pow+0x710>)
 802c79c:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7a0:	f7d3 fd4c 	bl	800023c <__adddf3>
 802c7a4:	4622      	mov	r2, r4
 802c7a6:	462b      	mov	r3, r5
 802c7a8:	f7d3 fefe 	bl	80005a8 <__aeabi_dmul>
 802c7ac:	a378      	add	r3, pc, #480	; (adr r3, 802c990 <__ieee754_pow+0x718>)
 802c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7b2:	f7d3 fd43 	bl	800023c <__adddf3>
 802c7b6:	4622      	mov	r2, r4
 802c7b8:	462b      	mov	r3, r5
 802c7ba:	f7d3 fef5 	bl	80005a8 <__aeabi_dmul>
 802c7be:	a376      	add	r3, pc, #472	; (adr r3, 802c998 <__ieee754_pow+0x720>)
 802c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7c4:	f7d3 fd3a 	bl	800023c <__adddf3>
 802c7c8:	4622      	mov	r2, r4
 802c7ca:	462b      	mov	r3, r5
 802c7cc:	f7d3 feec 	bl	80005a8 <__aeabi_dmul>
 802c7d0:	a373      	add	r3, pc, #460	; (adr r3, 802c9a0 <__ieee754_pow+0x728>)
 802c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7d6:	f7d3 fd31 	bl	800023c <__adddf3>
 802c7da:	4622      	mov	r2, r4
 802c7dc:	462b      	mov	r3, r5
 802c7de:	f7d3 fee3 	bl	80005a8 <__aeabi_dmul>
 802c7e2:	a371      	add	r3, pc, #452	; (adr r3, 802c9a8 <__ieee754_pow+0x730>)
 802c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c7e8:	f7d3 fd28 	bl	800023c <__adddf3>
 802c7ec:	4622      	mov	r2, r4
 802c7ee:	4606      	mov	r6, r0
 802c7f0:	460f      	mov	r7, r1
 802c7f2:	462b      	mov	r3, r5
 802c7f4:	4620      	mov	r0, r4
 802c7f6:	4629      	mov	r1, r5
 802c7f8:	f7d3 fed6 	bl	80005a8 <__aeabi_dmul>
 802c7fc:	4602      	mov	r2, r0
 802c7fe:	460b      	mov	r3, r1
 802c800:	4630      	mov	r0, r6
 802c802:	4639      	mov	r1, r7
 802c804:	f7d3 fed0 	bl	80005a8 <__aeabi_dmul>
 802c808:	4642      	mov	r2, r8
 802c80a:	4604      	mov	r4, r0
 802c80c:	460d      	mov	r5, r1
 802c80e:	464b      	mov	r3, r9
 802c810:	ec51 0b18 	vmov	r0, r1, d8
 802c814:	f7d3 fd12 	bl	800023c <__adddf3>
 802c818:	ec53 2b19 	vmov	r2, r3, d9
 802c81c:	f7d3 fec4 	bl	80005a8 <__aeabi_dmul>
 802c820:	4622      	mov	r2, r4
 802c822:	462b      	mov	r3, r5
 802c824:	f7d3 fd0a 	bl	800023c <__adddf3>
 802c828:	4642      	mov	r2, r8
 802c82a:	4682      	mov	sl, r0
 802c82c:	468b      	mov	fp, r1
 802c82e:	464b      	mov	r3, r9
 802c830:	4640      	mov	r0, r8
 802c832:	4649      	mov	r1, r9
 802c834:	f7d3 feb8 	bl	80005a8 <__aeabi_dmul>
 802c838:	4b6b      	ldr	r3, [pc, #428]	; (802c9e8 <__ieee754_pow+0x770>)
 802c83a:	2200      	movs	r2, #0
 802c83c:	4606      	mov	r6, r0
 802c83e:	460f      	mov	r7, r1
 802c840:	f7d3 fcfc 	bl	800023c <__adddf3>
 802c844:	4652      	mov	r2, sl
 802c846:	465b      	mov	r3, fp
 802c848:	f7d3 fcf8 	bl	800023c <__adddf3>
 802c84c:	2000      	movs	r0, #0
 802c84e:	4604      	mov	r4, r0
 802c850:	460d      	mov	r5, r1
 802c852:	4602      	mov	r2, r0
 802c854:	460b      	mov	r3, r1
 802c856:	4640      	mov	r0, r8
 802c858:	4649      	mov	r1, r9
 802c85a:	f7d3 fea5 	bl	80005a8 <__aeabi_dmul>
 802c85e:	4b62      	ldr	r3, [pc, #392]	; (802c9e8 <__ieee754_pow+0x770>)
 802c860:	4680      	mov	r8, r0
 802c862:	4689      	mov	r9, r1
 802c864:	2200      	movs	r2, #0
 802c866:	4620      	mov	r0, r4
 802c868:	4629      	mov	r1, r5
 802c86a:	f7d3 fce5 	bl	8000238 <__aeabi_dsub>
 802c86e:	4632      	mov	r2, r6
 802c870:	463b      	mov	r3, r7
 802c872:	f7d3 fce1 	bl	8000238 <__aeabi_dsub>
 802c876:	4602      	mov	r2, r0
 802c878:	460b      	mov	r3, r1
 802c87a:	4650      	mov	r0, sl
 802c87c:	4659      	mov	r1, fp
 802c87e:	f7d3 fcdb 	bl	8000238 <__aeabi_dsub>
 802c882:	ec53 2b18 	vmov	r2, r3, d8
 802c886:	f7d3 fe8f 	bl	80005a8 <__aeabi_dmul>
 802c88a:	4622      	mov	r2, r4
 802c88c:	4606      	mov	r6, r0
 802c88e:	460f      	mov	r7, r1
 802c890:	462b      	mov	r3, r5
 802c892:	ec51 0b19 	vmov	r0, r1, d9
 802c896:	f7d3 fe87 	bl	80005a8 <__aeabi_dmul>
 802c89a:	4602      	mov	r2, r0
 802c89c:	460b      	mov	r3, r1
 802c89e:	4630      	mov	r0, r6
 802c8a0:	4639      	mov	r1, r7
 802c8a2:	f7d3 fccb 	bl	800023c <__adddf3>
 802c8a6:	4606      	mov	r6, r0
 802c8a8:	460f      	mov	r7, r1
 802c8aa:	4602      	mov	r2, r0
 802c8ac:	460b      	mov	r3, r1
 802c8ae:	4640      	mov	r0, r8
 802c8b0:	4649      	mov	r1, r9
 802c8b2:	f7d3 fcc3 	bl	800023c <__adddf3>
 802c8b6:	a33e      	add	r3, pc, #248	; (adr r3, 802c9b0 <__ieee754_pow+0x738>)
 802c8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8bc:	2000      	movs	r0, #0
 802c8be:	4604      	mov	r4, r0
 802c8c0:	460d      	mov	r5, r1
 802c8c2:	f7d3 fe71 	bl	80005a8 <__aeabi_dmul>
 802c8c6:	4642      	mov	r2, r8
 802c8c8:	ec41 0b18 	vmov	d8, r0, r1
 802c8cc:	464b      	mov	r3, r9
 802c8ce:	4620      	mov	r0, r4
 802c8d0:	4629      	mov	r1, r5
 802c8d2:	f7d3 fcb1 	bl	8000238 <__aeabi_dsub>
 802c8d6:	4602      	mov	r2, r0
 802c8d8:	460b      	mov	r3, r1
 802c8da:	4630      	mov	r0, r6
 802c8dc:	4639      	mov	r1, r7
 802c8de:	f7d3 fcab 	bl	8000238 <__aeabi_dsub>
 802c8e2:	a335      	add	r3, pc, #212	; (adr r3, 802c9b8 <__ieee754_pow+0x740>)
 802c8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8e8:	f7d3 fe5e 	bl	80005a8 <__aeabi_dmul>
 802c8ec:	a334      	add	r3, pc, #208	; (adr r3, 802c9c0 <__ieee754_pow+0x748>)
 802c8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c8f2:	4606      	mov	r6, r0
 802c8f4:	460f      	mov	r7, r1
 802c8f6:	4620      	mov	r0, r4
 802c8f8:	4629      	mov	r1, r5
 802c8fa:	f7d3 fe55 	bl	80005a8 <__aeabi_dmul>
 802c8fe:	4602      	mov	r2, r0
 802c900:	460b      	mov	r3, r1
 802c902:	4630      	mov	r0, r6
 802c904:	4639      	mov	r1, r7
 802c906:	f7d3 fc99 	bl	800023c <__adddf3>
 802c90a:	9a07      	ldr	r2, [sp, #28]
 802c90c:	4b37      	ldr	r3, [pc, #220]	; (802c9ec <__ieee754_pow+0x774>)
 802c90e:	4413      	add	r3, r2
 802c910:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c914:	f7d3 fc92 	bl	800023c <__adddf3>
 802c918:	4682      	mov	sl, r0
 802c91a:	9805      	ldr	r0, [sp, #20]
 802c91c:	468b      	mov	fp, r1
 802c91e:	f7d3 fdd9 	bl	80004d4 <__aeabi_i2d>
 802c922:	9a07      	ldr	r2, [sp, #28]
 802c924:	4b32      	ldr	r3, [pc, #200]	; (802c9f0 <__ieee754_pow+0x778>)
 802c926:	4413      	add	r3, r2
 802c928:	e9d3 8900 	ldrd	r8, r9, [r3]
 802c92c:	4606      	mov	r6, r0
 802c92e:	460f      	mov	r7, r1
 802c930:	4652      	mov	r2, sl
 802c932:	465b      	mov	r3, fp
 802c934:	ec51 0b18 	vmov	r0, r1, d8
 802c938:	f7d3 fc80 	bl	800023c <__adddf3>
 802c93c:	4642      	mov	r2, r8
 802c93e:	464b      	mov	r3, r9
 802c940:	f7d3 fc7c 	bl	800023c <__adddf3>
 802c944:	4632      	mov	r2, r6
 802c946:	463b      	mov	r3, r7
 802c948:	f7d3 fc78 	bl	800023c <__adddf3>
 802c94c:	2000      	movs	r0, #0
 802c94e:	4632      	mov	r2, r6
 802c950:	463b      	mov	r3, r7
 802c952:	4604      	mov	r4, r0
 802c954:	460d      	mov	r5, r1
 802c956:	f7d3 fc6f 	bl	8000238 <__aeabi_dsub>
 802c95a:	4642      	mov	r2, r8
 802c95c:	464b      	mov	r3, r9
 802c95e:	f7d3 fc6b 	bl	8000238 <__aeabi_dsub>
 802c962:	ec53 2b18 	vmov	r2, r3, d8
 802c966:	f7d3 fc67 	bl	8000238 <__aeabi_dsub>
 802c96a:	4602      	mov	r2, r0
 802c96c:	460b      	mov	r3, r1
 802c96e:	4650      	mov	r0, sl
 802c970:	4659      	mov	r1, fp
 802c972:	e610      	b.n	802c596 <__ieee754_pow+0x31e>
 802c974:	2401      	movs	r4, #1
 802c976:	e6a1      	b.n	802c6bc <__ieee754_pow+0x444>
 802c978:	ed9f 7b13 	vldr	d7, [pc, #76]	; 802c9c8 <__ieee754_pow+0x750>
 802c97c:	e617      	b.n	802c5ae <__ieee754_pow+0x336>
 802c97e:	bf00      	nop
 802c980:	4a454eef 	.word	0x4a454eef
 802c984:	3fca7e28 	.word	0x3fca7e28
 802c988:	93c9db65 	.word	0x93c9db65
 802c98c:	3fcd864a 	.word	0x3fcd864a
 802c990:	a91d4101 	.word	0xa91d4101
 802c994:	3fd17460 	.word	0x3fd17460
 802c998:	518f264d 	.word	0x518f264d
 802c99c:	3fd55555 	.word	0x3fd55555
 802c9a0:	db6fabff 	.word	0xdb6fabff
 802c9a4:	3fdb6db6 	.word	0x3fdb6db6
 802c9a8:	33333303 	.word	0x33333303
 802c9ac:	3fe33333 	.word	0x3fe33333
 802c9b0:	e0000000 	.word	0xe0000000
 802c9b4:	3feec709 	.word	0x3feec709
 802c9b8:	dc3a03fd 	.word	0xdc3a03fd
 802c9bc:	3feec709 	.word	0x3feec709
 802c9c0:	145b01f5 	.word	0x145b01f5
 802c9c4:	be3e2fe0 	.word	0xbe3e2fe0
 802c9c8:	00000000 	.word	0x00000000
 802c9cc:	3ff00000 	.word	0x3ff00000
 802c9d0:	7ff00000 	.word	0x7ff00000
 802c9d4:	43400000 	.word	0x43400000
 802c9d8:	0003988e 	.word	0x0003988e
 802c9dc:	000bb679 	.word	0x000bb679
 802c9e0:	080341d0 	.word	0x080341d0
 802c9e4:	3ff00000 	.word	0x3ff00000
 802c9e8:	40080000 	.word	0x40080000
 802c9ec:	080341f0 	.word	0x080341f0
 802c9f0:	080341e0 	.word	0x080341e0
 802c9f4:	a3b3      	add	r3, pc, #716	; (adr r3, 802ccc4 <__ieee754_pow+0xa4c>)
 802c9f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 802c9fa:	4640      	mov	r0, r8
 802c9fc:	4649      	mov	r1, r9
 802c9fe:	f7d3 fc1d 	bl	800023c <__adddf3>
 802ca02:	4622      	mov	r2, r4
 802ca04:	ec41 0b1a 	vmov	d10, r0, r1
 802ca08:	462b      	mov	r3, r5
 802ca0a:	4630      	mov	r0, r6
 802ca0c:	4639      	mov	r1, r7
 802ca0e:	f7d3 fc13 	bl	8000238 <__aeabi_dsub>
 802ca12:	4602      	mov	r2, r0
 802ca14:	460b      	mov	r3, r1
 802ca16:	ec51 0b1a 	vmov	r0, r1, d10
 802ca1a:	f7d4 f855 	bl	8000ac8 <__aeabi_dcmpgt>
 802ca1e:	2800      	cmp	r0, #0
 802ca20:	f47f ae04 	bne.w	802c62c <__ieee754_pow+0x3b4>
 802ca24:	4aa2      	ldr	r2, [pc, #648]	; (802ccb0 <__ieee754_pow+0xa38>)
 802ca26:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802ca2a:	4293      	cmp	r3, r2
 802ca2c:	f340 8107 	ble.w	802cc3e <__ieee754_pow+0x9c6>
 802ca30:	151b      	asrs	r3, r3, #20
 802ca32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802ca36:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 802ca3a:	fa4a fa03 	asr.w	sl, sl, r3
 802ca3e:	44da      	add	sl, fp
 802ca40:	f3ca 510a 	ubfx	r1, sl, #20, #11
 802ca44:	489b      	ldr	r0, [pc, #620]	; (802ccb4 <__ieee754_pow+0xa3c>)
 802ca46:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 802ca4a:	4108      	asrs	r0, r1
 802ca4c:	ea00 030a 	and.w	r3, r0, sl
 802ca50:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 802ca54:	f1c1 0114 	rsb	r1, r1, #20
 802ca58:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802ca5c:	fa4a fa01 	asr.w	sl, sl, r1
 802ca60:	f1bb 0f00 	cmp.w	fp, #0
 802ca64:	f04f 0200 	mov.w	r2, #0
 802ca68:	4620      	mov	r0, r4
 802ca6a:	4629      	mov	r1, r5
 802ca6c:	bfb8      	it	lt
 802ca6e:	f1ca 0a00 	rsblt	sl, sl, #0
 802ca72:	f7d3 fbe1 	bl	8000238 <__aeabi_dsub>
 802ca76:	ec41 0b19 	vmov	d9, r0, r1
 802ca7a:	4642      	mov	r2, r8
 802ca7c:	464b      	mov	r3, r9
 802ca7e:	ec51 0b19 	vmov	r0, r1, d9
 802ca82:	f7d3 fbdb 	bl	800023c <__adddf3>
 802ca86:	a37a      	add	r3, pc, #488	; (adr r3, 802cc70 <__ieee754_pow+0x9f8>)
 802ca88:	e9d3 2300 	ldrd	r2, r3, [r3]
 802ca8c:	2000      	movs	r0, #0
 802ca8e:	4604      	mov	r4, r0
 802ca90:	460d      	mov	r5, r1
 802ca92:	f7d3 fd89 	bl	80005a8 <__aeabi_dmul>
 802ca96:	ec53 2b19 	vmov	r2, r3, d9
 802ca9a:	4606      	mov	r6, r0
 802ca9c:	460f      	mov	r7, r1
 802ca9e:	4620      	mov	r0, r4
 802caa0:	4629      	mov	r1, r5
 802caa2:	f7d3 fbc9 	bl	8000238 <__aeabi_dsub>
 802caa6:	4602      	mov	r2, r0
 802caa8:	460b      	mov	r3, r1
 802caaa:	4640      	mov	r0, r8
 802caac:	4649      	mov	r1, r9
 802caae:	f7d3 fbc3 	bl	8000238 <__aeabi_dsub>
 802cab2:	a371      	add	r3, pc, #452	; (adr r3, 802cc78 <__ieee754_pow+0xa00>)
 802cab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cab8:	f7d3 fd76 	bl	80005a8 <__aeabi_dmul>
 802cabc:	a370      	add	r3, pc, #448	; (adr r3, 802cc80 <__ieee754_pow+0xa08>)
 802cabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cac2:	4680      	mov	r8, r0
 802cac4:	4689      	mov	r9, r1
 802cac6:	4620      	mov	r0, r4
 802cac8:	4629      	mov	r1, r5
 802caca:	f7d3 fd6d 	bl	80005a8 <__aeabi_dmul>
 802cace:	4602      	mov	r2, r0
 802cad0:	460b      	mov	r3, r1
 802cad2:	4640      	mov	r0, r8
 802cad4:	4649      	mov	r1, r9
 802cad6:	f7d3 fbb1 	bl	800023c <__adddf3>
 802cada:	4604      	mov	r4, r0
 802cadc:	460d      	mov	r5, r1
 802cade:	4602      	mov	r2, r0
 802cae0:	460b      	mov	r3, r1
 802cae2:	4630      	mov	r0, r6
 802cae4:	4639      	mov	r1, r7
 802cae6:	f7d3 fba9 	bl	800023c <__adddf3>
 802caea:	4632      	mov	r2, r6
 802caec:	463b      	mov	r3, r7
 802caee:	4680      	mov	r8, r0
 802caf0:	4689      	mov	r9, r1
 802caf2:	f7d3 fba1 	bl	8000238 <__aeabi_dsub>
 802caf6:	4602      	mov	r2, r0
 802caf8:	460b      	mov	r3, r1
 802cafa:	4620      	mov	r0, r4
 802cafc:	4629      	mov	r1, r5
 802cafe:	f7d3 fb9b 	bl	8000238 <__aeabi_dsub>
 802cb02:	4642      	mov	r2, r8
 802cb04:	4606      	mov	r6, r0
 802cb06:	460f      	mov	r7, r1
 802cb08:	464b      	mov	r3, r9
 802cb0a:	4640      	mov	r0, r8
 802cb0c:	4649      	mov	r1, r9
 802cb0e:	f7d3 fd4b 	bl	80005a8 <__aeabi_dmul>
 802cb12:	a35d      	add	r3, pc, #372	; (adr r3, 802cc88 <__ieee754_pow+0xa10>)
 802cb14:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb18:	4604      	mov	r4, r0
 802cb1a:	460d      	mov	r5, r1
 802cb1c:	f7d3 fd44 	bl	80005a8 <__aeabi_dmul>
 802cb20:	a35b      	add	r3, pc, #364	; (adr r3, 802cc90 <__ieee754_pow+0xa18>)
 802cb22:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb26:	f7d3 fb87 	bl	8000238 <__aeabi_dsub>
 802cb2a:	4622      	mov	r2, r4
 802cb2c:	462b      	mov	r3, r5
 802cb2e:	f7d3 fd3b 	bl	80005a8 <__aeabi_dmul>
 802cb32:	a359      	add	r3, pc, #356	; (adr r3, 802cc98 <__ieee754_pow+0xa20>)
 802cb34:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb38:	f7d3 fb80 	bl	800023c <__adddf3>
 802cb3c:	4622      	mov	r2, r4
 802cb3e:	462b      	mov	r3, r5
 802cb40:	f7d3 fd32 	bl	80005a8 <__aeabi_dmul>
 802cb44:	a356      	add	r3, pc, #344	; (adr r3, 802cca0 <__ieee754_pow+0xa28>)
 802cb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb4a:	f7d3 fb75 	bl	8000238 <__aeabi_dsub>
 802cb4e:	4622      	mov	r2, r4
 802cb50:	462b      	mov	r3, r5
 802cb52:	f7d3 fd29 	bl	80005a8 <__aeabi_dmul>
 802cb56:	a354      	add	r3, pc, #336	; (adr r3, 802cca8 <__ieee754_pow+0xa30>)
 802cb58:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cb5c:	f7d3 fb6e 	bl	800023c <__adddf3>
 802cb60:	4622      	mov	r2, r4
 802cb62:	462b      	mov	r3, r5
 802cb64:	f7d3 fd20 	bl	80005a8 <__aeabi_dmul>
 802cb68:	4602      	mov	r2, r0
 802cb6a:	460b      	mov	r3, r1
 802cb6c:	4640      	mov	r0, r8
 802cb6e:	4649      	mov	r1, r9
 802cb70:	f7d3 fb62 	bl	8000238 <__aeabi_dsub>
 802cb74:	4604      	mov	r4, r0
 802cb76:	460d      	mov	r5, r1
 802cb78:	4602      	mov	r2, r0
 802cb7a:	460b      	mov	r3, r1
 802cb7c:	4640      	mov	r0, r8
 802cb7e:	4649      	mov	r1, r9
 802cb80:	f7d3 fd12 	bl	80005a8 <__aeabi_dmul>
 802cb84:	2200      	movs	r2, #0
 802cb86:	ec41 0b19 	vmov	d9, r0, r1
 802cb8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 802cb8e:	4620      	mov	r0, r4
 802cb90:	4629      	mov	r1, r5
 802cb92:	f7d3 fb51 	bl	8000238 <__aeabi_dsub>
 802cb96:	4602      	mov	r2, r0
 802cb98:	460b      	mov	r3, r1
 802cb9a:	ec51 0b19 	vmov	r0, r1, d9
 802cb9e:	f7d3 fe2d 	bl	80007fc <__aeabi_ddiv>
 802cba2:	4632      	mov	r2, r6
 802cba4:	4604      	mov	r4, r0
 802cba6:	460d      	mov	r5, r1
 802cba8:	463b      	mov	r3, r7
 802cbaa:	4640      	mov	r0, r8
 802cbac:	4649      	mov	r1, r9
 802cbae:	f7d3 fcfb 	bl	80005a8 <__aeabi_dmul>
 802cbb2:	4632      	mov	r2, r6
 802cbb4:	463b      	mov	r3, r7
 802cbb6:	f7d3 fb41 	bl	800023c <__adddf3>
 802cbba:	4602      	mov	r2, r0
 802cbbc:	460b      	mov	r3, r1
 802cbbe:	4620      	mov	r0, r4
 802cbc0:	4629      	mov	r1, r5
 802cbc2:	f7d3 fb39 	bl	8000238 <__aeabi_dsub>
 802cbc6:	4642      	mov	r2, r8
 802cbc8:	464b      	mov	r3, r9
 802cbca:	f7d3 fb35 	bl	8000238 <__aeabi_dsub>
 802cbce:	460b      	mov	r3, r1
 802cbd0:	4602      	mov	r2, r0
 802cbd2:	4939      	ldr	r1, [pc, #228]	; (802ccb8 <__ieee754_pow+0xa40>)
 802cbd4:	2000      	movs	r0, #0
 802cbd6:	f7d3 fb2f 	bl	8000238 <__aeabi_dsub>
 802cbda:	ec41 0b10 	vmov	d0, r0, r1
 802cbde:	ee10 3a90 	vmov	r3, s1
 802cbe2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 802cbe6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 802cbea:	da2b      	bge.n	802cc44 <__ieee754_pow+0x9cc>
 802cbec:	4650      	mov	r0, sl
 802cbee:	f000 f877 	bl	802cce0 <scalbn>
 802cbf2:	ec51 0b10 	vmov	r0, r1, d0
 802cbf6:	ec53 2b18 	vmov	r2, r3, d8
 802cbfa:	f7ff bbee 	b.w	802c3da <__ieee754_pow+0x162>
 802cbfe:	4b2f      	ldr	r3, [pc, #188]	; (802ccbc <__ieee754_pow+0xa44>)
 802cc00:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 802cc04:	429e      	cmp	r6, r3
 802cc06:	f77f af0d 	ble.w	802ca24 <__ieee754_pow+0x7ac>
 802cc0a:	4b2d      	ldr	r3, [pc, #180]	; (802ccc0 <__ieee754_pow+0xa48>)
 802cc0c:	440b      	add	r3, r1
 802cc0e:	4303      	orrs	r3, r0
 802cc10:	d009      	beq.n	802cc26 <__ieee754_pow+0x9ae>
 802cc12:	ec51 0b18 	vmov	r0, r1, d8
 802cc16:	2200      	movs	r2, #0
 802cc18:	2300      	movs	r3, #0
 802cc1a:	f7d3 ff37 	bl	8000a8c <__aeabi_dcmplt>
 802cc1e:	3800      	subs	r0, #0
 802cc20:	bf18      	it	ne
 802cc22:	2001      	movne	r0, #1
 802cc24:	e448      	b.n	802c4b8 <__ieee754_pow+0x240>
 802cc26:	4622      	mov	r2, r4
 802cc28:	462b      	mov	r3, r5
 802cc2a:	f7d3 fb05 	bl	8000238 <__aeabi_dsub>
 802cc2e:	4642      	mov	r2, r8
 802cc30:	464b      	mov	r3, r9
 802cc32:	f7d3 ff3f 	bl	8000ab4 <__aeabi_dcmpge>
 802cc36:	2800      	cmp	r0, #0
 802cc38:	f43f aef4 	beq.w	802ca24 <__ieee754_pow+0x7ac>
 802cc3c:	e7e9      	b.n	802cc12 <__ieee754_pow+0x99a>
 802cc3e:	f04f 0a00 	mov.w	sl, #0
 802cc42:	e71a      	b.n	802ca7a <__ieee754_pow+0x802>
 802cc44:	ec51 0b10 	vmov	r0, r1, d0
 802cc48:	4619      	mov	r1, r3
 802cc4a:	e7d4      	b.n	802cbf6 <__ieee754_pow+0x97e>
 802cc4c:	491a      	ldr	r1, [pc, #104]	; (802ccb8 <__ieee754_pow+0xa40>)
 802cc4e:	2000      	movs	r0, #0
 802cc50:	f7ff bb31 	b.w	802c2b6 <__ieee754_pow+0x3e>
 802cc54:	2000      	movs	r0, #0
 802cc56:	2100      	movs	r1, #0
 802cc58:	f7ff bb2d 	b.w	802c2b6 <__ieee754_pow+0x3e>
 802cc5c:	4630      	mov	r0, r6
 802cc5e:	4639      	mov	r1, r7
 802cc60:	f7ff bb29 	b.w	802c2b6 <__ieee754_pow+0x3e>
 802cc64:	9204      	str	r2, [sp, #16]
 802cc66:	f7ff bb7b 	b.w	802c360 <__ieee754_pow+0xe8>
 802cc6a:	2300      	movs	r3, #0
 802cc6c:	f7ff bb65 	b.w	802c33a <__ieee754_pow+0xc2>
 802cc70:	00000000 	.word	0x00000000
 802cc74:	3fe62e43 	.word	0x3fe62e43
 802cc78:	fefa39ef 	.word	0xfefa39ef
 802cc7c:	3fe62e42 	.word	0x3fe62e42
 802cc80:	0ca86c39 	.word	0x0ca86c39
 802cc84:	be205c61 	.word	0xbe205c61
 802cc88:	72bea4d0 	.word	0x72bea4d0
 802cc8c:	3e663769 	.word	0x3e663769
 802cc90:	c5d26bf1 	.word	0xc5d26bf1
 802cc94:	3ebbbd41 	.word	0x3ebbbd41
 802cc98:	af25de2c 	.word	0xaf25de2c
 802cc9c:	3f11566a 	.word	0x3f11566a
 802cca0:	16bebd93 	.word	0x16bebd93
 802cca4:	3f66c16c 	.word	0x3f66c16c
 802cca8:	5555553e 	.word	0x5555553e
 802ccac:	3fc55555 	.word	0x3fc55555
 802ccb0:	3fe00000 	.word	0x3fe00000
 802ccb4:	fff00000 	.word	0xfff00000
 802ccb8:	3ff00000 	.word	0x3ff00000
 802ccbc:	4090cbff 	.word	0x4090cbff
 802ccc0:	3f6f3400 	.word	0x3f6f3400
 802ccc4:	652b82fe 	.word	0x652b82fe
 802ccc8:	3c971547 	.word	0x3c971547

0802cccc <fabs>:
 802cccc:	ec51 0b10 	vmov	r0, r1, d0
 802ccd0:	ee10 2a10 	vmov	r2, s0
 802ccd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 802ccd8:	ec43 2b10 	vmov	d0, r2, r3
 802ccdc:	4770      	bx	lr
	...

0802cce0 <scalbn>:
 802cce0:	b570      	push	{r4, r5, r6, lr}
 802cce2:	ec55 4b10 	vmov	r4, r5, d0
 802cce6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 802ccea:	4606      	mov	r6, r0
 802ccec:	462b      	mov	r3, r5
 802ccee:	b999      	cbnz	r1, 802cd18 <scalbn+0x38>
 802ccf0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 802ccf4:	4323      	orrs	r3, r4
 802ccf6:	d03f      	beq.n	802cd78 <scalbn+0x98>
 802ccf8:	4b35      	ldr	r3, [pc, #212]	; (802cdd0 <scalbn+0xf0>)
 802ccfa:	4629      	mov	r1, r5
 802ccfc:	ee10 0a10 	vmov	r0, s0
 802cd00:	2200      	movs	r2, #0
 802cd02:	f7d3 fc51 	bl	80005a8 <__aeabi_dmul>
 802cd06:	4b33      	ldr	r3, [pc, #204]	; (802cdd4 <scalbn+0xf4>)
 802cd08:	429e      	cmp	r6, r3
 802cd0a:	4604      	mov	r4, r0
 802cd0c:	460d      	mov	r5, r1
 802cd0e:	da10      	bge.n	802cd32 <scalbn+0x52>
 802cd10:	a327      	add	r3, pc, #156	; (adr r3, 802cdb0 <scalbn+0xd0>)
 802cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd16:	e01f      	b.n	802cd58 <scalbn+0x78>
 802cd18:	f240 72ff 	movw	r2, #2047	; 0x7ff
 802cd1c:	4291      	cmp	r1, r2
 802cd1e:	d10c      	bne.n	802cd3a <scalbn+0x5a>
 802cd20:	ee10 2a10 	vmov	r2, s0
 802cd24:	4620      	mov	r0, r4
 802cd26:	4629      	mov	r1, r5
 802cd28:	f7d3 fa88 	bl	800023c <__adddf3>
 802cd2c:	4604      	mov	r4, r0
 802cd2e:	460d      	mov	r5, r1
 802cd30:	e022      	b.n	802cd78 <scalbn+0x98>
 802cd32:	460b      	mov	r3, r1
 802cd34:	f3c1 510a 	ubfx	r1, r1, #20, #11
 802cd38:	3936      	subs	r1, #54	; 0x36
 802cd3a:	f24c 3250 	movw	r2, #50000	; 0xc350
 802cd3e:	4296      	cmp	r6, r2
 802cd40:	dd0d      	ble.n	802cd5e <scalbn+0x7e>
 802cd42:	2d00      	cmp	r5, #0
 802cd44:	a11c      	add	r1, pc, #112	; (adr r1, 802cdb8 <scalbn+0xd8>)
 802cd46:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cd4a:	da02      	bge.n	802cd52 <scalbn+0x72>
 802cd4c:	a11c      	add	r1, pc, #112	; (adr r1, 802cdc0 <scalbn+0xe0>)
 802cd4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cd52:	a319      	add	r3, pc, #100	; (adr r3, 802cdb8 <scalbn+0xd8>)
 802cd54:	e9d3 2300 	ldrd	r2, r3, [r3]
 802cd58:	f7d3 fc26 	bl	80005a8 <__aeabi_dmul>
 802cd5c:	e7e6      	b.n	802cd2c <scalbn+0x4c>
 802cd5e:	1872      	adds	r2, r6, r1
 802cd60:	f240 71fe 	movw	r1, #2046	; 0x7fe
 802cd64:	428a      	cmp	r2, r1
 802cd66:	dcec      	bgt.n	802cd42 <scalbn+0x62>
 802cd68:	2a00      	cmp	r2, #0
 802cd6a:	dd08      	ble.n	802cd7e <scalbn+0x9e>
 802cd6c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cd70:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802cd74:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 802cd78:	ec45 4b10 	vmov	d0, r4, r5
 802cd7c:	bd70      	pop	{r4, r5, r6, pc}
 802cd7e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 802cd82:	da08      	bge.n	802cd96 <scalbn+0xb6>
 802cd84:	2d00      	cmp	r5, #0
 802cd86:	a10a      	add	r1, pc, #40	; (adr r1, 802cdb0 <scalbn+0xd0>)
 802cd88:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cd8c:	dac0      	bge.n	802cd10 <scalbn+0x30>
 802cd8e:	a10e      	add	r1, pc, #56	; (adr r1, 802cdc8 <scalbn+0xe8>)
 802cd90:	e9d1 0100 	ldrd	r0, r1, [r1]
 802cd94:	e7bc      	b.n	802cd10 <scalbn+0x30>
 802cd96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 802cd9a:	3236      	adds	r2, #54	; 0x36
 802cd9c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 802cda0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 802cda4:	4620      	mov	r0, r4
 802cda6:	4b0c      	ldr	r3, [pc, #48]	; (802cdd8 <scalbn+0xf8>)
 802cda8:	2200      	movs	r2, #0
 802cdaa:	e7d5      	b.n	802cd58 <scalbn+0x78>
 802cdac:	f3af 8000 	nop.w
 802cdb0:	c2f8f359 	.word	0xc2f8f359
 802cdb4:	01a56e1f 	.word	0x01a56e1f
 802cdb8:	8800759c 	.word	0x8800759c
 802cdbc:	7e37e43c 	.word	0x7e37e43c
 802cdc0:	8800759c 	.word	0x8800759c
 802cdc4:	fe37e43c 	.word	0xfe37e43c
 802cdc8:	c2f8f359 	.word	0xc2f8f359
 802cdcc:	81a56e1f 	.word	0x81a56e1f
 802cdd0:	43500000 	.word	0x43500000
 802cdd4:	ffff3cb0 	.word	0xffff3cb0
 802cdd8:	3c900000 	.word	0x3c900000

0802cddc <with_errno>:
 802cddc:	b570      	push	{r4, r5, r6, lr}
 802cdde:	4604      	mov	r4, r0
 802cde0:	460d      	mov	r5, r1
 802cde2:	4616      	mov	r6, r2
 802cde4:	f7fc fdca 	bl	802997c <__errno>
 802cde8:	4629      	mov	r1, r5
 802cdea:	6006      	str	r6, [r0, #0]
 802cdec:	4620      	mov	r0, r4
 802cdee:	bd70      	pop	{r4, r5, r6, pc}

0802cdf0 <xflow>:
 802cdf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802cdf2:	4614      	mov	r4, r2
 802cdf4:	461d      	mov	r5, r3
 802cdf6:	b108      	cbz	r0, 802cdfc <xflow+0xc>
 802cdf8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 802cdfc:	e9cd 2300 	strd	r2, r3, [sp]
 802ce00:	e9dd 2300 	ldrd	r2, r3, [sp]
 802ce04:	4620      	mov	r0, r4
 802ce06:	4629      	mov	r1, r5
 802ce08:	f7d3 fbce 	bl	80005a8 <__aeabi_dmul>
 802ce0c:	2222      	movs	r2, #34	; 0x22
 802ce0e:	b003      	add	sp, #12
 802ce10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802ce14:	f7ff bfe2 	b.w	802cddc <with_errno>

0802ce18 <__math_uflow>:
 802ce18:	b508      	push	{r3, lr}
 802ce1a:	2200      	movs	r2, #0
 802ce1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 802ce20:	f7ff ffe6 	bl	802cdf0 <xflow>
 802ce24:	ec41 0b10 	vmov	d0, r0, r1
 802ce28:	bd08      	pop	{r3, pc}

0802ce2a <__math_oflow>:
 802ce2a:	b508      	push	{r3, lr}
 802ce2c:	2200      	movs	r2, #0
 802ce2e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 802ce32:	f7ff ffdd 	bl	802cdf0 <xflow>
 802ce36:	ec41 0b10 	vmov	d0, r0, r1
 802ce3a:	bd08      	pop	{r3, pc}

0802ce3c <_init>:
 802ce3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ce3e:	bf00      	nop
 802ce40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ce42:	bc08      	pop	{r3}
 802ce44:	469e      	mov	lr, r3
 802ce46:	4770      	bx	lr

0802ce48 <_fini>:
 802ce48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802ce4a:	bf00      	nop
 802ce4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802ce4e:	bc08      	pop	{r3}
 802ce50:	469e      	mov	lr, r3
 802ce52:	4770      	bx	lr

Disassembly of section .RamFunc:

0802ce54 <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 802ce54:	b480      	push	{r7}
 802ce56:	b089      	sub	sp, #36	; 0x24
 802ce58:	af00      	add	r7, sp, #0
 802ce5a:	6078      	str	r0, [r7, #4]
 802ce5c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 802ce5e:	2380      	movs	r3, #128	; 0x80
 802ce60:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 802ce62:	687b      	ldr	r3, [r7, #4]
 802ce64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 802ce66:	683b      	ldr	r3, [r7, #0]
 802ce68:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 802ce6a:	4b18      	ldr	r3, [pc, #96]	; (802cecc <FLASH_Program_Fast+0x78>)
 802ce6c:	695b      	ldr	r3, [r3, #20]
 802ce6e:	4a17      	ldr	r2, [pc, #92]	; (802cecc <FLASH_Program_Fast+0x78>)
 802ce70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 802ce74:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 802ce76:	f3ef 8310 	mrs	r3, PRIMASK
 802ce7a:	60fb      	str	r3, [r7, #12]
  return(result);
 802ce7c:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 802ce7e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 802ce80:	b672      	cpsid	i
}
 802ce82:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 802ce84:	697b      	ldr	r3, [r7, #20]
 802ce86:	681a      	ldr	r2, [r3, #0]
 802ce88:	69bb      	ldr	r3, [r7, #24]
 802ce8a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 802ce8c:	69bb      	ldr	r3, [r7, #24]
 802ce8e:	3304      	adds	r3, #4
 802ce90:	61bb      	str	r3, [r7, #24]
    src_addr++;
 802ce92:	697b      	ldr	r3, [r7, #20]
 802ce94:	3304      	adds	r3, #4
 802ce96:	617b      	str	r3, [r7, #20]
    row_index--;
 802ce98:	7ffb      	ldrb	r3, [r7, #31]
 802ce9a:	3b01      	subs	r3, #1
 802ce9c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 802ce9e:	7ffb      	ldrb	r3, [r7, #31]
 802cea0:	2b00      	cmp	r3, #0
 802cea2:	d1ef      	bne.n	802ce84 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 802cea4:	bf00      	nop
 802cea6:	4b09      	ldr	r3, [pc, #36]	; (802cecc <FLASH_Program_Fast+0x78>)
 802cea8:	691b      	ldr	r3, [r3, #16]
 802ceaa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 802ceae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802ceb2:	d0f8      	beq.n	802cea6 <FLASH_Program_Fast+0x52>
 802ceb4:	693b      	ldr	r3, [r7, #16]
 802ceb6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 802ceb8:	68bb      	ldr	r3, [r7, #8]
 802ceba:	f383 8810 	msr	PRIMASK, r3
}
 802cebe:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 802cec0:	bf00      	nop
 802cec2:	3724      	adds	r7, #36	; 0x24
 802cec4:	46bd      	mov	sp, r7
 802cec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 802ceca:	4770      	bx	lr
 802cecc:	58004000 	.word	0x58004000
