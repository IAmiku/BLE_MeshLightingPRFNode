
BLE_p2pServer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000116dc  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bc4  08011820  08011820  00021820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080133e4  080133e4  000233e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080133ec  080133ec  000233ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080133f0  080133f0  000233f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000020c  20000008  080133f4  00030008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 BLE_DRIVER_CONTEXT 00000025  20000214  08013600  00030214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 SYSTEM_DRIVER_CONTEXT 00000011  2000023c  08013625  0003023c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017fc  20000250  08013636  00030250  2**2
                  ALLOC
 10 ._user_heap_stack 00001404  20001a4c  08013636  00031a4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003024d  2**0
                  CONTENTS, READONLY
 12 MAPPING_TABLE 00000028  20030000  20030000  00040000  2**2
                  ALLOC
 13 MB_MEM1       000001bc  20030028  20030028  00040000  2**2
                  ALLOC
 14 MB_MEM2       00000883  200301e4  200301e4  00040000  2**2
                  ALLOC
 15 .comment      00000043  00000000  00000000  0003027d  2**0
                  CONTENTS, READONLY
 16 .debug_info   00034844  00000000  00000000  000302c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 000076f2  00000000  00000000  00064b04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002fa0  00000000  00000000  0006c1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00002480  00000000  00000000  0006f198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002fcf7  00000000  00000000  00071618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0003b07a  00000000  00000000  000a130f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    00102ab2  00000000  00000000  000dc389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  0000d6f0  00000000  00000000  001dee3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 000000bd  00000000  00000000  001ec52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000250 	.word	0x20000250
 800015c:	00000000 	.word	0x00000000
 8000160:	08011804 	.word	0x08011804

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000254 	.word	0x20000254
 800017c:	08011804 	.word	0x08011804

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr
	...

080001a0 <memchr>:
 80001a0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001a4:	2a10      	cmp	r2, #16
 80001a6:	db2b      	blt.n	8000200 <memchr+0x60>
 80001a8:	f010 0f07 	tst.w	r0, #7
 80001ac:	d008      	beq.n	80001c0 <memchr+0x20>
 80001ae:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001b2:	3a01      	subs	r2, #1
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d02d      	beq.n	8000214 <memchr+0x74>
 80001b8:	f010 0f07 	tst.w	r0, #7
 80001bc:	b342      	cbz	r2, 8000210 <memchr+0x70>
 80001be:	d1f6      	bne.n	80001ae <memchr+0xe>
 80001c0:	b4f0      	push	{r4, r5, r6, r7}
 80001c2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001c6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ca:	f022 0407 	bic.w	r4, r2, #7
 80001ce:	f07f 0700 	mvns.w	r7, #0
 80001d2:	2300      	movs	r3, #0
 80001d4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001d8:	3c08      	subs	r4, #8
 80001da:	ea85 0501 	eor.w	r5, r5, r1
 80001de:	ea86 0601 	eor.w	r6, r6, r1
 80001e2:	fa85 f547 	uadd8	r5, r5, r7
 80001e6:	faa3 f587 	sel	r5, r3, r7
 80001ea:	fa86 f647 	uadd8	r6, r6, r7
 80001ee:	faa5 f687 	sel	r6, r5, r7
 80001f2:	b98e      	cbnz	r6, 8000218 <memchr+0x78>
 80001f4:	d1ee      	bne.n	80001d4 <memchr+0x34>
 80001f6:	bcf0      	pop	{r4, r5, r6, r7}
 80001f8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001fc:	f002 0207 	and.w	r2, r2, #7
 8000200:	b132      	cbz	r2, 8000210 <memchr+0x70>
 8000202:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000206:	3a01      	subs	r2, #1
 8000208:	ea83 0301 	eor.w	r3, r3, r1
 800020c:	b113      	cbz	r3, 8000214 <memchr+0x74>
 800020e:	d1f8      	bne.n	8000202 <memchr+0x62>
 8000210:	2000      	movs	r0, #0
 8000212:	4770      	bx	lr
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr
 8000218:	2d00      	cmp	r5, #0
 800021a:	bf06      	itte	eq
 800021c:	4635      	moveq	r5, r6
 800021e:	3803      	subeq	r0, #3
 8000220:	3807      	subne	r0, #7
 8000222:	f015 0f01 	tst.w	r5, #1
 8000226:	d107      	bne.n	8000238 <memchr+0x98>
 8000228:	3001      	adds	r0, #1
 800022a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800022e:	bf02      	ittt	eq
 8000230:	3001      	addeq	r0, #1
 8000232:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000236:	3001      	addeq	r0, #1
 8000238:	bcf0      	pop	{r4, r5, r6, r7}
 800023a:	3801      	subs	r0, #1
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_drsub>:
 8000250:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000254:	e002      	b.n	800025c <__adddf3>
 8000256:	bf00      	nop

08000258 <__aeabi_dsub>:
 8000258:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800025c <__adddf3>:
 800025c:	b530      	push	{r4, r5, lr}
 800025e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000262:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000266:	ea94 0f05 	teq	r4, r5
 800026a:	bf08      	it	eq
 800026c:	ea90 0f02 	teqeq	r0, r2
 8000270:	bf1f      	itttt	ne
 8000272:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000276:	ea55 0c02 	orrsne.w	ip, r5, r2
 800027a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800027e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000282:	f000 80e2 	beq.w	800044a <__adddf3+0x1ee>
 8000286:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800028a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800028e:	bfb8      	it	lt
 8000290:	426d      	neglt	r5, r5
 8000292:	dd0c      	ble.n	80002ae <__adddf3+0x52>
 8000294:	442c      	add	r4, r5
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	ea82 0000 	eor.w	r0, r2, r0
 80002a2:	ea83 0101 	eor.w	r1, r3, r1
 80002a6:	ea80 0202 	eor.w	r2, r0, r2
 80002aa:	ea81 0303 	eor.w	r3, r1, r3
 80002ae:	2d36      	cmp	r5, #54	; 0x36
 80002b0:	bf88      	it	hi
 80002b2:	bd30      	pophi	{r4, r5, pc}
 80002b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002c4:	d002      	beq.n	80002cc <__adddf3+0x70>
 80002c6:	4240      	negs	r0, r0
 80002c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d8:	d002      	beq.n	80002e0 <__adddf3+0x84>
 80002da:	4252      	negs	r2, r2
 80002dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002e0:	ea94 0f05 	teq	r4, r5
 80002e4:	f000 80a7 	beq.w	8000436 <__adddf3+0x1da>
 80002e8:	f1a4 0401 	sub.w	r4, r4, #1
 80002ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80002f0:	db0d      	blt.n	800030e <__adddf3+0xb2>
 80002f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002f6:	fa22 f205 	lsr.w	r2, r2, r5
 80002fa:	1880      	adds	r0, r0, r2
 80002fc:	f141 0100 	adc.w	r1, r1, #0
 8000300:	fa03 f20e 	lsl.w	r2, r3, lr
 8000304:	1880      	adds	r0, r0, r2
 8000306:	fa43 f305 	asr.w	r3, r3, r5
 800030a:	4159      	adcs	r1, r3
 800030c:	e00e      	b.n	800032c <__adddf3+0xd0>
 800030e:	f1a5 0520 	sub.w	r5, r5, #32
 8000312:	f10e 0e20 	add.w	lr, lr, #32
 8000316:	2a01      	cmp	r2, #1
 8000318:	fa03 fc0e 	lsl.w	ip, r3, lr
 800031c:	bf28      	it	cs
 800031e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000322:	fa43 f305 	asr.w	r3, r3, r5
 8000326:	18c0      	adds	r0, r0, r3
 8000328:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800032c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000330:	d507      	bpl.n	8000342 <__adddf3+0xe6>
 8000332:	f04f 0e00 	mov.w	lr, #0
 8000336:	f1dc 0c00 	rsbs	ip, ip, #0
 800033a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800033e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000342:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000346:	d31b      	bcc.n	8000380 <__adddf3+0x124>
 8000348:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800034c:	d30c      	bcc.n	8000368 <__adddf3+0x10c>
 800034e:	0849      	lsrs	r1, r1, #1
 8000350:	ea5f 0030 	movs.w	r0, r0, rrx
 8000354:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000358:	f104 0401 	add.w	r4, r4, #1
 800035c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000360:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000364:	f080 809a 	bcs.w	800049c <__adddf3+0x240>
 8000368:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800036c:	bf08      	it	eq
 800036e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000372:	f150 0000 	adcs.w	r0, r0, #0
 8000376:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800037a:	ea41 0105 	orr.w	r1, r1, r5
 800037e:	bd30      	pop	{r4, r5, pc}
 8000380:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000384:	4140      	adcs	r0, r0
 8000386:	eb41 0101 	adc.w	r1, r1, r1
 800038a:	3c01      	subs	r4, #1
 800038c:	bf28      	it	cs
 800038e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000392:	d2e9      	bcs.n	8000368 <__adddf3+0x10c>
 8000394:	f091 0f00 	teq	r1, #0
 8000398:	bf04      	itt	eq
 800039a:	4601      	moveq	r1, r0
 800039c:	2000      	moveq	r0, #0
 800039e:	fab1 f381 	clz	r3, r1
 80003a2:	bf08      	it	eq
 80003a4:	3320      	addeq	r3, #32
 80003a6:	f1a3 030b 	sub.w	r3, r3, #11
 80003aa:	f1b3 0220 	subs.w	r2, r3, #32
 80003ae:	da0c      	bge.n	80003ca <__adddf3+0x16e>
 80003b0:	320c      	adds	r2, #12
 80003b2:	dd08      	ble.n	80003c6 <__adddf3+0x16a>
 80003b4:	f102 0c14 	add.w	ip, r2, #20
 80003b8:	f1c2 020c 	rsb	r2, r2, #12
 80003bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003c0:	fa21 f102 	lsr.w	r1, r1, r2
 80003c4:	e00c      	b.n	80003e0 <__adddf3+0x184>
 80003c6:	f102 0214 	add.w	r2, r2, #20
 80003ca:	bfd8      	it	le
 80003cc:	f1c2 0c20 	rsble	ip, r2, #32
 80003d0:	fa01 f102 	lsl.w	r1, r1, r2
 80003d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d8:	bfdc      	itt	le
 80003da:	ea41 010c 	orrle.w	r1, r1, ip
 80003de:	4090      	lslle	r0, r2
 80003e0:	1ae4      	subs	r4, r4, r3
 80003e2:	bfa2      	ittt	ge
 80003e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e8:	4329      	orrge	r1, r5
 80003ea:	bd30      	popge	{r4, r5, pc}
 80003ec:	ea6f 0404 	mvn.w	r4, r4
 80003f0:	3c1f      	subs	r4, #31
 80003f2:	da1c      	bge.n	800042e <__adddf3+0x1d2>
 80003f4:	340c      	adds	r4, #12
 80003f6:	dc0e      	bgt.n	8000416 <__adddf3+0x1ba>
 80003f8:	f104 0414 	add.w	r4, r4, #20
 80003fc:	f1c4 0220 	rsb	r2, r4, #32
 8000400:	fa20 f004 	lsr.w	r0, r0, r4
 8000404:	fa01 f302 	lsl.w	r3, r1, r2
 8000408:	ea40 0003 	orr.w	r0, r0, r3
 800040c:	fa21 f304 	lsr.w	r3, r1, r4
 8000410:	ea45 0103 	orr.w	r1, r5, r3
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f1c4 040c 	rsb	r4, r4, #12
 800041a:	f1c4 0220 	rsb	r2, r4, #32
 800041e:	fa20 f002 	lsr.w	r0, r0, r2
 8000422:	fa01 f304 	lsl.w	r3, r1, r4
 8000426:	ea40 0003 	orr.w	r0, r0, r3
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	fa21 f004 	lsr.w	r0, r1, r4
 8000432:	4629      	mov	r1, r5
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f094 0f00 	teq	r4, #0
 800043a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800043e:	bf06      	itte	eq
 8000440:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000444:	3401      	addeq	r4, #1
 8000446:	3d01      	subne	r5, #1
 8000448:	e74e      	b.n	80002e8 <__adddf3+0x8c>
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf18      	it	ne
 8000450:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000454:	d029      	beq.n	80004aa <__adddf3+0x24e>
 8000456:	ea94 0f05 	teq	r4, r5
 800045a:	bf08      	it	eq
 800045c:	ea90 0f02 	teqeq	r0, r2
 8000460:	d005      	beq.n	800046e <__adddf3+0x212>
 8000462:	ea54 0c00 	orrs.w	ip, r4, r0
 8000466:	bf04      	itt	eq
 8000468:	4619      	moveq	r1, r3
 800046a:	4610      	moveq	r0, r2
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	ea91 0f03 	teq	r1, r3
 8000472:	bf1e      	ittt	ne
 8000474:	2100      	movne	r1, #0
 8000476:	2000      	movne	r0, #0
 8000478:	bd30      	popne	{r4, r5, pc}
 800047a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800047e:	d105      	bne.n	800048c <__adddf3+0x230>
 8000480:	0040      	lsls	r0, r0, #1
 8000482:	4149      	adcs	r1, r1
 8000484:	bf28      	it	cs
 8000486:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800048a:	bd30      	pop	{r4, r5, pc}
 800048c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000490:	bf3c      	itt	cc
 8000492:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000496:	bd30      	popcc	{r4, r5, pc}
 8000498:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800049c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004a4:	f04f 0000 	mov.w	r0, #0
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf1a      	itte	ne
 80004b0:	4619      	movne	r1, r3
 80004b2:	4610      	movne	r0, r2
 80004b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b8:	bf1c      	itt	ne
 80004ba:	460b      	movne	r3, r1
 80004bc:	4602      	movne	r2, r0
 80004be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004c2:	bf06      	itte	eq
 80004c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c8:	ea91 0f03 	teqeq	r1, r3
 80004cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004d0:	bd30      	pop	{r4, r5, pc}
 80004d2:	bf00      	nop

080004d4 <__aeabi_ui2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f04f 0500 	mov.w	r5, #0
 80004ec:	f04f 0100 	mov.w	r1, #0
 80004f0:	e750      	b.n	8000394 <__adddf3+0x138>
 80004f2:	bf00      	nop

080004f4 <__aeabi_i2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800050c:	bf48      	it	mi
 800050e:	4240      	negmi	r0, r0
 8000510:	f04f 0100 	mov.w	r1, #0
 8000514:	e73e      	b.n	8000394 <__adddf3+0x138>
 8000516:	bf00      	nop

08000518 <__aeabi_f2d>:
 8000518:	0042      	lsls	r2, r0, #1
 800051a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800051e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000522:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000526:	bf1f      	itttt	ne
 8000528:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800052c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000530:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000534:	4770      	bxne	lr
 8000536:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800053a:	bf08      	it	eq
 800053c:	4770      	bxeq	lr
 800053e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000542:	bf04      	itt	eq
 8000544:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000548:	4770      	bxeq	lr
 800054a:	b530      	push	{r4, r5, lr}
 800054c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000550:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000554:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000558:	e71c      	b.n	8000394 <__adddf3+0x138>
 800055a:	bf00      	nop

0800055c <__aeabi_ul2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f04f 0500 	mov.w	r5, #0
 800056a:	e00a      	b.n	8000582 <__aeabi_l2d+0x16>

0800056c <__aeabi_l2d>:
 800056c:	ea50 0201 	orrs.w	r2, r0, r1
 8000570:	bf08      	it	eq
 8000572:	4770      	bxeq	lr
 8000574:	b530      	push	{r4, r5, lr}
 8000576:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800057a:	d502      	bpl.n	8000582 <__aeabi_l2d+0x16>
 800057c:	4240      	negs	r0, r0
 800057e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000582:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000586:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800058a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800058e:	f43f aed8 	beq.w	8000342 <__adddf3+0xe6>
 8000592:	f04f 0203 	mov.w	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005a2:	bf18      	it	ne
 80005a4:	3203      	addne	r2, #3
 80005a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005aa:	f1c2 0320 	rsb	r3, r2, #32
 80005ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ba:	ea40 000e 	orr.w	r0, r0, lr
 80005be:	fa21 f102 	lsr.w	r1, r1, r2
 80005c2:	4414      	add	r4, r2
 80005c4:	e6bd      	b.n	8000342 <__adddf3+0xe6>
 80005c6:	bf00      	nop

080005c8 <__aeabi_dmul>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005d6:	bf1d      	ittte	ne
 80005d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005dc:	ea94 0f0c 	teqne	r4, ip
 80005e0:	ea95 0f0c 	teqne	r5, ip
 80005e4:	f000 f8de 	bleq	80007a4 <__aeabi_dmul+0x1dc>
 80005e8:	442c      	add	r4, r5
 80005ea:	ea81 0603 	eor.w	r6, r1, r3
 80005ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005fa:	bf18      	it	ne
 80005fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000608:	d038      	beq.n	800067c <__aeabi_dmul+0xb4>
 800060a:	fba0 ce02 	umull	ip, lr, r0, r2
 800060e:	f04f 0500 	mov.w	r5, #0
 8000612:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000616:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800061a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800061e:	f04f 0600 	mov.w	r6, #0
 8000622:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000626:	f09c 0f00 	teq	ip, #0
 800062a:	bf18      	it	ne
 800062c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000630:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000634:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000638:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800063c:	d204      	bcs.n	8000648 <__aeabi_dmul+0x80>
 800063e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000642:	416d      	adcs	r5, r5
 8000644:	eb46 0606 	adc.w	r6, r6, r6
 8000648:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800064c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000650:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000654:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000658:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800065c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000660:	bf88      	it	hi
 8000662:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000666:	d81e      	bhi.n	80006a6 <__aeabi_dmul+0xde>
 8000668:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800066c:	bf08      	it	eq
 800066e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000672:	f150 0000 	adcs.w	r0, r0, #0
 8000676:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000680:	ea46 0101 	orr.w	r1, r6, r1
 8000684:	ea40 0002 	orr.w	r0, r0, r2
 8000688:	ea81 0103 	eor.w	r1, r1, r3
 800068c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000690:	bfc2      	ittt	gt
 8000692:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000696:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800069a:	bd70      	popgt	{r4, r5, r6, pc}
 800069c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a0:	f04f 0e00 	mov.w	lr, #0
 80006a4:	3c01      	subs	r4, #1
 80006a6:	f300 80ab 	bgt.w	8000800 <__aeabi_dmul+0x238>
 80006aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ae:	bfde      	ittt	le
 80006b0:	2000      	movle	r0, #0
 80006b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006b6:	bd70      	pople	{r4, r5, r6, pc}
 80006b8:	f1c4 0400 	rsb	r4, r4, #0
 80006bc:	3c20      	subs	r4, #32
 80006be:	da35      	bge.n	800072c <__aeabi_dmul+0x164>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc1b      	bgt.n	80006fc <__aeabi_dmul+0x134>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f305 	lsl.w	r3, r0, r5
 80006d0:	fa20 f004 	lsr.w	r0, r0, r4
 80006d4:	fa01 f205 	lsl.w	r2, r1, r5
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e8:	fa21 f604 	lsr.w	r6, r1, r4
 80006ec:	eb42 0106 	adc.w	r1, r2, r6
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 040c 	rsb	r4, r4, #12
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f304 	lsl.w	r3, r0, r4
 8000708:	fa20 f005 	lsr.w	r0, r0, r5
 800070c:	fa01 f204 	lsl.w	r2, r1, r4
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000718:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800071c:	f141 0100 	adc.w	r1, r1, #0
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 0520 	rsb	r5, r4, #32
 8000730:	fa00 f205 	lsl.w	r2, r0, r5
 8000734:	ea4e 0e02 	orr.w	lr, lr, r2
 8000738:	fa20 f304 	lsr.w	r3, r0, r4
 800073c:	fa01 f205 	lsl.w	r2, r1, r5
 8000740:	ea43 0302 	orr.w	r3, r3, r2
 8000744:	fa21 f004 	lsr.w	r0, r1, r4
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	fa21 f204 	lsr.w	r2, r1, r4
 8000750:	ea20 0002 	bic.w	r0, r0, r2
 8000754:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f094 0f00 	teq	r4, #0
 8000768:	d10f      	bne.n	800078a <__aeabi_dmul+0x1c2>
 800076a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800076e:	0040      	lsls	r0, r0, #1
 8000770:	eb41 0101 	adc.w	r1, r1, r1
 8000774:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3c01      	subeq	r4, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1a6>
 800077e:	ea41 0106 	orr.w	r1, r1, r6
 8000782:	f095 0f00 	teq	r5, #0
 8000786:	bf18      	it	ne
 8000788:	4770      	bxne	lr
 800078a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800078e:	0052      	lsls	r2, r2, #1
 8000790:	eb43 0303 	adc.w	r3, r3, r3
 8000794:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3d01      	subeq	r5, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1c6>
 800079e:	ea43 0306 	orr.w	r3, r3, r6
 80007a2:	4770      	bx	lr
 80007a4:	ea94 0f0c 	teq	r4, ip
 80007a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ac:	bf18      	it	ne
 80007ae:	ea95 0f0c 	teqne	r5, ip
 80007b2:	d00c      	beq.n	80007ce <__aeabi_dmul+0x206>
 80007b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007be:	d1d1      	bne.n	8000764 <__aeabi_dmul+0x19c>
 80007c0:	ea81 0103 	eor.w	r1, r1, r3
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	f04f 0000 	mov.w	r0, #0
 80007cc:	bd70      	pop	{r4, r5, r6, pc}
 80007ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d2:	bf06      	itte	eq
 80007d4:	4610      	moveq	r0, r2
 80007d6:	4619      	moveq	r1, r3
 80007d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007dc:	d019      	beq.n	8000812 <__aeabi_dmul+0x24a>
 80007de:	ea94 0f0c 	teq	r4, ip
 80007e2:	d102      	bne.n	80007ea <__aeabi_dmul+0x222>
 80007e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e8:	d113      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007ea:	ea95 0f0c 	teq	r5, ip
 80007ee:	d105      	bne.n	80007fc <__aeabi_dmul+0x234>
 80007f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007f4:	bf1c      	itt	ne
 80007f6:	4610      	movne	r0, r2
 80007f8:	4619      	movne	r1, r3
 80007fa:	d10a      	bne.n	8000812 <__aeabi_dmul+0x24a>
 80007fc:	ea81 0103 	eor.w	r1, r1, r3
 8000800:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000804:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000808:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	bd70      	pop	{r4, r5, r6, pc}
 8000812:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000816:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800081a:	bd70      	pop	{r4, r5, r6, pc}

0800081c <__aeabi_ddiv>:
 800081c:	b570      	push	{r4, r5, r6, lr}
 800081e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000822:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000826:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800082a:	bf1d      	ittte	ne
 800082c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000830:	ea94 0f0c 	teqne	r4, ip
 8000834:	ea95 0f0c 	teqne	r5, ip
 8000838:	f000 f8a7 	bleq	800098a <__aeabi_ddiv+0x16e>
 800083c:	eba4 0405 	sub.w	r4, r4, r5
 8000840:	ea81 0e03 	eor.w	lr, r1, r3
 8000844:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000848:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800084c:	f000 8088 	beq.w	8000960 <__aeabi_ddiv+0x144>
 8000850:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000854:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000858:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800085c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000860:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000864:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000868:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800086c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000870:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000874:	429d      	cmp	r5, r3
 8000876:	bf08      	it	eq
 8000878:	4296      	cmpeq	r6, r2
 800087a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800087e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000882:	d202      	bcs.n	800088a <__aeabi_ddiv+0x6e>
 8000884:	085b      	lsrs	r3, r3, #1
 8000886:	ea4f 0232 	mov.w	r2, r2, rrx
 800088a:	1ab6      	subs	r6, r6, r2
 800088c:	eb65 0503 	sbc.w	r5, r5, r3
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800089a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008fc:	d018      	beq.n	8000930 <__aeabi_ddiv+0x114>
 80008fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000902:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000906:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800090a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800090e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000912:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000916:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800091a:	d1c0      	bne.n	800089e <__aeabi_ddiv+0x82>
 800091c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000920:	d10b      	bne.n	800093a <__aeabi_ddiv+0x11e>
 8000922:	ea41 0100 	orr.w	r1, r1, r0
 8000926:	f04f 0000 	mov.w	r0, #0
 800092a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800092e:	e7b6      	b.n	800089e <__aeabi_ddiv+0x82>
 8000930:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000934:	bf04      	itt	eq
 8000936:	4301      	orreq	r1, r0
 8000938:	2000      	moveq	r0, #0
 800093a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800093e:	bf88      	it	hi
 8000940:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000944:	f63f aeaf 	bhi.w	80006a6 <__aeabi_dmul+0xde>
 8000948:	ebb5 0c03 	subs.w	ip, r5, r3
 800094c:	bf04      	itt	eq
 800094e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000952:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000956:	f150 0000 	adcs.w	r0, r0, #0
 800095a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800095e:	bd70      	pop	{r4, r5, r6, pc}
 8000960:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000964:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000968:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800096c:	bfc2      	ittt	gt
 800096e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000972:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000976:	bd70      	popgt	{r4, r5, r6, pc}
 8000978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800097c:	f04f 0e00 	mov.w	lr, #0
 8000980:	3c01      	subs	r4, #1
 8000982:	e690      	b.n	80006a6 <__aeabi_dmul+0xde>
 8000984:	ea45 0e06 	orr.w	lr, r5, r6
 8000988:	e68d      	b.n	80006a6 <__aeabi_dmul+0xde>
 800098a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800098e:	ea94 0f0c 	teq	r4, ip
 8000992:	bf08      	it	eq
 8000994:	ea95 0f0c 	teqeq	r5, ip
 8000998:	f43f af3b 	beq.w	8000812 <__aeabi_dmul+0x24a>
 800099c:	ea94 0f0c 	teq	r4, ip
 80009a0:	d10a      	bne.n	80009b8 <__aeabi_ddiv+0x19c>
 80009a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009a6:	f47f af34 	bne.w	8000812 <__aeabi_dmul+0x24a>
 80009aa:	ea95 0f0c 	teq	r5, ip
 80009ae:	f47f af25 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009b2:	4610      	mov	r0, r2
 80009b4:	4619      	mov	r1, r3
 80009b6:	e72c      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009b8:	ea95 0f0c 	teq	r5, ip
 80009bc:	d106      	bne.n	80009cc <__aeabi_ddiv+0x1b0>
 80009be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c2:	f43f aefd 	beq.w	80007c0 <__aeabi_dmul+0x1f8>
 80009c6:	4610      	mov	r0, r2
 80009c8:	4619      	mov	r1, r3
 80009ca:	e722      	b.n	8000812 <__aeabi_dmul+0x24a>
 80009cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d0:	bf18      	it	ne
 80009d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009d6:	f47f aec5 	bne.w	8000764 <__aeabi_dmul+0x19c>
 80009da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009de:	f47f af0d 	bne.w	80007fc <__aeabi_dmul+0x234>
 80009e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009e6:	f47f aeeb 	bne.w	80007c0 <__aeabi_dmul+0x1f8>
 80009ea:	e712      	b.n	8000812 <__aeabi_dmul+0x24a>

080009ec <__gedf2>:
 80009ec:	f04f 3cff 	mov.w	ip, #4294967295
 80009f0:	e006      	b.n	8000a00 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__ledf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	e002      	b.n	8000a00 <__cmpdf2+0x4>
 80009fa:	bf00      	nop

080009fc <__cmpdf2>:
 80009fc:	f04f 0c01 	mov.w	ip, #1
 8000a00:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a16:	d01b      	beq.n	8000a50 <__cmpdf2+0x54>
 8000a18:	b001      	add	sp, #4
 8000a1a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a1e:	bf0c      	ite	eq
 8000a20:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a24:	ea91 0f03 	teqne	r1, r3
 8000a28:	bf02      	ittt	eq
 8000a2a:	ea90 0f02 	teqeq	r0, r2
 8000a2e:	2000      	moveq	r0, #0
 8000a30:	4770      	bxeq	lr
 8000a32:	f110 0f00 	cmn.w	r0, #0
 8000a36:	ea91 0f03 	teq	r1, r3
 8000a3a:	bf58      	it	pl
 8000a3c:	4299      	cmppl	r1, r3
 8000a3e:	bf08      	it	eq
 8000a40:	4290      	cmpeq	r0, r2
 8000a42:	bf2c      	ite	cs
 8000a44:	17d8      	asrcs	r0, r3, #31
 8000a46:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a4a:	f040 0001 	orr.w	r0, r0, #1
 8000a4e:	4770      	bx	lr
 8000a50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__cmpdf2+0x64>
 8000a5a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a5e:	d107      	bne.n	8000a70 <__cmpdf2+0x74>
 8000a60:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a68:	d1d6      	bne.n	8000a18 <__cmpdf2+0x1c>
 8000a6a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a6e:	d0d3      	beq.n	8000a18 <__cmpdf2+0x1c>
 8000a70:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdrcmple>:
 8000a78:	4684      	mov	ip, r0
 8000a7a:	4610      	mov	r0, r2
 8000a7c:	4662      	mov	r2, ip
 8000a7e:	468c      	mov	ip, r1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4663      	mov	r3, ip
 8000a84:	e000      	b.n	8000a88 <__aeabi_cdcmpeq>
 8000a86:	bf00      	nop

08000a88 <__aeabi_cdcmpeq>:
 8000a88:	b501      	push	{r0, lr}
 8000a8a:	f7ff ffb7 	bl	80009fc <__cmpdf2>
 8000a8e:	2800      	cmp	r0, #0
 8000a90:	bf48      	it	mi
 8000a92:	f110 0f00 	cmnmi.w	r0, #0
 8000a96:	bd01      	pop	{r0, pc}

08000a98 <__aeabi_dcmpeq>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff fff4 	bl	8000a88 <__aeabi_cdcmpeq>
 8000aa0:	bf0c      	ite	eq
 8000aa2:	2001      	moveq	r0, #1
 8000aa4:	2000      	movne	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmplt>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffea 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ab4:	bf34      	ite	cc
 8000ab6:	2001      	movcc	r0, #1
 8000ab8:	2000      	movcs	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmple>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffe0 	bl	8000a88 <__aeabi_cdcmpeq>
 8000ac8:	bf94      	ite	ls
 8000aca:	2001      	movls	r0, #1
 8000acc:	2000      	movhi	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmpge>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffce 	bl	8000a78 <__aeabi_cdrcmple>
 8000adc:	bf94      	ite	ls
 8000ade:	2001      	movls	r0, #1
 8000ae0:	2000      	movhi	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmpgt>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffc4 	bl	8000a78 <__aeabi_cdrcmple>
 8000af0:	bf34      	ite	cc
 8000af2:	2001      	movcc	r0, #1
 8000af4:	2000      	movcs	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpun>:
 8000afc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x10>
 8000b06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0a:	d10a      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b14:	d102      	bne.n	8000b1c <__aeabi_dcmpun+0x20>
 8000b16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1a:	d102      	bne.n	8000b22 <__aeabi_dcmpun+0x26>
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	f04f 0001 	mov.w	r0, #1
 8000b26:	4770      	bx	lr

08000b28 <__aeabi_d2iz>:
 8000b28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b30:	d215      	bcs.n	8000b5e <__aeabi_d2iz+0x36>
 8000b32:	d511      	bpl.n	8000b58 <__aeabi_d2iz+0x30>
 8000b34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b3c:	d912      	bls.n	8000b64 <__aeabi_d2iz+0x3c>
 8000b3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b52:	bf18      	it	ne
 8000b54:	4240      	negne	r0, r0
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d105      	bne.n	8000b70 <__aeabi_d2iz+0x48>
 8000b64:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	bf08      	it	eq
 8000b6a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b970 	b.w	8000e70 <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	460f      	mov	r7, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d14a      	bne.n	8000c4e <__udivmoddi4+0xa6>
 8000bb8:	428a      	cmp	r2, r1
 8000bba:	4694      	mov	ip, r2
 8000bbc:	d965      	bls.n	8000c8a <__udivmoddi4+0xe2>
 8000bbe:	fab2 f382 	clz	r3, r2
 8000bc2:	b143      	cbz	r3, 8000bd6 <__udivmoddi4+0x2e>
 8000bc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bc8:	f1c3 0220 	rsb	r2, r3, #32
 8000bcc:	409f      	lsls	r7, r3
 8000bce:	fa20 f202 	lsr.w	r2, r0, r2
 8000bd2:	4317      	orrs	r7, r2
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bda:	fa1f f58c 	uxth.w	r5, ip
 8000bde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000be2:	0c22      	lsrs	r2, r4, #16
 8000be4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000be8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bec:	fb01 f005 	mul.w	r0, r1, r5
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x62>
 8000bf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000bf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000bfc:	f080 811c 	bcs.w	8000e38 <__udivmoddi4+0x290>
 8000c00:	4290      	cmp	r0, r2
 8000c02:	f240 8119 	bls.w	8000e38 <__udivmoddi4+0x290>
 8000c06:	3902      	subs	r1, #2
 8000c08:	4462      	add	r2, ip
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	b2a4      	uxth	r4, r4
 8000c0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1a:	fb00 f505 	mul.w	r5, r0, r5
 8000c1e:	42a5      	cmp	r5, r4
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x90>
 8000c22:	eb1c 0404 	adds.w	r4, ip, r4
 8000c26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2a:	f080 8107 	bcs.w	8000e3c <__udivmoddi4+0x294>
 8000c2e:	42a5      	cmp	r5, r4
 8000c30:	f240 8104 	bls.w	8000e3c <__udivmoddi4+0x294>
 8000c34:	4464      	add	r4, ip
 8000c36:	3802      	subs	r0, #2
 8000c38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	2100      	movs	r1, #0
 8000c40:	b11e      	cbz	r6, 8000c4a <__udivmoddi4+0xa2>
 8000c42:	40dc      	lsrs	r4, r3
 8000c44:	2300      	movs	r3, #0
 8000c46:	e9c6 4300 	strd	r4, r3, [r6]
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d908      	bls.n	8000c64 <__udivmoddi4+0xbc>
 8000c52:	2e00      	cmp	r6, #0
 8000c54:	f000 80ed 	beq.w	8000e32 <__udivmoddi4+0x28a>
 8000c58:	2100      	movs	r1, #0
 8000c5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c5e:	4608      	mov	r0, r1
 8000c60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c64:	fab3 f183 	clz	r1, r3
 8000c68:	2900      	cmp	r1, #0
 8000c6a:	d149      	bne.n	8000d00 <__udivmoddi4+0x158>
 8000c6c:	42ab      	cmp	r3, r5
 8000c6e:	d302      	bcc.n	8000c76 <__udivmoddi4+0xce>
 8000c70:	4282      	cmp	r2, r0
 8000c72:	f200 80f8 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000c76:	1a84      	subs	r4, r0, r2
 8000c78:	eb65 0203 	sbc.w	r2, r5, r3
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	4617      	mov	r7, r2
 8000c80:	2e00      	cmp	r6, #0
 8000c82:	d0e2      	beq.n	8000c4a <__udivmoddi4+0xa2>
 8000c84:	e9c6 4700 	strd	r4, r7, [r6]
 8000c88:	e7df      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000c8a:	b902      	cbnz	r2, 8000c8e <__udivmoddi4+0xe6>
 8000c8c:	deff      	udf	#255	; 0xff
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f040 8090 	bne.w	8000db8 <__udivmoddi4+0x210>
 8000c98:	1a8a      	subs	r2, r1, r2
 8000c9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ca8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cac:	0c22      	lsrs	r2, r4, #16
 8000cae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cb2:	fb0e f005 	mul.w	r0, lr, r5
 8000cb6:	4290      	cmp	r0, r2
 8000cb8:	d908      	bls.n	8000ccc <__udivmoddi4+0x124>
 8000cba:	eb1c 0202 	adds.w	r2, ip, r2
 8000cbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cc2:	d202      	bcs.n	8000cca <__udivmoddi4+0x122>
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	f200 80cb 	bhi.w	8000e60 <__udivmoddi4+0x2b8>
 8000cca:	4645      	mov	r5, r8
 8000ccc:	1a12      	subs	r2, r2, r0
 8000cce:	b2a4      	uxth	r4, r4
 8000cd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000cd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cdc:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x14e>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x14c>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	f200 80bb 	bhi.w	8000e6a <__udivmoddi4+0x2c2>
 8000cf4:	4610      	mov	r0, r2
 8000cf6:	eba4 040e 	sub.w	r4, r4, lr
 8000cfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cfe:	e79f      	b.n	8000c40 <__udivmoddi4+0x98>
 8000d00:	f1c1 0720 	rsb	r7, r1, #32
 8000d04:	408b      	lsls	r3, r1
 8000d06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d12:	fa20 f307 	lsr.w	r3, r0, r7
 8000d16:	40fd      	lsrs	r5, r7
 8000d18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d1c:	4323      	orrs	r3, r4
 8000d1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d22:	fa1f fe8c 	uxth.w	lr, ip
 8000d26:	fb09 5518 	mls	r5, r9, r8, r5
 8000d2a:	0c1c      	lsrs	r4, r3, #16
 8000d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d30:	fb08 f50e 	mul.w	r5, r8, lr
 8000d34:	42a5      	cmp	r5, r4
 8000d36:	fa02 f201 	lsl.w	r2, r2, r1
 8000d3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d3e:	d90b      	bls.n	8000d58 <__udivmoddi4+0x1b0>
 8000d40:	eb1c 0404 	adds.w	r4, ip, r4
 8000d44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d48:	f080 8088 	bcs.w	8000e5c <__udivmoddi4+0x2b4>
 8000d4c:	42a5      	cmp	r5, r4
 8000d4e:	f240 8085 	bls.w	8000e5c <__udivmoddi4+0x2b4>
 8000d52:	f1a8 0802 	sub.w	r8, r8, #2
 8000d56:	4464      	add	r4, ip
 8000d58:	1b64      	subs	r4, r4, r5
 8000d5a:	b29d      	uxth	r5, r3
 8000d5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d60:	fb09 4413 	mls	r4, r9, r3, r4
 8000d64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d6c:	45a6      	cmp	lr, r4
 8000d6e:	d908      	bls.n	8000d82 <__udivmoddi4+0x1da>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d78:	d26c      	bcs.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7a:	45a6      	cmp	lr, r4
 8000d7c:	d96a      	bls.n	8000e54 <__udivmoddi4+0x2ac>
 8000d7e:	3b02      	subs	r3, #2
 8000d80:	4464      	add	r4, ip
 8000d82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d86:	fba3 9502 	umull	r9, r5, r3, r2
 8000d8a:	eba4 040e 	sub.w	r4, r4, lr
 8000d8e:	42ac      	cmp	r4, r5
 8000d90:	46c8      	mov	r8, r9
 8000d92:	46ae      	mov	lr, r5
 8000d94:	d356      	bcc.n	8000e44 <__udivmoddi4+0x29c>
 8000d96:	d053      	beq.n	8000e40 <__udivmoddi4+0x298>
 8000d98:	b156      	cbz	r6, 8000db0 <__udivmoddi4+0x208>
 8000d9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000d9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000da2:	fa04 f707 	lsl.w	r7, r4, r7
 8000da6:	40ca      	lsrs	r2, r1
 8000da8:	40cc      	lsrs	r4, r1
 8000daa:	4317      	orrs	r7, r2
 8000dac:	e9c6 7400 	strd	r7, r4, [r6]
 8000db0:	4618      	mov	r0, r3
 8000db2:	2100      	movs	r1, #0
 8000db4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db8:	f1c3 0120 	rsb	r1, r3, #32
 8000dbc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dc0:	fa20 f201 	lsr.w	r2, r0, r1
 8000dc4:	fa25 f101 	lsr.w	r1, r5, r1
 8000dc8:	409d      	lsls	r5, r3
 8000dca:	432a      	orrs	r2, r5
 8000dcc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd8:	fb07 1510 	mls	r5, r7, r0, r1
 8000ddc:	0c11      	lsrs	r1, r2, #16
 8000dde:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000de2:	fb00 f50e 	mul.w	r5, r0, lr
 8000de6:	428d      	cmp	r5, r1
 8000de8:	fa04 f403 	lsl.w	r4, r4, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x258>
 8000dee:	eb1c 0101 	adds.w	r1, ip, r1
 8000df2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000df6:	d22f      	bcs.n	8000e58 <__udivmoddi4+0x2b0>
 8000df8:	428d      	cmp	r5, r1
 8000dfa:	d92d      	bls.n	8000e58 <__udivmoddi4+0x2b0>
 8000dfc:	3802      	subs	r0, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1b49      	subs	r1, r1, r5
 8000e02:	b292      	uxth	r2, r2
 8000e04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e08:	fb07 1115 	mls	r1, r7, r5, r1
 8000e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e10:	fb05 f10e 	mul.w	r1, r5, lr
 8000e14:	4291      	cmp	r1, r2
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x282>
 8000e18:	eb1c 0202 	adds.w	r2, ip, r2
 8000e1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e20:	d216      	bcs.n	8000e50 <__udivmoddi4+0x2a8>
 8000e22:	4291      	cmp	r1, r2
 8000e24:	d914      	bls.n	8000e50 <__udivmoddi4+0x2a8>
 8000e26:	3d02      	subs	r5, #2
 8000e28:	4462      	add	r2, ip
 8000e2a:	1a52      	subs	r2, r2, r1
 8000e2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e30:	e738      	b.n	8000ca4 <__udivmoddi4+0xfc>
 8000e32:	4631      	mov	r1, r6
 8000e34:	4630      	mov	r0, r6
 8000e36:	e708      	b.n	8000c4a <__udivmoddi4+0xa2>
 8000e38:	4639      	mov	r1, r7
 8000e3a:	e6e6      	b.n	8000c0a <__udivmoddi4+0x62>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	e6fb      	b.n	8000c38 <__udivmoddi4+0x90>
 8000e40:	4548      	cmp	r0, r9
 8000e42:	d2a9      	bcs.n	8000d98 <__udivmoddi4+0x1f0>
 8000e44:	ebb9 0802 	subs.w	r8, r9, r2
 8000e48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	e7a3      	b.n	8000d98 <__udivmoddi4+0x1f0>
 8000e50:	4645      	mov	r5, r8
 8000e52:	e7ea      	b.n	8000e2a <__udivmoddi4+0x282>
 8000e54:	462b      	mov	r3, r5
 8000e56:	e794      	b.n	8000d82 <__udivmoddi4+0x1da>
 8000e58:	4640      	mov	r0, r8
 8000e5a:	e7d1      	b.n	8000e00 <__udivmoddi4+0x258>
 8000e5c:	46d0      	mov	r8, sl
 8000e5e:	e77b      	b.n	8000d58 <__udivmoddi4+0x1b0>
 8000e60:	3d02      	subs	r5, #2
 8000e62:	4462      	add	r2, ip
 8000e64:	e732      	b.n	8000ccc <__udivmoddi4+0x124>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e70a      	b.n	8000c80 <__udivmoddi4+0xd8>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	e742      	b.n	8000cf6 <__udivmoddi4+0x14e>

08000e70 <__aeabi_idiv0>:
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop

08000e74 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e7e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000e82:	4905      	ldr	r1, [pc, #20]	; (8000e98 <LL_EXTI_EnableIT_32_63+0x24>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr
 8000e98:	58000800 	.word	0x58000800

08000e9c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ea8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eaa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4313      	orrs	r3, r2
 8000eb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000eb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <LL_C2_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB2_GRP1_PERIPH_AES1 (*)
  * @note  (*) Not supported by all the devices
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b085      	sub	sp, #20
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB2ENR, Periphs);
 8000ed6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eda:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ede:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	f8c1 314c 	str.w	r3, [r1, #332]	; 0x14c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB2ENR, Periphs);
 8000eea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000eee:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
}
 8000efa:	bf00      	nop
 8000efc:	3714      	adds	r7, #20
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <APPD_Init>:
static void APPD_BleDtbCfg( void );
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void APPD_Init( void )
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_Init */
#if (CFG_DEBUGGER_SUPPORTED == 1)
  /**
   * Keep debugger enabled while in any low power mode
   */
  HAL_DBGMCU_EnableDBGSleepMode();
 8000f0a:	f004 fd47 	bl	800599c <HAL_DBGMCU_EnableDBGSleepMode>
  HAL_DBGMCU_EnableDBGStopMode();
 8000f0e:	f004 fd4b 	bl	80059a8 <HAL_DBGMCU_EnableDBGStopMode>

  /***************** ENABLE DEBUGGER *************************************/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_48);
 8000f12:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8000f16:	f7ff ffad 	bl	8000e74 <LL_EXTI_EnableIT_32_63>
  HAL_DBGMCU_DisableDBGStandbyMode();

#endif /* (CFG_DEBUGGER_SUPPORTED == 1) */

#if(CFG_DEBUG_TRACE != 0)
  DbgTraceInit();
 8000f1a:	f00b fead 	bl	800cc78 <DbgTraceInit>
#endif

  APPD_SetCPU2GpioConfig( );
 8000f1e:	f000 f821 	bl	8000f64 <APPD_SetCPU2GpioConfig>
  APPD_BleDtbCfg( );
 8000f22:	f000 f8c1 	bl	80010a8 <APPD_BleDtbCfg>

/* USER CODE END APPD_Init */
  return;
 8000f26:	bf00      	nop
}
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <APPD_EnableCPU2>:

void APPD_EnableCPU2( void )
{
 8000f2c:	b5b0      	push	{r4, r5, r7, lr}
 8000f2e:	b088      	sub	sp, #32
 8000f30:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_EnableCPU2 */
  SHCI_C2_DEBUG_Init_Cmd_Packet_t DebugCmdPacket =
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <APPD_EnableCPU2+0x34>)
 8000f34:	1d3c      	adds	r4, r7, #4
 8000f36:	461d      	mov	r5, r3
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000f40:	c403      	stmia	r4!, {r0, r1}
 8000f42:	8022      	strh	r2, [r4, #0]
 8000f44:	3402      	adds	r4, #2
 8000f46:	0c13      	lsrs	r3, r2, #16
 8000f48:	7023      	strb	r3, [r4, #0]
    NBR_OF_TRACES_CONFIG_PARAMETERS,
    NBR_OF_GENERAL_CONFIG_PARAMETERS}
  };

  /**< Traces channel initialization */
  TL_TRACES_Init( );
 8000f4a:	f00d fbe9 	bl	800e720 <TL_TRACES_Init>

  /** GPIO DEBUG Initialization */
  SHCI_C2_DEBUG_Init( &DebugCmdPacket  );
 8000f4e:	1d3b      	adds	r3, r7, #4
 8000f50:	4618      	mov	r0, r3
 8000f52:	f00c fa3a 	bl	800d3ca <SHCI_C2_DEBUG_Init>

/* USER CODE END APPD_EnableCPU2 */
  return;
 8000f56:	bf00      	nop
}
 8000f58:	3720      	adds	r7, #32
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bdb0      	pop	{r4, r5, r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	08011820 	.word	0x08011820

08000f64 <APPD_SetCPU2GpioConfig>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void APPD_SetCPU2GpioConfig( void )
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
/* USER CODE BEGIN APPD_SetCPU2GpioConfig */
  GPIO_InitTypeDef gpio_config = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  uint8_t local_loop;
  uint16_t gpioa_pin_list;
  uint16_t gpiob_pin_list;
  uint16_t gpioc_pin_list;

  gpioa_pin_list = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	83bb      	strh	r3, [r7, #28]
  gpiob_pin_list = 0;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	837b      	strh	r3, [r7, #26]
  gpioc_pin_list = 0;
 8000f80:	2300      	movs	r3, #0
 8000f82:	833b      	strh	r3, [r7, #24]

  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	77fb      	strb	r3, [r7, #31]
 8000f88:	e036      	b.n	8000ff8 <APPD_SetCPU2GpioConfig+0x94>
  {
    if( aGpioConfigList[local_loop].enable != 0)
 8000f8a:	7ffb      	ldrb	r3, [r7, #31]
 8000f8c:	4a43      	ldr	r2, [pc, #268]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f8e:	00db      	lsls	r3, r3, #3
 8000f90:	4413      	add	r3, r2
 8000f92:	799b      	ldrb	r3, [r3, #6]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d02c      	beq.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
    {
      switch((uint32_t)aGpioConfigList[local_loop].port)
 8000f98:	7ffb      	ldrb	r3, [r7, #31]
 8000f9a:	4a40      	ldr	r2, [pc, #256]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000f9c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8000fa0:	4a3f      	ldr	r2, [pc, #252]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d01b      	beq.n	8000fde <APPD_SetCPU2GpioConfig+0x7a>
 8000fa6:	4a3e      	ldr	r2, [pc, #248]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d821      	bhi.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
 8000fac:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fb0:	d003      	beq.n	8000fba <APPD_SetCPU2GpioConfig+0x56>
 8000fb2:	4a3c      	ldr	r2, [pc, #240]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d009      	beq.n	8000fcc <APPD_SetCPU2GpioConfig+0x68>
        case (uint32_t)GPIOC:
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
          break;

        default:
          break;
 8000fb8:	e01a      	b.n	8000ff0 <APPD_SetCPU2GpioConfig+0x8c>
            gpioa_pin_list |= aGpioConfigList[local_loop].pin;
 8000fba:	7ffb      	ldrb	r3, [r7, #31]
 8000fbc:	4a37      	ldr	r2, [pc, #220]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4413      	add	r3, r2
 8000fc2:	889a      	ldrh	r2, [r3, #4]
 8000fc4:	8bbb      	ldrh	r3, [r7, #28]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	83bb      	strh	r3, [r7, #28]
          break;
 8000fca:	e012      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpiob_pin_list |= aGpioConfigList[local_loop].pin;
 8000fcc:	7ffb      	ldrb	r3, [r7, #31]
 8000fce:	4a33      	ldr	r2, [pc, #204]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fd0:	00db      	lsls	r3, r3, #3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	889a      	ldrh	r2, [r3, #4]
 8000fd6:	8b7b      	ldrh	r3, [r7, #26]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	837b      	strh	r3, [r7, #26]
          break;
 8000fdc:	e009      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
            gpioc_pin_list |= aGpioConfigList[local_loop].pin;
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
 8000fe0:	4a2e      	ldr	r2, [pc, #184]	; (800109c <APPD_SetCPU2GpioConfig+0x138>)
 8000fe2:	00db      	lsls	r3, r3, #3
 8000fe4:	4413      	add	r3, r2
 8000fe6:	889a      	ldrh	r2, [r3, #4]
 8000fe8:	8b3b      	ldrh	r3, [r7, #24]
 8000fea:	4313      	orrs	r3, r2
 8000fec:	833b      	strh	r3, [r7, #24]
          break;
 8000fee:	e000      	b.n	8000ff2 <APPD_SetCPU2GpioConfig+0x8e>
          break;
 8000ff0:	bf00      	nop
  for(local_loop = 0 ; local_loop < GPIO_CFG_NBR_OF_FEATURES; local_loop++)
 8000ff2:	7ffb      	ldrb	r3, [r7, #31]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	77fb      	strb	r3, [r7, #31]
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	2b25      	cmp	r3, #37	; 0x25
 8000ffc:	d9c5      	bls.n	8000f8a <APPD_SetCPU2GpioConfig+0x26>
      }
    }
  }

  gpio_config.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  gpio_config.Mode = GPIO_MODE_OUTPUT_PP;
 8001002:	2301      	movs	r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
  gpio_config.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	613b      	str	r3, [r7, #16]

  if(gpioa_pin_list != 0)
 800100a:	8bbb      	ldrh	r3, [r7, #28]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d014      	beq.n	800103a <APPD_SetCPU2GpioConfig+0xd6>
  {
    gpio_config.Pin = gpioa_pin_list;
 8001010:	8bbb      	ldrh	r3, [r7, #28]
 8001012:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	2001      	movs	r0, #1
 8001016:	f7ff ff41 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOA_CLK_ENABLE();
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ff57 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOA, &gpio_config);
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001028:	f005 f9f2 	bl	8006410 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOA, gpioa_pin_list, GPIO_PIN_RESET);
 800102c:	8bbb      	ldrh	r3, [r7, #28]
 800102e:	2200      	movs	r2, #0
 8001030:	4619      	mov	r1, r3
 8001032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001036:	f005 fb5b 	bl	80066f0 <HAL_GPIO_WritePin>
  }

  if(gpiob_pin_list != 0)
 800103a:	8b7b      	ldrh	r3, [r7, #26]
 800103c:	2b00      	cmp	r3, #0
 800103e:	d012      	beq.n	8001066 <APPD_SetCPU2GpioConfig+0x102>
  {
    gpio_config.Pin = gpiob_pin_list;
 8001040:	8b7b      	ldrh	r3, [r7, #26]
 8001042:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001044:	2002      	movs	r0, #2
 8001046:	f7ff ff29 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOB_CLK_ENABLE();
 800104a:	2002      	movs	r0, #2
 800104c:	f7ff ff3f 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOB, &gpio_config);
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	4619      	mov	r1, r3
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001056:	f005 f9db 	bl	8006410 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOB, gpiob_pin_list, GPIO_PIN_RESET);
 800105a:	8b7b      	ldrh	r3, [r7, #26]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	4810      	ldr	r0, [pc, #64]	; (80010a4 <APPD_SetCPU2GpioConfig+0x140>)
 8001062:	f005 fb45 	bl	80066f0 <HAL_GPIO_WritePin>
  }

  if(gpioc_pin_list != 0)
 8001066:	8b3b      	ldrh	r3, [r7, #24]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d013      	beq.n	8001094 <APPD_SetCPU2GpioConfig+0x130>
  {
    gpio_config.Pin = gpioc_pin_list;
 800106c:	8b3b      	ldrh	r3, [r7, #24]
 800106e:	607b      	str	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001070:	2004      	movs	r0, #4
 8001072:	f7ff ff13 	bl	8000e9c <LL_AHB2_GRP1_EnableClock>
    __HAL_RCC_C2GPIOC_CLK_ENABLE();
 8001076:	2004      	movs	r0, #4
 8001078:	f7ff ff29 	bl	8000ece <LL_C2_AHB2_GRP1_EnableClock>
    HAL_GPIO_Init(GPIOC, &gpio_config);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4807      	ldr	r0, [pc, #28]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 8001082:	f005 f9c5 	bl	8006410 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(GPIOC, gpioc_pin_list, GPIO_PIN_RESET);
 8001086:	8b3b      	ldrh	r3, [r7, #24]
 8001088:	2200      	movs	r2, #0
 800108a:	4619      	mov	r1, r3
 800108c:	4804      	ldr	r0, [pc, #16]	; (80010a0 <APPD_SetCPU2GpioConfig+0x13c>)
 800108e:	f005 fb2f 	bl	80066f0 <HAL_GPIO_WritePin>
  }
  
/* USER CODE END APPD_SetCPU2GpioConfig */
  return;
 8001092:	bf00      	nop
 8001094:	bf00      	nop
}
 8001096:	3720      	adds	r7, #32
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	08012e24 	.word	0x08012e24
 80010a0:	48000800 	.word	0x48000800
 80010a4:	48000400 	.word	0x48000400

080010a8 <APPD_BleDtbCfg>:

static void APPD_BleDtbCfg( void )
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    HAL_GPIO_Init(GPIOB, &gpio_config);
  }
#endif

/* USER CODE END APPD_BleDtbCfg */
  return;
 80010ac:	bf00      	nop
}
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <DbgOutputInit>:
 * WRAP FUNCTIONS
 *
*************************************************************/
#if(CFG_DEBUG_TRACE != 0)
void DbgOutputInit( void )
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
#endif
  }
  else if (CFG_DEBUG_TRACE_UART == hw_uart1)
  {
#if(CFG_HW_USART1_ENABLED == 1)
    MX_USART1_UART_Init();
 80010ba:	f001 fd3b 	bl	8002b34 <MX_USART1_UART_Init>
#endif
  }
#endif

/* USER CODE END DbgOutputInit */
  return;
 80010be:	bf00      	nop
}
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <DbgOutputTraces>:

void DbgOutputTraces(  uint8_t *p_data, uint16_t size, void (*cb)(void) )
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b084      	sub	sp, #16
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	60f8      	str	r0, [r7, #12]
 80010ca:	460b      	mov	r3, r1
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	817b      	strh	r3, [r7, #10]
/* USER CODE END DbgOutputTraces */
  HW_UART_Transmit_DMA(CFG_DEBUG_TRACE_UART, p_data, size, cb);
 80010d0:	897a      	ldrh	r2, [r7, #10]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68f9      	ldr	r1, [r7, #12]
 80010d6:	2000      	movs	r0, #0
 80010d8:	f001 fb7c 	bl	80027d4 <HW_UART_Transmit_DMA>

/* USER CODE END DbgOutputTraces */
  return;
 80010dc:	bf00      	nop
}
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LL_C2_PWR_SetPowerMode>:
  *
  *         (*) Not available on devices STM32WB15xx, STM32WB10xx, STM32WB1Mxx
  * @retval None
  */
__STATIC_INLINE void LL_C2_PWR_SetPowerMode(uint32_t LowPowerMode)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, LowPowerMode);
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010f2:	f023 0207 	bic.w	r2, r3, #7
 80010f6:	4905      	ldr	r1, [pc, #20]	; (800110c <LL_C2_PWR_SetPowerMode+0x28>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	58000400 	.word	0x58000400

08001110 <LL_EXTI_EnableIT_32_63>:
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001118:	4b06      	ldr	r3, [pc, #24]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 800111a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800111e:	4905      	ldr	r1, [pc, #20]	; (8001134 <LL_EXTI_EnableIT_32_63+0x24>)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4313      	orrs	r3, r2
 8001124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001132:	4770      	bx	lr
 8001134:	58000800 	.word	0x58000800

08001138 <LL_RCC_HSE_SetCapacitorTuning>:
  * @rmtoll HSECR        HSETUNE       LL_RCC_HSE_SetCapacitorTuning
  * @param  Value Between Min_Data = 0 and Max_Data = 63
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_SetCapacitorTuning(uint32_t Value)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RCC->HSECR, HSE_CONTROL_UNLOCK_KEY);
 8001140:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <LL_RCC_HSE_SetCapacitorTuning+0x38>)
 8001146:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  MODIFY_REG(RCC->HSECR, RCC_HSECR_HSETUNE, Value << RCC_HSECR_HSETUNE_Pos);
 800114a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800114e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001152:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	021b      	lsls	r3, r3, #8
 800115a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800115e:	4313      	orrs	r3, r2
 8001160:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	cafecafe 	.word	0xcafecafe

08001174 <LL_RCC_SetClkAfterWakeFromStop>:
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_MSI
  *         @arg @ref LL_RCC_STOP_WAKEUPCLOCK_HSI
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClkAfterWakeFromStop(uint32_t Clock)
{
 8001174:	b480      	push	{r7}
 8001176:	b083      	sub	sp, #12
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 800117c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8001186:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	4313      	orrs	r3, r2
 800118e:	608b      	str	r3, [r1, #8]
}
 8001190:	bf00      	nop
 8001192:	370c      	adds	r7, #12
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <LL_RCC_ForceBackupDomainReset>:
  * @brief  Force the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <LL_RCC_ReleaseBackupDomainReset>:
  * @brief  Release the Backup domain reset
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80011c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <LL_RCC_IsActiveFlag_PINRST>:
  * @brief  Check if RCC flag Pin reset is set or not.
  * @rmtoll CSR          PINRSTF       LL_RCC_IsActiveFlag_PINRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PINRST(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_PINRSTF) == (RCC_CSR_PINRSTF)) ? 1UL : 0UL);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80011f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80011f4:	d101      	bne.n	80011fa <LL_RCC_IsActiveFlag_PINRST+0x1a>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <LL_RCC_IsActiveFlag_PINRST+0x1c>
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <LL_RCC_IsActiveFlag_SFTRST>:
  * @brief  Check if RCC flag Software reset is set or not.
  * @rmtoll CSR          SFTRSTF       LL_RCC_IsActiveFlag_SFTRST
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SFTRST(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_SFTRSTF) == (RCC_CSR_SFTRSTF)) ? 1UL : 0UL);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001216:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800121a:	d101      	bne.n	8001220 <LL_RCC_IsActiveFlag_SFTRST+0x1a>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <LL_RCC_IsActiveFlag_SFTRST+0x1c>
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <LL_AHB3_GRP1_EnableClock>:
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8001234:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001238:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800123a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4313      	orrs	r3, r2
 8001242:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8001244:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4013      	ands	r3, r2
 800124e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001250:	68fb      	ldr	r3, [r7, #12]
}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
	...

08001260 <LL_DBGMCU_GetDeviceID>:
  * @note   For STM32WBxxxx devices, the device ID is 0x495
  * @rmtoll DBGMCU_IDCODE DEV_ID        LL_DBGMCU_GetDeviceID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFF (ex: device ID is 0x495)
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetDeviceID(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_DEV_ID));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <LL_DBGMCU_GetDeviceID+0x18>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 800126c:	4618      	mov	r0, r3
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	e0042000 	.word	0xe0042000

0800127c <LL_DBGMCU_GetRevisionID>:
  * @note   This field indicates the revision of the device.
  * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_DBGMCU_GetRevisionID(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(DBGMCU->IDCODE, DBGMCU_IDCODE_REV_ID) >> DBGMCU_IDCODE_REV_ID_Pos);
 8001280:	4b04      	ldr	r3, [pc, #16]	; (8001294 <LL_DBGMCU_GetRevisionID+0x18>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	0c1b      	lsrs	r3, r3, #16
 8001286:	b29b      	uxth	r3, r3
}
 8001288:	4618      	mov	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	e0042000 	.word	0xe0042000

08001298 <LL_C1_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	041b      	lsls	r3, r3, #16
 80012aa:	431a      	orrs	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	605a      	str	r2, [r3, #4]
}
 80012b0:	bf00      	nop
 80012b2:	370c      	adds	r7, #12
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <LL_C1_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	431a      	orrs	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	605a      	str	r2, [r3, #4]
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <LL_C2_IPCC_DisableTransmitChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableTransmitChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel << (IPCC_C2MR_CH1FM_Pos));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	695a      	ldr	r2, [r3, #20]
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	041b      	lsls	r3, r3, #16
 80012f0:	431a      	orrs	r2, r3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	615a      	str	r2, [r3, #20]
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr

08001302 <LL_C2_IPCC_DisableReceiveChannel>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_DisableReceiveChannel(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001302:	b480      	push	{r7}
 8001304:	b083      	sub	sp, #12
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
 800130a:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C2MR, Channel);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	695a      	ldr	r2, [r3, #20]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	615a      	str	r2, [r3, #20]
}
 8001318:	bf00      	nop
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <LL_C1_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C1_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	683a      	ldr	r2, [r7, #0]
 8001332:	609a      	str	r2, [r3, #8]
}
 8001334:	bf00      	nop
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_C2_IPCC_ClearFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval None
  */
__STATIC_INLINE void LL_C2_IPCC_ClearFlag_CHx(IPCC_TypeDef *IPCCx, uint32_t Channel)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C2SCR, Channel);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	683a      	ldr	r2, [r7, #0]
 800134e:	619a      	str	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr

0800135c <LL_LPM_EnableSleep>:
  * @brief  Processor uses sleep as its low power mode
  * @rmtoll SCB_SCR      SLEEPDEEP     LL_LPM_EnableSleep
  * @retval None
  */
__STATIC_INLINE void LL_LPM_EnableSleep(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001360:	4b05      	ldr	r3, [pc, #20]	; (8001378 <LL_LPM_EnableSleep+0x1c>)
 8001362:	691b      	ldr	r3, [r3, #16]
 8001364:	4a04      	ldr	r2, [pc, #16]	; (8001378 <LL_LPM_EnableSleep+0x1c>)
 8001366:	f023 0304 	bic.w	r3, r3, #4
 800136a:	6113      	str	r3, [r2, #16]
}
 800136c:	bf00      	nop
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <LL_RTC_EnableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_EnableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableWriteProtection(RTC_TypeDef *RTCx)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	22ff      	movs	r2, #255	; 0xff
 8001388:	625a      	str	r2, [r3, #36]	; 0x24
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <LL_RTC_DisableWriteProtection>:
  * @rmtoll WPR          KEY           LL_RTC_DisableWriteProtection
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	22ca      	movs	r2, #202	; 0xca
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2253      	movs	r2, #83	; 0x53
 80013a8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_RTC_WAKEUP_SetClock>:
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE
  *         @arg @ref LL_RTC_WAKEUPCLOCK_CKSPRE_WUT
  * @retval None
  */
__STATIC_INLINE void LL_RTC_WAKEUP_SetClock(RTC_TypeDef *RTCx, uint32_t WakeupClock)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 0207 	bic.w	r2, r3, #7
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <MX_APPE_Config>:

/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void MX_APPE_Config(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /**
   * The OPTVERR flag is wrongly set at power on
   * It shall be cleared before using any HAL_FLASH_xxx() api
   */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80013e0:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <MX_APPE_Config+0x18>)
 80013e2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013e6:	611a      	str	r2, [r3, #16]

  /**
   * Reset some configurations so that the system behave in the same way
   * when either out of nReset or Power On
   */
  Reset_Device();
 80013e8:	f000 f830 	bl	800144c <Reset_Device>

  /* Configure HSE Tuning */
  Config_HSE();
 80013ec:	f000 f870 	bl	80014d0 <Config_HSE>

  return;
 80013f0:	bf00      	nop
}
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	58004000 	.word	0x58004000

080013f8 <MX_APPE_Init>:

void MX_APPE_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  System_Init();       /**< System initialization */
 80013fc:	f000 f87c 	bl	80014f8 <System_Init>

  SystemPower_Config(); /**< Configure the system Power Mode */
 8001400:	f000 f894 	bl	800152c <SystemPower_Config>

  HW_TS_Init(hw_ts_InitMode_Full, &hrtc); /**< Initialize the TimerServer */
 8001404:	4909      	ldr	r1, [pc, #36]	; (800142c <MX_APPE_Init+0x34>)
 8001406:	2000      	movs	r0, #0
 8001408:	f000 ff3e 	bl	8002288 <HW_TS_Init>

/* USER CODE BEGIN APPE_Init_1 */
  APPD_Init();
 800140c:	f7ff fd7b 	bl	8000f06 <APPD_Init>

  /**
   * The Standby mode should not be entered before the initialization is over
   * The default state of the Low Power Manager is to allow the Standby Mode so an request is needed here
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP, UTIL_LPM_DISABLE);
 8001410:	2101      	movs	r1, #1
 8001412:	2001      	movs	r0, #1
 8001414:	f00d fa22 	bl	800e85c <UTIL_LPM_SetOffMode>

  Led_Init();
 8001418:	f000 f9ea 	bl	80017f0 <Led_Init>

  Button_Init();
 800141c:	f000 f9f8 	bl	8001810 <Button_Init>
  
  RxUART_Init();
 8001420:	f000 fa86 	bl	8001930 <RxUART_Init>

/* USER CODE END APPE_Init_1 */
  appe_Tl_Init();	/* Initialize all transport layers */
 8001424:	f000 f890 	bl	8001548 <appe_Tl_Init>
   * This system event is received with APPE_SysUserEvtRx()
   */
/* USER CODE BEGIN APPE_Init_2 */

/* USER CODE END APPE_Init_2 */
   return;
 8001428:	bf00      	nop
}
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000668 	.word	0x20000668

08001430 <Init_Smps>:

void Init_Smps(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  LL_PWR_SMPS_SetStartupCurrent(LL_PWR_SMPS_STARTUP_CURRENT_80MA);
  LL_PWR_SMPS_SetOutputVoltageLevel(LL_PWR_SMPS_OUTPUT_VOLTAGE_1V40);
  LL_PWR_SMPS_Enable();
#endif /* CFG_USE_SMPS != 0 */

  return;
 8001434:	bf00      	nop
}
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <Init_Exti>:

void Init_Exti(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* Enable IPCC(36), HSEM(38) wakeup interrupts on CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_36 | LL_EXTI_LINE_38);
 8001442:	2050      	movs	r0, #80	; 0x50
 8001444:	f7ff fe64 	bl	8001110 <LL_EXTI_EnableIT_32_63>

  return;
 8001448:	bf00      	nop
}
 800144a:	bd80      	pop	{r7, pc}

0800144c <Reset_Device>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Reset_Device(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
#if (CFG_HW_RESET_BY_FW == 1)
  Reset_BackupDomain();
 8001450:	f000 f804 	bl	800145c <Reset_BackupDomain>

  Reset_IPCC();
 8001454:	f000 f81a 	bl	800148c <Reset_IPCC>
#endif /* CFG_HW_RESET_BY_FW == 1 */

  return;
 8001458:	bf00      	nop
}
 800145a:	bd80      	pop	{r7, pc}

0800145c <Reset_BackupDomain>:

#if (CFG_HW_RESET_BY_FW == 1)
static void Reset_BackupDomain(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  if ((LL_RCC_IsActiveFlag_PINRST() != FALSE) && (LL_RCC_IsActiveFlag_SFTRST() == FALSE))
 8001460:	f7ff febe 	bl	80011e0 <LL_RCC_IsActiveFlag_PINRST>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00d      	beq.n	8001486 <Reset_BackupDomain+0x2a>
 800146a:	f7ff fecc 	bl	8001206 <LL_RCC_IsActiveFlag_SFTRST>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d108      	bne.n	8001486 <Reset_BackupDomain+0x2a>
  {
    HAL_PWR_EnableBkUpAccess(); /**< Enable access to the RTC registers */
 8001474:	f006 f848 	bl	8007508 <HAL_PWR_EnableBkUpAccess>

    /**
     *  Write twice the value to flush the APB-AHB bridge
     *  This bit shall be written in the register before writing the next one
     */
    HAL_PWR_EnableBkUpAccess();
 8001478:	f006 f846 	bl	8007508 <HAL_PWR_EnableBkUpAccess>

    __HAL_RCC_BACKUPRESET_FORCE();
 800147c:	f7ff fe8e 	bl	800119c <LL_RCC_ForceBackupDomainReset>
    __HAL_RCC_BACKUPRESET_RELEASE();
 8001480:	f7ff fe9d 	bl	80011be <LL_RCC_ReleaseBackupDomainReset>
  }

  return;
 8001484:	bf00      	nop
 8001486:	bf00      	nop
}
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <Reset_IPCC>:

static void Reset_IPCC(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock(LL_AHB3_GRP1_PERIPH_IPCC);
 8001490:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8001494:	f7ff feca 	bl	800122c <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_ClearFlag_CHx(
 8001498:	213f      	movs	r1, #63	; 0x3f
 800149a:	480c      	ldr	r0, [pc, #48]	; (80014cc <Reset_IPCC+0x40>)
 800149c:	f7ff ff42 	bl	8001324 <LL_C1_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_ClearFlag_CHx(
 80014a0:	213f      	movs	r1, #63	; 0x3f
 80014a2:	480a      	ldr	r0, [pc, #40]	; (80014cc <Reset_IPCC+0x40>)
 80014a4:	f7ff ff4c 	bl	8001340 <LL_C2_IPCC_ClearFlag_CHx>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableTransmitChannel(
 80014a8:	213f      	movs	r1, #63	; 0x3f
 80014aa:	4808      	ldr	r0, [pc, #32]	; (80014cc <Reset_IPCC+0x40>)
 80014ac:	f7ff fef4 	bl	8001298 <LL_C1_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableTransmitChannel(
 80014b0:	213f      	movs	r1, #63	; 0x3f
 80014b2:	4806      	ldr	r0, [pc, #24]	; (80014cc <Reset_IPCC+0x40>)
 80014b4:	f7ff ff13 	bl	80012de <LL_C2_IPCC_DisableTransmitChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C1_IPCC_DisableReceiveChannel(
 80014b8:	213f      	movs	r1, #63	; 0x3f
 80014ba:	4804      	ldr	r0, [pc, #16]	; (80014cc <Reset_IPCC+0x40>)
 80014bc:	f7ff fefe 	bl	80012bc <LL_C1_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  LL_C2_IPCC_DisableReceiveChannel(
 80014c0:	213f      	movs	r1, #63	; 0x3f
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <Reset_IPCC+0x40>)
 80014c4:	f7ff ff1d 	bl	8001302 <LL_C2_IPCC_DisableReceiveChannel>
      IPCC,
      LL_IPCC_CHANNEL_1 | LL_IPCC_CHANNEL_2 | LL_IPCC_CHANNEL_3 | LL_IPCC_CHANNEL_4
      | LL_IPCC_CHANNEL_5 | LL_IPCC_CHANNEL_6);

  return;
 80014c8:	bf00      	nop
}
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58000c00 	.word	0x58000c00

080014d0 <Config_HSE>:
#endif /* CFG_HW_RESET_BY_FW == 1 */

static void Config_HSE(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
    OTP_ID0_t * p_otp;

  /**
   * Read HSE_Tuning from OTP
   */
  p_otp = (OTP_ID0_t *) OTP_Read(0);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f00b fe08 	bl	800d0ec <OTP_Read>
 80014dc:	6078      	str	r0, [r7, #4]
  if (p_otp)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d005      	beq.n	80014f0 <Config_HSE+0x20>
  {
    LL_RCC_HSE_SetCapacitorTuning(p_otp->hse_tuning);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	799b      	ldrb	r3, [r3, #6]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fe25 	bl	8001138 <LL_RCC_HSE_SetCapacitorTuning>
  }

  return;
 80014ee:	bf00      	nop
 80014f0:	bf00      	nop
}
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}

080014f8 <System_Init>:

static void System_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  Init_Smps();
 80014fc:	f7ff ff98 	bl	8001430 <Init_Smps>

  Init_Exti();
 8001500:	f7ff ff9d 	bl	800143e <Init_Exti>

  Init_Rtc();
 8001504:	f000 f802 	bl	800150c <Init_Rtc>

  return;
 8001508:	bf00      	nop
}
 800150a:	bd80      	pop	{r7, pc}

0800150c <Init_Rtc>:

static void Init_Rtc(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* Disable RTC registers write protection */
  LL_RTC_DisableWriteProtection(RTC);
 8001510:	4805      	ldr	r0, [pc, #20]	; (8001528 <Init_Rtc+0x1c>)
 8001512:	f7ff ff40 	bl	8001396 <LL_RTC_DisableWriteProtection>

  LL_RTC_WAKEUP_SetClock(RTC, CFG_RTC_WUCKSEL_DIVIDER);
 8001516:	2100      	movs	r1, #0
 8001518:	4803      	ldr	r0, [pc, #12]	; (8001528 <Init_Rtc+0x1c>)
 800151a:	f7ff ff4c 	bl	80013b6 <LL_RTC_WAKEUP_SetClock>

  /* Enable RTC registers write protection */
  LL_RTC_EnableWriteProtection(RTC);
 800151e:	4802      	ldr	r0, [pc, #8]	; (8001528 <Init_Rtc+0x1c>)
 8001520:	f7ff ff2c 	bl	800137c <LL_RTC_EnableWriteProtection>

  return;
 8001524:	bf00      	nop
}
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40002800 	.word	0x40002800

0800152c <SystemPower_Config>:
 *
 * @param  None
 * @retval None
 */
static void SystemPower_Config(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /**
   * Select HSI as system clock source after Wake Up from Stop mode
   */
  LL_RCC_SetClkAfterWakeFromStop(LL_RCC_STOP_WAKEUPCLOCK_HSI);
 8001530:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001534:	f7ff fe1e 	bl	8001174 <LL_RCC_SetClkAfterWakeFromStop>

  /* Initialize low power manager */
  UTIL_LPM_Init();
 8001538:	f00d f97e 	bl	800e838 <UTIL_LPM_Init>
  /* Initialize the CPU2 reset value before starting CPU2 with C2BOOT */
  LL_C2_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 800153c:	2004      	movs	r0, #4
 800153e:	f7ff fdd1 	bl	80010e4 <LL_C2_PWR_SetPowerMode>
   *  Enable USB power
   */
  HAL_PWREx_EnableVddUSB();
#endif /* CFG_USB_INTERFACE_ENABLE != 0 */

  return;
 8001542:	bf00      	nop
}
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <appe_Tl_Init>:

static void appe_Tl_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
  TL_MM_Config_t tl_mm_config;
  SHCI_TL_HciInitConf_t SHci_Tl_Init_Conf;
  /**< Reference table initialization */
  TL_Init();
 800154e:	f00c ff31 	bl	800e3b4 <TL_Init>

  /**< System channel initialization */
  UTIL_SEQ_RegTask(1<< CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, shci_user_evt_proc);
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <appe_Tl_Init+0x50>)
 8001554:	2100      	movs	r1, #0
 8001556:	2040      	movs	r0, #64	; 0x40
 8001558:	f00d faac 	bl	800eab4 <UTIL_SEQ_RegTask>
  SHci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&SystemCmdBuffer;
 800155c:	4b0f      	ldr	r3, [pc, #60]	; (800159c <appe_Tl_Init+0x54>)
 800155e:	603b      	str	r3, [r7, #0]
  SHci_Tl_Init_Conf.StatusNotCallBack = APPE_SysStatusNot;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <appe_Tl_Init+0x58>)
 8001562:	607b      	str	r3, [r7, #4]
  shci_init(APPE_SysUserEvtRx, (void*) &SHci_Tl_Init_Conf);
 8001564:	463b      	mov	r3, r7
 8001566:	4619      	mov	r1, r3
 8001568:	480e      	ldr	r0, [pc, #56]	; (80015a4 <appe_Tl_Init+0x5c>)
 800156a:	f00c f809 	bl	800d580 <shci_init>

  /**< Memory Manager channel initialization */
  tl_mm_config.p_BleSpareEvtBuffer = BleSpareEvtBuffer;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <appe_Tl_Init+0x60>)
 8001570:	60bb      	str	r3, [r7, #8]
  tl_mm_config.p_SystemSpareEvtBuffer = SystemSpareEvtBuffer;
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <appe_Tl_Init+0x64>)
 8001574:	60fb      	str	r3, [r7, #12]
  tl_mm_config.p_AsynchEvtPool = EvtPool;
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <appe_Tl_Init+0x68>)
 8001578:	613b      	str	r3, [r7, #16]
  tl_mm_config.AsynchEvtPoolSize = POOL_SIZE;
 800157a:	f240 533c 	movw	r3, #1340	; 0x53c
 800157e:	617b      	str	r3, [r7, #20]
  TL_MM_Init(&tl_mm_config);
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	4618      	mov	r0, r3
 8001586:	f00d f857 	bl	800e638 <TL_MM_Init>

  TL_Enable();
 800158a:	f00c ff0d 	bl	800e3a8 <TL_Enable>

  return;
 800158e:	bf00      	nop
}
 8001590:	3720      	adds	r7, #32
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	0800d5b9 	.word	0x0800d5b9
 800159c:	20030734 	.word	0x20030734
 80015a0:	080015b5 	.word	0x080015b5
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	2003094c 	.word	0x2003094c
 80015ac:	20030840 	.word	0x20030840
 80015b0:	200301f8 	.word	0x200301f8

080015b4 <APPE_SysStatusNot>:

static void APPE_SysStatusNot(SHCI_TL_CmdStatus_t status)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  UNUSED(status);
  return;
 80015be:	bf00      	nop
}
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr
	...

080015cc <APPE_SysUserEvtRx>:
 * The buffer shall not be released
 * (eg ((tSHCI_UserEvtRxParam*)pPayload)->status shall be set to SHCI_TL_UserEventFlow_Disable)
 * When the status is not filled, the buffer is released by default
 */
static void APPE_SysUserEvtRx(void * pPayload)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b088      	sub	sp, #32
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  WirelessFwInfo_t WirelessInfo;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	330b      	adds	r3, #11
 80015da:	61fb      	str	r3, [r7, #28]

  switch(p_sys_event->subevtcode)
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	881b      	ldrh	r3, [r3, #0]
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	f5a3 4312 	sub.w	r3, r3, #37376	; 0x9200
 80015e6:	2b07      	cmp	r3, #7
 80015e8:	d860      	bhi.n	80016ac <APPE_SysUserEvtRx+0xe0>
 80015ea:	a201      	add	r2, pc, #4	; (adr r2, 80015f0 <APPE_SysUserEvtRx+0x24>)
 80015ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015f0:	08001611 	.word	0x08001611
 80015f4:	08001653 	.word	0x08001653
 80015f8:	08001661 	.word	0x08001661
 80015fc:	080016ad 	.word	0x080016ad
 8001600:	0800167d 	.word	0x0800167d
 8001604:	0800168d 	.word	0x0800168d
 8001608:	08001695 	.word	0x08001695
 800160c:	080016a5 	.word	0x080016a5
  {
  case SHCI_SUB_EVT_CODE_READY:
    /* Read the firmware version of both the wireless firmware and the FUS */
    SHCI_GetWirelessFwInfo(&WirelessInfo);
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	4618      	mov	r0, r3
 8001616:	f00b ff05 	bl	800d424 <SHCI_GetWirelessFwInfo>
    APP_DBG_MSG("Wireless Firmware version %d.%d.%d\n", WirelessInfo.VersionMajor, WirelessInfo.VersionMinor, WirelessInfo.VersionSub);
 800161a:	7b3b      	ldrb	r3, [r7, #12]
 800161c:	4619      	mov	r1, r3
 800161e:	7b7b      	ldrb	r3, [r7, #13]
 8001620:	461a      	mov	r2, r3
 8001622:	7bbb      	ldrb	r3, [r7, #14]
 8001624:	4824      	ldr	r0, [pc, #144]	; (80016b8 <APPE_SysUserEvtRx+0xec>)
 8001626:	f00e f8af 	bl	800f788 <iprintf>
    APP_DBG_MSG("Wireless Firmware build %d\n", WirelessInfo.VersionReleaseType);
 800162a:	7c3b      	ldrb	r3, [r7, #16]
 800162c:	4619      	mov	r1, r3
 800162e:	4823      	ldr	r0, [pc, #140]	; (80016bc <APPE_SysUserEvtRx+0xf0>)
 8001630:	f00e f8aa 	bl	800f788 <iprintf>
    APP_DBG_MSG("FUS version %d.%d.%d\n", WirelessInfo.FusVersionMajor, WirelessInfo.FusVersionMinor, WirelessInfo.FusVersionSub);
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	4619      	mov	r1, r3
 8001638:	7dfb      	ldrb	r3, [r7, #23]
 800163a:	461a      	mov	r2, r3
 800163c:	7e3b      	ldrb	r3, [r7, #24]
 800163e:	4820      	ldr	r0, [pc, #128]	; (80016c0 <APPE_SysUserEvtRx+0xf4>)
 8001640:	f00e f8a2 	bl	800f788 <iprintf>

    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY\n\r");
 8001644:	481f      	ldr	r0, [pc, #124]	; (80016c4 <APPE_SysUserEvtRx+0xf8>)
 8001646:	f00e f89f 	bl	800f788 <iprintf>
    APPE_SysEvtReadyProcessing(pPayload);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f870 	bl	8001730 <APPE_SysEvtReadyProcessing>
    break;
 8001650:	e02d      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_ERROR_NOTIF:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF \n\r");
 8001652:	481d      	ldr	r0, [pc, #116]	; (80016c8 <APPE_SysUserEvtRx+0xfc>)
 8001654:	f00e f898 	bl	800f788 <iprintf>
    APPE_SysEvtError(pPayload);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f843 	bl	80016e4 <APPE_SysEvtError>
    break;
 800165e:	e026      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_BLE_NVM_RAM_UPDATE -- BLE NVM RAM HAS BEEN UPDATED BY CPU2 \n");
 8001660:	481a      	ldr	r0, [pc, #104]	; (80016cc <APPE_SysUserEvtRx+0x100>)
 8001662:	f00e f8ff 	bl	800f864 <puts>
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->StartAddress,
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 800166a:	6819      	ldr	r1, [r3, #0]
                ((SHCI_C2_BleNvmRamUpdate_Evt_t*)p_sys_event->payload)->Size);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	3302      	adds	r3, #2
    APP_DBG_MSG("     - StartAddress = %lx , Size = %ld\n",
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	461a      	mov	r2, r3
 8001674:	4816      	ldr	r0, [pc, #88]	; (80016d0 <APPE_SysUserEvtRx+0x104>)
 8001676:	f00e f887 	bl	800f788 <iprintf>
    break;
 800167a:	e018      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_WRITE:
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
                ((SHCI_C2_NvmStartWrite_Evt_t*)p_sys_event->payload)->NumberOfWords);
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3302      	adds	r3, #2
    APP_DBG_MSG("==>> SHCI_SUB_EVT_NVM_START_WRITE : NumberOfWords = %ld\n",
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4619      	mov	r1, r3
 8001684:	4813      	ldr	r0, [pc, #76]	; (80016d4 <APPE_SysUserEvtRx+0x108>)
 8001686:	f00e f87f 	bl	800f788 <iprintf>
    break;
 800168a:	e010      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_WRITE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_WRITE\n\r");
 800168c:	4812      	ldr	r0, [pc, #72]	; (80016d8 <APPE_SysUserEvtRx+0x10c>)
 800168e:	f00e f87b 	bl	800f788 <iprintf>
    break;
 8001692:	e00c      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_START_ERASE:
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
                ((SHCI_C2_NvmStartErase_Evt_t*)p_sys_event->payload)->NumberOfSectors);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	3302      	adds	r3, #2
    APP_DBG_MSG("==>>SHCI_SUB_EVT_NVM_START_ERASE : NumberOfSectors = %ld\n",
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4619      	mov	r1, r3
 800169c:	480f      	ldr	r0, [pc, #60]	; (80016dc <APPE_SysUserEvtRx+0x110>)
 800169e:	f00e f873 	bl	800f788 <iprintf>
    break;
 80016a2:	e004      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  case SHCI_SUB_EVT_NVM_END_ERASE:
    APP_DBG_MSG(">>== SHCI_SUB_EVT_NVM_END_ERASE\n\r");
 80016a4:	480e      	ldr	r0, [pc, #56]	; (80016e0 <APPE_SysUserEvtRx+0x114>)
 80016a6:	f00e f86f 	bl	800f788 <iprintf>
    break;
 80016aa:	e000      	b.n	80016ae <APPE_SysUserEvtRx+0xe2>

  default:
    break;
 80016ac:	bf00      	nop
  }

  return;
 80016ae:	bf00      	nop
}
 80016b0:	3720      	adds	r7, #32
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	0801183c 	.word	0x0801183c
 80016bc:	08011860 	.word	0x08011860
 80016c0:	0801187c 	.word	0x0801187c
 80016c4:	08011894 	.word	0x08011894
 80016c8:	080118b4 	.word	0x080118b4
 80016cc:	080118d8 	.word	0x080118d8
 80016d0:	08011928 	.word	0x08011928
 80016d4:	08011950 	.word	0x08011950
 80016d8:	0801198c 	.word	0x0801198c
 80016dc:	080119b0 	.word	0x080119b0
 80016e0:	080119ec 	.word	0x080119ec

080016e4 <APPE_SysEvtError>:
 * @param  ErrorCode  : errorCode detected by the M0 firmware
 *
 * @retval None
 */
static void APPE_SysEvtError(void * pPayload)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SCHI_SystemErrCode_t *p_sys_error_code;

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	330b      	adds	r3, #11
 80016f2:	60fb      	str	r3, [r7, #12]
  p_sys_error_code = (SCHI_SystemErrCode_t*) p_sys_event->payload;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	3302      	adds	r3, #2
 80016f8:	60bb      	str	r3, [r7, #8]

  APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON %x \n\r",(*p_sys_error_code));
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	4619      	mov	r1, r3
 8001700:	4808      	ldr	r0, [pc, #32]	; (8001724 <APPE_SysEvtError+0x40>)
 8001702:	f00e f841 	bl	800f788 <iprintf>

  if ((*p_sys_error_code) == ERR_BLE_INIT)
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	781b      	ldrb	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d103      	bne.n	8001716 <APPE_SysEvtError+0x32>
  {
    /* Error during BLE stack initialization */
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - ERR_BLE_INIT \n");
 800170e:	4806      	ldr	r0, [pc, #24]	; (8001728 <APPE_SysEvtError+0x44>)
 8001710:	f00e f8a8 	bl	800f864 <puts>
  }
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
  }
  return;
 8001714:	e003      	b.n	800171e <APPE_SysEvtError+0x3a>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_ERROR_NOTIF WITH REASON - BLE ERROR \n");
 8001716:	4805      	ldr	r0, [pc, #20]	; (800172c <APPE_SysEvtError+0x48>)
 8001718:	f00e f8a4 	bl	800f864 <puts>
  return;
 800171c:	bf00      	nop
}
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	08011a10 	.word	0x08011a10
 8001728:	08011a40 	.word	0x08011a40
 800172c:	08011a7c 	.word	0x08011a7c

08001730 <APPE_SysEvtReadyProcessing>:

static void APPE_SysEvtReadyProcessing(void * pPayload)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  TL_AsynchEvt_t *p_sys_event;
  SHCI_C2_Ready_Evt_t *p_sys_ready_event;

  SHCI_C2_CONFIG_Cmd_Param_t config_param = {0};
 8001738:	f107 0308 	add.w	r3, r7, #8
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
  uint32_t RevisionID=0;
 8001746:	2300      	movs	r3, #0
 8001748:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t DeviceID=0;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]

  p_sys_event = (TL_AsynchEvt_t*)(((tSHCI_UserEvtRxParam*)pPayload)->pckt->evtserial.evt.payload);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	330b      	adds	r3, #11
 8001754:	61fb      	str	r3, [r7, #28]
  p_sys_ready_event = (SHCI_C2_Ready_Evt_t*) p_sys_event->payload;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3302      	adds	r3, #2
 800175a:	61bb      	str	r3, [r7, #24]

  if (p_sys_ready_event->sysevt_ready_rsp == WIRELESS_FW_RUNNING)
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d128      	bne.n	80017b6 <APPE_SysEvtReadyProcessing+0x86>
  {
    /**
    * The wireless firmware is running on the CPU2
    */
    APP_DBG_MSG(">>== WIRELESS_FW_RUNNING \n");
 8001764:	481d      	ldr	r0, [pc, #116]	; (80017dc <APPE_SysEvtReadyProcessing+0xac>)
 8001766:	f00e f87d 	bl	800f864 <puts>

    /* Traces channel initialization */
    APPD_EnableCPU2();
 800176a:	f7ff fbdf 	bl	8000f2c <APPD_EnableCPU2>

    /* Enable all events Notification */
    config_param.PayloadCmdSize = SHCI_C2_CONFIG_PAYLOAD_CMD_SIZE;
 800176e:	230f      	movs	r3, #15
 8001770:	723b      	strb	r3, [r7, #8]
    config_param.EvtMask1 = SHCI_C2_CONFIG_EVTMASK1_BIT0_ERROR_NOTIF_ENABLE
 8001772:	237f      	movs	r3, #127	; 0x7f
 8001774:	72bb      	strb	r3, [r7, #10]
    * @brief  Return the device revision identifier
    * @note   This field indicates the revision of the device.
    * @rmtoll DBGMCU_IDCODE REV_ID        LL_DBGMCU_GetRevisionID
    * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
    */
    RevisionID = LL_DBGMCU_GetRevisionID();
 8001776:	f7ff fd81 	bl	800127c <LL_DBGMCU_GetRevisionID>
 800177a:	6278      	str	r0, [r7, #36]	; 0x24

    APP_DBG_MSG(">>== DBGMCU_GetRevisionID= %lx \n\r", RevisionID);
 800177c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800177e:	4818      	ldr	r0, [pc, #96]	; (80017e0 <APPE_SysEvtReadyProcessing+0xb0>)
 8001780:	f00e f802 	bl	800f788 <iprintf>

    config_param.RevisionID = (uint16_t)RevisionID;
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	b29b      	uxth	r3, r3
 8001788:	82bb      	strh	r3, [r7, #20]

    DeviceID = LL_DBGMCU_GetDeviceID();
 800178a:	f7ff fd69 	bl	8001260 <LL_DBGMCU_GetDeviceID>
 800178e:	6238      	str	r0, [r7, #32]
    APP_DBG_MSG(">>== DBGMCU_GetDeviceID= %lx \n\r", DeviceID);
 8001790:	6a39      	ldr	r1, [r7, #32]
 8001792:	4814      	ldr	r0, [pc, #80]	; (80017e4 <APPE_SysEvtReadyProcessing+0xb4>)
 8001794:	f00d fff8 	bl	800f788 <iprintf>
    config_param.DeviceID = (uint16_t)DeviceID;
 8001798:	6a3b      	ldr	r3, [r7, #32]
 800179a:	b29b      	uxth	r3, r3
 800179c:	82fb      	strh	r3, [r7, #22]
    (void)SHCI_C2_Config(&config_param);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	4618      	mov	r0, r3
 80017a4:	f00b fe28 	bl	800d3f8 <SHCI_C2_Config>

    APP_BLE_Init();
 80017a8:	f001 ff76 	bl	8003698 <APP_BLE_Init>
    UTIL_LPM_SetOffMode(1U << CFG_LPM_APP, UTIL_LPM_ENABLE);
 80017ac:	2100      	movs	r1, #0
 80017ae:	2001      	movs	r0, #1
 80017b0:	f00d f854 	bl	800e85c <UTIL_LPM_SetOffMode>
  else
  {
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
  }

  return;
 80017b4:	e00e      	b.n	80017d4 <APPE_SysEvtReadyProcessing+0xa4>
  else if (p_sys_ready_event->sysevt_ready_rsp == FUS_FW_RUNNING)
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d106      	bne.n	80017cc <APPE_SysEvtReadyProcessing+0x9c>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - FUS_FW_RUNNING \n\r");
 80017be:	480a      	ldr	r0, [pc, #40]	; (80017e8 <APPE_SysEvtReadyProcessing+0xb8>)
 80017c0:	f00d ffe2 	bl	800f788 <iprintf>
    ((tSHCI_UserEvtRxParam*)pPayload)->status = SHCI_TL_UserEventFlow_Disable;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	701a      	strb	r2, [r3, #0]
  return;
 80017ca:	e003      	b.n	80017d4 <APPE_SysEvtReadyProcessing+0xa4>
    APP_DBG_MSG(">>== SHCI_SUB_EVT_CODE_READY - UNEXPECTED CASE \n\r");
 80017cc:	4807      	ldr	r0, [pc, #28]	; (80017ec <APPE_SysEvtReadyProcessing+0xbc>)
 80017ce:	f00d ffdb 	bl	800f788 <iprintf>
  return;
 80017d2:	bf00      	nop
}
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	08011ab4 	.word	0x08011ab4
 80017e0:	08011ad0 	.word	0x08011ad0
 80017e4:	08011af4 	.word	0x08011af4
 80017e8:	08011b14 	.word	0x08011b14
 80017ec:	08011b48 	.word	0x08011b48

080017f0 <Led_Init>:

/* USER CODE BEGIN FD_LOCAL_FUNCTIONS */
static void Led_Init( void )
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
#if (CFG_LED_SUPPORTED == 1)
  /**
   * Leds Initialization
   */

  BSP_LED_Init(LED_BLUE);
 80017f4:	2000      	movs	r0, #0
 80017f6:	f003 f9ff 	bl	8004bf8 <BSP_LED_Init>
  BSP_LED_Init(LED_GREEN);
 80017fa:	2001      	movs	r0, #1
 80017fc:	f003 f9fc 	bl	8004bf8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8001800:	2002      	movs	r0, #2
 8001802:	f003 f9f9 	bl	8004bf8 <BSP_LED_Init>

  BSP_LED_On(LED_GREEN);
 8001806:	2001      	movs	r0, #1
 8001808:	f003 fa30 	bl	8004c6c <BSP_LED_On>
#endif

  return;
 800180c:	bf00      	nop
}
 800180e:	bd80      	pop	{r7, pc}

08001810 <Button_Init>:

static void Button_Init( void )
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
#if (CFG_BUTTON_SUPPORTED == 1)
  /**
   * Button Initialization
   */

  BSP_PB_Init(BUTTON_SW1, BUTTON_MODE_EXTI);
 8001814:	2101      	movs	r1, #1
 8001816:	2000      	movs	r0, #0
 8001818:	f003 fa5c 	bl	8004cd4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW2, BUTTON_MODE_EXTI);
 800181c:	2101      	movs	r1, #1
 800181e:	2001      	movs	r0, #1
 8001820:	f003 fa58 	bl	8004cd4 <BSP_PB_Init>
  BSP_PB_Init(BUTTON_SW3, BUTTON_MODE_EXTI);
 8001824:	2101      	movs	r1, #1
 8001826:	2002      	movs	r0, #2
 8001828:	f003 fa54 	bl	8004cd4 <BSP_PB_Init>
#endif

  return;
 800182c:	bf00      	nop
}
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_Delay>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void HAL_Delay(uint32_t Delay)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001838:	f004 f88c 	bl	8005954 <HAL_GetTick>
 800183c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001848:	d00a      	beq.n	8001860 <HAL_Delay+0x30>
  {
    wait += HAL_GetTickFreq();
 800184a:	f004 f89b 	bl	8005984 <HAL_GetTickFreq>
 800184e:	4603      	mov	r3, r0
 8001850:	461a      	mov	r2, r3
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	4413      	add	r3, r2
 8001856:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001858:	e002      	b.n	8001860 <HAL_Delay+0x30>
  {
    /************************************************************************************
     * ENTER SLEEP MODE
     ***********************************************************************************/
    LL_LPM_EnableSleep(); /**< Clear SLEEPDEEP bit of Cortex System Control Register */
 800185a:	f7ff fd7f 	bl	800135c <LL_LPM_EnableSleep>
     */
  #if defined (__CC_ARM)
    __force_stores();
  #endif /* __CC_ARM */

    __WFI();
 800185e:	bf30      	wfi
  while ((HAL_GetTick() - tickstart) < wait)
 8001860:	f004 f878 	bl	8005954 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	429a      	cmp	r2, r3
 800186e:	d8f4      	bhi.n	800185a <HAL_Delay+0x2a>
  }
}
 8001870:	bf00      	nop
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}

0800187a <MX_APPE_Process>:

void MX_APPE_Process(void)
{
 800187a:	b580      	push	{r7, lr}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_APPE_Process_1 */

  /* USER CODE END MX_APPE_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800187e:	f04f 30ff 	mov.w	r0, #4294967295
 8001882:	f00d f81b 	bl	800e8bc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_APPE_Process_2 */

  /* USER CODE END MX_APPE_Process_2 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}

0800188a <UTIL_SEQ_Idle>:

void UTIL_SEQ_Idle(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0
#if (CFG_LPM_SUPPORTED == 1)
  UTIL_LPM_EnterLowPower();
#endif /* CFG_LPM_SUPPORTED == 1 */
  return;
 800188e:	bf00      	nop
}
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <UTIL_SEQ_EvtIdle>:
  *
  * @param  evt_waited_bm : Event pending.
  * @retval None
  */
void UTIL_SEQ_EvtIdle(UTIL_SEQ_bm_t task_id_bm, UTIL_SEQ_bm_t evt_waited_bm)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 80018a2:	f04f 30ff 	mov.w	r0, #4294967295
 80018a6:	f00d f809 	bl	800e8bc <UTIL_SEQ_Run>

  return;
 80018aa:	bf00      	nop
}
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <shci_notify_asynch_evt>:

void shci_notify_asynch_evt(void* pdata)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1<<CFG_TASK_SYSTEM_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80018ba:	2100      	movs	r1, #0
 80018bc:	2040      	movs	r0, #64	; 0x40
 80018be:	f00d f91b 	bl	800eaf8 <UTIL_SEQ_SetTask>
  return;
 80018c2:	bf00      	nop
}
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <shci_cmd_resp_release>:

void shci_cmd_resp_release(uint32_t flag)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b082      	sub	sp, #8
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018d2:	2002      	movs	r0, #2
 80018d4:	f00d f97c 	bl	800ebd0 <UTIL_SEQ_SetEvt>
  return;
 80018d8:	bf00      	nop
}
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <shci_cmd_resp_wait>:

void shci_cmd_resp_wait(uint32_t timeout)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1<< CFG_IDLEEVT_SYSTEM_HCI_CMD_EVT_RSP_ID);
 80018e8:	2002      	movs	r0, #2
 80018ea:	f00d f991 	bl	800ec10 <UTIL_SEQ_WaitEvt>
  return;
 80018ee:	bf00      	nop
}
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN FD_WRAP_FUNCTIONS */
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin )
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	4603      	mov	r3, r0
 80018fe:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8001900:	88fb      	ldrh	r3, [r7, #6]
 8001902:	2b10      	cmp	r3, #16
 8001904:	d006      	beq.n	8001914 <HAL_GPIO_EXTI_Callback+0x1e>
 8001906:	2b10      	cmp	r3, #16
 8001908:	dc0d      	bgt.n	8001926 <HAL_GPIO_EXTI_Callback+0x30>
 800190a:	2b01      	cmp	r3, #1
 800190c:	d005      	beq.n	800191a <HAL_GPIO_EXTI_Callback+0x24>
 800190e:	2b02      	cmp	r3, #2
 8001910:	d006      	beq.n	8001920 <HAL_GPIO_EXTI_Callback+0x2a>
    case BUTTON_SW3_PIN:
      APP_BLE_Key_Button3_Action();
      break;

    default:
      break;
 8001912:	e008      	b.n	8001926 <HAL_GPIO_EXTI_Callback+0x30>
      APP_BLE_Key_Button1_Action();
 8001914:	f002 f9ca 	bl	8003cac <APP_BLE_Key_Button1_Action>
      break; 
 8001918:	e006      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button2_Action();
 800191a:	f002 f9cd 	bl	8003cb8 <APP_BLE_Key_Button2_Action>
      break; 
 800191e:	e003      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x32>
      APP_BLE_Key_Button3_Action();
 8001920:	f002 f9d2 	bl	8003cc8 <APP_BLE_Key_Button3_Action>
      break;
 8001924:	e000      	b.n	8001928 <HAL_GPIO_EXTI_Callback+0x32>
      break;
 8001926:	bf00      	nop

  }
  return;
 8001928:	bf00      	nop
}
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <RxUART_Init>:

static void RxUART_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <RxUART_Init+0x14>)
 8001936:	2201      	movs	r2, #1
 8001938:	4903      	ldr	r1, [pc, #12]	; (8001948 <RxUART_Init+0x18>)
 800193a:	2000      	movs	r0, #0
 800193c:	f000 ff10 	bl	8002760 <HW_UART_Receive_IT>
}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	0800194d 	.word	0x0800194d
 8001948:	20000274 	.word	0x20000274

0800194c <RxCpltCallback>:

static void RxCpltCallback(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* Filling buffer and wait for '\r' char */
  if (indexReceiveChar < C_SIZE_CMD_STRING)
 8001950:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <RxCpltCallback+0x5c>)
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	2bff      	cmp	r3, #255	; 0xff
 8001956:	d81e      	bhi.n	8001996 <RxCpltCallback+0x4a>
  {
    if (aRxBuffer[0] == '\r')
 8001958:	4b14      	ldr	r3, [pc, #80]	; (80019ac <RxCpltCallback+0x60>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b0d      	cmp	r3, #13
 800195e:	d10f      	bne.n	8001980 <RxCpltCallback+0x34>
    {
      APP_DBG_MSG("received %s\n", CommandString);
 8001960:	4913      	ldr	r1, [pc, #76]	; (80019b0 <RxCpltCallback+0x64>)
 8001962:	4814      	ldr	r0, [pc, #80]	; (80019b4 <RxCpltCallback+0x68>)
 8001964:	f00d ff10 	bl	800f788 <iprintf>

      UartCmdExecute();
 8001968:	f000 f828 	bl	80019bc <UartCmdExecute>

      /* Clear receive buffer and character counter*/
      indexReceiveChar = 0;
 800196c:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <RxCpltCallback+0x5c>)
 800196e:	2200      	movs	r2, #0
 8001970:	801a      	strh	r2, [r3, #0]
      memset(CommandString, 0, C_SIZE_CMD_STRING);
 8001972:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001976:	2100      	movs	r1, #0
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <RxCpltCallback+0x64>)
 800197a:	f00e f853 	bl	800fa24 <memset>
 800197e:	e00a      	b.n	8001996 <RxCpltCallback+0x4a>
    }
    else
    {
      CommandString[indexReceiveChar++] = aRxBuffer[0];
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <RxCpltCallback+0x5c>)
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	1c5a      	adds	r2, r3, #1
 8001986:	b291      	uxth	r1, r2
 8001988:	4a07      	ldr	r2, [pc, #28]	; (80019a8 <RxCpltCallback+0x5c>)
 800198a:	8011      	strh	r1, [r2, #0]
 800198c:	461a      	mov	r2, r3
 800198e:	4b07      	ldr	r3, [pc, #28]	; (80019ac <RxCpltCallback+0x60>)
 8001990:	7819      	ldrb	r1, [r3, #0]
 8001992:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <RxCpltCallback+0x64>)
 8001994:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Once a character has been sent, put back the device in reception mode */
  HW_UART_Receive_IT((hw_uart_id_t)CFG_DEBUG_TRACE_UART, aRxBuffer, 1U, RxCpltCallback);
 8001996:	4b08      	ldr	r3, [pc, #32]	; (80019b8 <RxCpltCallback+0x6c>)
 8001998:	2201      	movs	r2, #1
 800199a:	4904      	ldr	r1, [pc, #16]	; (80019ac <RxCpltCallback+0x60>)
 800199c:	2000      	movs	r0, #0
 800199e:	f000 fedf 	bl	8002760 <HW_UART_Receive_IT>
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	2000037c 	.word	0x2000037c
 80019ac:	20000274 	.word	0x20000274
 80019b0:	2000027c 	.word	0x2000027c
 80019b4:	08011b7c 	.word	0x08011b7c
 80019b8:	0800194d 	.word	0x0800194d

080019bc <UartCmdExecute>:

static void UartCmdExecute(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* Parse received CommandString */
  if(strcmp((char const*)CommandString, "SW1") == 0)
 80019c0:	491c      	ldr	r1, [pc, #112]	; (8001a34 <UartCmdExecute+0x78>)
 80019c2:	481d      	ldr	r0, [pc, #116]	; (8001a38 <UartCmdExecute+0x7c>)
 80019c4:	f7fe fbdc 	bl	8000180 <strcmp>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d109      	bne.n	80019e2 <UartCmdExecute+0x26>
  {
    APP_DBG_MSG("SW1 OK\n");
 80019ce:	481b      	ldr	r0, [pc, #108]	; (8001a3c <UartCmdExecute+0x80>)
 80019d0:	f00d ff48 	bl	800f864 <puts>
    exti_handle.Line = EXTI_LINE_4;
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <UartCmdExecute+0x84>)
 80019d6:	4a1b      	ldr	r2, [pc, #108]	; (8001a44 <UartCmdExecute+0x88>)
 80019d8:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80019da:	4819      	ldr	r0, [pc, #100]	; (8001a40 <UartCmdExecute+0x84>)
 80019dc:	f004 fcf6 	bl	80063cc <HAL_EXTI_GenerateSWI>
  }
  else
  {
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
  }
}
 80019e0:	e026      	b.n	8001a30 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW2") == 0)
 80019e2:	4919      	ldr	r1, [pc, #100]	; (8001a48 <UartCmdExecute+0x8c>)
 80019e4:	4814      	ldr	r0, [pc, #80]	; (8001a38 <UartCmdExecute+0x7c>)
 80019e6:	f7fe fbcb 	bl	8000180 <strcmp>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10a      	bne.n	8001a06 <UartCmdExecute+0x4a>
    APP_DBG_MSG("SW2 OK\n");
 80019f0:	4816      	ldr	r0, [pc, #88]	; (8001a4c <UartCmdExecute+0x90>)
 80019f2:	f00d ff37 	bl	800f864 <puts>
    exti_handle.Line = EXTI_LINE_0;
 80019f6:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <UartCmdExecute+0x84>)
 80019f8:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 80019fc:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 80019fe:	4810      	ldr	r0, [pc, #64]	; (8001a40 <UartCmdExecute+0x84>)
 8001a00:	f004 fce4 	bl	80063cc <HAL_EXTI_GenerateSWI>
}
 8001a04:	e014      	b.n	8001a30 <UartCmdExecute+0x74>
  else if (strcmp((char const*)CommandString, "SW3") == 0)
 8001a06:	4912      	ldr	r1, [pc, #72]	; (8001a50 <UartCmdExecute+0x94>)
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <UartCmdExecute+0x7c>)
 8001a0a:	f7fe fbb9 	bl	8000180 <strcmp>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d109      	bne.n	8001a28 <UartCmdExecute+0x6c>
    APP_DBG_MSG("SW3 OK\n");
 8001a14:	480f      	ldr	r0, [pc, #60]	; (8001a54 <UartCmdExecute+0x98>)
 8001a16:	f00d ff25 	bl	800f864 <puts>
    exti_handle.Line = EXTI_LINE_1;
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <UartCmdExecute+0x84>)
 8001a1c:	4a0e      	ldr	r2, [pc, #56]	; (8001a58 <UartCmdExecute+0x9c>)
 8001a1e:	601a      	str	r2, [r3, #0]
    HAL_EXTI_GenerateSWI(&exti_handle);
 8001a20:	4807      	ldr	r0, [pc, #28]	; (8001a40 <UartCmdExecute+0x84>)
 8001a22:	f004 fcd3 	bl	80063cc <HAL_EXTI_GenerateSWI>
}
 8001a26:	e003      	b.n	8001a30 <UartCmdExecute+0x74>
    APP_DBG_MSG("NOT RECOGNIZED COMMAND : %s\n", CommandString);
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <UartCmdExecute+0x7c>)
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <UartCmdExecute+0xa0>)
 8001a2c:	f00d feac 	bl	800f788 <iprintf>
}
 8001a30:	bf00      	nop
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	08011b8c 	.word	0x08011b8c
 8001a38:	2000027c 	.word	0x2000027c
 8001a3c:	08011b90 	.word	0x08011b90
 8001a40:	2000026c 	.word	0x2000026c
 8001a44:	16000004 	.word	0x16000004
 8001a48:	08011b98 	.word	0x08011b98
 8001a4c:	08011b9c 	.word	0x08011b9c
 8001a50:	08011ba4 	.word	0x08011ba4
 8001a54:	08011ba8 	.word	0x08011ba8
 8001a58:	16000001 	.word	0x16000001
 8001a5c:	08011bb0 	.word	0x08011bb0

08001a60 <LL_EXTI_EnableIT_0_31>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a6a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a6e:	4905      	ldr	r1, [pc, #20]	; (8001a84 <LL_EXTI_EnableIT_0_31+0x24>)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr
 8001a84:	58000800 	.word	0x58000800

08001a88 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31 (*)
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001a90:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	4904      	ldr	r1, [pc, #16]	; (8001aa8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	600b      	str	r3, [r1, #0]

}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	58000800 	.word	0x58000800

08001aac <ReadRtcSsrValue>:
 *         reliability of the value
 * @param  None
 * @retval SSR value read
 */
static uint32_t ReadRtcSsrValue(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
  uint32_t first_read;
  uint32_t second_read;

  first_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ab2:	4b0d      	ldr	r3, [pc, #52]	; (8001ae8 <ReadRtcSsrValue+0x3c>)
 8001ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	607b      	str	r3, [r7, #4]

  second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001aba:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <ReadRtcSsrValue+0x3c>)
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	b29b      	uxth	r3, r3
 8001ac0:	603b      	str	r3, [r7, #0]

  while(first_read != second_read)
 8001ac2:	e005      	b.n	8001ad0 <ReadRtcSsrValue+0x24>
  {
    first_read = second_read;
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	607b      	str	r3, [r7, #4]

    second_read = (uint32_t)(READ_BIT(RTC->SSR, RTC_SSR_SS));
 8001ac8:	4b07      	ldr	r3, [pc, #28]	; (8001ae8 <ReadRtcSsrValue+0x3c>)
 8001aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	603b      	str	r3, [r7, #0]
  while(first_read != second_read)
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d1f5      	bne.n	8001ac4 <ReadRtcSsrValue+0x18>
  }

  return second_read;
 8001ad8:	683b      	ldr	r3, [r7, #0]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40002800 	.word	0x40002800

08001aec <LinkTimerAfter>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked after
 * @retval None
 */
static void LinkTimerAfter(uint8_t TimerID, uint8_t RefTimerID)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	460a      	mov	r2, r1
 8001af6:	71fb      	strb	r3, [r7, #7]
 8001af8:	4613      	mov	r3, r2
 8001afa:	71bb      	strb	r3, [r7, #6]
  uint8_t next_id;

  next_id = aTimerContext[RefTimerID].NextID;
 8001afc:	79ba      	ldrb	r2, [r7, #6]
 8001afe:	491d      	ldr	r1, [pc, #116]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b00:	4613      	mov	r3, r2
 8001b02:	005b      	lsls	r3, r3, #1
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	3315      	adds	r3, #21
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	73fb      	strb	r3, [r7, #15]

  if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001b10:	7bfb      	ldrb	r3, [r7, #15]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	d009      	beq.n	8001b2a <LinkTimerAfter+0x3e>
  {
    aTimerContext[next_id].PreviousID = TimerID;
 8001b16:	7bfa      	ldrb	r2, [r7, #15]
 8001b18:	4916      	ldr	r1, [pc, #88]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3314      	adds	r3, #20
 8001b26:	79fa      	ldrb	r2, [r7, #7]
 8001b28:	701a      	strb	r2, [r3, #0]
  }
  aTimerContext[TimerID].NextID = next_id;
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	4911      	ldr	r1, [pc, #68]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b2e:	4613      	mov	r3, r2
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4413      	add	r3, r2
 8001b34:	00db      	lsls	r3, r3, #3
 8001b36:	440b      	add	r3, r1
 8001b38:	3315      	adds	r3, #21
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	701a      	strb	r2, [r3, #0]
  aTimerContext[TimerID].PreviousID = RefTimerID ;
 8001b3e:	79fa      	ldrb	r2, [r7, #7]
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b42:	4613      	mov	r3, r2
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3314      	adds	r3, #20
 8001b4e:	79ba      	ldrb	r2, [r7, #6]
 8001b50:	701a      	strb	r2, [r3, #0]
  aTimerContext[RefTimerID].NextID = TimerID;
 8001b52:	79ba      	ldrb	r2, [r7, #6]
 8001b54:	4907      	ldr	r1, [pc, #28]	; (8001b74 <LinkTimerAfter+0x88>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	440b      	add	r3, r1
 8001b60:	3315      	adds	r3, #21
 8001b62:	79fa      	ldrb	r2, [r7, #7]
 8001b64:	701a      	strb	r2, [r3, #0]

  return;
 8001b66:	bf00      	nop
}
 8001b68:	3714      	adds	r7, #20
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000380 	.word	0x20000380

08001b78 <LinkTimerBefore>:
 * @param  TimerID:   The ID of the Timer
 * @param  RefTimerID: The ID of the Timer to be linked before
 * @retval None
 */
static void LinkTimerBefore(uint8_t TimerID, uint8_t RefTimerID)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	4603      	mov	r3, r0
 8001b80:	460a      	mov	r2, r1
 8001b82:	71fb      	strb	r3, [r7, #7]
 8001b84:	4613      	mov	r3, r2
 8001b86:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;

  if(RefTimerID != CurrentRunningTimerID)
 8001b88:	4b29      	ldr	r3, [pc, #164]	; (8001c30 <LinkTimerBefore+0xb8>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	79ba      	ldrb	r2, [r7, #6]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d032      	beq.n	8001bfa <LinkTimerBefore+0x82>
  {
    previous_id = aTimerContext[RefTimerID].PreviousID;
 8001b94:	79ba      	ldrb	r2, [r7, #6]
 8001b96:	4927      	ldr	r1, [pc, #156]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001b98:	4613      	mov	r3, r2
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3314      	adds	r3, #20
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	73fb      	strb	r3, [r7, #15]

    aTimerContext[previous_id].NextID = TimerID;
 8001ba8:	7bfa      	ldrb	r2, [r7, #15]
 8001baa:	4922      	ldr	r1, [pc, #136]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	00db      	lsls	r3, r3, #3
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3315      	adds	r3, #21
 8001bb8:	79fa      	ldrb	r2, [r7, #7]
 8001bba:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bbc:	79fa      	ldrb	r2, [r7, #7]
 8001bbe:	491d      	ldr	r1, [pc, #116]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	4413      	add	r3, r2
 8001bc6:	00db      	lsls	r3, r3, #3
 8001bc8:	440b      	add	r3, r1
 8001bca:	3315      	adds	r3, #21
 8001bcc:	79ba      	ldrb	r2, [r7, #6]
 8001bce:	701a      	strb	r2, [r3, #0]
    aTimerContext[TimerID].PreviousID = previous_id ;
 8001bd0:	79fa      	ldrb	r2, [r7, #7]
 8001bd2:	4918      	ldr	r1, [pc, #96]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	00db      	lsls	r3, r3, #3
 8001bdc:	440b      	add	r3, r1
 8001bde:	3314      	adds	r3, #20
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001be4:	79ba      	ldrb	r2, [r7, #6]
 8001be6:	4913      	ldr	r1, [pc, #76]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	3314      	adds	r3, #20
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	701a      	strb	r2, [r3, #0]
  {
    aTimerContext[TimerID].NextID = RefTimerID;
    aTimerContext[RefTimerID].PreviousID = TimerID;
  }

  return;
 8001bf8:	e014      	b.n	8001c24 <LinkTimerBefore+0xac>
    aTimerContext[TimerID].NextID = RefTimerID;
 8001bfa:	79fa      	ldrb	r2, [r7, #7]
 8001bfc:	490d      	ldr	r1, [pc, #52]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001bfe:	4613      	mov	r3, r2
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	440b      	add	r3, r1
 8001c08:	3315      	adds	r3, #21
 8001c0a:	79ba      	ldrb	r2, [r7, #6]
 8001c0c:	701a      	strb	r2, [r3, #0]
    aTimerContext[RefTimerID].PreviousID = TimerID;
 8001c0e:	79ba      	ldrb	r2, [r7, #6]
 8001c10:	4908      	ldr	r1, [pc, #32]	; (8001c34 <LinkTimerBefore+0xbc>)
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	440b      	add	r3, r1
 8001c1c:	3314      	adds	r3, #20
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	701a      	strb	r2, [r3, #0]
  return;
 8001c22:	bf00      	nop
}
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	20000410 	.word	0x20000410
 8001c34:	20000380 	.word	0x20000380

08001c38 <linkTimer>:
 * @brief  Insert a Timer in the list
 * @param  TimerID:   The ID of the Timer
 * @retval None
 */
static uint16_t linkTimer(uint8_t TimerID)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4603      	mov	r3, r0
 8001c40:	71fb      	strb	r3, [r7, #7]
  uint32_t time_left;
  uint16_t time_elapsed;
  uint8_t timer_id_lookup;
  uint8_t next_id;

  if(CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001c42:	4b4e      	ldr	r3, [pc, #312]	; (8001d7c <linkTimer+0x144>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b06      	cmp	r3, #6
 8001c4a:	d118      	bne.n	8001c7e <linkTimer+0x46>
  {
    /**
     * No timer in the list
     */
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001c4c:	4b4b      	ldr	r3, [pc, #300]	; (8001d7c <linkTimer+0x144>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b4b      	ldr	r3, [pc, #300]	; (8001d80 <linkTimer+0x148>)
 8001c54:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = TimerID;
 8001c56:	4a49      	ldr	r2, [pc, #292]	; (8001d7c <linkTimer+0x144>)
 8001c58:	79fb      	ldrb	r3, [r7, #7]
 8001c5a:	7013      	strb	r3, [r2, #0]
    aTimerContext[TimerID].NextID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;
 8001c5c:	79fa      	ldrb	r2, [r7, #7]
 8001c5e:	4949      	ldr	r1, [pc, #292]	; (8001d84 <linkTimer+0x14c>)
 8001c60:	4613      	mov	r3, r2
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	440b      	add	r3, r1
 8001c6a:	3315      	adds	r3, #21
 8001c6c:	2206      	movs	r2, #6
 8001c6e:	701a      	strb	r2, [r3, #0]

    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001c70:	4b45      	ldr	r3, [pc, #276]	; (8001d88 <linkTimer+0x150>)
 8001c72:	f04f 32ff 	mov.w	r2, #4294967295
 8001c76:	601a      	str	r2, [r3, #0]
    time_elapsed = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	81fb      	strh	r3, [r7, #14]
 8001c7c:	e078      	b.n	8001d70 <linkTimer+0x138>
  }
  else
  {
    time_elapsed = ReturnTimeElapsed();
 8001c7e:	f000 f909 	bl	8001e94 <ReturnTimeElapsed>
 8001c82:	4603      	mov	r3, r0
 8001c84:	81fb      	strh	r3, [r7, #14]

    /**
     * update count of the timer to be linked
     */
    aTimerContext[TimerID].CountLeft += time_elapsed;
 8001c86:	79fa      	ldrb	r2, [r7, #7]
 8001c88:	493e      	ldr	r1, [pc, #248]	; (8001d84 <linkTimer+0x14c>)
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	00db      	lsls	r3, r3, #3
 8001c92:	440b      	add	r3, r1
 8001c94:	3308      	adds	r3, #8
 8001c96:	6819      	ldr	r1, [r3, #0]
 8001c98:	89fb      	ldrh	r3, [r7, #14]
 8001c9a:	79fa      	ldrb	r2, [r7, #7]
 8001c9c:	4419      	add	r1, r3
 8001c9e:	4839      	ldr	r0, [pc, #228]	; (8001d84 <linkTimer+0x14c>)
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	005b      	lsls	r3, r3, #1
 8001ca4:	4413      	add	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	4403      	add	r3, r0
 8001caa:	3308      	adds	r3, #8
 8001cac:	6019      	str	r1, [r3, #0]
    time_left = aTimerContext[TimerID].CountLeft;
 8001cae:	79fa      	ldrb	r2, [r7, #7]
 8001cb0:	4934      	ldr	r1, [pc, #208]	; (8001d84 <linkTimer+0x14c>)
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	005b      	lsls	r3, r3, #1
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	440b      	add	r3, r1
 8001cbc:	3308      	adds	r3, #8
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	60bb      	str	r3, [r7, #8]

    /**
     * Search for index where the new timer shall be linked
     */
    if(aTimerContext[CurrentRunningTimerID].CountLeft <= time_left)
 8001cc2:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <linkTimer+0x144>)
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	b2db      	uxtb	r3, r3
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4a2e      	ldr	r2, [pc, #184]	; (8001d84 <linkTimer+0x14c>)
 8001ccc:	460b      	mov	r3, r1
 8001cce:	005b      	lsls	r3, r3, #1
 8001cd0:	440b      	add	r3, r1
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d337      	bcc.n	8001d50 <linkTimer+0x118>
    {
      /**
       * Search for the ID after the first one
       */
      timer_id_lookup = CurrentRunningTimerID;
 8001ce0:	4b26      	ldr	r3, [pc, #152]	; (8001d7c <linkTimer+0x144>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	737b      	strb	r3, [r7, #13]
      next_id = aTimerContext[timer_id_lookup].NextID;
 8001ce6:	7b7a      	ldrb	r2, [r7, #13]
 8001ce8:	4926      	ldr	r1, [pc, #152]	; (8001d84 <linkTimer+0x14c>)
 8001cea:	4613      	mov	r3, r2
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	4413      	add	r3, r2
 8001cf0:	00db      	lsls	r3, r3, #3
 8001cf2:	440b      	add	r3, r1
 8001cf4:	3315      	adds	r3, #21
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001cfa:	e013      	b.n	8001d24 <linkTimer+0xec>
      {
        timer_id_lookup = aTimerContext[timer_id_lookup].NextID;
 8001cfc:	7b7a      	ldrb	r2, [r7, #13]
 8001cfe:	4921      	ldr	r1, [pc, #132]	; (8001d84 <linkTimer+0x14c>)
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	00db      	lsls	r3, r3, #3
 8001d08:	440b      	add	r3, r1
 8001d0a:	3315      	adds	r3, #21
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	737b      	strb	r3, [r7, #13]
        next_id = aTimerContext[timer_id_lookup].NextID;
 8001d10:	7b7a      	ldrb	r2, [r7, #13]
 8001d12:	491c      	ldr	r1, [pc, #112]	; (8001d84 <linkTimer+0x14c>)
 8001d14:	4613      	mov	r3, r2
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	440b      	add	r3, r1
 8001d1e:	3315      	adds	r3, #21
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	733b      	strb	r3, [r7, #12]
      while((next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[next_id].CountLeft <= time_left))
 8001d24:	7b3b      	ldrb	r3, [r7, #12]
 8001d26:	2b06      	cmp	r3, #6
 8001d28:	d00b      	beq.n	8001d42 <linkTimer+0x10a>
 8001d2a:	7b3a      	ldrb	r2, [r7, #12]
 8001d2c:	4915      	ldr	r1, [pc, #84]	; (8001d84 <linkTimer+0x14c>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	4413      	add	r3, r2
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	440b      	add	r3, r1
 8001d38:	3308      	adds	r3, #8
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d2dc      	bcs.n	8001cfc <linkTimer+0xc4>
      }

      /**
       * Link after the ID
       */
      LinkTimerAfter(TimerID, timer_id_lookup);
 8001d42:	7b7a      	ldrb	r2, [r7, #13]
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	4611      	mov	r1, r2
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff fecf 	bl	8001aec <LinkTimerAfter>
 8001d4e:	e00f      	b.n	8001d70 <linkTimer+0x138>
    else
    {
      /**
       * Link before the first ID
       */
      LinkTimerBefore(TimerID, CurrentRunningTimerID);
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <linkTimer+0x144>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ff0c 	bl	8001b78 <LinkTimerBefore>
      PreviousRunningTimerID = CurrentRunningTimerID;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <linkTimer+0x144>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b06      	ldr	r3, [pc, #24]	; (8001d80 <linkTimer+0x148>)
 8001d68:	701a      	strb	r2, [r3, #0]
      CurrentRunningTimerID = TimerID;
 8001d6a:	4a04      	ldr	r2, [pc, #16]	; (8001d7c <linkTimer+0x144>)
 8001d6c:	79fb      	ldrb	r3, [r7, #7]
 8001d6e:	7013      	strb	r3, [r2, #0]
    }
  }

  return time_elapsed;
 8001d70:	89fb      	ldrh	r3, [r7, #14]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000410 	.word	0x20000410
 8001d80:	20000411 	.word	0x20000411
 8001d84:	20000380 	.word	0x20000380
 8001d88:	20000414 	.word	0x20000414

08001d8c <UnlinkTimer>:
 * @param  TimerID:   The ID of the Timer
 * @param  RequestReadSSR: Request to read the SSR register or not
 * @retval None
 */
static void UnlinkTimer(uint8_t TimerID, RequestReadSSR_t RequestReadSSR)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	460a      	mov	r2, r1
 8001d96:	71fb      	strb	r3, [r7, #7]
 8001d98:	4613      	mov	r3, r2
 8001d9a:	71bb      	strb	r3, [r7, #6]
  uint8_t previous_id;
  uint8_t next_id;

  if(TimerID == CurrentRunningTimerID)
 8001d9c:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <UnlinkTimer+0xf8>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	79fa      	ldrb	r2, [r7, #7]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d111      	bne.n	8001dcc <UnlinkTimer+0x40>
  {
    PreviousRunningTimerID = CurrentRunningTimerID;
 8001da8:	4b36      	ldr	r3, [pc, #216]	; (8001e84 <UnlinkTimer+0xf8>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <UnlinkTimer+0xfc>)
 8001db0:	701a      	strb	r2, [r3, #0]
    CurrentRunningTimerID = aTimerContext[TimerID].NextID;
 8001db2:	79fa      	ldrb	r2, [r7, #7]
 8001db4:	4935      	ldr	r1, [pc, #212]	; (8001e8c <UnlinkTimer+0x100>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	3315      	adds	r3, #21
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <UnlinkTimer+0xf8>)
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e03e      	b.n	8001e4a <UnlinkTimer+0xbe>
  }
  else
  {
    previous_id = aTimerContext[TimerID].PreviousID;
 8001dcc:	79fa      	ldrb	r2, [r7, #7]
 8001dce:	492f      	ldr	r1, [pc, #188]	; (8001e8c <UnlinkTimer+0x100>)
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	440b      	add	r3, r1
 8001dda:	3314      	adds	r3, #20
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	73fb      	strb	r3, [r7, #15]
    next_id = aTimerContext[TimerID].NextID;
 8001de0:	79fa      	ldrb	r2, [r7, #7]
 8001de2:	492a      	ldr	r1, [pc, #168]	; (8001e8c <UnlinkTimer+0x100>)
 8001de4:	4613      	mov	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	3315      	adds	r3, #21
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	73bb      	strb	r3, [r7, #14]

    aTimerContext[previous_id].NextID = aTimerContext[TimerID].NextID;
 8001df4:	79f9      	ldrb	r1, [r7, #7]
 8001df6:	7bfa      	ldrb	r2, [r7, #15]
 8001df8:	4824      	ldr	r0, [pc, #144]	; (8001e8c <UnlinkTimer+0x100>)
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	005b      	lsls	r3, r3, #1
 8001dfe:	440b      	add	r3, r1
 8001e00:	00db      	lsls	r3, r3, #3
 8001e02:	4403      	add	r3, r0
 8001e04:	3315      	adds	r3, #21
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	b2d8      	uxtb	r0, r3
 8001e0a:	4920      	ldr	r1, [pc, #128]	; (8001e8c <UnlinkTimer+0x100>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	00db      	lsls	r3, r3, #3
 8001e14:	440b      	add	r3, r1
 8001e16:	3315      	adds	r3, #21
 8001e18:	4602      	mov	r2, r0
 8001e1a:	701a      	strb	r2, [r3, #0]
    if(next_id != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8001e1c:	7bbb      	ldrb	r3, [r7, #14]
 8001e1e:	2b06      	cmp	r3, #6
 8001e20:	d013      	beq.n	8001e4a <UnlinkTimer+0xbe>
    {
      aTimerContext[next_id].PreviousID = aTimerContext[TimerID].PreviousID;
 8001e22:	79f9      	ldrb	r1, [r7, #7]
 8001e24:	7bba      	ldrb	r2, [r7, #14]
 8001e26:	4819      	ldr	r0, [pc, #100]	; (8001e8c <UnlinkTimer+0x100>)
 8001e28:	460b      	mov	r3, r1
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	440b      	add	r3, r1
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4403      	add	r3, r0
 8001e32:	3314      	adds	r3, #20
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	b2d8      	uxtb	r0, r3
 8001e38:	4914      	ldr	r1, [pc, #80]	; (8001e8c <UnlinkTimer+0x100>)
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4413      	add	r3, r2
 8001e40:	00db      	lsls	r3, r3, #3
 8001e42:	440b      	add	r3, r1
 8001e44:	3314      	adds	r3, #20
 8001e46:	4602      	mov	r2, r0
 8001e48:	701a      	strb	r2, [r3, #0]
  }

  /**
   * Timer is out of the list
   */
  aTimerContext[TimerID].TimerIDStatus = TimerID_Created;
 8001e4a:	79fa      	ldrb	r2, [r7, #7]
 8001e4c:	490f      	ldr	r1, [pc, #60]	; (8001e8c <UnlinkTimer+0x100>)
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	00db      	lsls	r3, r3, #3
 8001e56:	440b      	add	r3, r1
 8001e58:	330c      	adds	r3, #12
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	701a      	strb	r2, [r3, #0]

  if((CurrentRunningTimerID == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (RequestReadSSR == SSR_Read_Requested))
 8001e5e:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <UnlinkTimer+0xf8>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	2b06      	cmp	r3, #6
 8001e66:	d107      	bne.n	8001e78 <UnlinkTimer+0xec>
 8001e68:	79bb      	ldrb	r3, [r7, #6]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d104      	bne.n	8001e78 <UnlinkTimer+0xec>
  {
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <UnlinkTimer+0x104>)
 8001e70:	f04f 32ff 	mov.w	r2, #4294967295
 8001e74:	601a      	str	r2, [r3, #0]
  }

  return;
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
}
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20000410 	.word	0x20000410
 8001e88:	20000411 	.word	0x20000411
 8001e8c:	20000380 	.word	0x20000380
 8001e90:	20000414 	.word	0x20000414

08001e94 <ReturnTimeElapsed>:
 *        since the time the timer has been started
 * @param  None
 * @retval Time expired in Ticks
 */
static uint16_t ReturnTimeElapsed(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  uint32_t  return_value;
  uint32_t  wrap_counter;

  if(SSRValueOnLastSetup != SSR_FORBIDDEN_VALUE)
 8001e9a:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea2:	d026      	beq.n	8001ef2 <ReturnTimeElapsed+0x5e>
  {
    return_value = ReadRtcSsrValue(); /**< Read SSR register first */
 8001ea4:	f7ff fe02 	bl	8001aac <ReadRtcSsrValue>
 8001ea8:	6078      	str	r0, [r7, #4]

    if (SSRValueOnLastSetup >= return_value)
 8001eaa:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d805      	bhi.n	8001ec0 <ReturnTimeElapsed+0x2c>
    {
      return_value = SSRValueOnLastSetup - return_value;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	607b      	str	r3, [r7, #4]
 8001ebe:	e00a      	b.n	8001ed6 <ReturnTimeElapsed+0x42>
    }
    else
    {
      wrap_counter = SynchPrescalerUserConfig - return_value;
 8001ec0:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <ReturnTimeElapsed+0x74>)
 8001ec2:	881b      	ldrh	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	603b      	str	r3, [r7, #0]
      return_value = SSRValueOnLastSetup + wrap_counter;
 8001ecc:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <ReturnTimeElapsed+0x70>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	683a      	ldr	r2, [r7, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	607b      	str	r3, [r7, #4]

    /**
     * At this stage, ReturnValue holds the number of ticks counted by SSR
     * Need to translate in number of ticks counted by the Wakeuptimer
     */
    return_value = return_value*AsynchPrescalerUserConfig;
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <ReturnTimeElapsed+0x78>)
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	461a      	mov	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	607b      	str	r3, [r7, #4]
    return_value = return_value >> WakeupTimerDivider;
 8001ee4:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <ReturnTimeElapsed+0x7c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	40d3      	lsrs	r3, r2
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	e001      	b.n	8001ef6 <ReturnTimeElapsed+0x62>
  }
  else
  {
    return_value = 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	607b      	str	r3, [r7, #4]
  }

  return (uint16_t)return_value;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	b29b      	uxth	r3, r3
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3708      	adds	r7, #8
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000414 	.word	0x20000414
 8001f08:	2000041c 	.word	0x2000041c
 8001f0c:	2000041a 	.word	0x2000041a
 8001f10:	20000419 	.word	0x20000419

08001f14 <RestartWakeupCounter>:
 *    It assumes all condition are met to be allowed to write the wakeup counter
 * @param  Value: Value to be written in the counter
 * @retval None
 */
static void RestartWakeupCounter(uint16_t Value)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	80fb      	strh	r3, [r7, #6]
   * The wakeuptimer has been disabled in the calling function to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   *  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
   */

  if(Value == 0)
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d108      	bne.n	8001f36 <RestartWakeupCounter+0x22>
  {
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f24:	f7ff fdc2 	bl	8001aac <ReadRtcSsrValue>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4a21      	ldr	r2, [pc, #132]	; (8001fb0 <RestartWakeupCounter+0x9c>)
 8001f2c:	6013      	str	r3, [r2, #0]

    /**
     * Simulate that the Timer expired
     */
    HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 8001f2e:	2003      	movs	r0, #3
 8001f30:	f003 febd 	bl	8005cae <HAL_NVIC_SetPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */

    HW_TS_RTC_CountUpdated_AppNot();
  }

  return ;
 8001f34:	e039      	b.n	8001faa <RestartWakeupCounter+0x96>
    if((Value > 1) ||(WakeupTimerDivider != 1))
 8001f36:	88fb      	ldrh	r3, [r7, #6]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d803      	bhi.n	8001f44 <RestartWakeupCounter+0x30>
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <RestartWakeupCounter+0xa0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d002      	beq.n	8001f4a <RestartWakeupCounter+0x36>
      Value -= 1;
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	80fb      	strh	r3, [r7, #6]
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 8001f4a:	bf00      	nop
 8001f4c:	4b1a      	ldr	r3, [pc, #104]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d0f8      	beq.n	8001f4c <RestartWakeupCounter+0x38>
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8001f6a:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 8001f6c:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <RestartWakeupCounter+0xa8>)
 8001f6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001f72:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 8001f74:	2003      	movs	r0, #3
 8001f76:	f003 fea8 	bl	8005cca <HAL_NVIC_ClearPendingIRQ>
    MODIFY_REG(RTC->WUTR, RTC_WUTR_WUT, Value);
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <RestartWakeupCounter+0xac>)
 8001f7c:	695b      	ldr	r3, [r3, #20]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	88fa      	ldrh	r2, [r7, #6]
 8001f84:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <RestartWakeupCounter+0xac>)
 8001f86:	4313      	orrs	r3, r2
 8001f88:	614b      	str	r3, [r1, #20]
    SSRValueOnLastSetup = ReadRtcSsrValue();
 8001f8a:	f7ff fd8f 	bl	8001aac <ReadRtcSsrValue>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <RestartWakeupCounter+0x9c>)
 8001f92:	6013      	str	r3, [r2, #0]
    __HAL_RTC_WAKEUPTIMER_ENABLE(&hrtc);    /**<  Enable the Wakeup Timer */
 8001f94:	4b08      	ldr	r3, [pc, #32]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	4b07      	ldr	r3, [pc, #28]	; (8001fb8 <RestartWakeupCounter+0xa4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001fa2:	609a      	str	r2, [r3, #8]
    HW_TS_RTC_CountUpdated_AppNot();
 8001fa4:	f3af 8000 	nop.w
  return ;
 8001fa8:	bf00      	nop
}
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000414 	.word	0x20000414
 8001fb4:	20000419 	.word	0x20000419
 8001fb8:	20000668 	.word	0x20000668
 8001fbc:	58000800 	.word	0x58000800
 8001fc0:	40002800 	.word	0x40002800

08001fc4 <RescheduleTimerList>:
 *    2) Setup the wakeuptimer
 * @param  None
 * @retval None
 */
static void RescheduleTimerList(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0

  /**
   * The wakeuptimer is disabled now to reduce the time to poll the WUTWF
   * FLAG when the new value will have to be written
   */
  if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 8001fca:	4b45      	ldr	r3, [pc, #276]	; (80020e0 <RescheduleTimerList+0x11c>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd6:	d107      	bne.n	8001fe8 <RescheduleTimerList+0x24>
  {
    /**
     * Wait for the flag to be back to 0 when the wakeup timer is enabled
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 8001fd8:	bf00      	nop
 8001fda:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <RescheduleTimerList+0x120>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1f8      	bne.n	8001fda <RescheduleTimerList+0x16>
  }
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 8001fe8:	4b3e      	ldr	r3, [pc, #248]	; (80020e4 <RescheduleTimerList+0x120>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689a      	ldr	r2, [r3, #8]
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <RescheduleTimerList+0x120>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ff6:	609a      	str	r2, [r3, #8]

  localTimerID = CurrentRunningTimerID;
 8001ff8:	4b3b      	ldr	r3, [pc, #236]	; (80020e8 <RescheduleTimerList+0x124>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	73fb      	strb	r3, [r7, #15]

  /**
   * Calculate what will be the value to write in the wakeuptimer
   */
  timecountleft = aTimerContext[localTimerID].CountLeft;
 8001ffe:	7bfa      	ldrb	r2, [r7, #15]
 8002000:	493a      	ldr	r1, [pc, #232]	; (80020ec <RescheduleTimerList+0x128>)
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	440b      	add	r3, r1
 800200c:	3308      	adds	r3, #8
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60bb      	str	r3, [r7, #8]

  /**
   * Read how much has been counted
   */
  time_elapsed = ReturnTimeElapsed();
 8002012:	f7ff ff3f 	bl	8001e94 <ReturnTimeElapsed>
 8002016:	4603      	mov	r3, r0
 8002018:	80fb      	strh	r3, [r7, #6]

  if(timecountleft < time_elapsed )
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	68ba      	ldr	r2, [r7, #8]
 800201e:	429a      	cmp	r2, r3
 8002020:	d205      	bcs.n	800202e <RescheduleTimerList+0x6a>
  {
    /**
     * There is no tick left to count
     */
    wakeup_timer_value = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	81bb      	strh	r3, [r7, #12]
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <RescheduleTimerList+0x12c>)
 8002028:	2201      	movs	r2, #1
 800202a:	701a      	strb	r2, [r3, #0]
 800202c:	e04d      	b.n	80020ca <RescheduleTimerList+0x106>
  }
  else
  {
    if(timecountleft > (time_elapsed + MaxWakeupTimerSetup))
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	4a30      	ldr	r2, [pc, #192]	; (80020f4 <RescheduleTimerList+0x130>)
 8002032:	8812      	ldrh	r2, [r2, #0]
 8002034:	b292      	uxth	r2, r2
 8002036:	4413      	add	r3, r2
 8002038:	461a      	mov	r2, r3
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	4293      	cmp	r3, r2
 800203e:	d906      	bls.n	800204e <RescheduleTimerList+0x8a>
    {
      /**
       * The number of tick left is greater than the Wakeuptimer maximum value
       */
      wakeup_timer_value = MaxWakeupTimerSetup;
 8002040:	4b2c      	ldr	r3, [pc, #176]	; (80020f4 <RescheduleTimerList+0x130>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	81bb      	strh	r3, [r7, #12]

      WakeupTimerLimitation = WakeupTimerValue_Overpassed;
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <RescheduleTimerList+0x12c>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
 800204c:	e03d      	b.n	80020ca <RescheduleTimerList+0x106>
    }
    else
    {
      wakeup_timer_value = timecountleft - time_elapsed;
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	b29a      	uxth	r2, r3
 8002052:	88fb      	ldrh	r3, [r7, #6]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	81bb      	strh	r3, [r7, #12]
      WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 8002058:	4b25      	ldr	r3, [pc, #148]	; (80020f0 <RescheduleTimerList+0x12c>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
  }

  /**
   * update ticks left to be counted for each timer
   */
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800205e:	e034      	b.n	80020ca <RescheduleTimerList+0x106>
  {
    if (aTimerContext[localTimerID].CountLeft < time_elapsed)
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	4922      	ldr	r1, [pc, #136]	; (80020ec <RescheduleTimerList+0x128>)
 8002064:	4613      	mov	r3, r2
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	4413      	add	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	440b      	add	r3, r1
 800206e:	3308      	adds	r3, #8
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	429a      	cmp	r2, r3
 8002076:	d20a      	bcs.n	800208e <RescheduleTimerList+0xca>
    {
      aTimerContext[localTimerID].CountLeft = 0;
 8002078:	7bfa      	ldrb	r2, [r7, #15]
 800207a:	491c      	ldr	r1, [pc, #112]	; (80020ec <RescheduleTimerList+0x128>)
 800207c:	4613      	mov	r3, r2
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4413      	add	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	440b      	add	r3, r1
 8002086:	3308      	adds	r3, #8
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	e013      	b.n	80020b6 <RescheduleTimerList+0xf2>
    }
    else
    {
      aTimerContext[localTimerID].CountLeft -= time_elapsed;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	4916      	ldr	r1, [pc, #88]	; (80020ec <RescheduleTimerList+0x128>)
 8002092:	4613      	mov	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	4413      	add	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	440b      	add	r3, r1
 800209c:	3308      	adds	r3, #8
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	7bfa      	ldrb	r2, [r7, #15]
 80020a4:	1ac9      	subs	r1, r1, r3
 80020a6:	4811      	ldr	r0, [pc, #68]	; (80020ec <RescheduleTimerList+0x128>)
 80020a8:	4613      	mov	r3, r2
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	4413      	add	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4403      	add	r3, r0
 80020b2:	3308      	adds	r3, #8
 80020b4:	6019      	str	r1, [r3, #0]
    }
    localTimerID = aTimerContext[localTimerID].NextID;
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	490c      	ldr	r1, [pc, #48]	; (80020ec <RescheduleTimerList+0x128>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	440b      	add	r3, r1
 80020c4:	3315      	adds	r3, #21
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	73fb      	strb	r3, [r7, #15]
  while(localTimerID != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	2b06      	cmp	r3, #6
 80020ce:	d1c7      	bne.n	8002060 <RescheduleTimerList+0x9c>
  }

  /**
   * Write next count
   */
  RestartWakeupCounter(wakeup_timer_value);
 80020d0:	89bb      	ldrh	r3, [r7, #12]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff1e 	bl	8001f14 <RestartWakeupCounter>

  return ;
 80020d8:	bf00      	nop
}
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}
 80020e0:	40002800 	.word	0x40002800
 80020e4:	20000668 	.word	0x20000668
 80020e8:	20000410 	.word	0x20000410
 80020ec:	20000380 	.word	0x20000380
 80020f0:	20000418 	.word	0x20000418
 80020f4:	2000041e 	.word	0x2000041e

080020f8 <HW_TS_RTC_Wakeup_Handler>:
 * In order to ease maintainability, the unlock is done at the top and the lock at then end
 * in case some new implementation is coming in the future
 */

void HW_TS_RTC_Wakeup_Handler(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b08a      	sub	sp, #40	; 0x28
 80020fc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80020fe:	f3ef 8310 	mrs	r3, PRIMASK
 8002102:	617b      	str	r3, [r7, #20]
  return(result);
 8002104:	697b      	ldr	r3, [r7, #20]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

/* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800210c:	4b59      	ldr	r3, [pc, #356]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	22ca      	movs	r2, #202	; 0xca
 8002112:	625a      	str	r2, [r3, #36]	; 0x24
 8002114:	4b57      	ldr	r3, [pc, #348]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2253      	movs	r2, #83	; 0x53
 800211a:	625a      	str	r2, [r3, #36]	; 0x24
  /**
   * Disable the Wakeup Timer
   * This may speed up a bit the processing to wait the timer to be disabled
   * The timer is still counting 2 RTCCLK
   */
  __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);
 800211c:	4b55      	ldr	r3, [pc, #340]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689a      	ldr	r2, [r3, #8]
 8002122:	4b54      	ldr	r3, [pc, #336]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212a:	609a      	str	r2, [r3, #8]

  local_current_running_timer_id = CurrentRunningTimerID;
 800212c:	4b52      	ldr	r3, [pc, #328]	; (8002278 <HW_TS_RTC_Wakeup_Handler+0x180>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  if(aTimerContext[local_current_running_timer_id].TimerIDStatus == TimerID_Running)
 8002134:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002138:	4950      	ldr	r1, [pc, #320]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	440b      	add	r3, r1
 8002144:	330c      	adds	r3, #12
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d16e      	bne.n	800222c <HW_TS_RTC_Wakeup_Handler+0x134>
  {
    ptimer_callback = aTimerContext[local_current_running_timer_id].pTimerCallBack;
 800214e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002152:	494a      	ldr	r1, [pc, #296]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002154:	4613      	mov	r3, r2
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	4413      	add	r3, r2
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	440b      	add	r3, r1
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	61fb      	str	r3, [r7, #28]
    timer_process_id = aTimerContext[local_current_running_timer_id].TimerProcessID;
 8002162:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002166:	4945      	ldr	r1, [pc, #276]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002168:	4613      	mov	r3, r2
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	3310      	adds	r3, #16
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	61bb      	str	r3, [r7, #24]
     * However, due to the inaccuracy of the reading of the time elapsed, it may return there is 1 tick
     * to be left whereas the count is over
     * A more secure implementation has been done with a flag to state whereas the full count has been written
     * in the wakeuptimer or not
     */
    if(WakeupTimerLimitation != WakeupTimerValue_Overpassed)
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HW_TS_RTC_Wakeup_Handler+0x188>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d04c      	beq.n	800221c <HW_TS_RTC_Wakeup_Handler+0x124>
    {
      if(aTimerContext[local_current_running_timer_id].TimerMode == hw_ts_Repeated)
 8002182:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002186:	493d      	ldr	r1, [pc, #244]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 8002188:	4613      	mov	r3, r2
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	4413      	add	r3, r2
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	440b      	add	r3, r1
 8002192:	330d      	adds	r3, #13
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d124      	bne.n	80021e6 <HW_TS_RTC_Wakeup_Handler+0xee>
      {
        UnlinkTimer(local_current_running_timer_id, SSR_Read_Not_Requested);
 800219c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021a0:	2101      	movs	r1, #1
 80021a2:	4618      	mov	r0, r3
 80021a4:	f7ff fdf2 	bl	8001d8c <UnlinkTimer>
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f383 8810 	msr	PRIMASK, r3
}
 80021b2:	bf00      	nop
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Start(local_current_running_timer_id, aTimerContext[local_current_running_timer_id].CounterInit);
 80021b4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80021b8:	4930      	ldr	r1, [pc, #192]	; (800227c <HW_TS_RTC_Wakeup_Handler+0x184>)
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	00db      	lsls	r3, r3, #3
 80021c2:	440b      	add	r3, r1
 80021c4:	3304      	adds	r3, #4
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021cc:	4611      	mov	r1, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	f000 fa32 	bl	8002638 <HW_TS_Start>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021d4:	4b27      	ldr	r3, [pc, #156]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	22ca      	movs	r2, #202	; 0xca
 80021da:	625a      	str	r2, [r3, #36]	; 0x24
 80021dc:	4b25      	ldr	r3, [pc, #148]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2253      	movs	r2, #83	; 0x53
 80021e2:	625a      	str	r2, [r3, #36]	; 0x24
 80021e4:	e012      	b.n	800220c <HW_TS_RTC_Wakeup_Handler+0x114>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	f383 8810 	msr	PRIMASK, r3
}
 80021f0:	bf00      	nop
      else
      {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
        __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
        HW_TS_Stop(local_current_running_timer_id);
 80021f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f99a 	bl	8002530 <HW_TS_Stop>

        /* Disable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 80021fc:	4b1d      	ldr	r3, [pc, #116]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	22ca      	movs	r2, #202	; 0xca
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
 8002204:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2253      	movs	r2, #83	; 0x53
 800220a:	625a      	str	r2, [r3, #36]	; 0x24
        }

      HW_TS_RTC_Int_AppNot(timer_process_id, local_current_running_timer_id, ptimer_callback);
 800220c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002210:	69fa      	ldr	r2, [r7, #28]
 8002212:	4619      	mov	r1, r3
 8002214:	69b8      	ldr	r0, [r7, #24]
 8002216:	f000 fa95 	bl	8002744 <HW_TS_RTC_Int_AppNot>
 800221a:	e022      	b.n	8002262 <HW_TS_RTC_Wakeup_Handler+0x16a>
    }
    else
    {
      RescheduleTimerList();
 800221c:	f7ff fed2 	bl	8001fc4 <RescheduleTimerList>
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f383 8810 	msr	PRIMASK, r3
}
 800222a:	e01a      	b.n	8002262 <HW_TS_RTC_Wakeup_Handler+0x16a>
    /**
     * We should never end up in this case
     * However, if due to any bug in the timer server this is the case, the mistake may not impact the user.
     * We could just clean the interrupt flag and get out from this unexpected interrupt
     */
    while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 800222c:	bf00      	nop
 800222e:	4b11      	ldr	r3, [pc, #68]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f8      	beq.n	800222e <HW_TS_RTC_Wakeup_Handler+0x136>
     * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
     * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
     * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
     * due to the autoreload feature
     */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 800223c:	4b0d      	ldr	r3, [pc, #52]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	4b0b      	ldr	r3, [pc, #44]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f462 6290 	orn	r2, r2, #1152	; 0x480
 800224c:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 800224e:	4b0d      	ldr	r3, [pc, #52]	; (8002284 <HW_TS_RTC_Wakeup_Handler+0x18c>)
 8002250:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002254:	60da      	str	r2, [r3, #12]
 8002256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002258:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f383 8810 	msr	PRIMASK, r3
}
 8002260:	bf00      	nop
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002262:	4b04      	ldr	r3, [pc, #16]	; (8002274 <HW_TS_RTC_Wakeup_Handler+0x17c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	22ff      	movs	r2, #255	; 0xff
 8002268:	625a      	str	r2, [r3, #36]	; 0x24

  return;
 800226a:	bf00      	nop
}
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000668 	.word	0x20000668
 8002278:	20000410 	.word	0x20000410
 800227c:	20000380 	.word	0x20000380
 8002280:	20000418 	.word	0x20000418
 8002284:	58000800 	.word	0x58000800

08002288 <HW_TS_Init>:

void HW_TS_Init(HW_TS_InitMode_t TimerInitMode, RTC_HandleTypeDef *phrtc)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b088      	sub	sp, #32
 800228c:	af00      	add	r7, sp, #0
 800228e:	4603      	mov	r3, r0
 8002290:	6039      	str	r1, [r7, #0]
 8002292:	71fb      	strb	r3, [r7, #7]
  uint8_t loop;
  uint32_t localmaxwakeuptimersetup;

 /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002294:	4b5e      	ldr	r3, [pc, #376]	; (8002410 <HW_TS_Init+0x188>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	22ca      	movs	r2, #202	; 0xca
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
 800229c:	4b5c      	ldr	r3, [pc, #368]	; (8002410 <HW_TS_Init+0x188>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2253      	movs	r2, #83	; 0x53
 80022a2:	625a      	str	r2, [r3, #36]	; 0x24

  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80022a4:	4b5b      	ldr	r3, [pc, #364]	; (8002414 <HW_TS_Init+0x18c>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	4a5a      	ldr	r2, [pc, #360]	; (8002414 <HW_TS_Init+0x18c>)
 80022aa:	f043 0320 	orr.w	r3, r3, #32
 80022ae:	6093      	str	r3, [r2, #8]

  /**
   * Readout the user config
   */
  WakeupTimerDivider = (4 - ((uint32_t)(READ_BIT(RTC->CR, RTC_CR_WUCKSEL))));
 80022b0:	4b58      	ldr	r3, [pc, #352]	; (8002414 <HW_TS_Init+0x18c>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	f003 0307 	and.w	r3, r3, #7
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f1c3 0304 	rsb	r3, r3, #4
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4b55      	ldr	r3, [pc, #340]	; (8002418 <HW_TS_Init+0x190>)
 80022c4:	701a      	strb	r2, [r3, #0]

  AsynchPrescalerUserConfig = (uint8_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_A) >> (uint32_t)POSITION_VAL(RTC_PRER_PREDIV_A)) + 1;
 80022c6:	4b53      	ldr	r3, [pc, #332]	; (8002414 <HW_TS_Init+0x18c>)
 80022c8:	691b      	ldr	r3, [r3, #16]
 80022ca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80022ce:	f44f 02fe 	mov.w	r2, #8323072	; 0x7f0000
 80022d2:	613a      	str	r2, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	fa92 f2a2 	rbit	r2, r2
 80022da:	60fa      	str	r2, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	617a      	str	r2, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	2a00      	cmp	r2, #0
 80022e4:	d101      	bne.n	80022ea <HW_TS_Init+0x62>
  {
    return 32U;
 80022e6:	2220      	movs	r2, #32
 80022e8:	e003      	b.n	80022f2 <HW_TS_Init+0x6a>
  }
  return __builtin_clz(value);
 80022ea:	697a      	ldr	r2, [r7, #20]
 80022ec:	fab2 f282 	clz	r2, r2
 80022f0:	b2d2      	uxtb	r2, r2
 80022f2:	40d3      	lsrs	r3, r2
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	4b48      	ldr	r3, [pc, #288]	; (800241c <HW_TS_Init+0x194>)
 80022fc:	701a      	strb	r2, [r3, #0]

  SynchPrescalerUserConfig = (uint16_t)(READ_BIT(RTC->PRER, RTC_PRER_PREDIV_S)) + 1;
 80022fe:	4b45      	ldr	r3, [pc, #276]	; (8002414 <HW_TS_Init+0x18c>)
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	b29b      	uxth	r3, r3
 8002304:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002308:	b29b      	uxth	r3, r3
 800230a:	3301      	adds	r3, #1
 800230c:	b29a      	uxth	r2, r3
 800230e:	4b44      	ldr	r3, [pc, #272]	; (8002420 <HW_TS_Init+0x198>)
 8002310:	801a      	strh	r2, [r3, #0]

  /**
   *  Margin is taken to avoid wrong calculation when the wrap around is there and some
   *  application interrupts may have delayed the reading
   */
  localmaxwakeuptimersetup = ((((SynchPrescalerUserConfig - 1)*AsynchPrescalerUserConfig) - CFG_HW_TS_RTC_HANDLER_MAX_DELAY) >> WakeupTimerDivider);
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HW_TS_Init+0x198>)
 8002314:	881b      	ldrh	r3, [r3, #0]
 8002316:	3b01      	subs	r3, #1
 8002318:	4a40      	ldr	r2, [pc, #256]	; (800241c <HW_TS_Init+0x194>)
 800231a:	7812      	ldrb	r2, [r2, #0]
 800231c:	fb02 f303 	mul.w	r3, r2, r3
 8002320:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002324:	4a3c      	ldr	r2, [pc, #240]	; (8002418 <HW_TS_Init+0x190>)
 8002326:	7812      	ldrb	r2, [r2, #0]
 8002328:	40d3      	lsrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]

  if(localmaxwakeuptimersetup >= 0xFFFF)
 800232c:	69bb      	ldr	r3, [r7, #24]
 800232e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002332:	4293      	cmp	r3, r2
 8002334:	d904      	bls.n	8002340 <HW_TS_Init+0xb8>
  {
    MaxWakeupTimerSetup = 0xFFFF;
 8002336:	4b3b      	ldr	r3, [pc, #236]	; (8002424 <HW_TS_Init+0x19c>)
 8002338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800233c:	801a      	strh	r2, [r3, #0]
 800233e:	e003      	b.n	8002348 <HW_TS_Init+0xc0>
  }
  else
  {
    MaxWakeupTimerSetup = (uint16_t)localmaxwakeuptimersetup;
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	b29a      	uxth	r2, r3
 8002344:	4b37      	ldr	r3, [pc, #220]	; (8002424 <HW_TS_Init+0x19c>)
 8002346:	801a      	strh	r2, [r3, #0]
  }

  /**
   * Configure EXTI module
   */
  LL_EXTI_EnableRisingTrig_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002348:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800234c:	f7ff fb9c 	bl	8001a88 <LL_EXTI_EnableRisingTrig_0_31>
  LL_EXTI_EnableIT_0_31(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8002350:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002354:	f7ff fb84 	bl	8001a60 <LL_EXTI_EnableIT_0_31>

  if(TimerInitMode == hw_ts_InitMode_Full)
 8002358:	79fb      	ldrb	r3, [r7, #7]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d13d      	bne.n	80023da <HW_TS_Init+0x152>
  {
    WakeupTimerLimitation = WakeupTimerValue_LargeEnough;
 800235e:	4b32      	ldr	r3, [pc, #200]	; (8002428 <HW_TS_Init+0x1a0>)
 8002360:	2201      	movs	r2, #1
 8002362:	701a      	strb	r2, [r3, #0]
    SSRValueOnLastSetup = SSR_FORBIDDEN_VALUE;
 8002364:	4b31      	ldr	r3, [pc, #196]	; (800242c <HW_TS_Init+0x1a4>)
 8002366:	f04f 32ff 	mov.w	r2, #4294967295
 800236a:	601a      	str	r2, [r3, #0]

    /**
     * Initialize the timer server
     */
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 800236c:	2300      	movs	r3, #0
 800236e:	77fb      	strb	r3, [r7, #31]
 8002370:	e00c      	b.n	800238c <HW_TS_Init+0x104>
    {
      aTimerContext[loop].TimerIDStatus = TimerID_Free;
 8002372:	7ffa      	ldrb	r2, [r7, #31]
 8002374:	492e      	ldr	r1, [pc, #184]	; (8002430 <HW_TS_Init+0x1a8>)
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	330c      	adds	r3, #12
 8002382:	2200      	movs	r2, #0
 8002384:	701a      	strb	r2, [r3, #0]
    for(loop = 0; loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER; loop++)
 8002386:	7ffb      	ldrb	r3, [r7, #31]
 8002388:	3301      	adds	r3, #1
 800238a:	77fb      	strb	r3, [r7, #31]
 800238c:	7ffb      	ldrb	r3, [r7, #31]
 800238e:	2b05      	cmp	r3, #5
 8002390:	d9ef      	bls.n	8002372 <HW_TS_Init+0xea>
    }

    CurrentRunningTimerID = CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER;   /**<  Set ID to non valid value */
 8002392:	4b28      	ldr	r3, [pc, #160]	; (8002434 <HW_TS_Init+0x1ac>)
 8002394:	2206      	movs	r2, #6
 8002396:	701a      	strb	r2, [r3, #0]

    __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);                       /**<  Disable the Wakeup Timer */
 8002398:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <HW_TS_Init+0x188>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689a      	ldr	r2, [r3, #8]
 800239e:	4b1c      	ldr	r3, [pc, #112]	; (8002410 <HW_TS_Init+0x188>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a6:	609a      	str	r2, [r3, #8]
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);     /**<  Clear flag in RTC module */
 80023a8:	4b19      	ldr	r3, [pc, #100]	; (8002410 <HW_TS_Init+0x188>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <HW_TS_Init+0x188>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80023b8:	60da      	str	r2, [r3, #12]
    __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module  */
 80023ba:	4b1f      	ldr	r3, [pc, #124]	; (8002438 <HW_TS_Init+0x1b0>)
 80023bc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80023c0:	60da      	str	r2, [r3, #12]
    HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);       /**<  Clear pending bit in NVIC  */
 80023c2:	2003      	movs	r0, #3
 80023c4:	f003 fc81 	bl	8005cca <HAL_NVIC_ClearPendingIRQ>
    __HAL_RTC_WAKEUPTIMER_ENABLE_IT(&hrtc, RTC_IT_WUT);         /**<  Enable interrupt in RTC module  */
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <HW_TS_Init+0x188>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <HW_TS_Init+0x188>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e009      	b.n	80023ee <HW_TS_Init+0x166>
  }
  else
  {
    if(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTF) != RESET)
 80023da:	4b0d      	ldr	r3, [pc, #52]	; (8002410 <HW_TS_Init+0x188>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <HW_TS_Init+0x166>
    {
      /**
       * Simulate that the Timer expired
       */
      HAL_NVIC_SetPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);
 80023e8:	2003      	movs	r0, #3
 80023ea:	f003 fc60 	bl	8005cae <HAL_NVIC_SetPendingIRQ>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <HW_TS_Init+0x188>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	22ff      	movs	r2, #255	; 0xff
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_SetPriority(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_PREEMPTPRIO, CFG_HW_TS_NVIC_RTC_WAKEUP_IT_SUBPRIO);   /**<  Set NVIC priority */
 80023f6:	2200      	movs	r2, #0
 80023f8:	2103      	movs	r1, #3
 80023fa:	2003      	movs	r0, #3
 80023fc:	f003 fc15 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002400:	2003      	movs	r0, #3
 8002402:	f003 fc2c 	bl	8005c5e <HAL_NVIC_EnableIRQ>

  return;
 8002406:	bf00      	nop
}
 8002408:	3720      	adds	r7, #32
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	20000668 	.word	0x20000668
 8002414:	40002800 	.word	0x40002800
 8002418:	20000419 	.word	0x20000419
 800241c:	2000041a 	.word	0x2000041a
 8002420:	2000041c 	.word	0x2000041c
 8002424:	2000041e 	.word	0x2000041e
 8002428:	20000418 	.word	0x20000418
 800242c:	20000414 	.word	0x20000414
 8002430:	20000380 	.word	0x20000380
 8002434:	20000410 	.word	0x20000410
 8002438:	58000800 	.word	0x58000800

0800243c <HW_TS_Create>:

HW_TS_ReturnStatus_t HW_TS_Create(uint32_t TimerProcessID, uint8_t *pTimerId, HW_TS_Mode_t TimerMode, HW_TS_pTimerCb_t pftimeout_handler)
{
 800243c:	b480      	push	{r7}
 800243e:	b08b      	sub	sp, #44	; 0x2c
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	60b9      	str	r1, [r7, #8]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	4613      	mov	r3, r2
 800244a:	71fb      	strb	r3, [r7, #7]
  HW_TS_ReturnStatus_t localreturnstatus;
  uint8_t loop = 0;
 800244c:	2300      	movs	r3, #0
 800244e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002452:	f3ef 8310 	mrs	r3, PRIMASK
 8002456:	61fb      	str	r3, [r7, #28]
  return(result);
 8002458:	69fb      	ldr	r3, [r7, #28]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800245a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800245c:	b672      	cpsid	i
}
 800245e:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 8002460:	e004      	b.n	800246c <HW_TS_Create+0x30>
  {
    loop++;
 8002462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002466:	3301      	adds	r3, #1
 8002468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  while((loop < CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER) && (aTimerContext[loop].TimerIDStatus != TimerID_Free))
 800246c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002470:	2b05      	cmp	r3, #5
 8002472:	d80c      	bhi.n	800248e <HW_TS_Create+0x52>
 8002474:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8002478:	492c      	ldr	r1, [pc, #176]	; (800252c <HW_TS_Create+0xf0>)
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	00db      	lsls	r3, r3, #3
 8002482:	440b      	add	r3, r1
 8002484:	330c      	adds	r3, #12
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1e9      	bne.n	8002462 <HW_TS_Create+0x26>
  }

  if(loop != CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 800248e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002492:	2b06      	cmp	r3, #6
 8002494:	d038      	beq.n	8002508 <HW_TS_Create+0xcc>
  {
    aTimerContext[loop].TimerIDStatus = TimerID_Created;
 8002496:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800249a:	4924      	ldr	r1, [pc, #144]	; (800252c <HW_TS_Create+0xf0>)
 800249c:	4613      	mov	r3, r2
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	4413      	add	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	440b      	add	r3, r1
 80024a6:	330c      	adds	r3, #12
 80024a8:	2201      	movs	r2, #1
 80024aa:	701a      	strb	r2, [r3, #0]
 80024ac:	6a3b      	ldr	r3, [r7, #32]
 80024ae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	f383 8810 	msr	PRIMASK, r3
}
 80024b6:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    aTimerContext[loop].TimerProcessID = TimerProcessID;
 80024b8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024bc:	491b      	ldr	r1, [pc, #108]	; (800252c <HW_TS_Create+0xf0>)
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	00db      	lsls	r3, r3, #3
 80024c6:	440b      	add	r3, r1
 80024c8:	3310      	adds	r3, #16
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	601a      	str	r2, [r3, #0]
    aTimerContext[loop].TimerMode = TimerMode;
 80024ce:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024d2:	4916      	ldr	r1, [pc, #88]	; (800252c <HW_TS_Create+0xf0>)
 80024d4:	4613      	mov	r3, r2
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	4413      	add	r3, r2
 80024da:	00db      	lsls	r3, r3, #3
 80024dc:	440b      	add	r3, r1
 80024de:	330d      	adds	r3, #13
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	701a      	strb	r2, [r3, #0]
    aTimerContext[loop].pTimerCallBack = pftimeout_handler;
 80024e4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024e8:	4910      	ldr	r1, [pc, #64]	; (800252c <HW_TS_Create+0xf0>)
 80024ea:	4613      	mov	r3, r2
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	4413      	add	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	440b      	add	r3, r1
 80024f4:	683a      	ldr	r2, [r7, #0]
 80024f6:	601a      	str	r2, [r3, #0]
    *pTimerId = loop;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80024fe:	701a      	strb	r2, [r3, #0]

    localreturnstatus = hw_ts_Successful;
 8002500:	2300      	movs	r3, #0
 8002502:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002506:	e008      	b.n	800251a <HW_TS_Create+0xde>
 8002508:	6a3b      	ldr	r3, [r7, #32]
 800250a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	f383 8810 	msr	PRIMASK, r3
}
 8002512:	bf00      	nop
  {
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
    __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

    localreturnstatus = hw_ts_Failed;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return(localreturnstatus);
 800251a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800251e:	4618      	mov	r0, r3
 8002520:	372c      	adds	r7, #44	; 0x2c
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000380 	.word	0x20000380

08002530 <HW_TS_Stop>:

  return;
}

void HW_TS_Stop(uint8_t timer_id)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	4603      	mov	r3, r0
 8002538:	71fb      	strb	r3, [r7, #7]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800253a:	f3ef 8310 	mrs	r3, PRIMASK
 800253e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002540:	68fb      	ldr	r3, [r7, #12]
#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 8002542:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8002544:	b672      	cpsid	i
}
 8002546:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002548:	2003      	movs	r0, #3
 800254a:	f003 fb96 	bl	8005c7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 800254e:	4b34      	ldr	r3, [pc, #208]	; (8002620 <HW_TS_Stop+0xf0>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	22ca      	movs	r2, #202	; 0xca
 8002554:	625a      	str	r2, [r3, #36]	; 0x24
 8002556:	4b32      	ldr	r3, [pc, #200]	; (8002620 <HW_TS_Stop+0xf0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2253      	movs	r2, #83	; 0x53
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 800255e:	79fa      	ldrb	r2, [r7, #7]
 8002560:	4930      	ldr	r1, [pc, #192]	; (8002624 <HW_TS_Stop+0xf4>)
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	440b      	add	r3, r1
 800256c:	330c      	adds	r3, #12
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d142      	bne.n	80025fc <HW_TS_Stop+0xcc>
  {
    UnlinkTimer(timer_id, SSR_Read_Requested);
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	2100      	movs	r1, #0
 800257a:	4618      	mov	r0, r3
 800257c:	f7ff fc06 	bl	8001d8c <UnlinkTimer>
    localcurrentrunningtimerid = CurrentRunningTimerID;
 8002580:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HW_TS_Stop+0xf8>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	74fb      	strb	r3, [r7, #19]

    if(localcurrentrunningtimerid == CFG_HW_TS_MAX_NBR_CONCURRENT_TIMER)
 8002586:	7cfb      	ldrb	r3, [r7, #19]
 8002588:	2b06      	cmp	r3, #6
 800258a:	d12f      	bne.n	80025ec <HW_TS_Stop+0xbc>
       */

      /**
       * Disable the timer
       */
      if((READ_BIT(RTC->CR, RTC_CR_WUTE) == (RTC_CR_WUTE)) == SET)
 800258c:	4b27      	ldr	r3, [pc, #156]	; (800262c <HW_TS_Stop+0xfc>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002598:	d107      	bne.n	80025aa <HW_TS_Stop+0x7a>
      {
        /**
         * Wait for the flag to be back to 0 when the wakeup timer is enabled
         */
        while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == SET);
 800259a:	bf00      	nop
 800259c:	4b20      	ldr	r3, [pc, #128]	; (8002620 <HW_TS_Stop+0xf0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0304 	and.w	r3, r3, #4
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f8      	bne.n	800259c <HW_TS_Stop+0x6c>
      }
      __HAL_RTC_WAKEUPTIMER_DISABLE(&hrtc);   /**<  Disable the Wakeup Timer */
 80025aa:	4b1d      	ldr	r3, [pc, #116]	; (8002620 <HW_TS_Stop+0xf0>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b1b      	ldr	r3, [pc, #108]	; (8002620 <HW_TS_Stop+0xf0>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b8:	609a      	str	r2, [r3, #8]

      while(__HAL_RTC_WAKEUPTIMER_GET_FLAG(&hrtc, RTC_FLAG_WUTWF) == RESET);
 80025ba:	bf00      	nop
 80025bc:	4b18      	ldr	r3, [pc, #96]	; (8002620 <HW_TS_Stop+0xf0>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0304 	and.w	r3, r3, #4
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f8      	beq.n	80025bc <HW_TS_Stop+0x8c>
       * It takes 2 RTCCLK between the time the WUTE bit is disabled and the
       * time the timer is disabled. The WUTWF bit somehow guarantee the system is stable
       * Otherwise, when the timer is periodic with 1 Tick, it may generate an extra interrupt in between
       * due to the autoreload feature
       */
      __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(&hrtc, RTC_FLAG_WUTF);   /**<  Clear flag in RTC module */
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <HW_TS_Stop+0xf0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	b2da      	uxtb	r2, r3
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <HW_TS_Stop+0xf0>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80025da:	60da      	str	r2, [r3, #12]
      __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG(); /**<  Clear flag in EXTI module */
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <HW_TS_Stop+0x100>)
 80025de:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025e2:	60da      	str	r2, [r3, #12]
      HAL_NVIC_ClearPendingIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);   /**<  Clear pending bit in NVIC */
 80025e4:	2003      	movs	r0, #3
 80025e6:	f003 fb70 	bl	8005cca <HAL_NVIC_ClearPendingIRQ>
 80025ea:	e007      	b.n	80025fc <HW_TS_Stop+0xcc>
    }
    else if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80025ec:	4b11      	ldr	r3, [pc, #68]	; (8002634 <HW_TS_Stop+0x104>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	7cfa      	ldrb	r2, [r7, #19]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d001      	beq.n	80025fc <HW_TS_Stop+0xcc>
    {
      RescheduleTimerList();
 80025f8:	f7ff fce4 	bl	8001fc4 <RescheduleTimerList>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HW_TS_Stop+0xf0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002604:	2003      	movs	r0, #3
 8002606:	f003 fb2a 	bl	8005c5e <HAL_NVIC_EnableIRQ>
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	f383 8810 	msr	PRIMASK, r3
}
 8002614:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 8002616:	bf00      	nop
}
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	20000668 	.word	0x20000668
 8002624:	20000380 	.word	0x20000380
 8002628:	20000410 	.word	0x20000410
 800262c:	40002800 	.word	0x40002800
 8002630:	58000800 	.word	0x58000800
 8002634:	20000411 	.word	0x20000411

08002638 <HW_TS_Start>:

void HW_TS_Start(uint8_t timer_id, uint32_t timeout_ticks)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	6039      	str	r1, [r7, #0]
 8002642:	71fb      	strb	r3, [r7, #7]

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  uint32_t primask_bit;
#endif

  if(aTimerContext[timer_id].TimerIDStatus == TimerID_Running)
 8002644:	79fa      	ldrb	r2, [r7, #7]
 8002646:	493b      	ldr	r1, [pc, #236]	; (8002734 <HW_TS_Start+0xfc>)
 8002648:	4613      	mov	r3, r2
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	4413      	add	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	440b      	add	r3, r1
 8002652:	330c      	adds	r3, #12
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d103      	bne.n	8002664 <HW_TS_Start+0x2c>
  {
    HW_TS_Stop( timer_id );
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff ff66 	bl	8002530 <HW_TS_Stop>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002664:	f3ef 8310 	mrs	r3, PRIMASK
 8002668:	60fb      	str	r3, [r7, #12]
  return(result);
 800266a:	68fb      	ldr	r3, [r7, #12]
  }

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800266c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800266e:	b672      	cpsid	i
}
 8002670:	bf00      	nop
  __disable_irq();          /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
#endif

  HAL_NVIC_DisableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID);    /**<  Disable NVIC */
 8002672:	2003      	movs	r0, #3
 8002674:	f003 fb01 	bl	8005c7a <HAL_NVIC_DisableIRQ>

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE( &hrtc );
 8002678:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <HW_TS_Start+0x100>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	22ca      	movs	r2, #202	; 0xca
 800267e:	625a      	str	r2, [r3, #36]	; 0x24
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HW_TS_Start+0x100>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2253      	movs	r2, #83	; 0x53
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

  aTimerContext[timer_id].TimerIDStatus = TimerID_Running;
 8002688:	79fa      	ldrb	r2, [r7, #7]
 800268a:	492a      	ldr	r1, [pc, #168]	; (8002734 <HW_TS_Start+0xfc>)
 800268c:	4613      	mov	r3, r2
 800268e:	005b      	lsls	r3, r3, #1
 8002690:	4413      	add	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	440b      	add	r3, r1
 8002696:	330c      	adds	r3, #12
 8002698:	2202      	movs	r2, #2
 800269a:	701a      	strb	r2, [r3, #0]

  aTimerContext[timer_id].CountLeft = timeout_ticks;
 800269c:	79fa      	ldrb	r2, [r7, #7]
 800269e:	4925      	ldr	r1, [pc, #148]	; (8002734 <HW_TS_Start+0xfc>)
 80026a0:	4613      	mov	r3, r2
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	4413      	add	r3, r2
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	440b      	add	r3, r1
 80026aa:	3308      	adds	r3, #8
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	601a      	str	r2, [r3, #0]
  aTimerContext[timer_id].CounterInit = timeout_ticks;
 80026b0:	79fa      	ldrb	r2, [r7, #7]
 80026b2:	4920      	ldr	r1, [pc, #128]	; (8002734 <HW_TS_Start+0xfc>)
 80026b4:	4613      	mov	r3, r2
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4413      	add	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	440b      	add	r3, r1
 80026be:	3304      	adds	r3, #4
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	601a      	str	r2, [r3, #0]

  time_elapsed =  linkTimer(timer_id);
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fab6 	bl	8001c38 <linkTimer>
 80026cc:	4603      	mov	r3, r0
 80026ce:	827b      	strh	r3, [r7, #18]

  localcurrentrunningtimerid = CurrentRunningTimerID;
 80026d0:	4b1a      	ldr	r3, [pc, #104]	; (800273c <HW_TS_Start+0x104>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	747b      	strb	r3, [r7, #17]

  if(PreviousRunningTimerID != localcurrentrunningtimerid)
 80026d6:	4b1a      	ldr	r3, [pc, #104]	; (8002740 <HW_TS_Start+0x108>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	7c7a      	ldrb	r2, [r7, #17]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d002      	beq.n	80026e8 <HW_TS_Start+0xb0>
  {
    RescheduleTimerList();
 80026e2:	f7ff fc6f 	bl	8001fc4 <RescheduleTimerList>
 80026e6:	e013      	b.n	8002710 <HW_TS_Start+0xd8>
  }
  else
  {
    aTimerContext[timer_id].CountLeft -= time_elapsed;
 80026e8:	79fa      	ldrb	r2, [r7, #7]
 80026ea:	4912      	ldr	r1, [pc, #72]	; (8002734 <HW_TS_Start+0xfc>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	00db      	lsls	r3, r3, #3
 80026f4:	440b      	add	r3, r1
 80026f6:	3308      	adds	r3, #8
 80026f8:	6819      	ldr	r1, [r3, #0]
 80026fa:	8a7b      	ldrh	r3, [r7, #18]
 80026fc:	79fa      	ldrb	r2, [r7, #7]
 80026fe:	1ac9      	subs	r1, r1, r3
 8002700:	480c      	ldr	r0, [pc, #48]	; (8002734 <HW_TS_Start+0xfc>)
 8002702:	4613      	mov	r3, r2
 8002704:	005b      	lsls	r3, r3, #1
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4403      	add	r3, r0
 800270c:	3308      	adds	r3, #8
 800270e:	6019      	str	r1, [r3, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE( &hrtc );
 8002710:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HW_TS_Start+0x100>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	625a      	str	r2, [r3, #36]	; 0x24

  HAL_NVIC_EnableIRQ(CFG_HW_TS_RTC_WAKEUP_HANDLER_ID); /**<  Enable NVIC */
 8002718:	2003      	movs	r0, #3
 800271a:	f003 faa0 	bl	8005c5e <HAL_NVIC_EnableIRQ>
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	f383 8810 	msr	PRIMASK, r3
}
 8002728:	bf00      	nop

#if (CFG_HW_TS_USE_PRIMASK_AS_CRITICAL_SECTION == 1)
  __set_PRIMASK(primask_bit); /**< Restore PRIMASK bit*/
#endif

  return;
 800272a:	bf00      	nop
}
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20000380 	.word	0x20000380
 8002738:	20000668 	.word	0x20000668
 800273c:	20000410 	.word	0x20000410
 8002740:	20000411 	.word	0x20000411

08002744 <HW_TS_RTC_Int_AppNot>:

  return (return_value);
}

__weak void HW_TS_RTC_Int_AppNot(uint32_t TimerProcessID, uint8_t TimerID, HW_TS_pTimerCb_t pTimerCallBack)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	460b      	mov	r3, r1
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	72fb      	strb	r3, [r7, #11]
  pTimerCallBack();
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4798      	blx	r3

  return;
 8002756:	bf00      	nop
}
 8002758:	3710      	adds	r7, #16
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
	...

08002760 <HW_UART_Receive_IT>:
    void (*HW_hlpuart1RxCb)(void);
    void (*HW_hlpuart1TxCb)(void);
#endif

void HW_UART_Receive_IT(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60b9      	str	r1, [r7, #8]
 8002768:	607b      	str	r3, [r7, #4]
 800276a:	4603      	mov	r3, r0
 800276c:	73fb      	strb	r3, [r7, #15]
 800276e:	4613      	mov	r3, r2
 8002770:	81bb      	strh	r3, [r7, #12]
    switch (hw_uart_id)
 8002772:	7bfb      	ldrb	r3, [r7, #15]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d002      	beq.n	800277e <HW_UART_Receive_IT+0x1e>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d00d      	beq.n	8002798 <HW_UART_Receive_IT+0x38>
            HW_UART_RX_IT(hlpuart1, LPUART1);
            break;
#endif

        default:
            break;
 800277c:	e019      	b.n	80027b2 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(huart1, USART1);
 800277e:	4a0f      	ldr	r2, [pc, #60]	; (80027bc <HW_UART_Receive_IT+0x5c>)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <HW_UART_Receive_IT+0x60>)
 8002786:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HW_UART_Receive_IT+0x64>)
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	89bb      	ldrh	r3, [r7, #12]
 800278c:	461a      	mov	r2, r3
 800278e:	68b9      	ldr	r1, [r7, #8]
 8002790:	480b      	ldr	r0, [pc, #44]	; (80027c0 <HW_UART_Receive_IT+0x60>)
 8002792:	f006 ff1d 	bl	80095d0 <HAL_UART_Receive_IT>
            break;
 8002796:	e00c      	b.n	80027b2 <HW_UART_Receive_IT+0x52>
            HW_UART_RX_IT(hlpuart1, LPUART1);
 8002798:	4a0b      	ldr	r2, [pc, #44]	; (80027c8 <HW_UART_Receive_IT+0x68>)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	4b0b      	ldr	r3, [pc, #44]	; (80027cc <HW_UART_Receive_IT+0x6c>)
 80027a0:	4a0b      	ldr	r2, [pc, #44]	; (80027d0 <HW_UART_Receive_IT+0x70>)
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	89bb      	ldrh	r3, [r7, #12]
 80027a6:	461a      	mov	r2, r3
 80027a8:	68b9      	ldr	r1, [r7, #8]
 80027aa:	4808      	ldr	r0, [pc, #32]	; (80027cc <HW_UART_Receive_IT+0x6c>)
 80027ac:	f006 ff10 	bl	80095d0 <HAL_UART_Receive_IT>
            break;
 80027b0:	bf00      	nop
    }

    return;
 80027b2:	bf00      	nop
}
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	20000420 	.word	0x20000420
 80027c0:	20000500 	.word	0x20000500
 80027c4:	40013800 	.word	0x40013800
 80027c8:	20000428 	.word	0x20000428
 80027cc:	2000046c 	.word	0x2000046c
 80027d0:	40008000 	.word	0x40008000

080027d4 <HW_UART_Transmit_DMA>:

    return hw_status;
}

hw_status_t HW_UART_Transmit_DMA(hw_uart_id_t hw_uart_id, uint8_t *p_data, uint16_t size, void (*cb)(void))
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607b      	str	r3, [r7, #4]
 80027de:	4603      	mov	r3, r0
 80027e0:	73fb      	strb	r3, [r7, #15]
 80027e2:	4613      	mov	r3, r2
 80027e4:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef hal_status = HAL_OK;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    hw_status_t hw_status = hw_uart_ok;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75bb      	strb	r3, [r7, #22]

    switch (hw_uart_id)
 80027ee:	7bfb      	ldrb	r3, [r7, #15]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d002      	beq.n	80027fa <HW_UART_Transmit_DMA+0x26>
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d00f      	beq.n	8002818 <HW_UART_Transmit_DMA+0x44>
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
            break;
#endif

        default:
            break;
 80027f8:	e01d      	b.n	8002836 <HW_UART_Transmit_DMA+0x62>
            HW_huart1TxCb = cb;
 80027fa:	4a1f      	ldr	r2, [pc, #124]	; (8002878 <HW_UART_Transmit_DMA+0xa4>)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6013      	str	r3, [r2, #0]
            huart1.Instance = USART1;
 8002800:	4b1e      	ldr	r3, [pc, #120]	; (800287c <HW_UART_Transmit_DMA+0xa8>)
 8002802:	4a1f      	ldr	r2, [pc, #124]	; (8002880 <HW_UART_Transmit_DMA+0xac>)
 8002804:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002806:	89bb      	ldrh	r3, [r7, #12]
 8002808:	461a      	mov	r2, r3
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	481b      	ldr	r0, [pc, #108]	; (800287c <HW_UART_Transmit_DMA+0xa8>)
 800280e:	f006 ff2b 	bl	8009668 <HAL_UART_Transmit_DMA>
 8002812:	4603      	mov	r3, r0
 8002814:	75fb      	strb	r3, [r7, #23]
            break;
 8002816:	e00e      	b.n	8002836 <HW_UART_Transmit_DMA+0x62>
            HW_hlpuart1TxCb = cb;
 8002818:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <HW_UART_Transmit_DMA+0xb0>)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6013      	str	r3, [r2, #0]
            hlpuart1.Instance = LPUART1;
 800281e:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HW_UART_Transmit_DMA+0xb4>)
 8002820:	4a1a      	ldr	r2, [pc, #104]	; (800288c <HW_UART_Transmit_DMA+0xb8>)
 8002822:	601a      	str	r2, [r3, #0]
            hal_status = HAL_UART_Transmit_DMA(&hlpuart1, p_data, size);
 8002824:	89bb      	ldrh	r3, [r7, #12]
 8002826:	461a      	mov	r2, r3
 8002828:	68b9      	ldr	r1, [r7, #8]
 800282a:	4817      	ldr	r0, [pc, #92]	; (8002888 <HW_UART_Transmit_DMA+0xb4>)
 800282c:	f006 ff1c 	bl	8009668 <HAL_UART_Transmit_DMA>
 8002830:	4603      	mov	r3, r0
 8002832:	75fb      	strb	r3, [r7, #23]
            break;
 8002834:	bf00      	nop
    }

    switch (hal_status)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b03      	cmp	r3, #3
 800283a:	d817      	bhi.n	800286c <HW_UART_Transmit_DMA+0x98>
 800283c:	a201      	add	r2, pc, #4	; (adr r2, 8002844 <HW_UART_Transmit_DMA+0x70>)
 800283e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002842:	bf00      	nop
 8002844:	08002855 	.word	0x08002855
 8002848:	0800285b 	.word	0x0800285b
 800284c:	08002861 	.word	0x08002861
 8002850:	08002867 	.word	0x08002867
    {
        case HAL_OK:
            hw_status = hw_uart_ok;
 8002854:	2300      	movs	r3, #0
 8002856:	75bb      	strb	r3, [r7, #22]
            break;
 8002858:	e009      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        case HAL_ERROR:
            hw_status = hw_uart_error;
 800285a:	2301      	movs	r3, #1
 800285c:	75bb      	strb	r3, [r7, #22]
            break;
 800285e:	e006      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        case HAL_BUSY:
            hw_status = hw_uart_busy;
 8002860:	2302      	movs	r3, #2
 8002862:	75bb      	strb	r3, [r7, #22]
            break;
 8002864:	e003      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        case HAL_TIMEOUT:
            hw_status = hw_uart_to;
 8002866:	2303      	movs	r3, #3
 8002868:	75bb      	strb	r3, [r7, #22]
            break;
 800286a:	e000      	b.n	800286e <HW_UART_Transmit_DMA+0x9a>

        default:
            break;
 800286c:	bf00      	nop
    }

    return hw_status;
 800286e:	7dbb      	ldrb	r3, [r7, #22]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	20000424 	.word	0x20000424
 800287c:	20000500 	.word	0x20000500
 8002880:	40013800 	.word	0x40013800
 8002884:	2000042c 	.word	0x2000042c
 8002888:	2000046c 	.word	0x2000046c
 800288c:	40008000 	.word	0x40008000

08002890 <HAL_UART_RxCpltCallback>:

    return;
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_UART_RxCpltCallback+0x4c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00a      	beq.n	80028b8 <HAL_UART_RxCpltCallback+0x28>
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <HAL_UART_RxCpltCallback+0x50>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_UART_RxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1RxCb)
 80028a8:	4b0e      	ldr	r3, [pc, #56]	; (80028e4 <HAL_UART_RxCpltCallback+0x54>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <HAL_UART_RxCpltCallback+0x3c>
            {
                HW_huart1RxCb();
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <HAL_UART_RxCpltCallback+0x54>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4798      	blx	r3
            }
            break;
 80028b6:	e009      	b.n	80028cc <HAL_UART_RxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1RxCb)
 80028b8:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <HAL_UART_RxCpltCallback+0x58>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_UART_RxCpltCallback+0x40>
            {
                HW_hlpuart1RxCb();
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_UART_RxCpltCallback+0x58>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4798      	blx	r3
            }
            break;
 80028c6:	e003      	b.n	80028d0 <HAL_UART_RxCpltCallback+0x40>
#endif

        default:
            break;
 80028c8:	bf00      	nop
 80028ca:	e002      	b.n	80028d2 <HAL_UART_RxCpltCallback+0x42>
            break;
 80028cc:	bf00      	nop
 80028ce:	e000      	b.n	80028d2 <HAL_UART_RxCpltCallback+0x42>
            break;
 80028d0:	bf00      	nop
    }

    return;
 80028d2:	bf00      	nop
}
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	40008000 	.word	0x40008000
 80028e0:	40013800 	.word	0x40013800
 80028e4:	20000420 	.word	0x20000420
 80028e8:	20000428 	.word	0x20000428

080028ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    switch ((uint32_t)huart->Instance)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_UART_TxCpltCallback+0x4c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00a      	beq.n	8002914 <HAL_UART_TxCpltCallback+0x28>
 80028fe:	4a0f      	ldr	r2, [pc, #60]	; (800293c <HAL_UART_TxCpltCallback+0x50>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d10f      	bne.n	8002924 <HAL_UART_TxCpltCallback+0x38>
    {
#if (CFG_HW_USART1_ENABLED == 1)
        case (uint32_t)USART1:
            if(HW_huart1TxCb)
 8002904:	4b0e      	ldr	r3, [pc, #56]	; (8002940 <HAL_UART_TxCpltCallback+0x54>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00d      	beq.n	8002928 <HAL_UART_TxCpltCallback+0x3c>
            {
                HW_huart1TxCb();
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_UART_TxCpltCallback+0x54>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4798      	blx	r3
            }
            break;
 8002912:	e009      	b.n	8002928 <HAL_UART_TxCpltCallback+0x3c>
#endif

#if (CFG_HW_LPUART1_ENABLED == 1)
        case (uint32_t)LPUART1:
            if(HW_hlpuart1TxCb)
 8002914:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_UART_TxCpltCallback+0x58>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_UART_TxCpltCallback+0x40>
            {
                HW_hlpuart1TxCb();
 800291c:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_UART_TxCpltCallback+0x58>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4798      	blx	r3
            }
            break;
 8002922:	e003      	b.n	800292c <HAL_UART_TxCpltCallback+0x40>
#endif

        default:
            break;
 8002924:	bf00      	nop
 8002926:	e002      	b.n	800292e <HAL_UART_TxCpltCallback+0x42>
            break;
 8002928:	bf00      	nop
 800292a:	e000      	b.n	800292e <HAL_UART_TxCpltCallback+0x42>
            break;
 800292c:	bf00      	nop
    }

    return;
 800292e:	bf00      	nop
}
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	40008000 	.word	0x40008000
 800293c:	40013800 	.word	0x40013800
 8002940:	20000424 	.word	0x20000424
 8002944:	2000042c 	.word	0x2000042c

08002948 <LL_RCC_LSE_SetDriveCapability>:
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8002950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	f023 0218 	bic.w	r2, r3, #24
 800295c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4313      	orrs	r3, r2
 8002964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002968:	bf00      	nop
 800296a:	370c      	adds	r7, #12
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr

08002974 <LL_AHB1_GRP1_EnableClock>:
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800297c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002980:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002982:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4313      	orrs	r3, r2
 800298a:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4013      	ands	r3, r2
 8002996:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002998:	68fb      	ldr	r3, [r7, #12]
}
 800299a:	bf00      	nop
 800299c:	3714      	adds	r7, #20
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_AHB2_GRP1_EnableClock>:
{
 80029a6:	b480      	push	{r7}
 80029a8:	b085      	sub	sp, #20
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80029ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80029ca:	68fb      	ldr	r3, [r7, #12]
}
 80029cc:	bf00      	nop
 80029ce:	3714      	adds	r7, #20
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029dc:	f002 ff4c 	bl	8005878 <HAL_Init>
  /* Config code for STM32_WPAN (HSE Tuning must be done before system clock configuration) */
  MX_APPE_Config();
 80029e0:	f7fe fcfc 	bl	80013dc <MX_APPE_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029e4:	f000 f814 	bl	8002a10 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80029e8:	f000 f870 	bl	8002acc <PeriphCommonClock_Config>

  /* IPCC initialisation */
  MX_IPCC_Init();
 80029ec:	f000 f88e 	bl	8002b0c <MX_IPCC_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029f0:	f000 f95d 	bl	8002cae <MX_GPIO_Init>
  MX_DMA_Init();
 80029f4:	f000 f93e 	bl	8002c74 <MX_DMA_Init>
  MX_RTC_Init();
 80029f8:	f000 f908 	bl	8002c0c <MX_RTC_Init>
  MX_RNG_Init();
 80029fc:	f000 f8f0 	bl	8002be0 <MX_RNG_Init>
  MX_RF_Init();
 8002a00:	f000 f8e6 	bl	8002bd0 <MX_RF_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init code for STM32_WPAN */
  MX_APPE_Init();
 8002a04:	f7fe fcf8 	bl	80013f8 <MX_APPE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while(1)
	{
    /* USER CODE END WHILE */
    MX_APPE_Process();
 8002a08:	f7fe ff37 	bl	800187a <MX_APPE_Process>
 8002a0c:	e7fc      	b.n	8002a08 <main+0x30>
	...

08002a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b09a      	sub	sp, #104	; 0x68
 8002a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a16:	f107 0320 	add.w	r3, r7, #32
 8002a1a:	2248      	movs	r2, #72	; 0x48
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f00d f800 	bl	800fa24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a24:	1d3b      	adds	r3, r7, #4
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
 8002a2a:	605a      	str	r2, [r3, #4]
 8002a2c:	609a      	str	r2, [r3, #8]
 8002a2e:	60da      	str	r2, [r3, #12]
 8002a30:	611a      	str	r2, [r3, #16]
 8002a32:	615a      	str	r2, [r3, #20]
 8002a34:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002a36:	f004 fd67 	bl	8007508 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff ff84 	bl	8002948 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002a40:	4b21      	ldr	r3, [pc, #132]	; (8002ac8 <SystemClock_Config+0xb8>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <SystemClock_Config+0xb8>)
 8002a4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a4e:	6013      	str	r3, [r2, #0]
 8002a50:	4b1d      	ldr	r3, [pc, #116]	; (8002ac8 <SystemClock_Config+0xb8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8002a5c:	2347      	movs	r3, #71	; 0x47
 8002a5e:	623b      	str	r3, [r7, #32]
                              |RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002a66:	2301      	movs	r3, #1
 8002a68:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002a70:	2301      	movs	r3, #1
 8002a72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a74:	2340      	movs	r3, #64	; 0x40
 8002a76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a7c:	f107 0320 	add.w	r3, r7, #32
 8002a80:	4618      	mov	r0, r3
 8002a82:	f005 f8d5 	bl	8007c30 <HAL_RCC_OscConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8002a8c:	f000 f91c 	bl	8002cc8 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK4|RCC_CLOCKTYPE_HCLK2
 8002a90:	236f      	movs	r3, #111	; 0x6f
 8002a92:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8002a94:	2302      	movs	r3, #2
 8002a96:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK2Divider = RCC_SYSCLK_DIV1;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK4Divider = RCC_SYSCLK_DIV1;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	2101      	movs	r1, #1
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f005 fc31 	bl	8008318 <HAL_RCC_ClockConfig>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d001      	beq.n	8002ac0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002abc:	f000 f904 	bl	8002cc8 <Error_Handler>
  }
}
 8002ac0:	bf00      	nop
 8002ac2:	3768      	adds	r7, #104	; 0x68
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58000400 	.word	0x58000400

08002acc <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b094      	sub	sp, #80	; 0x50
 8002ad0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	2250      	movs	r2, #80	; 0x50
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f00c ffa3 	bl	800fa24 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SMPS|RCC_PERIPHCLK_RFWAKEUP;
 8002ade:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002ae2:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.RFWakeUpClockSelection = RCC_RFWKPCLKSOURCE_LSE;
 8002ae4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ae8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.SmpsClockSelection = RCC_SMPSCLKSOURCE_HSE;
 8002aea:	2302      	movs	r3, #2
 8002aec:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.SmpsDivSelection = RCC_SMPSCLKDIV_RANGE1;
 8002aee:	2310      	movs	r3, #16
 8002af0:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002af2:	463b      	mov	r3, r7
 8002af4:	4618      	mov	r0, r3
 8002af6:	f006 f84c 	bl	8008b92 <HAL_RCCEx_PeriphCLKConfig>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002b00:	f000 f8e2 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN Smps */

  /* USER CODE END Smps */
}
 8002b04:	bf00      	nop
 8002b06:	3750      	adds	r7, #80	; 0x50
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <MX_IPCC_Init>:
  * @brief IPCC Initialization Function
  * @param None
  * @retval None
  */
static void MX_IPCC_Init(void)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  /* USER CODE END IPCC_Init 0 */

  /* USER CODE BEGIN IPCC_Init 1 */

  /* USER CODE END IPCC_Init 1 */
  hipcc.Instance = IPCC;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_IPCC_Init+0x20>)
 8002b12:	4a07      	ldr	r2, [pc, #28]	; (8002b30 <MX_IPCC_Init+0x24>)
 8002b14:	601a      	str	r2, [r3, #0]
  if (HAL_IPCC_Init(&hipcc) != HAL_OK)
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <MX_IPCC_Init+0x20>)
 8002b18:	f004 fc70 	bl	80073fc <HAL_IPCC_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_IPCC_Init+0x1a>
  {
    Error_Handler();
 8002b22:	f000 f8d1 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN IPCC_Init 2 */

  /* USER CODE END IPCC_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	20000430 	.word	0x20000430
 8002b30:	58000c00 	.word	0x58000c00

08002b34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b38:	4b23      	ldr	r3, [pc, #140]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b3a:	4a24      	ldr	r2, [pc, #144]	; (8002bcc <MX_USART1_UART_Init+0x98>)
 8002b3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b3e:	4b22      	ldr	r3, [pc, #136]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b46:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b4c:	4b1e      	ldr	r3, [pc, #120]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b52:	4b1d      	ldr	r3, [pc, #116]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b58:	4b1b      	ldr	r3, [pc, #108]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8002b64:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002b6a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b7e:	4812      	ldr	r0, [pc, #72]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b80:	f006 fcd6 	bl	8009530 <HAL_UART_Init>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8002b8a:	f000 f89d 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b8e:	2100      	movs	r1, #0
 8002b90:	480d      	ldr	r0, [pc, #52]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002b92:	f008 fd28 	bl	800b5e6 <HAL_UARTEx_SetTxFifoThreshold>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8002b9c:	f000 f894 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	4809      	ldr	r0, [pc, #36]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002ba4:	f008 fd5d 	bl	800b662 <HAL_UARTEx_SetRxFifoThreshold>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8002bae:	f000 f88b 	bl	8002cc8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002bb2:	4805      	ldr	r0, [pc, #20]	; (8002bc8 <MX_USART1_UART_Init+0x94>)
 8002bb4:	f008 fcde 	bl	800b574 <HAL_UARTEx_DisableFifoMode>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d001      	beq.n	8002bc2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8002bbe:	f000 f883 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bc2:	bf00      	nop
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	20000500 	.word	0x20000500
 8002bcc:	40013800 	.word	0x40013800

08002bd0 <MX_RF_Init>:
  * @brief RF Initialization Function
  * @param None
  * @retval None
  */
static void MX_RF_Init(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE END RF_Init 1 */
  /* USER CODE BEGIN RF_Init 2 */

  /* USER CODE END RF_Init 2 */

}
 8002bd4:	bf00      	nop
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002be4:	4b07      	ldr	r3, [pc, #28]	; (8002c04 <MX_RNG_Init+0x24>)
 8002be6:	4a08      	ldr	r2, [pc, #32]	; (8002c08 <MX_RNG_Init+0x28>)
 8002be8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <MX_RNG_Init+0x24>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002bf0:	4804      	ldr	r0, [pc, #16]	; (8002c04 <MX_RNG_Init+0x24>)
 8002bf2:	f006 fa55 	bl	80090a0 <HAL_RNG_Init>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d001      	beq.n	8002c00 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8002bfc:	f000 f864 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002c00:	bf00      	nop
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000654 	.word	0x20000654
 8002c08:	58001000 	.word	0x58001000

08002c0c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c12:	4a17      	ldr	r2, [pc, #92]	; (8002c70 <MX_RTC_Init+0x64>)
 8002c14:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002c16:	4b15      	ldr	r3, [pc, #84]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = CFG_RTC_ASYNCH_PRESCALER;
 8002c1c:	4b13      	ldr	r3, [pc, #76]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c1e:	220f      	movs	r2, #15
 8002c20:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = CFG_RTC_SYNCH_PRESCALER;
 8002c22:	4b12      	ldr	r3, [pc, #72]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c24:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002c28:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002c2a:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002c30:	4b0e      	ldr	r3, [pc, #56]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002c3c:	4b0b      	ldr	r3, [pc, #44]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002c42:	480a      	ldr	r0, [pc, #40]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c44:	f006 fa62 	bl	800910c <HAL_RTC_Init>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d001      	beq.n	8002c52 <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8002c4e:	f000 f83b 	bl	8002cc8 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	4805      	ldr	r0, [pc, #20]	; (8002c6c <MX_RTC_Init+0x60>)
 8002c58:	f006 fb58 	bl	800930c <HAL_RTCEx_SetWakeUpTimer_IT>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8002c62:	f000 f831 	bl	8002cc8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000668 	.word	0x20000668
 8002c70:	40002800 	.word	0x40002800

08002c74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002c78:	2004      	movs	r0, #4
 8002c7a:	f7ff fe7b 	bl	8002974 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff fe78 	bl	8002974 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002c84:	2002      	movs	r0, #2
 8002c86:	f7ff fe75 	bl	8002974 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 15, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	210f      	movs	r1, #15
 8002c8e:	200e      	movs	r0, #14
 8002c90:	f002 ffcb 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8002c94:	200e      	movs	r0, #14
 8002c96:	f002 ffe2 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel4_IRQn, 15, 0);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	210f      	movs	r1, #15
 8002c9e:	203a      	movs	r0, #58	; 0x3a
 8002ca0:	f002 ffc3 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel4_IRQn);
 8002ca4:	203a      	movs	r0, #58	; 0x3a
 8002ca6:	f002 ffda 	bl	8005c5e <HAL_NVIC_EnableIRQ>

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}

08002cae <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb2:	2004      	movs	r0, #4
 8002cb4:	f7ff fe77 	bl	80029a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cb8:	2001      	movs	r0, #1
 8002cba:	f7ff fe74 	bl	80029a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbe:	2002      	movs	r0, #2
 8002cc0:	f7ff fe71 	bl	80029a6 <LL_AHB2_GRP1_EnableClock>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002cc4:	bf00      	nop
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ccc:	bf00      	nop
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <LL_RCC_EnableRTC>:
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8002cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ce6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002cee:	bf00      	nop
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <LL_AHB2_GRP1_EnableClock>:
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002d00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d06:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002d10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <LL_AHB3_GRP1_EnableClock>:
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b085      	sub	sp, #20
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 8002d32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d38:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 8002d42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d46:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	bf00      	nop
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_APB1_GRP1_EnableClock>:
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b085      	sub	sp, #20
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002d64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d6a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002d74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d78:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002d80:	68fb      	ldr	r3, [r7, #12]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr

08002d8e <LL_APB1_GRP2_EnableClock>:
{
 8002d8e:	b480      	push	{r7}
 8002d90:	b085      	sub	sp, #20
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8002d96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002d9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002d9c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	65cb      	str	r3, [r1, #92]	; 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8002da6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002daa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	4013      	ands	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002db2:	68fb      	ldr	r3, [r7, #12]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr

08002dc0 <LL_APB2_GRP1_EnableClock>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002dc8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002dcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002dd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ddc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4013      	ands	r3, r2
 8002de2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002de4:	68fb      	ldr	r3, [r7, #12]
}
 8002de6:	bf00      	nop
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_HSEM_CLK_ENABLE();
 8002df6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002dfa:	f7ff ff96 	bl	8002d2a <LL_AHB3_GRP1_EnableClock>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* HSEM_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(HSEM_IRQn, 0, 0);
 8002dfe:	2200      	movs	r2, #0
 8002e00:	2100      	movs	r1, #0
 8002e02:	202e      	movs	r0, #46	; 0x2e
 8002e04:	f002 ff11 	bl	8005c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(HSEM_IRQn);
 8002e08:	202e      	movs	r0, #46	; 0x2e
 8002e0a:	f002 ff28 	bl	8005c5e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e0e:	bf00      	nop
 8002e10:	bd80      	pop	{r7, pc}
	...

08002e14 <HAL_IPCC_MspInit>:
* This function configures the hardware resources used in this example
* @param hipcc: IPCC handle pointer
* @retval None
*/
void HAL_IPCC_MspInit(IPCC_HandleTypeDef* hipcc)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if(hipcc->Instance==IPCC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0d      	ldr	r2, [pc, #52]	; (8002e58 <HAL_IPCC_MspInit+0x44>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d113      	bne.n	8002e4e <HAL_IPCC_MspInit+0x3a>
  {
  /* USER CODE BEGIN IPCC_MspInit 0 */

  /* USER CODE END IPCC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_IPCC_CLK_ENABLE();
 8002e26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e2a:	f7ff ff7e 	bl	8002d2a <LL_AHB3_GRP1_EnableClock>
    /* IPCC interrupt Init */
    HAL_NVIC_SetPriority(IPCC_C1_RX_IRQn, 0, 0);
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	202c      	movs	r0, #44	; 0x2c
 8002e34:	f002 fef9 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 8002e38:	202c      	movs	r0, #44	; 0x2c
 8002e3a:	f002 ff10 	bl	8005c5e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(IPCC_C1_TX_IRQn, 0, 0);
 8002e3e:	2200      	movs	r2, #0
 8002e40:	2100      	movs	r1, #0
 8002e42:	202d      	movs	r0, #45	; 0x2d
 8002e44:	f002 fef1 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 8002e48:	202d      	movs	r0, #45	; 0x2d
 8002e4a:	f002 ff08 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN IPCC_MspInit 1 */

  /* USER CODE END IPCC_MspInit 1 */
  }

}
 8002e4e:	bf00      	nop
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	58000c00 	.word	0x58000c00

08002e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b0a0      	sub	sp, #128	; 0x80
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e68:	2200      	movs	r2, #0
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	605a      	str	r2, [r3, #4]
 8002e6e:	609a      	str	r2, [r3, #8]
 8002e70:	60da      	str	r2, [r3, #12]
 8002e72:	611a      	str	r2, [r3, #16]
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002e74:	f107 030c 	add.w	r3, r7, #12
 8002e78:	2250      	movs	r2, #80	; 0x50
 8002e7a:	2100      	movs	r1, #0
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00c fdd1 	bl	800fa24 <memset>
  if(huart->Instance==LPUART1)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a68      	ldr	r2, [pc, #416]	; (8003028 <HAL_UART_MspInit+0x1cc>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d16e      	bne.n	8002f6a <HAL_UART_MspInit+0x10e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002e90:	2300      	movs	r3, #0
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002e94:	f107 030c 	add.w	r3, r7, #12
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f005 fe7a 	bl	8008b92 <HAL_RCCEx_PeriphCLKConfig>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d001      	beq.n	8002ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002ea4:	f7ff ff10 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002ea8:	2001      	movs	r0, #1
 8002eaa:	f7ff ff70 	bl	8002d8e <LL_APB1_GRP2_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eae:	2001      	movs	r0, #1
 8002eb0:	f7ff ff22 	bl	8002cf8 <LL_AHB2_GRP1_EnableClock>
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002eb4:	230c      	movs	r3, #12
 8002eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb8:	2302      	movs	r3, #2
 8002eba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ec0:	2303      	movs	r3, #3
 8002ec2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002ec4:	2308      	movs	r3, #8
 8002ec6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ecc:	4619      	mov	r1, r3
 8002ece:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002ed2:	f003 fa9d 	bl	8006410 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8002ed6:	4b55      	ldr	r3, [pc, #340]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ed8:	4a55      	ldr	r2, [pc, #340]	; (8003030 <HAL_UART_MspInit+0x1d4>)
 8002eda:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002edc:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ede:	2211      	movs	r2, #17
 8002ee0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ee2:	4b52      	ldr	r3, [pc, #328]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ee4:	2210      	movs	r2, #16
 8002ee6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ee8:	4b50      	ldr	r3, [pc, #320]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002eee:	4b4f      	ldr	r3, [pc, #316]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ef0:	2280      	movs	r2, #128	; 0x80
 8002ef2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef4:	4b4d      	ldr	r3, [pc, #308]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efa:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002f00:	4b4a      	ldr	r3, [pc, #296]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f06:	4b49      	ldr	r3, [pc, #292]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f08:	2200      	movs	r2, #0
 8002f0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002f0c:	4847      	ldr	r0, [pc, #284]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f0e:	f002 feeb 	bl	8005ce8 <HAL_DMA_Init>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_UART_MspInit+0xc0>
    {
      Error_Handler();
 8002f18:	f7ff fed6 	bl	8002cc8 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX1_SYNC_DMAMUX1_CH1_EVT;
 8002f1c:	f04f 5388 	mov.w	r3, #285212672	; 0x11000000
 8002f20:	65fb      	str	r3, [r7, #92]	; 0x5c
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8002f22:	2300      	movs	r3, #0
 8002f24:	663b      	str	r3, [r7, #96]	; 0x60
    pSyncConfig.SyncEnable = DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
    pSyncConfig.EventEnable = DISABLE;
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
    pSyncConfig.RequestNumber = 1;
 8002f32:	2301      	movs	r3, #1
 8002f34:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_DMAEx_ConfigMuxSync(&hdma_lpuart1_tx, &pSyncConfig) != HAL_OK)
 8002f36:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	483b      	ldr	r0, [pc, #236]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f3e:	f003 fa05 	bl	800634c <HAL_DMAEx_ConfigMuxSync>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8002f48:	f7ff febe 	bl	8002cc8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a37      	ldr	r2, [pc, #220]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f50:	67da      	str	r2, [r3, #124]	; 0x7c
 8002f52:	4a36      	ldr	r2, [pc, #216]	; (800302c <HAL_UART_MspInit+0x1d0>)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002f58:	2200      	movs	r2, #0
 8002f5a:	2100      	movs	r1, #0
 8002f5c:	2025      	movs	r0, #37	; 0x25
 8002f5e:	f002 fe64 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f62:	2025      	movs	r0, #37	; 0x25
 8002f64:	f002 fe7b 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002f68:	e05a      	b.n	8003020 <HAL_UART_MspInit+0x1c4>
  else if(huart->Instance==USART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a31      	ldr	r2, [pc, #196]	; (8003034 <HAL_UART_MspInit+0x1d8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d155      	bne.n	8003020 <HAL_UART_MspInit+0x1c4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f74:	2301      	movs	r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f7c:	f107 030c 	add.w	r3, r7, #12
 8002f80:	4618      	mov	r0, r3
 8002f82:	f005 fe06 	bl	8008b92 <HAL_RCCEx_PeriphCLKConfig>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_UART_MspInit+0x134>
      Error_Handler();
 8002f8c:	f7ff fe9c 	bl	8002cc8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f90:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f94:	f7ff ff14 	bl	8002dc0 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f98:	2002      	movs	r0, #2
 8002f9a:	f7ff fead 	bl	8002cf8 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f9e:	23c0      	movs	r3, #192	; 0xc0
 8002fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	2303      	movs	r3, #3
 8002fac:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fae:	2307      	movs	r3, #7
 8002fb0:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fb2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <HAL_UART_MspInit+0x1dc>)
 8002fba:	f003 fa29 	bl	8006410 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA2_Channel4;
 8002fbe:	4b1f      	ldr	r3, [pc, #124]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fc0:	4a1f      	ldr	r2, [pc, #124]	; (8003040 <HAL_UART_MspInit+0x1e4>)
 8002fc2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002fc4:	4b1d      	ldr	r3, [pc, #116]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fc6:	220f      	movs	r2, #15
 8002fc8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002fca:	4b1c      	ldr	r3, [pc, #112]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fcc:	2210      	movs	r2, #16
 8002fce:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fd0:	4b1a      	ldr	r3, [pc, #104]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002fd6:	4b19      	ldr	r3, [pc, #100]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fd8:	2280      	movs	r2, #128	; 0x80
 8002fda:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fdc:	4b17      	ldr	r3, [pc, #92]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fe2:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002fe8:	4b14      	ldr	r3, [pc, #80]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002fee:	4b13      	ldr	r3, [pc, #76]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002ff4:	4811      	ldr	r0, [pc, #68]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8002ff6:	f002 fe77 	bl	8005ce8 <HAL_DMA_Init>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 8003000:	f7ff fe62 	bl	8002cc8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	4a0d      	ldr	r2, [pc, #52]	; (800303c <HAL_UART_MspInit+0x1e0>)
 8003008:	67da      	str	r2, [r3, #124]	; 0x7c
 800300a:	4a0c      	ldr	r2, [pc, #48]	; (800303c <HAL_UART_MspInit+0x1e0>)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003010:	2200      	movs	r2, #0
 8003012:	2100      	movs	r1, #0
 8003014:	2024      	movs	r0, #36	; 0x24
 8003016:	f002 fe08 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800301a:	2024      	movs	r0, #36	; 0x24
 800301c:	f002 fe1f 	bl	8005c5e <HAL_NVIC_EnableIRQ>
}
 8003020:	bf00      	nop
 8003022:	3780      	adds	r7, #128	; 0x80
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}
 8003028:	40008000 	.word	0x40008000
 800302c:	20000594 	.word	0x20000594
 8003030:	40020044 	.word	0x40020044
 8003034:	40013800 	.word	0x40013800
 8003038:	48000400 	.word	0x48000400
 800303c:	200005f4 	.word	0x200005f4
 8003040:	40020444 	.word	0x40020444

08003044 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b096      	sub	sp, #88	; 0x58
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800304c:	f107 0308 	add.w	r3, r7, #8
 8003050:	2250      	movs	r2, #80	; 0x50
 8003052:	2100      	movs	r1, #0
 8003054:	4618      	mov	r0, r3
 8003056:	f00c fce5 	bl	800fa24 <memset>
  if(hrng->Instance==RNG)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a0d      	ldr	r2, [pc, #52]	; (8003094 <HAL_RNG_MspInit+0x50>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d113      	bne.n	800308c <HAL_RNG_MspInit+0x48>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8003064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003068:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800306a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800306e:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003070:	f107 0308 	add.w	r3, r7, #8
 8003074:	4618      	mov	r0, r3
 8003076:	f005 fd8c 	bl	8008b92 <HAL_RCCEx_PeriphCLKConfig>
 800307a:	4603      	mov	r3, r0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8003080:	f7ff fe22 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003084:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003088:	f7ff fe4f 	bl	8002d2a <LL_AHB3_GRP1_EnableClock>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800308c:	bf00      	nop
 800308e:	3758      	adds	r7, #88	; 0x58
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	58001000 	.word	0x58001000

08003098 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b096      	sub	sp, #88	; 0x58
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030a0:	f107 0308 	add.w	r3, r7, #8
 80030a4:	2250      	movs	r2, #80	; 0x50
 80030a6:	2100      	movs	r1, #0
 80030a8:	4618      	mov	r0, r3
 80030aa:	f00c fcbb 	bl	800fa24 <memset>
  if(hrtc->Instance==RTC)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a14      	ldr	r2, [pc, #80]	; (8003104 <HAL_RTC_MspInit+0x6c>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d120      	bne.n	80030fa <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030be:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030c2:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	4618      	mov	r0, r3
 80030ca:	f005 fd62 	bl	8008b92 <HAL_RCCEx_PeriphCLKConfig>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80030d4:	f7ff fdf8 	bl	8002cc8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030d8:	f7ff fdfd 	bl	8002cd6 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80030dc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80030e0:	f7ff fe3c 	bl	8002d5c <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 0, 0);
 80030e4:	2200      	movs	r2, #0
 80030e6:	2100      	movs	r1, #0
 80030e8:	2003      	movs	r0, #3
 80030ea:	f002 fd9e 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80030ee:	2003      	movs	r0, #3
 80030f0:	f002 fdb5 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */
  HAL_RTCEx_EnableBypassShadow(hrtc);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f006 f9c5 	bl	8009484 <HAL_RTCEx_EnableBypassShadow>
  /* USER CODE END RTC_MspInit 1 */
  }

}
 80030fa:	bf00      	nop
 80030fc:	3758      	adds	r7, #88	; 0x58
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	40002800 	.word	0x40002800

08003108 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800310c:	bf00      	nop
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr

08003116 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003116:	b480      	push	{r7}
 8003118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800311a:	e7fe      	b.n	800311a <HardFault_Handler+0x4>

0800311c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003120:	e7fe      	b.n	8003120 <MemManage_Handler+0x4>

08003122 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003126:	e7fe      	b.n	8003126 <BusFault_Handler+0x4>

08003128 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800312c:	e7fe      	b.n	800312c <UsageFault_Handler+0x4>

0800312e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800312e:	b480      	push	{r7}
 8003130:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003132:	bf00      	nop
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr

0800313c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800315c:	f002 fbe6 	bl	800592c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003160:	bf00      	nop
 8003162:	bd80      	pop	{r7, pc}

08003164 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 19.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003168:	f7fe ffc6 	bl	80020f8 <HW_TS_RTC_Wakeup_Handler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 800316c:	bf00      	nop
 800316e:	bd80      	pop	{r7, pc}

08003170 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8003174:	4802      	ldr	r0, [pc, #8]	; (8003180 <DMA1_Channel4_IRQHandler+0x10>)
 8003176:	f002 ff98 	bl	80060aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800317a:	bf00      	nop
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	20000594 	.word	0x20000594

08003184 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003188:	4802      	ldr	r0, [pc, #8]	; (8003194 <USART1_IRQHandler+0x10>)
 800318a:	f006 faed 	bl	8009768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
 8003192:	bf00      	nop
 8003194:	20000500 	.word	0x20000500

08003198 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <LPUART1_IRQHandler+0x10>)
 800319e:	f006 fae3 	bl	8009768 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	2000046c 	.word	0x2000046c

080031ac <IPCC_C1_RX_IRQHandler>:

/**
  * @brief This function handles IPCC RX occupied interrupt.
  */
void IPCC_C1_RX_IRQHandler(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 0 */

  /* USER CODE END IPCC_C1_RX_IRQn 0 */
  HAL_IPCC_RX_IRQHandler(&hipcc);
 80031b0:	f001 fb94 	bl	80048dc <HW_IPCC_Rx_Handler>
  /* USER CODE BEGIN IPCC_C1_RX_IRQn 1 */

  /* USER CODE END IPCC_C1_RX_IRQn 1 */
}
 80031b4:	bf00      	nop
 80031b6:	bd80      	pop	{r7, pc}

080031b8 <IPCC_C1_TX_IRQHandler>:

/**
  * @brief This function handles IPCC TX free interrupt.
  */
void IPCC_C1_TX_IRQHandler(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 0 */

  /* USER CODE END IPCC_C1_TX_IRQn 0 */
  HAL_IPCC_TX_IRQHandler(&hipcc);
 80031bc:	f001 fbc4 	bl	8004948 <HW_IPCC_Tx_Handler>
  /* USER CODE BEGIN IPCC_C1_TX_IRQn 1 */

  /* USER CODE END IPCC_C1_TX_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <HSEM_IRQHandler>:

/**
  * @brief This function handles HSEM global interrupt.
  */
void HSEM_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HSEM_IRQn 0 */

  /* USER CODE END HSEM_IRQn 0 */
  HAL_HSEM_IRQHandler();
 80031c8:	f003 fac2 	bl	8006750 <HAL_HSEM_IRQHandler>
  /* USER CODE BEGIN HSEM_IRQn 1 */

  /* USER CODE END HSEM_IRQn 1 */
}
 80031cc:	bf00      	nop
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <DMA2_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA2 channel4 global interrupt.
  */
void DMA2_Channel4_IRQHandler(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel4_IRQn 0 */

  /* USER CODE END DMA2_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80031d4:	4802      	ldr	r0, [pc, #8]	; (80031e0 <DMA2_Channel4_IRQHandler+0x10>)
 80031d6:	f002 ff68 	bl	80060aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel4_IRQn 1 */

  /* USER CODE END DMA2_Channel4_IRQn 1 */
}
 80031da:	bf00      	nop
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	200005f4 	.word	0x200005f4

080031e4 <EXTI4_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW1_EXTI_IRQHandler(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW1_PIN);
 80031e8:	2010      	movs	r0, #16
 80031ea:	f003 fa99 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
}
 80031ee:	bf00      	nop
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <EXTI0_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW2_EXTI_IRQHandler(void)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW2_PIN);
 80031f6:	2001      	movs	r0, #1
 80031f8:	f003 fa92 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
}
 80031fc:	bf00      	nop
 80031fe:	bd80      	pop	{r7, pc}

08003200 <EXTI1_IRQHandler>:
 *         interrupt request.
 * @param  None
 * @retval None
 */
void PUSH_BUTTON_SW3_EXTI_IRQHandler(void)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(BUTTON_SW3_PIN);
 8003204:	2002      	movs	r0, #2
 8003206:	f003 fa8b 	bl	8006720 <HAL_GPIO_EXTI_IRQHandler>
}
 800320a:	bf00      	nop
 800320c:	bd80      	pop	{r7, pc}

0800320e <LL_AHB2_GRP1_EnableClock>:
{
 800320e:	b480      	push	{r7}
 8003210:	b085      	sub	sp, #20
 8003212:	af00      	add	r7, sp, #0
 8003214:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800321a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800321c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4313      	orrs	r3, r2
 8003224:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003226:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800322a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4013      	ands	r3, r2
 8003230:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003232:	68fb      	ldr	r3, [r7, #12]
}
 8003234:	bf00      	nop
 8003236:	3714      	adds	r7, #20
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <LL_APB1_GRP1_EnableClock>:
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800324c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800324e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4313      	orrs	r3, r2
 8003256:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003258:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4013      	ands	r3, r2
 8003262:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003264:	68fb      	ldr	r3, [r7, #12]
}
 8003266:	bf00      	nop
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <LL_SYSCFG_EnableFastModePlus>:
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  SET_BIT(SYSCFG->CFGR1, ConfigFastModePlus);
 800327c:	4b05      	ldr	r3, [pc, #20]	; (8003294 <LL_SYSCFG_EnableFastModePlus+0x20>)
 800327e:	685a      	ldr	r2, [r3, #4]
 8003280:	4904      	ldr	r1, [pc, #16]	; (8003294 <LL_SYSCFG_EnableFastModePlus+0x20>)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4313      	orrs	r3, r2
 8003286:	604b      	str	r3, [r1, #4]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	40010000 	.word	0x40010000

08003298 <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 800329e:	2300      	movs	r3, #0
 80032a0:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 80032a2:	4b19      	ldr	r3, [pc, #100]	; (8003308 <BSP_I2C1_Init+0x70>)
 80032a4:	4a19      	ldr	r2, [pc, #100]	; (800330c <BSP_I2C1_Init+0x74>)
 80032a6:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 80032a8:	4b19      	ldr	r3, [pc, #100]	; (8003310 <BSP_I2C1_Init+0x78>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	1c5a      	adds	r2, r3, #1
 80032ae:	4918      	ldr	r1, [pc, #96]	; (8003310 <BSP_I2C1_Init+0x78>)
 80032b0:	600a      	str	r2, [r1, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d122      	bne.n	80032fc <BSP_I2C1_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 80032b6:	4814      	ldr	r0, [pc, #80]	; (8003308 <BSP_I2C1_Init+0x70>)
 80032b8:	f003 fd36 	bl	8006d28 <HAL_I2C_GetState>
 80032bc:	4603      	mov	r3, r0
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d11c      	bne.n	80032fc <BSP_I2C1_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80032c2:	4811      	ldr	r0, [pc, #68]	; (8003308 <BSP_I2C1_Init+0x70>)
 80032c4:	f000 f8ce 	bl	8003464 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d116      	bne.n	80032fc <BSP_I2C1_Init+0x64>
      {
        /* Init the I2C */
        if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80032ce:	480e      	ldr	r0, [pc, #56]	; (8003308 <BSP_I2C1_Init+0x70>)
 80032d0:	f000 f884 	bl	80033dc <MX_I2C1_Init>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <BSP_I2C1_Init+0x4a>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80032da:	f06f 0307 	mvn.w	r3, #7
 80032de:	607b      	str	r3, [r7, #4]
 80032e0:	e00c      	b.n	80032fc <BSP_I2C1_Init+0x64>
        }
        else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80032e2:	2100      	movs	r1, #0
 80032e4:	4808      	ldr	r0, [pc, #32]	; (8003308 <BSP_I2C1_Init+0x70>)
 80032e6:	f003 fff1 	bl	80072cc <HAL_I2CEx_ConfigAnalogFilter>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <BSP_I2C1_Init+0x60>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 80032f0:	f06f 0307 	mvn.w	r3, #7
 80032f4:	607b      	str	r3, [r7, #4]
 80032f6:	e001      	b.n	80032fc <BSP_I2C1_Init+0x64>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80032fc:	687b      	ldr	r3, [r7, #4]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	2000068c 	.word	0x2000068c
 800330c:	40005400 	.word	0x40005400
 8003310:	200006e0 	.word	0x200006e0

08003314 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	; 0x28
 8003318:	af04      	add	r7, sp, #16
 800331a:	60ba      	str	r2, [r7, #8]
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	81fb      	strh	r3, [r7, #14]
 8003322:	460b      	mov	r3, r1
 8003324:	81bb      	strh	r3, [r7, #12]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800332e:	89ba      	ldrh	r2, [r7, #12]
 8003330:	89f9      	ldrh	r1, [r7, #14]
 8003332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003336:	9302      	str	r3, [sp, #8]
 8003338:	88fb      	ldrh	r3, [r7, #6]
 800333a:	9301      	str	r3, [sp, #4]
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	2301      	movs	r3, #1
 8003342:	480c      	ldr	r0, [pc, #48]	; (8003374 <BSP_I2C1_WriteReg+0x60>)
 8003344:	f003 fac2 	bl	80068cc <HAL_I2C_Mem_Write>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800334e:	4809      	ldr	r0, [pc, #36]	; (8003374 <BSP_I2C1_WriteReg+0x60>)
 8003350:	f003 fcf8 	bl	8006d44 <HAL_I2C_GetError>
 8003354:	4603      	mov	r3, r0
 8003356:	2b04      	cmp	r3, #4
 8003358:	d103      	bne.n	8003362 <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800335a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	e002      	b.n	8003368 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8003362:	f06f 0303 	mvn.w	r3, #3
 8003366:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8003368:	697b      	ldr	r3, [r7, #20]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3718      	adds	r7, #24
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	2000068c 	.word	0x2000068c

08003378 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b08a      	sub	sp, #40	; 0x28
 800337c:	af04      	add	r7, sp, #16
 800337e:	60ba      	str	r2, [r7, #8]
 8003380:	461a      	mov	r2, r3
 8003382:	4603      	mov	r3, r0
 8003384:	81fb      	strh	r3, [r7, #14]
 8003386:	460b      	mov	r3, r1
 8003388:	81bb      	strh	r3, [r7, #12]
 800338a:	4613      	mov	r3, r2
 800338c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 8003392:	89ba      	ldrh	r2, [r7, #12]
 8003394:	89f9      	ldrh	r1, [r7, #14]
 8003396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800339a:	9302      	str	r3, [sp, #8]
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	9301      	str	r3, [sp, #4]
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	2301      	movs	r3, #1
 80033a6:	480c      	ldr	r0, [pc, #48]	; (80033d8 <BSP_I2C1_ReadReg+0x60>)
 80033a8:	f003 fba4 	bl	8006af4 <HAL_I2C_Mem_Read>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00c      	beq.n	80033cc <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80033b2:	4809      	ldr	r0, [pc, #36]	; (80033d8 <BSP_I2C1_ReadReg+0x60>)
 80033b4:	f003 fcc6 	bl	8006d44 <HAL_I2C_GetError>
 80033b8:	4603      	mov	r3, r0
 80033ba:	2b04      	cmp	r3, #4
 80033bc:	d103      	bne.n	80033c6 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80033be:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	e002      	b.n	80033cc <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80033c6:	f06f 0303 	mvn.w	r3, #3
 80033ca:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80033cc:	697b      	ldr	r3, [r7, #20]
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3718      	adds	r7, #24
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	2000068c 	.word	0x2000068c

080033dc <MX_I2C1_Init>:
}

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	73fb      	strb	r3, [r7, #15]

  hi2c->Instance = I2C1;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a1c      	ldr	r2, [pc, #112]	; (800345c <MX_I2C1_Init+0x80>)
 80033ec:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00100413;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a1b      	ldr	r2, [pc, #108]	; (8003460 <MX_I2C1_Init+0x84>)
 80033f2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f003 f9ba 	bl	8006798 <HAL_I2C_Init>
 8003424:	4603      	mov	r3, r0
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <MX_I2C1_Init+0x52>
  {
    ret = HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800342e:	2100      	movs	r1, #0
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f003 ff4b 	bl	80072cc <HAL_I2CEx_ConfigAnalogFilter>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_I2C1_Init+0x64>
  {
    ret = HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8003440:	2100      	movs	r1, #0
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f003 ff8d 	bl	8007362 <HAL_I2CEx_ConfigDigitalFilter>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <MX_I2C1_Init+0x76>
  {
    ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40005400 	.word	0x40005400
 8003460:	00100413 	.word	0x00100413

08003464 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b09c      	sub	sp, #112	; 0x70
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800346c:	f107 030c 	add.w	r3, r7, #12
 8003470:	2250      	movs	r2, #80	; 0x50
 8003472:	2100      	movs	r1, #0
 8003474:	4618      	mov	r0, r3
 8003476:	f00c fad5 	bl	800fa24 <memset>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800347a:	2304      	movs	r3, #4
 800347c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800347e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8003484:	f107 030c 	add.w	r3, r7, #12
 8003488:	4618      	mov	r0, r3
 800348a:	f005 fb82 	bl	8008b92 <HAL_RCCEx_PeriphCLKConfig>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800348e:	2002      	movs	r0, #2
 8003490:	f7ff febd 	bl	800320e <LL_AHB2_GRP1_EnableClock>
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8003494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003498:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800349a:	2312      	movs	r3, #18
 800349c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349e:	2300      	movs	r3, #0
 80034a0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034a2:	2303      	movs	r3, #3
 80034a4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80034a6:	2304      	movs	r3, #4
 80034a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80034aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034ae:	4619      	mov	r1, r3
 80034b0:	4811      	ldr	r0, [pc, #68]	; (80034f8 <I2C1_MspInit+0x94>)
 80034b2:	f002 ffad 	bl	8006410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80034b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80034bc:	2312      	movs	r3, #18
 80034be:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c0:	2300      	movs	r3, #0
 80034c2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034c4:	2303      	movs	r3, #3
 80034c6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80034c8:	2304      	movs	r3, #4
 80034ca:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80034cc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80034d0:	4619      	mov	r1, r3
 80034d2:	4809      	ldr	r0, [pc, #36]	; (80034f8 <I2C1_MspInit+0x94>)
 80034d4:	f002 ff9c 	bl	8006410 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 80034d8:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80034dc:	f7ff feca 	bl	8003274 <LL_SYSCFG_EnableFastModePlus>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 80034e0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80034e4:	f7ff fec6 	bl	8003274 <LL_SYSCFG_EnableFastModePlus>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80034e8:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80034ec:	f7ff fea8 	bl	8003240 <LL_APB1_GRP1_EnableClock>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80034f0:	bf00      	nop
 80034f2:	3770      	adds	r7, #112	; 0x70
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	48000400 	.word	0x48000400

080034fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  return 1;
 8003500:	2301      	movs	r3, #1
}
 8003502:	4618      	mov	r0, r3
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <_kill>:

int _kill(int pid, int sig)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003516:	f00c fad7 	bl	800fac8 <__errno>
 800351a:	4603      	mov	r3, r0
 800351c:	2216      	movs	r2, #22
 800351e:	601a      	str	r2, [r3, #0]
  return -1;
 8003520:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003524:	4618      	mov	r0, r3
 8003526:	3708      	adds	r7, #8
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <_exit>:

void _exit (int status)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b082      	sub	sp, #8
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ffe7 	bl	800350c <_kill>
  while (1) {}    /* Make sure we hang here */
 800353e:	e7fe      	b.n	800353e <_exit+0x12>

08003540 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	e00a      	b.n	8003568 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003552:	f3af 8000 	nop.w
 8003556:	4601      	mov	r1, r0
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	1c5a      	adds	r2, r3, #1
 800355c:	60ba      	str	r2, [r7, #8]
 800355e:	b2ca      	uxtb	r2, r1
 8003560:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3301      	adds	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697a      	ldr	r2, [r7, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	dbf0      	blt.n	8003552 <_read+0x12>
  }

  return len;
 8003570:	687b      	ldr	r3, [r7, #4]
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <_close>:
  }
  return len;
}

int _close(int file)
{
 800357a:	b480      	push	{r7}
 800357c:	b083      	sub	sp, #12
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003586:	4618      	mov	r0, r3
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035a2:	605a      	str	r2, [r3, #4]
  return 0;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr

080035b2 <_isatty>:

int _isatty(int file)
{
 80035b2:	b480      	push	{r7}
 80035b4:	b083      	sub	sp, #12
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80035ba:	2301      	movs	r3, #1
}
 80035bc:	4618      	mov	r0, r3
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035ec:	4a14      	ldr	r2, [pc, #80]	; (8003640 <_sbrk+0x5c>)
 80035ee:	4b15      	ldr	r3, [pc, #84]	; (8003644 <_sbrk+0x60>)
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80035f8:	4b13      	ldr	r3, [pc, #76]	; (8003648 <_sbrk+0x64>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d102      	bne.n	8003606 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003600:	4b11      	ldr	r3, [pc, #68]	; (8003648 <_sbrk+0x64>)
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <_sbrk+0x68>)
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003606:	4b10      	ldr	r3, [pc, #64]	; (8003648 <_sbrk+0x64>)
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4413      	add	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	429a      	cmp	r2, r3
 8003612:	d207      	bcs.n	8003624 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003614:	f00c fa58 	bl	800fac8 <__errno>
 8003618:	4603      	mov	r3, r0
 800361a:	220c      	movs	r2, #12
 800361c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800361e:	f04f 33ff 	mov.w	r3, #4294967295
 8003622:	e009      	b.n	8003638 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003624:	4b08      	ldr	r3, [pc, #32]	; (8003648 <_sbrk+0x64>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800362a:	4b07      	ldr	r3, [pc, #28]	; (8003648 <_sbrk+0x64>)
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4413      	add	r3, r2
 8003632:	4a05      	ldr	r2, [pc, #20]	; (8003648 <_sbrk+0x64>)
 8003634:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003636:	68fb      	ldr	r3, [r7, #12]
}
 8003638:	4618      	mov	r0, r3
 800363a:	3718      	adds	r7, #24
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20030000 	.word	0x20030000
 8003644:	00001000 	.word	0x00001000
 8003648:	200006e4 	.word	0x200006e4
 800364c:	20001a50 	.word	0x20001a50

08003650 <LL_FLASH_GetUDN>:
  * @note   The 64-bit UID64 may be used by Firmware to derive BLE 48-bit Device Address EUI-48 or
  *         802.15.4 64-bit Device Address EUI-64.
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_REG(*((uint32_t *)UID64_BASE)));
 8003654:	4b03      	ldr	r3, [pc, #12]	; (8003664 <LL_FLASH_GetUDN+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	1fff7580 	.word	0x1fff7580

08003668 <LL_FLASH_GetDeviceID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the device ID is 0x26
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x26 for STM32WB55x)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 8003668:	b480      	push	{r7}
 800366a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 800366c:	4b03      	ldr	r3, [pc, #12]	; (800367c <LL_FLASH_GetDeviceID+0x14>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	b2db      	uxtb	r3, r3
}
 8003672:	4618      	mov	r0, r3
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr
 800367c:	1fff7584 	.word	0x1fff7584

08003680 <LL_FLASH_GetSTCompanyID>:
  *         802.15.4 64-bit Device Address EUI-64.
  *         For STM32WBxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  return (uint32_t)(((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8003684:	4b03      	ldr	r3, [pc, #12]	; (8003694 <LL_FLASH_GetSTCompanyID+0x14>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0a1b      	lsrs	r3, r3, #8
}
 800368a:	4618      	mov	r0, r3
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr
 8003694:	1fff7584 	.word	0x1fff7584

08003698 <APP_BLE_Init>:

/* USER CODE END EV */

/* Functions Definition ------------------------------------------------------*/
void APP_BLE_Init(void)
{
 8003698:	b5b0      	push	{r4, r5, r7, lr}
 800369a:	b090      	sub	sp, #64	; 0x40
 800369c:	af00      	add	r7, sp, #0
  SHCI_CmdStatus_t status;
#if (RADIO_ACTIVITY_EVENT != 0)
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800369e:	2392      	movs	r3, #146	; 0x92
 80036a0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#endif /* RADIO_ACTIVITY_EVENT != 0 */
  /* USER CODE BEGIN APP_BLE_Init_1 */

  /* USER CODE END APP_BLE_Init_1 */
  SHCI_C2_Ble_Init_Cmd_Packet_t ble_init_cmd_packet =
 80036a4:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <APP_BLE_Init+0x10c>)
 80036a6:	1d3c      	adds	r4, r7, #4
 80036a8:	461d      	mov	r5, r3
 80036aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80036b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80036b6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80036ba:	c403      	stmia	r4!, {r0, r1}
 80036bc:	8022      	strh	r2, [r4, #0]
  };

  /**
   * Initialize Ble Transport Layer
   */
  Ble_Tl_Init();
 80036be:	f000 fb0b 	bl	8003cd8 <Ble_Tl_Init>

  /**
   * Do not allow standby in the application
   */
  UTIL_LPM_SetOffMode(1 << CFG_LPM_APP_BLE, UTIL_LPM_DISABLE);
 80036c2:	2101      	movs	r1, #1
 80036c4:	2002      	movs	r0, #2
 80036c6:	f00b f8c9 	bl	800e85c <UTIL_LPM_SetOffMode>

  /**
   * Register the hci transport layer to handle BLE User Asynchronous Events
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_HCI_ASYNCH_EVT_ID, UTIL_SEQ_RFU, hci_user_evt_proc);
 80036ca:	4a37      	ldr	r2, [pc, #220]	; (80037a8 <APP_BLE_Init+0x110>)
 80036cc:	2100      	movs	r1, #0
 80036ce:	2004      	movs	r0, #4
 80036d0:	f00b f9f0 	bl	800eab4 <UTIL_SEQ_RegTask>

  /**
   * Starts the BLE Stack on CPU2
   */
  status = SHCI_C2_BLE_Init(&ble_init_cmd_packet);
 80036d4:	1d3b      	adds	r3, r7, #4
 80036d6:	4618      	mov	r0, r3
 80036d8:	f009 fe60 	bl	800d39c <SHCI_C2_BLE_Init>
 80036dc:	4603      	mov	r3, r0
 80036de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  if (status != SHCI_Success)
 80036e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d008      	beq.n	80036fc <APP_BLE_Init+0x64>
  {
    APP_DBG_MSG("  Fail   : SHCI_C2_BLE_Init command, result: 0x%02x\n\r", status);
 80036ea:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80036ee:	4619      	mov	r1, r3
 80036f0:	482e      	ldr	r0, [pc, #184]	; (80037ac <APP_BLE_Init+0x114>)
 80036f2:	f00c f849 	bl	800f788 <iprintf>
    /* if you are here, maybe CPU2 doesn't contain STM32WB_Copro_Wireless_Binaries, see Release_Notes.html */
    Error_Handler();
 80036f6:	f7ff fae7 	bl	8002cc8 <Error_Handler>
 80036fa:	e002      	b.n	8003702 <APP_BLE_Init+0x6a>
  }
  else
  {
    APP_DBG_MSG("  Success: SHCI_C2_BLE_Init command\n\r");
 80036fc:	482c      	ldr	r0, [pc, #176]	; (80037b0 <APP_BLE_Init+0x118>)
 80036fe:	f00c f843 	bl	800f788 <iprintf>
  }

  /**
   * Initialization of HCI & GATT & GAP layer
   */
  Ble_Hci_Gap_Gatt_Init();
 8003702:	f000 faff 	bl	8003d04 <Ble_Hci_Gap_Gatt_Init>

  /**
   * Initialization of the BLE Services
   */
  SVCCTL_Init();
 8003706:	f00a fda9 	bl	800e25c <SVCCTL_Init>

  /**
   * Initialization of the BLE App Context
   */
  BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 800370a:	4b2a      	ldr	r3, [pc, #168]	; (80037b4 <APP_BLE_Init+0x11c>)
 800370c:	2200      	movs	r2, #0
 800370e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
  BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0xFFFF;
 8003712:	4b28      	ldr	r3, [pc, #160]	; (80037b4 <APP_BLE_Init+0x11c>)
 8003714:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003718:	82da      	strh	r2, [r3, #22]

  /**
   * From here, all initialization are BLE application specific
   */
  UTIL_SEQ_RegTask(1<<CFG_TASK_ADV_CANCEL_ID, UTIL_SEQ_RFU, Adv_Cancel);
 800371a:	4a27      	ldr	r2, [pc, #156]	; (80037b8 <APP_BLE_Init+0x120>)
 800371c:	2100      	movs	r1, #0
 800371e:	2001      	movs	r0, #1
 8003720:	f00b f9c8 	bl	800eab4 <UTIL_SEQ_RegTask>
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  UTIL_SEQ_RegTask(1<<CFG_TASK_CONN_UPDATE_REG_ID, UTIL_SEQ_RFU, Connection_Interval_Update_Req);
 8003724:	4a25      	ldr	r2, [pc, #148]	; (80037bc <APP_BLE_Init+0x124>)
 8003726:	2100      	movs	r1, #0
 8003728:	2002      	movs	r0, #2
 800372a:	f00b f9c3 	bl	800eab4 <UTIL_SEQ_RegTask>
#if (BLE_CFG_OTA_REBOOT_CHAR != 0)
  a_ManufData[sizeof(a_ManufData)-8] = CFG_FEATURE_OTA_REBOOT;
#endif /* BLE_CFG_OTA_REBOOT_CHAR != 0 */

#if (RADIO_ACTIVITY_EVENT != 0)
  ret = aci_hal_set_radio_activity_mask(0x0006);
 800372e:	2006      	movs	r0, #6
 8003730:	f009 f857 	bl	800c7e2 <aci_hal_set_radio_activity_mask>
 8003734:	4603      	mov	r3, r0
 8003736:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (ret != BLE_STATUS_SUCCESS)
 800373a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800373e:	2b00      	cmp	r3, #0
 8003740:	d006      	beq.n	8003750 <APP_BLE_Init+0xb8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_radio_activity_mask command, result: 0x%x \n\r", ret);
 8003742:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003746:	4619      	mov	r1, r3
 8003748:	481d      	ldr	r0, [pc, #116]	; (80037c0 <APP_BLE_Init+0x128>)
 800374a:	f00c f81d 	bl	800f788 <iprintf>
 800374e:	e002      	b.n	8003756 <APP_BLE_Init+0xbe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_radio_activity_mask command\n\r");
 8003750:	481c      	ldr	r0, [pc, #112]	; (80037c4 <APP_BLE_Init+0x12c>)
 8003752:	f00c f819 	bl	800f788 <iprintf>
  }
#endif /* RADIO_ACTIVITY_EVENT != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
  index_con_int = 0;
 8003756:	4b1c      	ldr	r3, [pc, #112]	; (80037c8 <APP_BLE_Init+0x130>)
 8003758:	2200      	movs	r2, #0
 800375a:	701a      	strb	r2, [r3, #0]
  mutex = 1;
 800375c:	4b1b      	ldr	r3, [pc, #108]	; (80037cc <APP_BLE_Init+0x134>)
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

  /**
   * Initialize P2P Server Application
   */
  P2PS_APP_Init();
 8003762:	f000 ff25 	bl	80045b0 <P2PS_APP_Init>
  /* USER CODE END APP_BLE_Init_3 */

  /**
   * Create timer to handle the Advertising Stop
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.Advertising_mgr_timer_Id), hw_ts_SingleShot, Adv_Cancel_Req);
 8003766:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <APP_BLE_Init+0x138>)
 8003768:	2200      	movs	r2, #0
 800376a:	491a      	ldr	r1, [pc, #104]	; (80037d4 <APP_BLE_Init+0x13c>)
 800376c:	2000      	movs	r0, #0
 800376e:	f7fe fe65 	bl	800243c <HW_TS_Create>
  /**
   * Create timer to handle the Led Switch OFF
   */
  HW_TS_Create(CFG_TIM_PROC_ID_ISR, &(BleApplicationContext.SwitchOffGPIO_timer_Id), hw_ts_SingleShot, Switch_OFF_GPIO);
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <APP_BLE_Init+0x140>)
 8003774:	2200      	movs	r2, #0
 8003776:	4919      	ldr	r1, [pc, #100]	; (80037dc <APP_BLE_Init+0x144>)
 8003778:	2000      	movs	r0, #0
 800377a:	f7fe fe5f 	bl	800243c <HW_TS_Create>

  /**
   * Make device discoverable
   */
  BleApplicationContext.BleApplicationContext_legacy.advtServUUID[0] = NULL;
 800377e:	4b0d      	ldr	r3, [pc, #52]	; (80037b4 <APP_BLE_Init+0x11c>)
 8003780:	2200      	movs	r2, #0
 8003782:	765a      	strb	r2, [r3, #25]
  BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen = 0;
 8003784:	4b0b      	ldr	r3, [pc, #44]	; (80037b4 <APP_BLE_Init+0x11c>)
 8003786:	2200      	movs	r2, #0
 8003788:	761a      	strb	r2, [r3, #24]

  /* Initialize intervals for reconnexion without intervals update */
  AdvIntervalMin = CFG_FAST_CONN_ADV_INTERVAL_MIN;
 800378a:	4b15      	ldr	r3, [pc, #84]	; (80037e0 <APP_BLE_Init+0x148>)
 800378c:	2280      	movs	r2, #128	; 0x80
 800378e:	801a      	strh	r2, [r3, #0]
  AdvIntervalMax = CFG_FAST_CONN_ADV_INTERVAL_MAX;
 8003790:	4b14      	ldr	r3, [pc, #80]	; (80037e4 <APP_BLE_Init+0x14c>)
 8003792:	22a0      	movs	r2, #160	; 0xa0
 8003794:	801a      	strh	r2, [r3, #0]

  /**
   * Start to Advertise to be connected by P2P Client
   */
  Adv_Request(APP_BLE_FAST_ADV);
 8003796:	2001      	movs	r0, #1
 8003798:	f000 fc64 	bl	8004064 <Adv_Request>

  /* USER CODE BEGIN APP_BLE_Init_2 */

  /* USER CODE END APP_BLE_Init_2 */

  return;
 800379c:	bf00      	nop
}
 800379e:	3740      	adds	r7, #64	; 0x40
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}
 80037a4:	08011cac 	.word	0x08011cac
 80037a8:	0800cdad 	.word	0x0800cdad
 80037ac:	08011bd0 	.word	0x08011bd0
 80037b0:	08011c08 	.word	0x08011c08
 80037b4:	200006f0 	.word	0x200006f0
 80037b8:	08004245 	.word	0x08004245
 80037bc:	0800438d 	.word	0x0800438d
 80037c0:	08011c30 	.word	0x08011c30
 80037c4:	08011c74 	.word	0x08011c74
 80037c8:	2000077c 	.word	0x2000077c
 80037cc:	2000077d 	.word	0x2000077d
 80037d0:	080042a5 	.word	0x080042a5
 80037d4:	20000771 	.word	0x20000771
 80037d8:	080042b5 	.word	0x080042b5
 80037dc:	20000772 	.word	0x20000772
 80037e0:	20000774 	.word	0x20000774
 80037e4:	20000776 	.word	0x20000776

080037e8 <SVCCTL_App_Notification>:

SVCCTL_UserEvtFlowStatus_t SVCCTL_App_Notification(void *p_Pckt)
{
 80037e8:	b5b0      	push	{r4, r5, r7, lr}
 80037ea:	b090      	sub	sp, #64	; 0x40
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	6078      	str	r0, [r7, #4]
  hci_event_pckt    *p_event_pckt;
  evt_le_meta_event *p_meta_evt;
  evt_blecore_aci   *p_blecore_evt;
  uint8_t           Tx_phy, Rx_phy;
  tBleStatus        ret = BLE_STATUS_INVALID_PARAMS;
 80037f0:	2392      	movs	r3, #146	; 0x92
 80037f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE BEGIN SVCCTL_App_Notification */

  /* USER CODE END SVCCTL_App_Notification */

  p_event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) p_Pckt)->data;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	3301      	adds	r3, #1
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28

  switch (p_event_pckt->evt)
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	781b      	ldrb	r3, [r3, #0]
 8003800:	2bff      	cmp	r3, #255	; 0xff
 8003802:	f000 8120 	beq.w	8003a46 <SVCCTL_App_Notification+0x25e>
 8003806:	2bff      	cmp	r3, #255	; 0xff
 8003808:	f300 8222 	bgt.w	8003c50 <SVCCTL_App_Notification+0x468>
 800380c:	2b05      	cmp	r3, #5
 800380e:	d002      	beq.n	8003816 <SVCCTL_App_Notification+0x2e>
 8003810:	2b3e      	cmp	r3, #62	; 0x3e
 8003812:	d02e      	beq.n	8003872 <SVCCTL_App_Notification+0x8a>

    default:
      /* USER CODE BEGIN ECODE_DEFAULT*/

      /* USER CODE END ECODE_DEFAULT*/
      break;
 8003814:	e21c      	b.n	8003c50 <SVCCTL_App_Notification+0x468>
      p_disconnection_complete_event = (hci_disconnection_complete_event_rp0 *) p_event_pckt->data;
 8003816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003818:	3302      	adds	r3, #2
 800381a:	60fb      	str	r3, [r7, #12]
      if (p_disconnection_complete_event->Connection_Handle == BleApplicationContext.BleApplicationContext_legacy.connectionHandle)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003822:	b29a      	uxth	r2, r3
 8003824:	4bb3      	ldr	r3, [pc, #716]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003826:	8adb      	ldrh	r3, [r3, #22]
 8003828:	429a      	cmp	r2, r3
 800382a:	d114      	bne.n	8003856 <SVCCTL_App_Notification+0x6e>
        BleApplicationContext.BleApplicationContext_legacy.connectionHandle = 0;
 800382c:	4bb1      	ldr	r3, [pc, #708]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 800382e:	2200      	movs	r2, #0
 8003830:	82da      	strh	r2, [r3, #22]
        BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8003832:	4bb0      	ldr	r3, [pc, #704]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
        APP_DBG_MSG(">>== HCI_DISCONNECTION_COMPLETE_EVT_CODE\n");
 800383a:	48af      	ldr	r0, [pc, #700]	; (8003af8 <SVCCTL_App_Notification+0x310>)
 800383c:	f00c f812 	bl	800f864 <puts>
                    p_disconnection_complete_event->Connection_Handle,
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003846:	b29b      	uxth	r3, r3
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 8003848:	4619      	mov	r1, r3
                    p_disconnection_complete_event->Reason);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	78db      	ldrb	r3, [r3, #3]
        APP_DBG_MSG("     - Connection Handle:   0x%x\n     - Reason:    0x%x\n\r",
 800384e:	461a      	mov	r2, r3
 8003850:	48aa      	ldr	r0, [pc, #680]	; (8003afc <SVCCTL_App_Notification+0x314>)
 8003852:	f00b ff99 	bl	800f788 <iprintf>
      Adv_Request(APP_BLE_FAST_ADV);
 8003856:	2001      	movs	r0, #1
 8003858:	f000 fc04 	bl	8004064 <Adv_Request>
      HandleNotification.P2P_Evt_Opcode = PEER_DISCON_HANDLE_EVT;
 800385c:	4ba8      	ldr	r3, [pc, #672]	; (8003b00 <SVCCTL_App_Notification+0x318>)
 800385e:	2201      	movs	r2, #1
 8003860:	701a      	strb	r2, [r3, #0]
      HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003862:	4ba4      	ldr	r3, [pc, #656]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003864:	8ada      	ldrh	r2, [r3, #22]
 8003866:	4ba6      	ldr	r3, [pc, #664]	; (8003b00 <SVCCTL_App_Notification+0x318>)
 8003868:	805a      	strh	r2, [r3, #2]
      P2PS_APP_Notification(&HandleNotification);
 800386a:	48a5      	ldr	r0, [pc, #660]	; (8003b00 <SVCCTL_App_Notification+0x318>)
 800386c:	f000 fe8c 	bl	8004588 <P2PS_APP_Notification>
      break; /* HCI_DISCONNECTION_COMPLETE_EVT_CODE */
 8003870:	e1f1      	b.n	8003c56 <SVCCTL_App_Notification+0x46e>
      p_meta_evt = (evt_le_meta_event*) p_event_pckt->data;
 8003872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003874:	3302      	adds	r3, #2
 8003876:	61fb      	str	r3, [r7, #28]
      switch (p_meta_evt->subevent)
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b0c      	cmp	r3, #12
 800387e:	d033      	beq.n	80038e8 <SVCCTL_App_Notification+0x100>
 8003880:	2b0c      	cmp	r3, #12
 8003882:	f300 80de 	bgt.w	8003a42 <SVCCTL_App_Notification+0x25a>
 8003886:	2b01      	cmp	r3, #1
 8003888:	d06c      	beq.n	8003964 <SVCCTL_App_Notification+0x17c>
 800388a:	2b03      	cmp	r3, #3
 800388c:	f040 80d9 	bne.w	8003a42 <SVCCTL_App_Notification+0x25a>
          p_connection_update_complete_event = (hci_le_connection_update_complete_event_rp0 *) p_meta_evt->data;
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	3301      	adds	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_UPDATE_COMPLETE_SUBEVT_CODE\n");
 8003896:	489b      	ldr	r0, [pc, #620]	; (8003b04 <SVCCTL_App_Notification+0x31c>)
 8003898:	f00b ffe4 	bl	800f864 <puts>
                       p_connection_update_complete_event->Conn_Interval*1.25,
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80038a2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fe25 	bl	80004f4 <__aeabi_i2d>
 80038aa:	f04f 0200 	mov.w	r2, #0
 80038ae:	4b96      	ldr	r3, [pc, #600]	; (8003b08 <SVCCTL_App_Notification+0x320>)
 80038b0:	f7fc fe8a 	bl	80005c8 <__aeabi_dmul>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4610      	mov	r0, r2
 80038ba:	4619      	mov	r1, r3
                       p_connection_update_complete_event->Conn_Latency,
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 80038c2:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80038c4:	461c      	mov	r4, r3
                       p_connection_update_complete_event->Supervision_Timeout*10);
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f8b3 3007 	ldrh.w	r3, [r3, #7]
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80038d0:	4613      	mov	r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	4413      	add	r3, r2
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	9301      	str	r3, [sp, #4]
 80038da:	9400      	str	r4, [sp, #0]
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	488a      	ldr	r0, [pc, #552]	; (8003b0c <SVCCTL_App_Notification+0x324>)
 80038e2:	f00b ff51 	bl	800f788 <iprintf>
          break;
 80038e6:	e0ad      	b.n	8003a44 <SVCCTL_App_Notification+0x25c>
          p_evt_le_phy_update_complete = (hci_le_phy_update_complete_event_rp0*)p_meta_evt->data;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	3301      	adds	r3, #1
 80038ec:	61bb      	str	r3, [r7, #24]
          APP_DBG_MSG("==>> HCI_LE_PHY_UPDATE_COMPLETE_SUBEVT_CODE - ");
 80038ee:	4888      	ldr	r0, [pc, #544]	; (8003b10 <SVCCTL_App_Notification+0x328>)
 80038f0:	f00b ff4a 	bl	800f788 <iprintf>
          if (p_evt_le_phy_update_complete->Status == 0)
 80038f4:	69bb      	ldr	r3, [r7, #24]
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d103      	bne.n	8003904 <SVCCTL_App_Notification+0x11c>
            APP_DBG_MSG("status ok \n");
 80038fc:	4885      	ldr	r0, [pc, #532]	; (8003b14 <SVCCTL_App_Notification+0x32c>)
 80038fe:	f00b ffb1 	bl	800f864 <puts>
 8003902:	e002      	b.n	800390a <SVCCTL_App_Notification+0x122>
            APP_DBG_MSG("status nok \n");
 8003904:	4884      	ldr	r0, [pc, #528]	; (8003b18 <SVCCTL_App_Notification+0x330>)
 8003906:	f00b ffad 	bl	800f864 <puts>
          ret = hci_le_read_phy(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, &Tx_phy, &Rx_phy);
 800390a:	4b7a      	ldr	r3, [pc, #488]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 800390c:	8adb      	ldrh	r3, [r3, #22]
 800390e:	f107 020a 	add.w	r2, r7, #10
 8003912:	f107 010b 	add.w	r1, r7, #11
 8003916:	4618      	mov	r0, r3
 8003918:	f008 ffdb 	bl	800c8d2 <hci_le_read_phy>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003922:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <SVCCTL_App_Notification+0x14a>
            APP_DBG_MSG("==>> hci_le_read_phy : fail\n\r");
 800392a:	487c      	ldr	r0, [pc, #496]	; (8003b1c <SVCCTL_App_Notification+0x334>)
 800392c:	f00b ff2c 	bl	800f788 <iprintf>
          break;
 8003930:	e088      	b.n	8003a44 <SVCCTL_App_Notification+0x25c>
            APP_DBG_MSG("==>> hci_le_read_phy - Success \n");
 8003932:	487b      	ldr	r0, [pc, #492]	; (8003b20 <SVCCTL_App_Notification+0x338>)
 8003934:	f00b ff96 	bl	800f864 <puts>
            if ((Tx_phy == TX_2M) && (Rx_phy == RX_2M))
 8003938:	7afb      	ldrb	r3, [r7, #11]
 800393a:	2b02      	cmp	r3, #2
 800393c:	d10a      	bne.n	8003954 <SVCCTL_App_Notification+0x16c>
 800393e:	7abb      	ldrb	r3, [r7, #10]
 8003940:	2b02      	cmp	r3, #2
 8003942:	d107      	bne.n	8003954 <SVCCTL_App_Notification+0x16c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8003944:	7afb      	ldrb	r3, [r7, #11]
 8003946:	4619      	mov	r1, r3
 8003948:	7abb      	ldrb	r3, [r7, #10]
 800394a:	461a      	mov	r2, r3
 800394c:	4875      	ldr	r0, [pc, #468]	; (8003b24 <SVCCTL_App_Notification+0x33c>)
 800394e:	f00b ff1b 	bl	800f788 <iprintf>
          break;
 8003952:	e077      	b.n	8003a44 <SVCCTL_App_Notification+0x25c>
              APP_DBG_MSG("==>> PHY Param  TX= %d, RX= %d \n\r", Tx_phy, Rx_phy);
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	4619      	mov	r1, r3
 8003958:	7abb      	ldrb	r3, [r7, #10]
 800395a:	461a      	mov	r2, r3
 800395c:	4871      	ldr	r0, [pc, #452]	; (8003b24 <SVCCTL_App_Notification+0x33c>)
 800395e:	f00b ff13 	bl	800f788 <iprintf>
          break;
 8003962:	e06f      	b.n	8003a44 <SVCCTL_App_Notification+0x25c>
          p_connection_complete_event = (hci_le_connection_complete_event_rp0 *) p_meta_evt->data;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	3301      	adds	r3, #1
 8003968:	613b      	str	r3, [r7, #16]
          HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 800396a:	4b62      	ldr	r3, [pc, #392]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 800396c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8003970:	4618      	mov	r0, r3
 8003972:	f7fe fddd 	bl	8002530 <HW_TS_Stop>
          APP_DBG_MSG(">>== HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE - Connection handle: 0x%x\n", p_connection_complete_event->Connection_Handle);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800397c:	b29b      	uxth	r3, r3
 800397e:	4619      	mov	r1, r3
 8003980:	4869      	ldr	r0, [pc, #420]	; (8003b28 <SVCCTL_App_Notification+0x340>)
 8003982:	f00b ff01 	bl	800f788 <iprintf>
                      p_connection_complete_event->Peer_Address[5],
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	7a9b      	ldrb	r3, [r3, #10]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800398a:	4618      	mov	r0, r3
                      p_connection_complete_event->Peer_Address[4],
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	7a5b      	ldrb	r3, [r3, #9]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003990:	461c      	mov	r4, r3
                      p_connection_complete_event->Peer_Address[3],
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	7a1b      	ldrb	r3, [r3, #8]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 8003996:	461d      	mov	r5, r3
                      p_connection_complete_event->Peer_Address[2],
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	79db      	ldrb	r3, [r3, #7]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 800399c:	461a      	mov	r2, r3
                      p_connection_complete_event->Peer_Address[1],
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	799b      	ldrb	r3, [r3, #6]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80039a2:	4619      	mov	r1, r3
                      p_connection_complete_event->Peer_Address[0]);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	795b      	ldrb	r3, [r3, #5]
          APP_DBG_MSG("     - Connection established with Central: @:%02x:%02x:%02x:%02x:%02x:%02x\n",
 80039a8:	9302      	str	r3, [sp, #8]
 80039aa:	9101      	str	r1, [sp, #4]
 80039ac:	9200      	str	r2, [sp, #0]
 80039ae:	462b      	mov	r3, r5
 80039b0:	4622      	mov	r2, r4
 80039b2:	4601      	mov	r1, r0
 80039b4:	485d      	ldr	r0, [pc, #372]	; (8003b2c <SVCCTL_App_Notification+0x344>)
 80039b6:	f00b fee7 	bl	800f788 <iprintf>
                      p_connection_complete_event->Conn_Interval*1.25,
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 80039c0:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80039c2:	4618      	mov	r0, r3
 80039c4:	f7fc fd96 	bl	80004f4 <__aeabi_i2d>
 80039c8:	f04f 0200 	mov.w	r2, #0
 80039cc:	4b4e      	ldr	r3, [pc, #312]	; (8003b08 <SVCCTL_App_Notification+0x320>)
 80039ce:	f7fc fdfb 	bl	80005c8 <__aeabi_dmul>
 80039d2:	4602      	mov	r2, r0
 80039d4:	460b      	mov	r3, r1
 80039d6:	4610      	mov	r0, r2
 80039d8:	4619      	mov	r1, r3
                      p_connection_complete_event->Conn_Latency,
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 80039e0:	b29b      	uxth	r3, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80039e2:	461c      	mov	r4, r3
                      p_connection_complete_event->Supervision_Timeout*10
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	461a      	mov	r2, r3
          APP_DBG_MSG("     - Connection Interval:   %.2f ms\n     - Connection latency:    %d\n     - Supervision Timeout: %d ms\n\r",
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	9400      	str	r4, [sp, #0]
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4843      	ldr	r0, [pc, #268]	; (8003b0c <SVCCTL_App_Notification+0x324>)
 8003a00:	f00b fec2 	bl	800f788 <iprintf>
          if (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_CONNECTING)
 8003a04:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003a06:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003a0a:	2b04      	cmp	r3, #4
 8003a0c:	d104      	bne.n	8003a18 <SVCCTL_App_Notification+0x230>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_CLIENT;
 8003a0e:	4b39      	ldr	r3, [pc, #228]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003a10:	2206      	movs	r2, #6
 8003a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
 8003a16:	e003      	b.n	8003a20 <SVCCTL_App_Notification+0x238>
            BleApplicationContext.Device_Connection_Status = APP_BLE_CONNECTED_SERVER;
 8003a18:	4b36      	ldr	r3, [pc, #216]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003a1a:	2205      	movs	r2, #5
 8003a1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
          BleApplicationContext.BleApplicationContext_legacy.connectionHandle = p_connection_complete_event->Connection_Handle;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	4b32      	ldr	r3, [pc, #200]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003a2a:	82da      	strh	r2, [r3, #22]
          HandleNotification.P2P_Evt_Opcode = PEER_CONN_HANDLE_EVT;
 8003a2c:	4b34      	ldr	r3, [pc, #208]	; (8003b00 <SVCCTL_App_Notification+0x318>)
 8003a2e:	2200      	movs	r2, #0
 8003a30:	701a      	strb	r2, [r3, #0]
          HandleNotification.ConnectionHandle = BleApplicationContext.BleApplicationContext_legacy.connectionHandle;
 8003a32:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003a34:	8ada      	ldrh	r2, [r3, #22]
 8003a36:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <SVCCTL_App_Notification+0x318>)
 8003a38:	805a      	strh	r2, [r3, #2]
          P2PS_APP_Notification(&HandleNotification);
 8003a3a:	4831      	ldr	r0, [pc, #196]	; (8003b00 <SVCCTL_App_Notification+0x318>)
 8003a3c:	f000 fda4 	bl	8004588 <P2PS_APP_Notification>
          break; /* HCI_LE_CONNECTION_COMPLETE_SUBEVT_CODE */
 8003a40:	e000      	b.n	8003a44 <SVCCTL_App_Notification+0x25c>
          break;
 8003a42:	bf00      	nop
      break; /* HCI_LE_META_EVT_CODE */
 8003a44:	e107      	b.n	8003c56 <SVCCTL_App_Notification+0x46e>
      p_blecore_evt = (evt_blecore_aci*) p_event_pckt->data;
 8003a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a48:	3302      	adds	r3, #2
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
      switch (p_blecore_evt->ecode)
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a56:	f000 80e7 	beq.w	8003c28 <SVCCTL_App_Notification+0x440>
 8003a5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a5e:	f300 80f9 	bgt.w	8003c54 <SVCCTL_App_Notification+0x46c>
 8003a62:	2b04      	cmp	r3, #4
 8003a64:	f000 80e8 	beq.w	8003c38 <SVCCTL_App_Notification+0x450>
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	f2c0 80f3 	blt.w	8003c54 <SVCCTL_App_Notification+0x46c>
 8003a6e:	f240 420a 	movw	r2, #1034	; 0x40a
 8003a72:	4293      	cmp	r3, r2
 8003a74:	f300 80ee 	bgt.w	8003c54 <SVCCTL_App_Notification+0x46c>
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7c:	f2c0 80ea 	blt.w	8003c54 <SVCCTL_App_Notification+0x46c>
 8003a80:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8003a84:	2b0a      	cmp	r3, #10
 8003a86:	f200 80e5 	bhi.w	8003c54 <SVCCTL_App_Notification+0x46c>
 8003a8a:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <SVCCTL_App_Notification+0x2a8>)
 8003a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a90:	08003abd 	.word	0x08003abd
 8003a94:	08003bf3 	.word	0x08003bf3
 8003a98:	08003ac5 	.word	0x08003ac5
 8003a9c:	08003b49 	.word	0x08003b49
 8003aa0:	08003b51 	.word	0x08003b51
 8003aa4:	08003b59 	.word	0x08003b59
 8003aa8:	08003c55 	.word	0x08003c55
 8003aac:	08003c31 	.word	0x08003c31
 8003ab0:	08003b8d 	.word	0x08003b8d
 8003ab4:	08003b9d 	.word	0x08003b9d
 8003ab8:	08003b95 	.word	0x08003b95
          APP_DBG_MSG(">>== ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE \n");
 8003abc:	481c      	ldr	r0, [pc, #112]	; (8003b30 <SVCCTL_App_Notification+0x348>)
 8003abe:	f00b fed1 	bl	800f864 <puts>
          break; /* ACI_GAP_LIMITED_DISCOVERABLE_VSEVT_CODE */
 8003ac2:	e0c4      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PASS_KEY_REQ_VSEVT_CODE \n");
 8003ac4:	481b      	ldr	r0, [pc, #108]	; (8003b34 <SVCCTL_App_Notification+0x34c>)
 8003ac6:	f00b fecd 	bl	800f864 <puts>
          ret = aci_gap_pass_key_resp(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,123456);
 8003aca:	4b0a      	ldr	r3, [pc, #40]	; (8003af4 <SVCCTL_App_Notification+0x30c>)
 8003acc:	8adb      	ldrh	r3, [r3, #22]
 8003ace:	491a      	ldr	r1, [pc, #104]	; (8003b38 <SVCCTL_App_Notification+0x350>)
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f008 f889 	bl	800bbe8 <aci_gap_pass_key_resp>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003adc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d02d      	beq.n	8003b40 <SVCCTL_App_Notification+0x358>
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Fail, reason: 0x%x\n", ret);
 8003ae4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ae8:	4619      	mov	r1, r3
 8003aea:	4814      	ldr	r0, [pc, #80]	; (8003b3c <SVCCTL_App_Notification+0x354>)
 8003aec:	f00b fe4c 	bl	800f788 <iprintf>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003af0:	e0ad      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
 8003af2:	bf00      	nop
 8003af4:	200006f0 	.word	0x200006f0
 8003af8:	08011ce8 	.word	0x08011ce8
 8003afc:	08011d14 	.word	0x08011d14
 8003b00:	20000778 	.word	0x20000778
 8003b04:	08011d50 	.word	0x08011d50
 8003b08:	3ff40000 	.word	0x3ff40000
 8003b0c:	08011d84 	.word	0x08011d84
 8003b10:	08011df0 	.word	0x08011df0
 8003b14:	08011e20 	.word	0x08011e20
 8003b18:	08011e2c 	.word	0x08011e2c
 8003b1c:	08011e38 	.word	0x08011e38
 8003b20:	08011e58 	.word	0x08011e58
 8003b24:	08011e78 	.word	0x08011e78
 8003b28:	08011e9c 	.word	0x08011e9c
 8003b2c:	08011ee4 	.word	0x08011ee4
 8003b30:	08011f34 	.word	0x08011f34
 8003b34:	08011f64 	.word	0x08011f64
 8003b38:	0001e240 	.word	0x0001e240
 8003b3c:	08011f8c 	.word	0x08011f8c
            APP_DBG_MSG("==>> aci_gap_pass_key_resp : Success \n");
 8003b40:	4847      	ldr	r0, [pc, #284]	; (8003c60 <SVCCTL_App_Notification+0x478>)
 8003b42:	f00b fe8f 	bl	800f864 <puts>
          break; /* ACI_GAP_PASS_KEY_REQ_VSEVT_CODE */
 8003b46:	e082      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE\n");
 8003b48:	4846      	ldr	r0, [pc, #280]	; (8003c64 <SVCCTL_App_Notification+0x47c>)
 8003b4a:	f00b fe8b 	bl	800f864 <puts>
          break; /* ACI_GAP_AUTHORIZATION_REQ_VSEVT_CODE */
 8003b4e:	e07e      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE \n");
 8003b50:	4845      	ldr	r0, [pc, #276]	; (8003c68 <SVCCTL_App_Notification+0x480>)
 8003b52:	f00b fe87 	bl	800f864 <puts>
          break; /* ACI_GAP_PERIPHERAL_SECURITY_INITIATED_VSEVT_CODE */
 8003b56:	e07a      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG("==>> ACI_GAP_BOND_LOST_VSEVT_CODE \n");
 8003b58:	4844      	ldr	r0, [pc, #272]	; (8003c6c <SVCCTL_App_Notification+0x484>)
 8003b5a:	f00b fe83 	bl	800f864 <puts>
          ret = aci_gap_allow_rebond(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 8003b5e:	4b44      	ldr	r3, [pc, #272]	; (8003c70 <SVCCTL_App_Notification+0x488>)
 8003b60:	8adb      	ldrh	r3, [r3, #22]
 8003b62:	4618      	mov	r0, r3
 8003b64:	f008 f9ea 	bl	800bf3c <aci_gap_allow_rebond>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003b6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d006      	beq.n	8003b84 <SVCCTL_App_Notification+0x39c>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Fail, reason: 0x%x\n", ret);
 8003b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	483d      	ldr	r0, [pc, #244]	; (8003c74 <SVCCTL_App_Notification+0x48c>)
 8003b7e:	f00b fe03 	bl	800f788 <iprintf>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003b82:	e064      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_allow_rebond : Success \n");
 8003b84:	483c      	ldr	r0, [pc, #240]	; (8003c78 <SVCCTL_App_Notification+0x490>)
 8003b86:	f00b fe6d 	bl	800f864 <puts>
          break; /* ACI_GAP_BOND_LOST_VSEVT_CODE */
 8003b8a:	e060      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE \n");
 8003b8c:	483b      	ldr	r0, [pc, #236]	; (8003c7c <SVCCTL_App_Notification+0x494>)
 8003b8e:	f00b fe69 	bl	800f864 <puts>
          break; /* ACI_GAP_ADDR_NOT_RESOLVED_VSEVT_CODE */
 8003b92:	e05c      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE\n");
 8003b94:	483a      	ldr	r0, [pc, #232]	; (8003c80 <SVCCTL_App_Notification+0x498>)
 8003b96:	f00b fe65 	bl	800f864 <puts>
          break; /* ACI_GAP_KEYPRESS_NOTIFICATION_VSEVT_CODE */    
 8003b9a:	e058      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_NUMERIC_COMPARISON_VALUE_VSEVT_CODE\n");
 8003b9c:	4839      	ldr	r0, [pc, #228]	; (8003c84 <SVCCTL_App_Notification+0x49c>)
 8003b9e:	f00b fe61 	bl	800f864 <puts>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	3302      	adds	r3, #2
          APP_DBG_MSG("     - numeric_value = %ld\n",
 8003ba6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003baa:	4619      	mov	r1, r3
 8003bac:	4836      	ldr	r0, [pc, #216]	; (8003c88 <SVCCTL_App_Notification+0x4a0>)
 8003bae:	f00b fdeb 	bl	800f788 <iprintf>
                      ((aci_gap_numeric_comparison_value_event_rp0 *)(p_blecore_evt->data))->Numeric_Value);
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	3302      	adds	r3, #2
          APP_DBG_MSG("     - Hex_value = %lx\n",
 8003bb6:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	4833      	ldr	r0, [pc, #204]	; (8003c8c <SVCCTL_App_Notification+0x4a4>)
 8003bbe:	f00b fde3 	bl	800f788 <iprintf>
          ret = aci_gap_numeric_comparison_value_confirm_yesno(BleApplicationContext.BleApplicationContext_legacy.connectionHandle, YES); /* CONFIRM_YES = 1 */
 8003bc2:	4b2b      	ldr	r3, [pc, #172]	; (8003c70 <SVCCTL_App_Notification+0x488>)
 8003bc4:	8adb      	ldrh	r3, [r3, #22]
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f008 fa0b 	bl	800bfe4 <aci_gap_numeric_comparison_value_confirm_yesno>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
          if (ret != BLE_STATUS_SUCCESS)
 8003bd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d006      	beq.n	8003bea <SVCCTL_App_Notification+0x402>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Fail, reason: 0x%x\n", ret);
 8003bdc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003be0:	4619      	mov	r1, r3
 8003be2:	482b      	ldr	r0, [pc, #172]	; (8003c90 <SVCCTL_App_Notification+0x4a8>)
 8003be4:	f00b fdd0 	bl	800f788 <iprintf>
          break;
 8003be8:	e031      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
            APP_DBG_MSG("==>> aci_gap_numeric_comparison_value_confirm_yesno-->YES : Success \n");
 8003bea:	482a      	ldr	r0, [pc, #168]	; (8003c94 <SVCCTL_App_Notification+0x4ac>)
 8003bec:	f00b fe3a 	bl	800f864 <puts>
          break;
 8003bf0:	e02d      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          pairing_complete = (aci_gap_pairing_complete_event_rp0*)p_blecore_evt->data;
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf4:	3302      	adds	r3, #2
 8003bf6:	623b      	str	r3, [r7, #32]
          APP_DBG_MSG(">>== ACI_GAP_PAIRING_COMPLETE_VSEVT_CODE\n");
 8003bf8:	4827      	ldr	r0, [pc, #156]	; (8003c98 <SVCCTL_App_Notification+0x4b0>)
 8003bfa:	f00b fe33 	bl	800f864 <puts>
          if (pairing_complete->Status == 0)
 8003bfe:	6a3b      	ldr	r3, [r7, #32]
 8003c00:	789b      	ldrb	r3, [r3, #2]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d103      	bne.n	8003c0e <SVCCTL_App_Notification+0x426>
            APP_DBG_MSG("     - Pairing Success\n");
 8003c06:	4825      	ldr	r0, [pc, #148]	; (8003c9c <SVCCTL_App_Notification+0x4b4>)
 8003c08:	f00b fe2c 	bl	800f864 <puts>
 8003c0c:	e008      	b.n	8003c20 <SVCCTL_App_Notification+0x438>
            APP_DBG_MSG("     - Pairing KO \n     - Status: 0x%x\n     - Reason: 0x%x\n",pairing_complete->Status, pairing_complete->Reason);
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	789b      	ldrb	r3, [r3, #2]
 8003c12:	4619      	mov	r1, r3
 8003c14:	6a3b      	ldr	r3, [r7, #32]
 8003c16:	78db      	ldrb	r3, [r3, #3]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	4821      	ldr	r0, [pc, #132]	; (8003ca0 <SVCCTL_App_Notification+0x4b8>)
 8003c1c:	f00b fdb4 	bl	800f788 <iprintf>
          APP_DBG_MSG("\n");
 8003c20:	200a      	movs	r0, #10
 8003c22:	f00b fdc3 	bl	800f7ac <putchar>
          break;    
 8003c26:	e012      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          mutex = 1;
 8003c28:	4b1e      	ldr	r3, [pc, #120]	; (8003ca4 <SVCCTL_App_Notification+0x4bc>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
          break;
 8003c2e:	e00e      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          APP_DBG_MSG(">>== ACI_GAP_PROC_COMPLETE_VSEVT_CODE \r");
 8003c30:	481d      	ldr	r0, [pc, #116]	; (8003ca8 <SVCCTL_App_Notification+0x4c0>)
 8003c32:	f00b fda9 	bl	800f788 <iprintf>
          break; /* ACI_GAP_PROC_COMPLETE_VSEVT_CODE */
 8003c36:	e00a      	b.n	8003c4e <SVCCTL_App_Notification+0x466>
          BSP_LED_On(LED_GREEN);
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f001 f817 	bl	8004c6c <BSP_LED_On>
          HW_TS_Start(BleApplicationContext.SwitchOffGPIO_timer_Id, (uint32_t)LED_ON_TIMEOUT);
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <SVCCTL_App_Notification+0x488>)
 8003c40:	f893 3082 	ldrb.w	r3, [r3, #130]	; 0x82
 8003c44:	210a      	movs	r1, #10
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fe fcf6 	bl	8002638 <HW_TS_Start>
          break; /* ACI_HAL_END_OF_RADIO_ACTIVITY_VSEVT_CODE */
 8003c4c:	bf00      	nop
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003c4e:	e001      	b.n	8003c54 <SVCCTL_App_Notification+0x46c>
      break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <SVCCTL_App_Notification+0x46e>
      break; /* HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE */
 8003c54:	bf00      	nop
  }

  return (SVCCTL_UserEvtFlowEnable);
 8003c56:	2301      	movs	r3, #1
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3730      	adds	r7, #48	; 0x30
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8003c60:	08011fc0 	.word	0x08011fc0
 8003c64:	08011fe8 	.word	0x08011fe8
 8003c68:	08012014 	.word	0x08012014
 8003c6c:	0801204c 	.word	0x0801204c
 8003c70:	200006f0 	.word	0x200006f0
 8003c74:	08012070 	.word	0x08012070
 8003c78:	080120a0 	.word	0x080120a0
 8003c7c:	080120c8 	.word	0x080120c8
 8003c80:	080120f4 	.word	0x080120f4
 8003c84:	08012124 	.word	0x08012124
 8003c88:	08012158 	.word	0x08012158
 8003c8c:	08012174 	.word	0x08012174
 8003c90:	0801218c 	.word	0x0801218c
 8003c94:	080121dc 	.word	0x080121dc
 8003c98:	08012224 	.word	0x08012224
 8003c9c:	08012250 	.word	0x08012250
 8003ca0:	08012268 	.word	0x08012268
 8003ca4:	2000077d 	.word	0x2000077d
 8003ca8:	080122a4 	.word	0x080122a4

08003cac <APP_BLE_Key_Button1_Action>:
  return BleApplicationContext.Device_Connection_Status;
}

/* USER CODE BEGIN FD*/
void APP_BLE_Key_Button1_Action(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  P2PS_APP_SW1_Button_Action();
 8003cb0:	f000 fcac 	bl	800460c <P2PS_APP_SW1_Button_Action>
}
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <APP_BLE_Key_Button2_Action>:

void APP_BLE_Key_Button2_Action(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	af00      	add	r7, sp, #0
#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0 )    
  UTIL_SEQ_SetTask( 1<<CFG_TASK_CONN_UPDATE_REG_ID, CFG_SCH_PRIO_0);
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	2002      	movs	r0, #2
 8003cc0:	f00a ff1a 	bl	800eaf8 <UTIL_SEQ_SetTask>
#endif
  
  return;
 8003cc4:	bf00      	nop
}
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <APP_BLE_Key_Button3_Action>:

void APP_BLE_Key_Button3_Action(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <Ble_Tl_Init>:
 *
 * LOCAL FUNCTIONS
 *
 *************************************************************/
static void Ble_Tl_Init(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
  HCI_TL_HciInitConf_t Hci_Tl_Init_Conf;

  Hci_Tl_Init_Conf.p_cmdbuffer = (uint8_t*)&BleCmdBuffer;
 8003cde:	4b06      	ldr	r3, [pc, #24]	; (8003cf8 <Ble_Tl_Init+0x20>)
 8003ce0:	603b      	str	r3, [r7, #0]
  Hci_Tl_Init_Conf.StatusNotCallBack = BLE_StatusNot;
 8003ce2:	4b06      	ldr	r3, [pc, #24]	; (8003cfc <Ble_Tl_Init+0x24>)
 8003ce4:	607b      	str	r3, [r7, #4]
  hci_init(BLE_UserEvtRx, (void*) &Hci_Tl_Init_Conf);
 8003ce6:	463b      	mov	r3, r7
 8003ce8:	4619      	mov	r1, r3
 8003cea:	4805      	ldr	r0, [pc, #20]	; (8003d00 <Ble_Tl_Init+0x28>)
 8003cec:	f009 f842 	bl	800cd74 <hci_init>

  return;
 8003cf0:	bf00      	nop
}
 8003cf2:	3708      	adds	r7, #8
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	20030028 	.word	0x20030028
 8003cfc:	08004435 	.word	0x08004435
 8003d00:	080043fd 	.word	0x080043fd

08003d04 <Ble_Hci_Gap_Gatt_Init>:

static void Ble_Hci_Gap_Gatt_Init(void)
{
 8003d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d06:	b08d      	sub	sp, #52	; 0x34
 8003d08:	af06      	add	r7, sp, #24
  uint8_t role;
  uint16_t gap_service_handle, gap_dev_name_char_handle, gap_appearance_char_handle;
  const uint8_t *p_bd_addr;
  uint16_t a_appearance[1] = {BLE_CFG_GAP_APPEARANCE};
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	803b      	strh	r3, [r7, #0]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 8003d0e:	2392      	movs	r3, #146	; 0x92
 8003d10:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init*/

  APP_DBG_MSG("==>> Start Ble_Hci_Gap_Gatt_Init function\n");
 8003d12:	48a5      	ldr	r0, [pc, #660]	; (8003fa8 <Ble_Hci_Gap_Gatt_Init+0x2a4>)
 8003d14:	f00b fda6 	bl	800f864 <puts>

  /**
   * Initialize HCI layer
   */
  /*HCI Reset to synchronise BLE Stack*/
  ret = hci_reset();
 8003d18:	f008 fdb7 	bl	800c88a <hci_reset>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <Ble_Hci_Gap_Gatt_Init+0x2e>
  {
    APP_DBG_MSG("  Fail   : hci_reset command, result: 0x%x \n", ret);
 8003d26:	7dfb      	ldrb	r3, [r7, #23]
 8003d28:	4619      	mov	r1, r3
 8003d2a:	48a0      	ldr	r0, [pc, #640]	; (8003fac <Ble_Hci_Gap_Gatt_Init+0x2a8>)
 8003d2c:	f00b fd2c 	bl	800f788 <iprintf>
 8003d30:	e002      	b.n	8003d38 <Ble_Hci_Gap_Gatt_Init+0x34>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_reset command\n");
 8003d32:	489f      	ldr	r0, [pc, #636]	; (8003fb0 <Ble_Hci_Gap_Gatt_Init+0x2ac>)
 8003d34:	f00b fd96 	bl	800f864 <puts>
  }

  /**
   * Write the BD Address
   */
  p_bd_addr = BleGetBdAddress();
 8003d38:	f000 fa40 	bl	80041bc <BleGetBdAddress>
 8003d3c:	6138      	str	r0, [r7, #16]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET, CONFIG_DATA_PUBADDR_LEN, (uint8_t*) p_bd_addr);
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	2106      	movs	r1, #6
 8003d42:	2000      	movs	r0, #0
 8003d44:	f008 fc61 	bl	800c60a <aci_hal_write_config_data>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003d4c:	7dfb      	ldrb	r3, [r7, #23]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d005      	beq.n	8003d5e <Ble_Hci_Gap_Gatt_Init+0x5a>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET, result: 0x%x \n", ret);
 8003d52:	7dfb      	ldrb	r3, [r7, #23]
 8003d54:	4619      	mov	r1, r3
 8003d56:	4897      	ldr	r0, [pc, #604]	; (8003fb4 <Ble_Hci_Gap_Gatt_Init+0x2b0>)
 8003d58:	f00b fd16 	bl	800f788 <iprintf>
 8003d5c:	e021      	b.n	8003da2 <Ble_Hci_Gap_Gatt_Init+0x9e>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_PUBADDR_OFFSET\n");
 8003d5e:	4896      	ldr	r0, [pc, #600]	; (8003fb8 <Ble_Hci_Gap_Gatt_Init+0x2b4>)
 8003d60:	f00b fd80 	bl	800f864 <puts>
    APP_DBG_MSG("  Public Bluetooth Address: %02x:%02x:%02x:%02x:%02x:%02x\n",p_bd_addr[5],p_bd_addr[4],p_bd_addr[3],p_bd_addr[2],p_bd_addr[1],p_bd_addr[0]);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	3305      	adds	r3, #5
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	3304      	adds	r3, #4
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	461c      	mov	r4, r3
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	3303      	adds	r3, #3
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	461d      	mov	r5, r3
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	3302      	adds	r3, #2
 8003d80:	781b      	ldrb	r3, [r3, #0]
 8003d82:	461a      	mov	r2, r3
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	3301      	adds	r3, #1
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	9302      	str	r3, [sp, #8]
 8003d92:	9101      	str	r1, [sp, #4]
 8003d94:	9200      	str	r2, [sp, #0]
 8003d96:	462b      	mov	r3, r5
 8003d98:	4622      	mov	r2, r4
 8003d9a:	4601      	mov	r1, r0
 8003d9c:	4887      	ldr	r0, [pc, #540]	; (8003fbc <Ble_Hci_Gap_Gatt_Init+0x2b8>)
 8003d9e:	f00b fcf3 	bl	800f788 <iprintf>
  }

#if (CFG_BLE_ADDRESS_TYPE == GAP_PUBLIC_ADDR)
  /* BLE MAC in ADV Packet */
  a_ManufData[ sizeof(a_ManufData)-6] = p_bd_addr[5];
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	3305      	adds	r3, #5
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	4b85      	ldr	r3, [pc, #532]	; (8003fc0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003daa:	721a      	strb	r2, [r3, #8]
  a_ManufData[ sizeof(a_ManufData)-5] = p_bd_addr[4];
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	3304      	adds	r3, #4
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	4b83      	ldr	r3, [pc, #524]	; (8003fc0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003db4:	725a      	strb	r2, [r3, #9]
  a_ManufData[ sizeof(a_ManufData)-4] = p_bd_addr[3];
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	3303      	adds	r3, #3
 8003dba:	781a      	ldrb	r2, [r3, #0]
 8003dbc:	4b80      	ldr	r3, [pc, #512]	; (8003fc0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003dbe:	729a      	strb	r2, [r3, #10]
  a_ManufData[ sizeof(a_ManufData)-3] = p_bd_addr[2];
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	781a      	ldrb	r2, [r3, #0]
 8003dc6:	4b7e      	ldr	r3, [pc, #504]	; (8003fc0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003dc8:	72da      	strb	r2, [r3, #11]
  a_ManufData[ sizeof(a_ManufData)-2] = p_bd_addr[1];
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	3301      	adds	r3, #1
 8003dce:	781a      	ldrb	r2, [r3, #0]
 8003dd0:	4b7b      	ldr	r3, [pc, #492]	; (8003fc0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003dd2:	731a      	strb	r2, [r3, #12]
  a_ManufData[ sizeof(a_ManufData)-1] = p_bd_addr[0];
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	781a      	ldrb	r2, [r3, #0]
 8003dd8:	4b79      	ldr	r3, [pc, #484]	; (8003fc0 <Ble_Hci_Gap_Gatt_Init+0x2bc>)
 8003dda:	735a      	strb	r2, [r3, #13]
#endif /* CFG_BLE_ADDRESS_TYPE != GAP_PUBLIC_ADDR */

  /**
   * Write Identity root key used to derive IRK and DHK(Legacy)
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_IR_OFFSET, CONFIG_DATA_IR_LEN, (uint8_t*)a_BLE_CfgIrValue);
 8003ddc:	4a79      	ldr	r2, [pc, #484]	; (8003fc4 <Ble_Hci_Gap_Gatt_Init+0x2c0>)
 8003dde:	2110      	movs	r1, #16
 8003de0:	2018      	movs	r0, #24
 8003de2:	f008 fc12 	bl	800c60a <aci_hal_write_config_data>
 8003de6:	4603      	mov	r3, r0
 8003de8:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <Ble_Hci_Gap_Gatt_Init+0xf8>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET, result: 0x%x \n", ret);
 8003df0:	7dfb      	ldrb	r3, [r7, #23]
 8003df2:	4619      	mov	r1, r3
 8003df4:	4874      	ldr	r0, [pc, #464]	; (8003fc8 <Ble_Hci_Gap_Gatt_Init+0x2c4>)
 8003df6:	f00b fcc7 	bl	800f788 <iprintf>
 8003dfa:	e002      	b.n	8003e02 <Ble_Hci_Gap_Gatt_Init+0xfe>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_IR_OFFSET\n");
 8003dfc:	4873      	ldr	r0, [pc, #460]	; (8003fcc <Ble_Hci_Gap_Gatt_Init+0x2c8>)
 8003dfe:	f00b fd31 	bl	800f864 <puts>
  }

  /**
   * Write Encryption root key used to derive LTK and CSRK
   */
  ret = aci_hal_write_config_data(CONFIG_DATA_ER_OFFSET, CONFIG_DATA_ER_LEN, (uint8_t*)a_BLE_CfgErValue);
 8003e02:	4a73      	ldr	r2, [pc, #460]	; (8003fd0 <Ble_Hci_Gap_Gatt_Init+0x2cc>)
 8003e04:	2110      	movs	r1, #16
 8003e06:	2008      	movs	r0, #8
 8003e08:	f008 fbff 	bl	800c60a <aci_hal_write_config_data>
 8003e0c:	4603      	mov	r3, r0
 8003e0e:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <Ble_Hci_Gap_Gatt_Init+0x11e>
  {
    APP_DBG_MSG("  Fail   : aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET, result: 0x%x \n", ret);
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	486e      	ldr	r0, [pc, #440]	; (8003fd4 <Ble_Hci_Gap_Gatt_Init+0x2d0>)
 8003e1c:	f00b fcb4 	bl	800f788 <iprintf>
 8003e20:	e002      	b.n	8003e28 <Ble_Hci_Gap_Gatt_Init+0x124>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_write_config_data command - CONFIG_DATA_ER_OFFSET\n");
 8003e22:	486d      	ldr	r0, [pc, #436]	; (8003fd8 <Ble_Hci_Gap_Gatt_Init+0x2d4>)
 8003e24:	f00b fd1e 	bl	800f864 <puts>
  }

  /**
   * Set TX Power.
   */
  ret = aci_hal_set_tx_power_level(1, CFG_TX_POWER);
 8003e28:	2118      	movs	r1, #24
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f008 fc72 	bl	800c714 <aci_hal_set_tx_power_level>
 8003e30:	4603      	mov	r3, r0
 8003e32:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003e34:	7dfb      	ldrb	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d005      	beq.n	8003e46 <Ble_Hci_Gap_Gatt_Init+0x142>
  {
    APP_DBG_MSG("  Fail   : aci_hal_set_tx_power_level command, result: 0x%x \n", ret);
 8003e3a:	7dfb      	ldrb	r3, [r7, #23]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4867      	ldr	r0, [pc, #412]	; (8003fdc <Ble_Hci_Gap_Gatt_Init+0x2d8>)
 8003e40:	f00b fca2 	bl	800f788 <iprintf>
 8003e44:	e002      	b.n	8003e4c <Ble_Hci_Gap_Gatt_Init+0x148>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_hal_set_tx_power_level command\n");
 8003e46:	4866      	ldr	r0, [pc, #408]	; (8003fe0 <Ble_Hci_Gap_Gatt_Init+0x2dc>)
 8003e48:	f00b fd0c 	bl	800f864 <puts>
  }

  /**
   * Initialize GATT interface
   */
  ret = aci_gatt_init();
 8003e4c:	f008 f931 	bl	800c0b2 <aci_gatt_init>
 8003e50:	4603      	mov	r3, r0
 8003e52:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003e54:	7dfb      	ldrb	r3, [r7, #23]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d005      	beq.n	8003e66 <Ble_Hci_Gap_Gatt_Init+0x162>
  {
    APP_DBG_MSG("  Fail   : aci_gatt_init command, result: 0x%x \n", ret);
 8003e5a:	7dfb      	ldrb	r3, [r7, #23]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4861      	ldr	r0, [pc, #388]	; (8003fe4 <Ble_Hci_Gap_Gatt_Init+0x2e0>)
 8003e60:	f00b fc92 	bl	800f788 <iprintf>
 8003e64:	e002      	b.n	8003e6c <Ble_Hci_Gap_Gatt_Init+0x168>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gatt_init command\n");
 8003e66:	4860      	ldr	r0, [pc, #384]	; (8003fe8 <Ble_Hci_Gap_Gatt_Init+0x2e4>)
 8003e68:	f00b fcfc 	bl	800f864 <puts>
  }

  /**
   * Initialize GAP interface
   */
  role = 0;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	73fb      	strb	r3, [r7, #15]

#if (BLE_CFG_PERIPHERAL == 1)
  role |= GAP_PERIPHERAL_ROLE;
 8003e70:	7bfb      	ldrb	r3, [r7, #15]
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]

/* USER CODE BEGIN Role_Mngt*/

/* USER CODE END Role_Mngt */

  if (role > 0)
 8003e78:	7bfb      	ldrb	r3, [r7, #15]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d02b      	beq.n	8003ed6 <Ble_Hci_Gap_Gatt_Init+0x1d2>
  {
    const char *name = "P2PSRV1";
 8003e7e:	4b5b      	ldr	r3, [pc, #364]	; (8003fec <Ble_Hci_Gap_Gatt_Init+0x2e8>)
 8003e80:	60bb      	str	r3, [r7, #8]
    ret = aci_gap_init(role,
 8003e82:	1dba      	adds	r2, r7, #6
 8003e84:	7bf8      	ldrb	r0, [r7, #15]
 8003e86:	1cbb      	adds	r3, r7, #2
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	1d3b      	adds	r3, r7, #4
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	2207      	movs	r2, #7
 8003e92:	2100      	movs	r1, #0
 8003e94:	f007 ff0f 	bl	800bcb6 <aci_gap_init>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	75fb      	strb	r3, [r7, #23]
                       APPBLE_GAP_DEVICE_NAME_LENGTH,
                       &gap_service_handle,
                       &gap_dev_name_char_handle,
                       &gap_appearance_char_handle);

    if (ret != BLE_STATUS_SUCCESS)
 8003e9c:	7dfb      	ldrb	r3, [r7, #23]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <Ble_Hci_Gap_Gatt_Init+0x1aa>
    {
      APP_DBG_MSG("  Fail   : aci_gap_init command, result: 0x%x \n", ret);
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4852      	ldr	r0, [pc, #328]	; (8003ff0 <Ble_Hci_Gap_Gatt_Init+0x2ec>)
 8003ea8:	f00b fc6e 	bl	800f788 <iprintf>
 8003eac:	e002      	b.n	8003eb4 <Ble_Hci_Gap_Gatt_Init+0x1b0>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_init command\n");
 8003eae:	4851      	ldr	r0, [pc, #324]	; (8003ff4 <Ble_Hci_Gap_Gatt_Init+0x2f0>)
 8003eb0:	f00b fcd8 	bl	800f864 <puts>
    }

    ret = aci_gatt_update_char_value(gap_service_handle, gap_dev_name_char_handle, 0, strlen(name), (uint8_t *) name);
 8003eb4:	88fc      	ldrh	r4, [r7, #6]
 8003eb6:	88bd      	ldrh	r5, [r7, #4]
 8003eb8:	68b8      	ldr	r0, [r7, #8]
 8003eba:	f7fc f9c1 	bl	8000240 <strlen>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	2200      	movs	r2, #0
 8003eca:	4629      	mov	r1, r5
 8003ecc:	4620      	mov	r0, r4
 8003ece:	f008 faf3 	bl	800c4b8 <aci_gatt_update_char_value>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	75fb      	strb	r3, [r7, #23]
    {
      BLE_DBG_SVCCTL_MSG("  Success: aci_gatt_update_char_value - Device Name\n");
    }
  }

  ret = aci_gatt_update_char_value(gap_service_handle,
 8003ed6:	88f8      	ldrh	r0, [r7, #6]
 8003ed8:	8879      	ldrh	r1, [r7, #2]
 8003eda:	463b      	mov	r3, r7
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	2302      	movs	r3, #2
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	f008 fae9 	bl	800c4b8 <aci_gatt_update_char_value>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	75fb      	strb	r3, [r7, #23]
  }

  /**
   * Initialize Default PHY
   */
  ret = hci_le_set_default_phy(ALL_PHYS_PREFERENCE,TX_2M_PREFERRED,RX_2M_PREFERRED);
 8003eea:	2202      	movs	r2, #2
 8003eec:	2102      	movs	r1, #2
 8003eee:	2000      	movs	r0, #0
 8003ef0:	f008 fd6d 	bl	800c9ce <hci_le_set_default_phy>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003ef8:	7dfb      	ldrb	r3, [r7, #23]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d005      	beq.n	8003f0a <Ble_Hci_Gap_Gatt_Init+0x206>
  {
    APP_DBG_MSG("  Fail   : hci_le_set_default_phy command, result: 0x%x \n", ret);
 8003efe:	7dfb      	ldrb	r3, [r7, #23]
 8003f00:	4619      	mov	r1, r3
 8003f02:	483d      	ldr	r0, [pc, #244]	; (8003ff8 <Ble_Hci_Gap_Gatt_Init+0x2f4>)
 8003f04:	f00b fc40 	bl	800f788 <iprintf>
 8003f08:	e002      	b.n	8003f10 <Ble_Hci_Gap_Gatt_Init+0x20c>
  }
  else
  {
    APP_DBG_MSG("  Success: hci_le_set_default_phy command\n");
 8003f0a:	483c      	ldr	r0, [pc, #240]	; (8003ffc <Ble_Hci_Gap_Gatt_Init+0x2f8>)
 8003f0c:	f00b fcaa 	bl	800f864 <puts>
  }

  /**
   * Initialize IO capability
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability = CFG_IO_CAPABILITY;
 8003f10:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f12:	2201      	movs	r2, #1
 8003f14:	701a      	strb	r2, [r3, #0]
  ret = aci_gap_set_io_capability(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.ioCapability);
 8003f16:	4b3a      	ldr	r3, [pc, #232]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f007 fd4c 	bl	800b9b8 <aci_gap_set_io_capability>
 8003f20:	4603      	mov	r3, r0
 8003f22:	75fb      	strb	r3, [r7, #23]
  if (ret != BLE_STATUS_SUCCESS)
 8003f24:	7dfb      	ldrb	r3, [r7, #23]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d005      	beq.n	8003f36 <Ble_Hci_Gap_Gatt_Init+0x232>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_io_capability command, result: 0x%x \n", ret);
 8003f2a:	7dfb      	ldrb	r3, [r7, #23]
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4835      	ldr	r0, [pc, #212]	; (8004004 <Ble_Hci_Gap_Gatt_Init+0x300>)
 8003f30:	f00b fc2a 	bl	800f788 <iprintf>
 8003f34:	e002      	b.n	8003f3c <Ble_Hci_Gap_Gatt_Init+0x238>
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_io_capability command\n");
 8003f36:	4834      	ldr	r0, [pc, #208]	; (8004008 <Ble_Hci_Gap_Gatt_Init+0x304>)
 8003f38:	f00b fc94 	bl	800f864 <puts>
  }

  /**
   * Initialize authentication
   */
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.mitm_mode = CFG_MITM_PROTECTION;
 8003f3c:	4b30      	ldr	r3, [pc, #192]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f3e:	2201      	movs	r2, #1
 8003f40:	705a      	strb	r2, [r3, #1]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin = CFG_ENCRYPTION_KEY_SIZE_MIN;
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f44:	2208      	movs	r2, #8
 8003f46:	711a      	strb	r2, [r3, #4]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax = CFG_ENCRYPTION_KEY_SIZE_MAX;
 8003f48:	4b2d      	ldr	r3, [pc, #180]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f4a:	2210      	movs	r2, #16
 8003f4c:	715a      	strb	r2, [r3, #5]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin = CFG_USED_FIXED_PIN;
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	70da      	strb	r2, [r3, #3]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin = CFG_FIXED_PIN;
 8003f54:	4b2a      	ldr	r3, [pc, #168]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f56:	4a2d      	ldr	r2, [pc, #180]	; (800400c <Ble_Hci_Gap_Gatt_Init+0x308>)
 8003f58:	609a      	str	r2, [r3, #8]
  BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode = CFG_BONDING_MODE;
 8003f5a:	4b29      	ldr	r3, [pc, #164]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	709a      	strb	r2, [r3, #2]
  /* USER CODE BEGIN Ble_Hci_Gap_Gatt_Init_1*/

  /* USER CODE END Ble_Hci_Gap_Gatt_Init_1*/

  ret = aci_gap_set_authentication_requirement(BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode,
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f62:	789c      	ldrb	r4, [r3, #2]
 8003f64:	4b26      	ldr	r3, [pc, #152]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f66:	785d      	ldrb	r5, [r3, #1]
 8003f68:	4b25      	ldr	r3, [pc, #148]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f6a:	791b      	ldrb	r3, [r3, #4]
 8003f6c:	4a24      	ldr	r2, [pc, #144]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f6e:	7952      	ldrb	r2, [r2, #5]
 8003f70:	4923      	ldr	r1, [pc, #140]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f72:	78c9      	ldrb	r1, [r1, #3]
 8003f74:	4822      	ldr	r0, [pc, #136]	; (8004000 <Ble_Hci_Gap_Gatt_Init+0x2fc>)
 8003f76:	6880      	ldr	r0, [r0, #8]
 8003f78:	2600      	movs	r6, #0
 8003f7a:	9604      	str	r6, [sp, #16]
 8003f7c:	9003      	str	r0, [sp, #12]
 8003f7e:	9102      	str	r1, [sp, #8]
 8003f80:	9201      	str	r2, [sp, #4]
 8003f82:	9300      	str	r3, [sp, #0]
 8003f84:	2300      	movs	r3, #0
 8003f86:	2201      	movs	r2, #1
 8003f88:	4629      	mov	r1, r5
 8003f8a:	4620      	mov	r0, r4
 8003f8c:	f007 fd68 	bl	800ba60 <aci_gap_set_authentication_requirement>
 8003f90:	4603      	mov	r3, r0
 8003f92:	75fb      	strb	r3, [r7, #23]
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.encryptionKeySizeMax,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Use_Fixed_Pin,
                                               BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.Fixed_Pin,
                                               CFG_IDENTITY_ADDRESS);
  if (ret != BLE_STATUS_SUCCESS)
 8003f94:	7dfb      	ldrb	r3, [r7, #23]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d03c      	beq.n	8004014 <Ble_Hci_Gap_Gatt_Init+0x310>
  {
    APP_DBG_MSG("  Fail   : aci_gap_set_authentication_requirement command, result: 0x%x \n", ret);
 8003f9a:	7dfb      	ldrb	r3, [r7, #23]
 8003f9c:	4619      	mov	r1, r3
 8003f9e:	481c      	ldr	r0, [pc, #112]	; (8004010 <Ble_Hci_Gap_Gatt_Init+0x30c>)
 8003fa0:	f00b fbf2 	bl	800f788 <iprintf>
 8003fa4:	e039      	b.n	800401a <Ble_Hci_Gap_Gatt_Init+0x316>
 8003fa6:	bf00      	nop
 8003fa8:	080122cc 	.word	0x080122cc
 8003fac:	080122f8 	.word	0x080122f8
 8003fb0:	08012328 	.word	0x08012328
 8003fb4:	08012348 	.word	0x08012348
 8003fb8:	080123a4 	.word	0x080123a4
 8003fbc:	080123f0 	.word	0x080123f0
 8003fc0:	20000010 	.word	0x20000010
 8003fc4:	08012f5c 	.word	0x08012f5c
 8003fc8:	0801242c 	.word	0x0801242c
 8003fcc:	08012484 	.word	0x08012484
 8003fd0:	08012f6c 	.word	0x08012f6c
 8003fd4:	080124cc 	.word	0x080124cc
 8003fd8:	08012524 	.word	0x08012524
 8003fdc:	0801256c 	.word	0x0801256c
 8003fe0:	080125ac 	.word	0x080125ac
 8003fe4:	080125dc 	.word	0x080125dc
 8003fe8:	08012610 	.word	0x08012610
 8003fec:	08012634 	.word	0x08012634
 8003ff0:	0801263c 	.word	0x0801263c
 8003ff4:	0801266c 	.word	0x0801266c
 8003ff8:	0801268c 	.word	0x0801268c
 8003ffc:	080126c8 	.word	0x080126c8
 8004000:	200006f0 	.word	0x200006f0
 8004004:	080126f4 	.word	0x080126f4
 8004008:	08012734 	.word	0x08012734
 800400c:	0001b207 	.word	0x0001b207
 8004010:	08012764 	.word	0x08012764
  }
  else
  {
    APP_DBG_MSG("  Success: aci_gap_set_authentication_requirement command\n");
 8004014:	480e      	ldr	r0, [pc, #56]	; (8004050 <Ble_Hci_Gap_Gatt_Init+0x34c>)
 8004016:	f00b fc25 	bl	800f864 <puts>
  }

  /**
   * Initialize whitelist
   */
  if (BleApplicationContext.BleApplicationContext_legacy.bleSecurityParam.bonding_mode)
 800401a:	4b0e      	ldr	r3, [pc, #56]	; (8004054 <Ble_Hci_Gap_Gatt_Init+0x350>)
 800401c:	789b      	ldrb	r3, [r3, #2]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00f      	beq.n	8004042 <Ble_Hci_Gap_Gatt_Init+0x33e>
  {
    ret = aci_gap_configure_whitelist();
 8004022:	f007 ff67 	bl	800bef4 <aci_gap_configure_filter_accept_list>
 8004026:	4603      	mov	r3, r0
 8004028:	75fb      	strb	r3, [r7, #23]
    if (ret != BLE_STATUS_SUCCESS)
 800402a:	7dfb      	ldrb	r3, [r7, #23]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d005      	beq.n	800403c <Ble_Hci_Gap_Gatt_Init+0x338>
    {
      APP_DBG_MSG("  Fail   : aci_gap_configure_whitelist command, result: 0x%x \n", ret);
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	4619      	mov	r1, r3
 8004034:	4808      	ldr	r0, [pc, #32]	; (8004058 <Ble_Hci_Gap_Gatt_Init+0x354>)
 8004036:	f00b fba7 	bl	800f788 <iprintf>
 800403a:	e002      	b.n	8004042 <Ble_Hci_Gap_Gatt_Init+0x33e>
    }
    else
    {
      APP_DBG_MSG("  Success: aci_gap_configure_whitelist command\n");
 800403c:	4807      	ldr	r0, [pc, #28]	; (800405c <Ble_Hci_Gap_Gatt_Init+0x358>)
 800403e:	f00b fc11 	bl	800f864 <puts>
    }
  }
  APP_DBG_MSG("==>> End Ble_Hci_Gap_Gatt_Init function\n\r");
 8004042:	4807      	ldr	r0, [pc, #28]	; (8004060 <Ble_Hci_Gap_Gatt_Init+0x35c>)
 8004044:	f00b fba0 	bl	800f788 <iprintf>
}
 8004048:	bf00      	nop
 800404a:	371c      	adds	r7, #28
 800404c:	46bd      	mov	sp, r7
 800404e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004050:	080127b0 	.word	0x080127b0
 8004054:	200006f0 	.word	0x200006f0
 8004058:	080127ec 	.word	0x080127ec
 800405c:	0801282c 	.word	0x0801282c
 8004060:	0801285c 	.word	0x0801285c

08004064 <Adv_Request>:

static void Adv_Request(APP_BLE_ConnStatus_t NewStatus)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b08c      	sub	sp, #48	; 0x30
 8004068:	af08      	add	r7, sp, #32
 800406a:	4603      	mov	r3, r0
 800406c:	71fb      	strb	r3, [r7, #7]
  tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800406e:	2392      	movs	r3, #146	; 0x92
 8004070:	72fb      	strb	r3, [r7, #11]
  uint16_t Min_Inter, Max_Inter;

  if (NewStatus == APP_BLE_FAST_ADV)
 8004072:	79fb      	ldrb	r3, [r7, #7]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d106      	bne.n	8004086 <Adv_Request+0x22>
  {
    Min_Inter = AdvIntervalMin;
 8004078:	4b41      	ldr	r3, [pc, #260]	; (8004180 <Adv_Request+0x11c>)
 800407a:	881b      	ldrh	r3, [r3, #0]
 800407c:	81fb      	strh	r3, [r7, #14]
    Max_Inter = AdvIntervalMax;
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <Adv_Request+0x120>)
 8004080:	881b      	ldrh	r3, [r3, #0]
 8004082:	81bb      	strh	r3, [r7, #12]
 8004084:	e005      	b.n	8004092 <Adv_Request+0x2e>
  }
  else
  {
    Min_Inter = CFG_LP_CONN_ADV_INTERVAL_MIN;
 8004086:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800408a:	81fb      	strh	r3, [r7, #14]
    Max_Inter = CFG_LP_CONN_ADV_INTERVAL_MAX;
 800408c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004090:	81bb      	strh	r3, [r7, #12]

  /**
   * Stop the timer, it will be restarted for a new shot
   * It does not hurt if the timer was not running
   */
  HW_TS_Stop(BleApplicationContext.Advertising_mgr_timer_Id);
 8004092:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <Adv_Request+0x124>)
 8004094:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004098:	4618      	mov	r0, r3
 800409a:	f7fe fa49 	bl	8002530 <HW_TS_Stop>

  if ((NewStatus == APP_BLE_LP_ADV)
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d119      	bne.n	80040d8 <Adv_Request+0x74>
      && ((BleApplicationContext.Device_Connection_Status == APP_BLE_FAST_ADV)
 80040a4:	4b38      	ldr	r3, [pc, #224]	; (8004188 <Adv_Request+0x124>)
 80040a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d004      	beq.n	80040b8 <Adv_Request+0x54>
          || (BleApplicationContext.Device_Connection_Status == APP_BLE_LP_ADV)))
 80040ae:	4b36      	ldr	r3, [pc, #216]	; (8004188 <Adv_Request+0x124>)
 80040b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d10f      	bne.n	80040d8 <Adv_Request+0x74>
  {
    /* Connection in ADVERTISE mode have to stop the current advertising */
    ret = aci_gap_set_non_discoverable();
 80040b8:	f007 fb60 	bl	800b77c <aci_gap_set_non_discoverable>
 80040bc:	4603      	mov	r3, r0
 80040be:	72fb      	strb	r3, [r7, #11]
    if (ret != BLE_STATUS_SUCCESS)
 80040c0:	7afb      	ldrb	r3, [r7, #11]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <Adv_Request+0x6e>
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Stop Advertising Failed , result: %d \n", ret);
 80040c6:	7afb      	ldrb	r3, [r7, #11]
 80040c8:	4619      	mov	r1, r3
 80040ca:	4830      	ldr	r0, [pc, #192]	; (800418c <Adv_Request+0x128>)
 80040cc:	f00b fb5c 	bl	800f788 <iprintf>
 80040d0:	e002      	b.n	80040d8 <Adv_Request+0x74>
    }
    else
    {
      APP_DBG_MSG("==>> aci_gap_set_non_discoverable - Successfully Stopped Advertising \n");
 80040d2:	482f      	ldr	r0, [pc, #188]	; (8004190 <Adv_Request+0x12c>)
 80040d4:	f00b fbc6 	bl	800f864 <puts>
    }
  }

  BleApplicationContext.Device_Connection_Status = NewStatus;
 80040d8:	4a2b      	ldr	r2, [pc, #172]	; (8004188 <Adv_Request+0x124>)
 80040da:	79fb      	ldrb	r3, [r7, #7]
 80040dc:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  /* Start Fast or Low Power Advertising */
  ret = aci_gap_set_discoverable(ADV_IND,
 80040e0:	4b29      	ldr	r3, [pc, #164]	; (8004188 <Adv_Request+0x124>)
 80040e2:	7e1b      	ldrb	r3, [r3, #24]
 80040e4:	89ba      	ldrh	r2, [r7, #12]
 80040e6:	89f9      	ldrh	r1, [r7, #14]
 80040e8:	2000      	movs	r0, #0
 80040ea:	9006      	str	r0, [sp, #24]
 80040ec:	2000      	movs	r0, #0
 80040ee:	9005      	str	r0, [sp, #20]
 80040f0:	4828      	ldr	r0, [pc, #160]	; (8004194 <Adv_Request+0x130>)
 80040f2:	9004      	str	r0, [sp, #16]
 80040f4:	9303      	str	r3, [sp, #12]
 80040f6:	4b28      	ldr	r3, [pc, #160]	; (8004198 <Adv_Request+0x134>)
 80040f8:	9302      	str	r3, [sp, #8]
 80040fa:	2308      	movs	r3, #8
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	2300      	movs	r3, #0
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	2300      	movs	r3, #0
 8004104:	2000      	movs	r0, #0
 8004106:	f007 fb5d 	bl	800b7c4 <aci_gap_set_discoverable>
 800410a:	4603      	mov	r3, r0
 800410c:	72fb      	strb	r3, [r7, #11]
                                 (uint8_t*) &a_LocalName,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUIDlen,
                                 BleApplicationContext.BleApplicationContext_legacy.advtServUUID,
                                 0,
                                 0);
  if (ret != BLE_STATUS_SUCCESS)
 800410e:	7afb      	ldrb	r3, [r7, #11]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <Adv_Request+0xbc>
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - fail, result: 0x%x \n", ret);
 8004114:	7afb      	ldrb	r3, [r7, #11]
 8004116:	4619      	mov	r1, r3
 8004118:	4820      	ldr	r0, [pc, #128]	; (800419c <Adv_Request+0x138>)
 800411a:	f00b fb35 	bl	800f788 <iprintf>
 800411e:	e002      	b.n	8004126 <Adv_Request+0xc2>
  }
  else
  {
    APP_DBG_MSG("==>> aci_gap_set_discoverable - Success\n");
 8004120:	481f      	ldr	r0, [pc, #124]	; (80041a0 <Adv_Request+0x13c>)
 8004122:	f00b fb9f 	bl	800f864 <puts>
  }

  /* Update Advertising data */
  ret = aci_gap_update_adv_data(sizeof(a_ManufData), (uint8_t*) a_ManufData);
 8004126:	491f      	ldr	r1, [pc, #124]	; (80041a4 <Adv_Request+0x140>)
 8004128:	200e      	movs	r0, #14
 800412a:	f007 fe71 	bl	800be10 <aci_gap_update_adv_data>
 800412e:	4603      	mov	r3, r0
 8004130:	72fb      	strb	r3, [r7, #11]
  if (ret != BLE_STATUS_SUCCESS)
 8004132:	7afb      	ldrb	r3, [r7, #11]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <Adv_Request+0xf2>
  {
    if (NewStatus == APP_BLE_FAST_ADV)
 8004138:	79fb      	ldrb	r3, [r7, #7]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <Adv_Request+0xe6>
    {
      APP_DBG_MSG("==>> Start Fast Advertising Failed , result: %d \n\r", ret);
 800413e:	7afb      	ldrb	r3, [r7, #11]
 8004140:	4619      	mov	r1, r3
 8004142:	4819      	ldr	r0, [pc, #100]	; (80041a8 <Adv_Request+0x144>)
 8004144:	f00b fb20 	bl	800f788 <iprintf>
    {
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
    }
  }

  return;
 8004148:	e017      	b.n	800417a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Start Low Power Advertising Failed , result: %d \n\r", ret);
 800414a:	7afb      	ldrb	r3, [r7, #11]
 800414c:	4619      	mov	r1, r3
 800414e:	4817      	ldr	r0, [pc, #92]	; (80041ac <Adv_Request+0x148>)
 8004150:	f00b fb1a 	bl	800f788 <iprintf>
  return;
 8004154:	e011      	b.n	800417a <Adv_Request+0x116>
    if (NewStatus == APP_BLE_FAST_ADV)
 8004156:	79fb      	ldrb	r3, [r7, #7]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d10a      	bne.n	8004172 <Adv_Request+0x10e>
      APP_DBG_MSG("==>> Success: Start Fast Advertising \n\r");
 800415c:	4814      	ldr	r0, [pc, #80]	; (80041b0 <Adv_Request+0x14c>)
 800415e:	f00b fb13 	bl	800f788 <iprintf>
      HW_TS_Start(BleApplicationContext.Advertising_mgr_timer_Id, INITIAL_ADV_TIMEOUT);
 8004162:	4b09      	ldr	r3, [pc, #36]	; (8004188 <Adv_Request+0x124>)
 8004164:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004168:	4912      	ldr	r1, [pc, #72]	; (80041b4 <Adv_Request+0x150>)
 800416a:	4618      	mov	r0, r3
 800416c:	f7fe fa64 	bl	8002638 <HW_TS_Start>
  return;
 8004170:	e003      	b.n	800417a <Adv_Request+0x116>
      APP_DBG_MSG("==>> Success: Start Low Power Advertising \n\r");
 8004172:	4811      	ldr	r0, [pc, #68]	; (80041b8 <Adv_Request+0x154>)
 8004174:	f00b fb08 	bl	800f788 <iprintf>
  return;
 8004178:	bf00      	nop
}
 800417a:	3710      	adds	r7, #16
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	20000774 	.word	0x20000774
 8004184:	20000776 	.word	0x20000776
 8004188:	200006f0 	.word	0x200006f0
 800418c:	08012888 	.word	0x08012888
 8004190:	080128d4 	.word	0x080128d4
 8004194:	20000709 	.word	0x20000709
 8004198:	08012f7c 	.word	0x08012f7c
 800419c:	0801291c 	.word	0x0801291c
 80041a0:	08012954 	.word	0x08012954
 80041a4:	20000010 	.word	0x20000010
 80041a8:	0801297c 	.word	0x0801297c
 80041ac:	080129b0 	.word	0x080129b0
 80041b0:	080129e8 	.word	0x080129e8
 80041b4:	0001e046 	.word	0x0001e046
 80041b8:	08012a10 	.word	0x08012a10

080041bc <BleGetBdAddress>:

const uint8_t* BleGetBdAddress(void)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
  const uint8_t *p_bd_addr;
  uint32_t udn;
  uint32_t company_id;
  uint32_t device_id;

  udn = LL_FLASH_GetUDN();
 80041c2:	f7ff fa45 	bl	8003650 <LL_FLASH_GetUDN>
 80041c6:	6138      	str	r0, [r7, #16]

  if (udn != 0xFFFFFFFF)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ce:	d023      	beq.n	8004218 <BleGetBdAddress+0x5c>
  {
    company_id = LL_FLASH_GetSTCompanyID();
 80041d0:	f7ff fa56 	bl	8003680 <LL_FLASH_GetSTCompanyID>
 80041d4:	60b8      	str	r0, [r7, #8]
    device_id = LL_FLASH_GetDeviceID();
 80041d6:	f7ff fa47 	bl	8003668 <LL_FLASH_GetDeviceID>
 80041da:	6078      	str	r0, [r7, #4]
     * bit[23:16] : Device ID.
     * bit[15:0] : The last 16bits from the UDN
     * Note: In order to use the Public Address in a final product, a dedicated
     * 24bits company ID (OUI) shall be bought.
     */
    a_BdAddrUdn[0] = (uint8_t)(udn & 0x000000FF);
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b16      	ldr	r3, [pc, #88]	; (800423c <BleGetBdAddress+0x80>)
 80041e2:	701a      	strb	r2, [r3, #0]
    a_BdAddrUdn[1] = (uint8_t)((udn & 0x0000FF00) >> 8);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	0a1b      	lsrs	r3, r3, #8
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	4b14      	ldr	r3, [pc, #80]	; (800423c <BleGetBdAddress+0x80>)
 80041ec:	705a      	strb	r2, [r3, #1]
    a_BdAddrUdn[2] = (uint8_t)device_id;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <BleGetBdAddress+0x80>)
 80041f4:	709a      	strb	r2, [r3, #2]
    a_BdAddrUdn[3] = (uint8_t)(company_id & 0x000000FF);
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b10      	ldr	r3, [pc, #64]	; (800423c <BleGetBdAddress+0x80>)
 80041fc:	70da      	strb	r2, [r3, #3]
    a_BdAddrUdn[4] = (uint8_t)((company_id & 0x0000FF00) >> 8);
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	0a1b      	lsrs	r3, r3, #8
 8004202:	b2da      	uxtb	r2, r3
 8004204:	4b0d      	ldr	r3, [pc, #52]	; (800423c <BleGetBdAddress+0x80>)
 8004206:	711a      	strb	r2, [r3, #4]
    a_BdAddrUdn[5] = (uint8_t)((company_id & 0x00FF0000) >> 16);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	0c1b      	lsrs	r3, r3, #16
 800420c:	b2da      	uxtb	r2, r3
 800420e:	4b0b      	ldr	r3, [pc, #44]	; (800423c <BleGetBdAddress+0x80>)
 8004210:	715a      	strb	r2, [r3, #5]

    p_bd_addr = (const uint8_t *)a_BdAddrUdn;
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <BleGetBdAddress+0x80>)
 8004214:	617b      	str	r3, [r7, #20]
 8004216:	e00b      	b.n	8004230 <BleGetBdAddress+0x74>
  }
  else
  {
    p_otp_addr = OTP_Read(0);
 8004218:	2000      	movs	r0, #0
 800421a:	f008 ff67 	bl	800d0ec <OTP_Read>
 800421e:	60f8      	str	r0, [r7, #12]
    if (p_otp_addr)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <BleGetBdAddress+0x70>
    {
      p_bd_addr = ((OTP_ID0_t*)p_otp_addr)->bd_address;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	617b      	str	r3, [r7, #20]
 800422a:	e001      	b.n	8004230 <BleGetBdAddress+0x74>
    }
    else
    {
      p_bd_addr = a_MBdAddr;
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <BleGetBdAddress+0x84>)
 800422e:	617b      	str	r3, [r7, #20]
    }
  }

  return p_bd_addr;
 8004230:	697b      	ldr	r3, [r7, #20]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	200006e8 	.word	0x200006e8
 8004240:	08012f54 	.word	0x08012f54

08004244 <Adv_Cancel>:
 *
 * SPECIFIC FUNCTIONS FOR P2P SERVER
 *
 *************************************************************/
static void Adv_Cancel(void)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_1 */
  BSP_LED_Off(LED_GREEN);
 800424a:	2001      	movs	r0, #1
 800424c:	f000 fd28 	bl	8004ca0 <BSP_LED_Off>
  /* USER CODE END Adv_Cancel_1 */

  if (BleApplicationContext.Device_Connection_Status != APP_BLE_CONNECTED_SERVER)
 8004250:	4b10      	ldr	r3, [pc, #64]	; (8004294 <Adv_Cancel+0x50>)
 8004252:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004256:	2b05      	cmp	r3, #5
 8004258:	d017      	beq.n	800428a <Adv_Cancel+0x46>
  {
    tBleStatus ret = BLE_STATUS_INVALID_PARAMS;
 800425a:	2392      	movs	r3, #146	; 0x92
 800425c:	71fb      	strb	r3, [r7, #7]

    ret = aci_gap_set_non_discoverable();
 800425e:	f007 fa8d 	bl	800b77c <aci_gap_set_non_discoverable>
 8004262:	4603      	mov	r3, r0
 8004264:	71fb      	strb	r3, [r7, #7]

    BleApplicationContext.Device_Connection_Status = APP_BLE_IDLE;
 8004266:	4b0b      	ldr	r3, [pc, #44]	; (8004294 <Adv_Cancel+0x50>)
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    if (ret != BLE_STATUS_SUCCESS)
 800426e:	79fb      	ldrb	r3, [r7, #7]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <Adv_Cancel+0x38>
    {
      APP_DBG_MSG("** STOP ADVERTISING **  Failed \r\n\r");
 8004274:	4808      	ldr	r0, [pc, #32]	; (8004298 <Adv_Cancel+0x54>)
 8004276:	f00b fa87 	bl	800f788 <iprintf>

  /* USER CODE BEGIN Adv_Cancel_2 */

  /* USER CODE END Adv_Cancel_2 */

  return;
 800427a:	e006      	b.n	800428a <Adv_Cancel+0x46>
      APP_DBG_MSG("  \r\n\r");
 800427c:	4807      	ldr	r0, [pc, #28]	; (800429c <Adv_Cancel+0x58>)
 800427e:	f00b fa83 	bl	800f788 <iprintf>
      APP_DBG_MSG("** STOP ADVERTISING **  \r\n\r");
 8004282:	4807      	ldr	r0, [pc, #28]	; (80042a0 <Adv_Cancel+0x5c>)
 8004284:	f00b fa80 	bl	800f788 <iprintf>
  return;
 8004288:	bf00      	nop
 800428a:	bf00      	nop
}
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	200006f0 	.word	0x200006f0
 8004298:	08012a40 	.word	0x08012a40
 800429c:	08012a64 	.word	0x08012a64
 80042a0:	08012a6c 	.word	0x08012a6c

080042a4 <Adv_Cancel_Req>:

static void Adv_Cancel_Req(void)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Adv_Cancel_Req_1 */

  /* USER CODE END Adv_Cancel_Req_1 */

  UTIL_SEQ_SetTask(1 << CFG_TASK_ADV_CANCEL_ID, CFG_SCH_PRIO_0);
 80042a8:	2100      	movs	r1, #0
 80042aa:	2001      	movs	r0, #1
 80042ac:	f00a fc24 	bl	800eaf8 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN Adv_Cancel_Req_2 */

  /* USER CODE END Adv_Cancel_Req_2 */

  return;
 80042b0:	bf00      	nop
}
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <Switch_OFF_GPIO>:

static void Switch_OFF_GPIO()
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Switch_OFF_GPIO */
  BSP_LED_Off(LED_GREEN);
 80042b8:	2001      	movs	r0, #1
 80042ba:	f000 fcf1 	bl	8004ca0 <BSP_LED_Off>
  /* USER CODE END Switch_OFF_GPIO */
}
 80042be:	bf00      	nop
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <BLE_SVC_L2CAP_Conn_Update>:

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
void BLE_SVC_L2CAP_Conn_Update(uint16_t ConnectionHandle)
{
 80042c4:	b590      	push	{r4, r7, lr}
 80042c6:	b089      	sub	sp, #36	; 0x24
 80042c8:	af02      	add	r7, sp, #8
 80042ca:	4603      	mov	r3, r0
 80042cc:	80fb      	strh	r3, [r7, #6]
  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_1 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_1 */

  if (mutex == 1)
 80042ce:	4b29      	ldr	r3, [pc, #164]	; (8004374 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80042d0:	781b      	ldrb	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d149      	bne.n	800436a <BLE_SVC_L2CAP_Conn_Update+0xa6>
  {
    mutex = 0;
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <BLE_SVC_L2CAP_Conn_Update+0xb0>)
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
    index_con_int = (index_con_int + 1)%SIZE_TAB_CONN_INT;
 80042dc:	4b26      	ldr	r3, [pc, #152]	; (8004378 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	3301      	adds	r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	bfb8      	it	lt
 80042ea:	425b      	neglt	r3, r3
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	4b22      	ldr	r3, [pc, #136]	; (8004378 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80042f0:	701a      	strb	r2, [r3, #0]
    uint16_t interval_min = CONN_P(a_ConnInterval[index_con_int]);
 80042f2:	4b21      	ldr	r3, [pc, #132]	; (8004378 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	4a21      	ldr	r2, [pc, #132]	; (800437c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	ed93 7a00 	vldr	s14, [r3]
 8004300:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8004304:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004308:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800430c:	ee17 3a90 	vmov	r3, s15
 8004310:	82fb      	strh	r3, [r7, #22]
    uint16_t interval_max = CONN_P(a_ConnInterval[index_con_int]);
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <BLE_SVC_L2CAP_Conn_Update+0xb4>)
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	4a19      	ldr	r2, [pc, #100]	; (800437c <BLE_SVC_L2CAP_Conn_Update+0xb8>)
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	4413      	add	r3, r2
 800431c:	ed93 7a00 	vldr	s14, [r3]
 8004320:	eef7 6a04 	vmov.f32	s13, #116	; 0x3fa00000  1.250
 8004324:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004328:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800432c:	ee17 3a90 	vmov	r3, s15
 8004330:	82bb      	strh	r3, [r7, #20]
    uint16_t peripheral_latency = L2CAP_PERIPHERAL_LATENCY;
 8004332:	2300      	movs	r3, #0
 8004334:	827b      	strh	r3, [r7, #18]
    uint16_t timeout_multiplier = L2CAP_TIMEOUT_MULTIPLIER;
 8004336:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800433a:	823b      	strh	r3, [r7, #16]
    tBleStatus ret;

    ret = aci_l2cap_connection_parameter_update_req(BleApplicationContext.BleApplicationContext_legacy.connectionHandle,
 800433c:	4b10      	ldr	r3, [pc, #64]	; (8004380 <BLE_SVC_L2CAP_Conn_Update+0xbc>)
 800433e:	8ad8      	ldrh	r0, [r3, #22]
 8004340:	8a7c      	ldrh	r4, [r7, #18]
 8004342:	8aba      	ldrh	r2, [r7, #20]
 8004344:	8af9      	ldrh	r1, [r7, #22]
 8004346:	8a3b      	ldrh	r3, [r7, #16]
 8004348:	9300      	str	r3, [sp, #0]
 800434a:	4623      	mov	r3, r4
 800434c:	f008 fbbc 	bl	800cac8 <aci_l2cap_connection_parameter_update_req>
 8004350:	4603      	mov	r3, r0
 8004352:	73fb      	strb	r3, [r7, #15]
                                                    interval_min, interval_max,
                                                    peripheral_latency, timeout_multiplier);
    if (ret != BLE_STATUS_SUCCESS)
 8004354:	7bfb      	ldrb	r3, [r7, #15]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <BLE_SVC_L2CAP_Conn_Update+0x9e>
    {
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Failed \r\n\r");
 800435a:	480a      	ldr	r0, [pc, #40]	; (8004384 <BLE_SVC_L2CAP_Conn_Update+0xc0>)
 800435c:	f00b fa14 	bl	800f788 <iprintf>

  /* USER CODE BEGIN BLE_SVC_L2CAP_Conn_Update_2 */

  /* USER CODE END BLE_SVC_L2CAP_Conn_Update_2 */

  return;
 8004360:	e003      	b.n	800436a <BLE_SVC_L2CAP_Conn_Update+0xa6>
      APP_DBG_MSG("BLE_SVC_L2CAP_Conn_Update(), Successfully \r\n\r");
 8004362:	4809      	ldr	r0, [pc, #36]	; (8004388 <BLE_SVC_L2CAP_Conn_Update+0xc4>)
 8004364:	f00b fa10 	bl	800f788 <iprintf>
  return;
 8004368:	bf00      	nop
 800436a:	bf00      	nop
}
 800436c:	371c      	adds	r7, #28
 800436e:	46bd      	mov	sp, r7
 8004370:	bd90      	pop	{r4, r7, pc}
 8004372:	bf00      	nop
 8004374:	2000077d 	.word	0x2000077d
 8004378:	2000077c 	.word	0x2000077c
 800437c:	20000008 	.word	0x20000008
 8004380:	200006f0 	.word	0x200006f0
 8004384:	08012a88 	.word	0x08012a88
 8004388:	08012ab0 	.word	0x08012ab0

0800438c <Connection_Interval_Update_Req>:
#endif /* L2CAP_REQUEST_NEW_CONN_PARAM != 0 */

#if (L2CAP_REQUEST_NEW_CONN_PARAM != 0)
static void Connection_Interval_Update_Req(void)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	af00      	add	r7, sp, #0
  if (BleApplicationContext.Device_Connection_Status != APP_BLE_FAST_ADV && BleApplicationContext.Device_Connection_Status != APP_BLE_IDLE)
 8004390:	4b08      	ldr	r3, [pc, #32]	; (80043b4 <Connection_Interval_Update_Req+0x28>)
 8004392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004396:	2b01      	cmp	r3, #1
 8004398:	d00a      	beq.n	80043b0 <Connection_Interval_Update_Req+0x24>
 800439a:	4b06      	ldr	r3, [pc, #24]	; (80043b4 <Connection_Interval_Update_Req+0x28>)
 800439c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d005      	beq.n	80043b0 <Connection_Interval_Update_Req+0x24>
  {
    BLE_SVC_L2CAP_Conn_Update(BleApplicationContext.BleApplicationContext_legacy.connectionHandle);
 80043a4:	4b03      	ldr	r3, [pc, #12]	; (80043b4 <Connection_Interval_Update_Req+0x28>)
 80043a6:	8adb      	ldrh	r3, [r3, #22]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff ff8b 	bl	80042c4 <BLE_SVC_L2CAP_Conn_Update>
  }

  return;
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
}
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	200006f0 	.word	0x200006f0

080043b8 <hci_notify_asynch_evt>:
 *
 * WRAP FUNCTIONS
 *
 *************************************************************/
void hci_notify_asynch_evt(void* p_Data)
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b082      	sub	sp, #8
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetTask(1 << CFG_TASK_HCI_ASYNCH_EVT_ID, CFG_SCH_PRIO_0);
 80043c0:	2100      	movs	r1, #0
 80043c2:	2004      	movs	r0, #4
 80043c4:	f00a fb98 	bl	800eaf8 <UTIL_SEQ_SetTask>

  return;
 80043c8:	bf00      	nop
}
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <hci_cmd_resp_release>:

void hci_cmd_resp_release(uint32_t Flag)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_SetEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80043d8:	2001      	movs	r0, #1
 80043da:	f00a fbf9 	bl	800ebd0 <UTIL_SEQ_SetEvt>

  return;
 80043de:	bf00      	nop
}
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <hci_cmd_resp_wait>:

void hci_cmd_resp_wait(uint32_t Timeout)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b082      	sub	sp, #8
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_WaitEvt(1 << CFG_IDLEEVT_HCI_CMD_EVT_RSP_ID);
 80043ee:	2001      	movs	r0, #1
 80043f0:	f00a fc0e 	bl	800ec10 <UTIL_SEQ_WaitEvt>

  return;
 80043f4:	bf00      	nop
}
 80043f6:	3708      	adds	r7, #8
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <BLE_UserEvtRx>:

static void BLE_UserEvtRx(void *p_Payload)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b084      	sub	sp, #16
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  SVCCTL_UserEvtFlowStatus_t svctl_return_status;
  tHCI_UserEvtRxParam *p_param;

  p_param = (tHCI_UserEvtRxParam *)p_Payload;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60fb      	str	r3, [r7, #12]

  svctl_return_status = SVCCTL_UserEvtRx((void *)&(p_param->pckt->evtserial));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	3308      	adds	r3, #8
 800440e:	4618      	mov	r0, r3
 8004410:	f009 ff76 	bl	800e300 <SVCCTL_UserEvtRx>
 8004414:	4603      	mov	r3, r0
 8004416:	72fb      	strb	r3, [r7, #11]
  if (svctl_return_status != SVCCTL_UserEvtFlowDisable)
 8004418:	7afb      	ldrb	r3, [r7, #11]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <BLE_UserEvtRx+0x2a>
  {
    p_param->status = HCI_TL_UserEventFlow_Enable;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
  else
  {
    p_param->status = HCI_TL_UserEventFlow_Disable;
  }

  return;
 8004424:	e003      	b.n	800442e <BLE_UserEvtRx+0x32>
    p_param->status = HCI_TL_UserEventFlow_Disable;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
  return;
 800442c:	bf00      	nop
}
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <BLE_StatusNot>:

static void BLE_StatusNot(HCI_TL_CmdStatus_t Status)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	4603      	mov	r3, r0
 800443c:	71fb      	strb	r3, [r7, #7]
  uint32_t task_id_list;
  switch (Status)
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d002      	beq.n	800444a <BLE_StatusNot+0x16>
 8004444:	2b01      	cmp	r3, #1
 8004446:	d006      	beq.n	8004456 <BLE_StatusNot+0x22>

    default:
      /* USER CODE BEGIN Status */

      /* USER CODE END Status */
      break;
 8004448:	e00b      	b.n	8004462 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 800444a:	233f      	movs	r3, #63	; 0x3f
 800444c:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_PauseTask(task_id_list);
 800444e:	68f8      	ldr	r0, [r7, #12]
 8004450:	f00a fb7e 	bl	800eb50 <UTIL_SEQ_PauseTask>
      break;
 8004454:	e005      	b.n	8004462 <BLE_StatusNot+0x2e>
      task_id_list = (1 << CFG_LAST_TASK_ID_WITH_HCICMD) - 1;
 8004456:	233f      	movs	r3, #63	; 0x3f
 8004458:	60fb      	str	r3, [r7, #12]
      UTIL_SEQ_ResumeTask(task_id_list);
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f00a fb98 	bl	800eb90 <UTIL_SEQ_ResumeTask>
      break;
 8004460:	bf00      	nop
  }

  return;
 8004462:	bf00      	nop
}
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
	...

0800446c <P2PS_STM_App_Notification>:
static void P2PS_APP_LED_BUTTON_context_Init(void);
/* USER CODE END PFP */

/* Functions Definition ------------------------------------------------------*/
void P2PS_STM_App_Notification(P2PS_STM_App_Notification_evt_t *pNotification)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_STM_App_Notification_1 */

/* USER CODE END P2PS_STM_App_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b03      	cmp	r3, #3
 800447a:	d01a      	beq.n	80044b2 <P2PS_STM_App_Notification+0x46>
 800447c:	2b03      	cmp	r3, #3
 800447e:	dc6b      	bgt.n	8004558 <P2PS_STM_App_Notification+0xec>
 8004480:	2b00      	cmp	r3, #0
 8004482:	d002      	beq.n	800448a <P2PS_STM_App_Notification+0x1e>
 8004484:	2b01      	cmp	r3, #1
 8004486:	d00a      	beq.n	800449e <P2PS_STM_App_Notification+0x32>

    default:
/* USER CODE BEGIN P2PS_STM_App_Notification_default */
      
/* USER CODE END P2PS_STM_App_Notification_default */
      break;
 8004488:	e066      	b.n	8004558 <P2PS_STM_App_Notification+0xec>
      P2P_Server_App_Context.Notification_Status = 1;
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <P2PS_STM_App_Notification+0xfc>)
 800448c:	2201      	movs	r2, #1
 800448e:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION ENABLED\n"); 
 8004490:	4836      	ldr	r0, [pc, #216]	; (800456c <P2PS_STM_App_Notification+0x100>)
 8004492:	f00b f9e7 	bl	800f864 <puts>
      APP_DBG_MSG(" \n\r");
 8004496:	4836      	ldr	r0, [pc, #216]	; (8004570 <P2PS_STM_App_Notification+0x104>)
 8004498:	f00b f976 	bl	800f788 <iprintf>
      break;
 800449c:	e05f      	b.n	800455e <P2PS_STM_App_Notification+0xf2>
      P2P_Server_App_Context.Notification_Status = 0;
 800449e:	4b32      	ldr	r3, [pc, #200]	; (8004568 <P2PS_STM_App_Notification+0xfc>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	701a      	strb	r2, [r3, #0]
      APP_DBG_MSG("-- P2P APPLICATION SERVER : NOTIFICATION DISABLED\n");
 80044a4:	4833      	ldr	r0, [pc, #204]	; (8004574 <P2PS_STM_App_Notification+0x108>)
 80044a6:	f00b f9dd 	bl	800f864 <puts>
      APP_DBG_MSG(" \n\r");
 80044aa:	4831      	ldr	r0, [pc, #196]	; (8004570 <P2PS_STM_App_Notification+0x104>)
 80044ac:	f00b f96c 	bl	800f788 <iprintf>
      break;
 80044b0:	e055      	b.n	800455e <P2PS_STM_App_Notification+0xf2>
      if(pNotification->DataTransfered.pPayload[0] == 0x00){ /* ALL Deviceselected - may be necessary as LB Routeur informs all connection */
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d123      	bne.n	8004504 <P2PS_STM_App_Notification+0x98>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	3301      	adds	r3, #1
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10b      	bne.n	80044e0 <P2PS_STM_App_Notification+0x74>
          BSP_LED_On(LED_BLUE);
 80044c8:	2000      	movs	r0, #0
 80044ca:	f000 fbcf 	bl	8004c6c <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 ON\n"); 
 80044ce:	482a      	ldr	r0, [pc, #168]	; (8004578 <P2PS_STM_App_Notification+0x10c>)
 80044d0:	f00b f9c8 	bl	800f864 <puts>
          APP_DBG_MSG(" \n\r");
 80044d4:	4826      	ldr	r0, [pc, #152]	; (8004570 <P2PS_STM_App_Notification+0x104>)
 80044d6:	f00b f957 	bl	800f788 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 80044da:	4b23      	ldr	r3, [pc, #140]	; (8004568 <P2PS_STM_App_Notification+0xfc>)
 80044dc:	2201      	movs	r2, #1
 80044de:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	3301      	adds	r3, #1
 80044e6:	781b      	ldrb	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <P2PS_STM_App_Notification+0x98>
          BSP_LED_Off(LED_BLUE);
 80044ec:	2000      	movs	r0, #0
 80044ee:	f000 fbd7 	bl	8004ca0 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER  : LED1 OFF\n"); 
 80044f2:	4822      	ldr	r0, [pc, #136]	; (800457c <P2PS_STM_App_Notification+0x110>)
 80044f4:	f00b f9b6 	bl	800f864 <puts>
          APP_DBG_MSG(" \n\r");
 80044f8:	481d      	ldr	r0, [pc, #116]	; (8004570 <P2PS_STM_App_Notification+0x104>)
 80044fa:	f00b f945 	bl	800f788 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 80044fe:	4b1a      	ldr	r3, [pc, #104]	; (8004568 <P2PS_STM_App_Notification+0xfc>)
 8004500:	2200      	movs	r2, #0
 8004502:	709a      	strb	r2, [r3, #2]
      if(pNotification->DataTransfered.pPayload[0] == 0x01){ /* end device 1 selected - may be necessary as LB Routeur informs all connection */
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d126      	bne.n	800455c <P2PS_STM_App_Notification+0xf0>
        if(pNotification->DataTransfered.pPayload[1] == 0x01)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	3301      	adds	r3, #1
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d10b      	bne.n	8004532 <P2PS_STM_App_Notification+0xc6>
          BSP_LED_On(LED_BLUE);
 800451a:	2000      	movs	r0, #0
 800451c:	f000 fba6 	bl	8004c6c <BSP_LED_On>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 ON\n"); 
 8004520:	4817      	ldr	r0, [pc, #92]	; (8004580 <P2PS_STM_App_Notification+0x114>)
 8004522:	f00b f99f 	bl	800f864 <puts>
          APP_DBG_MSG(" \n\r");
 8004526:	4812      	ldr	r0, [pc, #72]	; (8004570 <P2PS_STM_App_Notification+0x104>)
 8004528:	f00b f92e 	bl	800f788 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x01; /* LED1 ON */
 800452c:	4b0e      	ldr	r3, [pc, #56]	; (8004568 <P2PS_STM_App_Notification+0xfc>)
 800452e:	2201      	movs	r2, #1
 8004530:	709a      	strb	r2, [r3, #2]
        if(pNotification->DataTransfered.pPayload[1] == 0x00)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	3301      	adds	r3, #1
 8004538:	781b      	ldrb	r3, [r3, #0]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10e      	bne.n	800455c <P2PS_STM_App_Notification+0xf0>
          BSP_LED_Off(LED_BLUE);
 800453e:	2000      	movs	r0, #0
 8004540:	f000 fbae 	bl	8004ca0 <BSP_LED_Off>
          APP_DBG_MSG("-- P2P APPLICATION SERVER 1 : LED1 OFF\n"); 
 8004544:	480f      	ldr	r0, [pc, #60]	; (8004584 <P2PS_STM_App_Notification+0x118>)
 8004546:	f00b f98d 	bl	800f864 <puts>
          APP_DBG_MSG(" \n\r");
 800454a:	4809      	ldr	r0, [pc, #36]	; (8004570 <P2PS_STM_App_Notification+0x104>)
 800454c:	f00b f91c 	bl	800f788 <iprintf>
          P2P_Server_App_Context.LedControl.Led1=0x00; /* LED1 OFF */
 8004550:	4b05      	ldr	r3, [pc, #20]	; (8004568 <P2PS_STM_App_Notification+0xfc>)
 8004552:	2200      	movs	r2, #0
 8004554:	709a      	strb	r2, [r3, #2]
      break;
 8004556:	e001      	b.n	800455c <P2PS_STM_App_Notification+0xf0>
      break;
 8004558:	bf00      	nop
 800455a:	e000      	b.n	800455e <P2PS_STM_App_Notification+0xf2>
      break;
 800455c:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_STM_App_Notification_2 */

/* USER CODE END P2PS_STM_App_Notification_2 */
  return;
 800455e:	bf00      	nop
}
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000780 	.word	0x20000780
 800456c:	08012ae0 	.word	0x08012ae0
 8004570:	08012b14 	.word	0x08012b14
 8004574:	08012b18 	.word	0x08012b18
 8004578:	08012b4c 	.word	0x08012b4c
 800457c:	08012b74 	.word	0x08012b74
 8004580:	08012b9c 	.word	0x08012b9c
 8004584:	08012bc4 	.word	0x08012bc4

08004588 <P2PS_APP_Notification>:

void P2PS_APP_Notification(P2PS_APP_ConnHandle_Not_evt_t *pNotification)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b082      	sub	sp, #8
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN P2PS_APP_Notification_1 */

/* USER CODE END P2PS_APP_Notification_1 */
  switch(pNotification->P2P_Evt_Opcode)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <P2PS_APP_Notification+0x1c>
 8004598:	2b01      	cmp	r3, #1
 800459a:	d000      	beq.n	800459e <P2PS_APP_Notification+0x16>

    default:
/* USER CODE BEGIN P2PS_APP_Notification_default */

/* USER CODE END P2PS_APP_Notification_default */
      break;
 800459c:	e003      	b.n	80045a6 <P2PS_APP_Notification+0x1e>
       P2PS_APP_LED_BUTTON_context_Init();       
 800459e:	f000 f81b 	bl	80045d8 <P2PS_APP_LED_BUTTON_context_Init>
    break;
 80045a2:	e000      	b.n	80045a6 <P2PS_APP_Notification+0x1e>
    break;
 80045a4:	bf00      	nop
  }
/* USER CODE BEGIN P2PS_APP_Notification_2 */

/* USER CODE END P2PS_APP_Notification_2 */
  return;
 80045a6:	bf00      	nop
}
 80045a8:	3708      	adds	r7, #8
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
	...

080045b0 <P2PS_APP_Init>:

#include "TCS3430.h"


void P2PS_APP_Init(void)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN P2PS_APP_Init */
  UTIL_SEQ_RegTask( 1<< CFG_TASK_SW1_BUTTON_PUSHED_ID, UTIL_SEQ_RFU, P2PS_Send_Notification );
 80045b4:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <P2PS_APP_Init+0x20>)
 80045b6:	2100      	movs	r1, #0
 80045b8:	2008      	movs	r0, #8
 80045ba:	f00a fa7b 	bl	800eab4 <UTIL_SEQ_RegTask>

  /**
   * Initialize LedButton Service
   */
  P2P_Server_App_Context.Notification_Status=0; 
 80045be:	4b05      	ldr	r3, [pc, #20]	; (80045d4 <P2PS_APP_Init+0x24>)
 80045c0:	2200      	movs	r2, #0
 80045c2:	701a      	strb	r2, [r3, #0]
  P2PS_APP_LED_BUTTON_context_Init();
 80045c4:	f000 f808 	bl	80045d8 <P2PS_APP_LED_BUTTON_context_Init>

  Color_Init();
 80045c8:	f000 ffe0 	bl	800558c <Color_Init>
/* USER CODE END P2PS_APP_Init */
  return;
 80045cc:	bf00      	nop
}
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	0800461d 	.word	0x0800461d
 80045d4:	20000780 	.word	0x20000780

080045d8 <P2PS_APP_LED_BUTTON_context_Init>:

/* USER CODE BEGIN FD */
void P2PS_APP_LED_BUTTON_context_Init(void){
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  
  BSP_LED_Off(LED_BLUE);
 80045dc:	2000      	movs	r0, #0
 80045de:	f000 fb5f 	bl	8004ca0 <BSP_LED_Off>
  APP_DBG_MSG("LED BLUE OFF\n");
 80045e2:	4808      	ldr	r0, [pc, #32]	; (8004604 <P2PS_APP_LED_BUTTON_context_Init+0x2c>)
 80045e4:	f00b f93e 	bl	800f864 <puts>
  
  #if(P2P_SERVER1 != 0)
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x01; /* Device1 */
 80045e8:	4b07      	ldr	r3, [pc, #28]	; (8004608 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	705a      	strb	r2, [r3, #1]
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	709a      	strb	r2, [r3, #2]
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x01;/* Device1 */
 80045f4:	4b04      	ldr	r3, [pc, #16]	; (8004608 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	70da      	strb	r2, [r3, #3]
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 80045fa:	4b03      	ldr	r3, [pc, #12]	; (8004608 <P2PS_APP_LED_BUTTON_context_Init+0x30>)
 80045fc:	2200      	movs	r2, #0
 80045fe:	711a      	strb	r2, [r3, #4]
  P2P_Server_App_Context.LedControl.Device_Led_Selection=0x06; /* device6 */
  P2P_Server_App_Context.LedControl.Led1=0x00; /* led OFF */
  P2P_Server_App_Context.ButtonControl.Device_Button_Selection=0x06; /* Device6 */
  P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
#endif  
}
 8004600:	bf00      	nop
 8004602:	bd80      	pop	{r7, pc}
 8004604:	08012bec 	.word	0x08012bec
 8004608:	20000780 	.word	0x20000780

0800460c <P2PS_APP_SW1_Button_Action>:

void P2PS_APP_SW1_Button_Action(void)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	af00      	add	r7, sp, #0
  UTIL_SEQ_SetTask( 1<<CFG_TASK_SW1_BUTTON_PUSHED_ID, CFG_SCH_PRIO_0);
 8004610:	2100      	movs	r1, #0
 8004612:	2008      	movs	r0, #8
 8004614:	f00a fa70 	bl	800eaf8 <UTIL_SEQ_SetTask>

  return;
 8004618:	bf00      	nop
}
 800461a:	bd80      	pop	{r7, pc}

0800461c <P2PS_Send_Notification>:
 * LOCAL FUNCTIONS
 *
 *************************************************************/
/* USER CODE BEGIN FD_LOCAL_FUNCTIONS*/
void P2PS_Send_Notification(void)
{
 800461c:	b5b0      	push	{r4, r5, r7, lr}
 800461e:	b090      	sub	sp, #64	; 0x40
 8004620:	af00      	add	r7, sp, #0
 
  if(P2P_Server_App_Context.ButtonControl.ButtonStatus == 0x00){
 8004622:	4b24      	ldr	r3, [pc, #144]	; (80046b4 <P2PS_Send_Notification+0x98>)
 8004624:	791b      	ldrb	r3, [r3, #4]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d103      	bne.n	8004632 <P2PS_Send_Notification+0x16>
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x01;
 800462a:	4b22      	ldr	r3, [pc, #136]	; (80046b4 <P2PS_Send_Notification+0x98>)
 800462c:	2201      	movs	r2, #1
 800462e:	711a      	strb	r2, [r3, #4]
 8004630:	e002      	b.n	8004638 <P2PS_Send_Notification+0x1c>
  } else {
    P2P_Server_App_Context.ButtonControl.ButtonStatus=0x00;
 8004632:	4b20      	ldr	r3, [pc, #128]	; (80046b4 <P2PS_Send_Notification+0x98>)
 8004634:	2200      	movs	r2, #0
 8004636:	711a      	strb	r2, [r3, #4]
  }
  
  tcs3430_optics_val color_data;
  tcs3430 sensor = { {0}, {0} };
 8004638:	4b1f      	ldr	r3, [pc, #124]	; (80046b8 <P2PS_Send_Notification+0x9c>)
 800463a:	f107 0410 	add.w	r4, r7, #16
 800463e:	461d      	mov	r5, r3
 8004640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004644:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  TCS3430_print_reg(&sensor);
 800464c:	f107 0310 	add.w	r3, r7, #16
 8004650:	4618      	mov	r0, r3
 8004652:	f001 f833 	bl	80056bc <TCS3430_print_reg>
  color_data = get_raw_XYZ(&sensor);
 8004656:	463b      	mov	r3, r7
 8004658:	f107 0210 	add.w	r2, r7, #16
 800465c:	4611      	mov	r1, r2
 800465e:	4618      	mov	r0, r3
 8004660:	f000 fe7a 	bl	8005358 <get_raw_XYZ>
 8004664:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004668:	463c      	mov	r4, r7
 800466a:	6820      	ldr	r0, [r4, #0]
 800466c:	6861      	ldr	r1, [r4, #4]
 800466e:	68a2      	ldr	r2, [r4, #8]
 8004670:	c307      	stmia	r3!, {r0, r1, r2}
 8004672:	89a2      	ldrh	r2, [r4, #12]
 8004674:	801a      	strh	r2, [r3, #0]
  TCS3430_print_color(&color_data);
 8004676:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fecc 	bl	8005418 <TCS3430_print_color>

   if(P2P_Server_App_Context.Notification_Status){ 
 8004680:	4b0c      	ldr	r3, [pc, #48]	; (80046b4 <P2PS_Send_Notification+0x98>)
 8004682:	781b      	ldrb	r3, [r3, #0]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00e      	beq.n	80046a6 <P2PS_Send_Notification+0x8a>
    APP_DBG_MSG("-- P2P APPLICATION SERVER  : INFORM CLIENT BUTTON 1 PUSHED \n ");
 8004688:	480c      	ldr	r0, [pc, #48]	; (80046bc <P2PS_Send_Notification+0xa0>)
 800468a:	f00b f87d 	bl	800f788 <iprintf>
    APP_DBG_MSG(" \n\r");
 800468e:	480c      	ldr	r0, [pc, #48]	; (80046c0 <P2PS_Send_Notification+0xa4>)
 8004690:	f00b f87a 	bl	800f788 <iprintf>
    P2PS_STM_App_Update_Char(P2P_NOTIFY_CHAR_UUID, (uint8_t *)&color_data, 8);
 8004694:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004698:	2208      	movs	r2, #8
 800469a:	4619      	mov	r1, r3
 800469c:	f64f 6042 	movw	r0, #65090	; 0xfe42
 80046a0:	f008 fe56 	bl	800d350 <P2PS_STM_App_Update_Char>

   } else {
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
   }

  return;
 80046a4:	e003      	b.n	80046ae <P2PS_Send_Notification+0x92>
    APP_DBG_MSG("-- P2P APPLICATION SERVER : CAN'T INFORM CLIENT -  NOTIFICATION DISABLED\n "); 
 80046a6:	4807      	ldr	r0, [pc, #28]	; (80046c4 <P2PS_Send_Notification+0xa8>)
 80046a8:	f00b f86e 	bl	800f788 <iprintf>
  return;
 80046ac:	bf00      	nop
}
 80046ae:	3740      	adds	r7, #64	; 0x40
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bdb0      	pop	{r4, r5, r7, pc}
 80046b4:	20000780 	.word	0x20000780
 80046b8:	08012c88 	.word	0x08012c88
 80046bc:	08012bfc 	.word	0x08012bfc
 80046c0:	08012b14 	.word	0x08012b14
 80046c4:	08012c3c 	.word	0x08012c3c

080046c8 <LL_PWR_EnableBootC2>:
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR4, PWR_CR4_C2BOOT);
 80046cc:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <LL_PWR_EnableBootC2+0x1c>)
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4a04      	ldr	r2, [pc, #16]	; (80046e4 <LL_PWR_EnableBootC2+0x1c>)
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	60d3      	str	r3, [r2, #12]
}
 80046d8:	bf00      	nop
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
 80046e2:	bf00      	nop
 80046e4:	58000400 	.word	0x58000400

080046e8 <LL_C2_EXTI_EnableEvent_32_63>:
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->C2EMR2, ExtiLine);
 80046f0:	4b06      	ldr	r3, [pc, #24]	; (800470c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80046f2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80046f6:	4905      	ldr	r1, [pc, #20]	; (800470c <LL_C2_EXTI_EnableEvent_32_63+0x24>)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	f8c1 30d4 	str.w	r3, [r1, #212]	; 0xd4
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr
 800470c:	58000800 	.word	0x58000800

08004710 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800471a:	6a1a      	ldr	r2, [r3, #32]
 800471c:	4904      	ldr	r1, [pc, #16]	; (8004730 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	4313      	orrs	r3, r2
 8004722:	620b      	str	r3, [r1, #32]
}
 8004724:	bf00      	nop
 8004726:	370c      	adds	r7, #12
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	58000800 	.word	0x58000800

08004734 <LL_AHB3_GRP1_EnableClock>:
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB3ENR, Periphs);
 800473c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004742:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4313      	orrs	r3, r2
 800474a:	650b      	str	r3, [r1, #80]	; 0x50
  tmpreg = READ_BIT(RCC->AHB3ENR, Periphs);
 800474c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4013      	ands	r3, r2
 8004756:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004758:	68fb      	ldr	r3, [r7, #12]
}
 800475a:	bf00      	nop
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr

08004766 <LL_C2_AHB3_GRP1_EnableClock>:
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_IPCC
  *         @arg @ref LL_C2_AHB3_GRP1_PERIPH_FLASH
  * @retval None
  */
__STATIC_INLINE void LL_C2_AHB3_GRP1_EnableClock(uint32_t Periphs)
{
 8004766:	b480      	push	{r7}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->C2AHB3ENR, Periphs);
 800476e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004772:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 8004776:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3150 	str.w	r3, [r1, #336]	; 0x150
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->C2AHB3ENR, Periphs);
 8004782:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004786:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	4013      	ands	r3, r2
 800478e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004790:	68fb      	ldr	r3, [r7, #12]
}
 8004792:	bf00      	nop
 8004794:	3714      	adds	r7, #20
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <LL_C1_IPCC_EnableIT_TXF>:
{
 800479e:	b480      	push	{r7}
 80047a0:	b083      	sub	sp, #12
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_TXFIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	601a      	str	r2, [r3, #0]
}
 80047b2:	bf00      	nop
 80047b4:	370c      	adds	r7, #12
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr

080047be <LL_C1_IPCC_EnableIT_RXO>:
{
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
  SET_BIT(IPCCx->C1CR, IPCC_C1CR_RXOIE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f043 0201 	orr.w	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	370c      	adds	r7, #12
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_C1_IPCC_EnableTransmitChannel>:
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	041b      	lsls	r3, r3, #16
 80047f0:	43db      	mvns	r3, r3
 80047f2:	401a      	ands	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	605a      	str	r2, [r3, #4]
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_C1_IPCC_DisableTransmitChannel>:
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  SET_BIT(IPCCx->C1MR, Channel << IPCC_C1MR_CH1FM_Pos);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	041b      	lsls	r3, r3, #16
 8004816:	431a      	orrs	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <LL_C1_IPCC_EnableReceiveChannel>:
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(IPCCx->C1MR, Channel);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	43db      	mvns	r3, r3
 800483a:	401a      	ands	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	605a      	str	r2, [r3, #4]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <LL_C1_IPCC_ClearFlag_CHx>:
{
 800484c:	b480      	push	{r7}
 800484e:	b083      	sub	sp, #12
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	683a      	ldr	r2, [r7, #0]
 800485a:	609a      	str	r2, [r3, #8]
}
 800485c:	bf00      	nop
 800485e:	370c      	adds	r7, #12
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <LL_C1_IPCC_SetFlag_CHx>:
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
  WRITE_REG(IPCCx->C1SCR, Channel << IPCC_C1SCR_CH1S_Pos);
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	041a      	lsls	r2, r3, #16
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	609a      	str	r2, [r3, #8]
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <LL_C1_IPCC_IsActiveFlag_CHx>:
{
 8004886:	b480      	push	{r7}
 8004888:	b083      	sub	sp, #12
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C1TOC2SR, Channel) == (Channel)) ? 1UL : 0UL);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68da      	ldr	r2, [r3, #12]
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	4013      	ands	r3, r2
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d101      	bne.n	80048a2 <LL_C1_IPCC_IsActiveFlag_CHx+0x1c>
 800489e:	2301      	movs	r3, #1
 80048a0:	e000      	b.n	80048a4 <LL_C1_IPCC_IsActiveFlag_CHx+0x1e>
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <LL_C2_IPCC_IsActiveFlag_CHx>:
  *         @arg @ref LL_IPCC_CHANNEL_5
  *         @arg @ref LL_IPCC_CHANNEL_6
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_C2_IPCC_IsActiveFlag_CHx(IPCC_TypeDef  const *const IPCCx, uint32_t Channel)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(IPCCx->C2TOC1SR, Channel) == (Channel)) ? 1UL : 0UL);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69da      	ldr	r2, [r3, #28]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	4013      	ands	r3, r2
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d101      	bne.n	80048cc <LL_C2_IPCC_IsActiveFlag_CHx+0x1c>
 80048c8:	2301      	movs	r3, #1
 80048ca:	e000      	b.n	80048ce <LL_C2_IPCC_IsActiveFlag_CHx+0x1e>
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	370c      	adds	r7, #12
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <HW_IPCC_Rx_Handler>:

/******************************************************************************
 * INTERRUPT HANDLER
 ******************************************************************************/
void HW_IPCC_Rx_Handler( void )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	af00      	add	r7, sp, #0
  if (HW_IPCC_RX_PENDING( HW_IPCC_SYSTEM_EVENT_CHANNEL ))
 80048e0:	2102      	movs	r1, #2
 80048e2:	4818      	ldr	r0, [pc, #96]	; (8004944 <HW_IPCC_Rx_Handler+0x68>)
 80048e4:	f7ff ffe4 	bl	80048b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d008      	beq.n	8004900 <HW_IPCC_Rx_Handler+0x24>
 80048ee:	4b15      	ldr	r3, [pc, #84]	; (8004944 <HW_IPCC_Rx_Handler+0x68>)
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <HW_IPCC_Rx_Handler+0x24>
  {
      HW_IPCC_SYS_EvtHandler();
 80048fa:	f000 f8d5 	bl	8004aa8 <HW_IPCC_SYS_EvtHandler>
 80048fe:	e01e      	b.n	800493e <HW_IPCC_Rx_Handler+0x62>
  else if (HW_IPCC_RX_PENDING( HW_IPCC_ZIGBEE_M0_REQUEST_CHANNEL ))
  {
    HW_IPCC_ZIGBEE_StackM0RequestHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_RX_PENDING( HW_IPCC_BLE_EVENT_CHANNEL ))
 8004900:	2101      	movs	r1, #1
 8004902:	4810      	ldr	r0, [pc, #64]	; (8004944 <HW_IPCC_Rx_Handler+0x68>)
 8004904:	f7ff ffd4 	bl	80048b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d008      	beq.n	8004920 <HW_IPCC_Rx_Handler+0x44>
 800490e:	4b0d      	ldr	r3, [pc, #52]	; (8004944 <HW_IPCC_Rx_Handler+0x68>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d102      	bne.n	8004920 <HW_IPCC_Rx_Handler+0x44>
  {
    HW_IPCC_BLE_EvtHandler();
 800491a:	f000 f889 	bl	8004a30 <HW_IPCC_BLE_EvtHandler>
 800491e:	e00e      	b.n	800493e <HW_IPCC_Rx_Handler+0x62>
  }
  else if (HW_IPCC_RX_PENDING( HW_IPCC_TRACES_CHANNEL ))
 8004920:	2108      	movs	r1, #8
 8004922:	4808      	ldr	r0, [pc, #32]	; (8004944 <HW_IPCC_Rx_Handler+0x68>)
 8004924:	f7ff ffc4 	bl	80048b0 <LL_C2_IPCC_IsActiveFlag_CHx>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <HW_IPCC_Rx_Handler+0x64>
 800492e:	4b05      	ldr	r3, [pc, #20]	; (8004944 <HW_IPCC_Rx_Handler+0x68>)
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d102      	bne.n	8004940 <HW_IPCC_Rx_Handler+0x64>
  {
    HW_IPCC_TRACES_EvtHandler();
 800493a:	f000 f901 	bl	8004b40 <HW_IPCC_TRACES_EvtHandler>
  }

  return;
 800493e:	bf00      	nop
 8004940:	bf00      	nop
}
 8004942:	bd80      	pop	{r7, pc}
 8004944:	58000c00 	.word	0x58000c00

08004948 <HW_IPCC_Tx_Handler>:

void HW_IPCC_Tx_Handler( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	af00      	add	r7, sp, #0
  if (HW_IPCC_TX_PENDING( HW_IPCC_SYSTEM_CMD_RSP_CHANNEL ))
 800494c:	2102      	movs	r1, #2
 800494e:	4818      	ldr	r0, [pc, #96]	; (80049b0 <HW_IPCC_Tx_Handler+0x68>)
 8004950:	f7ff ff99 	bl	8004886 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d108      	bne.n	800496c <HW_IPCC_Tx_Handler+0x24>
 800495a:	4b15      	ldr	r3, [pc, #84]	; (80049b0 <HW_IPCC_Tx_Handler+0x68>)
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d102      	bne.n	800496c <HW_IPCC_Tx_Handler+0x24>
  {
    HW_IPCC_SYS_CmdEvtHandler();
 8004966:	f000 f893 	bl	8004a90 <HW_IPCC_SYS_CmdEvtHandler>
 800496a:	e01e      	b.n	80049aa <HW_IPCC_Tx_Handler+0x62>
  if (HW_IPCC_TX_PENDING( HW_IPCC_ZIGBEE_CMD_APPLI_CHANNEL ))
  {
      HW_IPCC_ZIGBEE_CmdEvtHandler();
  }
#endif /* ZIGBEE_WB */
  else if (HW_IPCC_TX_PENDING( HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ))
 800496c:	2108      	movs	r1, #8
 800496e:	4810      	ldr	r0, [pc, #64]	; (80049b0 <HW_IPCC_Tx_Handler+0x68>)
 8004970:	f7ff ff89 	bl	8004886 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004974:	4603      	mov	r3, r0
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <HW_IPCC_Tx_Handler+0x44>
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HW_IPCC_Tx_Handler+0x68>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <HW_IPCC_Tx_Handler+0x44>
  {
    HW_IPCC_MM_FreeBufHandler();
 8004986:	f000 f8bd 	bl	8004b04 <HW_IPCC_MM_FreeBufHandler>
 800498a:	e00e      	b.n	80049aa <HW_IPCC_Tx_Handler+0x62>
  }
  else if (HW_IPCC_TX_PENDING( HW_IPCC_HCI_ACL_DATA_CHANNEL ))
 800498c:	2120      	movs	r1, #32
 800498e:	4808      	ldr	r0, [pc, #32]	; (80049b0 <HW_IPCC_Tx_Handler+0x68>)
 8004990:	f7ff ff79 	bl	8004886 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004994:	4603      	mov	r3, r0
 8004996:	2b00      	cmp	r3, #0
 8004998:	d108      	bne.n	80049ac <HW_IPCC_Tx_Handler+0x64>
 800499a:	4b05      	ldr	r3, [pc, #20]	; (80049b0 <HW_IPCC_Tx_Handler+0x68>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d102      	bne.n	80049ac <HW_IPCC_Tx_Handler+0x64>
  {
    HW_IPCC_BLE_AclDataEvtHandler();
 80049a6:	f000 f84f 	bl	8004a48 <HW_IPCC_BLE_AclDataEvtHandler>
  }

  return;
 80049aa:	bf00      	nop
 80049ac:	bf00      	nop
}
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	58000c00 	.word	0x58000c00

080049b4 <HW_IPCC_Enable>:
/******************************************************************************
 * GENERAL
 ******************************************************************************/
void HW_IPCC_Enable( void )
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0
  /**
  * Such as IPCC IP available to the CPU2, it is required to keep the IPCC clock running
  * when FUS is running on CPU2 and CPU1 enters deep sleep mode
  */
  LL_C2_AHB3_GRP1_EnableClock(LL_C2_AHB3_GRP1_PERIPH_IPCC);
 80049b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049bc:	f7ff fed3 	bl	8004766 <LL_C2_AHB3_GRP1_EnableClock>

  /**
  * When the device is out of standby, it is required to use the EXTI mechanism to wakeup CPU2
  */
  LL_EXTI_EnableRisingTrig_32_63( LL_EXTI_LINE_41 );
 80049c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049c4:	f7ff fea4 	bl	8004710 <LL_EXTI_EnableRisingTrig_32_63>
  /* It is required to have at least a system clock cycle before a SEV after LL_EXTI_EnableRisingTrig_32_63() */
  LL_C2_EXTI_EnableEvent_32_63( LL_EXTI_LINE_41 );
 80049c8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049cc:	f7ff fe8c 	bl	80046e8 <LL_C2_EXTI_EnableEvent_32_63>
   * When the CPU2 receives that command, it waits for its event input to be set to restart the CPU2 firmware.
   * This is required because once C2BOOT has been set once, a clear/set on C2BOOT has no effect.
   * When SHCI_C2_Reinit( ) is not called, generating an event to the CPU2 does not have any effect
   * So, by default, the application shall both set the event flag and set the C2BOOT bit.
   */
  __SEV( );       /* Set the internal event flag and send an event to the CPU2 */
 80049d0:	bf40      	sev
  __WFE( );       /* Clear the internal event flag */
 80049d2:	bf20      	wfe
  LL_PWR_EnableBootC2( );
 80049d4:	f7ff fe78 	bl	80046c8 <LL_PWR_EnableBootC2>

  return;
 80049d8:	bf00      	nop
}
 80049da:	bd80      	pop	{r7, pc}

080049dc <HW_IPCC_Init>:

void HW_IPCC_Init( void )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  LL_AHB3_GRP1_EnableClock( LL_AHB3_GRP1_PERIPH_IPCC );
 80049e0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80049e4:	f7ff fea6 	bl	8004734 <LL_AHB3_GRP1_EnableClock>

  LL_C1_IPCC_EnableIT_RXO( IPCC );
 80049e8:	4806      	ldr	r0, [pc, #24]	; (8004a04 <HW_IPCC_Init+0x28>)
 80049ea:	f7ff fee8 	bl	80047be <LL_C1_IPCC_EnableIT_RXO>
  LL_C1_IPCC_EnableIT_TXF( IPCC );
 80049ee:	4805      	ldr	r0, [pc, #20]	; (8004a04 <HW_IPCC_Init+0x28>)
 80049f0:	f7ff fed5 	bl	800479e <LL_C1_IPCC_EnableIT_TXF>

  HAL_NVIC_EnableIRQ(IPCC_C1_RX_IRQn);
 80049f4:	202c      	movs	r0, #44	; 0x2c
 80049f6:	f001 f932 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(IPCC_C1_TX_IRQn);
 80049fa:	202d      	movs	r0, #45	; 0x2d
 80049fc:	f001 f92f 	bl	8005c5e <HAL_NVIC_EnableIRQ>

  return;
 8004a00:	bf00      	nop
}
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	58000c00 	.word	0x58000c00

08004a08 <HW_IPCC_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
void HW_IPCC_BLE_Init( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4802      	ldr	r0, [pc, #8]	; (8004a18 <HW_IPCC_BLE_Init+0x10>)
 8004a10:	f7ff ff0a 	bl	8004828 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004a14:	bf00      	nop
}
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	58000c00 	.word	0x58000c00

08004a1c <HW_IPCC_BLE_SendCmd>:

void HW_IPCC_BLE_SendCmd( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_BLE_CMD_CHANNEL );
 8004a20:	2101      	movs	r1, #1
 8004a22:	4802      	ldr	r0, [pc, #8]	; (8004a2c <HW_IPCC_BLE_SendCmd+0x10>)
 8004a24:	f7ff ff20 	bl	8004868 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004a28:	bf00      	nop
}
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	58000c00 	.word	0x58000c00

08004a30 <HW_IPCC_BLE_EvtHandler>:

static void HW_IPCC_BLE_EvtHandler( void )
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	af00      	add	r7, sp, #0
  HW_IPCC_BLE_RxEvtNot();
 8004a34:	f009 fd48 	bl	800e4c8 <HW_IPCC_BLE_RxEvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_BLE_EVENT_CHANNEL );
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4802      	ldr	r0, [pc, #8]	; (8004a44 <HW_IPCC_BLE_EvtHandler+0x14>)
 8004a3c:	f7ff ff06 	bl	800484c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004a40:	bf00      	nop
}
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	58000c00 	.word	0x58000c00

08004a48 <HW_IPCC_BLE_AclDataEvtHandler>:

  return;
}

static void HW_IPCC_BLE_AclDataEvtHandler( void )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_HCI_ACL_DATA_CHANNEL );
 8004a4c:	2120      	movs	r1, #32
 8004a4e:	4803      	ldr	r0, [pc, #12]	; (8004a5c <HW_IPCC_BLE_AclDataEvtHandler+0x14>)
 8004a50:	f7ff fed8 	bl	8004804 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_BLE_AclDataAckNot();
 8004a54:	f009 fd68 	bl	800e528 <HW_IPCC_BLE_AclDataAckNot>

  return;
 8004a58:	bf00      	nop
}
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	58000c00 	.word	0x58000c00

08004a60 <HW_IPCC_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
void HW_IPCC_SYS_Init( void )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004a64:	2102      	movs	r1, #2
 8004a66:	4802      	ldr	r0, [pc, #8]	; (8004a70 <HW_IPCC_SYS_Init+0x10>)
 8004a68:	f7ff fede 	bl	8004828 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004a6c:	bf00      	nop
}
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	58000c00 	.word	0x58000c00

08004a74 <HW_IPCC_SYS_SendCmd>:

void HW_IPCC_SYS_SendCmd( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004a78:	2102      	movs	r1, #2
 8004a7a:	4804      	ldr	r0, [pc, #16]	; (8004a8c <HW_IPCC_SYS_SendCmd+0x18>)
 8004a7c:	f7ff fef4 	bl	8004868 <LL_C1_IPCC_SetFlag_CHx>
  LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004a80:	2102      	movs	r1, #2
 8004a82:	4802      	ldr	r0, [pc, #8]	; (8004a8c <HW_IPCC_SYS_SendCmd+0x18>)
 8004a84:	f7ff feab 	bl	80047de <LL_C1_IPCC_EnableTransmitChannel>

  return;
 8004a88:	bf00      	nop
}
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	58000c00 	.word	0x58000c00

08004a90 <HW_IPCC_SYS_CmdEvtHandler>:

static void HW_IPCC_SYS_CmdEvtHandler( void )
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_SYSTEM_CMD_RSP_CHANNEL );
 8004a94:	2102      	movs	r1, #2
 8004a96:	4803      	ldr	r0, [pc, #12]	; (8004aa4 <HW_IPCC_SYS_CmdEvtHandler+0x14>)
 8004a98:	f7ff feb4 	bl	8004804 <LL_C1_IPCC_DisableTransmitChannel>

  HW_IPCC_SYS_CmdEvtNot();
 8004a9c:	f009 fd94 	bl	800e5c8 <HW_IPCC_SYS_CmdEvtNot>

  return;
 8004aa0:	bf00      	nop
}
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	58000c00 	.word	0x58000c00

08004aa8 <HW_IPCC_SYS_EvtHandler>:

static void HW_IPCC_SYS_EvtHandler( void )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	af00      	add	r7, sp, #0
  HW_IPCC_SYS_EvtNot();
 8004aac:	f009 fda2 	bl	800e5f4 <HW_IPCC_SYS_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_SYSTEM_EVENT_CHANNEL );
 8004ab0:	2102      	movs	r1, #2
 8004ab2:	4802      	ldr	r0, [pc, #8]	; (8004abc <HW_IPCC_SYS_EvtHandler+0x14>)
 8004ab4:	f7ff feca 	bl	800484c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004ab8:	bf00      	nop
}
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	58000c00 	.word	0x58000c00

08004ac0 <HW_IPCC_MM_SendFreeBuf>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void HW_IPCC_MM_SendFreeBuf( void (*cb)( void ) )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  if ( LL_C1_IPCC_IsActiveFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL ) )
 8004ac8:	2108      	movs	r1, #8
 8004aca:	480c      	ldr	r0, [pc, #48]	; (8004afc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004acc:	f7ff fedb 	bl	8004886 <LL_C1_IPCC_IsActiveFlag_CHx>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d007      	beq.n	8004ae6 <HW_IPCC_MM_SendFreeBuf+0x26>
  {
    FreeBufCb = cb;
 8004ad6:	4a0a      	ldr	r2, [pc, #40]	; (8004b00 <HW_IPCC_MM_SendFreeBuf+0x40>)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6013      	str	r3, [r2, #0]
    LL_C1_IPCC_EnableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004adc:	2108      	movs	r1, #8
 8004ade:	4807      	ldr	r0, [pc, #28]	; (8004afc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004ae0:	f7ff fe7d 	bl	80047de <LL_C1_IPCC_EnableTransmitChannel>
    cb();

    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
  }

  return;
 8004ae4:	e006      	b.n	8004af4 <HW_IPCC_MM_SendFreeBuf+0x34>
    cb();
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	4798      	blx	r3
    LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004aea:	2108      	movs	r1, #8
 8004aec:	4803      	ldr	r0, [pc, #12]	; (8004afc <HW_IPCC_MM_SendFreeBuf+0x3c>)
 8004aee:	f7ff febb 	bl	8004868 <LL_C1_IPCC_SetFlag_CHx>
  return;
 8004af2:	bf00      	nop
}
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	58000c00 	.word	0x58000c00
 8004b00:	20000788 	.word	0x20000788

08004b04 <HW_IPCC_MM_FreeBufHandler>:

static void HW_IPCC_MM_FreeBufHandler( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	af00      	add	r7, sp, #0
  LL_C1_IPCC_DisableTransmitChannel( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004b08:	2108      	movs	r1, #8
 8004b0a:	4806      	ldr	r0, [pc, #24]	; (8004b24 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004b0c:	f7ff fe7a 	bl	8004804 <LL_C1_IPCC_DisableTransmitChannel>

  FreeBufCb();
 8004b10:	4b05      	ldr	r3, [pc, #20]	; (8004b28 <HW_IPCC_MM_FreeBufHandler+0x24>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4798      	blx	r3

  LL_C1_IPCC_SetFlag_CHx( IPCC, HW_IPCC_MM_RELEASE_BUFFER_CHANNEL );
 8004b16:	2108      	movs	r1, #8
 8004b18:	4802      	ldr	r0, [pc, #8]	; (8004b24 <HW_IPCC_MM_FreeBufHandler+0x20>)
 8004b1a:	f7ff fea5 	bl	8004868 <LL_C1_IPCC_SetFlag_CHx>

  return;
 8004b1e:	bf00      	nop
}
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	58000c00 	.word	0x58000c00
 8004b28:	20000788 	.word	0x20000788

08004b2c <HW_IPCC_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void HW_IPCC_TRACES_Init( void )
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	af00      	add	r7, sp, #0
  LL_C1_IPCC_EnableReceiveChannel( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004b30:	2108      	movs	r1, #8
 8004b32:	4802      	ldr	r0, [pc, #8]	; (8004b3c <HW_IPCC_TRACES_Init+0x10>)
 8004b34:	f7ff fe78 	bl	8004828 <LL_C1_IPCC_EnableReceiveChannel>

  return;
 8004b38:	bf00      	nop
}
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	58000c00 	.word	0x58000c00

08004b40 <HW_IPCC_TRACES_EvtHandler>:

static void HW_IPCC_TRACES_EvtHandler( void )
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  HW_IPCC_TRACES_EvtNot();
 8004b44:	f009 fdfe 	bl	800e744 <HW_IPCC_TRACES_EvtNot>

  LL_C1_IPCC_ClearFlag_CHx( IPCC, HW_IPCC_TRACES_CHANNEL );
 8004b48:	2108      	movs	r1, #8
 8004b4a:	4802      	ldr	r0, [pc, #8]	; (8004b54 <HW_IPCC_TRACES_EvtHandler+0x14>)
 8004b4c:	f7ff fe7e 	bl	800484c <LL_C1_IPCC_ClearFlag_CHx>

  return;
 8004b50:	bf00      	nop
}
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	58000c00 	.word	0x58000c00

08004b58 <CopyDataInit>:
  bl LoopCopyDataInit
.endm

.section  .text.data_initializers
CopyDataInit:
  ldr r4, [r2, r3]
 8004b58:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b5a:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b5c:	3304      	adds	r3, #4

08004b5e <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b5e:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b60:	428c      	cmp	r4, r1
  bcc  CopyDataInit
 8004b62:	d3f9      	bcc.n	8004b58 <CopyDataInit>
  bx lr
 8004b64:	4770      	bx	lr

08004b66 <FillZerobss>:

FillZerobss:
  str  r3, [r0]
 8004b66:	6003      	str	r3, [r0, #0]
  adds r0, r0, #4
 8004b68:	3004      	adds	r0, #4

08004b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r0, r1
 8004b6a:	4288      	cmp	r0, r1
  bcc FillZerobss
 8004b6c:	d3fb      	bcc.n	8004b66 <FillZerobss>
  bx lr
 8004b6e:	4770      	bx	lr

08004b70 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004b70:	480c      	ldr	r0, [pc, #48]	; (8004ba4 <LoopForever+0x4>)
  mov   sp, r0          /* set stack pointer */
 8004b72:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004b74:	f000 fe0a 	bl	800578c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  INIT_DATA _sdata, _edata, _sidata
 8004b78:	480b      	ldr	r0, [pc, #44]	; (8004ba8 <LoopForever+0x8>)
 8004b7a:	490c      	ldr	r1, [pc, #48]	; (8004bac <LoopForever+0xc>)
 8004b7c:	4a0c      	ldr	r2, [pc, #48]	; (8004bb0 <LoopForever+0x10>)
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f7ff ffed 	bl	8004b5e <LoopCopyDataInit>

/* Zero fill the bss segments. */
  INIT_BSS _sbss, _ebss
 8004b84:	480b      	ldr	r0, [pc, #44]	; (8004bb4 <LoopForever+0x14>)
 8004b86:	490c      	ldr	r1, [pc, #48]	; (8004bb8 <LoopForever+0x18>)
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f7ff ffee 	bl	8004b6a <LoopFillZerobss>
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004b8e:	480b      	ldr	r0, [pc, #44]	; (8004bbc <LoopForever+0x1c>)
 8004b90:	490b      	ldr	r1, [pc, #44]	; (8004bc0 <LoopForever+0x20>)
 8004b92:	2300      	movs	r3, #0
 8004b94:	f7ff ffe9 	bl	8004b6a <LoopFillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004b98:	f00a ff9c 	bl	800fad4 <__libc_init_array>
/* Call the application s entry point.*/
	bl	main
 8004b9c:	f7fd ff1c 	bl	80029d8 <main>

08004ba0 <LoopForever>:

LoopForever:
  b LoopForever
 8004ba0:	e7fe      	b.n	8004ba0 <LoopForever>
 8004ba2:	0000      	.short	0x0000
  ldr   r0, =_estack
 8004ba4:	20030000 	.word	0x20030000
  INIT_DATA _sdata, _edata, _sidata
 8004ba8:	20000008 	.word	0x20000008
 8004bac:	20000214 	.word	0x20000214
 8004bb0:	080133f4 	.word	0x080133f4
  INIT_BSS _sbss, _ebss
 8004bb4:	20000250 	.word	0x20000250
 8004bb8:	20001a4c 	.word	0x20001a4c
  INIT_BSS _sMB_MEM2, _eMB_MEM2
 8004bbc:	200301e4 	.word	0x200301e4
 8004bc0:	20030a67 	.word	0x20030a67

08004bc4 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bc4:	e7fe      	b.n	8004bc4 <ADC1_IRQHandler>

08004bc6 <LL_AHB2_GRP1_EnableClock>:
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004bce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004bd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004bd4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004bde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004be2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4013      	ands	r3, r2
 8004be8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004bea:	68fb      	ldr	r3, [r7, #12]
}
 8004bec:	bf00      	nop
 8004bee:	3714      	adds	r7, #20
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf6:	4770      	bx	lr

08004bf8 <BSP_LED_Init>:
  *            @arg LED2
  *            @arg LED3
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	4603      	mov	r3, r0
 8004c00:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpioinitstruct = {0};
 8004c02:	f107 030c 	add.w	r3, r7, #12
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]
 8004c0a:	605a      	str	r2, [r3, #4]
 8004c0c:	609a      	str	r2, [r3, #8]
 8004c0e:	60da      	str	r2, [r3, #12]
 8004c10:	611a      	str	r2, [r3, #16]
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8004c12:	2002      	movs	r0, #2
 8004c14:	f7ff ffd7 	bl	8004bc6 <LL_AHB2_GRP1_EnableClock>

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = GPIO_PIN[Led];
 8004c18:	79fb      	ldrb	r3, [r7, #7]
 8004c1a:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <BSP_LED_Init+0x6c>)
 8004c1c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c20:	60fb      	str	r3, [r7, #12]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c22:	2301      	movs	r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8004c26:	2300      	movs	r3, #0
 8004c28:	617b      	str	r3, [r7, #20]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	61bb      	str	r3, [r7, #24]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpioinitstruct);
 8004c2e:	79fb      	ldrb	r3, [r7, #7]
 8004c30:	4a0d      	ldr	r2, [pc, #52]	; (8004c68 <BSP_LED_Init+0x70>)
 8004c32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c36:	f107 020c 	add.w	r2, r7, #12
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f001 fbe7 	bl	8006410 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET);
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	4a08      	ldr	r2, [pc, #32]	; (8004c68 <BSP_LED_Init+0x70>)
 8004c46:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c4a:	79fb      	ldrb	r3, [r7, #7]
 8004c4c:	4a05      	ldr	r2, [pc, #20]	; (8004c64 <BSP_LED_Init+0x6c>)
 8004c4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c52:	2200      	movs	r2, #0
 8004c54:	4619      	mov	r1, r3
 8004c56:	f001 fd4b 	bl	80066f0 <HAL_GPIO_WritePin>
}
 8004c5a:	bf00      	nop
 8004c5c:	3720      	adds	r7, #32
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	08012f84 	.word	0x08012f84
 8004c68:	20000020 	.word	0x20000020

08004c6c <BSP_LED_On>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b082      	sub	sp, #8
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	4603      	mov	r3, r0
 8004c74:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8004c76:	79fb      	ldrb	r3, [r7, #7]
 8004c78:	4a07      	ldr	r2, [pc, #28]	; (8004c98 <BSP_LED_On+0x2c>)
 8004c7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004c7e:	79fb      	ldrb	r3, [r7, #7]
 8004c80:	4a06      	ldr	r2, [pc, #24]	; (8004c9c <BSP_LED_On+0x30>)
 8004c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c86:	2201      	movs	r2, #1
 8004c88:	4619      	mov	r1, r3
 8004c8a:	f001 fd31 	bl	80066f0 <HAL_GPIO_WritePin>
}
 8004c8e:	bf00      	nop
 8004c90:	3708      	adds	r7, #8
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20000020 	.word	0x20000020
 8004c9c:	08012f84 	.word	0x08012f84

08004ca0 <BSP_LED_Off>:
  *     @arg LED2
  *     @arg LED3
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8004caa:	79fb      	ldrb	r3, [r7, #7]
 8004cac:	4a07      	ldr	r2, [pc, #28]	; (8004ccc <BSP_LED_Off+0x2c>)
 8004cae:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004cb2:	79fb      	ldrb	r3, [r7, #7]
 8004cb4:	4a06      	ldr	r2, [pc, #24]	; (8004cd0 <BSP_LED_Off+0x30>)
 8004cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	f001 fd17 	bl	80066f0 <HAL_GPIO_WritePin>
}
 8004cc2:	bf00      	nop
 8004cc4:	3708      	adds	r7, #8
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	20000020 	.word	0x20000020
 8004cd0:	08012f84 	.word	0x08012f84

08004cd4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	460a      	mov	r2, r1
 8004cde:	71fb      	strb	r3, [r7, #7]
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpioinitstruct = {0};
 8004ce4:	f107 030c 	add.w	r3, r7, #12
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
 8004cec:	605a      	str	r2, [r3, #4]
 8004cee:	609a      	str	r2, [r3, #8]
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	611a      	str	r2, [r3, #16]
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d103      	bne.n	8004d02 <BSP_PB_Init+0x2e>
 8004cfa:	2004      	movs	r0, #4
 8004cfc:	f7ff ff63 	bl	8004bc6 <LL_AHB2_GRP1_EnableClock>
 8004d00:	e00c      	b.n	8004d1c <BSP_PB_Init+0x48>
 8004d02:	79fb      	ldrb	r3, [r7, #7]
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d103      	bne.n	8004d10 <BSP_PB_Init+0x3c>
 8004d08:	2008      	movs	r0, #8
 8004d0a:	f7ff ff5c 	bl	8004bc6 <LL_AHB2_GRP1_EnableClock>
 8004d0e:	e005      	b.n	8004d1c <BSP_PB_Init+0x48>
 8004d10:	79fb      	ldrb	r3, [r7, #7]
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	d102      	bne.n	8004d1c <BSP_PB_Init+0x48>
 8004d16:	2008      	movs	r0, #8
 8004d18:	f7ff ff55 	bl	8004bc6 <LL_AHB2_GRP1_EnableClock>
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8004d1c:	79bb      	ldrb	r3, [r7, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d117      	bne.n	8004d52 <BSP_PB_Init+0x7e>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <BSP_PB_Init+0xd4>)
 8004d26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d2a:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	613b      	str	r3, [r7, #16]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004d30:	2301      	movs	r3, #1
 8004d32:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004d34:	2302      	movs	r3, #2
 8004d36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	4a1c      	ldr	r2, [pc, #112]	; (8004dac <BSP_PB_Init+0xd8>)
 8004d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d40:	f107 020c 	add.w	r2, r7, #12
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 fb62 	bl	8006410 <HAL_GPIO_Init>
    
    /* Wait Button pin startup stability */
    HAL_Delay(1);
 8004d4c:	2001      	movs	r0, #1
 8004d4e:	f7fc fd6f 	bl	8001830 <HAL_Delay>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8004d52:	79bb      	ldrb	r3, [r7, #6]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d123      	bne.n	8004da0 <BSP_PB_Init+0xcc>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Pin = BUTTON_PIN[Button];
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	4a13      	ldr	r2, [pc, #76]	; (8004da8 <BSP_PB_Init+0xd4>)
 8004d5c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d60:	60fb      	str	r3, [r7, #12]
    gpioinitstruct.Pull = GPIO_PULLUP;
 8004d62:	2301      	movs	r3, #1
 8004d64:	617b      	str	r3, [r7, #20]
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING; 
 8004d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8004d6a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 8004d6c:	79fb      	ldrb	r3, [r7, #7]
 8004d6e:	4a0f      	ldr	r2, [pc, #60]	; (8004dac <BSP_PB_Init+0xd8>)
 8004d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d74:	f107 020c 	add.w	r2, r7, #12
 8004d78:	4611      	mov	r1, r2
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f001 fb48 	bl	8006410 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	4a0b      	ldr	r2, [pc, #44]	; (8004db0 <BSP_PB_Init+0xdc>)
 8004d84:	5cd3      	ldrb	r3, [r2, r3]
 8004d86:	b25b      	sxtb	r3, r3
 8004d88:	2200      	movs	r2, #0
 8004d8a:	210f      	movs	r1, #15
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 ff4c 	bl	8005c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8004d92:	79fb      	ldrb	r3, [r7, #7]
 8004d94:	4a06      	ldr	r2, [pc, #24]	; (8004db0 <BSP_PB_Init+0xdc>)
 8004d96:	5cd3      	ldrb	r3, [r2, r3]
 8004d98:	b25b      	sxtb	r3, r3
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 ff5f 	bl	8005c5e <HAL_NVIC_EnableIRQ>
  }
}
 8004da0:	bf00      	nop
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	08012f8c 	.word	0x08012f8c
 8004dac:	2000002c 	.word	0x2000002c
 8004db0:	08012f94 	.word	0x08012f94

08004db4 <get_data>:
tcs3430_optics_val XYZ_data;
int32_t ret;
int16_t interruptrange = 255;

int32_t get_data(uint8_t *reginfo)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b09c      	sub	sp, #112	; 0x70
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
     * ---------
     * INPUT: reginfo[24] - the array used to store all the values from registers, it should have size of 35
     * RETURN: 0 - success
     *         -1 - error
     */
	int addr[] = {0x80, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, 0x8C,
 8004dbc:	4a16      	ldr	r2, [pc, #88]	; (8004e18 <get_data+0x64>)
 8004dbe:	f107 0308 	add.w	r3, r7, #8
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	2260      	movs	r2, #96	; 0x60
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f00a feab 	bl	800fb22 <memcpy>
				0x98, 0x99, 0x9A, 0x9B, 0x9F, 0xAB, 0xD6, 0xDD};

    // TODO ADD ERROR CHECKING
	HAL_StatusTypeDef ret;

	for(int i = 0; i < 25; i++)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dd0:	e017      	b.n	8004e02 <get_data+0x4e>
	{
		ret = BSP_I2C1_ReadReg(TCS3430_ADDR, addr[i], reginfo+i, 1);
 8004dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	3370      	adds	r3, #112	; 0x70
 8004dd8:	443b      	add	r3, r7
 8004dda:	f853 3c68 	ldr.w	r3, [r3, #-104]
 8004dde:	b299      	uxth	r1, r3
 8004de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	441a      	add	r2, r3
 8004de6:	2301      	movs	r3, #1
 8004de8:	2072      	movs	r0, #114	; 0x72
 8004dea:	f7fe fac5 	bl	8003378 <BSP_I2C1_ReadReg>
 8004dee:	4603      	mov	r3, r0
 8004df0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if(ret != BSP_ERROR_NONE) break;
 8004df4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d106      	bne.n	8004e0a <get_data+0x56>
	for(int i = 0; i < 25; i++)
 8004dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004dfe:	3301      	adds	r3, #1
 8004e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e04:	2b18      	cmp	r3, #24
 8004e06:	dde4      	ble.n	8004dd2 <get_data+0x1e>
 8004e08:	e000      	b.n	8004e0c <get_data+0x58>
		if(ret != BSP_ERROR_NONE) break;
 8004e0a:	bf00      	nop
	}
	return ret;
 8004e0c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3770      	adds	r7, #112	; 0x70
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	08012ca8 	.word	0x08012ca8

08004e1c <set_atime>:

int32_t set_atime(uint8_t *reginfo, int cycle_No)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b082      	sub	sp, #8
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
	 *        cycle_No - integration cycle numbers, must be between 1-256
	 * RETURN: 0 - success
	 *         -1 - error
	 */

	if ( (cycle_No <= 256) && (cycle_No >= 1) )
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e2c:	dc16      	bgt.n	8004e5c <set_atime+0x40>
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dd13      	ble.n	8004e5c <set_atime+0x40>
	{
		reginfo[1] = cycle_No - 1;
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	b2da      	uxtb	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	3a01      	subs	r2, #1
 8004e3e:	b2d2      	uxtb	r2, r2
 8004e40:	701a      	strb	r2, [r3, #0]
	}
	else{ return -1; }

	// TODO ADD ERROR CHECKING
	//set_reg(TCS3430_ADDR, ATIME_ADDR, reginfo[1]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ATIME_ADDR, reginfo+1, 1);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	2301      	movs	r3, #1
 8004e48:	2181      	movs	r1, #129	; 0x81
 8004e4a:	2072      	movs	r0, #114	; 0x72
 8004e4c:	f7fe fa62 	bl	8003314 <BSP_I2C1_WriteReg>
 8004e50:	4603      	mov	r3, r0
 8004e52:	4a05      	ldr	r2, [pc, #20]	; (8004e68 <set_atime+0x4c>)
 8004e54:	6013      	str	r3, [r2, #0]
	return ret;
 8004e56:	4b04      	ldr	r3, [pc, #16]	; (8004e68 <set_atime+0x4c>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	e001      	b.n	8004e60 <set_atime+0x44>
	else{ return -1; }
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3708      	adds	r7, #8
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	200007bc 	.word	0x200007bc

08004e6c <set_cfg0>:

int32_t set_cfg0(uint8_t *reginfo, uint8_t mode)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	460b      	mov	r3, r1
 8004e76:	70fb      	strb	r3, [r7, #3]
	 * INPUT: reginfo[24] - current values of all registers
	 *        cycle_No - integration cycle numbers, must be between 1-256
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 8004e78:	78fb      	ldrb	r3, [r7, #3]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d009      	beq.n	8004e92 <set_cfg0+0x26>
	{
		reginfo[8] |= 0x04;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	3308      	adds	r3, #8
 8004e82:	781a      	ldrb	r2, [r3, #0]
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	3308      	adds	r3, #8
 8004e88:	f042 0204 	orr.w	r2, r2, #4
 8004e8c:	b2d2      	uxtb	r2, r2
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e008      	b.n	8004ea4 <set_cfg0+0x38>
	}
	else
	{
		reginfo[8] &= 0x80;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	3308      	adds	r3, #8
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8004ea0:	b2d2      	uxtb	r2, r2
 8004ea2:	701a      	strb	r2, [r3, #0]
	}
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG0_ADDR, reginfo+8, 1);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f103 0208 	add.w	r2, r3, #8
 8004eaa:	2301      	movs	r3, #1
 8004eac:	218d      	movs	r1, #141	; 0x8d
 8004eae:	2072      	movs	r0, #114	; 0x72
 8004eb0:	f7fe fa30 	bl	8003314 <BSP_I2C1_WriteReg>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4a03      	ldr	r2, [pc, #12]	; (8004ec4 <set_cfg0+0x58>)
 8004eb8:	6013      	str	r3, [r2, #0]
}
 8004eba:	bf00      	nop
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}
 8004ec4:	200007bc 	.word	0x200007bc

08004ec8 <set_cfg1>:

int32_t set_cfg1(uint8_t *reginfo, uint8_t ALS_Mul, uint8_t again_flag)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	460b      	mov	r3, r1
 8004ed2:	70fb      	strb	r3, [r7, #3]
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	70bb      	strb	r3, [r7, #2]
	 *        ALS_Mul - Sets the CH3 input. Default = 0 (X Channel). Set to 1 to read IR2.
	 *        again_flag - [x1 - gain of 1, x4 - gain of 4, x16 - gain of 16, x64 - gain of 64]
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if (ALS_Mul) { reginfo[9] = reginfo[9] | 0x08; }
 8004ed8:	78fb      	ldrb	r3, [r7, #3]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <set_cfg1+0x2a>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3309      	adds	r3, #9
 8004ee2:	781a      	ldrb	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3309      	adds	r3, #9
 8004ee8:	f042 0208 	orr.w	r2, r2, #8
 8004eec:	b2d2      	uxtb	r2, r2
 8004eee:	701a      	strb	r2, [r3, #0]
 8004ef0:	e008      	b.n	8004f04 <set_cfg1+0x3c>
	else { reginfo[9] = reginfo[9] & 0xF7; }
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3309      	adds	r3, #9
 8004ef6:	781a      	ldrb	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	3309      	adds	r3, #9
 8004efc:	f022 0208 	bic.w	r2, r2, #8
 8004f00:	b2d2      	uxtb	r2, r2
 8004f02:	701a      	strb	r2, [r3, #0]

	switch (again_flag)
 8004f04:	78bb      	ldrb	r3, [r7, #2]
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d03a      	beq.n	8004f80 <set_cfg1+0xb8>
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	dc42      	bgt.n	8004f94 <set_cfg1+0xcc>
 8004f0e:	2b10      	cmp	r3, #16
 8004f10:	d023      	beq.n	8004f5a <set_cfg1+0x92>
 8004f12:	2b10      	cmp	r3, #16
 8004f14:	dc3e      	bgt.n	8004f94 <set_cfg1+0xcc>
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d002      	beq.n	8004f20 <set_cfg1+0x58>
 8004f1a:	2b04      	cmp	r3, #4
 8004f1c:	d00a      	beq.n	8004f34 <set_cfg1+0x6c>
 8004f1e:	e039      	b.n	8004f94 <set_cfg1+0xcc>
	{
	case 1:
		reginfo[9] = reginfo[9] & 0xFC;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	3309      	adds	r3, #9
 8004f24:	781a      	ldrb	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	3309      	adds	r3, #9
 8004f2a:	f022 0203 	bic.w	r2, r2, #3
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	701a      	strb	r2, [r3, #0]
		break;
 8004f32:	e041      	b.n	8004fb8 <set_cfg1+0xf0>
	case 4:
		reginfo[9] = reginfo[9] & 0xFD;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	3309      	adds	r3, #9
 8004f38:	781a      	ldrb	r2, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3309      	adds	r3, #9
 8004f3e:	f022 0202 	bic.w	r2, r2, #2
 8004f42:	b2d2      	uxtb	r2, r2
 8004f44:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x01;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	3309      	adds	r3, #9
 8004f4a:	781a      	ldrb	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3309      	adds	r3, #9
 8004f50:	f042 0201 	orr.w	r2, r2, #1
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	701a      	strb	r2, [r3, #0]
		break;
 8004f58:	e02e      	b.n	8004fb8 <set_cfg1+0xf0>
	case 16:
		reginfo[9] = reginfo[9] & 0xFE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3309      	adds	r3, #9
 8004f5e:	781a      	ldrb	r2, [r3, #0]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	3309      	adds	r3, #9
 8004f64:	f022 0201 	bic.w	r2, r2, #1
 8004f68:	b2d2      	uxtb	r2, r2
 8004f6a:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x02;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3309      	adds	r3, #9
 8004f70:	781a      	ldrb	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	3309      	adds	r3, #9
 8004f76:	f042 0202 	orr.w	r2, r2, #2
 8004f7a:	b2d2      	uxtb	r2, r2
 8004f7c:	701a      	strb	r2, [r3, #0]
		break;
 8004f7e:	e01b      	b.n	8004fb8 <set_cfg1+0xf0>
	case 64:
		reginfo[9] = reginfo[9] | 0x03;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3309      	adds	r3, #9
 8004f84:	781a      	ldrb	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3309      	adds	r3, #9
 8004f8a:	f042 0203 	orr.w	r2, r2, #3
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]
		break;
 8004f92:	e011      	b.n	8004fb8 <set_cfg1+0xf0>
	default:
		reginfo[9] = reginfo[9] & 0xFD;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	3309      	adds	r3, #9
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	3309      	adds	r3, #9
 8004f9e:	f022 0202 	bic.w	r2, r2, #2
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	701a      	strb	r2, [r3, #0]
		reginfo[9] = reginfo[9] | 0x01;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	3309      	adds	r3, #9
 8004faa:	781a      	ldrb	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	3309      	adds	r3, #9
 8004fb0:	f042 0201 	orr.w	r2, r2, #1
 8004fb4:	b2d2      	uxtb	r2, r2
 8004fb6:	701a      	strb	r2, [r3, #0]
	}

	// TODO ADD ERROR CHECKING
	//set_reg(TCS3430_ADDR, CFG1_ADDR, reginfo[14]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG1_ADDR, reginfo+9, 1);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f103 0209 	add.w	r2, r3, #9
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	2190      	movs	r1, #144	; 0x90
 8004fc2:	2072      	movs	r0, #114	; 0x72
 8004fc4:	f7fe f9a6 	bl	8003314 <BSP_I2C1_WriteReg>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	4a04      	ldr	r2, [pc, #16]	; (8004fdc <set_cfg1+0x114>)
 8004fcc:	6013      	str	r3, [r2, #0]

	return ret;
 8004fce:	4b03      	ldr	r3, [pc, #12]	; (8004fdc <set_cfg1+0x114>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3708      	adds	r7, #8
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	200007bc 	.word	0x200007bc

08004fe0 <set_cfg2>:

int32_t set_cfg2(uint8_t *reginfo, uint8_t mode)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b082      	sub	sp, #8
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	70fb      	strb	r3, [r7, #3]
	 * INPUT: reginfo[24] - current values of all registers
	 *        mode - If this bit is set to 1 and AGAIN in the CFG1 register is set to 11, then the 128x gain mode will be enabled.
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 8004fec:	78fb      	ldrb	r3, [r7, #3]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <set_cfg2+0x26>
	{
		reginfo[21] |= 0x10;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3315      	adds	r3, #21
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	3315      	adds	r3, #21
 8004ffc:	f042 0210 	orr.w	r2, r2, #16
 8005000:	b2d2      	uxtb	r2, r2
 8005002:	701a      	strb	r2, [r3, #0]
 8005004:	e008      	b.n	8005018 <set_cfg2+0x38>
	}
	else
	{
		reginfo[21] &= 0x04;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3315      	adds	r3, #21
 800500a:	781a      	ldrb	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3315      	adds	r3, #21
 8005010:	f002 0204 	and.w	r2, r2, #4
 8005014:	b2d2      	uxtb	r2, r2
 8005016:	701a      	strb	r2, [r3, #0]
	}
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG2_ADDR, reginfo+21, 1);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f103 0215 	add.w	r2, r3, #21
 800501e:	2301      	movs	r3, #1
 8005020:	219f      	movs	r1, #159	; 0x9f
 8005022:	2072      	movs	r0, #114	; 0x72
 8005024:	f7fe f976 	bl	8003314 <BSP_I2C1_WriteReg>
 8005028:	4603      	mov	r3, r0
 800502a:	4a03      	ldr	r2, [pc, #12]	; (8005038 <set_cfg2+0x58>)
 800502c:	6013      	str	r3, [r2, #0]
}
 800502e:	bf00      	nop
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	200007bc 	.word	0x200007bc

0800503c <set_cfg3>:

int32_t set_cfg3(uint8_t *reginfo, uint8_t mode, uint8_t sai)//Mode all flag bit
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	70fb      	strb	r3, [r7, #3]
 8005048:	4613      	mov	r3, r2
 800504a:	70bb      	strb	r3, [r7, #2]
	 *        mode - If this bit is set, all flag bits in the STATUS register will be reset whenever the STATUS register is read over I2C.
	 *        sai - Sleep After Interrupt. Power down the device at the end of the ALS cycle if an interrupt has been generated
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(mode)
 800504c:	78fb      	ldrb	r3, [r7, #3]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d009      	beq.n	8005066 <set_cfg3+0x2a>
	{
		reginfo[22] |= 0x80;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	3316      	adds	r3, #22
 8005056:	781a      	ldrb	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	3316      	adds	r3, #22
 800505c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	e008      	b.n	8005078 <set_cfg3+0x3c>
	}
	else
	{
		reginfo[22] &= 0x7F;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	3316      	adds	r3, #22
 800506a:	781a      	ldrb	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3316      	adds	r3, #22
 8005070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	701a      	strb	r2, [r3, #0]
	}

	if(sai)
 8005078:	78bb      	ldrb	r3, [r7, #2]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d009      	beq.n	8005092 <set_cfg3+0x56>
	{
		reginfo[22] |= 0x10;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	3316      	adds	r3, #22
 8005082:	781a      	ldrb	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	3316      	adds	r3, #22
 8005088:	f042 0210 	orr.w	r2, r2, #16
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]
 8005090:	e008      	b.n	80050a4 <set_cfg3+0x68>
	}
	else
	{
		reginfo[22] &= 0xEF;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	3316      	adds	r3, #22
 8005096:	781a      	ldrb	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	3316      	adds	r3, #22
 800509c:	f022 0210 	bic.w	r2, r2, #16
 80050a0:	b2d2      	uxtb	r2, r2
 80050a2:	701a      	strb	r2, [r3, #0]
	}

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, CFG3_ADDR, reginfo+22, 1);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f103 0216 	add.w	r2, r3, #22
 80050aa:	2301      	movs	r3, #1
 80050ac:	21ab      	movs	r1, #171	; 0xab
 80050ae:	2072      	movs	r0, #114	; 0x72
 80050b0:	f7fe f930 	bl	8003314 <BSP_I2C1_WriteReg>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4a04      	ldr	r2, [pc, #16]	; (80050c8 <set_cfg3+0x8c>)
 80050b8:	6013      	str	r3, [r2, #0]

	return ret;
 80050ba:	4b03      	ldr	r3, [pc, #12]	; (80050c8 <set_cfg3+0x8c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	200007bc 	.word	0x200007bc

080050cc <set_AutoZeroMode>:

int32_t set_AutoZeroMode(uint8_t *reginfo, uint8_t mode, uint8_t AZ_ITERATION)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	460b      	mov	r3, r1
 80050d6:	70fb      	strb	r3, [r7, #3]
 80050d8:	4613      	mov	r3, r2
 80050da:	70bb      	strb	r3, [r7, #2]
		     1: Always start at the previous (offset_c) with the auto-zero mechanism
     *        AZ_ITERATION - Run autozero automatically every nth ALS iteration (0=never, 7Fh=only at first ALS cycle, n=every nth time)
     * RETURN: 0 - success
     *         -1 - error
     */
    if (mode)
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d009      	beq.n	80050f6 <set_AutoZeroMode+0x2a>
    {
        reginfo[23] |= 0x80;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	3317      	adds	r3, #23
 80050e6:	781a      	ldrb	r2, [r3, #0]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3317      	adds	r3, #23
 80050ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80050f0:	b2d2      	uxtb	r2, r2
 80050f2:	701a      	strb	r2, [r3, #0]
 80050f4:	e008      	b.n	8005108 <set_AutoZeroMode+0x3c>
    }
    else
    {
        reginfo[23] &= 0x7F;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	3317      	adds	r3, #23
 80050fa:	781a      	ldrb	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	3317      	adds	r3, #23
 8005100:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
    }

    if(AZ_ITERATION == 0x7F)
 8005108:	78bb      	ldrb	r3, [r7, #2]
 800510a:	2b7f      	cmp	r3, #127	; 0x7f
 800510c:	d109      	bne.n	8005122 <set_AutoZeroMode+0x56>
    {
    	reginfo[23] |= 0x7F;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	3317      	adds	r3, #23
 8005112:	781a      	ldrb	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3317      	adds	r3, #23
 8005118:	f042 027f 	orr.w	r2, r2, #127	; 0x7f
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e008      	b.n	8005134 <set_AutoZeroMode+0x68>
    }
    else
    {
    	reginfo[23] &= 0x80;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	3317      	adds	r3, #23
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3317      	adds	r3, #23
 800512c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005130:	b2d2      	uxtb	r2, r2
 8005132:	701a      	strb	r2, [r3, #0]
    }

    ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AZ_CONFIG_ADDR, reginfo+23, 1);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f103 0217 	add.w	r2, r3, #23
 800513a:	2301      	movs	r3, #1
 800513c:	21d6      	movs	r1, #214	; 0xd6
 800513e:	2072      	movs	r0, #114	; 0x72
 8005140:	f7fe f8e8 	bl	8003314 <BSP_I2C1_WriteReg>
 8005144:	4603      	mov	r3, r0
 8005146:	4a04      	ldr	r2, [pc, #16]	; (8005158 <set_AutoZeroMode+0x8c>)
 8005148:	6013      	str	r3, [r2, #0]

    return ret; // Assuming 'ret' is a valid public variable accessible within the scope of this function
 800514a:	4b03      	ldr	r3, [pc, #12]	; (8005158 <set_AutoZeroMode+0x8c>)
 800514c:	681b      	ldr	r3, [r3, #0]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3708      	adds	r7, #8
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	200007bc 	.word	0x200007bc

0800515c <set_ALSInterrupt>:

int32_t set_ALSInterrupt(uint8_t *reginfo, uint8_t AIEN, uint8_t ASIEN)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	460b      	mov	r3, r1
 8005166:	70fb      	strb	r3, [r7, #3]
 8005168:	4613      	mov	r3, r2
 800516a:	70bb      	strb	r3, [r7, #2]
						 1: Always start at the previous (offset_c) with the auto-zero mechanism
	 *        ASIEN - Writing '1' to this bit enables ASAT interrupt.
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if(AIEN)
 800516c:	78fb      	ldrb	r3, [r7, #3]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <set_ALSInterrupt+0x2a>
	{
		reginfo[24] |= 0x10;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	3318      	adds	r3, #24
 8005176:	781a      	ldrb	r2, [r3, #0]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	3318      	adds	r3, #24
 800517c:	f042 0210 	orr.w	r2, r2, #16
 8005180:	b2d2      	uxtb	r2, r2
 8005182:	701a      	strb	r2, [r3, #0]
 8005184:	e008      	b.n	8005198 <set_ALSInterrupt+0x3c>
	}
	else
	{
		reginfo[24] &= 0xEF;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3318      	adds	r3, #24
 800518a:	781a      	ldrb	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3318      	adds	r3, #24
 8005190:	f022 0210 	bic.w	r2, r2, #16
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
	}

	if(ASIEN)
 8005198:	78bb      	ldrb	r3, [r7, #2]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <set_ALSInterrupt+0x56>
	{
		reginfo[24] |= 0x80;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	3318      	adds	r3, #24
 80051a2:	781a      	ldrb	r2, [r3, #0]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3318      	adds	r3, #24
 80051a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80051ac:	b2d2      	uxtb	r2, r2
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e008      	b.n	80051c4 <set_ALSInterrupt+0x68>
	}
	else
	{
		reginfo[24] &= 0x7F;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	3318      	adds	r3, #24
 80051b6:	781a      	ldrb	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3318      	adds	r3, #24
 80051bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	701a      	strb	r2, [r3, #0]
	}

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, INTENAB_ADDR, reginfo+24, 1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f103 0218 	add.w	r2, r3, #24
 80051ca:	2301      	movs	r3, #1
 80051cc:	21dd      	movs	r1, #221	; 0xdd
 80051ce:	2072      	movs	r0, #114	; 0x72
 80051d0:	f7fe f8a0 	bl	8003314 <BSP_I2C1_WriteReg>
 80051d4:	4603      	mov	r3, r0
 80051d6:	4a04      	ldr	r2, [pc, #16]	; (80051e8 <set_ALSInterrupt+0x8c>)
 80051d8:	6013      	str	r3, [r2, #0]

	return ret;
 80051da:	4b03      	ldr	r3, [pc, #12]	; (80051e8 <set_ALSInterrupt+0x8c>)
 80051dc:	681b      	ldr	r3, [r3, #0]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3708      	adds	r7, #8
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	200007bc 	.word	0x200007bc

080051ec <enable_sensor>:

int32_t enable_sensor(uint8_t *reginfo, uint8_t wait_flag, uint8_t als_flag)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
 80051f8:	4613      	mov	r3, r2
 80051fa:	70bb      	strb	r3, [r7, #2]
	 *        wait_flag - 1 to enable wait feature, 0 to disable wait feature
	 *        als_flag - 1 to enable als feature, 0 to disable wait feature
	 * RETURN: 0 - success
	 *         -1 - error
	 */
	if (wait_flag) {
 80051fc:	78fb      	ldrb	r3, [r7, #3]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d007      	beq.n	8005212 <enable_sensor+0x26>
		reginfo[0] = reginfo[0] | 0x08;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	f043 0308 	orr.w	r3, r3, #8
 800520a:	b2da      	uxtb	r2, r3
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	701a      	strb	r2, [r3, #0]
 8005210:	e006      	b.n	8005220 <enable_sensor+0x34>
	} else {
		reginfo[0] = reginfo[0] & 0xF7;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	781b      	ldrb	r3, [r3, #0]
 8005216:	f023 0308 	bic.w	r3, r3, #8
 800521a:	b2da      	uxtb	r2, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	701a      	strb	r2, [r3, #0]
	}

	if (als_flag) {
 8005220:	78bb      	ldrb	r3, [r7, #2]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d007      	beq.n	8005236 <enable_sensor+0x4a>
		reginfo[0] = reginfo[0] | 0x03;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	781b      	ldrb	r3, [r3, #0]
 800522a:	f043 0303 	orr.w	r3, r3, #3
 800522e:	b2da      	uxtb	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e006      	b.n	8005244 <enable_sensor+0x58>
	} else {
		reginfo[0] = reginfo[0] & 0xFC;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	f023 0303 	bic.w	r3, r3, #3
 800523e:	b2da      	uxtb	r2, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	701a      	strb	r2, [r3, #0]
	}

	//set_reg(TCS3430_ADDR, ENABLE_ADDR, reginfo[0]);
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ENABLE_ADDR, reginfo, 1);
 8005244:	2301      	movs	r3, #1
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	2180      	movs	r1, #128	; 0x80
 800524a:	2072      	movs	r0, #114	; 0x72
 800524c:	f7fe f862 	bl	8003314 <BSP_I2C1_WriteReg>
 8005250:	4603      	mov	r3, r0
 8005252:	4a04      	ldr	r2, [pc, #16]	; (8005264 <enable_sensor+0x78>)
 8005254:	6013      	str	r3, [r2, #0]

	return ret;
 8005256:	4b03      	ldr	r3, [pc, #12]	; (8005264 <enable_sensor+0x78>)
 8005258:	681b      	ldr	r3, [r3, #0]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3708      	adds	r7, #8
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	200007bc 	.word	0x200007bc

08005268 <disable_sensor>:

int32_t disable_sensor(uint8_t *reginfo)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	 * FUNCTION: Disable the sesor
	 * ---------
	 * INPUT: fd - the file descriptor of the i2c device
	 * RETURN: 0 - success
	 */
	reginfo[0] = reginfo[0] & 0x00;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	701a      	strb	r2, [r3, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, ENABLE_ADDR, reginfo, 1);
 8005276:	2301      	movs	r3, #1
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	2180      	movs	r1, #128	; 0x80
 800527c:	2072      	movs	r0, #114	; 0x72
 800527e:	f7fe f849 	bl	8003314 <BSP_I2C1_WriteReg>
 8005282:	4603      	mov	r3, r0
 8005284:	4a03      	ldr	r2, [pc, #12]	; (8005294 <disable_sensor+0x2c>)
 8005286:	6013      	str	r3, [r2, #0]
	return ret;
 8005288:	4b02      	ldr	r3, [pc, #8]	; (8005294 <disable_sensor+0x2c>)
 800528a:	681b      	ldr	r3, [r3, #0]
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	200007bc 	.word	0x200007bc

08005298 <softReset>:

void softReset(uint8_t *reginfo)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  * FUNCTION: Change the enable register settings
  * ---------
  * INPUT: fd - the file descriptor of the i2c device
  * RETURN: 0 - success
  */
  disable_sensor(reginfo);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ffe1 	bl	8005268 <disable_sensor>
  set_atime(reginfo, 18);
 80052a6:	2112      	movs	r1, #18
 80052a8:	6878      	ldr	r0, [r7, #4]
 80052aa:	f7ff fdb7 	bl	8004e1c <set_atime>

  //setWaitTime(0);
  set_cfg0(reginfo, 0);
 80052ae:	2100      	movs	r1, #0
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f7ff fddb 	bl	8004e6c <set_cfg0>

  //setALSGain(3);
  set_cfg1(reginfo, 0, 16);
 80052b6:	2210      	movs	r2, #16
 80052b8:	2100      	movs	r1, #0
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f7ff fe04 	bl	8004ec8 <set_cfg1>

  //setHighGAIN(false);
  set_cfg2(reginfo, 1);
 80052c0:	2101      	movs	r1, #1
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f7ff fe8c 	bl	8004fe0 <set_cfg2>

  //setIntReadClear(false);
  //setSleepAfterInterrupt(false);
  set_cfg3(reginfo, 0, 0);
 80052c8:	2200      	movs	r2, #0
 80052ca:	2100      	movs	r1, #0
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff feb5 	bl	800503c <set_cfg3>

  //setAutoZeroMode(0);
  //setAutoZeroNTHIteration(0x7f);
  set_AutoZeroMode(reginfo, 0, 0x7F);
 80052d2:	227f      	movs	r2, #127	; 0x7f
 80052d4:	2100      	movs	r1, #0
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fef8 	bl	80050cc <set_AutoZeroMode>

  //setALSInterrupt(false);
  //setALSSaturationInterrupt(false);
  set_ALSInterrupt(reginfo, 0, 0);
 80052dc:	2200      	movs	r2, #0
 80052de:	2100      	movs	r1, #0
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff ff3b 	bl	800515c <set_ALSInterrupt>
}
 80052e6:	bf00      	nop
 80052e8:	3708      	adds	r7, #8
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
	...

080052f0 <get_optics_data>:

int32_t get_optics_data(uint8_t *color_array)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b082      	sub	sp, #8
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]

	// TODO ADD ERROR CHECKING


	//read Z
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_Z_ADDR, color_array, 2);
 80052f8:	2302      	movs	r3, #2
 80052fa:	687a      	ldr	r2, [r7, #4]
 80052fc:	2194      	movs	r1, #148	; 0x94
 80052fe:	2072      	movs	r0, #114	; 0x72
 8005300:	f7fe f83a 	bl	8003378 <BSP_I2C1_ReadReg>
 8005304:	4603      	mov	r3, r0
 8005306:	4a13      	ldr	r2, [pc, #76]	; (8005354 <get_optics_data+0x64>)
 8005308:	6013      	str	r3, [r2, #0]
	//color_array[0] = buf[0];

	//read Y
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_Y_ADDR, color_array+2, 2);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	1c9a      	adds	r2, r3, #2
 800530e:	2302      	movs	r3, #2
 8005310:	2196      	movs	r1, #150	; 0x96
 8005312:	2072      	movs	r0, #114	; 0x72
 8005314:	f7fe f830 	bl	8003378 <BSP_I2C1_ReadReg>
 8005318:	4603      	mov	r3, r0
 800531a:	4a0e      	ldr	r2, [pc, #56]	; (8005354 <get_optics_data+0x64>)
 800531c:	6013      	str	r3, [r2, #0]
	//color_array[1] = buf[0];

	//read IR
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_IR_ADDR, color_array+4, 2);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	1d1a      	adds	r2, r3, #4
 8005322:	2302      	movs	r3, #2
 8005324:	2198      	movs	r1, #152	; 0x98
 8005326:	2072      	movs	r0, #114	; 0x72
 8005328:	f7fe f826 	bl	8003378 <BSP_I2C1_ReadReg>
 800532c:	4603      	mov	r3, r0
 800532e:	4a09      	ldr	r2, [pc, #36]	; (8005354 <get_optics_data+0x64>)
 8005330:	6013      	str	r3, [r2, #0]

	//read X
	ret = BSP_I2C1_ReadReg(TCS3430_ADDR, CHATAL_X_ADDR, color_array+6, 2);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	1d9a      	adds	r2, r3, #6
 8005336:	2302      	movs	r3, #2
 8005338:	219a      	movs	r1, #154	; 0x9a
 800533a:	2072      	movs	r0, #114	; 0x72
 800533c:	f7fe f81c 	bl	8003378 <BSP_I2C1_ReadReg>
 8005340:	4603      	mov	r3, r0
 8005342:	4a04      	ldr	r2, [pc, #16]	; (8005354 <get_optics_data+0x64>)
 8005344:	6013      	str	r3, [r2, #0]

	return ret;
 8005346:	4b03      	ldr	r3, [pc, #12]	; (8005354 <get_optics_data+0x64>)
 8005348:	681b      	ldr	r3, [r3, #0]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	200007bc 	.word	0x200007bc

08005358 <get_raw_XYZ>:

tcs3430_optics_val get_raw_XYZ(const tcs3430 *sensor) {
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]

    tcs3430_optics_val calibed;

    if ((get_optics_data((uint8_t*)sensor->XYZinfo)) != 0) {
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	3318      	adds	r3, #24
 8005366:	4618      	mov	r0, r3
 8005368:	f7ff ffc2 	bl	80052f0 <get_optics_data>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00a      	beq.n	8005388 <get_raw_XYZ+0x30>
    	return calibed;     // if errors occur when reading from register, return empty calibed
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	461c      	mov	r4, r3
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800537c:	6020      	str	r0, [r4, #0]
 800537e:	6061      	str	r1, [r4, #4]
 8005380:	60a2      	str	r2, [r4, #8]
 8005382:	881b      	ldrh	r3, [r3, #0]
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e043      	b.n	8005410 <get_raw_XYZ+0xb8>
    }

    uint16_t temp = 0;
 8005388:	2300      	movs	r3, #0
 800538a:	82fb      	strh	r3, [r7, #22]

    temp = sensor->XYZinfo[1];
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	7e5b      	ldrb	r3, [r3, #25]
 8005390:	82fb      	strh	r3, [r7, #22]
    calibed.Z = temp<<8 | sensor->XYZinfo[0];
 8005392:	8afb      	ldrh	r3, [r7, #22]
 8005394:	021b      	lsls	r3, r3, #8
 8005396:	b21a      	sxth	r2, r3
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	7e1b      	ldrb	r3, [r3, #24]
 800539c:	b21b      	sxth	r3, r3
 800539e:	4313      	orrs	r3, r2
 80053a0:	b21b      	sxth	r3, r3
 80053a2:	b29b      	uxth	r3, r3
 80053a4:	81bb      	strh	r3, [r7, #12]

    temp = sensor->XYZinfo[3];
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	7edb      	ldrb	r3, [r3, #27]
 80053aa:	82fb      	strh	r3, [r7, #22]
    calibed.Y = temp<<8 | sensor->XYZinfo[2];
 80053ac:	8afb      	ldrh	r3, [r7, #22]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	b21a      	sxth	r2, r3
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	7e9b      	ldrb	r3, [r3, #26]
 80053b6:	b21b      	sxth	r3, r3
 80053b8:	4313      	orrs	r3, r2
 80053ba:	b21b      	sxth	r3, r3
 80053bc:	b29b      	uxth	r3, r3
 80053be:	817b      	strh	r3, [r7, #10]

    temp = sensor->XYZinfo[5];
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	7f5b      	ldrb	r3, [r3, #29]
 80053c4:	82fb      	strh	r3, [r7, #22]
    calibed.IR = temp<<8 | sensor->XYZinfo[4];
 80053c6:	8afb      	ldrh	r3, [r7, #22]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	b21a      	sxth	r2, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	7f1b      	ldrb	r3, [r3, #28]
 80053d0:	b21b      	sxth	r3, r3
 80053d2:	4313      	orrs	r3, r2
 80053d4:	b21b      	sxth	r3, r3
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	81fb      	strh	r3, [r7, #14]

    temp = sensor->XYZinfo[7];
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	7fdb      	ldrb	r3, [r3, #31]
 80053de:	82fb      	strh	r3, [r7, #22]
    calibed.X = temp<<8  | sensor->XYZinfo[6];
 80053e0:	8afb      	ldrh	r3, [r7, #22]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	b21a      	sxth	r2, r3
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	7f9b      	ldrb	r3, [r3, #30]
 80053ea:	b21b      	sxth	r3, r3
 80053ec:	4313      	orrs	r3, r2
 80053ee:	b21b      	sxth	r3, r3
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	813b      	strh	r3, [r7, #8]

    calibed.CCT = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	82bb      	strh	r3, [r7, #20]
    calibed.Lux = 0;
 80053f8:	2300      	movs	r3, #0
 80053fa:	827b      	strh	r3, [r7, #18]
    /*calibed.IR = 0;*/

    return calibed;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	461c      	mov	r4, r3
 8005400:	f107 0308 	add.w	r3, r7, #8
 8005404:	cb07      	ldmia	r3!, {r0, r1, r2}
 8005406:	6020      	str	r0, [r4, #0]
 8005408:	6061      	str	r1, [r4, #4]
 800540a:	60a2      	str	r2, [r4, #8]
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	81a3      	strh	r3, [r4, #12]
}
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	bd90      	pop	{r4, r7, pc}

08005418 <TCS3430_print_color>:

void TCS3430_print_color(const tcs3430_optics_val *color_data) {
 8005418:	b5b0      	push	{r4, r5, r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af04      	add	r7, sp, #16
 800541e:	6078      	str	r0, [r7, #4]
     * RETURN: void
     */

    /* formatting the data to left aligned, zero decimal, width of eight floats */
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	881b      	ldrh	r3, [r3, #0]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 8005424:	4618      	mov	r0, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	885b      	ldrh	r3, [r3, #2]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 800542a:	461c      	mov	r4, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	889b      	ldrh	r3, [r3, #4]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 8005430:	461d      	mov	r5, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	88db      	ldrh	r3, [r3, #6]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 8005436:	461a      	mov	r2, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	895b      	ldrh	r3, [r3, #10]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 800543c:	4619      	mov	r1, r3
    		color_data->X, color_data->Y, color_data->Z, color_data->IR, color_data->Lux, color_data->CCT);//*/
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	899b      	ldrh	r3, [r3, #12]
    printf( """\n\r|X\t|Y\t|Z\t|IR\t|LUX\t|CCT\t|\n\r|%d\t|%d\t|%d\t|%d\t|%d\t|%d\t|\r\n",
 8005442:	9302      	str	r3, [sp, #8]
 8005444:	9101      	str	r1, [sp, #4]
 8005446:	9200      	str	r2, [sp, #0]
 8005448:	462b      	mov	r3, r5
 800544a:	4622      	mov	r2, r4
 800544c:	4601      	mov	r1, r0
 800544e:	4803      	ldr	r0, [pc, #12]	; (800545c <TCS3430_print_color+0x44>)
 8005450:	f00a f99a 	bl	800f788 <iprintf>
	//fflush(stdout);
	/*
    write(stdout,color_data->X,2);
    write(stdout,color_data->Y,2);
    write(stdout,color_data->Z,2);*/
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bdb0      	pop	{r4, r5, r7, pc}
 800545c:	08012d08 	.word	0x08012d08

08005460 <begin>:

int32_t begin(tcs3430 *sensor_t)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
	softReset(sensor_t->reginfo);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	f7ff ff14 	bl	8005298 <softReset>
	ret = set_ALSInterrupt(sensor_t->reginfo, 0, 0);   //enable als interrupt
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	2100      	movs	r1, #0
 8005476:	4618      	mov	r0, r3
 8005478:	f7ff fe70 	bl	800515c <set_ALSInterrupt>
 800547c:	4603      	mov	r3, r0
 800547e:	4a1a      	ldr	r2, [pc, #104]	; (80054e8 <begin+0x88>)
 8005480:	6013      	str	r3, [r2, #0]
	ret = set_cfg3(sensor_t->reginfo,0,0); // enable als interrupt SC
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	2100      	movs	r1, #0
 8005488:	4618      	mov	r0, r3
 800548a:	f7ff fdd7 	bl	800503c <set_cfg3>
 800548e:	4603      	mov	r3, r0
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <begin+0x88>)
 8005492:	6013      	str	r3, [r2, #0]
	set_IRT_Cycle(sensor_t->reginfo,1); // multiple occurance of ALS interrupt
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2101      	movs	r1, #1
 8005498:	4618      	mov	r0, r3
 800549a:	f000 f8ef 	bl	800567c <set_IRT_Cycle>
	Update_ALSThreshold(sensor_t);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f824 	bl	80054ec <Update_ALSThreshold>
	reset_Status(sensor_t->reginfo);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f000 f954 	bl	8005754 <reset_Status>
	BSP_I2C1_WriteReg(TCS3430_ADDR, WTIME_ADDR, &(sensor_t->reginfo[2]), 1);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	1c9a      	adds	r2, r3, #2
 80054b0:	2301      	movs	r3, #1
 80054b2:	2183      	movs	r1, #131	; 0x83
 80054b4:	2072      	movs	r0, #114	; 0x72
 80054b6:	f7fd ff2d 	bl	8003314 <BSP_I2C1_WriteReg>

	ret = enable_sensor(sensor_t->reginfo, 0, 1);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	2100      	movs	r1, #0
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7ff fe93 	bl	80051ec <enable_sensor>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a07      	ldr	r2, [pc, #28]	; (80054e8 <begin+0x88>)
 80054ca:	6013      	str	r3, [r2, #0]
	ret = get_data(sensor_t->reginfo);//copy from sensor
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4618      	mov	r0, r3
 80054d0:	f7ff fc70 	bl	8004db4 <get_data>
 80054d4:	4603      	mov	r3, r0
 80054d6:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <begin+0x88>)
 80054d8:	6013      	str	r3, [r2, #0]


	return ret;
 80054da:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <begin+0x88>)
 80054dc:	681b      	ldr	r3, [r3, #0]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	200007bc 	.word	0x200007bc

080054ec <Update_ALSThreshold>:
}
int MaxV(uint16_t x, uint16_t y) {
    return x < y ? x : y;
}

void Update_ALSThreshold(tcs3430 *sensor_t){
 80054ec:	b590      	push	{r4, r7, lr}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6178      	str	r0, [r7, #20]
	XYZ_data = get_raw_XYZ(sensor_t);
 80054f4:	4c23      	ldr	r4, [pc, #140]	; (8005584 <Update_ALSThreshold+0x98>)
 80054f6:	463b      	mov	r3, r7
 80054f8:	6979      	ldr	r1, [r7, #20]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f7ff ff2c 	bl	8005358 <get_raw_XYZ>
 8005500:	4623      	mov	r3, r4
 8005502:	463c      	mov	r4, r7
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	6861      	ldr	r1, [r4, #4]
 8005508:	68a2      	ldr	r2, [r4, #8]
 800550a:	c307      	stmia	r3!, {r0, r1, r2}
 800550c:	89a2      	ldrh	r2, [r4, #12]
 800550e:	801a      	strh	r2, [r3, #0]
	//TODO: incoperate the above into the following
	int temp =XYZ_data.Z;
 8005510:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <Update_ALSThreshold+0x98>)
 8005512:	889b      	ldrh	r3, [r3, #4]
 8005514:	61fb      	str	r3, [r7, #28]
	if (temp<Range){
 8005516:	69fb      	ldr	r3, [r7, #28]
 8005518:	2b00      	cmp	r3, #0
 800551a:	dc02      	bgt.n	8005522 <Update_ALSThreshold+0x36>
		temp = Range;
 800551c:	2301      	movs	r3, #1
 800551e:	61fb      	str	r3, [r7, #28]
 8005520:	e007      	b.n	8005532 <Update_ALSThreshold+0x46>
	}else if ((temp+Range)>65525){
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8005528:	4293      	cmp	r3, r2
 800552a:	dd02      	ble.n	8005532 <Update_ALSThreshold+0x46>
		temp = 65525-Range;
 800552c:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8005530:	61fb      	str	r3, [r7, #28]
	}
	set_ALS_THR_LOW(sensor_t->reginfo,temp-Range);
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	b29b      	uxth	r3, r3
 8005538:	3b01      	subs	r3, #1
 800553a:	b29b      	uxth	r3, r3
 800553c:	4619      	mov	r1, r3
 800553e:	4610      	mov	r0, r2
 8005540:	f000 f830 	bl	80055a4 <set_ALS_THR_LOW>
	set_ALS_THR_HIGH(sensor_t->reginfo,temp+Range);
 8005544:	697a      	ldr	r2, [r7, #20]
 8005546:	69fb      	ldr	r3, [r7, #28]
 8005548:	b29b      	uxth	r3, r3
 800554a:	3301      	adds	r3, #1
 800554c:	b29b      	uxth	r3, r3
 800554e:	4619      	mov	r1, r3
 8005550:	4610      	mov	r0, r2
 8005552:	f000 f85d 	bl	8005610 <set_ALS_THR_HIGH>
	printf("\n\rNew Low:%d New High:%d\n\r",temp-Range,temp+Range);
 8005556:	69fb      	ldr	r3, [r7, #28]
 8005558:	1e59      	subs	r1, r3, #1
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	3301      	adds	r3, #1
 800555e:	461a      	mov	r2, r3
 8005560:	4809      	ldr	r0, [pc, #36]	; (8005588 <Update_ALSThreshold+0x9c>)
 8005562:	f00a f911 	bl	800f788 <iprintf>
	reset_Status(sensor_t->reginfo);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	4618      	mov	r0, r3
 800556a:	f000 f8f3 	bl	8005754 <reset_Status>
	set_ALSInterrupt(sensor_t->reginfo, 1, 0);   //enable als interrupt
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	2200      	movs	r2, #0
 8005572:	2101      	movs	r1, #1
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff fdf1 	bl	800515c <set_ALSInterrupt>
}
 800557a:	bf00      	nop
 800557c:	3724      	adds	r7, #36	; 0x24
 800557e:	46bd      	mov	sp, r7
 8005580:	bd90      	pop	{r4, r7, pc}
 8005582:	bf00      	nop
 8005584:	200007ac 	.word	0x200007ac
 8005588:	08012d40 	.word	0x08012d40

0800558c <Color_Init>:



void Color_Init(void)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0
	BSP_I2C1_Init();
 8005590:	f7fd fe82 	bl	8003298 <BSP_I2C1_Init>
	begin(&sensor);
 8005594:	4802      	ldr	r0, [pc, #8]	; (80055a0 <Color_Init+0x14>)
 8005596:	f7ff ff63 	bl	8005460 <begin>
}
 800559a:	bf00      	nop
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	2000078c 	.word	0x2000078c

080055a4 <set_ALS_THR_LOW>:
	TCS3430_print_color(&XYZ_data);

}

void set_ALS_THR_LOW(uint8_t *reginfo, uint16_t val)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	807b      	strh	r3, [r7, #2]
	if(val > 65525)
 80055b0:	887b      	ldrh	r3, [r7, #2]
 80055b2:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d824      	bhi.n	8005604 <set_ALS_THR_LOW+0x60>
	{
		return;
	}

	uint16_t value = val;
 80055ba:	887b      	ldrh	r3, [r7, #2]
 80055bc:	81fb      	strh	r3, [r7, #14]

	uint8_t low = value;
 80055be:	89fb      	ldrh	r3, [r7, #14]
 80055c0:	737b      	strb	r3, [r7, #13]
	reginfo[3] = low;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	3303      	adds	r3, #3
 80055c6:	7b7a      	ldrb	r2, [r7, #13]
 80055c8:	701a      	strb	r2, [r3, #0]

	uint8_t high = value >> 8;
 80055ca:	89fb      	ldrh	r3, [r7, #14]
 80055cc:	0a1b      	lsrs	r3, r3, #8
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	733b      	strb	r3, [r7, #12]
	reginfo[4] = high;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3304      	adds	r3, #4
 80055d6:	7b3a      	ldrb	r2, [r7, #12]
 80055d8:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AILTL_ADDR, reginfo+3, 1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	1cda      	adds	r2, r3, #3
 80055de:	2301      	movs	r3, #1
 80055e0:	2184      	movs	r1, #132	; 0x84
 80055e2:	2072      	movs	r0, #114	; 0x72
 80055e4:	f7fd fe96 	bl	8003314 <BSP_I2C1_WriteReg>
 80055e8:	4603      	mov	r3, r0
 80055ea:	4a08      	ldr	r2, [pc, #32]	; (800560c <set_ALS_THR_LOW+0x68>)
 80055ec:	6013      	str	r3, [r2, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AILTH_ADDR, reginfo+4, 1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	1d1a      	adds	r2, r3, #4
 80055f2:	2301      	movs	r3, #1
 80055f4:	2185      	movs	r1, #133	; 0x85
 80055f6:	2072      	movs	r0, #114	; 0x72
 80055f8:	f7fd fe8c 	bl	8003314 <BSP_I2C1_WriteReg>
 80055fc:	4603      	mov	r3, r0
 80055fe:	4a03      	ldr	r2, [pc, #12]	; (800560c <set_ALS_THR_LOW+0x68>)
 8005600:	6013      	str	r3, [r2, #0]
 8005602:	e000      	b.n	8005606 <set_ALS_THR_LOW+0x62>
		return;
 8005604:	bf00      	nop


}
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	200007bc 	.word	0x200007bc

08005610 <set_ALS_THR_HIGH>:

void set_ALS_THR_HIGH(uint8_t *reginfo, uint16_t val)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
	if(val > 65525)
 800561c:	887b      	ldrh	r3, [r7, #2]
 800561e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005622:	4293      	cmp	r3, r2
 8005624:	d824      	bhi.n	8005670 <set_ALS_THR_HIGH+0x60>
	{
		return;
	}
	uint16_t value = val;
 8005626:	887b      	ldrh	r3, [r7, #2]
 8005628:	81fb      	strh	r3, [r7, #14]

	uint8_t low = value;
 800562a:	89fb      	ldrh	r3, [r7, #14]
 800562c:	737b      	strb	r3, [r7, #13]
	reginfo[5] = low;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3305      	adds	r3, #5
 8005632:	7b7a      	ldrb	r2, [r7, #13]
 8005634:	701a      	strb	r2, [r3, #0]

	uint8_t high = value >> 8;
 8005636:	89fb      	ldrh	r3, [r7, #14]
 8005638:	0a1b      	lsrs	r3, r3, #8
 800563a:	b29b      	uxth	r3, r3
 800563c:	733b      	strb	r3, [r7, #12]
	reginfo[6] = high;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	3306      	adds	r3, #6
 8005642:	7b3a      	ldrb	r2, [r7, #12]
 8005644:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AIHTL_ADDR, reginfo+5, 1);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	1d5a      	adds	r2, r3, #5
 800564a:	2301      	movs	r3, #1
 800564c:	2186      	movs	r1, #134	; 0x86
 800564e:	2072      	movs	r0, #114	; 0x72
 8005650:	f7fd fe60 	bl	8003314 <BSP_I2C1_WriteReg>
 8005654:	4603      	mov	r3, r0
 8005656:	4a08      	ldr	r2, [pc, #32]	; (8005678 <set_ALS_THR_HIGH+0x68>)
 8005658:	6013      	str	r3, [r2, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, AIHTH_ADDR, reginfo+6, 1);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	1d9a      	adds	r2, r3, #6
 800565e:	2301      	movs	r3, #1
 8005660:	2187      	movs	r1, #135	; 0x87
 8005662:	2072      	movs	r0, #114	; 0x72
 8005664:	f7fd fe56 	bl	8003314 <BSP_I2C1_WriteReg>
 8005668:	4603      	mov	r3, r0
 800566a:	4a03      	ldr	r2, [pc, #12]	; (8005678 <set_ALS_THR_HIGH+0x68>)
 800566c:	6013      	str	r3, [r2, #0]
 800566e:	e000      	b.n	8005672 <set_ALS_THR_HIGH+0x62>
		return;
 8005670:	bf00      	nop


}
 8005672:	3710      	adds	r7, #16
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	200007bc 	.word	0x200007bc

0800567c <set_IRT_Cycle>:

void set_IRT_Cycle(uint8_t *reginfo, uint8_t cycle)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	460b      	mov	r3, r1
 8005686:	70fb      	strb	r3, [r7, #3]
	if(cycle > 15)
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	2b0f      	cmp	r3, #15
 800568c:	d901      	bls.n	8005692 <set_IRT_Cycle+0x16>
	{
		cycle = 15;
 800568e:	230f      	movs	r3, #15
 8005690:	70fb      	strb	r3, [r7, #3]
	}
	reginfo[7] = cycle;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3307      	adds	r3, #7
 8005696:	78fa      	ldrb	r2, [r7, #3]
 8005698:	701a      	strb	r2, [r3, #0]
	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, PERS_ADDR, reginfo+7, 1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	1dda      	adds	r2, r3, #7
 800569e:	2301      	movs	r3, #1
 80056a0:	218c      	movs	r1, #140	; 0x8c
 80056a2:	2072      	movs	r0, #114	; 0x72
 80056a4:	f7fd fe36 	bl	8003314 <BSP_I2C1_WriteReg>
 80056a8:	4603      	mov	r3, r0
 80056aa:	4a03      	ldr	r2, [pc, #12]	; (80056b8 <set_IRT_Cycle+0x3c>)
 80056ac:	6013      	str	r3, [r2, #0]


}
 80056ae:	bf00      	nop
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	200007bc 	.word	0x200007bc

080056bc <TCS3430_print_reg>:

void TCS3430_print_reg(tcs3430 *sensor_t) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b09c      	sub	sp, #112	; 0x70
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
	{

		int addr[] = {0x80, 0x81, 0x83, 0x84, 0x85, 0x86, 0x87, 0x8C,
 80056c4:	4a20      	ldr	r2, [pc, #128]	; (8005748 <TCS3430_print_reg+0x8c>)
 80056c6:	f107 0308 	add.w	r3, r7, #8
 80056ca:	4611      	mov	r1, r2
 80056cc:	2264      	movs	r2, #100	; 0x64
 80056ce:	4618      	mov	r0, r3
 80056d0:	f00a fa27 	bl	800fb22 <memcpy>
					0x8D, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97,
					0x98, 0x99, 0x9A, 0x9B, 0x9F, 0xAB, 0xD6, 0xDD};


		for(int i = 0; i < 25; i++)
 80056d4:	2300      	movs	r3, #0
 80056d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056d8:	e022      	b.n	8005720 <TCS3430_print_reg+0x64>
		{
			BSP_I2C1_ReadReg(TCS3430_ADDR, addr[i], &(sensor_t->reginfo[i]), 1);
 80056da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	3370      	adds	r3, #112	; 0x70
 80056e0:	443b      	add	r3, r7
 80056e2:	f853 3c68 	ldr.w	r3, [r3, #-104]
 80056e6:	b299      	uxth	r1, r3
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056ec:	441a      	add	r2, r3
 80056ee:	2301      	movs	r3, #1
 80056f0:	2072      	movs	r0, #114	; 0x72
 80056f2:	f7fd fe41 	bl	8003378 <BSP_I2C1_ReadReg>
			printf("%x---%d---%x\n\r",addr[i],i,(sensor_t->reginfo[i]));
 80056f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	3370      	adds	r3, #112	; 0x70
 80056fc:	443b      	add	r3, r7
 80056fe:	f853 1c68 	ldr.w	r1, [r3, #-104]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005706:	4413      	add	r3, r2
 8005708:	781b      	ldrb	r3, [r3, #0]
 800570a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800570c:	480f      	ldr	r0, [pc, #60]	; (800574c <TCS3430_print_reg+0x90>)
 800570e:	f00a f83b 	bl	800f788 <iprintf>
			if(ret != BSP_ERROR_NONE) break;
 8005712:	4b0f      	ldr	r3, [pc, #60]	; (8005750 <TCS3430_print_reg+0x94>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <TCS3430_print_reg+0x6c>
		for(int i = 0; i < 25; i++)
 800571a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571c:	3301      	adds	r3, #1
 800571e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005722:	2b18      	cmp	r3, #24
 8005724:	ddd9      	ble.n	80056da <TCS3430_print_reg+0x1e>
 8005726:	e000      	b.n	800572a <TCS3430_print_reg+0x6e>
			if(ret != BSP_ERROR_NONE) break;
 8005728:	bf00      	nop
		}
		ret = BSP_I2C1_WriteReg(TCS3430_ADDR, STATUS_ADDR, &(sensor_t->reginfo[12]), 0x10);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f103 020c 	add.w	r2, r3, #12
 8005730:	2310      	movs	r3, #16
 8005732:	2193      	movs	r1, #147	; 0x93
 8005734:	2072      	movs	r0, #114	; 0x72
 8005736:	f7fd fded 	bl	8003314 <BSP_I2C1_WriteReg>
 800573a:	4603      	mov	r3, r0
 800573c:	4a04      	ldr	r2, [pc, #16]	; (8005750 <TCS3430_print_reg+0x94>)
 800573e:	6013      	str	r3, [r2, #0]

	}

}
 8005740:	bf00      	nop
 8005742:	3770      	adds	r7, #112	; 0x70
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	08012d6c 	.word	0x08012d6c
 800574c:	08012d5c 	.word	0x08012d5c
 8005750:	200007bc 	.word	0x200007bc

08005754 <reset_Status>:

int32_t reset_Status(uint8_t *reginfo)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b082      	sub	sp, #8
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
	reginfo[12] = 0xFF;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	330c      	adds	r3, #12
 8005760:	22ff      	movs	r2, #255	; 0xff
 8005762:	701a      	strb	r2, [r3, #0]

	ret = BSP_I2C1_WriteReg(TCS3430_ADDR, STATUS_ADDR, reginfo+12, 1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f103 020c 	add.w	r2, r3, #12
 800576a:	2301      	movs	r3, #1
 800576c:	2193      	movs	r1, #147	; 0x93
 800576e:	2072      	movs	r0, #114	; 0x72
 8005770:	f7fd fdd0 	bl	8003314 <BSP_I2C1_WriteReg>
 8005774:	4603      	mov	r3, r0
 8005776:	4a04      	ldr	r2, [pc, #16]	; (8005788 <reset_Status+0x34>)
 8005778:	6013      	str	r3, [r2, #0]

	return ret;
 800577a:	4b03      	ldr	r3, [pc, #12]	; (8005788 <reset_Status+0x34>)
 800577c:	681b      	ldr	r3, [r3, #0]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	200007bc 	.word	0x200007bc

0800578c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined(VECT_TAB_SRAM) && defined(VECT_TAB_BASE_ADDRESS)  
  /* program in SRAMx */
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;  /* Vector Table Relocation in Internal SRAMx for CPU1 */
#else    /* program in FLASH */
  SCB->VTOR = VECT_TAB_OFFSET;              /* Vector Table Relocation in Internal FLASH */
 8005790:	4b26      	ldr	r3, [pc, #152]	; (800582c <SystemInit+0xa0>)
 8005792:	2200      	movs	r2, #0
 8005794:	609a      	str	r2, [r3, #8]
#endif

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <SystemInit+0xa0>)
 8005798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <SystemInit+0xa0>)
 800579e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80057a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80057a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00070000U;
 80057b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057ba:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80057be:	609a      	str	r2, [r3, #8]

  /* Reset PLLSAI1ON, PLLON, HSECSSON, HSEON, HSION, and MSIPLLON bits */
  RCC->CR &= (uint32_t)0xFAF6FEFBU;
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80057ca:	4b19      	ldr	r3, [pc, #100]	; (8005830 <SystemInit+0xa4>)
 80057cc:	4013      	ands	r3, r2
 80057ce:	600b      	str	r3, [r1, #0]

  /*!< Reset LSI1 and LSI2 bits */
  RCC->CSR &= (uint32_t)0xFFFFFFFAU;
 80057d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057dc:	f023 0305 	bic.w	r3, r3, #5
 80057e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  
  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 80057e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
    
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x22041000U;
 80057f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057fc:	4a0d      	ldr	r2, [pc, #52]	; (8005834 <SystemInit+0xa8>)
 80057fe:	60da      	str	r2, [r3, #12]

  /* Reset PLLSAI1CFGR register */
  RCC->PLLSAI1CFGR = 0x22041000U;
 8005800:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005804:	4a0b      	ldr	r2, [pc, #44]	; (8005834 <SystemInit+0xa8>)
 8005806:	611a      	str	r2, [r3, #16]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005812:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005816:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581c:	2200      	movs	r2, #0
 800581e:	619a      	str	r2, [r3, #24]
}
 8005820:	bf00      	nop
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr
 800582a:	bf00      	nop
 800582c:	e000ed00 	.word	0xe000ed00
 8005830:	faf6fefb 	.word	0xfaf6fefb
 8005834:	22041000 	.word	0x22041000

08005838 <LL_DBGMCU_EnableDBGSleepMode>:
{
 8005838:	b480      	push	{r7}
 800583a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4a04      	ldr	r2, [pc, #16]	; (8005854 <LL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	6053      	str	r3, [r2, #4]
}
 8005848:	bf00      	nop
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	e0042000 	.word	0xe0042000

08005858 <LL_DBGMCU_EnableDBGStopMode>:
{
 8005858:	b480      	push	{r7}
 800585a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800585c:	4b05      	ldr	r3, [pc, #20]	; (8005874 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	4a04      	ldr	r2, [pc, #16]	; (8005874 <LL_DBGMCU_EnableDBGStopMode+0x1c>)
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	6053      	str	r3, [r2, #4]
}
 8005868:	bf00      	nop
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	e0042000 	.word	0xe0042000

08005878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800587e:	2300      	movs	r3, #0
 8005880:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0U)
  __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005882:	4b0c      	ldr	r3, [pc, #48]	; (80058b4 <HAL_Init+0x3c>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a0b      	ldr	r2, [pc, #44]	; (80058b4 <HAL_Init+0x3c>)
 8005888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800588c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800588e:	2003      	movs	r0, #3
 8005890:	f000 f9c0 	bl	8005c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005894:	2000      	movs	r0, #0
 8005896:	f000 f80f 	bl	80058b8 <HAL_InitTick>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	71fb      	strb	r3, [r7, #7]
 80058a4:	e001      	b.n	80058aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80058a6:	f7fd faa4 	bl	8002df2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80058aa:	79fb      	ldrb	r3, [r7, #7]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3708      	adds	r7, #8
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	58004000 	.word	0x58004000

080058b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80058c0:	2300      	movs	r3, #0
 80058c2:	73fb      	strb	r3, [r7, #15]

  if ((uint32_t)uwTickFreq != 0U)
 80058c4:	4b17      	ldr	r3, [pc, #92]	; (8005924 <HAL_InitTick+0x6c>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d024      	beq.n	8005916 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80058cc:	f002 fed0 	bl	8008670 <HAL_RCC_GetHCLKFreq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4b14      	ldr	r3, [pc, #80]	; (8005924 <HAL_InitTick+0x6c>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	4619      	mov	r1, r3
 80058d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80058dc:	fbb3 f3f1 	udiv	r3, r3, r1
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f9d6 	bl	8005c96 <HAL_SYSTICK_Config>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d10f      	bne.n	8005910 <HAL_InitTick+0x58>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2b0f      	cmp	r3, #15
 80058f4:	d809      	bhi.n	800590a <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80058f6:	2200      	movs	r2, #0
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	f04f 30ff 	mov.w	r0, #4294967295
 80058fe:	f000 f994 	bl	8005c2a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005902:	4a09      	ldr	r2, [pc, #36]	; (8005928 <HAL_InitTick+0x70>)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	e007      	b.n	800591a <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	73fb      	strb	r3, [r7, #15]
 800590e:	e004      	b.n	800591a <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005910:	2301      	movs	r3, #1
 8005912:	73fb      	strb	r3, [r7, #15]
 8005914:	e001      	b.n	800591a <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800591a:	7bfb      	ldrb	r3, [r7, #15]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	20000040 	.word	0x20000040
 8005928:	2000003c 	.word	0x2000003c

0800592c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800592c:	b480      	push	{r7}
 800592e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005930:	4b06      	ldr	r3, [pc, #24]	; (800594c <HAL_IncTick+0x20>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	4b06      	ldr	r3, [pc, #24]	; (8005950 <HAL_IncTick+0x24>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4413      	add	r3, r2
 800593c:	4a04      	ldr	r2, [pc, #16]	; (8005950 <HAL_IncTick+0x24>)
 800593e:	6013      	str	r3, [r2, #0]
}
 8005940:	bf00      	nop
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr
 800594a:	bf00      	nop
 800594c:	20000040 	.word	0x20000040
 8005950:	200007c0 	.word	0x200007c0

08005954 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005954:	b480      	push	{r7}
 8005956:	af00      	add	r7, sp, #0
  return uwTick;
 8005958:	4b03      	ldr	r3, [pc, #12]	; (8005968 <HAL_GetTick+0x14>)
 800595a:	681b      	ldr	r3, [r3, #0]
}
 800595c:	4618      	mov	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	200007c0 	.word	0x200007c0

0800596c <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 800596c:	b480      	push	{r7}
 800596e:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8005970:	4b03      	ldr	r3, [pc, #12]	; (8005980 <HAL_GetTickPrio+0x14>)
 8005972:	681b      	ldr	r3, [r3, #0]
}
 8005974:	4618      	mov	r0, r3
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr
 800597e:	bf00      	nop
 8005980:	2000003c 	.word	0x2000003c

08005984 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8005984:	b480      	push	{r7}
 8005986:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8005988:	4b03      	ldr	r3, [pc, #12]	; (8005998 <HAL_GetTickFreq+0x14>)
 800598a:	781b      	ldrb	r3, [r3, #0]
}
 800598c:	4618      	mov	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	20000040 	.word	0x20000040

0800599c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 80059a0:	f7ff ff4a 	bl	8005838 <LL_DBGMCU_EnableDBGSleepMode>
}
 80059a4:	bf00      	nop
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 80059ac:	f7ff ff54 	bl	8005858 <LL_DBGMCU_EnableDBGStopMode>
}
 80059b0:	bf00      	nop
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f003 0307 	and.w	r3, r3, #7
 80059c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <__NVIC_SetPriorityGrouping+0x44>)
 80059c6:	68db      	ldr	r3, [r3, #12]
 80059c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059d0:	4013      	ands	r3, r2
 80059d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059e6:	4a04      	ldr	r2, [pc, #16]	; (80059f8 <__NVIC_SetPriorityGrouping+0x44>)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	60d3      	str	r3, [r2, #12]
}
 80059ec:	bf00      	nop
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	e000ed00 	.word	0xe000ed00

080059fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a00:	4b04      	ldr	r3, [pc, #16]	; (8005a14 <__NVIC_GetPriorityGrouping+0x18>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	0a1b      	lsrs	r3, r3, #8
 8005a06:	f003 0307 	and.w	r3, r3, #7
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr
 8005a14:	e000ed00 	.word	0xe000ed00

08005a18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	4603      	mov	r3, r0
 8005a20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	db0b      	blt.n	8005a42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	f003 021f 	and.w	r2, r3, #31
 8005a30:	4907      	ldr	r1, [pc, #28]	; (8005a50 <__NVIC_EnableIRQ+0x38>)
 8005a32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a36:	095b      	lsrs	r3, r3, #5
 8005a38:	2001      	movs	r0, #1
 8005a3a:	fa00 f202 	lsl.w	r2, r0, r2
 8005a3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005a42:	bf00      	nop
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	e000e100 	.word	0xe000e100

08005a54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	db12      	blt.n	8005a8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	f003 021f 	and.w	r2, r3, #31
 8005a6c:	490a      	ldr	r1, [pc, #40]	; (8005a98 <__NVIC_DisableIRQ+0x44>)
 8005a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a72:	095b      	lsrs	r3, r3, #5
 8005a74:	2001      	movs	r0, #1
 8005a76:	fa00 f202 	lsl.w	r2, r0, r2
 8005a7a:	3320      	adds	r3, #32
 8005a7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005a80:	f3bf 8f4f 	dsb	sy
}
 8005a84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005a86:	f3bf 8f6f 	isb	sy
}
 8005a8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005a8c:	bf00      	nop
 8005a8e:	370c      	adds	r7, #12
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	e000e100 	.word	0xe000e100

08005a9c <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b083      	sub	sp, #12
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	db0c      	blt.n	8005ac8 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	f003 021f 	and.w	r2, r3, #31
 8005ab4:	4907      	ldr	r1, [pc, #28]	; (8005ad4 <__NVIC_SetPendingIRQ+0x38>)
 8005ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aba:	095b      	lsrs	r3, r3, #5
 8005abc:	2001      	movs	r0, #1
 8005abe:	fa00 f202 	lsl.w	r2, r0, r2
 8005ac2:	3340      	adds	r3, #64	; 0x40
 8005ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	e000e100 	.word	0xe000e100

08005ad8 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	db0c      	blt.n	8005b04 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005aea:	79fb      	ldrb	r3, [r7, #7]
 8005aec:	f003 021f 	and.w	r2, r3, #31
 8005af0:	4907      	ldr	r1, [pc, #28]	; (8005b10 <__NVIC_ClearPendingIRQ+0x38>)
 8005af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005af6:	095b      	lsrs	r3, r3, #5
 8005af8:	2001      	movs	r0, #1
 8005afa:	fa00 f202 	lsl.w	r2, r0, r2
 8005afe:	3360      	adds	r3, #96	; 0x60
 8005b00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005b04:	bf00      	nop
 8005b06:	370c      	adds	r7, #12
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	e000e100 	.word	0xe000e100

08005b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	db0a      	blt.n	8005b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	490c      	ldr	r1, [pc, #48]	; (8005b60 <__NVIC_SetPriority+0x4c>)
 8005b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b32:	0112      	lsls	r2, r2, #4
 8005b34:	b2d2      	uxtb	r2, r2
 8005b36:	440b      	add	r3, r1
 8005b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b3c:	e00a      	b.n	8005b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	b2da      	uxtb	r2, r3
 8005b42:	4908      	ldr	r1, [pc, #32]	; (8005b64 <__NVIC_SetPriority+0x50>)
 8005b44:	79fb      	ldrb	r3, [r7, #7]
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	3b04      	subs	r3, #4
 8005b4c:	0112      	lsls	r2, r2, #4
 8005b4e:	b2d2      	uxtb	r2, r2
 8005b50:	440b      	add	r3, r1
 8005b52:	761a      	strb	r2, [r3, #24]
}
 8005b54:	bf00      	nop
 8005b56:	370c      	adds	r7, #12
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr
 8005b60:	e000e100 	.word	0xe000e100
 8005b64:	e000ed00 	.word	0xe000ed00

08005b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b68:	b480      	push	{r7}
 8005b6a:	b089      	sub	sp, #36	; 0x24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f003 0307 	and.w	r3, r3, #7
 8005b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f1c3 0307 	rsb	r3, r3, #7
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	bf28      	it	cs
 8005b86:	2304      	movcs	r3, #4
 8005b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	3304      	adds	r3, #4
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d902      	bls.n	8005b98 <NVIC_EncodePriority+0x30>
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	3b03      	subs	r3, #3
 8005b96:	e000      	b.n	8005b9a <NVIC_EncodePriority+0x32>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba6:	43da      	mvns	r2, r3
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	401a      	ands	r2, r3
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8005bba:	43d9      	mvns	r1, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bc0:	4313      	orrs	r3, r2
         );
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3724      	adds	r7, #36	; 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b082      	sub	sp, #8
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	3b01      	subs	r3, #1
 8005bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005be0:	d301      	bcc.n	8005be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005be2:	2301      	movs	r3, #1
 8005be4:	e00f      	b.n	8005c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005be6:	4a0a      	ldr	r2, [pc, #40]	; (8005c10 <SysTick_Config+0x40>)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3b01      	subs	r3, #1
 8005bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005bee:	210f      	movs	r1, #15
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bf4:	f7ff ff8e 	bl	8005b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005bf8:	4b05      	ldr	r3, [pc, #20]	; (8005c10 <SysTick_Config+0x40>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005bfe:	4b04      	ldr	r3, [pc, #16]	; (8005c10 <SysTick_Config+0x40>)
 8005c00:	2207      	movs	r2, #7
 8005c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	e000e010 	.word	0xe000e010

08005c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f7ff fec9 	bl	80059b4 <__NVIC_SetPriorityGrouping>
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	4603      	mov	r3, r0
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	607a      	str	r2, [r7, #4]
 8005c36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005c38:	f7ff fee0 	bl	80059fc <__NVIC_GetPriorityGrouping>
 8005c3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68b9      	ldr	r1, [r7, #8]
 8005c42:	6978      	ldr	r0, [r7, #20]
 8005c44:	f7ff ff90 	bl	8005b68 <NVIC_EncodePriority>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c4e:	4611      	mov	r1, r2
 8005c50:	4618      	mov	r0, r3
 8005c52:	f7ff ff5f 	bl	8005b14 <__NVIC_SetPriority>
}
 8005c56:	bf00      	nop
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	4603      	mov	r3, r0
 8005c66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7ff fed3 	bl	8005a18 <__NVIC_EnableIRQ>
}
 8005c72:	bf00      	nop
 8005c74:	3708      	adds	r7, #8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	4603      	mov	r3, r0
 8005c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7ff fee3 	bl	8005a54 <__NVIC_DisableIRQ>
}
 8005c8e:	bf00      	nop
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c96:	b580      	push	{r7, lr}
 8005c98:	b082      	sub	sp, #8
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff ff96 	bl	8005bd0 <SysTick_Config>
 8005ca4:	4603      	mov	r3, r0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 8005cb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff feed 	bl	8005a9c <__NVIC_SetPendingIRQ>
}
 8005cc2:	bf00      	nop
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32wbxxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8005cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff fefd 	bl	8005ad8 <__NVIC_ClearPendingIRQ>
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
	...

08005ce8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d101      	bne.n	8005cfa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	e08e      	b.n	8005e18 <HAL_DMA_Init+0x130>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

#if defined(DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	461a      	mov	r2, r3
 8005d00:	4b47      	ldr	r3, [pc, #284]	; (8005e20 <HAL_DMA_Init+0x138>)
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d80f      	bhi.n	8005d26 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	4b45      	ldr	r3, [pc, #276]	; (8005e24 <HAL_DMA_Init+0x13c>)
 8005d0e:	4413      	add	r3, r2
 8005d10:	4a45      	ldr	r2, [pc, #276]	; (8005e28 <HAL_DMA_Init+0x140>)
 8005d12:	fba2 2303 	umull	r2, r3, r2, r3
 8005d16:	091b      	lsrs	r3, r3, #4
 8005d18:	009a      	lsls	r2, r3, #2
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	4a42      	ldr	r2, [pc, #264]	; (8005e2c <HAL_DMA_Init+0x144>)
 8005d22:	641a      	str	r2, [r3, #64]	; 0x40
 8005d24:	e00e      	b.n	8005d44 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4b40      	ldr	r3, [pc, #256]	; (8005e30 <HAL_DMA_Init+0x148>)
 8005d2e:	4413      	add	r3, r2
 8005d30:	4a3d      	ldr	r2, [pc, #244]	; (8005e28 <HAL_DMA_Init+0x140>)
 8005d32:	fba2 2303 	umull	r2, r3, r2, r3
 8005d36:	091b      	lsrs	r3, r3, #4
 8005d38:	009a      	lsls	r2, r3, #2
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a3c      	ldr	r2, [pc, #240]	; (8005e34 <HAL_DMA_Init+0x14c>)
 8005d42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2202      	movs	r2, #2
 8005d48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d5e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	691b      	ldr	r3, [r3, #16]
 8005d6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6a1b      	ldr	r3, [r3, #32]
 8005d86:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa74 	bl	8006284 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005da4:	d102      	bne.n	8005dac <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8005db8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dbe:	687a      	ldr	r2, [r7, #4]
 8005dc0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dc2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d010      	beq.n	8005dee <HAL_DMA_Init+0x106>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	d80c      	bhi.n	8005dee <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa93 	bl	8006300 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dde:	2200      	movs	r2, #0
 8005de0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005dea:	605a      	str	r2, [r3, #4]
 8005dec:	e008      	b.n	8005e00 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	40020407 	.word	0x40020407
 8005e24:	bffdfff8 	.word	0xbffdfff8
 8005e28:	cccccccd 	.word	0xcccccccd
 8005e2c:	40020000 	.word	0x40020000
 8005e30:	bffdfbf8 	.word	0xbffdfbf8
 8005e34:	40020400 	.word	0x40020400

08005e38 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
 8005e44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_DMA_Start_IT+0x20>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e066      	b.n	8005f26 <HAL_DMA_Start_IT+0xee>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d155      	bne.n	8005f18 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0201 	bic.w	r2, r2, #1
 8005e88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	68b9      	ldr	r1, [r7, #8]
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	f000 f9b9 	bl	8006208 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 020e 	orr.w	r2, r2, #14
 8005eac:	601a      	str	r2, [r3, #0]
 8005eae:	e00f      	b.n	8005ed0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f022 0204 	bic.w	r2, r2, #4
 8005ebe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f042 020a 	orr.w	r2, r2, #10
 8005ece:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d007      	beq.n	8005eee <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ee8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005eec:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f04:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0201 	orr.w	r2, r2, #1
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	e005      	b.n	8005f24 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005f20:	2302      	movs	r3, #2
 8005f22:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]

  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d101      	bne.n	8005f40 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	e04f      	b.n	8005fe0 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d008      	beq.n	8005f5e <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e040      	b.n	8005fe0 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 020e 	bic.w	r2, r2, #14
 8005f6c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f92:	f003 021c 	and.w	r2, r3, #28
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	2101      	movs	r1, #1
 8005f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8005fa0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005faa:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005fcc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <HAL_DMA_Abort_IT>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b02      	cmp	r3, #2
 8006002:	d005      	beq.n	8006010 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2204      	movs	r2, #4
 8006008:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	73fb      	strb	r3, [r7, #15]
 800600e:	e047      	b.n	80060a0 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681a      	ldr	r2, [r3, #0]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f022 020e 	bic.w	r2, r2, #14
 800601e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0201 	bic.w	r2, r2, #1
 800602e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800603e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006044:	f003 021c 	and.w	r2, r3, #28
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604c:	2101      	movs	r1, #1
 800604e:	fa01 f202 	lsl.w	r2, r1, r2
 8006052:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800605c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606a:	681a      	ldr	r2, [r3, #0]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006074:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800607e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006094:	2b00      	cmp	r3, #0
 8006096:	d003      	beq.n	80060a0 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	4798      	blx	r3
    }
  }
  return status;
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}

080060aa <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060aa:	b580      	push	{r7, lr}
 80060ac:	b084      	sub	sp, #16
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	f003 031c 	and.w	r3, r3, #28
 80060ca:	2204      	movs	r2, #4
 80060cc:	409a      	lsls	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d026      	beq.n	8006124 <HAL_DMA_IRQHandler+0x7a>
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	f003 0304 	and.w	r3, r3, #4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d021      	beq.n	8006124 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0320 	and.w	r3, r3, #32
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d107      	bne.n	80060fe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f022 0204 	bic.w	r2, r2, #4
 80060fc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU));
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006102:	f003 021c 	and.w	r2, r3, #28
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2104      	movs	r1, #4
 800610c:	fa01 f202 	lsl.w	r2, r1, r2
 8006110:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006116:	2b00      	cmp	r3, #0
 8006118:	d071      	beq.n	80061fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8006122:	e06c      	b.n	80061fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006128:	f003 031c 	and.w	r3, r3, #28
 800612c:	2202      	movs	r2, #2
 800612e:	409a      	lsls	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4013      	ands	r3, r2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d02e      	beq.n	8006196 <HAL_DMA_IRQHandler+0xec>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	f003 0302 	and.w	r3, r3, #2
 800613e:	2b00      	cmp	r3, #0
 8006140:	d029      	beq.n	8006196 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0320 	and.w	r3, r3, #32
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10b      	bne.n	8006168 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	681a      	ldr	r2, [r3, #0]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f022 020a 	bic.w	r2, r2, #10
 800615e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800616c:	f003 021c 	and.w	r2, r3, #28
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	2102      	movs	r1, #2
 8006176:	fa01 f202 	lsl.w	r2, r1, r2
 800617a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2200      	movs	r2, #0
 8006180:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	2b00      	cmp	r3, #0
 800618a:	d038      	beq.n	80061fe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8006194:	e033      	b.n	80061fe <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	f003 031c 	and.w	r3, r3, #28
 800619e:	2208      	movs	r2, #8
 80061a0:	409a      	lsls	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	4013      	ands	r3, r2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d02a      	beq.n	8006200 <HAL_DMA_IRQHandler+0x156>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f003 0308 	and.w	r3, r3, #8
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d025      	beq.n	8006200 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f022 020e 	bic.w	r2, r2, #14
 80061c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061c8:	f003 021c 	and.w	r2, r3, #28
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d0:	2101      	movs	r1, #1
 80061d2:	fa01 f202 	lsl.w	r2, r1, r2
 80061d6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d004      	beq.n	8006200 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80061fe:	bf00      	nop
 8006200:	bf00      	nop
}
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
 8006214:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800621e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006224:	2b00      	cmp	r3, #0
 8006226:	d004      	beq.n	8006232 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006230:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	f003 021c 	and.w	r2, r3, #28
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2101      	movs	r1, #1
 8006240:	fa01 f202 	lsl.w	r2, r1, r2
 8006244:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	2b10      	cmp	r3, #16
 8006254:	d108      	bne.n	8006268 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	687a      	ldr	r2, [r7, #4]
 800625c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006266:	e007      	b.n	8006278 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	60da      	str	r2, [r3, #12]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
#if defined(DMA2)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	461a      	mov	r2, r3
 8006292:	4b17      	ldr	r3, [pc, #92]	; (80062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8006294:	429a      	cmp	r2, r3
 8006296:	d80a      	bhi.n	80062ae <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629c:	089b      	lsrs	r3, r3, #2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80062a4:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	6493      	str	r3, [r2, #72]	; 0x48
 80062ac:	e007      	b.n	80062be <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	009a      	lsls	r2, r3, #2
 80062b6:	4b0f      	ldr	r3, [pc, #60]	; (80062f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80062b8:	4413      	add	r3, r2
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	6493      	str	r3, [r2, #72]	; 0x48
  }
#else
  /* DMA1 */
  hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
#endif /* DMA2 */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	3b08      	subs	r3, #8
 80062c6:	4a0c      	ldr	r2, [pc, #48]	; (80062f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80062c8:	fba2 2303 	umull	r2, r3, r2, r3
 80062cc:	091b      	lsrs	r3, r3, #4
 80062ce:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80062d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	f003 031f 	and.w	r3, r3, #31
 80062dc:	2201      	movs	r2, #1
 80062de:	409a      	lsls	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80062e4:	bf00      	nop
 80062e6:	3714      	adds	r7, #20
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40020407 	.word	0x40020407
 80062f4:	4002081c 	.word	0x4002081c
 80062f8:	cccccccd 	.word	0xcccccccd
 80062fc:	40020880 	.word	0x40020880

08006300 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006310:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8006316:	4413      	add	r3, r2
 8006318:	009b      	lsls	r3, r3, #2
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4a09      	ldr	r2, [pc, #36]	; (8006348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x48>)
 8006324:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	3b01      	subs	r3, #1
 800632a:	f003 0303 	and.w	r3, r3, #3
 800632e:	2201      	movs	r2, #1
 8006330:	409a      	lsls	r2, r3
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8006336:	bf00      	nop
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	1000823f 	.word	0x1000823f
 8006348:	40020940 	.word	0x40020940

0800634c <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA channel.
  * @param  pSyncConfig Pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  /*Check if the DMA state is ready */
  if (hdma->State == HAL_DMA_STATE_READY)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b01      	cmp	r3, #1
 8006360:	d12b      	bne.n	80063ba <HAL_DMAEx_ConfigMuxSync+0x6e>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_DMAEx_ConfigMuxSync+0x24>
 800636c:	2302      	movs	r3, #2
 800636e:	e025      	b.n	80063bc <HAL_DMAEx_ConfigMuxSync+0x70>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG(hdma->DMAmuxChannel->CCR, \
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b12      	ldr	r3, [pc, #72]	; (80063c8 <HAL_DMAEx_ConfigMuxSync+0x7c>)
 8006380:	4013      	ands	r3, r2
 8006382:	683a      	ldr	r2, [r7, #0]
 8006384:	6811      	ldr	r1, [r2, #0]
 8006386:	683a      	ldr	r2, [r7, #0]
 8006388:	68d2      	ldr	r2, [r2, #12]
 800638a:	3a01      	subs	r2, #1
 800638c:	04d2      	lsls	r2, r2, #19
 800638e:	4311      	orrs	r1, r2
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	6852      	ldr	r2, [r2, #4]
 8006394:	4311      	orrs	r1, r2
 8006396:	683a      	ldr	r2, [r7, #0]
 8006398:	7a12      	ldrb	r2, [r2, #8]
 800639a:	0412      	lsls	r2, r2, #16
 800639c:	4311      	orrs	r1, r2
 800639e:	683a      	ldr	r2, [r7, #0]
 80063a0:	7a52      	ldrb	r2, [r2, #9]
 80063a2:	0252      	lsls	r2, r2, #9
 80063a4:	4311      	orrs	r1, r2
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80063aa:	430b      	orrs	r3, r1
 80063ac:	6013      	str	r3, [r2, #0]
                pSyncConfig->SyncPolarity                                       | \
                ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)                 | \
                ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos)));

    /* Process UnLocked */
    __HAL_UNLOCK(hdma);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	e000      	b.n	80063bc <HAL_DMAEx_ConfigMuxSync+0x70>
  }
  else
  {
    /*DMA State not Ready*/
    return HAL_ERROR;
 80063ba:	2301      	movs	r3, #1
  }
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	e000fdff 	.word	0xe000fdff

080063cc <HAL_EXTI_GenerateSWI>:
  * @brief  Generate a software interrupt for a dedicated line.
  * @param  hexti Exti handle.
  * @retval None.
  */
void HAL_EXTI_GenerateSWI(EXTI_HandleTypeDef *hexti)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b087      	sub	sp, #28
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check parameters */
  assert_param(IS_EXTI_LINE(hexti->Line));
  assert_param(IS_EXTI_CONFIG_LINE(hexti->Line));

  /* compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	0c1b      	lsrs	r3, r3, #16
 80063da:	f003 0301 	and.w	r3, r3, #1
 80063de:	617b      	str	r3, [r7, #20]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 031f 	and.w	r3, r3, #31
 80063e8:	2201      	movs	r2, #1
 80063ea:	fa02 f303 	lsl.w	r3, r2, r3
 80063ee:	613b      	str	r3, [r7, #16]

  regaddr = (&EXTI->SWIER1 + (EXTI_CONFIG_OFFSET * offset));
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	015b      	lsls	r3, r3, #5
 80063f4:	f103 43b0 	add.w	r3, r3, #1476395008	; 0x58000000
 80063f8:	f603 0308 	addw	r3, r3, #2056	; 0x808
 80063fc:	60fb      	str	r3, [r7, #12]
  *regaddr = maskline;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	693a      	ldr	r2, [r7, #16]
 8006402:	601a      	str	r2, [r3, #0]
}
 8006404:	bf00      	nop
 8006406:	371c      	adds	r7, #28
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006410:	b480      	push	{r7}
 8006412:	b087      	sub	sp, #28
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800641a:	2300      	movs	r3, #0
 800641c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800641e:	e14c      	b.n	80066ba <HAL_GPIO_Init+0x2aa>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	2101      	movs	r1, #1
 8006426:	697b      	ldr	r3, [r7, #20]
 8006428:	fa01 f303 	lsl.w	r3, r1, r3
 800642c:	4013      	ands	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 813e 	beq.w	80066b4 <HAL_GPIO_Init+0x2a4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	2b01      	cmp	r3, #1
 8006442:	d005      	beq.n	8006450 <HAL_GPIO_Init+0x40>
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	f003 0303 	and.w	r3, r3, #3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d130      	bne.n	80064b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	005b      	lsls	r3, r3, #1
 800645a:	2203      	movs	r2, #3
 800645c:	fa02 f303 	lsl.w	r3, r2, r3
 8006460:	43db      	mvns	r3, r3
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	4013      	ands	r3, r2
 8006466:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	68da      	ldr	r2, [r3, #12]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	005b      	lsls	r3, r3, #1
 8006470:	fa02 f303 	lsl.w	r3, r2, r3
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	693a      	ldr	r2, [r7, #16]
 800647e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006486:	2201      	movs	r2, #1
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	fa02 f303 	lsl.w	r3, r2, r3
 800648e:	43db      	mvns	r3, r3
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	4013      	ands	r3, r2
 8006494:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	091b      	lsrs	r3, r3, #4
 800649c:	f003 0201 	and.w	r2, r3, #1
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	693a      	ldr	r2, [r7, #16]
 80064a8:	4313      	orrs	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d017      	beq.n	80064ee <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	2203      	movs	r2, #3
 80064ca:	fa02 f303 	lsl.w	r3, r2, r3
 80064ce:	43db      	mvns	r3, r3
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4013      	ands	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	005b      	lsls	r3, r3, #1
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	693a      	ldr	r2, [r7, #16]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	f003 0303 	and.w	r3, r3, #3
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d123      	bne.n	8006542 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	08da      	lsrs	r2, r3, #3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	3208      	adds	r2, #8
 8006502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006506:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	220f      	movs	r2, #15
 8006512:	fa02 f303 	lsl.w	r3, r2, r3
 8006516:	43db      	mvns	r3, r3
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4013      	ands	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	f003 0307 	and.w	r3, r3, #7
 8006528:	009b      	lsls	r3, r3, #2
 800652a:	fa02 f303 	lsl.w	r3, r2, r3
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	4313      	orrs	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	08da      	lsrs	r2, r3, #3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	3208      	adds	r2, #8
 800653c:	6939      	ldr	r1, [r7, #16]
 800653e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	2203      	movs	r2, #3
 800654e:	fa02 f303 	lsl.w	r3, r2, r3
 8006552:	43db      	mvns	r3, r3
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	4013      	ands	r3, r2
 8006558:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f003 0203 	and.w	r2, r3, #3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	005b      	lsls	r3, r3, #1
 8006566:	fa02 f303 	lsl.w	r3, r2, r3
 800656a:	693a      	ldr	r2, [r7, #16]
 800656c:	4313      	orrs	r3, r2
 800656e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	693a      	ldr	r2, [r7, #16]
 8006574:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 8098 	beq.w	80066b4 <HAL_GPIO_Init+0x2a4>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8006584:	4a54      	ldr	r2, [pc, #336]	; (80066d8 <HAL_GPIO_Init+0x2c8>)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	089b      	lsrs	r3, r3, #2
 800658a:	3302      	adds	r3, #2
 800658c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006590:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	f003 0303 	and.w	r3, r3, #3
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	220f      	movs	r2, #15
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	43db      	mvns	r3, r3
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	4013      	ands	r3, r2
 80065a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80065ae:	d019      	beq.n	80065e4 <HAL_GPIO_Init+0x1d4>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a4a      	ldr	r2, [pc, #296]	; (80066dc <HAL_GPIO_Init+0x2cc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <HAL_GPIO_Init+0x1d0>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a49      	ldr	r2, [pc, #292]	; (80066e0 <HAL_GPIO_Init+0x2d0>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00d      	beq.n	80065dc <HAL_GPIO_Init+0x1cc>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a48      	ldr	r2, [pc, #288]	; (80066e4 <HAL_GPIO_Init+0x2d4>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d007      	beq.n	80065d8 <HAL_GPIO_Init+0x1c8>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a47      	ldr	r2, [pc, #284]	; (80066e8 <HAL_GPIO_Init+0x2d8>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d101      	bne.n	80065d4 <HAL_GPIO_Init+0x1c4>
 80065d0:	2304      	movs	r3, #4
 80065d2:	e008      	b.n	80065e6 <HAL_GPIO_Init+0x1d6>
 80065d4:	2307      	movs	r3, #7
 80065d6:	e006      	b.n	80065e6 <HAL_GPIO_Init+0x1d6>
 80065d8:	2303      	movs	r3, #3
 80065da:	e004      	b.n	80065e6 <HAL_GPIO_Init+0x1d6>
 80065dc:	2302      	movs	r3, #2
 80065de:	e002      	b.n	80065e6 <HAL_GPIO_Init+0x1d6>
 80065e0:	2301      	movs	r3, #1
 80065e2:	e000      	b.n	80065e6 <HAL_GPIO_Init+0x1d6>
 80065e4:	2300      	movs	r3, #0
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	f002 0203 	and.w	r2, r2, #3
 80065ec:	0092      	lsls	r2, r2, #2
 80065ee:	4093      	lsls	r3, r2
 80065f0:	693a      	ldr	r2, [r7, #16]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80065f6:	4938      	ldr	r1, [pc, #224]	; (80066d8 <HAL_GPIO_Init+0x2c8>)
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	089b      	lsrs	r3, r3, #2
 80065fc:	3302      	adds	r3, #2
 80065fe:	693a      	ldr	r2, [r7, #16]
 8006600:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006604:	4b39      	ldr	r3, [pc, #228]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	43db      	mvns	r3, r3
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4013      	ands	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800661c:	2b00      	cmp	r3, #0
 800661e:	d003      	beq.n	8006628 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006628:	4a30      	ldr	r2, [pc, #192]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800662e:	4b2f      	ldr	r3, [pc, #188]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	43db      	mvns	r3, r3
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4013      	ands	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	4313      	orrs	r3, r2
 8006650:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006652:	4a26      	ldr	r2, [pc, #152]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006658:	4b24      	ldr	r3, [pc, #144]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 800665a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	43db      	mvns	r3, r3
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	4013      	ands	r3, r2
 8006668:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800667e:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

        temp = EXTI->EMR1;
 8006686:	4b19      	ldr	r3, [pc, #100]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 8006688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800668c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	43db      	mvns	r3, r3
 8006692:	693a      	ldr	r2, [r7, #16]
 8006694:	4013      	ands	r3, r2
 8006696:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80066a4:	693a      	ldr	r2, [r7, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	4313      	orrs	r3, r2
 80066aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80066ac:	4a0f      	ldr	r2, [pc, #60]	; (80066ec <HAL_GPIO_Init+0x2dc>)
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      }
    }

    position++;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3301      	adds	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	fa22 f303 	lsr.w	r3, r2, r3
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f47f aeab 	bne.w	8006420 <HAL_GPIO_Init+0x10>
  }
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	40010000 	.word	0x40010000
 80066dc:	48000400 	.word	0x48000400
 80066e0:	48000800 	.word	0x48000800
 80066e4:	48000c00 	.word	0x48000c00
 80066e8:	48001000 	.word	0x48001000
 80066ec:	58000800 	.word	0x58000800

080066f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	807b      	strh	r3, [r7, #2]
 80066fc:	4613      	mov	r3, r2
 80066fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006700:	787b      	ldrb	r3, [r7, #1]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d003      	beq.n	800670e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006706:	887a      	ldrh	r2, [r7, #2]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800670c:	e002      	b.n	8006714 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800670e:	887a      	ldrh	r2, [r7, #2]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	4603      	mov	r3, r0
 8006728:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800672a:	4b08      	ldr	r3, [pc, #32]	; (800674c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800672c:	68da      	ldr	r2, [r3, #12]
 800672e:	88fb      	ldrh	r3, [r7, #6]
 8006730:	4013      	ands	r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d006      	beq.n	8006744 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006736:	4a05      	ldr	r2, [pc, #20]	; (800674c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800673c:	88fb      	ldrh	r3, [r7, #6]
 800673e:	4618      	mov	r0, r3
 8006740:	f7fb f8d9 	bl	80018f6 <HAL_GPIO_EXTI_Callback>
  }
}
 8006744:	bf00      	nop
 8006746:	3708      	adds	r7, #8
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}
 800674c:	58000800 	.word	0x58000800

08006750 <HAL_HSEM_IRQHandler>:
/**
  * @brief  This function handles HSEM interrupt request
  * @retval None
  */
void HAL_HSEM_IRQHandler(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b082      	sub	sp, #8
 8006754:	af00      	add	r7, sp, #0
  uint32_t statusreg;
  /* Get the list of masked freed semaphores*/
  statusreg = HSEM_COMMON->MISR;
 8006756:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <HAL_HSEM_IRQHandler+0x30>)
 8006758:	68db      	ldr	r3, [r3, #12]
 800675a:	607b      	str	r3, [r7, #4]

  /*Disable Interrupts*/
  HSEM_COMMON->IER &= ~((uint32_t)statusreg);
 800675c:	4b08      	ldr	r3, [pc, #32]	; (8006780 <HAL_HSEM_IRQHandler+0x30>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	43db      	mvns	r3, r3
 8006764:	4906      	ldr	r1, [pc, #24]	; (8006780 <HAL_HSEM_IRQHandler+0x30>)
 8006766:	4013      	ands	r3, r2
 8006768:	600b      	str	r3, [r1, #0]

  /*Clear Flags*/
  HSEM_COMMON->ICR = ((uint32_t)statusreg);
 800676a:	4a05      	ldr	r2, [pc, #20]	; (8006780 <HAL_HSEM_IRQHandler+0x30>)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6053      	str	r3, [r2, #4]

  /* Call FreeCallback */
  HAL_HSEM_FreeCallback(statusreg);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f000 f807 	bl	8006784 <HAL_HSEM_FreeCallback>
}
 8006776:	bf00      	nop
 8006778:	3708      	adds	r7, #8
 800677a:	46bd      	mov	sp, r7
 800677c:	bd80      	pop	{r7, pc}
 800677e:	bf00      	nop
 8006780:	58001500 	.word	0x58001500

08006784 <HAL_HSEM_FreeCallback>:
  * @brief Semaphore Released Callback.
  * @param SemMask: Mask of Released semaphores
  * @retval None
  */
__weak void HAL_HSEM_FreeCallback(uint32_t SemMask)
{
 8006784:	b480      	push	{r7}
 8006786:	b083      	sub	sp, #12
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  UNUSED(SemMask);

  /* NOTE : This function should not be modified, when the callback is needed,
  the HAL_HSEM_FreeCallback can be implemented in the user file
    */
}
 800678c:	bf00      	nop
 800678e:	370c      	adds	r7, #12
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr

08006798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d101      	bne.n	80067aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	e081      	b.n	80068ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d106      	bne.n	80067c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 f879 	bl	80068b6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2224      	movs	r2, #36	; 0x24
 80067c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80067e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	2b01      	cmp	r3, #1
 8006800:	d107      	bne.n	8006812 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689a      	ldr	r2, [r3, #8]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800680e:	609a      	str	r2, [r3, #8]
 8006810:	e006      	b.n	8006820 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800681e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	2b02      	cmp	r3, #2
 8006826:	d104      	bne.n	8006832 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006830:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	687a      	ldr	r2, [r7, #4]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006844:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68da      	ldr	r2, [r3, #12]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006854:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	430a      	orrs	r2, r1
 800686e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	69d9      	ldr	r1, [r3, #28]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a1a      	ldr	r2, [r3, #32]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0201 	orr.w	r2, r2, #1
 800688e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2200      	movs	r2, #0
 8006894:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3708      	adds	r7, #8
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80068b6:	b480      	push	{r7}
 80068b8:	b083      	sub	sp, #12
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80068be:	bf00      	nop
 80068c0:	370c      	adds	r7, #12
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b088      	sub	sp, #32
 80068d0:	af02      	add	r7, sp, #8
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	4608      	mov	r0, r1
 80068d6:	4611      	mov	r1, r2
 80068d8:	461a      	mov	r2, r3
 80068da:	4603      	mov	r3, r0
 80068dc:	817b      	strh	r3, [r7, #10]
 80068de:	460b      	mov	r3, r1
 80068e0:	813b      	strh	r3, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	2b20      	cmp	r3, #32
 80068f0:	f040 80f9 	bne.w	8006ae6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <HAL_I2C_Mem_Write+0x34>
 80068fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006906:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006908:	2301      	movs	r3, #1
 800690a:	e0ed      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006912:	2b01      	cmp	r3, #1
 8006914:	d101      	bne.n	800691a <HAL_I2C_Mem_Write+0x4e>
 8006916:	2302      	movs	r3, #2
 8006918:	e0e6      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2201      	movs	r2, #1
 800691e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006922:	f7ff f817 	bl	8005954 <HAL_GetTick>
 8006926:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2319      	movs	r3, #25
 800692e:	2201      	movs	r2, #1
 8006930:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006934:	68f8      	ldr	r0, [r7, #12]
 8006936:	f000 fadd 	bl	8006ef4 <I2C_WaitOnFlagUntilTimeout>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d001      	beq.n	8006944 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e0d1      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2221      	movs	r2, #33	; 0x21
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	2240      	movs	r2, #64	; 0x40
 8006950:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a3a      	ldr	r2, [r7, #32]
 800695e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006964:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2200      	movs	r2, #0
 800696a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800696c:	88f8      	ldrh	r0, [r7, #6]
 800696e:	893a      	ldrh	r2, [r7, #8]
 8006970:	8979      	ldrh	r1, [r7, #10]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006978:	9300      	str	r3, [sp, #0]
 800697a:	4603      	mov	r3, r0
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 f9ed 	bl	8006d5c <I2C_RequestMemoryWrite>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d005      	beq.n	8006994 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e0a9      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29b      	uxth	r3, r3
 800699a:	2bff      	cmp	r3, #255	; 0xff
 800699c:	d90e      	bls.n	80069bc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	8979      	ldrh	r1, [r7, #10]
 80069ac:	2300      	movs	r3, #0
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fc57 	bl	8007268 <I2C_TransferConfig>
 80069ba:	e00f      	b.n	80069dc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ca:	b2da      	uxtb	r2, r3
 80069cc:	8979      	ldrh	r1, [r7, #10]
 80069ce:	2300      	movs	r3, #0
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069d6:	68f8      	ldr	r0, [r7, #12]
 80069d8:	f000 fc46 	bl	8007268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069e0:	68f8      	ldr	r0, [r7, #12]
 80069e2:	f000 fad6 	bl	8006f92 <I2C_WaitOnTXISFlagUntilTimeout>
 80069e6:	4603      	mov	r3, r0
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d001      	beq.n	80069f0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e07b      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069f4:	781a      	ldrb	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	1c5a      	adds	r2, r3, #1
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	b29a      	uxth	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d034      	beq.n	8006a94 <HAL_I2C_Mem_Write+0x1c8>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d130      	bne.n	8006a94 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	9300      	str	r3, [sp, #0]
 8006a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a38:	2200      	movs	r2, #0
 8006a3a:	2180      	movs	r1, #128	; 0x80
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fa59 	bl	8006ef4 <I2C_WaitOnFlagUntilTimeout>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d001      	beq.n	8006a4c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e04d      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	2bff      	cmp	r3, #255	; 0xff
 8006a54:	d90e      	bls.n	8006a74 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	22ff      	movs	r2, #255	; 0xff
 8006a5a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a60:	b2da      	uxtb	r2, r3
 8006a62:	8979      	ldrh	r1, [r7, #10]
 8006a64:	2300      	movs	r3, #0
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	f000 fbfb 	bl	8007268 <I2C_TransferConfig>
 8006a72:	e00f      	b.n	8006a94 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29a      	uxth	r2, r3
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a82:	b2da      	uxtb	r2, r3
 8006a84:	8979      	ldrh	r1, [r7, #10]
 8006a86:	2300      	movs	r3, #0
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f000 fbea 	bl	8007268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d19e      	bne.n	80069dc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a9e:	697a      	ldr	r2, [r7, #20]
 8006aa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 fabc 	bl	8007020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	e01a      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6859      	ldr	r1, [r3, #4]
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <HAL_I2C_Mem_Write+0x224>)
 8006ac6:	400b      	ands	r3, r1
 8006ac8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2220      	movs	r2, #32
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	e000      	b.n	8006ae8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006ae6:	2302      	movs	r3, #2
  }
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	fe00e800 	.word	0xfe00e800

08006af4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b088      	sub	sp, #32
 8006af8:	af02      	add	r7, sp, #8
 8006afa:	60f8      	str	r0, [r7, #12]
 8006afc:	4608      	mov	r0, r1
 8006afe:	4611      	mov	r1, r2
 8006b00:	461a      	mov	r2, r3
 8006b02:	4603      	mov	r3, r0
 8006b04:	817b      	strh	r3, [r7, #10]
 8006b06:	460b      	mov	r3, r1
 8006b08:	813b      	strh	r3, [r7, #8]
 8006b0a:	4613      	mov	r3, r2
 8006b0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b20      	cmp	r3, #32
 8006b18:	f040 80fd 	bne.w	8006d16 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b1c:	6a3b      	ldr	r3, [r7, #32]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d002      	beq.n	8006b28 <HAL_I2C_Mem_Read+0x34>
 8006b22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d105      	bne.n	8006b34 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b2e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	e0f1      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_I2C_Mem_Read+0x4e>
 8006b3e:	2302      	movs	r3, #2
 8006b40:	e0ea      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2201      	movs	r2, #1
 8006b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b4a:	f7fe ff03 	bl	8005954 <HAL_GetTick>
 8006b4e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	9300      	str	r3, [sp, #0]
 8006b54:	2319      	movs	r3, #25
 8006b56:	2201      	movs	r2, #1
 8006b58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f000 f9c9 	bl	8006ef4 <I2C_WaitOnFlagUntilTimeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d001      	beq.n	8006b6c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	e0d5      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2222      	movs	r2, #34	; 0x22
 8006b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	2240      	movs	r2, #64	; 0x40
 8006b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6a3a      	ldr	r2, [r7, #32]
 8006b86:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b94:	88f8      	ldrh	r0, [r7, #6]
 8006b96:	893a      	ldrh	r2, [r7, #8]
 8006b98:	8979      	ldrh	r1, [r7, #10]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	68f8      	ldr	r0, [r7, #12]
 8006ba6:	f000 f92d 	bl	8006e04 <I2C_RequestMemoryRead>
 8006baa:	4603      	mov	r3, r0
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e0ad      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc0:	b29b      	uxth	r3, r3
 8006bc2:	2bff      	cmp	r3, #255	; 0xff
 8006bc4:	d90e      	bls.n	8006be4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	22ff      	movs	r2, #255	; 0xff
 8006bca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd0:	b2da      	uxtb	r2, r3
 8006bd2:	8979      	ldrh	r1, [r7, #10]
 8006bd4:	4b52      	ldr	r3, [pc, #328]	; (8006d20 <HAL_I2C_Mem_Read+0x22c>)
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	f000 fb43 	bl	8007268 <I2C_TransferConfig>
 8006be2:	e00f      	b.n	8006c04 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf2:	b2da      	uxtb	r2, r3
 8006bf4:	8979      	ldrh	r1, [r7, #10]
 8006bf6:	4b4a      	ldr	r3, [pc, #296]	; (8006d20 <HAL_I2C_Mem_Read+0x22c>)
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bfe:	68f8      	ldr	r0, [r7, #12]
 8006c00:	f000 fb32 	bl	8007268 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	2104      	movs	r1, #4
 8006c0e:	68f8      	ldr	r0, [r7, #12]
 8006c10:	f000 f970 	bl	8006ef4 <I2C_WaitOnFlagUntilTimeout>
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006c1a:	2301      	movs	r3, #1
 8006c1c:	e07c      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	b2d2      	uxtb	r2, r2
 8006c2a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	1c5a      	adds	r2, r3, #1
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c3a:	3b01      	subs	r3, #1
 8006c3c:	b29a      	uxth	r2, r3
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c46:	b29b      	uxth	r3, r3
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d034      	beq.n	8006cc4 <HAL_I2C_Mem_Read+0x1d0>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d130      	bne.n	8006cc4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c62:	697b      	ldr	r3, [r7, #20]
 8006c64:	9300      	str	r3, [sp, #0]
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2180      	movs	r1, #128	; 0x80
 8006c6c:	68f8      	ldr	r0, [r7, #12]
 8006c6e:	f000 f941 	bl	8006ef4 <I2C_WaitOnFlagUntilTimeout>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e04d      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c80:	b29b      	uxth	r3, r3
 8006c82:	2bff      	cmp	r3, #255	; 0xff
 8006c84:	d90e      	bls.n	8006ca4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	22ff      	movs	r2, #255	; 0xff
 8006c8a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c90:	b2da      	uxtb	r2, r3
 8006c92:	8979      	ldrh	r1, [r7, #10]
 8006c94:	2300      	movs	r3, #0
 8006c96:	9300      	str	r3, [sp, #0]
 8006c98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c9c:	68f8      	ldr	r0, [r7, #12]
 8006c9e:	f000 fae3 	bl	8007268 <I2C_TransferConfig>
 8006ca2:	e00f      	b.n	8006cc4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ca8:	b29a      	uxth	r2, r3
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	8979      	ldrh	r1, [r7, #10]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006cbe:	68f8      	ldr	r0, [r7, #12]
 8006cc0:	f000 fad2 	bl	8007268 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d19a      	bne.n	8006c04 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cce:	697a      	ldr	r2, [r7, #20]
 8006cd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cd2:	68f8      	ldr	r0, [r7, #12]
 8006cd4:	f000 f9a4 	bl	8007020 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e01a      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	6859      	ldr	r1, [r3, #4]
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	4b0b      	ldr	r3, [pc, #44]	; (8006d24 <HAL_I2C_Mem_Read+0x230>)
 8006cf6:	400b      	ands	r3, r1
 8006cf8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006d12:	2300      	movs	r3, #0
 8006d14:	e000      	b.n	8006d18 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006d16:	2302      	movs	r3, #2
  }
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	80002400 	.word	0x80002400
 8006d24:	fe00e800 	.word	0xfe00e800

08006d28 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d36:	b2db      	uxtb	r3, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b086      	sub	sp, #24
 8006d60:	af02      	add	r7, sp, #8
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	4608      	mov	r0, r1
 8006d66:	4611      	mov	r1, r2
 8006d68:	461a      	mov	r2, r3
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	817b      	strh	r3, [r7, #10]
 8006d6e:	460b      	mov	r3, r1
 8006d70:	813b      	strh	r3, [r7, #8]
 8006d72:	4613      	mov	r3, r2
 8006d74:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	b2da      	uxtb	r2, r3
 8006d7a:	8979      	ldrh	r1, [r7, #10]
 8006d7c:	4b20      	ldr	r3, [pc, #128]	; (8006e00 <I2C_RequestMemoryWrite+0xa4>)
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d84:	68f8      	ldr	r0, [r7, #12]
 8006d86:	f000 fa6f 	bl	8007268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d8a:	69fa      	ldr	r2, [r7, #28]
 8006d8c:	69b9      	ldr	r1, [r7, #24]
 8006d8e:	68f8      	ldr	r0, [r7, #12]
 8006d90:	f000 f8ff 	bl	8006f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d001      	beq.n	8006d9e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e02c      	b.n	8006df8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d105      	bne.n	8006db0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006da4:	893b      	ldrh	r3, [r7, #8]
 8006da6:	b2da      	uxtb	r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	629a      	str	r2, [r3, #40]	; 0x28
 8006dae:	e015      	b.n	8006ddc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006db0:	893b      	ldrh	r3, [r7, #8]
 8006db2:	0a1b      	lsrs	r3, r3, #8
 8006db4:	b29b      	uxth	r3, r3
 8006db6:	b2da      	uxtb	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	69b9      	ldr	r1, [r7, #24]
 8006dc2:	68f8      	ldr	r0, [r7, #12]
 8006dc4:	f000 f8e5 	bl	8006f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d001      	beq.n	8006dd2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006dce:	2301      	movs	r3, #1
 8006dd0:	e012      	b.n	8006df8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006dd2:	893b      	ldrh	r3, [r7, #8]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ddc:	69fb      	ldr	r3, [r7, #28]
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	2200      	movs	r2, #0
 8006de4:	2180      	movs	r1, #128	; 0x80
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f884 	bl	8006ef4 <I2C_WaitOnFlagUntilTimeout>
 8006dec:	4603      	mov	r3, r0
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d001      	beq.n	8006df6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	80002000 	.word	0x80002000

08006e04 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b086      	sub	sp, #24
 8006e08:	af02      	add	r7, sp, #8
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	4608      	mov	r0, r1
 8006e0e:	4611      	mov	r1, r2
 8006e10:	461a      	mov	r2, r3
 8006e12:	4603      	mov	r3, r0
 8006e14:	817b      	strh	r3, [r7, #10]
 8006e16:	460b      	mov	r3, r1
 8006e18:	813b      	strh	r3, [r7, #8]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006e1e:	88fb      	ldrh	r3, [r7, #6]
 8006e20:	b2da      	uxtb	r2, r3
 8006e22:	8979      	ldrh	r1, [r7, #10]
 8006e24:	4b20      	ldr	r3, [pc, #128]	; (8006ea8 <I2C_RequestMemoryRead+0xa4>)
 8006e26:	9300      	str	r3, [sp, #0]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	68f8      	ldr	r0, [r7, #12]
 8006e2c:	f000 fa1c 	bl	8007268 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e30:	69fa      	ldr	r2, [r7, #28]
 8006e32:	69b9      	ldr	r1, [r7, #24]
 8006e34:	68f8      	ldr	r0, [r7, #12]
 8006e36:	f000 f8ac 	bl	8006f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d001      	beq.n	8006e44 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e02c      	b.n	8006e9e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e44:	88fb      	ldrh	r3, [r7, #6]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d105      	bne.n	8006e56 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e4a:	893b      	ldrh	r3, [r7, #8]
 8006e4c:	b2da      	uxtb	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	629a      	str	r2, [r3, #40]	; 0x28
 8006e54:	e015      	b.n	8006e82 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e56:	893b      	ldrh	r3, [r7, #8]
 8006e58:	0a1b      	lsrs	r3, r3, #8
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	69b9      	ldr	r1, [r7, #24]
 8006e68:	68f8      	ldr	r0, [r7, #12]
 8006e6a:	f000 f892 	bl	8006f92 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e74:	2301      	movs	r3, #1
 8006e76:	e012      	b.n	8006e9e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e78:	893b      	ldrh	r3, [r7, #8]
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	9300      	str	r3, [sp, #0]
 8006e86:	69bb      	ldr	r3, [r7, #24]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	2140      	movs	r1, #64	; 0x40
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f000 f831 	bl	8006ef4 <I2C_WaitOnFlagUntilTimeout>
 8006e92:	4603      	mov	r3, r0
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d001      	beq.n	8006e9c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	e000      	b.n	8006e9e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	80002000 	.word	0x80002000

08006eac <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	699b      	ldr	r3, [r3, #24]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d103      	bne.n	8006eca <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	699b      	ldr	r3, [r3, #24]
 8006ed0:	f003 0301 	and.w	r3, r3, #1
 8006ed4:	2b01      	cmp	r3, #1
 8006ed6:	d007      	beq.n	8006ee8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	699a      	ldr	r2, [r3, #24]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f042 0201 	orr.w	r2, r2, #1
 8006ee6:	619a      	str	r2, [r3, #24]
  }
}
 8006ee8:	bf00      	nop
 8006eea:	370c      	adds	r7, #12
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	603b      	str	r3, [r7, #0]
 8006f00:	4613      	mov	r3, r2
 8006f02:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f04:	e031      	b.n	8006f6a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0c:	d02d      	beq.n	8006f6a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f0e:	f7fe fd21 	bl	8005954 <HAL_GetTick>
 8006f12:	4602      	mov	r2, r0
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	683a      	ldr	r2, [r7, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d302      	bcc.n	8006f24 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d122      	bne.n	8006f6a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	bf0c      	ite	eq
 8006f34:	2301      	moveq	r3, #1
 8006f36:	2300      	movne	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	79fb      	ldrb	r3, [r7, #7]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d113      	bne.n	8006f6a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f46:	f043 0220 	orr.w	r2, r3, #32
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e00f      	b.n	8006f8a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	699a      	ldr	r2, [r3, #24]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	4013      	ands	r3, r2
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	429a      	cmp	r2, r3
 8006f78:	bf0c      	ite	eq
 8006f7a:	2301      	moveq	r3, #1
 8006f7c:	2300      	movne	r3, #0
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	461a      	mov	r2, r3
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d0be      	beq.n	8006f06 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}

08006f92 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006f92:	b580      	push	{r7, lr}
 8006f94:	b084      	sub	sp, #16
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f9e:	e033      	b.n	8007008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	68b9      	ldr	r1, [r7, #8]
 8006fa4:	68f8      	ldr	r0, [r7, #12]
 8006fa6:	f000 f87f 	bl	80070a8 <I2C_IsErrorOccurred>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d001      	beq.n	8006fb4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e031      	b.n	8007018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fba:	d025      	beq.n	8007008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fbc:	f7fe fcca 	bl	8005954 <HAL_GetTick>
 8006fc0:	4602      	mov	r2, r0
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	1ad3      	subs	r3, r2, r3
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d302      	bcc.n	8006fd2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d11a      	bne.n	8007008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b02      	cmp	r3, #2
 8006fde:	d013      	beq.n	8007008 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fe4:	f043 0220 	orr.w	r2, r3, #32
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2220      	movs	r2, #32
 8006ff0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	e007      	b.n	8007018 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	699b      	ldr	r3, [r3, #24]
 800700e:	f003 0302 	and.w	r3, r3, #2
 8007012:	2b02      	cmp	r3, #2
 8007014:	d1c4      	bne.n	8006fa0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800702c:	e02f      	b.n	800708e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800702e:	687a      	ldr	r2, [r7, #4]
 8007030:	68b9      	ldr	r1, [r7, #8]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 f838 	bl	80070a8 <I2C_IsErrorOccurred>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d001      	beq.n	8007042 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e02d      	b.n	800709e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007042:	f7fe fc87 	bl	8005954 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	429a      	cmp	r2, r3
 8007050:	d302      	bcc.n	8007058 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d11a      	bne.n	800708e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f003 0320 	and.w	r3, r3, #32
 8007062:	2b20      	cmp	r3, #32
 8007064:	d013      	beq.n	800708e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	f043 0220 	orr.w	r2, r3, #32
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2220      	movs	r2, #32
 8007076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
 800708c:	e007      	b.n	800709e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	699b      	ldr	r3, [r3, #24]
 8007094:	f003 0320 	and.w	r3, r3, #32
 8007098:	2b20      	cmp	r3, #32
 800709a:	d1c8      	bne.n	800702e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
	...

080070a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b08a      	sub	sp, #40	; 0x28
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80070b4:	2300      	movs	r3, #0
 80070b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80070c2:	2300      	movs	r3, #0
 80070c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d068      	beq.n	80071a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2210      	movs	r2, #16
 80070da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070dc:	e049      	b.n	8007172 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e4:	d045      	beq.n	8007172 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80070e6:	f7fe fc35 	bl	8005954 <HAL_GetTick>
 80070ea:	4602      	mov	r2, r0
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	1ad3      	subs	r3, r2, r3
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d302      	bcc.n	80070fc <I2C_IsErrorOccurred+0x54>
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d13a      	bne.n	8007172 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007106:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800710e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	699b      	ldr	r3, [r3, #24]
 8007116:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800711a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800711e:	d121      	bne.n	8007164 <I2C_IsErrorOccurred+0xbc>
 8007120:	697b      	ldr	r3, [r7, #20]
 8007122:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007126:	d01d      	beq.n	8007164 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8007128:	7cfb      	ldrb	r3, [r7, #19]
 800712a:	2b20      	cmp	r3, #32
 800712c:	d01a      	beq.n	8007164 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	685a      	ldr	r2, [r3, #4]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800713c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800713e:	f7fe fc09 	bl	8005954 <HAL_GetTick>
 8007142:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007144:	e00e      	b.n	8007164 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007146:	f7fe fc05 	bl	8005954 <HAL_GetTick>
 800714a:	4602      	mov	r2, r0
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	1ad3      	subs	r3, r2, r3
 8007150:	2b19      	cmp	r3, #25
 8007152:	d907      	bls.n	8007164 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	f043 0320 	orr.w	r3, r3, #32
 800715a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800715c:	2301      	movs	r3, #1
 800715e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8007162:	e006      	b.n	8007172 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f003 0320 	and.w	r3, r3, #32
 800716e:	2b20      	cmp	r3, #32
 8007170:	d1e9      	bne.n	8007146 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	699b      	ldr	r3, [r3, #24]
 8007178:	f003 0320 	and.w	r3, r3, #32
 800717c:	2b20      	cmp	r3, #32
 800717e:	d003      	beq.n	8007188 <I2C_IsErrorOccurred+0xe0>
 8007180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007184:	2b00      	cmp	r3, #0
 8007186:	d0aa      	beq.n	80070de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007188:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800718c:	2b00      	cmp	r3, #0
 800718e:	d103      	bne.n	8007198 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	2220      	movs	r2, #32
 8007196:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	f043 0304 	orr.w	r3, r3, #4
 800719e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	699b      	ldr	r3, [r3, #24]
 80071ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80071ae:	69bb      	ldr	r3, [r7, #24]
 80071b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00b      	beq.n	80071d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	f043 0301 	orr.w	r3, r3, #1
 80071be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80071c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d00b      	beq.n	80071f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80071da:	6a3b      	ldr	r3, [r7, #32]
 80071dc:	f043 0308 	orr.w	r3, r3, #8
 80071e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80071ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00b      	beq.n	8007214 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	f043 0302 	orr.w	r3, r3, #2
 8007202:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f44f 7200 	mov.w	r2, #512	; 0x200
 800720c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800720e:	2301      	movs	r3, #1
 8007210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007214:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007218:	2b00      	cmp	r3, #0
 800721a:	d01c      	beq.n	8007256 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800721c:	68f8      	ldr	r0, [r7, #12]
 800721e:	f7ff fe45 	bl	8006eac <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6859      	ldr	r1, [r3, #4]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681a      	ldr	r2, [r3, #0]
 800722c:	4b0d      	ldr	r3, [pc, #52]	; (8007264 <I2C_IsErrorOccurred+0x1bc>)
 800722e:	400b      	ands	r3, r1
 8007230:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	431a      	orrs	r2, r3
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2220      	movs	r2, #32
 8007242:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2200      	movs	r2, #0
 8007252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007256:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800725a:	4618      	mov	r0, r3
 800725c:	3728      	adds	r7, #40	; 0x28
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	fe00e800 	.word	0xfe00e800

08007268 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007268:	b480      	push	{r7}
 800726a:	b087      	sub	sp, #28
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	607b      	str	r3, [r7, #4]
 8007272:	460b      	mov	r3, r1
 8007274:	817b      	strh	r3, [r7, #10]
 8007276:	4613      	mov	r3, r2
 8007278:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800727a:	897b      	ldrh	r3, [r7, #10]
 800727c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007280:	7a7b      	ldrb	r3, [r7, #9]
 8007282:	041b      	lsls	r3, r3, #16
 8007284:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007288:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800728e:	6a3b      	ldr	r3, [r7, #32]
 8007290:	4313      	orrs	r3, r2
 8007292:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007296:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	0d5b      	lsrs	r3, r3, #21
 80072a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80072a6:	4b08      	ldr	r3, [pc, #32]	; (80072c8 <I2C_TransferConfig+0x60>)
 80072a8:	430b      	orrs	r3, r1
 80072aa:	43db      	mvns	r3, r3
 80072ac:	ea02 0103 	and.w	r1, r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	697a      	ldr	r2, [r7, #20]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80072ba:	bf00      	nop
 80072bc:	371c      	adds	r7, #28
 80072be:	46bd      	mov	sp, r7
 80072c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c4:	4770      	bx	lr
 80072c6:	bf00      	nop
 80072c8:	03ff63ff 	.word	0x03ff63ff

080072cc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072dc:	b2db      	uxtb	r3, r3
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d138      	bne.n	8007354 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d101      	bne.n	80072f0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80072ec:	2302      	movs	r3, #2
 80072ee:	e032      	b.n	8007356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2224      	movs	r2, #36	; 0x24
 80072fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	681a      	ldr	r2, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f022 0201 	bic.w	r2, r2, #1
 800730e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	681a      	ldr	r2, [r3, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800731e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	6819      	ldr	r1, [r3, #0]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	683a      	ldr	r2, [r7, #0]
 800732c:	430a      	orrs	r2, r1
 800732e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0201 	orr.w	r2, r2, #1
 800733e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2220      	movs	r2, #32
 8007344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	e000      	b.n	8007356 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007354:	2302      	movs	r3, #2
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007372:	b2db      	uxtb	r3, r3
 8007374:	2b20      	cmp	r3, #32
 8007376:	d139      	bne.n	80073ec <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007382:	2302      	movs	r3, #2
 8007384:	e033      	b.n	80073ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2224      	movs	r2, #36	; 0x24
 8007392:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0201 	bic.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80073b4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	021b      	lsls	r3, r3, #8
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2220      	movs	r2, #32
 80073dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80073e8:	2300      	movs	r3, #0
 80073ea:	e000      	b.n	80073ee <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80073ec:	2302      	movs	r3, #2
  }
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
	...

080073fc <HAL_IPCC_Init>:
  * @brief  Initialize the IPCC peripheral.
  * @param  hipcc IPCC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IPCC_Init(IPCC_HandleTypeDef *hipcc)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b084      	sub	sp, #16
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef err = HAL_OK;
 8007404:	2300      	movs	r3, #0
 8007406:	73fb      	strb	r3, [r7, #15]

  /* Check the IPCC handle allocation */
  if (hipcc != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d01e      	beq.n	800744c <HAL_IPCC_Init+0x50>
  {
    /* Check the parameters */
    assert_param(IS_IPCC_ALL_INSTANCE(hipcc->Instance));

    IPCC_CommonTypeDef *currentInstance = IPCC_C1;
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <HAL_IPCC_Init+0x60>)
 8007410:	60bb      	str	r3, [r7, #8]

    if (hipcc->State == HAL_IPCC_STATE_RESET)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b00      	cmp	r3, #0
 800741c:	d102      	bne.n	8007424 <HAL_IPCC_Init+0x28>
    {
      /* Init the low level hardware : CLOCK, NVIC */
      HAL_IPCC_MspInit(hipcc);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f7fb fcf8 	bl	8002e14 <HAL_IPCC_MspInit>
    }

    /* Reset all registers of the current cpu to default state */
    IPCC_Reset_Register(currentInstance);
 8007424:	68b8      	ldr	r0, [r7, #8]
 8007426:	f000 f85b 	bl	80074e0 <IPCC_Reset_Register>

    /* Activate the interrupts */
    currentInstance->CR |= (IPCC_CR_RXOIE | IPCC_CR_TXFIE);
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f043 1201 	orr.w	r2, r3, #65537	; 0x10001
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	601a      	str	r2, [r3, #0]

    /* Clear callback pointers */
    IPCC_SetDefaultCallbacks(hipcc);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f82c 	bl	8007494 <IPCC_SetDefaultCallbacks>

    /* Reset all callback notification request */
    hipcc->callbackRequest = 0;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	635a      	str	r2, [r3, #52]	; 0x34

    hipcc->State = HAL_IPCC_STATE_READY;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2201      	movs	r2, #1
 8007446:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800744a:	e001      	b.n	8007450 <HAL_IPCC_Init+0x54>
  }
  else
  {
    err = HAL_ERROR;
 800744c:	2301      	movs	r3, #1
 800744e:	73fb      	strb	r3, [r7, #15]
  }

  return err;
 8007450:	7bfb      	ldrb	r3, [r7, #15]
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
 800745a:	bf00      	nop
 800745c:	58000c00 	.word	0x58000c00

08007460 <HAL_IPCC_RxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_RxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 8007460:	b480      	push	{r7}
 8007462:	b085      	sub	sp, #20
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	4613      	mov	r3, r2
 800746c:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_RxCallback can be implemented in the user file
   */
}
 800746e:	bf00      	nop
 8007470:	3714      	adds	r7, #20
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr

0800747a <HAL_IPCC_TxCallback>:
  *            @arg IPCC_CHANNEL_5: IPCC Channel 5
  *            @arg IPCC_CHANNEL_6: IPCC Channel 6
  * @param ChannelDir Channel direction
  */
__weak void HAL_IPCC_TxCallback(IPCC_HandleTypeDef *hipcc, uint32_t ChannelIndex, IPCC_CHANNELDirTypeDef ChannelDir)
{
 800747a:	b480      	push	{r7}
 800747c:	b085      	sub	sp, #20
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	4613      	mov	r3, r2
 8007486:	71fb      	strb	r3, [r7, #7]
  UNUSED(ChannelDir);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IPCC_TxCallback can be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <IPCC_SetDefaultCallbacks>:
/**
  * @brief Reset all callbacks of the handle to NULL.
  * @param  hipcc IPCC handle
  */
void IPCC_SetDefaultCallbacks(IPCC_HandleTypeDef *hipcc)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  uint32_t i;
  /* Set all callbacks to default */
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]
 80074a0:	e00f      	b.n	80074c2 <IPCC_SetDefaultCallbacks+0x2e>
  {
    hipcc->ChannelCallbackRx[i] = HAL_IPCC_RxCallback;
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	009b      	lsls	r3, r3, #2
 80074a8:	4413      	add	r3, r2
 80074aa:	4a0b      	ldr	r2, [pc, #44]	; (80074d8 <IPCC_SetDefaultCallbacks+0x44>)
 80074ac:	605a      	str	r2, [r3, #4]
    hipcc->ChannelCallbackTx[i] = HAL_IPCC_TxCallback;
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	3306      	adds	r3, #6
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	4413      	add	r3, r2
 80074b8:	4a08      	ldr	r2, [pc, #32]	; (80074dc <IPCC_SetDefaultCallbacks+0x48>)
 80074ba:	605a      	str	r2, [r3, #4]
  for (i = 0; i < IPCC_CHANNEL_NUMBER; i++)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	3301      	adds	r3, #1
 80074c0:	60fb      	str	r3, [r7, #12]
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	d9ec      	bls.n	80074a2 <IPCC_SetDefaultCallbacks+0xe>
  }
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	08007461 	.word	0x08007461
 80074dc:	0800747b 	.word	0x0800747b

080074e0 <IPCC_Reset_Register>:
/**
  * @brief Reset IPCC register to default value for the concerned instance.
  * @param  Instance pointer to register
  */
void IPCC_Reset_Register(IPCC_CommonTypeDef *Instance)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  /* Disable RX and TX interrupts */
  Instance->CR  = 0x00000000U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	601a      	str	r2, [r3, #0]

  /* Mask RX and TX interrupts */
  Instance->MR  = (IPCC_ALL_TX_BUF | IPCC_ALL_RX_BUF);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f04f 123f 	mov.w	r2, #4128831	; 0x3f003f
 80074f4:	605a      	str	r2, [r3, #4]

  /* Clear RX status */
  Instance->SCR = IPCC_ALL_RX_BUF;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	223f      	movs	r2, #63	; 0x3f
 80074fa:	609a      	str	r2, [r3, #8]
}
 80074fc:	bf00      	nop
 80074fe:	370c      	adds	r7, #12
 8007500:	46bd      	mov	sp, r7
 8007502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007506:	4770      	bx	lr

08007508 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007508:	b480      	push	{r7}
 800750a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a04      	ldr	r2, [pc, #16]	; (8007524 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007512:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007516:	6013      	str	r3, [r2, #0]
}
 8007518:	bf00      	nop
 800751a:	46bd      	mov	sp, r7
 800751c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007520:	4770      	bx	lr
 8007522:	bf00      	nop
 8007524:	58000400 	.word	0x58000400

08007528 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <HAL_PWREx_GetVoltageRange+0x18>)
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8007534:	4618      	mov	r0, r3
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	58000400 	.word	0x58000400

08007544 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8007548:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007556:	d101      	bne.n	800755c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	46bd      	mov	sp, r7
 8007562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007566:	4770      	bx	lr

08007568 <LL_RCC_HSE_Enable>:
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800756c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800757a:	6013      	str	r3, [r2, #0]
}
 800757c:	bf00      	nop
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <LL_RCC_HSE_Disable>:
{
 8007586:	b480      	push	{r7}
 8007588:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800758a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007598:	6013      	str	r3, [r2, #0]
}
 800759a:	bf00      	nop
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <LL_RCC_HSE_IsReady>:
{
 80075a4:	b480      	push	{r7}
 80075a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80075a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80075b6:	d101      	bne.n	80075bc <LL_RCC_HSE_IsReady+0x18>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <LL_RCC_HSE_IsReady+0x1a>
 80075bc:	2300      	movs	r3, #0
}
 80075be:	4618      	mov	r0, r3
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <LL_RCC_HSI_Enable>:
{
 80075c8:	b480      	push	{r7}
 80075ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80075cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075da:	6013      	str	r3, [r2, #0]
}
 80075dc:	bf00      	nop
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr

080075e6 <LL_RCC_HSI_Disable>:
{
 80075e6:	b480      	push	{r7}
 80075e8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80075ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80075f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075f8:	6013      	str	r3, [r2, #0]
}
 80075fa:	bf00      	nop
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <LL_RCC_HSI_IsReady>:
{
 8007604:	b480      	push	{r7}
 8007606:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8007608:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007616:	d101      	bne.n	800761c <LL_RCC_HSI_IsReady+0x18>
 8007618:	2301      	movs	r3, #1
 800761a:	e000      	b.n	800761e <LL_RCC_HSI_IsReady+0x1a>
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <LL_RCC_HSI_SetCalibTrimming>:
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8007630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	061b      	lsls	r3, r3, #24
 800763e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007642:	4313      	orrs	r3, r2
 8007644:	604b      	str	r3, [r1, #4]
}
 8007646:	bf00      	nop
 8007648:	370c      	adds	r7, #12
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr

08007652 <LL_RCC_HSI48_Enable>:
{
 8007652:	b480      	push	{r7}
 8007654:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007656:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800765a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800765e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007662:	f043 0301 	orr.w	r3, r3, #1
 8007666:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800766a:	bf00      	nop
 800766c:	46bd      	mov	sp, r7
 800766e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007672:	4770      	bx	lr

08007674 <LL_RCC_HSI48_Disable>:
{
 8007674:	b480      	push	{r7}
 8007676:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);
 8007678:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800767c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007680:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007684:	f023 0301 	bic.w	r3, r3, #1
 8007688:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
}
 800768c:	bf00      	nop
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr

08007696 <LL_RCC_HSI48_IsReady>:
{
 8007696:	b480      	push	{r7}
 8007698:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == (RCC_CRRCR_HSI48RDY)) ? 1UL : 0UL);
 800769a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800769e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d101      	bne.n	80076ae <LL_RCC_HSI48_IsReady+0x18>
 80076aa:	2301      	movs	r3, #1
 80076ac:	e000      	b.n	80076b0 <LL_RCC_HSI48_IsReady+0x1a>
 80076ae:	2300      	movs	r3, #0
}
 80076b0:	4618      	mov	r0, r3
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <LL_RCC_LSE_Enable>:
{
 80076ba:	b480      	push	{r7}
 80076bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80076be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076ca:	f043 0301 	orr.w	r3, r3, #1
 80076ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80076d2:	bf00      	nop
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <LL_RCC_LSE_Disable>:
{
 80076dc:	b480      	push	{r7}
 80076de:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80076e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80076e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076e8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80076ec:	f023 0301 	bic.w	r3, r3, #1
 80076f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80076f4:	bf00      	nop
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <LL_RCC_LSE_EnableBypass>:
{
 80076fe:	b480      	push	{r7}
 8007700:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007702:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800770e:	f043 0304 	orr.w	r3, r3, #4
 8007712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007716:	bf00      	nop
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <LL_RCC_LSE_DisableBypass>:
{
 8007720:	b480      	push	{r7}
 8007722:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8007724:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007730:	f023 0304 	bic.w	r3, r3, #4
 8007734:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8007738:	bf00      	nop
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <LL_RCC_LSE_IsReady>:
{
 8007742:	b480      	push	{r7}
 8007744:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8007746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b02      	cmp	r3, #2
 8007754:	d101      	bne.n	800775a <LL_RCC_LSE_IsReady+0x18>
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <LL_RCC_LSE_IsReady+0x1a>
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <LL_RCC_LSI1_Enable>:
{
 8007766:	b480      	push	{r7}
 8007768:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800776a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800776e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007772:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007776:	f043 0301 	orr.w	r3, r3, #1
 800777a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800777e:	bf00      	nop
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <LL_RCC_LSI1_Disable>:
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI1ON);
 800778c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007794:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007798:	f023 0301 	bic.w	r3, r3, #1
 800779c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80077a0:	bf00      	nop
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <LL_RCC_LSI1_IsReady>:
{
 80077aa:	b480      	push	{r7}
 80077ac:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI1RDY) == (RCC_CSR_LSI1RDY)) ? 1UL : 0UL);
 80077ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077b6:	f003 0302 	and.w	r3, r3, #2
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d101      	bne.n	80077c2 <LL_RCC_LSI1_IsReady+0x18>
 80077be:	2301      	movs	r3, #1
 80077c0:	e000      	b.n	80077c4 <LL_RCC_LSI1_IsReady+0x1a>
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr

080077ce <LL_RCC_LSI2_Enable>:
{
 80077ce:	b480      	push	{r7}
 80077d0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80077d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077da:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077de:	f043 0304 	orr.w	r3, r3, #4
 80077e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80077e6:	bf00      	nop
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <LL_RCC_LSI2_Disable>:
{
 80077f0:	b480      	push	{r7}
 80077f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSI2ON);
 80077f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80077f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007800:	f023 0304 	bic.w	r3, r3, #4
 8007804:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8007808:	bf00      	nop
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <LL_RCC_LSI2_IsReady>:
{
 8007812:	b480      	push	{r7}
 8007814:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSI2RDY) == (RCC_CSR_LSI2RDY)) ? 1UL : 0UL);
 8007816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800781a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800781e:	f003 0308 	and.w	r3, r3, #8
 8007822:	2b08      	cmp	r3, #8
 8007824:	d101      	bne.n	800782a <LL_RCC_LSI2_IsReady+0x18>
 8007826:	2301      	movs	r3, #1
 8007828:	e000      	b.n	800782c <LL_RCC_LSI2_IsReady+0x1a>
 800782a:	2300      	movs	r3, #0
}
 800782c:	4618      	mov	r0, r3
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr

08007836 <LL_RCC_LSI2_SetTrimming>:
{
 8007836:	b480      	push	{r7}
 8007838:	b083      	sub	sp, #12
 800783a:	af00      	add	r7, sp, #0
 800783c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_LSI2TRIM, Value << RCC_CSR_LSI2TRIM_Pos);
 800783e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007842:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007846:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007852:	4313      	orrs	r3, r2
 8007854:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <LL_RCC_MSI_Enable>:
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8007868:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007872:	f043 0301 	orr.w	r3, r3, #1
 8007876:	6013      	str	r3, [r2, #0]
}
 8007878:	bf00      	nop
 800787a:	46bd      	mov	sp, r7
 800787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007880:	4770      	bx	lr

08007882 <LL_RCC_MSI_Disable>:
{
 8007882:	b480      	push	{r7}
 8007884:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8007886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007890:	f023 0301 	bic.w	r3, r3, #1
 8007894:	6013      	str	r3, [r2, #0]
}
 8007896:	bf00      	nop
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <LL_RCC_MSI_IsReady>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80078a4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	f003 0302 	and.w	r3, r3, #2
 80078ae:	2b02      	cmp	r3, #2
 80078b0:	d101      	bne.n	80078b6 <LL_RCC_MSI_IsReady+0x16>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e000      	b.n	80078b8 <LL_RCC_MSI_IsReady+0x18>
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr

080078c2 <LL_RCC_MSI_SetRange>:
{
 80078c2:	b480      	push	{r7}
 80078c4:	b083      	sub	sp, #12
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80078ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078d4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4313      	orrs	r3, r2
 80078dc:	600b      	str	r3, [r1, #0]
}
 80078de:	bf00      	nop
 80078e0:	370c      	adds	r7, #12
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <LL_RCC_MSI_GetRange>:
{
 80078ea:	b480      	push	{r7}
 80078ec:	b083      	sub	sp, #12
 80078ee:	af00      	add	r7, sp, #0
  uint32_t msiRange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE);
 80078f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80078fa:	607b      	str	r3, [r7, #4]
  if (msiRange > LL_RCC_MSIRANGE_11)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2bb0      	cmp	r3, #176	; 0xb0
 8007900:	d901      	bls.n	8007906 <LL_RCC_MSI_GetRange+0x1c>
    msiRange = LL_RCC_MSIRANGE_11;
 8007902:	23b0      	movs	r3, #176	; 0xb0
 8007904:	607b      	str	r3, [r7, #4]
  return msiRange;
 8007906:	687b      	ldr	r3, [r7, #4]
}
 8007908:	4618      	mov	r0, r3
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <LL_RCC_MSI_SetCalibTrimming>:
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800791c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800792e:	4313      	orrs	r3, r2
 8007930:	604b      	str	r3, [r1, #4]
}
 8007932:	bf00      	nop
 8007934:	370c      	adds	r7, #12
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr

0800793e <LL_RCC_SetSysClkSource>:
{
 800793e:	b480      	push	{r7}
 8007940:	b083      	sub	sp, #12
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8007946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f023 0203 	bic.w	r2, r3, #3
 8007950:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	4313      	orrs	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
}
 800795a:	bf00      	nop
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <LL_RCC_GetSysClkSource>:
{
 8007966:	b480      	push	{r7}
 8007968:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800796a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 030c 	and.w	r3, r3, #12
}
 8007974:	4618      	mov	r0, r3
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <LL_RCC_SetAHBPrescaler>:
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8007986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800798a:	689b      	ldr	r3, [r3, #8]
 800798c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007990:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4313      	orrs	r3, r2
 8007998:	608b      	str	r3, [r1, #8]
}
 800799a:	bf00      	nop
 800799c:	370c      	adds	r7, #12
 800799e:	46bd      	mov	sp, r7
 80079a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a4:	4770      	bx	lr

080079a6 <LL_C2_RCC_SetAHBPrescaler>:
{
 80079a6:	b480      	push	{r7}
 80079a8:	b083      	sub	sp, #12
 80079aa:	af00      	add	r7, sp, #0
 80079ac:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80079ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079b2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80079b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80079ba:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	4313      	orrs	r3, r2
 80079c2:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80079c6:	bf00      	nop
 80079c8:	370c      	adds	r7, #12
 80079ca:	46bd      	mov	sp, r7
 80079cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d0:	4770      	bx	lr

080079d2 <LL_RCC_SetAHB4Prescaler>:
{
 80079d2:	b480      	push	{r7}
 80079d4:	b083      	sub	sp, #12
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80079da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80079de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80079e2:	f023 020f 	bic.w	r2, r3, #15
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	091b      	lsrs	r3, r3, #4
 80079ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80079ee:	4313      	orrs	r3, r2
 80079f0:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80079f4:	bf00      	nop
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <LL_RCC_SetAPB1Prescaler>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8007a08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007a12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4313      	orrs	r3, r2
 8007a1a:	608b      	str	r3, [r1, #8]
}
 8007a1c:	bf00      	nop
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <LL_RCC_SetAPB2Prescaler>:
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b083      	sub	sp, #12
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8007a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007a3a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	608b      	str	r3, [r1, #8]
}
 8007a44:	bf00      	nop
 8007a46:	370c      	adds	r7, #12
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4e:	4770      	bx	lr

08007a50 <LL_RCC_GetAHBPrescaler>:
{
 8007a50:	b480      	push	{r7}
 8007a52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8007a54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a58:	689b      	ldr	r3, [r3, #8]
 8007a5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <LL_RCC_GetAHB4Prescaler>:
{
 8007a68:	b480      	push	{r7}
 8007a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8007a6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a70:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007a74:	011b      	lsls	r3, r3, #4
 8007a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr

08007a84 <LL_RCC_GetAPB1Prescaler>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8007a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007a8c:	689b      	ldr	r3, [r3, #8]
 8007a8e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <LL_RCC_GetAPB2Prescaler>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8007aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007aa4:	689b      	ldr	r3, [r3, #8]
 8007aa6:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8007aaa:	4618      	mov	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr

08007ab4 <LL_RCC_PLL_Enable>:
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8007ab8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ac6:	6013      	str	r3, [r2, #0]
}
 8007ac8:	bf00      	nop
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr

08007ad2 <LL_RCC_PLL_Disable>:
{
 8007ad2:	b480      	push	{r7}
 8007ad4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8007ad6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007ae0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ae4:	6013      	str	r3, [r2, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <LL_RCC_PLL_IsReady>:
{
 8007af0:	b480      	push	{r7}
 8007af2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8007af4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b02:	d101      	bne.n	8007b08 <LL_RCC_PLL_IsReady+0x18>
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <LL_RCC_PLL_IsReady+0x1a>
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <LL_RCC_PLL_GetN>:
{
 8007b14:	b480      	push	{r7}
 8007b16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8007b18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b1c:	68db      	ldr	r3, [r3, #12]
 8007b1e:	0a1b      	lsrs	r3, r3, #8
 8007b20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	46bd      	mov	sp, r7
 8007b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2c:	4770      	bx	lr

08007b2e <LL_RCC_PLL_GetR>:
{
 8007b2e:	b480      	push	{r7}
 8007b30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8007b32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b36:	68db      	ldr	r3, [r3, #12]
 8007b38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr

08007b46 <LL_RCC_PLL_GetDivider>:
{
 8007b46:	b480      	push	{r7}
 8007b48:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007b4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <LL_RCC_PLL_GetMainSource>:
{
 8007b5e:	b480      	push	{r7}
 8007b60:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007b62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b66:	68db      	ldr	r3, [r3, #12]
 8007b68:	f003 0303 	and.w	r3, r3, #3
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr

08007b76 <LL_RCC_IsActiveFlag_HPRE>:
{
 8007b76:	b480      	push	{r7}
 8007b78:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8007b7a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007b7e:	689b      	ldr	r3, [r3, #8]
 8007b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b88:	d101      	bne.n	8007b8e <LL_RCC_IsActiveFlag_HPRE+0x18>
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	e000      	b.n	8007b90 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8007b8e:	2300      	movs	r3, #0
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr

08007b9a <LL_RCC_IsActiveFlag_C2HPRE>:
{
 8007b9a:	b480      	push	{r7}
 8007b9c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8007b9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007ba2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007baa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bae:	d101      	bne.n	8007bb4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e000      	b.n	8007bb6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr

08007bc0 <LL_RCC_IsActiveFlag_SHDHPRE>:
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8007bc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bc8:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8007bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bd4:	d101      	bne.n	8007bda <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	e000      	b.n	8007bdc <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8007bda:	2300      	movs	r3, #0
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr

08007be6 <LL_RCC_IsActiveFlag_PPRE1>:
{
 8007be6:	b480      	push	{r7}
 8007be8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8007bea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bf4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007bf8:	d101      	bne.n	8007bfe <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <LL_RCC_IsActiveFlag_PPRE2>:
{
 8007c0a:	b480      	push	{r7}
 8007c0c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8007c0e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c18:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c1c:	d101      	bne.n	8007c22 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e000      	b.n	8007c24 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr
	...

08007c30 <HAL_RCC_OscConfig>:
  * @note   The PLL is not disabled when used as system clock.
  * @note   The PLL source is not updated when used as PLLSAI1 clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007c30:	b590      	push	{r4, r7, lr}
 8007c32:	b08d      	sub	sp, #52	; 0x34
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d101      	bne.n	8007c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	e363      	b.n	800830a <HAL_RCC_OscConfig+0x6da>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	f000 808d 	beq.w	8007d6a <HAL_RCC_OscConfig+0x13a>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c50:	f7ff fe89 	bl	8007966 <LL_RCC_GetSysClkSource>
 8007c54:	62f8      	str	r0, [r7, #44]	; 0x2c
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007c56:	f7ff ff82 	bl	8007b5e <LL_RCC_PLL_GetMainSource>
 8007c5a:	62b8      	str	r0, [r7, #40]	; 0x28
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d005      	beq.n	8007c6e <HAL_RCC_OscConfig+0x3e>
 8007c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c64:	2b0c      	cmp	r3, #12
 8007c66:	d147      	bne.n	8007cf8 <HAL_RCC_OscConfig+0xc8>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_MSI)))
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d144      	bne.n	8007cf8 <HAL_RCC_OscConfig+0xc8>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d101      	bne.n	8007c7a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	e347      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB4 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8007c7e:	f7ff fe34 	bl	80078ea <LL_RCC_MSI_GetRange>
 8007c82:	4603      	mov	r3, r0
 8007c84:	429c      	cmp	r4, r3
 8007c86:	d914      	bls.n	8007cb2 <HAL_RCC_OscConfig+0x82>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f000 fd2f 	bl	80086f0 <RCC_SetFlashLatencyFromMSIRange>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <HAL_RCC_OscConfig+0x6c>
          {
            return HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e336      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff fe0e 	bl	80078c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fe32 	bl	8007914 <LL_RCC_MSI_SetCalibTrimming>
 8007cb0:	e013      	b.n	8007cda <HAL_RCC_OscConfig+0xaa>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	f7ff fe03 	bl	80078c2 <LL_RCC_MSI_SetRange>
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6a1b      	ldr	r3, [r3, #32]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff fe27 	bl	8007914 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f000 fd10 	bl	80086f0 <RCC_SetFlashLatencyFromMSIRange>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <HAL_RCC_OscConfig+0xaa>
          {
            return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e317      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8007cda:	f000 fcc9 	bl	8008670 <HAL_RCC_GetHCLKFreq>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	4aa4      	ldr	r2, [pc, #656]	; (8007f74 <HAL_RCC_OscConfig+0x344>)
 8007ce2:	6013      	str	r3, [r2, #0]

        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007ce4:	4ba4      	ldr	r3, [pc, #656]	; (8007f78 <HAL_RCC_OscConfig+0x348>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4618      	mov	r0, r3
 8007cea:	f7fd fde5 	bl	80058b8 <HAL_InitTick>
 8007cee:	4603      	mov	r3, r0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d039      	beq.n	8007d68 <HAL_RCC_OscConfig+0x138>
        {
          return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e308      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01e      	beq.n	8007d3e <HAL_RCC_OscConfig+0x10e>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007d00:	f7ff fdb0 	bl	8007864 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d04:	f7fd fe26 	bl	8005954 <HAL_GetTick>
 8007d08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8007d0a:	e008      	b.n	8007d1e <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d0c:	f7fd fe22 	bl	8005954 <HAL_GetTick>
 8007d10:	4602      	mov	r2, r0
 8007d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d14:	1ad3      	subs	r3, r2, r3
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d901      	bls.n	8007d1e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8007d1a:	2303      	movs	r3, #3
 8007d1c:	e2f5      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() == 0U)
 8007d1e:	f7ff fdbf 	bl	80078a0 <LL_RCC_MSI_IsReady>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0f1      	beq.n	8007d0c <HAL_RCC_OscConfig+0xdc>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f7ff fdc8 	bl	80078c2 <LL_RCC_MSI_SetRange>
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a1b      	ldr	r3, [r3, #32]
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fdec 	bl	8007914 <LL_RCC_MSI_SetCalibTrimming>
 8007d3c:	e015      	b.n	8007d6a <HAL_RCC_OscConfig+0x13a>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007d3e:	f7ff fda0 	bl	8007882 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007d42:	f7fd fe07 	bl	8005954 <HAL_GetTick>
 8007d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8007d48:	e008      	b.n	8007d5c <HAL_RCC_OscConfig+0x12c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007d4a:	f7fd fe03 	bl	8005954 <HAL_GetTick>
 8007d4e:	4602      	mov	r2, r0
 8007d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d52:	1ad3      	subs	r3, r2, r3
 8007d54:	2b02      	cmp	r3, #2
 8007d56:	d901      	bls.n	8007d5c <HAL_RCC_OscConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8007d58:	2303      	movs	r3, #3
 8007d5a:	e2d6      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_MSI_IsReady() != 0U)
 8007d5c:	f7ff fda0 	bl	80078a0 <LL_RCC_MSI_IsReady>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1f1      	bne.n	8007d4a <HAL_RCC_OscConfig+0x11a>
 8007d66:	e000      	b.n	8007d6a <HAL_RCC_OscConfig+0x13a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8007d68:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0301 	and.w	r3, r3, #1
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d047      	beq.n	8007e06 <HAL_RCC_OscConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d76:	f7ff fdf6 	bl	8007966 <LL_RCC_GetSysClkSource>
 8007d7a:	6238      	str	r0, [r7, #32]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007d7c:	f7ff feef 	bl	8007b5e <LL_RCC_PLL_GetMainSource>
 8007d80:	61f8      	str	r0, [r7, #28]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8007d82:	6a3b      	ldr	r3, [r7, #32]
 8007d84:	2b08      	cmp	r3, #8
 8007d86:	d005      	beq.n	8007d94 <HAL_RCC_OscConfig+0x164>
 8007d88:	6a3b      	ldr	r3, [r7, #32]
 8007d8a:	2b0c      	cmp	r3, #12
 8007d8c:	d108      	bne.n	8007da0 <HAL_RCC_OscConfig+0x170>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSE)))
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	2b03      	cmp	r3, #3
 8007d92:	d105      	bne.n	8007da0 <HAL_RCC_OscConfig+0x170>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d134      	bne.n	8007e06 <HAL_RCC_OscConfig+0x1d6>
      {
        return HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	e2b4      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007da8:	d102      	bne.n	8007db0 <HAL_RCC_OscConfig+0x180>
 8007daa:	f7ff fbdd 	bl	8007568 <LL_RCC_HSE_Enable>
 8007dae:	e001      	b.n	8007db4 <HAL_RCC_OscConfig+0x184>
 8007db0:	f7ff fbe9 	bl	8007586 <LL_RCC_HSE_Disable>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d012      	beq.n	8007de2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dbc:	f7fd fdca 	bl	8005954 <HAL_GetTick>
 8007dc0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dc4:	f7fd fdc6 	bl	8005954 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b64      	cmp	r3, #100	; 0x64
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e299      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() == 0U)
 8007dd6:	f7ff fbe5 	bl	80075a4 <LL_RCC_HSE_IsReady>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d0f1      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x194>
 8007de0:	e011      	b.n	8007e06 <HAL_RCC_OscConfig+0x1d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007de2:	f7fd fdb7 	bl	8005954 <HAL_GetTick>
 8007de6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8007de8:	e008      	b.n	8007dfc <HAL_RCC_OscConfig+0x1cc>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007dea:	f7fd fdb3 	bl	8005954 <HAL_GetTick>
 8007dee:	4602      	mov	r2, r0
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	1ad3      	subs	r3, r2, r3
 8007df4:	2b64      	cmp	r3, #100	; 0x64
 8007df6:	d901      	bls.n	8007dfc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8007df8:	2303      	movs	r3, #3
 8007dfa:	e286      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSE_IsReady() != 0U)
 8007dfc:	f7ff fbd2 	bl	80075a4 <LL_RCC_HSE_IsReady>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d1f1      	bne.n	8007dea <HAL_RCC_OscConfig+0x1ba>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0302 	and.w	r3, r3, #2
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d04c      	beq.n	8007eac <HAL_RCC_OscConfig+0x27c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e12:	f7ff fda8 	bl	8007966 <LL_RCC_GetSysClkSource>
 8007e16:	61b8      	str	r0, [r7, #24]
    const uint32_t temp_plloscsrc = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e18:	f7ff fea1 	bl	8007b5e <LL_RCC_PLL_GetMainSource>
 8007e1c:	6178      	str	r0, [r7, #20]
    if ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	2b04      	cmp	r3, #4
 8007e22:	d005      	beq.n	8007e30 <HAL_RCC_OscConfig+0x200>
 8007e24:	69bb      	ldr	r3, [r7, #24]
 8007e26:	2b0c      	cmp	r3, #12
 8007e28:	d10e      	bne.n	8007e48 <HAL_RCC_OscConfig+0x218>
        ((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_plloscsrc == RCC_PLLSOURCE_HSI)))
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	2b02      	cmp	r3, #2
 8007e2e:	d10b      	bne.n	8007e48 <HAL_RCC_OscConfig+0x218>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d101      	bne.n	8007e3c <HAL_RCC_OscConfig+0x20c>
      {
        return HAL_ERROR;
 8007e38:	2301      	movs	r3, #1
 8007e3a:	e266      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7ff fbf1 	bl	8007628 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8007e46:	e031      	b.n	8007eac <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d019      	beq.n	8007e84 <HAL_RCC_OscConfig+0x254>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007e50:	f7ff fbba 	bl	80075c8 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e54:	f7fd fd7e 	bl	8005954 <HAL_GetTick>
 8007e58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e5c:	f7fd fd7a 	bl	8005954 <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e24d      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() == 0U)
 8007e6e:	f7ff fbc9 	bl	8007604 <LL_RCC_HSI_IsReady>
 8007e72:	4603      	mov	r3, r0
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d0f1      	beq.n	8007e5c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	691b      	ldr	r3, [r3, #16]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fbd3 	bl	8007628 <LL_RCC_HSI_SetCalibTrimming>
 8007e82:	e013      	b.n	8007eac <HAL_RCC_OscConfig+0x27c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007e84:	f7ff fbaf 	bl	80075e6 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e88:	f7fd fd64 	bl	8005954 <HAL_GetTick>
 8007e8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8007e8e:	e008      	b.n	8007ea2 <HAL_RCC_OscConfig+0x272>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007e90:	f7fd fd60 	bl	8005954 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	2b02      	cmp	r3, #2
 8007e9c:	d901      	bls.n	8007ea2 <HAL_RCC_OscConfig+0x272>
          {
            return HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	e233      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_HSI_IsReady() != 0U)
 8007ea2:	f7ff fbaf 	bl	8007604 <LL_RCC_HSI_IsReady>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d1f1      	bne.n	8007e90 <HAL_RCC_OscConfig+0x260>
      }
    }
  }
  /*------------------------------ LSI Configuration (LSI1 or LSI2) -------------------------*/

  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 0308 	and.w	r3, r3, #8
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d106      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x296>
      (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2))
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0310 	and.w	r3, r3, #16
  if ((((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI1) == RCC_OSCILLATORTYPE_LSI1) || \
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	f000 80a3 	beq.w	800800c <HAL_RCC_OscConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d076      	beq.n	8007fbc <HAL_RCC_OscConfig+0x38c>
    {
      /*------------------------------ LSI2 selected by default (when Switch ON) -------------------------*/
      if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI2) == RCC_OSCILLATORTYPE_LSI2)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0310 	and.w	r3, r3, #16
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d046      	beq.n	8007f68 <HAL_RCC_OscConfig+0x338>
      {
        assert_param(IS_RCC_LSI2_CALIBRATION_VALUE(RCC_OscInitStruct->LSI2CalibrationValue));

        /* 1. Check LSI1 state and enable if required */
        if (LL_RCC_LSI1_IsReady() == 0U)
 8007eda:	f7ff fc66 	bl	80077aa <LL_RCC_LSI1_IsReady>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d113      	bne.n	8007f0c <HAL_RCC_OscConfig+0x2dc>
        {
          /* This is required to enable LSI1 before enabling LSI2 */
          __HAL_RCC_LSI1_ENABLE();
 8007ee4:	f7ff fc3f 	bl	8007766 <LL_RCC_LSI1_Enable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007ee8:	f7fd fd34 	bl	8005954 <HAL_GetTick>
 8007eec:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till LSI1 is ready */
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007eee:	e008      	b.n	8007f02 <HAL_RCC_OscConfig+0x2d2>
          {
            if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007ef0:	f7fd fd30 	bl	8005954 <HAL_GetTick>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	2b02      	cmp	r3, #2
 8007efc:	d901      	bls.n	8007f02 <HAL_RCC_OscConfig+0x2d2>
            {
              return HAL_TIMEOUT;
 8007efe:	2303      	movs	r3, #3
 8007f00:	e203      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
          while (LL_RCC_LSI1_IsReady() == 0U)
 8007f02:	f7ff fc52 	bl	80077aa <LL_RCC_LSI1_IsReady>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d0f1      	beq.n	8007ef0 <HAL_RCC_OscConfig+0x2c0>
            }
          }
        }

        /* 2. Enable the Internal Low Speed oscillator (LSI2) and set trimming value */
        __HAL_RCC_LSI2_ENABLE();
 8007f0c:	f7ff fc5f 	bl	80077ce <LL_RCC_LSI2_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f10:	f7fd fd20 	bl	8005954 <HAL_GetTick>
 8007f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI2 is ready */
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007f16:	e008      	b.n	8007f2a <HAL_RCC_OscConfig+0x2fa>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007f18:	f7fd fd1c 	bl	8005954 <HAL_GetTick>
 8007f1c:	4602      	mov	r2, r0
 8007f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	2b03      	cmp	r3, #3
 8007f24:	d901      	bls.n	8007f2a <HAL_RCC_OscConfig+0x2fa>
          {
            return HAL_TIMEOUT;
 8007f26:	2303      	movs	r3, #3
 8007f28:	e1ef      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() == 0U)
 8007f2a:	f7ff fc72 	bl	8007812 <LL_RCC_LSI2_IsReady>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d0f1      	beq.n	8007f18 <HAL_RCC_OscConfig+0x2e8>
          }
        }
        /* Adjusts the Internal Low Spee oscillator (LSI2) calibration value */
        __HAL_RCC_LSI2_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LSI2CalibrationValue);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	699b      	ldr	r3, [r3, #24]
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7ff fc7c 	bl	8007836 <LL_RCC_LSI2_SetTrimming>

        /* 3. Disable LSI1 */

        /* LSI1 was initially not enable, require to disable it */
        __HAL_RCC_LSI1_DISABLE();
 8007f3e:	f7ff fc23 	bl	8007788 <LL_RCC_LSI1_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f42:	f7fd fd07 	bl	8005954 <HAL_GetTick>
 8007f46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is disabled */
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007f48:	e008      	b.n	8007f5c <HAL_RCC_OscConfig+0x32c>
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007f4a:	f7fd fd03 	bl	8005954 <HAL_GetTick>
 8007f4e:	4602      	mov	r2, r0
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	1ad3      	subs	r3, r2, r3
 8007f54:	2b02      	cmp	r3, #2
 8007f56:	d901      	bls.n	8007f5c <HAL_RCC_OscConfig+0x32c>
          {
            return HAL_TIMEOUT;
 8007f58:	2303      	movs	r3, #3
 8007f5a:	e1d6      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() != 0U)
 8007f5c:	f7ff fc25 	bl	80077aa <LL_RCC_LSI1_IsReady>
 8007f60:	4603      	mov	r3, r0
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d1f1      	bne.n	8007f4a <HAL_RCC_OscConfig+0x31a>
 8007f66:	e051      	b.n	800800c <HAL_RCC_OscConfig+0x3dc>
      else
      {
        /*------------------------------ LSI1 selected (only if LSI2 OFF)-------------------------*/

        /* 1. Enable the Internal Low Speed oscillator (LSI1). */
        __HAL_RCC_LSI1_ENABLE();
 8007f68:	f7ff fbfd 	bl	8007766 <LL_RCC_LSI1_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f6c:	f7fd fcf2 	bl	8005954 <HAL_GetTick>
 8007f70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSI1 is ready */
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007f72:	e00c      	b.n	8007f8e <HAL_RCC_OscConfig+0x35e>
 8007f74:	20000038 	.word	0x20000038
 8007f78:	2000003c 	.word	0x2000003c
        {
          if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007f7c:	f7fd fcea 	bl	8005954 <HAL_GetTick>
 8007f80:	4602      	mov	r2, r0
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	1ad3      	subs	r3, r2, r3
 8007f86:	2b02      	cmp	r3, #2
 8007f88:	d901      	bls.n	8007f8e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8007f8a:	2303      	movs	r3, #3
 8007f8c:	e1bd      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI1_IsReady() == 0U)
 8007f8e:	f7ff fc0c 	bl	80077aa <LL_RCC_LSI1_IsReady>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0f1      	beq.n	8007f7c <HAL_RCC_OscConfig+0x34c>
          }
        }
        /*2. Switch OFF LSI2*/

        /* Disable the Internal Low Speed oscillator (LSI2). */
        __HAL_RCC_LSI2_DISABLE();
 8007f98:	f7ff fc2a 	bl	80077f0 <LL_RCC_LSI2_Disable>

        /* Wait till LSI2 is disabled */
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007f9c:	e008      	b.n	8007fb0 <HAL_RCC_OscConfig+0x380>
        {
          if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007f9e:	f7fd fcd9 	bl	8005954 <HAL_GetTick>
 8007fa2:	4602      	mov	r2, r0
 8007fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa6:	1ad3      	subs	r3, r2, r3
 8007fa8:	2b03      	cmp	r3, #3
 8007faa:	d901      	bls.n	8007fb0 <HAL_RCC_OscConfig+0x380>
          {
            return HAL_TIMEOUT;
 8007fac:	2303      	movs	r3, #3
 8007fae:	e1ac      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (LL_RCC_LSI2_IsReady() != 0U)
 8007fb0:	f7ff fc2f 	bl	8007812 <LL_RCC_LSI2_IsReady>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f1      	bne.n	8007f9e <HAL_RCC_OscConfig+0x36e>
 8007fba:	e027      	b.n	800800c <HAL_RCC_OscConfig+0x3dc>
    }
    else
    {

      /* Disable the Internal Low Speed oscillator (LSI2). */
      __HAL_RCC_LSI2_DISABLE();
 8007fbc:	f7ff fc18 	bl	80077f0 <LL_RCC_LSI2_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fc0:	f7fd fcc8 	bl	8005954 <HAL_GetTick>
 8007fc4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI2 is disabled */
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007fc6:	e008      	b.n	8007fda <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > LSI2_TIMEOUT_VALUE)
 8007fc8:	f7fd fcc4 	bl	8005954 <HAL_GetTick>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd0:	1ad3      	subs	r3, r2, r3
 8007fd2:	2b03      	cmp	r3, #3
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e197      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI2_IsReady() != 0U)
 8007fda:	f7ff fc1a 	bl	8007812 <LL_RCC_LSI2_IsReady>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d1f1      	bne.n	8007fc8 <HAL_RCC_OscConfig+0x398>
        }
      }

      /* Disable the Internal Low Speed oscillator (LSI1). */
      __HAL_RCC_LSI1_DISABLE();
 8007fe4:	f7ff fbd0 	bl	8007788 <LL_RCC_LSI1_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fe8:	f7fd fcb4 	bl	8005954 <HAL_GetTick>
 8007fec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI1 is disabled */
      while (LL_RCC_LSI1_IsReady() != 0U)
 8007fee:	e008      	b.n	8008002 <HAL_RCC_OscConfig+0x3d2>
      {
        if ((HAL_GetTick() - tickstart) > LSI1_TIMEOUT_VALUE)
 8007ff0:	f7fd fcb0 	bl	8005954 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d901      	bls.n	8008002 <HAL_RCC_OscConfig+0x3d2>
        {
          return HAL_TIMEOUT;
 8007ffe:	2303      	movs	r3, #3
 8008000:	e183      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSI1_IsReady() != 0U)
 8008002:	f7ff fbd2 	bl	80077aa <LL_RCC_LSI1_IsReady>
 8008006:	4603      	mov	r3, r0
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1f1      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f003 0304 	and.w	r3, r3, #4
 8008014:	2b00      	cmp	r3, #0
 8008016:	d05b      	beq.n	80080d0 <HAL_RCC_OscConfig+0x4a0>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008018:	4ba7      	ldr	r3, [pc, #668]	; (80082b8 <HAL_RCC_OscConfig+0x688>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008020:	2b00      	cmp	r3, #0
 8008022:	d114      	bne.n	800804e <HAL_RCC_OscConfig+0x41e>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008024:	f7ff fa70 	bl	8007508 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008028:	f7fd fc94 	bl	8005954 <HAL_GetTick>
 800802c:	6278      	str	r0, [r7, #36]	; 0x24

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800802e:	e008      	b.n	8008042 <HAL_RCC_OscConfig+0x412>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008030:	f7fd fc90 	bl	8005954 <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	2b02      	cmp	r3, #2
 800803c:	d901      	bls.n	8008042 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 800803e:	2303      	movs	r3, #3
 8008040:	e163      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008042:	4b9d      	ldr	r3, [pc, #628]	; (80082b8 <HAL_RCC_OscConfig+0x688>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0f0      	beq.n	8008030 <HAL_RCC_OscConfig+0x400>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	2b01      	cmp	r3, #1
 8008054:	d102      	bne.n	800805c <HAL_RCC_OscConfig+0x42c>
 8008056:	f7ff fb30 	bl	80076ba <LL_RCC_LSE_Enable>
 800805a:	e00c      	b.n	8008076 <HAL_RCC_OscConfig+0x446>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b05      	cmp	r3, #5
 8008062:	d104      	bne.n	800806e <HAL_RCC_OscConfig+0x43e>
 8008064:	f7ff fb4b 	bl	80076fe <LL_RCC_LSE_EnableBypass>
 8008068:	f7ff fb27 	bl	80076ba <LL_RCC_LSE_Enable>
 800806c:	e003      	b.n	8008076 <HAL_RCC_OscConfig+0x446>
 800806e:	f7ff fb35 	bl	80076dc <LL_RCC_LSE_Disable>
 8008072:	f7ff fb55 	bl	8007720 <LL_RCC_LSE_DisableBypass>

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d014      	beq.n	80080a8 <HAL_RCC_OscConfig+0x478>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800807e:	f7fd fc69 	bl	8005954 <HAL_GetTick>
 8008082:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8008084:	e00a      	b.n	800809c <HAL_RCC_OscConfig+0x46c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008086:	f7fd fc65 	bl	8005954 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	f241 3288 	movw	r2, #5000	; 0x1388
 8008094:	4293      	cmp	r3, r2
 8008096:	d901      	bls.n	800809c <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8008098:	2303      	movs	r3, #3
 800809a:	e136      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() == 0U)
 800809c:	f7ff fb51 	bl	8007742 <LL_RCC_LSE_IsReady>
 80080a0:	4603      	mov	r3, r0
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d0ef      	beq.n	8008086 <HAL_RCC_OscConfig+0x456>
 80080a6:	e013      	b.n	80080d0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080a8:	f7fd fc54 	bl	8005954 <HAL_GetTick>
 80080ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80080ae:	e00a      	b.n	80080c6 <HAL_RCC_OscConfig+0x496>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080b0:	f7fd fc50 	bl	8005954 <HAL_GetTick>
 80080b4:	4602      	mov	r2, r0
 80080b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b8:	1ad3      	subs	r3, r2, r3
 80080ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80080be:	4293      	cmp	r3, r2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x496>
        {
          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e121      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_LSE_IsReady() != 0U)
 80080c6:	f7ff fb3c 	bl	8007742 <LL_RCC_LSE_IsReady>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1ef      	bne.n	80080b0 <HAL_RCC_OscConfig+0x480>
    }

  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d02c      	beq.n	8008136 <HAL_RCC_OscConfig+0x506>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d014      	beq.n	800810e <HAL_RCC_OscConfig+0x4de>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80080e4:	f7ff fab5 	bl	8007652 <LL_RCC_HSI48_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e8:	f7fd fc34 	bl	8005954 <HAL_GetTick>
 80080ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (LL_RCC_HSI48_IsReady() == 0U)
 80080ee:	e008      	b.n	8008102 <HAL_RCC_OscConfig+0x4d2>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80080f0:	f7fd fc30 	bl	8005954 <HAL_GetTick>
 80080f4:	4602      	mov	r2, r0
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	2b02      	cmp	r3, #2
 80080fc:	d901      	bls.n	8008102 <HAL_RCC_OscConfig+0x4d2>
        {
          return HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	e103      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() == 0U)
 8008102:	f7ff fac8 	bl	8007696 <LL_RCC_HSI48_IsReady>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d0f1      	beq.n	80080f0 <HAL_RCC_OscConfig+0x4c0>
 800810c:	e013      	b.n	8008136 <HAL_RCC_OscConfig+0x506>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800810e:	f7ff fab1 	bl	8007674 <LL_RCC_HSI48_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008112:	f7fd fc1f 	bl	8005954 <HAL_GetTick>
 8008116:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is disabled */
      while (LL_RCC_HSI48_IsReady() != 0U)
 8008118:	e008      	b.n	800812c <HAL_RCC_OscConfig+0x4fc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800811a:	f7fd fc1b 	bl	8005954 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCC_OscConfig+0x4fc>
        {
          return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e0ee      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      while (LL_RCC_HSI48_IsReady() != 0U)
 800812c:	f7ff fab3 	bl	8007696 <LL_RCC_HSI48_IsReady>
 8008130:	4603      	mov	r3, r0
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1f1      	bne.n	800811a <HAL_RCC_OscConfig+0x4ea>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813a:	2b00      	cmp	r3, #0
 800813c:	f000 80e4 	beq.w	8008308 <HAL_RCC_OscConfig+0x6d8>
  {
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008140:	f7ff fc11 	bl	8007966 <LL_RCC_GetSysClkSource>
 8008144:	6138      	str	r0, [r7, #16]
    const uint32_t temp_pllconfig = RCC->PLLCFGR;
 8008146:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800814a:	68db      	ldr	r3, [r3, #12]
 800814c:	60fb      	str	r3, [r7, #12]

    /* PLL On ? */
    if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008152:	2b02      	cmp	r3, #2
 8008154:	f040 80b4 	bne.w	80082c0 <HAL_RCC_OscConfig+0x690>
      assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is unchanged */
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	f003 0203 	and.w	r2, r3, #3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008162:	429a      	cmp	r2, r3
 8008164:	d123      	bne.n	80081ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      if ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008170:	429a      	cmp	r2, r3
 8008172:	d11c      	bne.n	80081ae <HAL_RCC_OscConfig+0x57e>
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	0a1b      	lsrs	r3, r3, #8
 8008178:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008180:	429a      	cmp	r2, r3
 8008182:	d114      	bne.n	80081ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
          ((READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) != RCC_OscInitStruct->PLL.PLLN) ||
 800818e:	429a      	cmp	r2, r3
 8008190:	d10d      	bne.n	80081ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f003 6260 	and.w	r2, r3, #234881024	; 0xe000000
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800819c:	429a      	cmp	r2, r3
 800819e:	d106      	bne.n	80081ae <HAL_RCC_OscConfig+0x57e>
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
          (READ_BIT(temp_pllconfig, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d05d      	beq.n	800826a <HAL_RCC_OscConfig+0x63a>
      {
        /* Check if the PLL is used as system clock or not */
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	2b0c      	cmp	r3, #12
 80081b2:	d058      	beq.n	8008266 <HAL_RCC_OscConfig+0x636>
        {
#if defined(SAI1)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80081b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d001      	beq.n	80081c6 <HAL_RCC_OscConfig+0x596>

          {
            return HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	e0a1      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
          }
          else
#endif /* SAI1 */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80081c6:	f7ff fc84 	bl	8007ad2 <LL_RCC_PLL_Disable>

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80081ca:	f7fd fbc3 	bl	8005954 <HAL_GetTick>
 80081ce:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081d0:	e008      	b.n	80081e4 <HAL_RCC_OscConfig+0x5b4>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081d2:	f7fd fbbf 	bl	8005954 <HAL_GetTick>
 80081d6:	4602      	mov	r2, r0
 80081d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081da:	1ad3      	subs	r3, r2, r3
 80081dc:	2b02      	cmp	r3, #2
 80081de:	d901      	bls.n	80081e4 <HAL_RCC_OscConfig+0x5b4>
              {
                return HAL_TIMEOUT;
 80081e0:	2303      	movs	r3, #3
 80081e2:	e092      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80081e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d1ef      	bne.n	80081d2 <HAL_RCC_OscConfig+0x5a2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80081f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80081f6:	68da      	ldr	r2, [r3, #12]
 80081f8:	4b30      	ldr	r3, [pc, #192]	; (80082bc <HAL_RCC_OscConfig+0x68c>)
 80081fa:	4013      	ands	r3, r2
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8008200:	687a      	ldr	r2, [r7, #4]
 8008202:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008204:	4311      	orrs	r1, r2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800820a:	0212      	lsls	r2, r2, #8
 800820c:	4311      	orrs	r1, r2
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008212:	4311      	orrs	r1, r2
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008218:	4311      	orrs	r1, r2
 800821a:	687a      	ldr	r2, [r7, #4]
 800821c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800821e:	430a      	orrs	r2, r1
 8008220:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008224:	4313      	orrs	r3, r2
 8008226:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008228:	f7ff fc44 	bl	8007ab4 <LL_RCC_PLL_Enable>

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800822c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008236:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800823a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800823c:	f7fd fb8a 	bl	8005954 <HAL_GetTick>
 8008240:	6278      	str	r0, [r7, #36]	; 0x24

            /* Wait till PLL is ready */
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008242:	e008      	b.n	8008256 <HAL_RCC_OscConfig+0x626>
            {
              if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008244:	f7fd fb86 	bl	8005954 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	2b02      	cmp	r3, #2
 8008250:	d901      	bls.n	8008256 <HAL_RCC_OscConfig+0x626>
              {
                return HAL_TIMEOUT;
 8008252:	2303      	movs	r3, #3
 8008254:	e059      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
            while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008256:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d0ef      	beq.n	8008244 <HAL_RCC_OscConfig+0x614>
        if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008264:	e050      	b.n	8008308 <HAL_RCC_OscConfig+0x6d8>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	e04f      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800826a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008274:	2b00      	cmp	r3, #0
 8008276:	d147      	bne.n	8008308 <HAL_RCC_OscConfig+0x6d8>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008278:	f7ff fc1c 	bl	8007ab4 <LL_RCC_PLL_Enable>

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800827c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008286:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800828a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800828c:	f7fd fb62 	bl	8005954 <HAL_GetTick>
 8008290:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till PLL is ready */
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008292:	e008      	b.n	80082a6 <HAL_RCC_OscConfig+0x676>
          {
            if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008294:	f7fd fb5e 	bl	8005954 <HAL_GetTick>
 8008298:	4602      	mov	r2, r0
 800829a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829c:	1ad3      	subs	r3, r2, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d901      	bls.n	80082a6 <HAL_RCC_OscConfig+0x676>
            {
              return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e031      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
          while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80082a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d0ef      	beq.n	8008294 <HAL_RCC_OscConfig+0x664>
 80082b4:	e028      	b.n	8008308 <HAL_RCC_OscConfig+0x6d8>
 80082b6:	bf00      	nop
 80082b8:	58000400 	.word	0x58000400
 80082bc:	11c1808c 	.word	0x11c1808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if (temp_sysclksrc != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b0c      	cmp	r3, #12
 80082c4:	d01e      	beq.n	8008304 <HAL_RCC_OscConfig+0x6d4>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082c6:	f7ff fc04 	bl	8007ad2 <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082ca:	f7fd fb43 	bl	8005954 <HAL_GetTick>
 80082ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082d0:	e008      	b.n	80082e4 <HAL_RCC_OscConfig+0x6b4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082d2:	f7fd fb3f 	bl	8005954 <HAL_GetTick>
 80082d6:	4602      	mov	r2, r0
 80082d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082da:	1ad3      	subs	r3, r2, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d901      	bls.n	80082e4 <HAL_RCC_OscConfig+0x6b4>
          {
            return HAL_TIMEOUT;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e012      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d1ef      	bne.n	80082d2 <HAL_RCC_OscConfig+0x6a2>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
#if defined(SAI1) && defined(USB)
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80082f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80082f6:	68da      	ldr	r2, [r3, #12]
 80082f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80082fc:	4b05      	ldr	r3, [pc, #20]	; (8008314 <HAL_RCC_OscConfig+0x6e4>)
 80082fe:	4013      	ands	r3, r2
 8008300:	60cb      	str	r3, [r1, #12]
 8008302:	e001      	b.n	8008308 <HAL_RCC_OscConfig+0x6d8>
#endif /* SAI1 && USB */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008304:	2301      	movs	r3, #1
 8008306:	e000      	b.n	800830a <HAL_RCC_OscConfig+0x6da>
      }
    }
  }
  return HAL_OK;
 8008308:	2300      	movs	r3, #0
}
 800830a:	4618      	mov	r0, r3
 800830c:	3734      	adds	r7, #52	; 0x34
 800830e:	46bd      	mov	sp, r7
 8008310:	bd90      	pop	{r4, r7, pc}
 8008312:	bf00      	nop
 8008314:	eefefffc 	.word	0xeefefffc

08008318 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e12d      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK4) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800832c:	4b98      	ldr	r3, [pc, #608]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d91b      	bls.n	8008372 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800833a:	4b95      	ldr	r3, [pc, #596]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f023 0207 	bic.w	r2, r3, #7
 8008342:	4993      	ldr	r1, [pc, #588]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	4313      	orrs	r3, r2
 8008348:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800834a:	f7fd fb03 	bl	8005954 <HAL_GetTick>
 800834e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008350:	e008      	b.n	8008364 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008352:	f7fd faff 	bl	8005954 <HAL_GetTick>
 8008356:	4602      	mov	r2, r0
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	1ad3      	subs	r3, r2, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	d901      	bls.n	8008364 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8008360:	2303      	movs	r3, #3
 8008362:	e111      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008364:	4b8a      	ldr	r3, [pc, #552]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	f003 0307 	and.w	r3, r3, #7
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	429a      	cmp	r2, r3
 8008370:	d1ef      	bne.n	8008352 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f003 0302 	and.w	r3, r3, #2
 800837a:	2b00      	cmp	r3, #0
 800837c:	d016      	beq.n	80083ac <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	689b      	ldr	r3, [r3, #8]
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff fafb 	bl	800797e <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008388:	f7fd fae4 	bl	8005954 <HAL_GetTick>
 800838c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800838e:	e008      	b.n	80083a2 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008390:	f7fd fae0 	bl	8005954 <HAL_GetTick>
 8008394:	4602      	mov	r2, r0
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1ad3      	subs	r3, r2, r3
 800839a:	2b02      	cmp	r3, #2
 800839c:	d901      	bls.n	80083a2 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 800839e:	2303      	movs	r3, #3
 80083a0:	e0f2      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80083a2:	f7ff fbe8 	bl	8007b76 <LL_RCC_IsActiveFlag_HPRE>
 80083a6:	4603      	mov	r3, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d0f1      	beq.n	8008390 <HAL_RCC_ClockConfig+0x78>
      }
    }
  }

  /*-------------------------- HCLK2 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f003 0320 	and.w	r3, r3, #32
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d016      	beq.n	80083e6 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	695b      	ldr	r3, [r3, #20]
 80083bc:	4618      	mov	r0, r3
 80083be:	f7ff faf2 	bl	80079a6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80083c2:	f7fd fac7 	bl	8005954 <HAL_GetTick>
 80083c6:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80083c8:	e008      	b.n	80083dc <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80083ca:	f7fd fac3 	bl	8005954 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d901      	bls.n	80083dc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80083d8:	2303      	movs	r3, #3
 80083da:	e0d5      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80083dc:	f7ff fbdd 	bl	8007b9a <LL_RCC_IsActiveFlag_C2HPRE>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d0f1      	beq.n	80083ca <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }
  /*-------------------------- HCLK4 Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK4) == RCC_CLOCKTYPE_HCLK4)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d016      	beq.n	8008420 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK4Divider));
    LL_RCC_SetAHB4Prescaler(RCC_ClkInitStruct->AHBCLK4Divider);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7ff faeb 	bl	80079d2 <LL_RCC_SetAHB4Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80083fc:	f7fd faaa 	bl	8005954 <HAL_GetTick>
 8008400:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008402:	e008      	b.n	8008416 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8008404:	f7fd faa6 	bl	8005954 <HAL_GetTick>
 8008408:	4602      	mov	r2, r0
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	1ad3      	subs	r3, r2, r3
 800840e:	2b02      	cmp	r3, #2
 8008410:	d901      	bls.n	8008416 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e0b8      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8008416:	f7ff fbd3 	bl	8007bc0 <LL_RCC_IsActiveFlag_SHDHPRE>
 800841a:	4603      	mov	r3, r0
 800841c:	2b00      	cmp	r3, #0
 800841e:	d0f1      	beq.n	8008404 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f003 0304 	and.w	r3, r3, #4
 8008428:	2b00      	cmp	r3, #0
 800842a:	d016      	beq.n	800845a <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	4618      	mov	r0, r3
 8008432:	f7ff fae5 	bl	8007a00 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008436:	f7fd fa8d 	bl	8005954 <HAL_GetTick>
 800843a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800843c:	e008      	b.n	8008450 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800843e:	f7fd fa89 	bl	8005954 <HAL_GetTick>
 8008442:	4602      	mov	r2, r0
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	1ad3      	subs	r3, r2, r3
 8008448:	2b02      	cmp	r3, #2
 800844a:	d901      	bls.n	8008450 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 800844c:	2303      	movs	r3, #3
 800844e:	e09b      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8008450:	f7ff fbc9 	bl	8007be6 <LL_RCC_IsActiveFlag_PPRE1>
 8008454:	4603      	mov	r3, r0
 8008456:	2b00      	cmp	r3, #0
 8008458:	d0f1      	beq.n	800843e <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0308 	and.w	r3, r3, #8
 8008462:	2b00      	cmp	r3, #0
 8008464:	d017      	beq.n	8008496 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	00db      	lsls	r3, r3, #3
 800846c:	4618      	mov	r0, r3
 800846e:	f7ff fadb 	bl	8007a28 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8008472:	f7fd fa6f 	bl	8005954 <HAL_GetTick>
 8008476:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8008478:	e008      	b.n	800848c <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800847a:	f7fd fa6b 	bl	8005954 <HAL_GetTick>
 800847e:	4602      	mov	r2, r0
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	1ad3      	subs	r3, r2, r3
 8008484:	2b02      	cmp	r3, #2
 8008486:	d901      	bls.n	800848c <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8008488:	2303      	movs	r3, #3
 800848a:	e07d      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800848c:	f7ff fbbd 	bl	8007c0a <LL_RCC_IsActiveFlag_PPRE2>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d0f1      	beq.n	800847a <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d043      	beq.n	800852a <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	2b02      	cmp	r3, #2
 80084a8:	d106      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80084aa:	f7ff f87b 	bl	80075a4 <LL_RCC_HSE_IsReady>
 80084ae:	4603      	mov	r3, r0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d11e      	bne.n	80084f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e067      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d106      	bne.n	80084ce <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80084c0:	f7ff fb16 	bl	8007af0 <LL_RCC_PLL_IsReady>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d113      	bne.n	80084f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	e05c      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	685b      	ldr	r3, [r3, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d106      	bne.n	80084e4 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80084d6:	f7ff f9e3 	bl	80078a0 <LL_RCC_MSI_IsReady>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d108      	bne.n	80084f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	e051      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80084e4:	f7ff f88e 	bl	8007604 <LL_RCC_HSI_IsReady>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d101      	bne.n	80084f2 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e04a      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	4618      	mov	r0, r3
 80084f8:	f7ff fa21 	bl	800793e <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084fc:	f7fd fa2a 	bl	8005954 <HAL_GetTick>
 8008500:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008502:	e00a      	b.n	800851a <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008504:	f7fd fa26 	bl	8005954 <HAL_GetTick>
 8008508:	4602      	mov	r2, r0
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	1ad3      	subs	r3, r2, r3
 800850e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008512:	4293      	cmp	r3, r2
 8008514:	d901      	bls.n	800851a <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e036      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800851a:	f7ff fa24 	bl	8007966 <LL_RCC_GetSysClkSource>
 800851e:	4602      	mov	r2, r0
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	429a      	cmp	r2, r3
 8008528:	d1ec      	bne.n	8008504 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800852a:	4b19      	ldr	r3, [pc, #100]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0307 	and.w	r3, r3, #7
 8008532:	683a      	ldr	r2, [r7, #0]
 8008534:	429a      	cmp	r2, r3
 8008536:	d21b      	bcs.n	8008570 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008538:	4b15      	ldr	r3, [pc, #84]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f023 0207 	bic.w	r2, r3, #7
 8008540:	4913      	ldr	r1, [pc, #76]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	4313      	orrs	r3, r2
 8008546:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008548:	f7fd fa04 	bl	8005954 <HAL_GetTick>
 800854c:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800854e:	e008      	b.n	8008562 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8008550:	f7fd fa00 	bl	8005954 <HAL_GetTick>
 8008554:	4602      	mov	r2, r0
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	1ad3      	subs	r3, r2, r3
 800855a:	2b02      	cmp	r3, #2
 800855c:	d901      	bls.n	8008562 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800855e:	2303      	movs	r3, #3
 8008560:	e012      	b.n	8008588 <HAL_RCC_ClockConfig+0x270>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008562:	4b0b      	ldr	r3, [pc, #44]	; (8008590 <HAL_RCC_ClockConfig+0x278>)
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f003 0307 	and.w	r3, r3, #7
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d1ef      	bne.n	8008550 <HAL_RCC_ClockConfig+0x238>
  }

  /*---------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8008570:	f000 f87e 	bl	8008670 <HAL_RCC_GetHCLKFreq>
 8008574:	4603      	mov	r3, r0
 8008576:	4a07      	ldr	r2, [pc, #28]	; (8008594 <HAL_RCC_ClockConfig+0x27c>)
 8008578:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(HAL_GetTickPrio());
 800857a:	f7fd f9f7 	bl	800596c <HAL_GetTickPrio>
 800857e:	4603      	mov	r3, r0
 8008580:	4618      	mov	r0, r3
 8008582:	f7fd f999 	bl	80058b8 <HAL_InitTick>
 8008586:	4603      	mov	r3, r0
}
 8008588:	4618      	mov	r0, r3
 800858a:	3710      	adds	r7, #16
 800858c:	46bd      	mov	sp, r7
 800858e:	bd80      	pop	{r7, pc}
 8008590:	58004000 	.word	0x58004000
 8008594:	20000038 	.word	0x20000038

08008598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008598:	b590      	push	{r4, r7, lr}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
  uint32_t pllsource;
  uint32_t sysclockfreq;
  uint32_t pllinputfreq;
  const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800859e:	f7ff f9e2 	bl	8007966 <LL_RCC_GetSysClkSource>
 80085a2:	6078      	str	r0, [r7, #4]

  if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d10a      	bne.n	80085c0 <HAL_RCC_GetSysClockFreq+0x28>
  {
    /* Retrieve MSI frequency range in HZ*/
    /* MSI used as system clock source */
    sysclockfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 80085aa:	f7ff f99e 	bl	80078ea <LL_RCC_MSI_GetRange>
 80085ae:	4603      	mov	r3, r0
 80085b0:	091b      	lsrs	r3, r3, #4
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	4a2b      	ldr	r2, [pc, #172]	; (8008664 <HAL_RCC_GetSysClockFreq+0xcc>)
 80085b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085bc:	60fb      	str	r3, [r7, #12]
 80085be:	e04b      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2b04      	cmp	r3, #4
 80085c4:	d102      	bne.n	80085cc <HAL_RCC_GetSysClockFreq+0x34>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80085c6:	4b28      	ldr	r3, [pc, #160]	; (8008668 <HAL_RCC_GetSysClockFreq+0xd0>)
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e045      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2b08      	cmp	r3, #8
 80085d0:	d10a      	bne.n	80085e8 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80085d2:	f7fe ffb7 	bl	8007544 <LL_RCC_HSE_IsEnabledDiv2>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b01      	cmp	r3, #1
 80085da:	d102      	bne.n	80085e2 <HAL_RCC_GetSysClockFreq+0x4a>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80085dc:	4b22      	ldr	r3, [pc, #136]	; (8008668 <HAL_RCC_GetSysClockFreq+0xd0>)
 80085de:	60fb      	str	r3, [r7, #12]
 80085e0:	e03a      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80085e2:	4b22      	ldr	r3, [pc, #136]	; (800866c <HAL_RCC_GetSysClockFreq+0xd4>)
 80085e4:	60fb      	str	r3, [r7, #12]
 80085e6:	e037      	b.n	8008658 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80085e8:	f7ff fab9 	bl	8007b5e <LL_RCC_PLL_GetMainSource>
 80085ec:	6038      	str	r0, [r7, #0]
    switch (pllsource)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b02      	cmp	r3, #2
 80085f2:	d003      	beq.n	80085fc <HAL_RCC_GetSysClockFreq+0x64>
 80085f4:	683b      	ldr	r3, [r7, #0]
 80085f6:	2b03      	cmp	r3, #3
 80085f8:	d003      	beq.n	8008602 <HAL_RCC_GetSysClockFreq+0x6a>
 80085fa:	e00d      	b.n	8008618 <HAL_RCC_GetSysClockFreq+0x80>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80085fc:	4b1a      	ldr	r3, [pc, #104]	; (8008668 <HAL_RCC_GetSysClockFreq+0xd0>)
 80085fe:	60bb      	str	r3, [r7, #8]
        break;
 8008600:	e015      	b.n	800862e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8008602:	f7fe ff9f 	bl	8007544 <LL_RCC_HSE_IsEnabledDiv2>
 8008606:	4603      	mov	r3, r0
 8008608:	2b01      	cmp	r3, #1
 800860a:	d102      	bne.n	8008612 <HAL_RCC_GetSysClockFreq+0x7a>
        {
          pllinputfreq = HSE_VALUE / 2U;
 800860c:	4b16      	ldr	r3, [pc, #88]	; (8008668 <HAL_RCC_GetSysClockFreq+0xd0>)
 800860e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8008610:	e00d      	b.n	800862e <HAL_RCC_GetSysClockFreq+0x96>
          pllinputfreq = HSE_VALUE;
 8008612:	4b16      	ldr	r3, [pc, #88]	; (800866c <HAL_RCC_GetSysClockFreq+0xd4>)
 8008614:	60bb      	str	r3, [r7, #8]
        break;
 8008616:	e00a      	b.n	800862e <HAL_RCC_GetSysClockFreq+0x96>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_GetRange());
 8008618:	f7ff f967 	bl	80078ea <LL_RCC_MSI_GetRange>
 800861c:	4603      	mov	r3, r0
 800861e:	091b      	lsrs	r3, r3, #4
 8008620:	f003 030f 	and.w	r3, r3, #15
 8008624:	4a0f      	ldr	r2, [pc, #60]	; (8008664 <HAL_RCC_GetSysClockFreq+0xcc>)
 8008626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800862a:	60bb      	str	r3, [r7, #8]
        break;
 800862c:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(), LL_RCC_PLL_GetN(),
 800862e:	f7ff fa71 	bl	8007b14 <LL_RCC_PLL_GetN>
 8008632:	4602      	mov	r2, r0
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	fb03 f402 	mul.w	r4, r3, r2
 800863a:	f7ff fa84 	bl	8007b46 <LL_RCC_PLL_GetDivider>
 800863e:	4603      	mov	r3, r0
 8008640:	091b      	lsrs	r3, r3, #4
 8008642:	3301      	adds	r3, #1
 8008644:	fbb4 f4f3 	udiv	r4, r4, r3
 8008648:	f7ff fa71 	bl	8007b2e <LL_RCC_PLL_GetR>
 800864c:	4603      	mov	r3, r0
 800864e:	0f5b      	lsrs	r3, r3, #29
 8008650:	3301      	adds	r3, #1
 8008652:	fbb4 f3f3 	udiv	r3, r4, r3
 8008656:	60fb      	str	r3, [r7, #12]
                                             LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8008658:	68fb      	ldr	r3, [r7, #12]
}
 800865a:	4618      	mov	r0, r3
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	bd90      	pop	{r4, r7, pc}
 8008662:	bf00      	nop
 8008664:	08012ff8 	.word	0x08012ff8
 8008668:	00f42400 	.word	0x00f42400
 800866c:	01e84800 	.word	0x01e84800

08008670 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008670:	b598      	push	{r3, r4, r7, lr}
 8008672:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8008674:	f7ff ff90 	bl	8008598 <HAL_RCC_GetSysClockFreq>
 8008678:	4604      	mov	r4, r0
 800867a:	f7ff f9e9 	bl	8007a50 <LL_RCC_GetAHBPrescaler>
 800867e:	4603      	mov	r3, r0
 8008680:	091b      	lsrs	r3, r3, #4
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	4a03      	ldr	r2, [pc, #12]	; (8008694 <HAL_RCC_GetHCLKFreq+0x24>)
 8008688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800868c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8008690:	4618      	mov	r0, r3
 8008692:	bd98      	pop	{r3, r4, r7, pc}
 8008694:	08012f98 	.word	0x08012f98

08008698 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008698:	b598      	push	{r3, r4, r7, lr}
 800869a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800869c:	f7ff ffe8 	bl	8008670 <HAL_RCC_GetHCLKFreq>
 80086a0:	4604      	mov	r4, r0
 80086a2:	f7ff f9ef 	bl	8007a84 <LL_RCC_GetAPB1Prescaler>
 80086a6:	4603      	mov	r3, r0
 80086a8:	0a1b      	lsrs	r3, r3, #8
 80086aa:	f003 0307 	and.w	r3, r3, #7
 80086ae:	4a04      	ldr	r2, [pc, #16]	; (80086c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80086b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b4:	f003 031f 	and.w	r3, r3, #31
 80086b8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80086bc:	4618      	mov	r0, r3
 80086be:	bd98      	pop	{r3, r4, r7, pc}
 80086c0:	08012fd8 	.word	0x08012fd8

080086c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086c4:	b598      	push	{r3, r4, r7, lr}
 80086c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80086c8:	f7ff ffd2 	bl	8008670 <HAL_RCC_GetHCLKFreq>
 80086cc:	4604      	mov	r4, r0
 80086ce:	f7ff f9e5 	bl	8007a9c <LL_RCC_GetAPB2Prescaler>
 80086d2:	4603      	mov	r3, r0
 80086d4:	0adb      	lsrs	r3, r3, #11
 80086d6:	f003 0307 	and.w	r3, r3, #7
 80086da:	4a04      	ldr	r2, [pc, #16]	; (80086ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80086dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086e0:	f003 031f 	and.w	r3, r3, #31
 80086e4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	bd98      	pop	{r3, r4, r7, pc}
 80086ec:	08012fd8 	.word	0x08012fd8

080086f0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80086f0:	b590      	push	{r4, r7, lr}
 80086f2:	b085      	sub	sp, #20
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_MSI_CLOCK_RANGE(MSI_Range));

  /* MSI frequency range in Hz */
  if (MSI_Range > RCC_MSIRANGE_11)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2bb0      	cmp	r3, #176	; 0xb0
 80086fc:	d903      	bls.n	8008706 <RCC_SetFlashLatencyFromMSIRange+0x16>
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(RCC_MSIRANGE_11);
 80086fe:	4b15      	ldr	r3, [pc, #84]	; (8008754 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008702:	60fb      	str	r3, [r7, #12]
 8008704:	e007      	b.n	8008716 <RCC_SetFlashLatencyFromMSIRange+0x26>
  }
  else
  {
    msifreq = __LL_RCC_CALC_MSI_FREQ(MSI_Range);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	091b      	lsrs	r3, r3, #4
 800870a:	f003 030f 	and.w	r3, r3, #15
 800870e:	4a11      	ldr	r2, [pc, #68]	; (8008754 <RCC_SetFlashLatencyFromMSIRange+0x64>)
 8008710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008714:	60fb      	str	r3, [r7, #12]
  }

  flash_clksrcfreq = __LL_RCC_CALC_HCLK4_FREQ(msifreq, LL_RCC_GetAHB4Prescaler());
 8008716:	f7ff f9a7 	bl	8007a68 <LL_RCC_GetAHB4Prescaler>
 800871a:	4603      	mov	r3, r0
 800871c:	091b      	lsrs	r3, r3, #4
 800871e:	f003 030f 	and.w	r3, r3, #15
 8008722:	4a0d      	ldr	r2, [pc, #52]	; (8008758 <RCC_SetFlashLatencyFromMSIRange+0x68>)
 8008724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	fbb2 f3f3 	udiv	r3, r2, r3
 800872e:	60bb      	str	r3, [r7, #8]

#if defined(PWR_CR1_VOS)
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	4a0a      	ldr	r2, [pc, #40]	; (800875c <RCC_SetFlashLatencyFromMSIRange+0x6c>)
 8008734:	fba2 2303 	umull	r2, r3, r2, r3
 8008738:	0c9c      	lsrs	r4, r3, #18
 800873a:	f7fe fef5 	bl	8007528 <HAL_PWREx_GetVoltageRange>
 800873e:	4603      	mov	r3, r0
 8008740:	4619      	mov	r1, r3
 8008742:	4620      	mov	r0, r4
 8008744:	f000 f80c 	bl	8008760 <RCC_SetFlashLatency>
 8008748:	4603      	mov	r3, r0
#else
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), PWR_REGULATOR_VOLTAGE_SCALE1);
#endif /* PWR_CR1_VOS */
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	bd90      	pop	{r4, r7, pc}
 8008752:	bf00      	nop
 8008754:	08012ff8 	.word	0x08012ff8
 8008758:	08012f98 	.word	0x08012f98
 800875c:	431bde83 	.word	0x431bde83

08008760 <RCC_SetFlashLatency>:
  * @param  Flash_ClkSrcFreq  Flash Clock Source (in MHz)
  * @param  VCORE_Voltage     Current Vcore voltage (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8008760:	b590      	push	{r4, r7, lr}
 8008762:	b093      	sub	sp, #76	; 0x4c
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range1 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS1[] = {18UL, 36UL, 54UL, 64UL};
 800876a:	4b37      	ldr	r3, [pc, #220]	; (8008848 <RCC_SetFlashLatency+0xe8>)
 800876c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8008770:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8008772:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(PWR_CR1_VOS)
  /* Flash Clock source (HCLK4) range in MHz with a VCORE is range2 */
  const uint32_t FLASH_CLK_SRC_RANGE_VOS2[] = {6UL, 12UL, 16UL};
 8008776:	4a35      	ldr	r2, [pc, #212]	; (800884c <RCC_SetFlashLatency+0xec>)
 8008778:	f107 031c 	add.w	r3, r7, #28
 800877c:	ca07      	ldmia	r2, {r0, r1, r2}
 800877e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
#endif /* PWR_CR1_VOS */
  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2, FLASH_LATENCY_3};
 8008782:	4b33      	ldr	r3, [pc, #204]	; (8008850 <RCC_SetFlashLatency+0xf0>)
 8008784:	f107 040c 	add.w	r4, r7, #12
 8008788:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800878a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800878e:	2300      	movs	r3, #0
 8008790:	647b      	str	r3, [r7, #68]	; 0x44
  uint32_t tickstart;

#if defined(PWR_CR1_VOS)
  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008798:	d11a      	bne.n	80087d0 <RCC_SetFlashLatency+0x70>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800879a:	2300      	movs	r3, #0
 800879c:	643b      	str	r3, [r7, #64]	; 0x40
 800879e:	e013      	b.n	80087c8 <RCC_SetFlashLatency+0x68>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80087a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	3348      	adds	r3, #72	; 0x48
 80087a6:	443b      	add	r3, r7
 80087a8:	f853 3c20 	ldr.w	r3, [r3, #-32]
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d807      	bhi.n	80087c2 <RCC_SetFlashLatency+0x62>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80087b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087b4:	009b      	lsls	r3, r3, #2
 80087b6:	3348      	adds	r3, #72	; 0x48
 80087b8:	443b      	add	r3, r7
 80087ba:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80087be:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80087c0:	e020      	b.n	8008804 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80087c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c4:	3301      	adds	r3, #1
 80087c6:	643b      	str	r3, [r7, #64]	; 0x40
 80087c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087ca:	2b03      	cmp	r3, #3
 80087cc:	d9e8      	bls.n	80087a0 <RCC_SetFlashLatency+0x40>
 80087ce:	e019      	b.n	8008804 <RCC_SetFlashLatency+0xa4>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80087d0:	2300      	movs	r3, #0
 80087d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087d4:	e013      	b.n	80087fe <RCC_SetFlashLatency+0x9e>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80087d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d8:	009b      	lsls	r3, r3, #2
 80087da:	3348      	adds	r3, #72	; 0x48
 80087dc:	443b      	add	r3, r7
 80087de:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d807      	bhi.n	80087f8 <RCC_SetFlashLatency+0x98>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80087e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ea:	009b      	lsls	r3, r3, #2
 80087ec:	3348      	adds	r3, #72	; 0x48
 80087ee:	443b      	add	r3, r7
 80087f0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 80087f4:	647b      	str	r3, [r7, #68]	; 0x44
        break;
 80087f6:	e005      	b.n	8008804 <RCC_SetFlashLatency+0xa4>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80087f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087fa:	3301      	adds	r3, #1
 80087fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008800:	2b02      	cmp	r3, #2
 8008802:	d9e8      	bls.n	80087d6 <RCC_SetFlashLatency+0x76>
      break;
    }
  }
#endif /* PWR_CR1_VOS */

  __HAL_FLASH_SET_LATENCY(latency);
 8008804:	4b13      	ldr	r3, [pc, #76]	; (8008854 <RCC_SetFlashLatency+0xf4>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f023 0207 	bic.w	r2, r3, #7
 800880c:	4911      	ldr	r1, [pc, #68]	; (8008854 <RCC_SetFlashLatency+0xf4>)
 800880e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008810:	4313      	orrs	r3, r2
 8008812:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008814:	f7fd f89e 	bl	8005954 <HAL_GetTick>
 8008818:	63b8      	str	r0, [r7, #56]	; 0x38

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800881a:	e008      	b.n	800882e <RCC_SetFlashLatency+0xce>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800881c:	f7fd f89a 	bl	8005954 <HAL_GetTick>
 8008820:	4602      	mov	r2, r0
 8008822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008824:	1ad3      	subs	r3, r2, r3
 8008826:	2b02      	cmp	r3, #2
 8008828:	d901      	bls.n	800882e <RCC_SetFlashLatency+0xce>
    {
      return HAL_TIMEOUT;
 800882a:	2303      	movs	r3, #3
 800882c:	e007      	b.n	800883e <RCC_SetFlashLatency+0xde>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800882e:	4b09      	ldr	r3, [pc, #36]	; (8008854 <RCC_SetFlashLatency+0xf4>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008838:	429a      	cmp	r2, r3
 800883a:	d1ef      	bne.n	800881c <RCC_SetFlashLatency+0xbc>
    }
  }
  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	374c      	adds	r7, #76	; 0x4c
 8008842:	46bd      	mov	sp, r7
 8008844:	bd90      	pop	{r4, r7, pc}
 8008846:	bf00      	nop
 8008848:	08012dd0 	.word	0x08012dd0
 800884c:	08012de0 	.word	0x08012de0
 8008850:	08012dec 	.word	0x08012dec
 8008854:	58004000 	.word	0x58004000

08008858 <LL_RCC_LSE_IsEnabled>:
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSEON) == (RCC_BDCR_LSEON)) ? 1UL : 0UL);
 800885c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008864:	f003 0301 	and.w	r3, r3, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	d101      	bne.n	8008870 <LL_RCC_LSE_IsEnabled+0x18>
 800886c:	2301      	movs	r3, #1
 800886e:	e000      	b.n	8008872 <LL_RCC_LSE_IsEnabled+0x1a>
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <LL_RCC_LSE_IsReady>:
{
 800887c:	b480      	push	{r7}
 800887e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8008880:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008888:	f003 0302 	and.w	r3, r3, #2
 800888c:	2b02      	cmp	r3, #2
 800888e:	d101      	bne.n	8008894 <LL_RCC_LSE_IsReady+0x18>
 8008890:	2301      	movs	r3, #1
 8008892:	e000      	b.n	8008896 <LL_RCC_LSE_IsReady+0x1a>
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <LL_RCC_SetRFWKPClockSource>:
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CSR, RCC_CSR_RFWKPSEL, Source);
 80088a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80088b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
}
 80088c0:	bf00      	nop
 80088c2:	370c      	adds	r7, #12
 80088c4:	46bd      	mov	sp, r7
 80088c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ca:	4770      	bx	lr

080088cc <LL_RCC_SetSMPSClockSource>:
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSSEL, SMPSSource);
 80088d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088da:	f023 0203 	bic.w	r2, r3, #3
 80088de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	624b      	str	r3, [r1, #36]	; 0x24
}
 80088e8:	bf00      	nop
 80088ea:	370c      	adds	r7, #12
 80088ec:	46bd      	mov	sp, r7
 80088ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f2:	4770      	bx	lr

080088f4 <LL_RCC_SetSMPSPrescaler>:
{
 80088f4:	b480      	push	{r7}
 80088f6:	b083      	sub	sp, #12
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->SMPSCR, RCC_SMPSCR_SMPSDIV, Prescaler);
 80088fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008902:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008906:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	4313      	orrs	r3, r2
 800890e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008910:	bf00      	nop
 8008912:	370c      	adds	r7, #12
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <LL_RCC_SetUSARTClockSource>:
{
 800891c:	b480      	push	{r7}
 800891e:	b083      	sub	sp, #12
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, USARTxSource);
 8008924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800892c:	f023 0203 	bic.w	r2, r3, #3
 8008930:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	4313      	orrs	r3, r2
 8008938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <LL_RCC_SetLPUARTClockSource>:
{
 8008948:	b480      	push	{r7}
 800894a:	b083      	sub	sp, #12
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8008950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008958:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800895c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	4313      	orrs	r3, r2
 8008964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008968:	bf00      	nop
 800896a:	370c      	adds	r7, #12
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr

08008974 <LL_RCC_SetI2CClockSource>:
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800897c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008980:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	091b      	lsrs	r3, r3, #4
 8008988:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800898c:	43db      	mvns	r3, r3
 800898e:	401a      	ands	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	011b      	lsls	r3, r3, #4
 8008994:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8008998:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800899c:	4313      	orrs	r3, r2
 800899e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80089a2:	bf00      	nop
 80089a4:	370c      	adds	r7, #12
 80089a6:	46bd      	mov	sp, r7
 80089a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ac:	4770      	bx	lr

080089ae <LL_RCC_SetLPTIMClockSource>:
{
 80089ae:	b480      	push	{r7}
 80089b0:	b083      	sub	sp, #12
 80089b2:	af00      	add	r7, sp, #0
 80089b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80089b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	0c1b      	lsrs	r3, r3, #16
 80089c2:	041b      	lsls	r3, r3, #16
 80089c4:	43db      	mvns	r3, r3
 80089c6:	401a      	ands	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	041b      	lsls	r3, r3, #16
 80089cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089d0:	4313      	orrs	r3, r2
 80089d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <LL_RCC_SetSAIClockSource>:
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_SAI1SEL, SAIxSource);
 80089ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80089ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80089f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a02:	bf00      	nop
 8008a04:	370c      	adds	r7, #12
 8008a06:	46bd      	mov	sp, r7
 8008a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0c:	4770      	bx	lr

08008a0e <LL_RCC_SetRNGClockSource>:
{
 8008a0e:	b480      	push	{r7}
 8008a10:	b083      	sub	sp, #12
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8008a16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a1e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008a22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a2e:	bf00      	nop
 8008a30:	370c      	adds	r7, #12
 8008a32:	46bd      	mov	sp, r7
 8008a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a38:	4770      	bx	lr

08008a3a <LL_RCC_SetCLK48ClockSource>:
{
 8008a3a:	b480      	push	{r7}
 8008a3c:	b083      	sub	sp, #12
 8008a3e:	af00      	add	r7, sp, #0
 8008a40:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_CLK48SEL, CLK48xSource);
 8008a42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008a4e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a5a:	bf00      	nop
 8008a5c:	370c      	adds	r7, #12
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr

08008a66 <LL_RCC_SetUSBClockSource>:
{
 8008a66:	b580      	push	{r7, lr}
 8008a68:	b082      	sub	sp, #8
 8008a6a:	af00      	add	r7, sp, #0
 8008a6c:	6078      	str	r0, [r7, #4]
  LL_RCC_SetCLK48ClockSource(USBxSource);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f7ff ffe3 	bl	8008a3a <LL_RCC_SetCLK48ClockSource>
}
 8008a74:	bf00      	nop
 8008a76:	3708      	adds	r7, #8
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <LL_RCC_SetADCClockSource>:
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8008a84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a8c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008a90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4313      	orrs	r3, r2
 8008a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8008a9c:	bf00      	nop
 8008a9e:	370c      	adds	r7, #12
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr

08008aa8 <LL_RCC_SetRTCClockSource>:
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8008ab0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ab8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008abc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4313      	orrs	r3, r2
 8008ac4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8008ac8:	bf00      	nop
 8008aca:	370c      	adds	r7, #12
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <LL_RCC_GetRTCClockSource>:
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8008ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ae0:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr

08008aee <LL_RCC_ForceBackupDomainReset>:
{
 8008aee:	b480      	push	{r7}
 8008af0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008af2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008afa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008afe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008b02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008b06:	bf00      	nop
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <LL_RCC_ReleaseBackupDomainReset>:
{
 8008b10:	b480      	push	{r7}
 8008b12:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8008b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8008b28:	bf00      	nop
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <LL_RCC_PLLSAI1_Enable>:
{
 8008b32:	b480      	push	{r7}
 8008b34:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b44:	6013      	str	r3, [r2, #0]
}
 8008b46:	bf00      	nop
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <LL_RCC_PLLSAI1_Disable>:
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLSAI1ON);
 8008b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008b5e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008b62:	6013      	str	r3, [r2, #0]
}
 8008b64:	bf00      	nop
 8008b66:	46bd      	mov	sp, r7
 8008b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6c:	4770      	bx	lr

08008b6e <LL_RCC_PLLSAI1_IsReady>:
{
 8008b6e:	b480      	push	{r7}
 8008b70:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == (RCC_CR_PLLSAI1RDY)) ? 1UL : 0UL);
 8008b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008b80:	d101      	bne.n	8008b86 <LL_RCC_PLLSAI1_IsReady+0x18>
 8008b82:	2301      	movs	r3, #1
 8008b84:	e000      	b.n	8008b88 <LL_RCC_PLLSAI1_IsReady+0x1a>
 8008b86:	2300      	movs	r3, #0
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b088      	sub	sp, #32
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef ret     = HAL_OK;      /* Intermediate status */
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	77bb      	strb	r3, [r7, #30]
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d034      	beq.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008bb6:	d021      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8008bb8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008bbc:	d81b      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bc2:	d01d      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8008bc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bc8:	d815      	bhi.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x54>
 8008bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bd2:	d110      	bne.n	8008bf6 <HAL_RCCEx_PeriphCLKConfig+0x64>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1 */
        /* Enable SAI1 Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI1CLK);
 8008bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bd8:	68db      	ldr	r3, [r3, #12]
 8008bda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008be2:	60d3      	str	r3, [r2, #12]

        /* SAI1 clock source config set later after clock selection check */
        break;
 8008be4:	e00d      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x70>

      case RCC_SAI1CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI1 */
        /* PLLSAI1 parameters N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_ConfigNP(&(PeriphClkInit->PLLSAI1));
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	3304      	adds	r3, #4
 8008bea:	4618      	mov	r0, r3
 8008bec:	f000 f947 	bl	8008e7e <RCCEx_PLLSAI1_ConfigNP>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8008bf4:	e005      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x70>
      case RCC_SAI1CLKSOURCE_HSI:

        break;

      default:
        ret = HAL_ERROR;
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	77fb      	strb	r3, [r7, #31]
        break;
 8008bfa:	e002      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008bfc:	bf00      	nop
 8008bfe:	e000      	b.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x70>
        break;
 8008c00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c02:	7ffb      	ldrb	r3, [r7, #31]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d105      	bne.n	8008c14 <HAL_RCCEx_PeriphCLKConfig+0x82>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f7ff fee8 	bl	80089e2 <LL_RCC_SetSAIClockSource>
 8008c12:	e001      	b.n	8008c18 <HAL_RCCEx_PeriphCLKConfig+0x86>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c14:	7ffb      	ldrb	r3, [r7, #31]
 8008c16:	77bb      	strb	r3, [r7, #30]
    }
  }
#endif /* SAI1 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d046      	beq.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    uint32_t rtcclocksource = LL_RCC_GetRTCClockSource();
 8008c24:	f7ff ff56 	bl	8008ad4 <LL_RCC_GetRTCClockSource>
 8008c28:	61b8      	str	r0, [r7, #24]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Configure the clock source only if a different source is expected */
    if (rtcclocksource != PeriphClkInit->RTCClockSelection)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2e:	69ba      	ldr	r2, [r7, #24]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d03c      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8008c34:	f7fe fc68 	bl	8007508 <HAL_PWR_EnableBkUpAccess>

      /* If a clock source is not yet selected */
      if (rtcclocksource == RCC_RTCCLKSOURCE_NONE)
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d105      	bne.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0xb8>
      {
        /* Directly set the configuration of the clock source selection */
        LL_RCC_SetRTCClockSource(PeriphClkInit->RTCClockSelection);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7ff ff30 	bl	8008aa8 <LL_RCC_SetRTCClockSource>
 8008c48:	e02e      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x116>
      }
      else /* A clock source is already selected */
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        uint32_t bdcr = LL_RCC_ReadReg(BDCR);
 8008c4a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c52:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        LL_RCC_ForceBackupDomainReset();
 8008c54:	f7ff ff4b 	bl	8008aee <LL_RCC_ForceBackupDomainReset>
        LL_RCC_ReleaseBackupDomainReset();
 8008c58:	f7ff ff5a 	bl	8008b10 <LL_RCC_ReleaseBackupDomainReset>

        /* Set the value of the clock source selection */
        MODIFY_REG(bdcr, RCC_BDCR_RTCSEL, PeriphClkInit->RTCClockSelection);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	4313      	orrs	r3, r2
 8008c68:	617b      	str	r3, [r7, #20]

        /* Restore the content of BDCR register */
        LL_RCC_WriteReg(BDCR, bdcr);
 8008c6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
        if (LL_RCC_LSE_IsEnabled() == 1U)
 8008c74:	f7ff fdf0 	bl	8008858 <LL_RCC_LSE_IsEnabled>
 8008c78:	4603      	mov	r3, r0
 8008c7a:	2b01      	cmp	r3, #1
 8008c7c:	d114      	bne.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c7e:	f7fc fe69 	bl	8005954 <HAL_GetTick>
 8008c82:	6138      	str	r0, [r7, #16]

          /* Wait till LSE is ready */
          while (LL_RCC_LSE_IsReady() != 1U)
 8008c84:	e00b      	b.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
          {
            if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c86:	f7fc fe65 	bl	8005954 <HAL_GetTick>
 8008c8a:	4602      	mov	r2, r0
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	1ad3      	subs	r3, r2, r3
 8008c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d902      	bls.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x10c>
            {
              ret = HAL_TIMEOUT;
 8008c98:	2303      	movs	r3, #3
 8008c9a:	77fb      	strb	r3, [r7, #31]
              break;
 8008c9c:	e004      	b.n	8008ca8 <HAL_RCCEx_PeriphCLKConfig+0x116>
          while (LL_RCC_LSE_IsReady() != 1U)
 8008c9e:	f7ff fded 	bl	800887c <LL_RCC_LSE_IsReady>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d1ee      	bne.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }

      /* set overall return value */
      status = ret;
 8008ca8:	7ffb      	ldrb	r3, [r7, #31]
 8008caa:	77bb      	strb	r3, [r7, #30]
 8008cac:	e001      	b.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cae:	7ffb      	ldrb	r3, [r7, #31]
 8008cb0:	77bb      	strb	r3, [r7, #30]
    }

  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d004      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff fe2a 	bl	800891c <LL_RCC_SetUSARTClockSource>
  }

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d004      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	69db      	ldr	r3, [r3, #28]
 8008cd8:	4618      	mov	r0, r3
 8008cda:	f7ff fe35 	bl	8008948 <LL_RCC_SetLPUARTClockSource>
  }
#endif /* LPUART1 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0310 	and.w	r3, r3, #16
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d004      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f7ff fe5d 	bl	80089ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0320 	and.w	r3, r3, #32
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d04:	4618      	mov	r0, r3
 8008d06:	f7ff fe52 	bl	80089ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 0304 	and.w	r3, r3, #4
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d004      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a1b      	ldr	r3, [r3, #32]
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff fe2a 	bl	8008974 <LL_RCC_SetI2CClockSource>
  }

#if defined(I2C3)
  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	f003 0308 	and.w	r3, r3, #8
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d004      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d30:	4618      	mov	r0, r3
 8008d32:	f7ff fe1f 	bl	8008974 <LL_RCC_SetI2CClockSource>
  }
#endif /* I2C3 */

#if defined(USB)
  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d022      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fe8d 	bl	8008a66 <LL_RCC_SetUSBClockSource>

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d54:	d107      	bne.n	8008d66 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_USBCLK);
 8008d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008d64:	60d3      	str	r3, [r2, #12]
    }
#if defined(SAI1)
    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008d6e:	d10b      	bne.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* PLLSAI1 parameters N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNQ(&(PeriphClkInit->PLLSAI1));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3304      	adds	r3, #4
 8008d74:	4618      	mov	r0, r3
 8008d76:	f000 f8dd 	bl	8008f34 <RCCEx_PLLSAI1_ConfigNQ>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008d7e:	7ffb      	ldrb	r3, [r7, #31]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d001      	beq.n	8008d88 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      {
        /* set overall return value */
        status = ret;
 8008d84:	7ffb      	ldrb	r3, [r7, #31]
 8008d86:	77bb      	strb	r3, [r7, #30]
#endif /* SAI1 */
  }
#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d02b      	beq.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d9c:	d008      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008da2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008da6:	d003      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d105      	bne.n	8008dbc <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	4618      	mov	r0, r3
 8008db6:	f7ff fe2a 	bl	8008a0e <LL_RCC_SetRNGClockSource>
 8008dba:	e00a      	b.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x240>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dc4:	60fb      	str	r3, [r7, #12]
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f7ff fe21 	bl	8008a0e <LL_RCC_SetRNGClockSource>
 8008dcc:	68f8      	ldr	r0, [r7, #12]
 8008dce:	f7ff fe34 	bl	8008a3a <LL_RCC_SetCLK48ClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dd6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 8008dda:	d107      	bne.n	8008dec <HAL_RCCEx_PeriphCLKConfig+0x25a>
    {
      /* Enable PLLQ output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8008ddc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d022      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f7ff fe3d 	bl	8008a7c <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e0a:	d107      	bne.n	8008e1c <HAL_RCCEx_PeriphCLKConfig+0x28a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e1a:	60d3      	str	r3, [r2, #12]
    }

#if defined(SAI1)
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e24:	d10b      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      /* PLLSAI1 parameters N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_ConfigNR(&(PeriphClkInit->PLLSAI1));
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	3304      	adds	r3, #4
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f8dd 	bl	8008fea <RCCEx_PLLSAI1_ConfigNR>
 8008e30:	4603      	mov	r3, r0
 8008e32:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8008e34:	7ffb      	ldrb	r3, [r7, #31]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d001      	beq.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x2ac>
      {
        /* set overall return value */
        status = ret;
 8008e3a:	7ffb      	ldrb	r3, [r7, #31]
 8008e3c:	77bb      	strb	r3, [r7, #30]
    }
#endif /* SAI1 */
  }

  /*-------------------------- RFWKP clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RFWAKEUP) == RCC_PERIPHCLK_RFWAKEUP)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RFWKPCLKSOURCE(PeriphClkInit->RFWakeUpClockSelection));

    /* Configure the RFWKP interface clock source */
    __HAL_RCC_RFWAKEUP_CONFIG(PeriphClkInit->RFWakeUpClockSelection);
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7ff fd26 	bl	80088a0 <LL_RCC_SetRFWKPClockSource>

  }

#if defined(RCC_SMPS_SUPPORT)
  /*-------------------------- SMPS clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SMPS) == RCC_PERIPHCLK_SMPS)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d009      	beq.n	8008e74 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
    /* Check the parameters */
    assert_param(IS_RCC_SMPSCLKDIV(PeriphClkInit->SmpsDivSelection));
    assert_param(IS_RCC_SMPSCLKSOURCE(PeriphClkInit->SmpsClockSelection));

    /* Configure the SMPS interface clock division factor */
    __HAL_RCC_SMPS_DIV_CONFIG(PeriphClkInit->SmpsDivSelection);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e64:	4618      	mov	r0, r3
 8008e66:	f7ff fd45 	bl	80088f4 <LL_RCC_SetSMPSPrescaler>

    /* Configure the SMPS interface clock source */
    __HAL_RCC_SMPS_CONFIG(PeriphClkInit->SmpsClockSelection);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e6e:	4618      	mov	r0, r3
 8008e70:	f7ff fd2c 	bl	80088cc <LL_RCC_SetSMPSClockSource>
  }
#endif /* RCC_SMPS_SUPPORT */

  return status;
 8008e74:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3720      	adds	r7, #32
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}

08008e7e <RCCEx_PLLSAI1_ConfigNP>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNP(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008e7e:	b580      	push	{r7, lr}
 8008e80:	b084      	sub	sp, #16
 8008e82:	af00      	add	r7, sp, #0
 8008e84:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLP_VALUE(PLLSAI1->PLLP));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008e8a:	f7ff fe61 	bl	8008b50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008e8e:	f7fc fd61 	bl	8005954 <HAL_GetTick>
 8008e92:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008e94:	e009      	b.n	8008eaa <RCCEx_PLLSAI1_ConfigNP+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008e96:	f7fc fd5d 	bl	8005954 <HAL_GetTick>
 8008e9a:	4602      	mov	r2, r0
 8008e9c:	68bb      	ldr	r3, [r7, #8]
 8008e9e:	1ad3      	subs	r3, r2, r3
 8008ea0:	2b02      	cmp	r3, #2
 8008ea2:	d902      	bls.n	8008eaa <RCCEx_PLLSAI1_ConfigNP+0x2c>
    {
      status = HAL_TIMEOUT;
 8008ea4:	2303      	movs	r3, #3
 8008ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8008ea8:	e004      	b.n	8008eb4 <RCCEx_PLLSAI1_ConfigNP+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008eaa:	f7ff fe60 	bl	8008b6e <LL_RCC_PLLSAI1_IsReady>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d1f0      	bne.n	8008e96 <RCCEx_PLLSAI1_ConfigNP+0x18>
    }
  }

  if (status == HAL_OK)
 8008eb4:	7bfb      	ldrb	r3, [r7, #15]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d137      	bne.n	8008f2a <RCCEx_PLLSAI1_ConfigNP+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	021b      	lsls	r3, r3, #8
 8008eca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	610b      	str	r3, [r1, #16]

    /* Configure the PLLSAI1 Division factor P */
    __HAL_RCC_PLLSAI1_DIVP_CONFIG(PLLSAI1->PLLP);
 8008ed2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	f423 1278 	bic.w	r2, r3, #4063232	; 0x3e0000
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008ee8:	f7ff fe23 	bl	8008b32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008eec:	f7fc fd32 	bl	8005954 <HAL_GetTick>
 8008ef0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008ef2:	e009      	b.n	8008f08 <RCCEx_PLLSAI1_ConfigNP+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ef4:	f7fc fd2e 	bl	8005954 <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	d902      	bls.n	8008f08 <RCCEx_PLLSAI1_ConfigNP+0x8a>
      {
        status = HAL_TIMEOUT;
 8008f02:	2303      	movs	r3, #3
 8008f04:	73fb      	strb	r3, [r7, #15]
        break;
 8008f06:	e004      	b.n	8008f12 <RCCEx_PLLSAI1_ConfigNP+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008f08:	f7ff fe31 	bl	8008b6e <LL_RCC_PLLSAI1_IsReady>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d1f0      	bne.n	8008ef4 <RCCEx_PLLSAI1_ConfigNP+0x76>
      }
    }

    if (status == HAL_OK)
 8008f12:	7bfb      	ldrb	r3, [r7, #15]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <RCCEx_PLLSAI1_ConfigNP+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008f18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f1c:	691a      	ldr	r2, [r3, #16]
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	691b      	ldr	r3, [r3, #16]
 8008f22:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f26:	4313      	orrs	r3, r2
 8008f28:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f2c:	4618      	mov	r0, r3
 8008f2e:	3710      	adds	r7, #16
 8008f30:	46bd      	mov	sp, r7
 8008f32:	bd80      	pop	{r7, pc}

08008f34 <RCCEx_PLLSAI1_ConfigNQ>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNQ(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLQ_VALUE(PLLSAI1->PLLQ));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008f40:	f7ff fe06 	bl	8008b50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008f44:	f7fc fd06 	bl	8005954 <HAL_GetTick>
 8008f48:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008f4a:	e009      	b.n	8008f60 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008f4c:	f7fc fd02 	bl	8005954 <HAL_GetTick>
 8008f50:	4602      	mov	r2, r0
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	1ad3      	subs	r3, r2, r3
 8008f56:	2b02      	cmp	r3, #2
 8008f58:	d902      	bls.n	8008f60 <RCCEx_PLLSAI1_ConfigNQ+0x2c>
    {
      status = HAL_TIMEOUT;
 8008f5a:	2303      	movs	r3, #3
 8008f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f5e:	e004      	b.n	8008f6a <RCCEx_PLLSAI1_ConfigNQ+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8008f60:	f7ff fe05 	bl	8008b6e <LL_RCC_PLLSAI1_IsReady>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d1f0      	bne.n	8008f4c <RCCEx_PLLSAI1_ConfigNQ+0x18>
    }
  }

  if (status == HAL_OK)
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d137      	bne.n	8008fe0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8008f70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f74:	691b      	ldr	r3, [r3, #16]
 8008f76:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	021b      	lsls	r3, r3, #8
 8008f80:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f84:	4313      	orrs	r3, r2
 8008f86:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor Q */
    __HAL_RCC_PLLSAI1_DIVQ_CONFIG(PLLSAI1->PLLQ);
 8008f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008f8c:	691b      	ldr	r3, [r3, #16]
 8008f8e:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	689b      	ldr	r3, [r3, #8]
 8008f96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008f9a:	4313      	orrs	r3, r2
 8008f9c:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8008f9e:	f7ff fdc8 	bl	8008b32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008fa2:	f7fc fcd7 	bl	8005954 <HAL_GetTick>
 8008fa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008fa8:	e009      	b.n	8008fbe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008faa:	f7fc fcd3 	bl	8005954 <HAL_GetTick>
 8008fae:	4602      	mov	r2, r0
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	1ad3      	subs	r3, r2, r3
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d902      	bls.n	8008fbe <RCCEx_PLLSAI1_ConfigNQ+0x8a>
      {
        status = HAL_TIMEOUT;
 8008fb8:	2303      	movs	r3, #3
 8008fba:	73fb      	strb	r3, [r7, #15]
        break;
 8008fbc:	e004      	b.n	8008fc8 <RCCEx_PLLSAI1_ConfigNQ+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8008fbe:	f7ff fdd6 	bl	8008b6e <LL_RCC_PLLSAI1_IsReady>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d1f0      	bne.n	8008faa <RCCEx_PLLSAI1_ConfigNQ+0x76>
      }
    }

    if (status == HAL_OK)
 8008fc8:	7bfb      	ldrb	r3, [r7, #15]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d108      	bne.n	8008fe0 <RCCEx_PLLSAI1_ConfigNQ+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8008fce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008fd2:	691a      	ldr	r2, [r3, #16]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	691b      	ldr	r3, [r3, #16]
 8008fd8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8008fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3710      	adds	r7, #16
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}

08008fea <RCCEx_PLLSAI1_ConfigNR>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_ConfigNR(RCC_PLLSAI1InitTypeDef *PLLSAI1)
{
 8008fea:	b580      	push	{r7, lr}
 8008fec:	b084      	sub	sp, #16
 8008fee:	af00      	add	r7, sp, #0
 8008ff0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLN_VALUE(PLLSAI1->PLLN));
  assert_param(IS_RCC_PLLR_VALUE(PLLSAI1->PLLR));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PLLSAI1->PLLSAI1ClockOut));

  /* Disable the PLLSAI1 */
  __HAL_RCC_PLLSAI1_DISABLE();
 8008ff6:	f7ff fdab 	bl	8008b50 <LL_RCC_PLLSAI1_Disable>

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008ffa:	f7fc fcab 	bl	8005954 <HAL_GetTick>
 8008ffe:	60b8      	str	r0, [r7, #8]

  /* Wait till PLLSAI1 is ready to be updated */
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009000:	e009      	b.n	8009016 <RCCEx_PLLSAI1_ConfigNR+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009002:	f7fc fca7 	bl	8005954 <HAL_GetTick>
 8009006:	4602      	mov	r2, r0
 8009008:	68bb      	ldr	r3, [r7, #8]
 800900a:	1ad3      	subs	r3, r2, r3
 800900c:	2b02      	cmp	r3, #2
 800900e:	d902      	bls.n	8009016 <RCCEx_PLLSAI1_ConfigNR+0x2c>
    {
      status = HAL_TIMEOUT;
 8009010:	2303      	movs	r3, #3
 8009012:	73fb      	strb	r3, [r7, #15]
      break;
 8009014:	e004      	b.n	8009020 <RCCEx_PLLSAI1_ConfigNR+0x36>
  while (LL_RCC_PLLSAI1_IsReady() != 0U)
 8009016:	f7ff fdaa 	bl	8008b6e <LL_RCC_PLLSAI1_IsReady>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d1f0      	bne.n	8009002 <RCCEx_PLLSAI1_ConfigNR+0x18>
    }
  }

  if (status == HAL_OK)
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d137      	bne.n	8009096 <RCCEx_PLLSAI1_ConfigNR+0xac>
  {
    /* Configure the PLLSAI1 Multiplication factor N */
    __HAL_RCC_PLLSAI1_MULN_CONFIG(PLLSAI1->PLLN);
 8009026:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	021b      	lsls	r3, r3, #8
 8009036:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800903a:	4313      	orrs	r3, r2
 800903c:	610b      	str	r3, [r1, #16]
    /* Configure the PLLSAI1 Division factor R */
    __HAL_RCC_PLLSAI1_DIVR_CONFIG(PLLSAI1->PLLR);
 800903e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009042:	691b      	ldr	r3, [r3, #16]
 8009044:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009050:	4313      	orrs	r3, r2
 8009052:	610b      	str	r3, [r1, #16]

    /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
    __HAL_RCC_PLLSAI1_ENABLE();
 8009054:	f7ff fd6d 	bl	8008b32 <LL_RCC_PLLSAI1_Enable>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009058:	f7fc fc7c 	bl	8005954 <HAL_GetTick>
 800905c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready */
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 800905e:	e009      	b.n	8009074 <RCCEx_PLLSAI1_ConfigNR+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009060:	f7fc fc78 	bl	8005954 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b02      	cmp	r3, #2
 800906c:	d902      	bls.n	8009074 <RCCEx_PLLSAI1_ConfigNR+0x8a>
      {
        status = HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	73fb      	strb	r3, [r7, #15]
        break;
 8009072:	e004      	b.n	800907e <RCCEx_PLLSAI1_ConfigNR+0x94>
    while (LL_RCC_PLLSAI1_IsReady() != 1U)
 8009074:	f7ff fd7b 	bl	8008b6e <LL_RCC_PLLSAI1_IsReady>
 8009078:	4603      	mov	r3, r0
 800907a:	2b01      	cmp	r3, #1
 800907c:	d1f0      	bne.n	8009060 <RCCEx_PLLSAI1_ConfigNR+0x76>
      }
    }

    if (status == HAL_OK)
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	2b00      	cmp	r3, #0
 8009082:	d108      	bne.n	8009096 <RCCEx_PLLSAI1_ConfigNR+0xac>
    {
      /* Configure the PLLSAI1 Clock output(s) */
      __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PLLSAI1->PLLSAI1ClockOut);
 8009084:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009088:	691a      	ldr	r2, [r3, #16]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8009092:	4313      	orrs	r3, r2
 8009094:	610b      	str	r3, [r1, #16]
    }
  }

  return status;
 8009096:	7bfb      	ldrb	r3, [r7, #15]
}
 8009098:	4618      	mov	r0, r3
 800909a:	3710      	adds	r7, #16
 800909c:	46bd      	mov	sp, r7
 800909e:	bd80      	pop	{r7, pc}

080090a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b082      	sub	sp, #8
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d101      	bne.n	80090b2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	e027      	b.n	8009102 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7a5b      	ldrb	r3, [r3, #9]
 80090b6:	b2db      	uxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d105      	bne.n	80090c8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2200      	movs	r2, #0
 80090c0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f7f9 ffbe 	bl	8003044 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2202      	movs	r2, #2
 80090cc:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f023 0120 	bic.w	r1, r3, #32
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	685a      	ldr	r2, [r3, #4]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	430a      	orrs	r2, r1
 80090e2:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f042 0204 	orr.w	r2, r2, #4
 80090f2:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2201      	movs	r2, #1
 80090f8:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	2200      	movs	r2, #0
 80090fe:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3708      	adds	r7, #8
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
	...

0800910c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e09f      	b.n	800925e <HAL_RTC_Init+0x152>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7f9 ffb0 	bl	8003098 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2202      	movs	r2, #2
 800913c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Check if the calendar has been not initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009140:	4b49      	ldr	r3, [pc, #292]	; (8009268 <HAL_RTC_Init+0x15c>)
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f003 0310 	and.w	r3, r3, #16
 8009148:	2b10      	cmp	r3, #16
 800914a:	d07e      	beq.n	800924a <HAL_RTC_Init+0x13e>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	22ca      	movs	r2, #202	; 0xca
 8009152:	625a      	str	r2, [r3, #36]	; 0x24
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2253      	movs	r2, #83	; 0x53
 800915a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Initialization mode */
    if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 f8ab 	bl	80092b8 <RTC_EnterInitMode>
 8009162:	4603      	mov	r3, r0
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00a      	beq.n	800917e <HAL_RTC_Init+0x72>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	22ff      	movs	r2, #255	; 0xff
 800916e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2204      	movs	r2, #4
 8009174:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      status = HAL_ERROR;
 8009178:	2301      	movs	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
 800917c:	e067      	b.n	800924e <HAL_RTC_Init+0x142>
    }
    else
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	6812      	ldr	r2, [r2, #0]
 8009188:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800918c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009190:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	6899      	ldr	r1, [r3, #8]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685a      	ldr	r2, [r3, #4]
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	691b      	ldr	r3, [r3, #16]
 80091a0:	431a      	orrs	r2, r3
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	699b      	ldr	r3, [r3, #24]
 80091a6:	431a      	orrs	r2, r3
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	68d2      	ldr	r2, [r2, #12]
 80091b8:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	6919      	ldr	r1, [r3, #16]
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	041a      	lsls	r2, r3, #16
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	430a      	orrs	r2, r1
 80091cc:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091dc:	60da      	str	r2, [r3, #12]

#if defined(RTC_OR_ALARMOUTTYPE)
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0203 	bic.w	r2, r2, #3
 80091ec:	64da      	str	r2, [r3, #76]	; 0x4c
#else
      hrtc->Instance->OR &= (uint32_t)~(RTC_OR_OUT_RMP);
#endif /* RTC_OR_ALARMOUTTYPE */
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	695b      	ldr	r3, [r3, #20]
 80091fc:	431a      	orrs	r2, r3
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	430a      	orrs	r2, r1
 8009204:	64da      	str	r2, [r3, #76]	; 0x4c

      /* If CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
      if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	f003 0320 	and.w	r3, r3, #32
 8009210:	2b00      	cmp	r3, #0
 8009212:	d113      	bne.n	800923c <HAL_RTC_Init+0x130>
      {
        if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f829 	bl	800926c <HAL_RTC_WaitForSynchro>
 800921a:	4603      	mov	r3, r0
 800921c:	2b00      	cmp	r3, #0
 800921e:	d00d      	beq.n	800923c <HAL_RTC_Init+0x130>
        {
          /* Enable the write protection for RTC registers */
          __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	22ff      	movs	r2, #255	; 0xff
 8009226:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_ERROR;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2204      	movs	r2, #4
 800922c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2020 	strb.w	r2, [r3, #32]

          return HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	e010      	b.n	800925e <HAL_RTC_Init+0x152>
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	22ff      	movs	r2, #255	; 0xff
 8009242:	625a      	str	r2, [r3, #36]	; 0x24

      /* Set RTC state */
      status = HAL_OK;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]
 8009248:	e001      	b.n	800924e <HAL_RTC_Init+0x142>
  }
  else
  {
    /* Calendar is already initialized */
    /* Set flag to OK */
    status = HAL_OK;
 800924a:	2300      	movs	r3, #0
 800924c:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d103      	bne.n	800925c <HAL_RTC_Init+0x150>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  return status;
 800925c:	7bfb      	ldrb	r3, [r7, #15]
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	40002800 	.word	0x40002800

0800926c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800926c:	b580      	push	{r7, lr}
 800926e:	b084      	sub	sp, #16
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	68da      	ldr	r2, [r3, #12]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009282:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8009284:	f7fc fb66 	bl	8005954 <HAL_GetTick>
 8009288:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800928a:	e009      	b.n	80092a0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800928c:	f7fc fb62 	bl	8005954 <HAL_GetTick>
 8009290:	4602      	mov	r2, r0
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	1ad3      	subs	r3, r2, r3
 8009296:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800929a:	d901      	bls.n	80092a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800929c:	2303      	movs	r3, #3
 800929e:	e007      	b.n	80092b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f003 0320 	and.w	r3, r3, #32
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d0ee      	beq.n	800928c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80092ae:	2300      	movs	r3, #0
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	3710      	adds	r7, #16
 80092b4:	46bd      	mov	sp, r7
 80092b6:	bd80      	pop	{r7, pc}

080092b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d119      	bne.n	8009302 <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f04f 32ff 	mov.w	r2, #4294967295
 80092d6:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80092d8:	f7fc fb3c 	bl	8005954 <HAL_GetTick>
 80092dc:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80092de:	e009      	b.n	80092f4 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80092e0:	f7fc fb38 	bl	8005954 <HAL_GetTick>
 80092e4:	4602      	mov	r2, r0
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092ee:	d901      	bls.n	80092f4 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 80092f0:	2303      	movs	r3, #3
 80092f2:	e007      	b.n	8009304 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d0ee      	beq.n	80092e0 <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3710      	adds	r7, #16
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}

0800930c <HAL_RTCEx_SetWakeUpTimer_IT>:
  * @param WakeUpCounter Wake up counter
  * @param WakeUpClock Wake up clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 800930c:	b580      	push	{r7, lr}
 800930e:	b086      	sub	sp, #24
 8009310:	af00      	add	r7, sp, #0
 8009312:	60f8      	str	r0, [r7, #12]
 8009314:	60b9      	str	r1, [r7, #8]
 8009316:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800931e:	2b01      	cmp	r3, #1
 8009320:	d101      	bne.n	8009326 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8009322:	2302      	movs	r3, #2
 8009324:	e0a8      	b.n	8009478 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2201      	movs	r2, #1
 800932a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2202      	movs	r2, #2
 8009332:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	22ca      	movs	r2, #202	; 0xca
 800933c:	625a      	str	r2, [r3, #36]	; 0x24
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	2253      	movs	r2, #83	; 0x53
 8009344:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009350:	2b00      	cmp	r3, #0
 8009352:	d020      	beq.n	8009396 <HAL_RTCEx_SetWakeUpTimer_IT+0x8a>
  {
    tickstart = HAL_GetTick();
 8009354:	f7fc fafe 	bl	8005954 <HAL_GetTick>
 8009358:	6178      	str	r0, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if Time out is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800935a:	e015      	b.n	8009388 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800935c:	f7fc fafa 	bl	8005954 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800936a:	d90d      	bls.n	8009388 <HAL_RTCEx_SetWakeUpTimer_IT+0x7c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	22ff      	movs	r2, #255	; 0xff
 8009372:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2203      	movs	r2, #3
 8009378:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009384:	2303      	movs	r3, #3
 8009386:	e077      	b.n	8009478 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	f003 0304 	and.w	r3, r3, #4
 8009392:	2b00      	cmp	r3, #0
 8009394:	d1e2      	bne.n	800935c <HAL_RTCEx_SetWakeUpTimer_IT+0x50>
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	689a      	ldr	r2, [r3, #8]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093a4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	b2da      	uxtb	r2, r3
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80093b6:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80093b8:	f7fc facc 	bl	8005954 <HAL_GetTick>
 80093bc:	6178      	str	r0, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80093be:	e015      	b.n	80093ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80093c0:	f7fc fac8 	bl	8005954 <HAL_GetTick>
 80093c4:	4602      	mov	r2, r0
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	1ad3      	subs	r3, r2, r3
 80093ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80093ce:	d90d      	bls.n	80093ec <HAL_RTCEx_SetWakeUpTimer_IT+0xe0>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	22ff      	movs	r2, #255	; 0xff
 80093d6:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2203      	movs	r2, #3
 80093dc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	2200      	movs	r2, #0
 80093e4:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e045      	b.n	8009478 <HAL_RTCEx_SetWakeUpTimer_IT+0x16c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68db      	ldr	r3, [r3, #12]
 80093f2:	f003 0304 	and.w	r3, r3, #4
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d0e2      	beq.n	80093c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xb4>
    }
  }

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	615a      	str	r2, [r3, #20]

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	689a      	ldr	r2, [r3, #8]
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f022 0207 	bic.w	r2, r2, #7
 8009410:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6899      	ldr	r1, [r3, #8]
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	687a      	ldr	r2, [r7, #4]
 800941e:	430a      	orrs	r2, r1
 8009420:	609a      	str	r2, [r3, #8]

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009422:	4b17      	ldr	r3, [pc, #92]	; (8009480 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009424:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009428:	4a15      	ldr	r2, [pc, #84]	; (8009480 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 800942a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800942e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009432:	4b13      	ldr	r3, [pc, #76]	; (8009480 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a12      	ldr	r2, [pc, #72]	; (8009480 <HAL_RTCEx_SetWakeUpTimer_IT+0x174>)
 8009438:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800943c:	6013      	str	r3, [r2, #0]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	689a      	ldr	r2, [r3, #8]
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800944c:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	689a      	ldr	r2, [r3, #8]
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800945c:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	22ff      	movs	r2, #255	; 0xff
 8009464:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	2200      	movs	r2, #0
 8009472:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3718      	adds	r7, #24
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	58000800 	.word	0x58000800

08009484 <HAL_RTCEx_EnableBypassShadow>:
  * @note   When the Bypass Shadow is enabled the calendar value are taken
  *         directly from the Calendar counter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8009484:	b480      	push	{r7}
 8009486:	b083      	sub	sp, #12
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009492:	2b01      	cmp	r3, #1
 8009494:	d101      	bne.n	800949a <HAL_RTCEx_EnableBypassShadow+0x16>
 8009496:	2302      	movs	r3, #2
 8009498:	e024      	b.n	80094e4 <HAL_RTCEx_EnableBypassShadow+0x60>
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2202      	movs	r2, #2
 80094a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	22ca      	movs	r2, #202	; 0xca
 80094b0:	625a      	str	r2, [r3, #36]	; 0x24
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	2253      	movs	r2, #83	; 0x53
 80094b8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  hrtc->Instance->CR |= (uint8_t)RTC_CR_BYPSHAD;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	689a      	ldr	r2, [r3, #8]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f042 0220 	orr.w	r2, r2, #32
 80094c8:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	22ff      	movs	r2, #255	; 0xff
 80094d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80094e2:	2300      	movs	r3, #0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	370c      	adds	r7, #12
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <LL_RCC_GetUSARTClockSource>:
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx));
 80094f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094fc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	4013      	ands	r3, r2
}
 8009504:	4618      	mov	r0, r3
 8009506:	370c      	adds	r7, #12
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <LL_RCC_GetLPUARTClockSource>:
{
 8009510:	b480      	push	{r7}
 8009512:	b083      	sub	sp, #12
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8009518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800951c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	4013      	ands	r3, r2
}
 8009524:	4618      	mov	r0, r3
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e042      	b.n	80095c8 <HAL_UART_Init+0x98>
#else
    assert_param(IS_UART_INSTANCE(huart->Instance));
#endif /* LPUART1 */
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009548:	2b00      	cmp	r3, #0
 800954a:	d106      	bne.n	800955a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f7f9 fc81 	bl	8002e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2224      	movs	r2, #36	; 0x24
 800955e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	681a      	ldr	r2, [r3, #0]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	f022 0201 	bic.w	r2, r2, #1
 8009570:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	d002      	beq.n	8009580 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fe60 	bl	800a240 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fc35 	bl	8009df0 <UART_SetConfig>
 8009586:	4603      	mov	r3, r0
 8009588:	2b01      	cmp	r3, #1
 800958a:	d101      	bne.n	8009590 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800958c:	2301      	movs	r3, #1
 800958e:	e01b      	b.n	80095c8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	685a      	ldr	r2, [r3, #4]
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800959e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689a      	ldr	r2, [r3, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80095ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f042 0201 	orr.w	r2, r2, #1
 80095be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	f000 fedf 	bl	800a384 <UART_CheckIdleState>
 80095c6:	4603      	mov	r3, r0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3708      	adds	r7, #8
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}

080095d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b08a      	sub	sp, #40	; 0x28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095e4:	2b20      	cmp	r3, #32
 80095e6:	d137      	bne.n	8009658 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_UART_Receive_IT+0x24>
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e030      	b.n	800965a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	2200      	movs	r2, #0
 80095fc:	66da      	str	r2, [r3, #108]	; 0x6c

#if defined(LPUART1)
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a18      	ldr	r2, [pc, #96]	; (8009664 <HAL_UART_Receive_IT+0x94>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d01f      	beq.n	8009648 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	685b      	ldr	r3, [r3, #4]
 800960e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009612:	2b00      	cmp	r3, #0
 8009614:	d018      	beq.n	8009648 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	613b      	str	r3, [r7, #16]
   return(result);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800962a:	627b      	str	r3, [r7, #36]	; 0x24
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009634:	623b      	str	r3, [r7, #32]
 8009636:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	69f9      	ldr	r1, [r7, #28]
 800963a:	6a3a      	ldr	r2, [r7, #32]
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	61bb      	str	r3, [r7, #24]
   return(result);
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e6      	bne.n	8009616 <HAL_UART_Receive_IT+0x46>
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
    }
#endif /* LPUART1 */

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009648:	88fb      	ldrh	r3, [r7, #6]
 800964a:	461a      	mov	r2, r3
 800964c:	68b9      	ldr	r1, [r7, #8]
 800964e:	68f8      	ldr	r0, [r7, #12]
 8009650:	f000 ffb0 	bl	800a5b4 <UART_Start_Receive_IT>
 8009654:	4603      	mov	r3, r0
 8009656:	e000      	b.n	800965a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009658:	2302      	movs	r3, #2
  }
}
 800965a:	4618      	mov	r0, r3
 800965c:	3728      	adds	r7, #40	; 0x28
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}
 8009662:	bf00      	nop
 8009664:	40008000 	.word	0x40008000

08009668 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b08a      	sub	sp, #40	; 0x28
 800966c:	af00      	add	r7, sp, #0
 800966e:	60f8      	str	r0, [r7, #12]
 8009670:	60b9      	str	r1, [r7, #8]
 8009672:	4613      	mov	r3, r2
 8009674:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800967c:	2b20      	cmp	r3, #32
 800967e:	d167      	bne.n	8009750 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d002      	beq.n	800968c <HAL_UART_Transmit_DMA+0x24>
 8009686:	88fb      	ldrh	r3, [r7, #6]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d101      	bne.n	8009690 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	e060      	b.n	8009752 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	88fa      	ldrh	r2, [r7, #6]
 800969a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	88fa      	ldrh	r2, [r7, #6]
 80096a2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	2221      	movs	r2, #33	; 0x21
 80096b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d028      	beq.n	8009710 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096c2:	4a26      	ldr	r2, [pc, #152]	; (800975c <HAL_UART_Transmit_DMA+0xf4>)
 80096c4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096ca:	4a25      	ldr	r2, [pc, #148]	; (8009760 <HAL_UART_Transmit_DMA+0xf8>)
 80096cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096d2:	4a24      	ldr	r2, [pc, #144]	; (8009764 <HAL_UART_Transmit_DMA+0xfc>)
 80096d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80096da:	2200      	movs	r2, #0
 80096dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096e6:	4619      	mov	r1, r3
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	3328      	adds	r3, #40	; 0x28
 80096ee:	461a      	mov	r2, r3
 80096f0:	88fb      	ldrh	r3, [r7, #6]
 80096f2:	f7fc fba1 	bl	8005e38 <HAL_DMA_Start_IT>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d009      	beq.n	8009710 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	2210      	movs	r2, #16
 8009700:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	2220      	movs	r2, #32
 8009708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e020      	b.n	8009752 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2240      	movs	r2, #64	; 0x40
 8009716:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	3308      	adds	r3, #8
 800971e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	e853 3f00 	ldrex	r3, [r3]
 8009726:	613b      	str	r3, [r7, #16]
   return(result);
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	3308      	adds	r3, #8
 8009736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009738:	623a      	str	r2, [r7, #32]
 800973a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973c:	69f9      	ldr	r1, [r7, #28]
 800973e:	6a3a      	ldr	r2, [r7, #32]
 8009740:	e841 2300 	strex	r3, r2, [r1]
 8009744:	61bb      	str	r3, [r7, #24]
   return(result);
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d1e5      	bne.n	8009718 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800974c:	2300      	movs	r3, #0
 800974e:	e000      	b.n	8009752 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8009750:	2302      	movs	r3, #2
  }
}
 8009752:	4618      	mov	r0, r3
 8009754:	3728      	adds	r7, #40	; 0x28
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	0800a947 	.word	0x0800a947
 8009760:	0800a9e1 	.word	0x0800a9e1
 8009764:	0800a9fd 	.word	0x0800a9fd

08009768 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b0ba      	sub	sp, #232	; 0xe8
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	69db      	ldr	r3, [r3, #28]
 8009776:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800978e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009792:	f640 030f 	movw	r3, #2063	; 0x80f
 8009796:	4013      	ands	r3, r2
 8009798:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800979c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d11b      	bne.n	80097dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a8:	f003 0320 	and.w	r3, r3, #32
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d015      	beq.n	80097dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d105      	bne.n	80097c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d009      	beq.n	80097dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f000 82e3 	beq.w	8009d98 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	4798      	blx	r3
      }
      return;
 80097da:	e2dd      	b.n	8009d98 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f000 8123 	beq.w	8009a2c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097ea:	4b8d      	ldr	r3, [pc, #564]	; (8009a20 <HAL_UART_IRQHandler+0x2b8>)
 80097ec:	4013      	ands	r3, r2
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d106      	bne.n	8009800 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80097f6:	4b8b      	ldr	r3, [pc, #556]	; (8009a24 <HAL_UART_IRQHandler+0x2bc>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 8116 	beq.w	8009a2c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009800:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009804:	f003 0301 	and.w	r3, r3, #1
 8009808:	2b00      	cmp	r3, #0
 800980a:	d011      	beq.n	8009830 <HAL_UART_IRQHandler+0xc8>
 800980c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009814:	2b00      	cmp	r3, #0
 8009816:	d00b      	beq.n	8009830 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	2201      	movs	r2, #1
 800981e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009826:	f043 0201 	orr.w	r2, r3, #1
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d011      	beq.n	8009860 <HAL_UART_IRQHandler+0xf8>
 800983c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009840:	f003 0301 	and.w	r3, r3, #1
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00b      	beq.n	8009860 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2202      	movs	r2, #2
 800984e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009856:	f043 0204 	orr.w	r2, r3, #4
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009860:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009864:	f003 0304 	and.w	r3, r3, #4
 8009868:	2b00      	cmp	r3, #0
 800986a:	d011      	beq.n	8009890 <HAL_UART_IRQHandler+0x128>
 800986c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009870:	f003 0301 	and.w	r3, r3, #1
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00b      	beq.n	8009890 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2204      	movs	r2, #4
 800987e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009886:	f043 0202 	orr.w	r2, r3, #2
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009890:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009894:	f003 0308 	and.w	r3, r3, #8
 8009898:	2b00      	cmp	r3, #0
 800989a:	d017      	beq.n	80098cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800989c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098a0:	f003 0320 	and.w	r3, r3, #32
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d105      	bne.n	80098b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80098ac:	4b5c      	ldr	r3, [pc, #368]	; (8009a20 <HAL_UART_IRQHandler+0x2b8>)
 80098ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00b      	beq.n	80098cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	2208      	movs	r2, #8
 80098ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098c2:	f043 0208 	orr.w	r2, r3, #8
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d012      	beq.n	80098fe <HAL_UART_IRQHandler+0x196>
 80098d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098dc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00c      	beq.n	80098fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098f4:	f043 0220 	orr.w	r2, r3, #32
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009904:	2b00      	cmp	r3, #0
 8009906:	f000 8249 	beq.w	8009d9c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800990a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800990e:	f003 0320 	and.w	r3, r3, #32
 8009912:	2b00      	cmp	r3, #0
 8009914:	d013      	beq.n	800993e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009916:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	d105      	bne.n	800992e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d007      	beq.n	800993e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009932:	2b00      	cmp	r3, #0
 8009934:	d003      	beq.n	800993e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009944:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009952:	2b40      	cmp	r3, #64	; 0x40
 8009954:	d005      	beq.n	8009962 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800995a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800995e:	2b00      	cmp	r3, #0
 8009960:	d054      	beq.n	8009a0c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 ff89 	bl	800a87a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009972:	2b40      	cmp	r3, #64	; 0x40
 8009974:	d146      	bne.n	8009a04 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009980:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009984:	e853 3f00 	ldrex	r3, [r3]
 8009988:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800998c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009990:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009994:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	3308      	adds	r3, #8
 800999e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099b2:	e841 2300 	strex	r3, r2, [r1]
 80099b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1d9      	bne.n	8009976 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d017      	beq.n	80099fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099d2:	4a15      	ldr	r2, [pc, #84]	; (8009a28 <HAL_UART_IRQHandler+0x2c0>)
 80099d4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fc fb05 	bl	8005fec <HAL_DMA_Abort_IT>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d019      	beq.n	8009a1c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80099ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80099f6:	4610      	mov	r0, r2
 80099f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099fa:	e00f      	b.n	8009a1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f9e1 	bl	8009dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a02:	e00b      	b.n	8009a1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 f9dd 	bl	8009dc4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0a:	e007      	b.n	8009a1c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f9d9 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8009a1a:	e1bf      	b.n	8009d9c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1c:	bf00      	nop
    return;
 8009a1e:	e1bd      	b.n	8009d9c <HAL_UART_IRQHandler+0x634>
 8009a20:	10000001 	.word	0x10000001
 8009a24:	04000120 	.word	0x04000120
 8009a28:	0800aa7d 	.word	0x0800aa7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	f040 8153 	bne.w	8009cdc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3a:	f003 0310 	and.w	r3, r3, #16
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	f000 814c 	beq.w	8009cdc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a48:	f003 0310 	and.w	r3, r3, #16
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f000 8145 	beq.w	8009cdc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2210      	movs	r2, #16
 8009a58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	689b      	ldr	r3, [r3, #8]
 8009a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a64:	2b40      	cmp	r3, #64	; 0x40
 8009a66:	f040 80bb 	bne.w	8009be0 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009a78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	f000 818f 	beq.w	8009da0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a8c:	429a      	cmp	r2, r3
 8009a8e:	f080 8187 	bcs.w	8009da0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009a98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 0320 	and.w	r3, r3, #32
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	f040 8087 	bne.w	8009bbe <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009ac4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009acc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	461a      	mov	r2, r3
 8009ad6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ada:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ade:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009ae6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1da      	bne.n	8009ab0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	3308      	adds	r3, #8
 8009b00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b04:	e853 3f00 	ldrex	r3, [r3]
 8009b08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009b0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b0c:	f023 0301 	bic.w	r3, r3, #1
 8009b10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	3308      	adds	r3, #8
 8009b1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009b1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009b22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009b26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009b2a:	e841 2300 	strex	r3, r2, [r1]
 8009b2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d1e1      	bne.n	8009afa <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	3308      	adds	r3, #8
 8009b3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009b40:	e853 3f00 	ldrex	r3, [r3]
 8009b44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3308      	adds	r3, #8
 8009b56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009b5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009b5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009b60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009b68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e3      	bne.n	8009b36 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2220      	movs	r2, #32
 8009b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2200      	movs	r2, #0
 8009b7a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009b8c:	f023 0310 	bic.w	r3, r3, #16
 8009b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	461a      	mov	r2, r3
 8009b9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009b9e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ba0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ba2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ba4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ba6:	e841 2300 	strex	r3, r2, [r1]
 8009baa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009bac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d1e4      	bne.n	8009b7c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f7fc f9b8 	bl	8005f2e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2202      	movs	r2, #2
 8009bc2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bd0:	b29b      	uxth	r3, r3
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	b29b      	uxth	r3, r3
 8009bd6:	4619      	mov	r1, r3
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 f8fd 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bde:	e0df      	b.n	8009da0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	1ad3      	subs	r3, r2, r3
 8009bf0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	f000 80d1 	beq.w	8009da4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8009c02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	f000 80cc 	beq.w	8009da4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	461a      	mov	r2, r3
 8009c2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c2e:	647b      	str	r3, [r7, #68]	; 0x44
 8009c30:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c32:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009c34:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009c36:	e841 2300 	strex	r3, r2, [r1]
 8009c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d1e4      	bne.n	8009c0c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	3308      	adds	r3, #8
 8009c48:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	e853 3f00 	ldrex	r3, [r3]
 8009c50:	623b      	str	r3, [r7, #32]
   return(result);
 8009c52:	6a3b      	ldr	r3, [r7, #32]
 8009c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009c58:	f023 0301 	bic.w	r3, r3, #1
 8009c5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	3308      	adds	r3, #8
 8009c66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009c6a:	633a      	str	r2, [r7, #48]	; 0x30
 8009c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c72:	e841 2300 	strex	r3, r2, [r1]
 8009c76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d1e1      	bne.n	8009c42 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2220      	movs	r2, #32
 8009c82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	e853 3f00 	ldrex	r3, [r3]
 8009c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f023 0310 	bic.w	r3, r3, #16
 8009ca6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	461a      	mov	r2, r3
 8009cb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009cb4:	61fb      	str	r3, [r7, #28]
 8009cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cb8:	69b9      	ldr	r1, [r7, #24]
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	e841 2300 	strex	r3, r2, [r1]
 8009cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d1e4      	bne.n	8009c92 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2202      	movs	r2, #2
 8009ccc:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009cce:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 f87f 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cda:	e063      	b.n	8009da4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d00e      	beq.n	8009d06 <HAL_UART_IRQHandler+0x59e>
 8009ce8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d008      	beq.n	8009d06 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009cfc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f001 fc1a 	bl	800b538 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d04:	e051      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d014      	beq.n	8009d3c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d105      	bne.n	8009d2a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009d1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d008      	beq.n	8009d3c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d03a      	beq.n	8009da8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	4798      	blx	r3
    }
    return;
 8009d3a:	e035      	b.n	8009da8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d009      	beq.n	8009d5c <HAL_UART_IRQHandler+0x5f4>
 8009d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d003      	beq.n	8009d5c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fea7 	bl	800aaa8 <UART_EndTransmit_IT>
    return;
 8009d5a:	e026      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d009      	beq.n	8009d7c <HAL_UART_IRQHandler+0x614>
 8009d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d003      	beq.n	8009d7c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 fbf3 	bl	800b560 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d7a:	e016      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d010      	beq.n	8009daa <HAL_UART_IRQHandler+0x642>
 8009d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	da0c      	bge.n	8009daa <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fbdb 	bl	800b54c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009d96:	e008      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
      return;
 8009d98:	bf00      	nop
 8009d9a:	e006      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
    return;
 8009d9c:	bf00      	nop
 8009d9e:	e004      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
      return;
 8009da0:	bf00      	nop
 8009da2:	e002      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
      return;
 8009da4:	bf00      	nop
 8009da6:	e000      	b.n	8009daa <HAL_UART_IRQHandler+0x642>
    return;
 8009da8:	bf00      	nop
  }
}
 8009daa:	37e8      	adds	r7, #232	; 0xe8
 8009dac:	46bd      	mov	sp, r7
 8009dae:	bd80      	pop	{r7, pc}

08009db0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b083      	sub	sp, #12
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b083      	sub	sp, #12
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	460b      	mov	r3, r1
 8009de2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009df0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009df4:	b08c      	sub	sp, #48	; 0x30
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	689a      	ldr	r2, [r3, #8]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	431a      	orrs	r2, r3
 8009e0a:	697b      	ldr	r3, [r7, #20]
 8009e0c:	695b      	ldr	r3, [r3, #20]
 8009e0e:	431a      	orrs	r2, r3
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	69db      	ldr	r3, [r3, #28]
 8009e14:	4313      	orrs	r3, r2
 8009e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009e18:	697b      	ldr	r3, [r7, #20]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681a      	ldr	r2, [r3, #0]
 8009e1e:	4baf      	ldr	r3, [pc, #700]	; (800a0dc <UART_SetConfig+0x2ec>)
 8009e20:	4013      	ands	r3, r2
 8009e22:	697a      	ldr	r2, [r7, #20]
 8009e24:	6812      	ldr	r2, [r2, #0]
 8009e26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e28:	430b      	orrs	r3, r1
 8009e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	68da      	ldr	r2, [r3, #12]
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	430a      	orrs	r2, r1
 8009e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009e42:	697b      	ldr	r3, [r7, #20]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	62fb      	str	r3, [r7, #44]	; 0x2c

#if defined(LPUART1)
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e48:	697b      	ldr	r3, [r7, #20]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4aa4      	ldr	r2, [pc, #656]	; (800a0e0 <UART_SetConfig+0x2f0>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d004      	beq.n	8009e5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	6a1b      	ldr	r3, [r3, #32]
 8009e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
#else
  tmpreg |= huart->Init.OneBitSampling;
#endif /* LPUART1 */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	689b      	ldr	r3, [r3, #8]
 8009e62:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009e66:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	6812      	ldr	r2, [r2, #0]
 8009e6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009e70:	430b      	orrs	r3, r1
 8009e72:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e7a:	f023 010f 	bic.w	r1, r3, #15
 8009e7e:	697b      	ldr	r3, [r7, #20]
 8009e80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	430a      	orrs	r2, r1
 8009e88:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e8a:	697b      	ldr	r3, [r7, #20]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	4a95      	ldr	r2, [pc, #596]	; (800a0e4 <UART_SetConfig+0x2f4>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d125      	bne.n	8009ee0 <UART_SetConfig+0xf0>
 8009e94:	2003      	movs	r0, #3
 8009e96:	f7ff fb2b 	bl	80094f0 <LL_RCC_GetUSARTClockSource>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d81b      	bhi.n	8009ed8 <UART_SetConfig+0xe8>
 8009ea0:	a201      	add	r2, pc, #4	; (adr r2, 8009ea8 <UART_SetConfig+0xb8>)
 8009ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea6:	bf00      	nop
 8009ea8:	08009eb9 	.word	0x08009eb9
 8009eac:	08009ec9 	.word	0x08009ec9
 8009eb0:	08009ec1 	.word	0x08009ec1
 8009eb4:	08009ed1 	.word	0x08009ed1
 8009eb8:	2301      	movs	r3, #1
 8009eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ebe:	e042      	b.n	8009f46 <UART_SetConfig+0x156>
 8009ec0:	2302      	movs	r3, #2
 8009ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ec6:	e03e      	b.n	8009f46 <UART_SetConfig+0x156>
 8009ec8:	2304      	movs	r3, #4
 8009eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ece:	e03a      	b.n	8009f46 <UART_SetConfig+0x156>
 8009ed0:	2308      	movs	r3, #8
 8009ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ed6:	e036      	b.n	8009f46 <UART_SetConfig+0x156>
 8009ed8:	2310      	movs	r3, #16
 8009eda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009ede:	e032      	b.n	8009f46 <UART_SetConfig+0x156>
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a7e      	ldr	r2, [pc, #504]	; (800a0e0 <UART_SetConfig+0x2f0>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d12a      	bne.n	8009f40 <UART_SetConfig+0x150>
 8009eea:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8009eee:	f7ff fb0f 	bl	8009510 <LL_RCC_GetLPUARTClockSource>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009ef8:	d01a      	beq.n	8009f30 <UART_SetConfig+0x140>
 8009efa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009efe:	d81b      	bhi.n	8009f38 <UART_SetConfig+0x148>
 8009f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f04:	d00c      	beq.n	8009f20 <UART_SetConfig+0x130>
 8009f06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f0a:	d815      	bhi.n	8009f38 <UART_SetConfig+0x148>
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d003      	beq.n	8009f18 <UART_SetConfig+0x128>
 8009f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f14:	d008      	beq.n	8009f28 <UART_SetConfig+0x138>
 8009f16:	e00f      	b.n	8009f38 <UART_SetConfig+0x148>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f1e:	e012      	b.n	8009f46 <UART_SetConfig+0x156>
 8009f20:	2302      	movs	r3, #2
 8009f22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f26:	e00e      	b.n	8009f46 <UART_SetConfig+0x156>
 8009f28:	2304      	movs	r3, #4
 8009f2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f2e:	e00a      	b.n	8009f46 <UART_SetConfig+0x156>
 8009f30:	2308      	movs	r3, #8
 8009f32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f36:	e006      	b.n	8009f46 <UART_SetConfig+0x156>
 8009f38:	2310      	movs	r3, #16
 8009f3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009f3e:	e002      	b.n	8009f46 <UART_SetConfig+0x156>
 8009f40:	2310      	movs	r3, #16
 8009f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

#if defined(LPUART1)
  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a65      	ldr	r2, [pc, #404]	; (800a0e0 <UART_SetConfig+0x2f0>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	f040 8097 	bne.w	800a080 <UART_SetConfig+0x290>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009f52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d823      	bhi.n	8009fa2 <UART_SetConfig+0x1b2>
 8009f5a:	a201      	add	r2, pc, #4	; (adr r2, 8009f60 <UART_SetConfig+0x170>)
 8009f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f60:	08009f85 	.word	0x08009f85
 8009f64:	08009fa3 	.word	0x08009fa3
 8009f68:	08009f8d 	.word	0x08009f8d
 8009f6c:	08009fa3 	.word	0x08009fa3
 8009f70:	08009f93 	.word	0x08009f93
 8009f74:	08009fa3 	.word	0x08009fa3
 8009f78:	08009fa3 	.word	0x08009fa3
 8009f7c:	08009fa3 	.word	0x08009fa3
 8009f80:	08009f9b 	.word	0x08009f9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f84:	f7fe fb88 	bl	8008698 <HAL_RCC_GetPCLK1Freq>
 8009f88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f8a:	e010      	b.n	8009fae <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f8c:	4b56      	ldr	r3, [pc, #344]	; (800a0e8 <UART_SetConfig+0x2f8>)
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009f90:	e00d      	b.n	8009fae <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f92:	f7fe fb01 	bl	8008598 <HAL_RCC_GetSysClockFreq>
 8009f96:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009f98:	e009      	b.n	8009fae <UART_SetConfig+0x1be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009fa0:	e005      	b.n	8009fae <UART_SetConfig+0x1be>
      default:
        pclk = 0U;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8009fac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	f000 812b 	beq.w	800a20c <UART_SetConfig+0x41c>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009fb6:	697b      	ldr	r3, [r7, #20]
 8009fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fba:	4a4c      	ldr	r2, [pc, #304]	; (800a0ec <UART_SetConfig+0x2fc>)
 8009fbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8009fc8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	685a      	ldr	r2, [r3, #4]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	005b      	lsls	r3, r3, #1
 8009fd2:	4413      	add	r3, r2
 8009fd4:	69ba      	ldr	r2, [r7, #24]
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d305      	bcc.n	8009fe6 <UART_SetConfig+0x1f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009fe0:	69ba      	ldr	r2, [r7, #24]
 8009fe2:	429a      	cmp	r2, r3
 8009fe4:	d903      	bls.n	8009fee <UART_SetConfig+0x1fe>
      {
        ret = HAL_ERROR;
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009fec:	e10e      	b.n	800a20c <UART_SetConfig+0x41c>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	60bb      	str	r3, [r7, #8]
 8009ff4:	60fa      	str	r2, [r7, #12]
 8009ff6:	697b      	ldr	r3, [r7, #20]
 8009ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ffa:	4a3c      	ldr	r2, [pc, #240]	; (800a0ec <UART_SetConfig+0x2fc>)
 8009ffc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a000:	b29b      	uxth	r3, r3
 800a002:	2200      	movs	r2, #0
 800a004:	603b      	str	r3, [r7, #0]
 800a006:	607a      	str	r2, [r7, #4]
 800a008:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a010:	f7f6 fdb2 	bl	8000b78 <__aeabi_uldivmod>
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	4610      	mov	r0, r2
 800a01a:	4619      	mov	r1, r3
 800a01c:	f04f 0200 	mov.w	r2, #0
 800a020:	f04f 0300 	mov.w	r3, #0
 800a024:	020b      	lsls	r3, r1, #8
 800a026:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a02a:	0202      	lsls	r2, r0, #8
 800a02c:	6979      	ldr	r1, [r7, #20]
 800a02e:	6849      	ldr	r1, [r1, #4]
 800a030:	0849      	lsrs	r1, r1, #1
 800a032:	2000      	movs	r0, #0
 800a034:	460c      	mov	r4, r1
 800a036:	4605      	mov	r5, r0
 800a038:	eb12 0804 	adds.w	r8, r2, r4
 800a03c:	eb43 0905 	adc.w	r9, r3, r5
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	685b      	ldr	r3, [r3, #4]
 800a044:	2200      	movs	r2, #0
 800a046:	469a      	mov	sl, r3
 800a048:	4693      	mov	fp, r2
 800a04a:	4652      	mov	r2, sl
 800a04c:	465b      	mov	r3, fp
 800a04e:	4640      	mov	r0, r8
 800a050:	4649      	mov	r1, r9
 800a052:	f7f6 fd91 	bl	8000b78 <__aeabi_uldivmod>
 800a056:	4602      	mov	r2, r0
 800a058:	460b      	mov	r3, r1
 800a05a:	4613      	mov	r3, r2
 800a05c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a05e:	6a3b      	ldr	r3, [r7, #32]
 800a060:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a064:	d308      	bcc.n	800a078 <UART_SetConfig+0x288>
 800a066:	6a3b      	ldr	r3, [r7, #32]
 800a068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a06c:	d204      	bcs.n	800a078 <UART_SetConfig+0x288>
        {
          huart->Instance->BRR = usartdiv;
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	6a3a      	ldr	r2, [r7, #32]
 800a074:	60da      	str	r2, [r3, #12]
 800a076:	e0c9      	b.n	800a20c <UART_SetConfig+0x41c>
        }
        else
        {
          ret = HAL_ERROR;
 800a078:	2301      	movs	r3, #1
 800a07a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a07e:	e0c5      	b.n	800a20c <UART_SetConfig+0x41c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	69db      	ldr	r3, [r3, #28]
 800a084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a088:	d16d      	bne.n	800a166 <UART_SetConfig+0x376>
#else
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
#endif /* LPUART1 */
  {
    switch (clocksource)
 800a08a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a08e:	3b01      	subs	r3, #1
 800a090:	2b07      	cmp	r3, #7
 800a092:	d82d      	bhi.n	800a0f0 <UART_SetConfig+0x300>
 800a094:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <UART_SetConfig+0x2ac>)
 800a096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09a:	bf00      	nop
 800a09c:	0800a0bd 	.word	0x0800a0bd
 800a0a0:	0800a0c5 	.word	0x0800a0c5
 800a0a4:	0800a0f1 	.word	0x0800a0f1
 800a0a8:	0800a0cb 	.word	0x0800a0cb
 800a0ac:	0800a0f1 	.word	0x0800a0f1
 800a0b0:	0800a0f1 	.word	0x0800a0f1
 800a0b4:	0800a0f1 	.word	0x0800a0f1
 800a0b8:	0800a0d3 	.word	0x0800a0d3
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0bc:	f7fe fb02 	bl	80086c4 <HAL_RCC_GetPCLK2Freq>
 800a0c0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0c2:	e01b      	b.n	800a0fc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0c4:	4b08      	ldr	r3, [pc, #32]	; (800a0e8 <UART_SetConfig+0x2f8>)
 800a0c6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0c8:	e018      	b.n	800a0fc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0ca:	f7fe fa65 	bl	8008598 <HAL_RCC_GetSysClockFreq>
 800a0ce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a0d0:	e014      	b.n	800a0fc <UART_SetConfig+0x30c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a0d8:	e010      	b.n	800a0fc <UART_SetConfig+0x30c>
 800a0da:	bf00      	nop
 800a0dc:	cfff69f3 	.word	0xcfff69f3
 800a0e0:	40008000 	.word	0x40008000
 800a0e4:	40013800 	.word	0x40013800
 800a0e8:	00f42400 	.word	0x00f42400
 800a0ec:	08013038 	.word	0x08013038
      default:
        pclk = 0U;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a0f4:	2301      	movs	r3, #1
 800a0f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a0fa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	f000 8084 	beq.w	800a20c <UART_SetConfig+0x41c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a108:	4a4b      	ldr	r2, [pc, #300]	; (800a238 <UART_SetConfig+0x448>)
 800a10a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a10e:	461a      	mov	r2, r3
 800a110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a112:	fbb3 f3f2 	udiv	r3, r3, r2
 800a116:	005a      	lsls	r2, r3, #1
 800a118:	697b      	ldr	r3, [r7, #20]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	085b      	lsrs	r3, r3, #1
 800a11e:	441a      	add	r2, r3
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	fbb2 f3f3 	udiv	r3, r2, r3
 800a128:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a12a:	6a3b      	ldr	r3, [r7, #32]
 800a12c:	2b0f      	cmp	r3, #15
 800a12e:	d916      	bls.n	800a15e <UART_SetConfig+0x36e>
 800a130:	6a3b      	ldr	r3, [r7, #32]
 800a132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a136:	d212      	bcs.n	800a15e <UART_SetConfig+0x36e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a138:	6a3b      	ldr	r3, [r7, #32]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	f023 030f 	bic.w	r3, r3, #15
 800a140:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	085b      	lsrs	r3, r3, #1
 800a146:	b29b      	uxth	r3, r3
 800a148:	f003 0307 	and.w	r3, r3, #7
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	8bfb      	ldrh	r3, [r7, #30]
 800a150:	4313      	orrs	r3, r2
 800a152:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	8bfa      	ldrh	r2, [r7, #30]
 800a15a:	60da      	str	r2, [r3, #12]
 800a15c:	e056      	b.n	800a20c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a15e:	2301      	movs	r3, #1
 800a160:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800a164:	e052      	b.n	800a20c <UART_SetConfig+0x41c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a166:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800a16a:	3b01      	subs	r3, #1
 800a16c:	2b07      	cmp	r3, #7
 800a16e:	d822      	bhi.n	800a1b6 <UART_SetConfig+0x3c6>
 800a170:	a201      	add	r2, pc, #4	; (adr r2, 800a178 <UART_SetConfig+0x388>)
 800a172:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a176:	bf00      	nop
 800a178:	0800a199 	.word	0x0800a199
 800a17c:	0800a1a1 	.word	0x0800a1a1
 800a180:	0800a1b7 	.word	0x0800a1b7
 800a184:	0800a1a7 	.word	0x0800a1a7
 800a188:	0800a1b7 	.word	0x0800a1b7
 800a18c:	0800a1b7 	.word	0x0800a1b7
 800a190:	0800a1b7 	.word	0x0800a1b7
 800a194:	0800a1af 	.word	0x0800a1af
    {
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a198:	f7fe fa94 	bl	80086c4 <HAL_RCC_GetPCLK2Freq>
 800a19c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a19e:	e010      	b.n	800a1c2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a1a0:	4b26      	ldr	r3, [pc, #152]	; (800a23c <UART_SetConfig+0x44c>)
 800a1a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1a4:	e00d      	b.n	800a1c2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a1a6:	f7fe f9f7 	bl	8008598 <HAL_RCC_GetSysClockFreq>
 800a1aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800a1ac:	e009      	b.n	800a1c2 <UART_SetConfig+0x3d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a1ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800a1b4:	e005      	b.n	800a1c2 <UART_SetConfig+0x3d2>
      default:
        pclk = 0U;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800a1c0:	bf00      	nop
    }

    if (pclk != 0U)
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d021      	beq.n	800a20c <UART_SetConfig+0x41c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1cc:	4a1a      	ldr	r2, [pc, #104]	; (800a238 <UART_SetConfig+0x448>)
 800a1ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d6:	fbb3 f2f2 	udiv	r2, r3, r2
 800a1da:	697b      	ldr	r3, [r7, #20]
 800a1dc:	685b      	ldr	r3, [r3, #4]
 800a1de:	085b      	lsrs	r3, r3, #1
 800a1e0:	441a      	add	r2, r3
 800a1e2:	697b      	ldr	r3, [r7, #20]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a1ec:	6a3b      	ldr	r3, [r7, #32]
 800a1ee:	2b0f      	cmp	r3, #15
 800a1f0:	d909      	bls.n	800a206 <UART_SetConfig+0x416>
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f8:	d205      	bcs.n	800a206 <UART_SetConfig+0x416>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a1fa:	6a3b      	ldr	r3, [r7, #32]
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	60da      	str	r2, [r3, #12]
 800a204:	e002      	b.n	800a20c <UART_SetConfig+0x41c>
      }
      else
      {
        ret = HAL_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a20c:	697b      	ldr	r3, [r7, #20]
 800a20e:	2201      	movs	r2, #1
 800a210:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	2201      	movs	r2, #1
 800a218:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a21c:	697b      	ldr	r3, [r7, #20]
 800a21e:	2200      	movs	r2, #0
 800a220:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800a222:	697b      	ldr	r3, [r7, #20]
 800a224:	2200      	movs	r2, #0
 800a226:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800a228:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3730      	adds	r7, #48	; 0x30
 800a230:	46bd      	mov	sp, r7
 800a232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a236:	bf00      	nop
 800a238:	08013038 	.word	0x08013038
 800a23c:	00f42400 	.word	0x00f42400

0800a240 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a240:	b480      	push	{r7}
 800a242:	b083      	sub	sp, #12
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a24c:	f003 0308 	and.w	r3, r3, #8
 800a250:	2b00      	cmp	r3, #0
 800a252:	d00a      	beq.n	800a26a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a26e:	f003 0301 	and.w	r3, r3, #1
 800a272:	2b00      	cmp	r3, #0
 800a274:	d00a      	beq.n	800a28c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	685b      	ldr	r3, [r3, #4]
 800a27c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	430a      	orrs	r2, r1
 800a28a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a290:	f003 0302 	and.w	r3, r3, #2
 800a294:	2b00      	cmp	r3, #0
 800a296:	d00a      	beq.n	800a2ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2b2:	f003 0304 	and.w	r3, r3, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d00a      	beq.n	800a2d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	685b      	ldr	r3, [r3, #4]
 800a2c0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	430a      	orrs	r2, r1
 800a2ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2d4:	f003 0310 	and.w	r3, r3, #16
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d00a      	beq.n	800a2f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	430a      	orrs	r2, r1
 800a2f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f6:	f003 0320 	and.w	r3, r3, #32
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d00a      	beq.n	800a314 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	689b      	ldr	r3, [r3, #8]
 800a304:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	430a      	orrs	r2, r1
 800a312:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d01a      	beq.n	800a356 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	430a      	orrs	r2, r1
 800a334:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a33e:	d10a      	bne.n	800a356 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	685b      	ldr	r3, [r3, #4]
 800a346:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	430a      	orrs	r2, r1
 800a354:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d00a      	beq.n	800a378 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	430a      	orrs	r2, r1
 800a376:	605a      	str	r2, [r3, #4]
  }
}
 800a378:	bf00      	nop
 800a37a:	370c      	adds	r7, #12
 800a37c:	46bd      	mov	sp, r7
 800a37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a382:	4770      	bx	lr

0800a384 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b098      	sub	sp, #96	; 0x60
 800a388:	af02      	add	r7, sp, #8
 800a38a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2200      	movs	r2, #0
 800a390:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a394:	f7fb fade 	bl	8005954 <HAL_GetTick>
 800a398:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f003 0308 	and.w	r3, r3, #8
 800a3a4:	2b08      	cmp	r3, #8
 800a3a6:	d12f      	bne.n	800a408 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a3a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a3ac:	9300      	str	r3, [sp, #0]
 800a3ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f000 f88e 	bl	800a4d8 <UART_WaitOnFlagUntilTimeout>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d022      	beq.n	800a408 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ca:	e853 3f00 	ldrex	r3, [r3]
 800a3ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d6:	653b      	str	r3, [r7, #80]	; 0x50
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	461a      	mov	r2, r3
 800a3de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a3e0:	647b      	str	r3, [r7, #68]	; 0x44
 800a3e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a3e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a3e8:	e841 2300 	strex	r3, r2, [r1]
 800a3ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a3ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d1e6      	bne.n	800a3c2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2220      	movs	r2, #32
 800a3f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a404:	2303      	movs	r3, #3
 800a406:	e063      	b.n	800a4d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f003 0304 	and.w	r3, r3, #4
 800a412:	2b04      	cmp	r3, #4
 800a414:	d149      	bne.n	800a4aa <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a416:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a41e:	2200      	movs	r2, #0
 800a420:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f000 f857 	bl	800a4d8 <UART_WaitOnFlagUntilTimeout>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d03c      	beq.n	800a4aa <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a438:	e853 3f00 	ldrex	r3, [r3]
 800a43c:	623b      	str	r3, [r7, #32]
   return(result);
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a444:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a44e:	633b      	str	r3, [r7, #48]	; 0x30
 800a450:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a454:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a456:	e841 2300 	strex	r3, r2, [r1]
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d1e6      	bne.n	800a430 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	3308      	adds	r3, #8
 800a468:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	e853 3f00 	ldrex	r3, [r3]
 800a470:	60fb      	str	r3, [r7, #12]
   return(result);
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	f023 0301 	bic.w	r3, r3, #1
 800a478:	64bb      	str	r3, [r7, #72]	; 0x48
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	3308      	adds	r3, #8
 800a480:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a482:	61fa      	str	r2, [r7, #28]
 800a484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a486:	69b9      	ldr	r1, [r7, #24]
 800a488:	69fa      	ldr	r2, [r7, #28]
 800a48a:	e841 2300 	strex	r3, r2, [r1]
 800a48e:	617b      	str	r3, [r7, #20]
   return(result);
 800a490:	697b      	ldr	r3, [r7, #20]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d1e5      	bne.n	800a462 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2220      	movs	r2, #32
 800a49a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a4a6:	2303      	movs	r3, #3
 800a4a8:	e012      	b.n	800a4d0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	2220      	movs	r2, #32
 800a4ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2220      	movs	r2, #32
 800a4b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3758      	adds	r7, #88	; 0x58
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b084      	sub	sp, #16
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	603b      	str	r3, [r7, #0]
 800a4e4:	4613      	mov	r3, r2
 800a4e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4e8:	e04f      	b.n	800a58a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4f0:	d04b      	beq.n	800a58a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4f2:	f7fb fa2f 	bl	8005954 <HAL_GetTick>
 800a4f6:	4602      	mov	r2, r0
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	1ad3      	subs	r3, r2, r3
 800a4fc:	69ba      	ldr	r2, [r7, #24]
 800a4fe:	429a      	cmp	r2, r3
 800a500:	d302      	bcc.n	800a508 <UART_WaitOnFlagUntilTimeout+0x30>
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d101      	bne.n	800a50c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a508:	2303      	movs	r3, #3
 800a50a:	e04e      	b.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0304 	and.w	r3, r3, #4
 800a516:	2b00      	cmp	r3, #0
 800a518:	d037      	beq.n	800a58a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a51a:	68bb      	ldr	r3, [r7, #8]
 800a51c:	2b80      	cmp	r3, #128	; 0x80
 800a51e:	d034      	beq.n	800a58a <UART_WaitOnFlagUntilTimeout+0xb2>
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b40      	cmp	r3, #64	; 0x40
 800a524:	d031      	beq.n	800a58a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69db      	ldr	r3, [r3, #28]
 800a52c:	f003 0308 	and.w	r3, r3, #8
 800a530:	2b08      	cmp	r3, #8
 800a532:	d110      	bne.n	800a556 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	2208      	movs	r2, #8
 800a53a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a53c:	68f8      	ldr	r0, [r7, #12]
 800a53e:	f000 f99c 	bl	800a87a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2208      	movs	r2, #8
 800a546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	2200      	movs	r2, #0
 800a54e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800a552:	2301      	movs	r3, #1
 800a554:	e029      	b.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69db      	ldr	r3, [r3, #28]
 800a55c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a560:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a564:	d111      	bne.n	800a58a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a56e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a570:	68f8      	ldr	r0, [r7, #12]
 800a572:	f000 f982 	bl	800a87a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2220      	movs	r2, #32
 800a57a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2200      	movs	r2, #0
 800a582:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800a586:	2303      	movs	r3, #3
 800a588:	e00f      	b.n	800a5aa <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	69da      	ldr	r2, [r3, #28]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	4013      	ands	r3, r2
 800a594:	68ba      	ldr	r2, [r7, #8]
 800a596:	429a      	cmp	r2, r3
 800a598:	bf0c      	ite	eq
 800a59a:	2301      	moveq	r3, #1
 800a59c:	2300      	movne	r3, #0
 800a59e:	b2db      	uxtb	r3, r3
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	d0a0      	beq.n	800a4ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5a8:	2300      	movs	r3, #0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b0a3      	sub	sp, #140	; 0x8c
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	88fa      	ldrh	r2, [r7, #6]
 800a5cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	88fa      	ldrh	r2, [r7, #6]
 800a5d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	689b      	ldr	r3, [r3, #8]
 800a5e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5e6:	d10e      	bne.n	800a606 <UART_Start_Receive_IT+0x52>
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	691b      	ldr	r3, [r3, #16]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d105      	bne.n	800a5fc <UART_Start_Receive_IT+0x48>
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a5f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a5fa:	e02d      	b.n	800a658 <UART_Start_Receive_IT+0xa4>
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	22ff      	movs	r2, #255	; 0xff
 800a600:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a604:	e028      	b.n	800a658 <UART_Start_Receive_IT+0xa4>
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	689b      	ldr	r3, [r3, #8]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d10d      	bne.n	800a62a <UART_Start_Receive_IT+0x76>
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	691b      	ldr	r3, [r3, #16]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d104      	bne.n	800a620 <UART_Start_Receive_IT+0x6c>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	22ff      	movs	r2, #255	; 0xff
 800a61a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a61e:	e01b      	b.n	800a658 <UART_Start_Receive_IT+0xa4>
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	227f      	movs	r2, #127	; 0x7f
 800a624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a628:	e016      	b.n	800a658 <UART_Start_Receive_IT+0xa4>
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	689b      	ldr	r3, [r3, #8]
 800a62e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a632:	d10d      	bne.n	800a650 <UART_Start_Receive_IT+0x9c>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d104      	bne.n	800a646 <UART_Start_Receive_IT+0x92>
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	227f      	movs	r2, #127	; 0x7f
 800a640:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a644:	e008      	b.n	800a658 <UART_Start_Receive_IT+0xa4>
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	223f      	movs	r2, #63	; 0x3f
 800a64a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a64e:	e003      	b.n	800a658 <UART_Start_Receive_IT+0xa4>
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	2200      	movs	r2, #0
 800a654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	2222      	movs	r2, #34	; 0x22
 800a664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a670:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a672:	e853 3f00 	ldrex	r3, [r3]
 800a676:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800a678:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a67a:	f043 0301 	orr.w	r3, r3, #1
 800a67e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	3308      	adds	r3, #8
 800a688:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800a68c:	673a      	str	r2, [r7, #112]	; 0x70
 800a68e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a690:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800a692:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a694:	e841 2300 	strex	r3, r2, [r1]
 800a698:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800a69a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d1e3      	bne.n	800a668 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a6a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a6a8:	d14f      	bne.n	800a74a <UART_Start_Receive_IT+0x196>
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a6b0:	88fa      	ldrh	r2, [r7, #6]
 800a6b2:	429a      	cmp	r2, r3
 800a6b4:	d349      	bcc.n	800a74a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a6be:	d107      	bne.n	800a6d0 <UART_Start_Receive_IT+0x11c>
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	691b      	ldr	r3, [r3, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d103      	bne.n	800a6d0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4a47      	ldr	r2, [pc, #284]	; (800a7e8 <UART_Start_Receive_IT+0x234>)
 800a6cc:	675a      	str	r2, [r3, #116]	; 0x74
 800a6ce:	e002      	b.n	800a6d6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	4a46      	ldr	r2, [pc, #280]	; (800a7ec <UART_Start_Receive_IT+0x238>)
 800a6d4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d01a      	beq.n	800a714 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e6:	e853 3f00 	ldrex	r3, [r3]
 800a6ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a6ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a6f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a700:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a702:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a704:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a706:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a708:	e841 2300 	strex	r3, r2, [r1]
 800a70c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a710:	2b00      	cmp	r3, #0
 800a712:	d1e4      	bne.n	800a6de <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	3308      	adds	r3, #8
 800a71a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a71c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a71e:	e853 3f00 	ldrex	r3, [r3]
 800a722:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a72a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3308      	adds	r3, #8
 800a732:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800a734:	64ba      	str	r2, [r7, #72]	; 0x48
 800a736:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a738:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a73a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a73c:	e841 2300 	strex	r3, r2, [r1]
 800a740:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a742:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a744:	2b00      	cmp	r3, #0
 800a746:	d1e5      	bne.n	800a714 <UART_Start_Receive_IT+0x160>
 800a748:	e046      	b.n	800a7d8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	689b      	ldr	r3, [r3, #8]
 800a74e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a752:	d107      	bne.n	800a764 <UART_Start_Receive_IT+0x1b0>
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	691b      	ldr	r3, [r3, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d103      	bne.n	800a764 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4a24      	ldr	r2, [pc, #144]	; (800a7f0 <UART_Start_Receive_IT+0x23c>)
 800a760:	675a      	str	r2, [r3, #116]	; 0x74
 800a762:	e002      	b.n	800a76a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	4a23      	ldr	r2, [pc, #140]	; (800a7f4 <UART_Start_Receive_IT+0x240>)
 800a768:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d019      	beq.n	800a7a6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a77a:	e853 3f00 	ldrex	r3, [r3]
 800a77e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a782:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a786:	677b      	str	r3, [r7, #116]	; 0x74
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	461a      	mov	r2, r3
 800a78e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a790:	637b      	str	r3, [r7, #52]	; 0x34
 800a792:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a798:	e841 2300 	strex	r3, r2, [r1]
 800a79c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1e6      	bne.n	800a772 <UART_Start_Receive_IT+0x1be>
 800a7a4:	e018      	b.n	800a7d8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	e853 3f00 	ldrex	r3, [r3]
 800a7b2:	613b      	str	r3, [r7, #16]
   return(result);
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	f043 0320 	orr.w	r3, r3, #32
 800a7ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7c4:	623b      	str	r3, [r7, #32]
 800a7c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c8:	69f9      	ldr	r1, [r7, #28]
 800a7ca:	6a3a      	ldr	r2, [r7, #32]
 800a7cc:	e841 2300 	strex	r3, r2, [r1]
 800a7d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a7d2:	69bb      	ldr	r3, [r7, #24]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d1e6      	bne.n	800a7a6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800a7d8:	2300      	movs	r3, #0
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	378c      	adds	r7, #140	; 0x8c
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr
 800a7e6:	bf00      	nop
 800a7e8:	0800b1d1 	.word	0x0800b1d1
 800a7ec:	0800ae71 	.word	0x0800ae71
 800a7f0:	0800acb9 	.word	0x0800acb9
 800a7f4:	0800ab01 	.word	0x0800ab01

0800a7f8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a7f8:	b480      	push	{r7}
 800a7fa:	b08f      	sub	sp, #60	; 0x3c
 800a7fc:	af00      	add	r7, sp, #0
 800a7fe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a806:	6a3b      	ldr	r3, [r7, #32]
 800a808:	e853 3f00 	ldrex	r3, [r3]
 800a80c:	61fb      	str	r3, [r7, #28]
   return(result);
 800a80e:	69fb      	ldr	r3, [r7, #28]
 800a810:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a814:	637b      	str	r3, [r7, #52]	; 0x34
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	461a      	mov	r2, r3
 800a81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a81e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a820:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a822:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a824:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a826:	e841 2300 	strex	r3, r2, [r1]
 800a82a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d1e6      	bne.n	800a800 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3308      	adds	r3, #8
 800a838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	e853 3f00 	ldrex	r3, [r3]
 800a840:	60bb      	str	r3, [r7, #8]
   return(result);
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a848:	633b      	str	r3, [r7, #48]	; 0x30
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	3308      	adds	r3, #8
 800a850:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a852:	61ba      	str	r2, [r7, #24]
 800a854:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a856:	6979      	ldr	r1, [r7, #20]
 800a858:	69ba      	ldr	r2, [r7, #24]
 800a85a:	e841 2300 	strex	r3, r2, [r1]
 800a85e:	613b      	str	r3, [r7, #16]
   return(result);
 800a860:	693b      	ldr	r3, [r7, #16]
 800a862:	2b00      	cmp	r3, #0
 800a864:	d1e5      	bne.n	800a832 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	2220      	movs	r2, #32
 800a86a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800a86e:	bf00      	nop
 800a870:	373c      	adds	r7, #60	; 0x3c
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr

0800a87a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a87a:	b480      	push	{r7}
 800a87c:	b095      	sub	sp, #84	; 0x54
 800a87e:	af00      	add	r7, sp, #0
 800a880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88a:	e853 3f00 	ldrex	r3, [r3]
 800a88e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a892:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a896:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	461a      	mov	r2, r3
 800a89e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8a0:	643b      	str	r3, [r7, #64]	; 0x40
 800a8a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a8a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a8a8:	e841 2300 	strex	r3, r2, [r1]
 800a8ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1e6      	bne.n	800a882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	3308      	adds	r3, #8
 800a8ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8bc:	6a3b      	ldr	r3, [r7, #32]
 800a8be:	e853 3f00 	ldrex	r3, [r3]
 800a8c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a8ca:	f023 0301 	bic.w	r3, r3, #1
 800a8ce:	64bb      	str	r3, [r7, #72]	; 0x48
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	3308      	adds	r3, #8
 800a8d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a8d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a8da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a8de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8e0:	e841 2300 	strex	r3, r2, [r1]
 800a8e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1e3      	bne.n	800a8b4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8f0:	2b01      	cmp	r3, #1
 800a8f2:	d118      	bne.n	800a926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	e853 3f00 	ldrex	r3, [r3]
 800a900:	60bb      	str	r3, [r7, #8]
   return(result);
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	f023 0310 	bic.w	r3, r3, #16
 800a908:	647b      	str	r3, [r7, #68]	; 0x44
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	461a      	mov	r2, r3
 800a910:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a912:	61bb      	str	r3, [r7, #24]
 800a914:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a916:	6979      	ldr	r1, [r7, #20]
 800a918:	69ba      	ldr	r2, [r7, #24]
 800a91a:	e841 2300 	strex	r3, r2, [r1]
 800a91e:	613b      	str	r3, [r7, #16]
   return(result);
 800a920:	693b      	ldr	r3, [r7, #16]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d1e6      	bne.n	800a8f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2220      	movs	r2, #32
 800a92a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2200      	movs	r2, #0
 800a932:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	2200      	movs	r2, #0
 800a938:	675a      	str	r2, [r3, #116]	; 0x74
}
 800a93a:	bf00      	nop
 800a93c:	3754      	adds	r7, #84	; 0x54
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a946:	b580      	push	{r7, lr}
 800a948:	b090      	sub	sp, #64	; 0x40
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a952:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f003 0320 	and.w	r3, r3, #32
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d137      	bne.n	800a9d2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a964:	2200      	movs	r2, #0
 800a966:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a96a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	3308      	adds	r3, #8
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a974:	e853 3f00 	ldrex	r3, [r3]
 800a978:	623b      	str	r3, [r7, #32]
   return(result);
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a980:	63bb      	str	r3, [r7, #56]	; 0x38
 800a982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	3308      	adds	r3, #8
 800a988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a98a:	633a      	str	r2, [r7, #48]	; 0x30
 800a98c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a98e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a992:	e841 2300 	strex	r3, r2, [r1]
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1e5      	bne.n	800a96a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a99e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	e853 3f00 	ldrex	r3, [r3]
 800a9aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a9b2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9bc:	61fb      	str	r3, [r7, #28]
 800a9be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c0:	69b9      	ldr	r1, [r7, #24]
 800a9c2:	69fa      	ldr	r2, [r7, #28]
 800a9c4:	e841 2300 	strex	r3, r2, [r1]
 800a9c8:	617b      	str	r3, [r7, #20]
   return(result);
 800a9ca:	697b      	ldr	r3, [r7, #20]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d1e6      	bne.n	800a99e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a9d0:	e002      	b.n	800a9d8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a9d2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a9d4:	f7f7 ff8a 	bl	80028ec <HAL_UART_TxCpltCallback>
}
 800a9d8:	bf00      	nop
 800a9da:	3740      	adds	r7, #64	; 0x40
 800a9dc:	46bd      	mov	sp, r7
 800a9de:	bd80      	pop	{r7, pc}

0800a9e0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ec:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a9ee:	68f8      	ldr	r0, [r7, #12]
 800a9f0:	f7ff f9de 	bl	8009db0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a9f4:	bf00      	nop
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b086      	sub	sp, #24
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa08:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800aa0a:	697b      	ldr	r3, [r7, #20]
 800aa0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa10:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800aa12:	697b      	ldr	r3, [r7, #20]
 800aa14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa18:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aa24:	2b80      	cmp	r3, #128	; 0x80
 800aa26:	d109      	bne.n	800aa3c <UART_DMAError+0x40>
 800aa28:	693b      	ldr	r3, [r7, #16]
 800aa2a:	2b21      	cmp	r3, #33	; 0x21
 800aa2c:	d106      	bne.n	800aa3c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2200      	movs	r2, #0
 800aa32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800aa36:	6978      	ldr	r0, [r7, #20]
 800aa38:	f7ff fede 	bl	800a7f8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa46:	2b40      	cmp	r3, #64	; 0x40
 800aa48:	d109      	bne.n	800aa5e <UART_DMAError+0x62>
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	2b22      	cmp	r3, #34	; 0x22
 800aa4e:	d106      	bne.n	800aa5e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800aa50:	697b      	ldr	r3, [r7, #20]
 800aa52:	2200      	movs	r2, #0
 800aa54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800aa58:	6978      	ldr	r0, [r7, #20]
 800aa5a:	f7ff ff0e 	bl	800a87a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800aa5e:	697b      	ldr	r3, [r7, #20]
 800aa60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa64:	f043 0210 	orr.w	r2, r3, #16
 800aa68:	697b      	ldr	r3, [r7, #20]
 800aa6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa6e:	6978      	ldr	r0, [r7, #20]
 800aa70:	f7ff f9a8 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa74:	bf00      	nop
 800aa76:	3718      	adds	r7, #24
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b084      	sub	sp, #16
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2200      	movs	r2, #0
 800aa96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f7ff f992 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaa0:	bf00      	nop
 800aaa2:	3710      	adds	r7, #16
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	bd80      	pop	{r7, pc}

0800aaa8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b088      	sub	sp, #32
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	e853 3f00 	ldrex	r3, [r3]
 800aabc:	60bb      	str	r3, [r7, #8]
   return(result);
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aac4:	61fb      	str	r3, [r7, #28]
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	461a      	mov	r2, r3
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	61bb      	str	r3, [r7, #24]
 800aad0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	6979      	ldr	r1, [r7, #20]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	e841 2300 	strex	r3, r2, [r1]
 800aada:	613b      	str	r3, [r7, #16]
   return(result);
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1e6      	bne.n	800aab0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2200      	movs	r2, #0
 800aaee:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f7f7 fefb 	bl	80028ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aaf6:	bf00      	nop
 800aaf8:	3720      	adds	r7, #32
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
	...

0800ab00 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b09c      	sub	sp, #112	; 0x70
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ab0e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab18:	2b22      	cmp	r3, #34	; 0x22
 800ab1a:	f040 80be 	bne.w	800ac9a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ab28:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800ab2c:	b2d9      	uxtb	r1, r3
 800ab2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ab32:	b2da      	uxtb	r2, r3
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab38:	400a      	ands	r2, r1
 800ab3a:	b2d2      	uxtb	r2, r2
 800ab3c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab42:	1c5a      	adds	r2, r3, #1
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab4e:	b29b      	uxth	r3, r3
 800ab50:	3b01      	subs	r3, #1
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ab60:	b29b      	uxth	r3, r3
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	f040 80a1 	bne.w	800acaa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab70:	e853 3f00 	ldrex	r3, [r3]
 800ab74:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab78:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	461a      	mov	r2, r3
 800ab84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab86:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab8e:	e841 2300 	strex	r3, r2, [r1]
 800ab92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1e6      	bne.n	800ab68 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	3308      	adds	r3, #8
 800aba0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba4:	e853 3f00 	ldrex	r3, [r3]
 800aba8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800abaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abac:	f023 0301 	bic.w	r3, r3, #1
 800abb0:	667b      	str	r3, [r7, #100]	; 0x64
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	3308      	adds	r3, #8
 800abb8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800abba:	647a      	str	r2, [r7, #68]	; 0x44
 800abbc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abbe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800abc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800abc2:	e841 2300 	strex	r3, r2, [r1]
 800abc6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800abc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d1e5      	bne.n	800ab9a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2220      	movs	r2, #32
 800abd2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2200      	movs	r2, #0
 800abda:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	2200      	movs	r2, #0
 800abe0:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a33      	ldr	r2, [pc, #204]	; (800acb4 <UART_RxISR_8BIT+0x1b4>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d01f      	beq.n	800ac2c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	685b      	ldr	r3, [r3, #4]
 800abf2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d018      	beq.n	800ac2c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac02:	e853 3f00 	ldrex	r3, [r3]
 800ac06:	623b      	str	r3, [r7, #32]
   return(result);
 800ac08:	6a3b      	ldr	r3, [r7, #32]
 800ac0a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ac0e:	663b      	str	r3, [r7, #96]	; 0x60
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	461a      	mov	r2, r3
 800ac16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ac18:	633b      	str	r3, [r7, #48]	; 0x30
 800ac1a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac20:	e841 2300 	strex	r3, r2, [r1]
 800ac24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d1e6      	bne.n	800abfa <UART_RxISR_8BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d12e      	bne.n	800ac92 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2200      	movs	r2, #0
 800ac38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac40:	693b      	ldr	r3, [r7, #16]
 800ac42:	e853 3f00 	ldrex	r3, [r3]
 800ac46:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f023 0310 	bic.w	r3, r3, #16
 800ac4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	461a      	mov	r2, r3
 800ac56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ac58:	61fb      	str	r3, [r7, #28]
 800ac5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5c:	69b9      	ldr	r1, [r7, #24]
 800ac5e:	69fa      	ldr	r2, [r7, #28]
 800ac60:	e841 2300 	strex	r3, r2, [r1]
 800ac64:	617b      	str	r3, [r7, #20]
   return(result);
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d1e6      	bne.n	800ac3a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	69db      	ldr	r3, [r3, #28]
 800ac72:	f003 0310 	and.w	r3, r3, #16
 800ac76:	2b10      	cmp	r3, #16
 800ac78:	d103      	bne.n	800ac82 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	2210      	movs	r2, #16
 800ac80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff f8a4 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ac90:	e00b      	b.n	800acaa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ac92:	6878      	ldr	r0, [r7, #4]
 800ac94:	f7f7 fdfc 	bl	8002890 <HAL_UART_RxCpltCallback>
}
 800ac98:	e007      	b.n	800acaa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	699a      	ldr	r2, [r3, #24]
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	f042 0208 	orr.w	r2, r2, #8
 800aca8:	619a      	str	r2, [r3, #24]
}
 800acaa:	bf00      	nop
 800acac:	3770      	adds	r7, #112	; 0x70
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd80      	pop	{r7, pc}
 800acb2:	bf00      	nop
 800acb4:	40008000 	.word	0x40008000

0800acb8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b09c      	sub	sp, #112	; 0x70
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acc6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800acd0:	2b22      	cmp	r3, #34	; 0x22
 800acd2:	f040 80be 	bne.w	800ae52 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acdc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ace4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ace6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800acea:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800acee:	4013      	ands	r3, r2
 800acf0:	b29a      	uxth	r2, r3
 800acf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800acf4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acfa:	1c9a      	adds	r2, r3, #2
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad06:	b29b      	uxth	r3, r3
 800ad08:	3b01      	subs	r3, #1
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ad18:	b29b      	uxth	r3, r3
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	f040 80a1 	bne.w	800ae62 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad28:	e853 3f00 	ldrex	r3, [r3]
 800ad2c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ad2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ad30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad34:	667b      	str	r3, [r7, #100]	; 0x64
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad3e:	657b      	str	r3, [r7, #84]	; 0x54
 800ad40:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ad44:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ad46:	e841 2300 	strex	r3, r2, [r1]
 800ad4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ad4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d1e6      	bne.n	800ad20 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	3308      	adds	r3, #8
 800ad58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad5c:	e853 3f00 	ldrex	r3, [r3]
 800ad60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad64:	f023 0301 	bic.w	r3, r3, #1
 800ad68:	663b      	str	r3, [r7, #96]	; 0x60
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	3308      	adds	r3, #8
 800ad70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ad72:	643a      	str	r2, [r7, #64]	; 0x40
 800ad74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad7a:	e841 2300 	strex	r3, r2, [r1]
 800ad7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d1e5      	bne.n	800ad52 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2220      	movs	r2, #32
 800ad8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2200      	movs	r2, #0
 800ad98:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a33      	ldr	r2, [pc, #204]	; (800ae6c <UART_RxISR_16BIT+0x1b4>)
 800ada0:	4293      	cmp	r3, r2
 800ada2:	d01f      	beq.n	800ade4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d018      	beq.n	800ade4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb8:	6a3b      	ldr	r3, [r7, #32]
 800adba:	e853 3f00 	ldrex	r3, [r3]
 800adbe:	61fb      	str	r3, [r7, #28]
   return(result);
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800adc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800add0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800add2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800add6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800add8:	e841 2300 	strex	r3, r2, [r1]
 800addc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d1e6      	bne.n	800adb2 <UART_RxISR_16BIT+0xfa>
      }
#endif /* LPUART1 */

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d12e      	bne.n	800ae4a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2200      	movs	r2, #0
 800adf0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	e853 3f00 	ldrex	r3, [r3]
 800adfe:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	f023 0310 	bic.w	r3, r3, #16
 800ae06:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	461a      	mov	r2, r3
 800ae0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae10:	61bb      	str	r3, [r7, #24]
 800ae12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae14:	6979      	ldr	r1, [r7, #20]
 800ae16:	69ba      	ldr	r2, [r7, #24]
 800ae18:	e841 2300 	strex	r3, r2, [r1]
 800ae1c:	613b      	str	r3, [r7, #16]
   return(result);
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1e6      	bne.n	800adf2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	69db      	ldr	r3, [r3, #28]
 800ae2a:	f003 0310 	and.w	r3, r3, #16
 800ae2e:	2b10      	cmp	r3, #16
 800ae30:	d103      	bne.n	800ae3a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2210      	movs	r2, #16
 800ae38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ae40:	4619      	mov	r1, r3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f7fe ffc8 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ae48:	e00b      	b.n	800ae62 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800ae4a:	6878      	ldr	r0, [r7, #4]
 800ae4c:	f7f7 fd20 	bl	8002890 <HAL_UART_RxCpltCallback>
}
 800ae50:	e007      	b.n	800ae62 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	699a      	ldr	r2, [r3, #24]
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	f042 0208 	orr.w	r2, r2, #8
 800ae60:	619a      	str	r2, [r3, #24]
}
 800ae62:	bf00      	nop
 800ae64:	3770      	adds	r7, #112	; 0x70
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
 800ae6a:	bf00      	nop
 800ae6c:	40008000 	.word	0x40008000

0800ae70 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ae70:	b580      	push	{r7, lr}
 800ae72:	b0ac      	sub	sp, #176	; 0xb0
 800ae74:	af00      	add	r7, sp, #0
 800ae76:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ae7e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	69db      	ldr	r3, [r3, #28]
 800ae88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	689b      	ldr	r3, [r3, #8]
 800ae9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aea6:	2b22      	cmp	r3, #34	; 0x22
 800aea8:	f040 8182 	bne.w	800b1b0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800aeb2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800aeb6:	e125      	b.n	800b104 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aebe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aec2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800aec6:	b2d9      	uxtb	r1, r3
 800aec8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed2:	400a      	ands	r2, r1
 800aed4:	b2d2      	uxtb	r2, r2
 800aed6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aedc:	1c5a      	adds	r2, r3, #1
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	3b01      	subs	r3, #1
 800aeec:	b29a      	uxth	r2, r3
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800aefe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af02:	f003 0307 	and.w	r3, r3, #7
 800af06:	2b00      	cmp	r3, #0
 800af08:	d053      	beq.n	800afb2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800af0a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d011      	beq.n	800af3a <UART_RxISR_8BIT_FIFOEN+0xca>
 800af16:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800af1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2201      	movs	r2, #1
 800af28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af30:	f043 0201 	orr.w	r2, r3, #1
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af3e:	f003 0302 	and.w	r3, r3, #2
 800af42:	2b00      	cmp	r3, #0
 800af44:	d011      	beq.n	800af6a <UART_RxISR_8BIT_FIFOEN+0xfa>
 800af46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af4a:	f003 0301 	and.w	r3, r3, #1
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d00b      	beq.n	800af6a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	2202      	movs	r2, #2
 800af58:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af60:	f043 0204 	orr.w	r2, r3, #4
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800af6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800af6e:	f003 0304 	and.w	r3, r3, #4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d011      	beq.n	800af9a <UART_RxISR_8BIT_FIFOEN+0x12a>
 800af76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800af7a:	f003 0301 	and.w	r3, r3, #1
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00b      	beq.n	800af9a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2204      	movs	r2, #4
 800af88:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af90:	f043 0202 	orr.w	r2, r3, #2
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d006      	beq.n	800afb2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f7fe ff0d 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	2200      	movs	r2, #0
 800afae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800afb8:	b29b      	uxth	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	f040 80a2 	bne.w	800b104 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800afce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800afd4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afe2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800afe4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800afe8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800afea:	e841 2300 	strex	r3, r2, [r1]
 800afee:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800aff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d1e4      	bne.n	800afc0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	3308      	adds	r3, #8
 800affc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800affe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b000:	e853 3f00 	ldrex	r3, [r3]
 800b004:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800b006:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b00c:	f023 0301 	bic.w	r3, r3, #1
 800b010:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3308      	adds	r3, #8
 800b01a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b01e:	66ba      	str	r2, [r7, #104]	; 0x68
 800b020:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b022:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800b024:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b026:	e841 2300 	strex	r3, r2, [r1]
 800b02a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b02c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d1e1      	bne.n	800aff6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2220      	movs	r2, #32
 800b036:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2200      	movs	r2, #0
 800b03e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a5f      	ldr	r2, [pc, #380]	; (800b1c8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800b04c:	4293      	cmp	r3, r2
 800b04e:	d021      	beq.n	800b094 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	685b      	ldr	r3, [r3, #4]
 800b056:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d01a      	beq.n	800b094 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b064:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b066:	e853 3f00 	ldrex	r3, [r3]
 800b06a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b06c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b06e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b072:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	461a      	mov	r2, r3
 800b07c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b080:	657b      	str	r3, [r7, #84]	; 0x54
 800b082:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b084:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b086:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b088:	e841 2300 	strex	r3, r2, [r1]
 800b08c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b08e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b090:	2b00      	cmp	r3, #0
 800b092:	d1e4      	bne.n	800b05e <UART_RxISR_8BIT_FIFOEN+0x1ee>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d130      	bne.n	800b0fe <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	2200      	movs	r2, #0
 800b0a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0aa:	e853 3f00 	ldrex	r3, [r3]
 800b0ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b0b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0b2:	f023 0310 	bic.w	r3, r3, #16
 800b0b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b0c4:	643b      	str	r3, [r7, #64]	; 0x40
 800b0c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b0ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b0cc:	e841 2300 	strex	r3, r2, [r1]
 800b0d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d1e4      	bne.n	800b0a2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	69db      	ldr	r3, [r3, #28]
 800b0de:	f003 0310 	and.w	r3, r3, #16
 800b0e2:	2b10      	cmp	r3, #16
 800b0e4:	d103      	bne.n	800b0ee <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	2210      	movs	r2, #16
 800b0ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7fe fe6e 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
 800b0fc:	e002      	b.n	800b104 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b0fe:	6878      	ldr	r0, [r7, #4]
 800b100:	f7f7 fbc6 	bl	8002890 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b104:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d006      	beq.n	800b11a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800b10c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b110:	f003 0320 	and.w	r3, r3, #32
 800b114:	2b00      	cmp	r3, #0
 800b116:	f47f aecf 	bne.w	800aeb8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b120:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b124:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d049      	beq.n	800b1c0 <UART_RxISR_8BIT_FIFOEN+0x350>
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b132:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800b136:	429a      	cmp	r2, r3
 800b138:	d242      	bcs.n	800b1c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	3308      	adds	r3, #8
 800b140:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	e853 3f00 	ldrex	r3, [r3]
 800b148:	61fb      	str	r3, [r7, #28]
   return(result);
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	3308      	adds	r3, #8
 800b15a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b15e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b160:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b162:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b164:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b166:	e841 2300 	strex	r3, r2, [r1]
 800b16a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b16c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d1e3      	bne.n	800b13a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	4a15      	ldr	r2, [pc, #84]	; (800b1cc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800b176:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	e853 3f00 	ldrex	r3, [r3]
 800b184:	60bb      	str	r3, [r7, #8]
   return(result);
 800b186:	68bb      	ldr	r3, [r7, #8]
 800b188:	f043 0320 	orr.w	r3, r3, #32
 800b18c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	461a      	mov	r2, r3
 800b196:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b19a:	61bb      	str	r3, [r7, #24]
 800b19c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19e:	6979      	ldr	r1, [r7, #20]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	e841 2300 	strex	r3, r2, [r1]
 800b1a6:	613b      	str	r3, [r7, #16]
   return(result);
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d1e4      	bne.n	800b178 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b1ae:	e007      	b.n	800b1c0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	699a      	ldr	r2, [r3, #24]
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	f042 0208 	orr.w	r2, r2, #8
 800b1be:	619a      	str	r2, [r3, #24]
}
 800b1c0:	bf00      	nop
 800b1c2:	37b0      	adds	r7, #176	; 0xb0
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}
 800b1c8:	40008000 	.word	0x40008000
 800b1cc:	0800ab01 	.word	0x0800ab01

0800b1d0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	b0ae      	sub	sp, #184	; 0xb8
 800b1d4:	af00      	add	r7, sp, #0
 800b1d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b1de:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b206:	2b22      	cmp	r3, #34	; 0x22
 800b208:	f040 8186 	bne.w	800b518 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b212:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b216:	e129      	b.n	800b46c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b21e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b226:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800b22a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800b22e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800b232:	4013      	ands	r3, r2
 800b234:	b29a      	uxth	r2, r3
 800b236:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b23a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b240:	1c9a      	adds	r2, r3, #2
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	3b01      	subs	r3, #1
 800b250:	b29a      	uxth	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	69db      	ldr	r3, [r3, #28]
 800b25e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800b262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b266:	f003 0307 	and.w	r3, r3, #7
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d053      	beq.n	800b316 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b26e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b272:	f003 0301 	and.w	r3, r3, #1
 800b276:	2b00      	cmp	r3, #0
 800b278:	d011      	beq.n	800b29e <UART_RxISR_16BIT_FIFOEN+0xce>
 800b27a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b27e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b282:	2b00      	cmp	r3, #0
 800b284:	d00b      	beq.n	800b29e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2201      	movs	r2, #1
 800b28c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b294:	f043 0201 	orr.w	r2, r3, #1
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b29e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2a2:	f003 0302 	and.w	r3, r3, #2
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d011      	beq.n	800b2ce <UART_RxISR_16BIT_FIFOEN+0xfe>
 800b2aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2ae:	f003 0301 	and.w	r3, r3, #1
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	2202      	movs	r2, #2
 800b2bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2c4:	f043 0204 	orr.w	r2, r3, #4
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b2ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b2d2:	f003 0304 	and.w	r3, r3, #4
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d011      	beq.n	800b2fe <UART_RxISR_16BIT_FIFOEN+0x12e>
 800b2da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b2de:	f003 0301 	and.w	r3, r3, #1
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d00b      	beq.n	800b2fe <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	2204      	movs	r2, #4
 800b2ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b2f4:	f043 0202 	orr.w	r2, r3, #2
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b304:	2b00      	cmp	r3, #0
 800b306:	d006      	beq.n	800b316 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f7fe fd5b 	bl	8009dc4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b31c:	b29b      	uxth	r3, r3
 800b31e:	2b00      	cmp	r3, #0
 800b320:	f040 80a4 	bne.w	800b46c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b32c:	e853 3f00 	ldrex	r3, [r3]
 800b330:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b332:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	461a      	mov	r2, r3
 800b342:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b34a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b34e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b352:	e841 2300 	strex	r3, r2, [r1]
 800b356:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b358:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1e2      	bne.n	800b324 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	3308      	adds	r3, #8
 800b364:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b366:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b368:	e853 3f00 	ldrex	r3, [r3]
 800b36c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b36e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b370:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b374:	f023 0301 	bic.w	r3, r3, #1
 800b378:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	3308      	adds	r3, #8
 800b382:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800b386:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b388:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b38c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e1      	bne.n	800b35e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	2220      	movs	r2, #32
 800b39e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	671a      	str	r2, [r3, #112]	; 0x70

#if defined(LPUART1)
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a5f      	ldr	r2, [pc, #380]	; (800b530 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d021      	beq.n	800b3fc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	685b      	ldr	r3, [r3, #4]
 800b3be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d01a      	beq.n	800b3fc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3ce:	e853 3f00 	ldrex	r3, [r3]
 800b3d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b3d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b3da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b3e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b3ea:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b3ee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b3f0:	e841 2300 	strex	r3, r2, [r1]
 800b3f4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b3f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1e4      	bne.n	800b3c6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
        }
#endif /* LPUART1 */

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b400:	2b01      	cmp	r3, #1
 800b402:	d130      	bne.n	800b466 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2200      	movs	r2, #0
 800b408:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b412:	e853 3f00 	ldrex	r3, [r3]
 800b416:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41a:	f023 0310 	bic.w	r3, r3, #16
 800b41e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	461a      	mov	r2, r3
 800b428:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b42c:	647b      	str	r3, [r7, #68]	; 0x44
 800b42e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b430:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b432:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b434:	e841 2300 	strex	r3, r2, [r1]
 800b438:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b43a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1e4      	bne.n	800b40a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	69db      	ldr	r3, [r3, #28]
 800b446:	f003 0310 	and.w	r3, r3, #16
 800b44a:	2b10      	cmp	r3, #16
 800b44c:	d103      	bne.n	800b456 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	2210      	movs	r2, #16
 800b454:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b45c:	4619      	mov	r1, r3
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f7fe fcba 	bl	8009dd8 <HAL_UARTEx_RxEventCallback>
 800b464:	e002      	b.n	800b46c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800b466:	6878      	ldr	r0, [r7, #4]
 800b468:	f7f7 fa12 	bl	8002890 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b46c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800b470:	2b00      	cmp	r3, #0
 800b472:	d006      	beq.n	800b482 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800b474:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b478:	f003 0320 	and.w	r3, r3, #32
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	f47f aecb 	bne.w	800b218 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b488:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800b48c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800b490:	2b00      	cmp	r3, #0
 800b492:	d049      	beq.n	800b528 <UART_RxISR_16BIT_FIFOEN+0x358>
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b49a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d242      	bcs.n	800b528 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	3308      	adds	r3, #8
 800b4a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ac:	e853 3f00 	ldrex	r3, [r3]
 800b4b0:	623b      	str	r3, [r7, #32]
   return(result);
 800b4b2:	6a3b      	ldr	r3, [r7, #32]
 800b4b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b4b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	3308      	adds	r3, #8
 800b4c2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800b4c6:	633a      	str	r2, [r7, #48]	; 0x30
 800b4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b4cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4ce:	e841 2300 	strex	r3, r2, [r1]
 800b4d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d1e3      	bne.n	800b4a2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	4a15      	ldr	r2, [pc, #84]	; (800b534 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800b4de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	e853 3f00 	ldrex	r3, [r3]
 800b4ec:	60fb      	str	r3, [r7, #12]
   return(result);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	f043 0320 	orr.w	r3, r3, #32
 800b4f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	461a      	mov	r2, r3
 800b4fe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b502:	61fb      	str	r3, [r7, #28]
 800b504:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b506:	69b9      	ldr	r1, [r7, #24]
 800b508:	69fa      	ldr	r2, [r7, #28]
 800b50a:	e841 2300 	strex	r3, r2, [r1]
 800b50e:	617b      	str	r3, [r7, #20]
   return(result);
 800b510:	697b      	ldr	r3, [r7, #20]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d1e4      	bne.n	800b4e0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b516:	e007      	b.n	800b528 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	699a      	ldr	r2, [r3, #24]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f042 0208 	orr.w	r2, r2, #8
 800b526:	619a      	str	r2, [r3, #24]
}
 800b528:	bf00      	nop
 800b52a:	37b8      	adds	r7, #184	; 0xb8
 800b52c:	46bd      	mov	sp, r7
 800b52e:	bd80      	pop	{r7, pc}
 800b530:	40008000 	.word	0x40008000
 800b534:	0800acb9 	.word	0x0800acb9

0800b538 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b538:	b480      	push	{r7}
 800b53a:	b083      	sub	sp, #12
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b540:	bf00      	nop
 800b542:	370c      	adds	r7, #12
 800b544:	46bd      	mov	sp, r7
 800b546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54a:	4770      	bx	lr

0800b54c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800b54c:	b480      	push	{r7}
 800b54e:	b083      	sub	sp, #12
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800b554:	bf00      	nop
 800b556:	370c      	adds	r7, #12
 800b558:	46bd      	mov	sp, r7
 800b55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b55e:	4770      	bx	lr

0800b560 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800b560:	b480      	push	{r7}
 800b562:	b083      	sub	sp, #12
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800b568:	bf00      	nop
 800b56a:	370c      	adds	r7, #12
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b582:	2b01      	cmp	r3, #1
 800b584:	d101      	bne.n	800b58a <HAL_UARTEx_DisableFifoMode+0x16>
 800b586:	2302      	movs	r3, #2
 800b588:	e027      	b.n	800b5da <HAL_UARTEx_DisableFifoMode+0x66>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	2201      	movs	r2, #1
 800b58e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	2224      	movs	r2, #36	; 0x24
 800b596:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f022 0201 	bic.w	r2, r2, #1
 800b5b0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b5b8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2200      	movs	r2, #0
 800b5be:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2220      	movs	r2, #32
 800b5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr

0800b5e6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b5e6:	b580      	push	{r7, lr}
 800b5e8:	b084      	sub	sp, #16
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	d101      	bne.n	800b5fe <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b5fa:	2302      	movs	r3, #2
 800b5fc:	e02d      	b.n	800b65a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	2201      	movs	r2, #1
 800b602:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2224      	movs	r2, #36	; 0x24
 800b60a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	681a      	ldr	r2, [r3, #0]
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	f022 0201 	bic.w	r2, r2, #1
 800b624:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	689b      	ldr	r3, [r3, #8]
 800b62c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	683a      	ldr	r2, [r7, #0]
 800b636:	430a      	orrs	r2, r1
 800b638:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 f850 	bl	800b6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	68fa      	ldr	r2, [r7, #12]
 800b646:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2220      	movs	r2, #32
 800b64c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2200      	movs	r2, #0
 800b654:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b658:	2300      	movs	r3, #0
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b662:	b580      	push	{r7, lr}
 800b664:	b084      	sub	sp, #16
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b672:	2b01      	cmp	r3, #1
 800b674:	d101      	bne.n	800b67a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b676:	2302      	movs	r3, #2
 800b678:	e02d      	b.n	800b6d6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2201      	movs	r2, #1
 800b67e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	2224      	movs	r2, #36	; 0x24
 800b686:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	681a      	ldr	r2, [r3, #0]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 0201 	bic.w	r2, r2, #1
 800b6a0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	689b      	ldr	r3, [r3, #8]
 800b6a8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	683a      	ldr	r2, [r7, #0]
 800b6b2:	430a      	orrs	r2, r1
 800b6b4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b6b6:	6878      	ldr	r0, [r7, #4]
 800b6b8:	f000 f812 	bl	800b6e0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	68fa      	ldr	r2, [r7, #12]
 800b6c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2220      	movs	r2, #32
 800b6c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
	...

0800b6e0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b085      	sub	sp, #20
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d108      	bne.n	800b702 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b700:	e031      	b.n	800b766 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b702:	2308      	movs	r3, #8
 800b704:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b706:	2308      	movs	r3, #8
 800b708:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	689b      	ldr	r3, [r3, #8]
 800b710:	0e5b      	lsrs	r3, r3, #25
 800b712:	b2db      	uxtb	r3, r3
 800b714:	f003 0307 	and.w	r3, r3, #7
 800b718:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	689b      	ldr	r3, [r3, #8]
 800b720:	0f5b      	lsrs	r3, r3, #29
 800b722:	b2db      	uxtb	r3, r3
 800b724:	f003 0307 	and.w	r3, r3, #7
 800b728:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b72a:	7bbb      	ldrb	r3, [r7, #14]
 800b72c:	7b3a      	ldrb	r2, [r7, #12]
 800b72e:	4911      	ldr	r1, [pc, #68]	; (800b774 <UARTEx_SetNbDataToProcess+0x94>)
 800b730:	5c8a      	ldrb	r2, [r1, r2]
 800b732:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b736:	7b3a      	ldrb	r2, [r7, #12]
 800b738:	490f      	ldr	r1, [pc, #60]	; (800b778 <UARTEx_SetNbDataToProcess+0x98>)
 800b73a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b73c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b740:	b29a      	uxth	r2, r3
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b748:	7bfb      	ldrb	r3, [r7, #15]
 800b74a:	7b7a      	ldrb	r2, [r7, #13]
 800b74c:	4909      	ldr	r1, [pc, #36]	; (800b774 <UARTEx_SetNbDataToProcess+0x94>)
 800b74e:	5c8a      	ldrb	r2, [r1, r2]
 800b750:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b754:	7b7a      	ldrb	r2, [r7, #13]
 800b756:	4908      	ldr	r1, [pc, #32]	; (800b778 <UARTEx_SetNbDataToProcess+0x98>)
 800b758:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b75a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b75e:	b29a      	uxth	r2, r3
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b766:	bf00      	nop
 800b768:	3714      	adds	r7, #20
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr
 800b772:	bf00      	nop
 800b774:	08013050 	.word	0x08013050
 800b778:	08013058 	.word	0x08013058

0800b77c <aci_gap_set_non_discoverable>:
 */

#include "ble_gap_aci.h"

tBleStatus aci_gap_set_non_discoverable( void )
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b088      	sub	sp, #32
 800b780:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800b782:	2300      	movs	r3, #0
 800b784:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b786:	f107 0308 	add.w	r3, r7, #8
 800b78a:	2218      	movs	r2, #24
 800b78c:	2100      	movs	r1, #0
 800b78e:	4618      	mov	r0, r3
 800b790:	f001 fc9c 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800b794:	233f      	movs	r3, #63	; 0x3f
 800b796:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x081;
 800b798:	2381      	movs	r3, #129	; 0x81
 800b79a:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800b79c:	1dfb      	adds	r3, r7, #7
 800b79e:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800b7a0:	2301      	movs	r3, #1
 800b7a2:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b7a4:	f107 0308 	add.w	r3, r7, #8
 800b7a8:	2100      	movs	r1, #0
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f001 fb4c 	bl	800ce48 <hci_send_req>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	da01      	bge.n	800b7ba <aci_gap_set_non_discoverable+0x3e>
    return BLE_STATUS_TIMEOUT;
 800b7b6:	23ff      	movs	r3, #255	; 0xff
 800b7b8:	e000      	b.n	800b7bc <aci_gap_set_non_discoverable+0x40>
  return status;
 800b7ba:	79fb      	ldrb	r3, [r7, #7]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3720      	adds	r7, #32
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}

0800b7c4 <aci_gap_set_discoverable>:
                                     const uint8_t* Local_Name,
                                     uint8_t Service_Uuid_length,
                                     const uint8_t* Service_Uuid_List,
                                     uint16_t Conn_Interval_Min,
                                     uint16_t Conn_Interval_Max )
{
 800b7c4:	b5b0      	push	{r4, r5, r7, lr}
 800b7c6:	b0ce      	sub	sp, #312	; 0x138
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	4605      	mov	r5, r0
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	4610      	mov	r0, r2
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b7d6:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800b7da:	462a      	mov	r2, r5
 800b7dc:	701a      	strb	r2, [r3, #0]
 800b7de:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b7e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800b7e6:	4622      	mov	r2, r4
 800b7e8:	801a      	strh	r2, [r3, #0]
 800b7ea:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b7ee:	f5a3 739b 	sub.w	r3, r3, #310	; 0x136
 800b7f2:	4602      	mov	r2, r0
 800b7f4:	801a      	strh	r2, [r3, #0]
 800b7f6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b7fa:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800b7fe:	460a      	mov	r2, r1
 800b800:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_discoverable_cp0 *cp0 = (aci_gap_set_discoverable_cp0*)(cmd_buffer);
 800b802:	f107 0310 	add.w	r3, r7, #16
 800b806:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gap_set_discoverable_cp1 *cp1 = (aci_gap_set_discoverable_cp1*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)));
 800b80a:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800b80e:	3308      	adds	r3, #8
 800b810:	f107 0210 	add.w	r2, r7, #16
 800b814:	4413      	add	r3, r2
 800b816:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gap_set_discoverable_cp2 *cp2 = (aci_gap_set_discoverable_cp2*)(cmd_buffer + 1 + 2 + 2 + 1 + 1 + 1 + Local_Name_Length * (sizeof(uint8_t)) + 1 + Service_Uuid_length * (sizeof(uint8_t)));
 800b81a:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b81e:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b822:	4413      	add	r3, r2
 800b824:	3309      	adds	r3, #9
 800b826:	f107 0210 	add.w	r2, r7, #16
 800b82a:	4413      	add	r3, r2
 800b82c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b830:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b834:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b838:	2200      	movs	r2, #0
 800b83a:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b83c:	2300      	movs	r3, #0
 800b83e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Type = Advertising_Type;
 800b842:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b846:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b84a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800b84e:	7812      	ldrb	r2, [r2, #0]
 800b850:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b852:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b856:	3301      	adds	r3, #1
 800b858:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Min = Advertising_Interval_Min;
 800b85c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b860:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b864:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800b868:	8812      	ldrh	r2, [r2, #0]
 800b86a:	f8a3 2001 	strh.w	r2, [r3, #1]
  index_input += 2;
 800b86e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b872:	3302      	adds	r3, #2
 800b874:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Interval_Max = Advertising_Interval_Max;
 800b878:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b87c:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b880:	f5a2 729b 	sub.w	r2, r2, #310	; 0x136
 800b884:	8812      	ldrh	r2, [r2, #0]
 800b886:	f8a3 2003 	strh.w	r2, [r3, #3]
  index_input += 2;
 800b88a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b88e:	3302      	adds	r3, #2
 800b890:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Own_Address_Type = Own_Address_Type;
 800b894:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b898:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800b89c:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800b8a0:	7812      	ldrb	r2, [r2, #0]
 800b8a2:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800b8a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Advertising_Filter_Policy = Advertising_Filter_Policy;
 800b8ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8b2:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800b8b6:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800b8b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8bc:	3301      	adds	r3, #1
 800b8be:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Local_Name_Length = Local_Name_Length;
 800b8c2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8c6:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b8ca:	71da      	strb	r2, [r3, #7]
  index_input += 1;
 800b8cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    Osal_MemCpy( (void*)&cp0->Local_Name, (const void*)Local_Name, Local_Name_Length );
 800b8d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800b8da:	3308      	adds	r3, #8
 800b8dc:	f897 214c 	ldrb.w	r2, [r7, #332]	; 0x14c
 800b8e0:	f8d7 1150 	ldr.w	r1, [r7, #336]	; 0x150
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	f001 fbe1 	bl	800d0ac <Osal_MemCpy>
    index_input += Local_Name_Length;
 800b8ea:	f897 314c 	ldrb.w	r3, [r7, #332]	; 0x14c
 800b8ee:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Uuid_length = Service_Uuid_length;
 800b8f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b8fc:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b900:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800b902:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b906:	3301      	adds	r3, #1
 800b908:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    Osal_MemCpy( (void*)&cp1->Service_Uuid_List, (const void*)Service_Uuid_List, Service_Uuid_length );
 800b90c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800b910:	3301      	adds	r3, #1
 800b912:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800b916:	f8d7 1158 	ldr.w	r1, [r7, #344]	; 0x158
 800b91a:	4618      	mov	r0, r3
 800b91c:	f001 fbc6 	bl	800d0ac <Osal_MemCpy>
    index_input += Service_Uuid_length;
 800b920:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
 800b924:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800b928:	4413      	add	r3, r2
 800b92a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Min = Conn_Interval_Min;
 800b92e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b932:	f8b7 215c 	ldrh.w	r2, [r7, #348]	; 0x15c
 800b936:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800b938:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b93c:	3302      	adds	r3, #2
 800b93e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp2->Conn_Interval_Max = Conn_Interval_Max;
 800b942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b946:	f8b7 2160 	ldrh.w	r2, [r7, #352]	; 0x160
 800b94a:	805a      	strh	r2, [r3, #2]
    }
    index_input += 2;
 800b94c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b950:	3302      	adds	r3, #2
 800b952:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b956:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b95a:	2218      	movs	r2, #24
 800b95c:	2100      	movs	r1, #0
 800b95e:	4618      	mov	r0, r3
 800b960:	f001 fbb4 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800b964:	233f      	movs	r3, #63	; 0x3f
 800b966:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x083;
 800b96a:	2383      	movs	r3, #131	; 0x83
 800b96c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800b970:	f107 0310 	add.w	r3, r7, #16
 800b974:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800b978:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b97c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800b980:	f107 030f 	add.w	r3, r7, #15
 800b984:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800b988:	2301      	movs	r3, #1
 800b98a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800b98e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800b992:	2100      	movs	r1, #0
 800b994:	4618      	mov	r0, r3
 800b996:	f001 fa57 	bl	800ce48 <hci_send_req>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	da01      	bge.n	800b9a4 <aci_gap_set_discoverable+0x1e0>
    return BLE_STATUS_TIMEOUT;
 800b9a0:	23ff      	movs	r3, #255	; 0xff
 800b9a2:	e004      	b.n	800b9ae <aci_gap_set_discoverable+0x1ea>
  return status;
 800b9a4:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800b9a8:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b9ac:	781b      	ldrb	r3, [r3, #0]
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	bdb0      	pop	{r4, r5, r7, pc}

0800b9b8 <aci_gap_set_io_capability>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_set_io_capability( uint8_t IO_Capability )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b0cc      	sub	sp, #304	; 0x130
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	4602      	mov	r2, r0
 800b9c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9c4:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800b9c8:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_io_capability_cp0 *cp0 = (aci_gap_set_io_capability_cp0*)(cmd_buffer);
 800b9ca:	f107 0310 	add.w	r3, r7, #16
 800b9ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800b9d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9d6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800b9da:	2200      	movs	r2, #0
 800b9dc:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->IO_Capability = IO_Capability;
 800b9e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b9ec:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800b9f0:	7812      	ldrb	r2, [r2, #0]
 800b9f2:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800b9f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9f8:	3301      	adds	r3, #1
 800b9fa:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800b9fe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ba02:	2218      	movs	r2, #24
 800ba04:	2100      	movs	r1, #0
 800ba06:	4618      	mov	r0, r3
 800ba08:	f001 fb60 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800ba0c:	233f      	movs	r3, #63	; 0x3f
 800ba0e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x085;
 800ba12:	2385      	movs	r3, #133	; 0x85
 800ba14:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ba18:	f107 0310 	add.w	r3, r7, #16
 800ba1c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ba20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba24:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ba28:	f107 030f 	add.w	r3, r7, #15
 800ba2c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ba30:	2301      	movs	r3, #1
 800ba32:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ba36:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 fa03 	bl	800ce48 <hci_send_req>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	da01      	bge.n	800ba4c <aci_gap_set_io_capability+0x94>
    return BLE_STATUS_TIMEOUT;
 800ba48:	23ff      	movs	r3, #255	; 0xff
 800ba4a:	e004      	b.n	800ba56 <aci_gap_set_io_capability+0x9e>
  return status;
 800ba4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba50:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ba54:	781b      	ldrb	r3, [r3, #0]
}
 800ba56:	4618      	mov	r0, r3
 800ba58:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	bd80      	pop	{r7, pc}

0800ba60 <aci_gap_set_authentication_requirement>:
                                                   uint8_t Min_Encryption_Key_Size,
                                                   uint8_t Max_Encryption_Key_Size,
                                                   uint8_t Use_Fixed_Pin,
                                                   uint32_t Fixed_Pin,
                                                   uint8_t Identity_Address_Type )
{
 800ba60:	b5b0      	push	{r4, r5, r7, lr}
 800ba62:	b0cc      	sub	sp, #304	; 0x130
 800ba64:	af00      	add	r7, sp, #0
 800ba66:	4605      	mov	r5, r0
 800ba68:	460c      	mov	r4, r1
 800ba6a:	4610      	mov	r0, r2
 800ba6c:	4619      	mov	r1, r3
 800ba6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba72:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800ba76:	462a      	mov	r2, r5
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba7e:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800ba82:	4622      	mov	r2, r4
 800ba84:	701a      	strb	r2, [r3, #0]
 800ba86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba8a:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800ba8e:	4602      	mov	r2, r0
 800ba90:	701a      	strb	r2, [r3, #0]
 800ba92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba9a:	460a      	mov	r2, r1
 800ba9c:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_set_authentication_requirement_cp0 *cp0 = (aci_gap_set_authentication_requirement_cp0*)(cmd_buffer);
 800ba9e:	f107 0310 	add.w	r3, r7, #16
 800baa2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800baa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baaa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800baae:	2200      	movs	r2, #0
 800bab0:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bab2:	2300      	movs	r3, #0
 800bab4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Bonding_Mode = Bonding_Mode;
 800bab8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800babc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bac0:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800bac4:	7812      	ldrb	r2, [r2, #0]
 800bac6:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bac8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bacc:	3301      	adds	r3, #1
 800bace:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->MITM_Mode = MITM_Mode;
 800bad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bada:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800bade:	7812      	ldrb	r2, [r2, #0]
 800bae0:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bae2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bae6:	3301      	adds	r3, #1
 800bae8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->SC_Support = SC_Support;
 800baec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800baf0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800baf4:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800baf8:	7812      	ldrb	r2, [r2, #0]
 800bafa:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800bafc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb00:	3301      	adds	r3, #1
 800bb02:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->KeyPress_Notification_Support = KeyPress_Notification_Support;
 800bb06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb0a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bb0e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800bb12:	7812      	ldrb	r2, [r2, #0]
 800bb14:	70da      	strb	r2, [r3, #3]
  index_input += 1;
 800bb16:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Min_Encryption_Key_Size = Min_Encryption_Key_Size;
 800bb20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb24:	f897 2140 	ldrb.w	r2, [r7, #320]	; 0x140
 800bb28:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800bb2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb2e:	3301      	adds	r3, #1
 800bb30:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Max_Encryption_Key_Size = Max_Encryption_Key_Size;
 800bb34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb38:	f897 2144 	ldrb.w	r2, [r7, #324]	; 0x144
 800bb3c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800bb3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb42:	3301      	adds	r3, #1
 800bb44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Use_Fixed_Pin = Use_Fixed_Pin;
 800bb48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb4c:	f897 2148 	ldrb.w	r2, [r7, #328]	; 0x148
 800bb50:	719a      	strb	r2, [r3, #6]
  index_input += 1;
 800bb52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb56:	3301      	adds	r3, #1
 800bb58:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Fixed_Pin = Fixed_Pin;
 800bb5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb60:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800bb64:	f8c3 2007 	str.w	r2, [r3, #7]
  index_input += 4;
 800bb68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Identity_Address_Type = Identity_Address_Type;
 800bb72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb76:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800bb7a:	72da      	strb	r2, [r3, #11]
  index_input += 1;
 800bb7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb80:	3301      	adds	r3, #1
 800bb82:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bb86:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bb8a:	2218      	movs	r2, #24
 800bb8c:	2100      	movs	r1, #0
 800bb8e:	4618      	mov	r0, r3
 800bb90:	f001 fa9c 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800bb94:	233f      	movs	r3, #63	; 0x3f
 800bb96:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x086;
 800bb9a:	2386      	movs	r3, #134	; 0x86
 800bb9c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bba0:	f107 0310 	add.w	r3, r7, #16
 800bba4:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bba8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bbac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bbb0:	f107 030f 	add.w	r3, r7, #15
 800bbb4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bbbe:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f001 f93f 	bl	800ce48 <hci_send_req>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	da01      	bge.n	800bbd4 <aci_gap_set_authentication_requirement+0x174>
    return BLE_STATUS_TIMEOUT;
 800bbd0:	23ff      	movs	r3, #255	; 0xff
 800bbd2:	e004      	b.n	800bbde <aci_gap_set_authentication_requirement+0x17e>
  return status;
 800bbd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbd8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bbdc:	781b      	ldrb	r3, [r3, #0]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bdb0      	pop	{r4, r5, r7, pc}

0800bbe8 <aci_gap_pass_key_resp>:
  return status;
}

tBleStatus aci_gap_pass_key_resp( uint16_t Connection_Handle,
                                  uint32_t Pass_Key )
{
 800bbe8:	b580      	push	{r7, lr}
 800bbea:	b0cc      	sub	sp, #304	; 0x130
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	4602      	mov	r2, r0
 800bbf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbf8:	6019      	str	r1, [r3, #0]
 800bbfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbfe:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800bc02:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_pass_key_resp_cp0 *cp0 = (aci_gap_pass_key_resp_cp0*)(cmd_buffer);
 800bc04:	f107 0310 	add.w	r3, r7, #16
 800bc08:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bc0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bc10:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bc14:	2200      	movs	r2, #0
 800bc16:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800bc1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc22:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bc26:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800bc2a:	8812      	ldrh	r2, [r2, #0]
 800bc2c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bc2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc32:	3302      	adds	r3, #2
 800bc34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Pass_Key = Pass_Key;
 800bc38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc3c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bc40:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800bc44:	6812      	ldr	r2, [r2, #0]
 800bc46:	f8c3 2002 	str.w	r2, [r3, #2]
  index_input += 4;
 800bc4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc4e:	3304      	adds	r3, #4
 800bc50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bc54:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bc58:	2218      	movs	r2, #24
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f001 fa35 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800bc62:	233f      	movs	r3, #63	; 0x3f
 800bc64:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x088;
 800bc68:	2388      	movs	r3, #136	; 0x88
 800bc6a:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bc6e:	f107 0310 	add.w	r3, r7, #16
 800bc72:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bc76:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bc7a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bc7e:	f107 030f 	add.w	r3, r7, #15
 800bc82:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bc86:	2301      	movs	r3, #1
 800bc88:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bc8c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bc90:	2100      	movs	r1, #0
 800bc92:	4618      	mov	r0, r3
 800bc94:	f001 f8d8 	bl	800ce48 <hci_send_req>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	da01      	bge.n	800bca2 <aci_gap_pass_key_resp+0xba>
    return BLE_STATUS_TIMEOUT;
 800bc9e:	23ff      	movs	r3, #255	; 0xff
 800bca0:	e004      	b.n	800bcac <aci_gap_pass_key_resp+0xc4>
  return status;
 800bca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bca6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bcaa:	781b      	ldrb	r3, [r3, #0]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}

0800bcb6 <aci_gap_init>:
                         uint8_t privacy_enabled,
                         uint8_t device_name_char_len,
                         uint16_t* Service_Handle,
                         uint16_t* Dev_Name_Char_Handle,
                         uint16_t* Appearance_Char_Handle )
{
 800bcb6:	b590      	push	{r4, r7, lr}
 800bcb8:	b0cd      	sub	sp, #308	; 0x134
 800bcba:	af00      	add	r7, sp, #0
 800bcbc:	4604      	mov	r4, r0
 800bcbe:	4608      	mov	r0, r1
 800bcc0:	4611      	mov	r1, r2
 800bcc2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bcc6:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcd0:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	701a      	strb	r2, [r3, #0]
 800bcd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcdc:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800bce0:	4602      	mov	r2, r0
 800bce2:	701a      	strb	r2, [r3, #0]
 800bce4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bce8:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800bcec:	460a      	mov	r2, r1
 800bcee:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_init_cp0 *cp0 = (aci_gap_init_cp0*)(cmd_buffer);
 800bcf0:	f107 0310 	add.w	r3, r7, #16
 800bcf4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gap_init_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800bcf8:	f107 0308 	add.w	r3, r7, #8
 800bcfc:	2207      	movs	r2, #7
 800bcfe:	2100      	movs	r1, #0
 800bd00:	4618      	mov	r0, r3
 800bd02:	f001 f9e3 	bl	800d0cc <Osal_MemSet>
  int index_input = 0;
 800bd06:	2300      	movs	r3, #0
 800bd08:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Role = Role;
 800bd0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd10:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bd14:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800bd18:	7812      	ldrb	r2, [r2, #0]
 800bd1a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800bd1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd20:	3301      	adds	r3, #1
 800bd22:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->privacy_enabled = privacy_enabled;
 800bd26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd2a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bd2e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800bd32:	7812      	ldrb	r2, [r2, #0]
 800bd34:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800bd36:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd3a:	3301      	adds	r3, #1
 800bd3c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->device_name_char_len = device_name_char_len;
 800bd40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd44:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bd48:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800bd4c:	7812      	ldrb	r2, [r2, #0]
 800bd4e:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800bd50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd54:	3301      	adds	r3, #1
 800bd56:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bd5a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bd5e:	2218      	movs	r2, #24
 800bd60:	2100      	movs	r1, #0
 800bd62:	4618      	mov	r0, r3
 800bd64:	f001 f9b2 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800bd68:	233f      	movs	r3, #63	; 0x3f
 800bd6a:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08a;
 800bd6e:	238a      	movs	r3, #138	; 0x8a
 800bd70:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bd74:	f107 0310 	add.w	r3, r7, #16
 800bd78:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bd7c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd80:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800bd84:	f107 0308 	add.w	r3, r7, #8
 800bd88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800bd8c:	2307      	movs	r3, #7
 800bd8e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bd92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bd96:	2100      	movs	r1, #0
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f001 f855 	bl	800ce48 <hci_send_req>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	da01      	bge.n	800bda8 <aci_gap_init+0xf2>
    return BLE_STATUS_TIMEOUT;
 800bda4:	23ff      	movs	r3, #255	; 0xff
 800bda6:	e02e      	b.n	800be06 <aci_gap_init+0x150>
  if ( resp.Status )
 800bda8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdac:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d005      	beq.n	800bdc2 <aci_gap_init+0x10c>
    return resp.Status;
 800bdb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	e021      	b.n	800be06 <aci_gap_init+0x150>
  *Service_Handle = resp.Service_Handle;
 800bdc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdc6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bdca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800bdce:	b29a      	uxth	r2, r3
 800bdd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	801a      	strh	r2, [r3, #0]
  *Dev_Name_Char_Handle = resp.Dev_Name_Char_Handle;
 800bddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bde0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bde4:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bdee:	801a      	strh	r2, [r3, #0]
  *Appearance_Char_Handle = resp.Appearance_Char_Handle;
 800bdf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bdf4:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800bdf8:	f8b3 3005 	ldrh.w	r3, [r3, #5]
 800bdfc:	b29a      	uxth	r2, r3
 800bdfe:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800be02:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800be04:	2300      	movs	r3, #0
}
 800be06:	4618      	mov	r0, r3
 800be08:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd90      	pop	{r4, r7, pc}

0800be10 <aci_gap_update_adv_data>:
  return status;
}

tBleStatus aci_gap_update_adv_data( uint8_t AdvDataLen,
                                    const uint8_t* AdvData )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b0cc      	sub	sp, #304	; 0x130
 800be14:	af00      	add	r7, sp, #0
 800be16:	4602      	mov	r2, r0
 800be18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be20:	6019      	str	r1, [r3, #0]
 800be22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be26:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800be2a:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_update_adv_data_cp0 *cp0 = (aci_gap_update_adv_data_cp0*)(cmd_buffer);
 800be2c:	f107 0310 	add.w	r3, r7, #16
 800be30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800be34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be38:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800be40:	2300      	movs	r3, #0
 800be42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->AdvDataLen = AdvDataLen;
 800be46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be4a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800be4e:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800be52:	7812      	ldrb	r2, [r2, #0]
 800be54:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800be56:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be5a:	3301      	adds	r3, #1
 800be5c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->AdvData, (const void*)AdvData, AdvDataLen );
 800be60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800be64:	1c58      	adds	r0, r3, #1
 800be66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be6a:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800be6e:	781a      	ldrb	r2, [r3, #0]
 800be70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800be78:	6819      	ldr	r1, [r3, #0]
 800be7a:	f001 f917 	bl	800d0ac <Osal_MemCpy>
  index_input += AdvDataLen;
 800be7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800be82:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800be86:	781b      	ldrb	r3, [r3, #0]
 800be88:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800be8c:	4413      	add	r3, r2
 800be8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800be92:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800be96:	2218      	movs	r2, #24
 800be98:	2100      	movs	r1, #0
 800be9a:	4618      	mov	r0, r3
 800be9c:	f001 f916 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800bea0:	233f      	movs	r3, #63	; 0x3f
 800bea2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x08e;
 800bea6:	238e      	movs	r3, #142	; 0x8e
 800bea8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800beac:	f107 0310 	add.w	r3, r7, #16
 800beb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800beb4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800beb8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bebc:	f107 030f 	add.w	r3, r7, #15
 800bec0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bec4:	2301      	movs	r3, #1
 800bec6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800beca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bece:	2100      	movs	r1, #0
 800bed0:	4618      	mov	r0, r3
 800bed2:	f000 ffb9 	bl	800ce48 <hci_send_req>
 800bed6:	4603      	mov	r3, r0
 800bed8:	2b00      	cmp	r3, #0
 800beda:	da01      	bge.n	800bee0 <aci_gap_update_adv_data+0xd0>
    return BLE_STATUS_TIMEOUT;
 800bedc:	23ff      	movs	r3, #255	; 0xff
 800bede:	e004      	b.n	800beea <aci_gap_update_adv_data+0xda>
  return status;
 800bee0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bee4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bee8:	781b      	ldrb	r3, [r3, #0]
}
 800beea:	4618      	mov	r0, r3
 800beec:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd80      	pop	{r7, pc}

0800bef4 <aci_gap_configure_filter_accept_list>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_configure_filter_accept_list( void )
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b088      	sub	sp, #32
 800bef8:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800befe:	f107 0308 	add.w	r3, r7, #8
 800bf02:	2218      	movs	r2, #24
 800bf04:	2100      	movs	r1, #0
 800bf06:	4618      	mov	r0, r3
 800bf08:	f001 f8e0 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800bf0c:	233f      	movs	r3, #63	; 0x3f
 800bf0e:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x092;
 800bf10:	2392      	movs	r3, #146	; 0x92
 800bf12:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800bf14:	1dfb      	adds	r3, r7, #7
 800bf16:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800bf18:	2301      	movs	r3, #1
 800bf1a:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bf1c:	f107 0308 	add.w	r3, r7, #8
 800bf20:	2100      	movs	r1, #0
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 ff90 	bl	800ce48 <hci_send_req>
 800bf28:	4603      	mov	r3, r0
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	da01      	bge.n	800bf32 <aci_gap_configure_filter_accept_list+0x3e>
    return BLE_STATUS_TIMEOUT;
 800bf2e:	23ff      	movs	r3, #255	; 0xff
 800bf30:	e000      	b.n	800bf34 <aci_gap_configure_filter_accept_list+0x40>
  return status;
 800bf32:	79fb      	ldrb	r3, [r7, #7]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3720      	adds	r7, #32
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <aci_gap_allow_rebond>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus aci_gap_allow_rebond( uint16_t Connection_Handle )
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b0cc      	sub	sp, #304	; 0x130
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	4602      	mov	r2, r0
 800bf44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf48:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800bf4c:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_allow_rebond_cp0 *cp0 = (aci_gap_allow_rebond_cp0*)(cmd_buffer);
 800bf4e:	f107 0310 	add.w	r3, r7, #16
 800bf52:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800bf56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bf5a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bf5e:	2200      	movs	r2, #0
 800bf60:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800bf68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bf6c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800bf70:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800bf74:	8812      	ldrh	r2, [r2, #0]
 800bf76:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800bf78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bf7c:	3302      	adds	r3, #2
 800bf7e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800bf82:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bf86:	2218      	movs	r2, #24
 800bf88:	2100      	movs	r1, #0
 800bf8a:	4618      	mov	r0, r3
 800bf8c:	f001 f89e 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800bf90:	233f      	movs	r3, #63	; 0x3f
 800bf92:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x095;
 800bf96:	2395      	movs	r3, #149	; 0x95
 800bf98:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800bf9c:	f107 0310 	add.w	r3, r7, #16
 800bfa0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800bfa4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bfa8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800bfac:	f107 030f 	add.w	r3, r7, #15
 800bfb0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800bfba:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f000 ff41 	bl	800ce48 <hci_send_req>
 800bfc6:	4603      	mov	r3, r0
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	da01      	bge.n	800bfd0 <aci_gap_allow_rebond+0x94>
    return BLE_STATUS_TIMEOUT;
 800bfcc:	23ff      	movs	r3, #255	; 0xff
 800bfce:	e004      	b.n	800bfda <aci_gap_allow_rebond+0x9e>
  return status;
 800bfd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bfd4:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800bfd8:	781b      	ldrb	r3, [r3, #0]
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	bd80      	pop	{r7, pc}

0800bfe4 <aci_gap_numeric_comparison_value_confirm_yesno>:
  return status;
}

tBleStatus aci_gap_numeric_comparison_value_confirm_yesno( uint16_t Connection_Handle,
                                                           uint8_t Confirm_Yes_No )
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b0cc      	sub	sp, #304	; 0x130
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	4602      	mov	r2, r0
 800bfec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bff0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800bff4:	801a      	strh	r2, [r3, #0]
 800bff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bffa:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800bffe:	460a      	mov	r2, r1
 800c000:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gap_numeric_comparison_value_confirm_yesno_cp0 *cp0 = (aci_gap_numeric_comparison_value_confirm_yesno_cp0*)(cmd_buffer);
 800c002:	f107 0310 	add.w	r3, r7, #16
 800c006:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c00a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c00e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c012:	2200      	movs	r2, #0
 800c014:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c016:	2300      	movs	r3, #0
 800c018:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800c01c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c020:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c024:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c028:	8812      	ldrh	r2, [r2, #0]
 800c02a:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c02c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c030:	3302      	adds	r3, #2
 800c032:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Confirm_Yes_No = Confirm_Yes_No;
 800c036:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c03a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c03e:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800c042:	7812      	ldrb	r2, [r2, #0]
 800c044:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c046:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c04a:	3301      	adds	r3, #1
 800c04c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c050:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c054:	2218      	movs	r2, #24
 800c056:	2100      	movs	r1, #0
 800c058:	4618      	mov	r0, r3
 800c05a:	f001 f837 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c05e:	233f      	movs	r3, #63	; 0x3f
 800c060:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x0a5;
 800c064:	23a5      	movs	r3, #165	; 0xa5
 800c066:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c06a:	f107 0310 	add.w	r3, r7, #16
 800c06e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c072:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c076:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c07a:	f107 030f 	add.w	r3, r7, #15
 800c07e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c082:	2301      	movs	r3, #1
 800c084:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c088:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c08c:	2100      	movs	r1, #0
 800c08e:	4618      	mov	r0, r3
 800c090:	f000 feda 	bl	800ce48 <hci_send_req>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	da01      	bge.n	800c09e <aci_gap_numeric_comparison_value_confirm_yesno+0xba>
    return BLE_STATUS_TIMEOUT;
 800c09a:	23ff      	movs	r3, #255	; 0xff
 800c09c:	e004      	b.n	800c0a8 <aci_gap_numeric_comparison_value_confirm_yesno+0xc4>
  return status;
 800c09e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c0a2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c0a6:	781b      	ldrb	r3, [r3, #0]
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <aci_gatt_init>:
 */

#include "ble_gatt_aci.h"

tBleStatus aci_gatt_init( void )
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b088      	sub	sp, #32
 800c0b6:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c0bc:	f107 0308 	add.w	r3, r7, #8
 800c0c0:	2218      	movs	r2, #24
 800c0c2:	2100      	movs	r1, #0
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	f001 f801 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c0ca:	233f      	movs	r3, #63	; 0x3f
 800c0cc:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x101;
 800c0ce:	f240 1301 	movw	r3, #257	; 0x101
 800c0d2:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c0d4:	1dfb      	adds	r3, r7, #7
 800c0d6:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c0d8:	2301      	movs	r3, #1
 800c0da:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c0dc:	f107 0308 	add.w	r3, r7, #8
 800c0e0:	2100      	movs	r1, #0
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f000 feb0 	bl	800ce48 <hci_send_req>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	da01      	bge.n	800c0f2 <aci_gatt_init+0x40>
    return BLE_STATUS_TIMEOUT;
 800c0ee:	23ff      	movs	r3, #255	; 0xff
 800c0f0:	e000      	b.n	800c0f4 <aci_gatt_init+0x42>
  return status;
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3720      	adds	r7, #32
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <aci_gatt_add_service>:
tBleStatus aci_gatt_add_service( uint8_t Service_UUID_Type,
                                 const Service_UUID_t* Service_UUID,
                                 uint8_t Service_Type,
                                 uint8_t Max_Attribute_Records,
                                 uint16_t* Service_Handle )
{
 800c0fc:	b590      	push	{r4, r7, lr}
 800c0fe:	b0cf      	sub	sp, #316	; 0x13c
 800c100:	af00      	add	r7, sp, #0
 800c102:	4604      	mov	r4, r0
 800c104:	f507 709c 	add.w	r0, r7, #312	; 0x138
 800c108:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 800c10c:	6001      	str	r1, [r0, #0]
 800c10e:	4610      	mov	r0, r2
 800c110:	4619      	mov	r1, r3
 800c112:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c116:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c11a:	4622      	mov	r2, r4
 800c11c:	701a      	strb	r2, [r3, #0]
 800c11e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c122:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c126:	4602      	mov	r2, r0
 800c128:	701a      	strb	r2, [r3, #0]
 800c12a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c12e:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800c132:	460a      	mov	r2, r1
 800c134:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_service_cp0 *cp0 = (aci_gatt_add_service_cp0*)(cmd_buffer);
 800c136:	f107 0310 	add.w	r3, r7, #16
 800c13a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  aci_gatt_add_service_cp1 *cp1 = (aci_gatt_add_service_cp1*)(cmd_buffer + 1 + (Service_UUID_Type == 1 ? 2 : (Service_UUID_Type == 2 ? 16 : 0)));
 800c13e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c142:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d00a      	beq.n	800c162 <aci_gatt_add_service+0x66>
 800c14c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c150:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	2b02      	cmp	r3, #2
 800c158:	d101      	bne.n	800c15e <aci_gatt_add_service+0x62>
 800c15a:	2311      	movs	r3, #17
 800c15c:	e002      	b.n	800c164 <aci_gatt_add_service+0x68>
 800c15e:	2301      	movs	r3, #1
 800c160:	e000      	b.n	800c164 <aci_gatt_add_service+0x68>
 800c162:	2303      	movs	r3, #3
 800c164:	f107 0210 	add.w	r2, r7, #16
 800c168:	4413      	add	r3, r2
 800c16a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  aci_gatt_add_service_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c16e:	f107 030c 	add.w	r3, r7, #12
 800c172:	2203      	movs	r2, #3
 800c174:	2100      	movs	r1, #0
 800c176:	4618      	mov	r0, r3
 800c178:	f000 ffa8 	bl	800d0cc <Osal_MemSet>
  int index_input = 0;
 800c17c:	2300      	movs	r3, #0
 800c17e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_UUID_Type = Service_UUID_Type;
 800c182:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c186:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c18a:	f2a2 1231 	subw	r2, r2, #305	; 0x131
 800c18e:	7812      	ldrb	r2, [r2, #0]
 800c190:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c196:	3301      	adds	r3, #1
 800c198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Service_UUID_Type )
 800c19c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c1a0:	f2a3 1331 	subw	r3, r3, #305	; 0x131
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	2b01      	cmp	r3, #1
 800c1a8:	d002      	beq.n	800c1b0 <aci_gatt_add_service+0xb4>
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d004      	beq.n	800c1b8 <aci_gatt_add_service+0xbc>
 800c1ae:	e007      	b.n	800c1c0 <aci_gatt_add_service+0xc4>
    {
      case 1: size = 2; break;
 800c1b0:	2302      	movs	r3, #2
 800c1b2:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c1b6:	e005      	b.n	800c1c4 <aci_gatt_add_service+0xc8>
      case 2: size = 16; break;
 800c1b8:	2310      	movs	r3, #16
 800c1ba:	f887 3137 	strb.w	r3, [r7, #311]	; 0x137
 800c1be:	e001      	b.n	800c1c4 <aci_gatt_add_service+0xc8>
      default: return BLE_STATUS_ERROR;
 800c1c0:	2397      	movs	r3, #151	; 0x97
 800c1c2:	e06c      	b.n	800c29e <aci_gatt_add_service+0x1a2>
    }
    Osal_MemCpy( (void*)&cp0->Service_UUID, (const void*)Service_UUID, size );
 800c1c4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c1c8:	1c58      	adds	r0, r3, #1
 800c1ca:	f897 2137 	ldrb.w	r2, [r7, #311]	; 0x137
 800c1ce:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c1d2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c1d6:	6819      	ldr	r1, [r3, #0]
 800c1d8:	f000 ff68 	bl	800d0ac <Osal_MemCpy>
    index_input += size;
 800c1dc:	f897 3137 	ldrb.w	r3, [r7, #311]	; 0x137
 800c1e0:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Service_Type = Service_Type;
 800c1ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c1ee:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c1f2:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800c1f6:	7812      	ldrb	r2, [r2, #0]
 800c1f8:	701a      	strb	r2, [r3, #0]
    }
    index_input += 1;
 800c1fa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c1fe:	3301      	adds	r3, #1
 800c200:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    {
      cp1->Max_Attribute_Records = Max_Attribute_Records;
 800c204:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c208:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c20c:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800c210:	7812      	ldrb	r2, [r2, #0]
 800c212:	705a      	strb	r2, [r3, #1]
    }
    index_input += 1;
 800c214:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c218:	3301      	adds	r3, #1
 800c21a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c21e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c222:	2218      	movs	r2, #24
 800c224:	2100      	movs	r1, #0
 800c226:	4618      	mov	r0, r3
 800c228:	f000 ff50 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c22c:	233f      	movs	r3, #63	; 0x3f
 800c22e:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x102;
 800c232:	f44f 7381 	mov.w	r3, #258	; 0x102
 800c236:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c23a:	f107 0310 	add.w	r3, r7, #16
 800c23e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c242:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c246:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &resp;
 800c24a:	f107 030c 	add.w	r3, r7, #12
 800c24e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = sizeof(resp);
 800c252:	2303      	movs	r3, #3
 800c254:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c258:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c25c:	2100      	movs	r1, #0
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 fdf2 	bl	800ce48 <hci_send_req>
 800c264:	4603      	mov	r3, r0
 800c266:	2b00      	cmp	r3, #0
 800c268:	da01      	bge.n	800c26e <aci_gatt_add_service+0x172>
    return BLE_STATUS_TIMEOUT;
 800c26a:	23ff      	movs	r3, #255	; 0xff
 800c26c:	e017      	b.n	800c29e <aci_gatt_add_service+0x1a2>
  if ( resp.Status )
 800c26e:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c272:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d005      	beq.n	800c288 <aci_gatt_add_service+0x18c>
    return resp.Status;
 800c27c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c280:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	e00a      	b.n	800c29e <aci_gatt_add_service+0x1a2>
  *Service_Handle = resp.Service_Handle;
 800c288:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c28c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c290:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c294:	b29a      	uxth	r2, r3
 800c296:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800c29a:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c29c:	2300      	movs	r3, #0
}
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd90      	pop	{r4, r7, pc}

0800c2a8 <aci_gatt_add_char>:
                              uint8_t Security_Permissions,
                              uint8_t GATT_Evt_Mask,
                              uint8_t Enc_Key_Size,
                              uint8_t Is_Variable,
                              uint16_t* Char_Handle )
{
 800c2a8:	b590      	push	{r4, r7, lr}
 800c2aa:	b0d1      	sub	sp, #324	; 0x144
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4604      	mov	r4, r0
 800c2b0:	4608      	mov	r0, r1
 800c2b2:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 800c2b6:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800c2ba:	600a      	str	r2, [r1, #0]
 800c2bc:	4619      	mov	r1, r3
 800c2be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c2c2:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
 800c2c6:	4622      	mov	r2, r4
 800c2c8:	801a      	strh	r2, [r3, #0]
 800c2ca:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c2ce:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800c2d2:	4602      	mov	r2, r0
 800c2d4:	701a      	strb	r2, [r3, #0]
 800c2d6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c2da:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800c2de:	460a      	mov	r2, r1
 800c2e0:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_add_char_cp0 *cp0 = (aci_gatt_add_char_cp0*)(cmd_buffer);
 800c2e2:	f107 0318 	add.w	r3, r7, #24
 800c2e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  aci_gatt_add_char_cp1 *cp1 = (aci_gatt_add_char_cp1*)(cmd_buffer + 2 + 1 + (Char_UUID_Type == 1 ? 2 : (Char_UUID_Type == 2 ? 16 : 0)));
 800c2ea:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c2ee:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d00a      	beq.n	800c30e <aci_gatt_add_char+0x66>
 800c2f8:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c2fc:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800c300:	781b      	ldrb	r3, [r3, #0]
 800c302:	2b02      	cmp	r3, #2
 800c304:	d101      	bne.n	800c30a <aci_gatt_add_char+0x62>
 800c306:	2313      	movs	r3, #19
 800c308:	e002      	b.n	800c310 <aci_gatt_add_char+0x68>
 800c30a:	2303      	movs	r3, #3
 800c30c:	e000      	b.n	800c310 <aci_gatt_add_char+0x68>
 800c30e:	2305      	movs	r3, #5
 800c310:	f107 0218 	add.w	r2, r7, #24
 800c314:	4413      	add	r3, r2
 800c316:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  aci_gatt_add_char_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c31a:	f107 0314 	add.w	r3, r7, #20
 800c31e:	2203      	movs	r2, #3
 800c320:	2100      	movs	r1, #0
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fed2 	bl	800d0cc <Osal_MemSet>
  int index_input = 0;
 800c328:	2300      	movs	r3, #0
 800c32a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Service_Handle = Service_Handle;
 800c32e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c332:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800c336:	f5a2 7299 	sub.w	r2, r2, #306	; 0x132
 800c33a:	8812      	ldrh	r2, [r2, #0]
 800c33c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c33e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c342:	3302      	adds	r3, #2
 800c344:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Char_UUID_Type = Char_UUID_Type;
 800c348:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c34c:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800c350:	f2a2 1233 	subw	r2, r2, #307	; 0x133
 800c354:	7812      	ldrb	r2, [r2, #0]
 800c356:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800c358:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c35c:	3301      	adds	r3, #1
 800c35e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  /* var_len_data input */
  {
    uint8_t size;
    switch ( Char_UUID_Type )
 800c362:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c366:	f2a3 1333 	subw	r3, r3, #307	; 0x133
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d002      	beq.n	800c376 <aci_gatt_add_char+0xce>
 800c370:	2b02      	cmp	r3, #2
 800c372:	d004      	beq.n	800c37e <aci_gatt_add_char+0xd6>
 800c374:	e007      	b.n	800c386 <aci_gatt_add_char+0xde>
    {
      case 1: size = 2; break;
 800c376:	2302      	movs	r3, #2
 800c378:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c37c:	e005      	b.n	800c38a <aci_gatt_add_char+0xe2>
      case 2: size = 16; break;
 800c37e:	2310      	movs	r3, #16
 800c380:	f887 313f 	strb.w	r3, [r7, #319]	; 0x13f
 800c384:	e001      	b.n	800c38a <aci_gatt_add_char+0xe2>
      default: return BLE_STATUS_ERROR;
 800c386:	2397      	movs	r3, #151	; 0x97
 800c388:	e091      	b.n	800c4ae <aci_gatt_add_char+0x206>
    }
    Osal_MemCpy( (void*)&cp0->Char_UUID, (const void*)Char_UUID, size );
 800c38a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800c38e:	1cd8      	adds	r0, r3, #3
 800c390:	f897 213f 	ldrb.w	r2, [r7, #319]	; 0x13f
 800c394:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c398:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800c39c:	6819      	ldr	r1, [r3, #0]
 800c39e:	f000 fe85 	bl	800d0ac <Osal_MemCpy>
    index_input += size;
 800c3a2:	f897 313f 	ldrb.w	r3, [r7, #319]	; 0x13f
 800c3a6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Value_Length = Char_Value_Length;
 800c3b0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c3b4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 800c3b8:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800c3bc:	8812      	ldrh	r2, [r2, #0]
 800c3be:	801a      	strh	r2, [r3, #0]
    }
    index_input += 2;
 800c3c0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c3c4:	3302      	adds	r3, #2
 800c3c6:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Char_Properties = Char_Properties;
 800c3ca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c3ce:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
 800c3d2:	709a      	strb	r2, [r3, #2]
    }
    index_input += 1;
 800c3d4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c3d8:	3301      	adds	r3, #1
 800c3da:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Security_Permissions = Security_Permissions;
 800c3de:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c3e2:	f897 2154 	ldrb.w	r2, [r7, #340]	; 0x154
 800c3e6:	70da      	strb	r2, [r3, #3]
    }
    index_input += 1;
 800c3e8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->GATT_Evt_Mask = GATT_Evt_Mask;
 800c3f2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c3f6:	f897 2158 	ldrb.w	r2, [r7, #344]	; 0x158
 800c3fa:	711a      	strb	r2, [r3, #4]
    }
    index_input += 1;
 800c3fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c400:	3301      	adds	r3, #1
 800c402:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Enc_Key_Size = Enc_Key_Size;
 800c406:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c40a:	f897 215c 	ldrb.w	r2, [r7, #348]	; 0x15c
 800c40e:	715a      	strb	r2, [r3, #5]
    }
    index_input += 1;
 800c410:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c414:	3301      	adds	r3, #1
 800c416:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    {
      cp1->Is_Variable = Is_Variable;
 800c41a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c41e:	f897 2160 	ldrb.w	r2, [r7, #352]	; 0x160
 800c422:	719a      	strb	r2, [r3, #6]
    }
    index_input += 1;
 800c424:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c428:	3301      	adds	r3, #1
 800c42a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  }
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c42e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c432:	2218      	movs	r2, #24
 800c434:	2100      	movs	r1, #0
 800c436:	4618      	mov	r0, r3
 800c438:	f000 fe48 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c43c:	233f      	movs	r3, #63	; 0x3f
 800c43e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x104;
 800c442:	f44f 7382 	mov.w	r3, #260	; 0x104
 800c446:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800c44a:	f107 0318 	add.w	r3, r7, #24
 800c44e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800c452:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c456:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800c45a:	f107 0314 	add.w	r3, r7, #20
 800c45e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800c462:	2303      	movs	r3, #3
 800c464:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c468:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c46c:	2100      	movs	r1, #0
 800c46e:	4618      	mov	r0, r3
 800c470:	f000 fcea 	bl	800ce48 <hci_send_req>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	da01      	bge.n	800c47e <aci_gatt_add_char+0x1d6>
    return BLE_STATUS_TIMEOUT;
 800c47a:	23ff      	movs	r3, #255	; 0xff
 800c47c:	e017      	b.n	800c4ae <aci_gatt_add_char+0x206>
  if ( resp.Status )
 800c47e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c482:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c486:	781b      	ldrb	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <aci_gatt_add_char+0x1f0>
    return resp.Status;
 800c48c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c490:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	e00a      	b.n	800c4ae <aci_gatt_add_char+0x206>
  *Char_Handle = resp.Char_Handle;
 800c498:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800c49c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c4a0:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800c4aa:	801a      	strh	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c4ac:	2300      	movs	r3, #0
}
 800c4ae:	4618      	mov	r0, r3
 800c4b0:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd90      	pop	{r4, r7, pc}

0800c4b8 <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value( uint16_t Service_Handle,
                                       uint16_t Char_Handle,
                                       uint8_t Val_Offset,
                                       uint8_t Char_Value_Length,
                                       const uint8_t* Char_Value )
{
 800c4b8:	b5b0      	push	{r4, r5, r7, lr}
 800c4ba:	b0cc      	sub	sp, #304	; 0x130
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	4605      	mov	r5, r0
 800c4c0:	460c      	mov	r4, r1
 800c4c2:	4610      	mov	r0, r2
 800c4c4:	4619      	mov	r1, r3
 800c4c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4ca:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c4ce:	462a      	mov	r2, r5
 800c4d0:	801a      	strh	r2, [r3, #0]
 800c4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800c4da:	4622      	mov	r2, r4
 800c4dc:	801a      	strh	r2, [r3, #0]
 800c4de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4e2:	f2a3 132d 	subw	r3, r3, #301	; 0x12d
 800c4e6:	4602      	mov	r2, r0
 800c4e8:	701a      	strb	r2, [r3, #0]
 800c4ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c4ee:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800c4f2:	460a      	mov	r2, r1
 800c4f4:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_gatt_update_char_value_cp0 *cp0 = (aci_gatt_update_char_value_cp0*)(cmd_buffer);
 800c4f6:	f107 0310 	add.w	r3, r7, #16
 800c4fa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c4fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c502:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c506:	2200      	movs	r2, #0
 800c508:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Service_Handle = Service_Handle;
 800c510:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c514:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c518:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c51c:	8812      	ldrh	r2, [r2, #0]
 800c51e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c520:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c524:	3302      	adds	r3, #2
 800c526:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Handle = Char_Handle;
 800c52a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c52e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c532:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800c536:	8812      	ldrh	r2, [r2, #0]
 800c538:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800c53a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c53e:	3302      	adds	r3, #2
 800c540:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Val_Offset = Val_Offset;
 800c544:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c548:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c54c:	f2a2 122d 	subw	r2, r2, #301	; 0x12d
 800c550:	7812      	ldrb	r2, [r2, #0]
 800c552:	711a      	strb	r2, [r3, #4]
  index_input += 1;
 800c554:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c558:	3301      	adds	r3, #1
 800c55a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Char_Value_Length = Char_Value_Length;
 800c55e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c562:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c566:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800c56a:	7812      	ldrb	r2, [r2, #0]
 800c56c:	715a      	strb	r2, [r3, #5]
  index_input += 1;
 800c56e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c572:	3301      	adds	r3, #1
 800c574:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Char_Value, (const void*)Char_Value, Char_Value_Length );
 800c578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c57c:	1d98      	adds	r0, r3, #6
 800c57e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c582:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	461a      	mov	r2, r3
 800c58a:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800c58e:	f000 fd8d 	bl	800d0ac <Osal_MemCpy>
  index_input += Char_Value_Length;
 800c592:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c596:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800c59a:	781b      	ldrb	r3, [r3, #0]
 800c59c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c5a6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c5aa:	2218      	movs	r2, #24
 800c5ac:	2100      	movs	r1, #0
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fd8c 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c5b4:	233f      	movs	r3, #63	; 0x3f
 800c5b6:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x106;
 800c5ba:	f44f 7383 	mov.w	r3, #262	; 0x106
 800c5be:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c5c2:	f107 0310 	add.w	r3, r7, #16
 800c5c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c5ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c5ce:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c5d2:	f107 030f 	add.w	r3, r7, #15
 800c5d6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c5e0:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f000 fc2e 	bl	800ce48 <hci_send_req>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	da01      	bge.n	800c5f6 <aci_gatt_update_char_value+0x13e>
    return BLE_STATUS_TIMEOUT;
 800c5f2:	23ff      	movs	r3, #255	; 0xff
 800c5f4:	e004      	b.n	800c600 <aci_gatt_update_char_value+0x148>
  return status;
 800c5f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c5fa:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c5fe:	781b      	ldrb	r3, [r3, #0]
}
 800c600:	4618      	mov	r0, r3
 800c602:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c606:	46bd      	mov	sp, r7
 800c608:	bdb0      	pop	{r4, r5, r7, pc}

0800c60a <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data( uint8_t Offset,
                                      uint8_t Length,
                                      const uint8_t* Value )
{
 800c60a:	b580      	push	{r7, lr}
 800c60c:	b0cc      	sub	sp, #304	; 0x130
 800c60e:	af00      	add	r7, sp, #0
 800c610:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c614:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c618:	601a      	str	r2, [r3, #0]
 800c61a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c61e:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c622:	4602      	mov	r2, r0
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c62a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c62e:	460a      	mov	r2, r1
 800c630:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_write_config_data_cp0 *cp0 = (aci_hal_write_config_data_cp0*)(cmd_buffer);
 800c632:	f107 0310 	add.w	r3, r7, #16
 800c636:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c63a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c63e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c642:	2200      	movs	r2, #0
 800c644:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Offset = Offset;
 800c64c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c650:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c654:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c658:	7812      	ldrb	r2, [r2, #0]
 800c65a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c65c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c660:	3301      	adds	r3, #1
 800c662:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Length = Length;
 800c666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c66a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c66e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c672:	7812      	ldrb	r2, [r2, #0]
 800c674:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c676:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c67a:	3301      	adds	r3, #1
 800c67c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemCpy( (void*)&cp0->Value, (const void*)Value, Length );
 800c680:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c684:	1c98      	adds	r0, r3, #2
 800c686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c68a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c68e:	781a      	ldrb	r2, [r3, #0]
 800c690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c698:	6819      	ldr	r1, [r3, #0]
 800c69a:	f000 fd07 	bl	800d0ac <Osal_MemCpy>
  index_input += Length;
 800c69e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c6a2:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800c6ac:	4413      	add	r3, r2
 800c6ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c6b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6b6:	2218      	movs	r2, #24
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f000 fd06 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c6c0:	233f      	movs	r3, #63	; 0x3f
 800c6c2:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00c;
 800c6c6:	230c      	movs	r3, #12
 800c6c8:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c6cc:	f107 0310 	add.w	r3, r7, #16
 800c6d0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c6d4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c6d8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c6dc:	f107 030f 	add.w	r3, r7, #15
 800c6e0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c6ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c6ee:	2100      	movs	r1, #0
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	f000 fba9 	bl	800ce48 <hci_send_req>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	da01      	bge.n	800c700 <aci_hal_write_config_data+0xf6>
    return BLE_STATUS_TIMEOUT;
 800c6fc:	23ff      	movs	r3, #255	; 0xff
 800c6fe:	e004      	b.n	800c70a <aci_hal_write_config_data+0x100>
  return status;
 800c700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c704:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c708:	781b      	ldrb	r3, [r3, #0]
}
 800c70a:	4618      	mov	r0, r3
 800c70c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <aci_hal_set_tx_power_level>:
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_tx_power_level( uint8_t En_High_Power,
                                       uint8_t PA_Level )
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b0cc      	sub	sp, #304	; 0x130
 800c718:	af00      	add	r7, sp, #0
 800c71a:	4602      	mov	r2, r0
 800c71c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c720:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c724:	701a      	strb	r2, [r3, #0]
 800c726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c72a:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c72e:	460a      	mov	r2, r1
 800c730:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_tx_power_level_cp0 *cp0 = (aci_hal_set_tx_power_level_cp0*)(cmd_buffer);
 800c732:	f107 0310 	add.w	r3, r7, #16
 800c736:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c73a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c73e:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c742:	2200      	movs	r2, #0
 800c744:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c746:	2300      	movs	r3, #0
 800c748:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->En_High_Power = En_High_Power;
 800c74c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c750:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c754:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800c758:	7812      	ldrb	r2, [r2, #0]
 800c75a:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800c75c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c760:	3301      	adds	r3, #1
 800c762:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->PA_Level = PA_Level;
 800c766:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c76a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c76e:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c772:	7812      	ldrb	r2, [r2, #0]
 800c774:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800c776:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c77a:	3301      	adds	r3, #1
 800c77c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c780:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c784:	2218      	movs	r2, #24
 800c786:	2100      	movs	r1, #0
 800c788:	4618      	mov	r0, r3
 800c78a:	f000 fc9f 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c78e:	233f      	movs	r3, #63	; 0x3f
 800c790:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x00f;
 800c794:	230f      	movs	r3, #15
 800c796:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c79a:	f107 0310 	add.w	r3, r7, #16
 800c79e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c7a2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c7a6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c7aa:	f107 030f 	add.w	r3, r7, #15
 800c7ae:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c7b8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c7bc:	2100      	movs	r1, #0
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 fb42 	bl	800ce48 <hci_send_req>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da01      	bge.n	800c7ce <aci_hal_set_tx_power_level+0xba>
    return BLE_STATUS_TIMEOUT;
 800c7ca:	23ff      	movs	r3, #255	; 0xff
 800c7cc:	e004      	b.n	800c7d8 <aci_hal_set_tx_power_level+0xc4>
  return status;
 800c7ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7d2:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c7d6:	781b      	ldrb	r3, [r3, #0]
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}

0800c7e2 <aci_hal_set_radio_activity_mask>:
  Osal_MemCpy( (void*)Link_Connection_Handle, (const void*)resp.Link_Connection_Handle, 16 );
  return BLE_STATUS_SUCCESS;
}

tBleStatus aci_hal_set_radio_activity_mask( uint16_t Radio_Activity_Mask )
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b0cc      	sub	sp, #304	; 0x130
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c7ee:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c7f2:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_hal_set_radio_activity_mask_cp0 *cp0 = (aci_hal_set_radio_activity_mask_cp0*)(cmd_buffer);
 800c7f4:	f107 0310 	add.w	r3, r7, #16
 800c7f8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800c7fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c800:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c804:	2200      	movs	r2, #0
 800c806:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800c808:	2300      	movs	r3, #0
 800c80a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Radio_Activity_Mask = Radio_Activity_Mask;
 800c80e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800c812:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800c816:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c81a:	8812      	ldrh	r2, [r2, #0]
 800c81c:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c81e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c822:	3302      	adds	r3, #2
 800c824:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c828:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c82c:	2218      	movs	r2, #24
 800c82e:	2100      	movs	r1, #0
 800c830:	4618      	mov	r0, r3
 800c832:	f000 fc4b 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800c836:	233f      	movs	r3, #63	; 0x3f
 800c838:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x018;
 800c83c:	2318      	movs	r3, #24
 800c83e:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800c842:	f107 0310 	add.w	r3, r7, #16
 800c846:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800c84a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800c84e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800c852:	f107 030f 	add.w	r3, r7, #15
 800c856:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800c85a:	2301      	movs	r3, #1
 800c85c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c860:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800c864:	2100      	movs	r1, #0
 800c866:	4618      	mov	r0, r3
 800c868:	f000 faee 	bl	800ce48 <hci_send_req>
 800c86c:	4603      	mov	r3, r0
 800c86e:	2b00      	cmp	r3, #0
 800c870:	da01      	bge.n	800c876 <aci_hal_set_radio_activity_mask+0x94>
    return BLE_STATUS_TIMEOUT;
 800c872:	23ff      	movs	r3, #255	; 0xff
 800c874:	e004      	b.n	800c880 <aci_hal_set_radio_activity_mask+0x9e>
  return status;
 800c876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c87a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800c87e:	781b      	ldrb	r3, [r3, #0]
}
 800c880:	4618      	mov	r0, r3
 800c882:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <hci_reset>:
    return BLE_STATUS_TIMEOUT;
  return status;
}

tBleStatus hci_reset( void )
{
 800c88a:	b580      	push	{r7, lr}
 800c88c:	b088      	sub	sp, #32
 800c88e:	af00      	add	r7, sp, #0
  struct hci_request rq;
  tBleStatus status = 0;
 800c890:	2300      	movs	r3, #0
 800c892:	71fb      	strb	r3, [r7, #7]
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c894:	f107 0308 	add.w	r3, r7, #8
 800c898:	2218      	movs	r2, #24
 800c89a:	2100      	movs	r1, #0
 800c89c:	4618      	mov	r0, r3
 800c89e:	f000 fc15 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x03;
 800c8a2:	2303      	movs	r3, #3
 800c8a4:	813b      	strh	r3, [r7, #8]
  rq.ocf = 0x003;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	817b      	strh	r3, [r7, #10]
  rq.rparam = &status;
 800c8aa:	1dfb      	adds	r3, r7, #7
 800c8ac:	61bb      	str	r3, [r7, #24]
  rq.rlen = 1;
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	61fb      	str	r3, [r7, #28]
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c8b2:	f107 0308 	add.w	r3, r7, #8
 800c8b6:	2100      	movs	r1, #0
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f000 fac5 	bl	800ce48 <hci_send_req>
 800c8be:	4603      	mov	r3, r0
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	da01      	bge.n	800c8c8 <hci_reset+0x3e>
    return BLE_STATUS_TIMEOUT;
 800c8c4:	23ff      	movs	r3, #255	; 0xff
 800c8c6:	e000      	b.n	800c8ca <hci_reset+0x40>
  return status;
 800c8c8:	79fb      	ldrb	r3, [r7, #7]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3720      	adds	r7, #32
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <hci_le_read_phy>:
}

tBleStatus hci_le_read_phy( uint16_t Connection_Handle,
                            uint8_t* TX_PHY,
                            uint8_t* RX_PHY )
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b0ce      	sub	sp, #312	; 0x138
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c8dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c8e0:	6019      	str	r1, [r3, #0]
 800c8e2:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c8e6:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c8ea:	601a      	str	r2, [r3, #0]
 800c8ec:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c8f0:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_read_phy_cp0 *cp0 = (hci_le_read_phy_cp0*)(cmd_buffer);
 800c8f8:	f107 0318 	add.w	r3, r7, #24
 800c8fc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  hci_le_read_phy_rp0 resp;
  Osal_MemSet( &resp, 0, sizeof(resp) );
 800c900:	f107 0310 	add.w	r3, r7, #16
 800c904:	2205      	movs	r2, #5
 800c906:	2100      	movs	r1, #0
 800c908:	4618      	mov	r0, r3
 800c90a:	f000 fbdf 	bl	800d0cc <Osal_MemSet>
  int index_input = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  cp0->Connection_Handle = Connection_Handle;
 800c914:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800c918:	f507 729c 	add.w	r2, r7, #312	; 0x138
 800c91c:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800c920:	8812      	ldrh	r2, [r2, #0]
 800c922:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800c924:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c928:	3302      	adds	r3, #2
 800c92a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800c92e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c932:	2218      	movs	r2, #24
 800c934:	2100      	movs	r1, #0
 800c936:	4618      	mov	r0, r3
 800c938:	f000 fbc8 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x08;
 800c93c:	2308      	movs	r3, #8
 800c93e:	f8a7 3118 	strh.w	r3, [r7, #280]	; 0x118
  rq.ocf = 0x030;
 800c942:	2330      	movs	r3, #48	; 0x30
 800c944:	f8a7 311a 	strh.w	r3, [r7, #282]	; 0x11a
  rq.cparam = cmd_buffer;
 800c948:	f107 0318 	add.w	r3, r7, #24
 800c94c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.clen = index_input;
 800c950:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800c954:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  rq.rparam = &resp;
 800c958:	f107 0310 	add.w	r3, r7, #16
 800c95c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  rq.rlen = sizeof(resp);
 800c960:	2305      	movs	r3, #5
 800c962:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if ( hci_send_req(&rq, FALSE) < 0 )
 800c966:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800c96a:	2100      	movs	r1, #0
 800c96c:	4618      	mov	r0, r3
 800c96e:	f000 fa6b 	bl	800ce48 <hci_send_req>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	da01      	bge.n	800c97c <hci_le_read_phy+0xaa>
    return BLE_STATUS_TIMEOUT;
 800c978:	23ff      	movs	r3, #255	; 0xff
 800c97a:	e023      	b.n	800c9c4 <hci_le_read_phy+0xf2>
  if ( resp.Status )
 800c97c:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c980:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c984:	781b      	ldrb	r3, [r3, #0]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d005      	beq.n	800c996 <hci_le_read_phy+0xc4>
    return resp.Status;
 800c98a:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c98e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	e016      	b.n	800c9c4 <hci_le_read_phy+0xf2>
  *TX_PHY = resp.TX_PHY;
 800c996:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c99a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c99e:	78da      	ldrb	r2, [r3, #3]
 800c9a0:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c9a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	701a      	strb	r2, [r3, #0]
  *RX_PHY = resp.RX_PHY;
 800c9ac:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c9b0:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800c9b4:	791a      	ldrb	r2, [r3, #4]
 800c9b6:	f507 739c 	add.w	r3, r7, #312	; 0x138
 800c9ba:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	701a      	strb	r2, [r3, #0]
  return BLE_STATUS_SUCCESS;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	f507 779c 	add.w	r7, r7, #312	; 0x138
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}

0800c9ce <hci_le_set_default_phy>:

tBleStatus hci_le_set_default_phy( uint8_t ALL_PHYS,
                                   uint8_t TX_PHYS,
                                   uint8_t RX_PHYS )
{
 800c9ce:	b590      	push	{r4, r7, lr}
 800c9d0:	b0cd      	sub	sp, #308	; 0x134
 800c9d2:	af00      	add	r7, sp, #0
 800c9d4:	4604      	mov	r4, r0
 800c9d6:	4608      	mov	r0, r1
 800c9d8:	4611      	mov	r1, r2
 800c9da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9de:	f2a3 1329 	subw	r3, r3, #297	; 0x129
 800c9e2:	4622      	mov	r2, r4
 800c9e4:	701a      	strb	r2, [r3, #0]
 800c9e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9ea:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800c9ee:	4602      	mov	r2, r0
 800c9f0:	701a      	strb	r2, [r3, #0]
 800c9f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800c9f6:	f2a3 132b 	subw	r3, r3, #299	; 0x12b
 800c9fa:	460a      	mov	r2, r1
 800c9fc:	701a      	strb	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  hci_le_set_default_phy_cp0 *cp0 = (hci_le_set_default_phy_cp0*)(cmd_buffer);
 800c9fe:	f107 0310 	add.w	r3, r7, #16
 800ca02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800ca06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ca0a:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800ca0e:	2200      	movs	r2, #0
 800ca10:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800ca12:	2300      	movs	r3, #0
 800ca14:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->ALL_PHYS = ALL_PHYS;
 800ca18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca1c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ca20:	f2a2 1229 	subw	r2, r2, #297	; 0x129
 800ca24:	7812      	ldrb	r2, [r2, #0]
 800ca26:	701a      	strb	r2, [r3, #0]
  index_input += 1;
 800ca28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca2c:	3301      	adds	r3, #1
 800ca2e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->TX_PHYS = TX_PHYS;
 800ca32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca36:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ca3a:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800ca3e:	7812      	ldrb	r2, [r2, #0]
 800ca40:	705a      	strb	r2, [r3, #1]
  index_input += 1;
 800ca42:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca46:	3301      	adds	r3, #1
 800ca48:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->RX_PHYS = RX_PHYS;
 800ca4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ca50:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800ca54:	f2a2 122b 	subw	r2, r2, #299	; 0x12b
 800ca58:	7812      	ldrb	r2, [r2, #0]
 800ca5a:	709a      	strb	r2, [r3, #2]
  index_input += 1;
 800ca5c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca60:	3301      	adds	r3, #1
 800ca62:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800ca66:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800ca6a:	2218      	movs	r2, #24
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	4618      	mov	r0, r3
 800ca70:	f000 fb2c 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x08;
 800ca74:	2308      	movs	r3, #8
 800ca76:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x031;
 800ca7a:	2331      	movs	r3, #49	; 0x31
 800ca7c:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.cparam = cmd_buffer;
 800ca80:	f107 0310 	add.w	r3, r7, #16
 800ca84:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800ca88:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ca8c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800ca90:	f107 030f 	add.w	r3, r7, #15
 800ca94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800ca98:	2301      	movs	r3, #1
 800ca9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800ca9e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800caa2:	2100      	movs	r1, #0
 800caa4:	4618      	mov	r0, r3
 800caa6:	f000 f9cf 	bl	800ce48 <hci_send_req>
 800caaa:	4603      	mov	r3, r0
 800caac:	2b00      	cmp	r3, #0
 800caae:	da01      	bge.n	800cab4 <hci_le_set_default_phy+0xe6>
    return BLE_STATUS_TIMEOUT;
 800cab0:	23ff      	movs	r3, #255	; 0xff
 800cab2:	e004      	b.n	800cabe <hci_le_set_default_phy+0xf0>
  return status;
 800cab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cab8:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cabc:	781b      	ldrb	r3, [r3, #0]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	f507 779a 	add.w	r7, r7, #308	; 0x134
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd90      	pop	{r4, r7, pc}

0800cac8 <aci_l2cap_connection_parameter_update_req>:
tBleStatus aci_l2cap_connection_parameter_update_req( uint16_t Connection_Handle,
                                                      uint16_t Conn_Interval_Min,
                                                      uint16_t Conn_Interval_Max,
                                                      uint16_t Latency,
                                                      uint16_t Timeout_Multiplier )
{
 800cac8:	b5b0      	push	{r4, r5, r7, lr}
 800caca:	b0cc      	sub	sp, #304	; 0x130
 800cacc:	af00      	add	r7, sp, #0
 800cace:	4605      	mov	r5, r0
 800cad0:	460c      	mov	r4, r1
 800cad2:	4610      	mov	r0, r2
 800cad4:	4619      	mov	r1, r3
 800cad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cada:	f5a3 7395 	sub.w	r3, r3, #298	; 0x12a
 800cade:	462a      	mov	r2, r5
 800cae0:	801a      	strh	r2, [r3, #0]
 800cae2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cae6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800caea:	4622      	mov	r2, r4
 800caec:	801a      	strh	r2, [r3, #0]
 800caee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800caf2:	f5a3 7397 	sub.w	r3, r3, #302	; 0x12e
 800caf6:	4602      	mov	r2, r0
 800caf8:	801a      	strh	r2, [r3, #0]
 800cafa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cafe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800cb02:	460a      	mov	r2, r1
 800cb04:	801a      	strh	r2, [r3, #0]
  struct hci_request rq;
  uint8_t cmd_buffer[BLE_CMD_MAX_PARAM_LEN];
  aci_l2cap_connection_parameter_update_req_cp0 *cp0 = (aci_l2cap_connection_parameter_update_req_cp0*)(cmd_buffer);
 800cb06:	f107 0310 	add.w	r3, r7, #16
 800cb0a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  tBleStatus status = 0;
 800cb0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cb12:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cb16:	2200      	movs	r2, #0
 800cb18:	701a      	strb	r2, [r3, #0]
  int index_input = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Connection_Handle = Connection_Handle;
 800cb20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb24:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cb28:	f5a2 7295 	sub.w	r2, r2, #298	; 0x12a
 800cb2c:	8812      	ldrh	r2, [r2, #0]
 800cb2e:	801a      	strh	r2, [r3, #0]
  index_input += 2;
 800cb30:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb34:	3302      	adds	r3, #2
 800cb36:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Min = Conn_Interval_Min;
 800cb3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb3e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cb42:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800cb46:	8812      	ldrh	r2, [r2, #0]
 800cb48:	805a      	strh	r2, [r3, #2]
  index_input += 2;
 800cb4a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb4e:	3302      	adds	r3, #2
 800cb50:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Conn_Interval_Max = Conn_Interval_Max;
 800cb54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb58:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cb5c:	f5a2 7297 	sub.w	r2, r2, #302	; 0x12e
 800cb60:	8812      	ldrh	r2, [r2, #0]
 800cb62:	809a      	strh	r2, [r3, #4]
  index_input += 2;
 800cb64:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb68:	3302      	adds	r3, #2
 800cb6a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Latency = Latency;
 800cb6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb72:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800cb76:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 800cb7a:	8812      	ldrh	r2, [r2, #0]
 800cb7c:	80da      	strh	r2, [r3, #6]
  index_input += 2;
 800cb7e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb82:	3302      	adds	r3, #2
 800cb84:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  cp0->Timeout_Multiplier = Timeout_Multiplier;
 800cb88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800cb8c:	f8b7 2140 	ldrh.w	r2, [r7, #320]	; 0x140
 800cb90:	811a      	strh	r2, [r3, #8]
  index_input += 2;
 800cb92:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cb96:	3302      	adds	r3, #2
 800cb98:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  Osal_MemSet( &rq, 0, sizeof(rq) );
 800cb9c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cba0:	2218      	movs	r2, #24
 800cba2:	2100      	movs	r1, #0
 800cba4:	4618      	mov	r0, r3
 800cba6:	f000 fa91 	bl	800d0cc <Osal_MemSet>
  rq.ogf = 0x3f;
 800cbaa:	233f      	movs	r3, #63	; 0x3f
 800cbac:	f8a7 3110 	strh.w	r3, [r7, #272]	; 0x110
  rq.ocf = 0x181;
 800cbb0:	f240 1381 	movw	r3, #385	; 0x181
 800cbb4:	f8a7 3112 	strh.w	r3, [r7, #274]	; 0x112
  rq.event = 0x0F;
 800cbb8:	230f      	movs	r3, #15
 800cbba:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  rq.cparam = cmd_buffer;
 800cbbe:	f107 0310 	add.w	r3, r7, #16
 800cbc2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  rq.clen = index_input;
 800cbc6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800cbca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  rq.rparam = &status;
 800cbce:	f107 030f 	add.w	r3, r7, #15
 800cbd2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  rq.rlen = 1;
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  if ( hci_send_req(&rq, FALSE) < 0 )
 800cbdc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800cbe0:	2100      	movs	r1, #0
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f000 f930 	bl	800ce48 <hci_send_req>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	da01      	bge.n	800cbf2 <aci_l2cap_connection_parameter_update_req+0x12a>
    return BLE_STATUS_TIMEOUT;
 800cbee:	23ff      	movs	r3, #255	; 0xff
 800cbf0:	e004      	b.n	800cbfc <aci_l2cap_connection_parameter_update_req+0x134>
  return status;
 800cbf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800cbf6:	f2a3 1321 	subw	r3, r3, #289	; 0x121
 800cbfa:	781b      	ldrb	r3, [r3, #0]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800cc08 <DbgTrace_TxCpltCallback>:
 * @note   Indicate the end of the transmission of a DBG_TRACE trace buffer to DBG_TRACE USART. If queue
 *         contains new trace data to transmit, start a new transmission.
 * @retval None
 */
static void DbgTrace_TxCpltCallback(void)
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b086      	sub	sp, #24
 800cc0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cc0e:	f3ef 8310 	mrs	r3, PRIMASK
 800cc12:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc14:	68fb      	ldr	r3, [r7, #12]
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  uint8_t* buf;
  uint16_t bufSize;

  BACKUP_PRIMASK();
 800cc16:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800cc18:	b672      	cpsid	i
}
 800cc1a:	bf00      	nop

  DISABLE_IRQ();			/**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  /* Remove element just sent to UART */
  CircularQueue_Remove(&MsgDbgTraceQueue,&bufSize);
 800cc1c:	1cbb      	adds	r3, r7, #2
 800cc1e:	4619      	mov	r1, r3
 800cc20:	4812      	ldr	r0, [pc, #72]	; (800cc6c <DbgTrace_TxCpltCallback+0x64>)
 800cc22:	f001 f8fc 	bl	800de1e <CircularQueue_Remove>

  /* Sense if new data to be sent */
  buf=CircularQueue_Sense(&MsgDbgTraceQueue,&bufSize);
 800cc26:	1cbb      	adds	r3, r7, #2
 800cc28:	4619      	mov	r1, r3
 800cc2a:	4810      	ldr	r0, [pc, #64]	; (800cc6c <DbgTrace_TxCpltCallback+0x64>)
 800cc2c:	f001 f9e8 	bl	800e000 <CircularQueue_Sense>
 800cc30:	6138      	str	r0, [r7, #16]


  if ( buf != NULL) 
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00c      	beq.n	800cc52 <DbgTrace_TxCpltCallback+0x4a>
 800cc38:	697b      	ldr	r3, [r7, #20]
 800cc3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc3c:	68bb      	ldr	r3, [r7, #8]
 800cc3e:	f383 8810 	msr	PRIMASK, r3
}
 800cc42:	bf00      	nop
  {
    RESTORE_PRIMASK();
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
 800cc44:	887b      	ldrh	r3, [r7, #2]
 800cc46:	4a0a      	ldr	r2, [pc, #40]	; (800cc70 <DbgTrace_TxCpltCallback+0x68>)
 800cc48:	4619      	mov	r1, r3
 800cc4a:	6938      	ldr	r0, [r7, #16]
 800cc4c:	f7f4 fa39 	bl	80010c2 <DbgOutputTraces>

  DbgTracePeripheralReady = SET;

  RESTORE_PRIMASK();
#endif
}
 800cc50:	e008      	b.n	800cc64 <DbgTrace_TxCpltCallback+0x5c>
    DbgTracePeripheralReady = SET;
 800cc52:	4b08      	ldr	r3, [pc, #32]	; (800cc74 <DbgTrace_TxCpltCallback+0x6c>)
 800cc54:	2201      	movs	r2, #1
 800cc56:	701a      	strb	r2, [r3, #0]
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f383 8810 	msr	PRIMASK, r3
}
 800cc62:	bf00      	nop
}
 800cc64:	bf00      	nop
 800cc66:	3718      	adds	r7, #24
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}
 800cc6c:	200007c4 	.word	0x200007c4
 800cc70:	0800cc09 	.word	0x0800cc09
 800cc74:	20000041 	.word	0x20000041

0800cc78 <DbgTraceInit>:
#endif

void DbgTraceInit( void )
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b082      	sub	sp, #8
 800cc7c:	af02      	add	r7, sp, #8
#if (( CFG_DEBUG_TRACE_FULL != 0 ) || ( CFG_DEBUG_TRACE_LIGHT != 0 ))
  DbgOutputInit();
 800cc7e:	f7f4 fa1a 	bl	80010b6 <DbgOutputInit>
#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
  CircularQueue_Init(&MsgDbgTraceQueue, MsgDbgTraceQueueBuff, DBG_TRACE_MSG_QUEUE_SIZE, 0, CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG);
 800cc82:	2302      	movs	r3, #2
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	2300      	movs	r3, #0
 800cc88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800cc8c:	4903      	ldr	r1, [pc, #12]	; (800cc9c <DbgTraceInit+0x24>)
 800cc8e:	4804      	ldr	r0, [pc, #16]	; (800cca0 <DbgTraceInit+0x28>)
 800cc90:	f000 fe6c 	bl	800d96c <CircularQueue_Init>
#endif 
#endif
  return;
 800cc94:	bf00      	nop
}
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}
 800cc9a:	bf00      	nop
 800cc9c:	200007e4 	.word	0x200007e4
 800cca0:	200007c4 	.word	0x200007c4

0800cca4 <_write>:
 * @param	bufsize buffer size
 * @param	...: arguments to be formatted in format string
 * @retval none
 */
size_t _write(int handle, const unsigned char * buf, size_t bufSize)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	60f8      	str	r0, [r7, #12]
 800ccac:	60b9      	str	r1, [r7, #8]
 800ccae:	607a      	str	r2, [r7, #4]
  return ( DbgTraceWrite(handle, buf, bufSize) );
 800ccb0:	687a      	ldr	r2, [r7, #4]
 800ccb2:	68b9      	ldr	r1, [r7, #8]
 800ccb4:	68f8      	ldr	r0, [r7, #12]
 800ccb6:	f000 f805 	bl	800ccc4 <DbgTraceWrite>
 800ccba:	4603      	mov	r3, r0
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <DbgTraceWrite>:
 * @param buf buffer to write
 * @param bufsize buffer size
 * @retval Number of elements written
 */
size_t DbgTraceWrite(int handle, const unsigned char * buf, size_t bufSize)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b08a      	sub	sp, #40	; 0x28
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	60f8      	str	r0, [r7, #12]
 800cccc:	60b9      	str	r1, [r7, #8]
 800ccce:	607a      	str	r2, [r7, #4]
  size_t chars_written = 0;
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ccd4:	f3ef 8310 	mrs	r3, PRIMASK
 800ccd8:	61bb      	str	r3, [r7, #24]
  return(result);
 800ccda:	69bb      	ldr	r3, [r7, #24]
  uint8_t* buffer;

  BACKUP_PRIMASK();
 800ccdc:	623b      	str	r3, [r7, #32]

  /* Ignore flushes */
  if ( handle == -1 )
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cce4:	d102      	bne.n	800ccec <DbgTraceWrite+0x28>
  {
    chars_written = ( size_t ) 0;
 800cce6:	2300      	movs	r3, #0
 800cce8:	627b      	str	r3, [r7, #36]	; 0x24
 800ccea:	e037      	b.n	800cd5c <DbgTraceWrite+0x98>
  }
  /* Only allow stdout/stderr output */
  else if ( ( handle != 1 ) && ( handle != 2 ) )
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	2b01      	cmp	r3, #1
 800ccf0:	d006      	beq.n	800cd00 <DbgTraceWrite+0x3c>
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b02      	cmp	r3, #2
 800ccf6:	d003      	beq.n	800cd00 <DbgTraceWrite+0x3c>
  {
    chars_written = ( size_t ) - 1;
 800ccf8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfc:	627b      	str	r3, [r7, #36]	; 0x24
 800ccfe:	e02d      	b.n	800cd5c <DbgTraceWrite+0x98>
  }
  /* Parameters OK, call the low-level character output routine */
  else if (bufSize != 0)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d02a      	beq.n	800cd5c <DbgTraceWrite+0x98>
  {
    chars_written = bufSize;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("cpsid i" : : : "memory");
 800cd0a:	b672      	cpsid	i
}
 800cd0c:	bf00      	nop
    /* If queue emepty and TX free, send directly */
    /* CS Start */

#if (DBG_TRACE_USE_CIRCULAR_QUEUE != 0)
    DISABLE_IRQ();      /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
    buffer=CircularQueue_Add(&MsgDbgTraceQueue,(uint8_t*)buf, bufSize,1);
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	2301      	movs	r3, #1
 800cd14:	68b9      	ldr	r1, [r7, #8]
 800cd16:	4814      	ldr	r0, [pc, #80]	; (800cd68 <DbgTraceWrite+0xa4>)
 800cd18:	f000 fe5a 	bl	800d9d0 <CircularQueue_Add>
 800cd1c:	61f8      	str	r0, [r7, #28]
    if (buffer && DbgTracePeripheralReady)
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d015      	beq.n	800cd50 <DbgTraceWrite+0x8c>
 800cd24:	4b11      	ldr	r3, [pc, #68]	; (800cd6c <DbgTraceWrite+0xa8>)
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	b2db      	uxtb	r3, r3
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d010      	beq.n	800cd50 <DbgTraceWrite+0x8c>
    {
      DbgTracePeripheralReady = RESET;
 800cd2e:	4b0f      	ldr	r3, [pc, #60]	; (800cd6c <DbgTraceWrite+0xa8>)
 800cd30:	2200      	movs	r2, #0
 800cd32:	701a      	strb	r2, [r3, #0]
 800cd34:	6a3b      	ldr	r3, [r7, #32]
 800cd36:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	f383 8810 	msr	PRIMASK, r3
}
 800cd3e:	bf00      	nop
      RESTORE_PRIMASK();
      DbgOutputTraces((uint8_t*)buffer, bufSize, DbgTrace_TxCpltCallback);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	4a0a      	ldr	r2, [pc, #40]	; (800cd70 <DbgTraceWrite+0xac>)
 800cd46:	4619      	mov	r1, r3
 800cd48:	69f8      	ldr	r0, [r7, #28]
 800cd4a:	f7f4 f9ba 	bl	80010c2 <DbgOutputTraces>
 800cd4e:	e005      	b.n	800cd5c <DbgTraceWrite+0x98>
 800cd50:	6a3b      	ldr	r3, [r7, #32]
 800cd52:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	f383 8810 	msr	PRIMASK, r3
}
 800cd5a:	bf00      	nop
    DbgOutputTraces((uint8_t*)buf, bufSize, DbgTrace_TxCpltCallback);
    while (!DbgTracePeripheralReady);
#endif
    /* CS END */
  }
  return ( chars_written );
 800cd5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3728      	adds	r7, #40	; 0x28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	bd80      	pop	{r7, pc}
 800cd66:	bf00      	nop
 800cd68:	200007c4 	.word	0x200007c4
 800cd6c:	20000041 	.word	0x20000041
 800cd70:	0800cc09 	.word	0x0800cc09

0800cd74 <hci_init>:
static void TlEvtReceived(TL_EvtPacket_t *hcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b082      	sub	sp, #8
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
 800cd7c:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((HCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	4a08      	ldr	r2, [pc, #32]	; (800cda4 <hci_init+0x30>)
 800cd84:	6013      	str	r3, [r2, #0]
  hciContext.UserEvtRx = UserEvtRx;
 800cd86:	4a08      	ldr	r2, [pc, #32]	; (800cda8 <hci_init+0x34>)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	61d3      	str	r3, [r2, #28]

  hci_register_io_bus (&hciContext.io);
 800cd8c:	4806      	ldr	r0, [pc, #24]	; (800cda8 <hci_init+0x34>)
 800cd8e:	f000 f979 	bl	800d084 <hci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((HCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 f8da 	bl	800cf50 <TlInit>

  return;
 800cd9c:	bf00      	nop
}
 800cd9e:	3708      	adds	r7, #8
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}
 800cda4:	2000180c 	.word	0x2000180c
 800cda8:	200017e4 	.word	0x200017e4

0800cdac <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b084      	sub	sp, #16
 800cdb0:	af00      	add	r7, sp, #0
  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800cdb2:	4822      	ldr	r0, [pc, #136]	; (800ce3c <hci_user_evt_proc+0x90>)
 800cdb4:	f000 fd2c 	bl	800d810 <LST_is_empty>
 800cdb8:	4603      	mov	r3, r0
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d12b      	bne.n	800ce16 <hci_user_evt_proc+0x6a>
 800cdbe:	4b20      	ldr	r3, [pc, #128]	; (800ce40 <hci_user_evt_proc+0x94>)
 800cdc0:	781b      	ldrb	r3, [r3, #0]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d027      	beq.n	800ce16 <hci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &HciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800cdc6:	f107 030c 	add.w	r3, r7, #12
 800cdca:	4619      	mov	r1, r3
 800cdcc:	481b      	ldr	r0, [pc, #108]	; (800ce3c <hci_user_evt_proc+0x90>)
 800cdce:	f000 fdae 	bl	800d92e <LST_remove_head>

    if (hciContext.UserEvtRx != NULL)
 800cdd2:	4b1c      	ldr	r3, [pc, #112]	; (800ce44 <hci_user_evt_proc+0x98>)
 800cdd4:	69db      	ldr	r3, [r3, #28]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d00c      	beq.n	800cdf4 <hci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = HCI_TL_UserEventFlow_Enable;
 800cdde:	2301      	movs	r3, #1
 800cde0:	713b      	strb	r3, [r7, #4]
      hciContext.UserEvtRx((void *)&UserEvtRxParam);
 800cde2:	4b18      	ldr	r3, [pc, #96]	; (800ce44 <hci_user_evt_proc+0x98>)
 800cde4:	69db      	ldr	r3, [r3, #28]
 800cde6:	1d3a      	adds	r2, r7, #4
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
      UserEventFlow = UserEvtRxParam.status;
 800cdec:	793a      	ldrb	r2, [r7, #4]
 800cdee:	4b14      	ldr	r3, [pc, #80]	; (800ce40 <hci_user_evt_proc+0x94>)
 800cdf0:	701a      	strb	r2, [r3, #0]
 800cdf2:	e002      	b.n	800cdfa <hci_user_evt_proc+0x4e>
    }
    else
    {
      UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800cdf4:	4b12      	ldr	r3, [pc, #72]	; (800ce40 <hci_user_evt_proc+0x94>)
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	701a      	strb	r2, [r3, #0]
    }

    if(UserEventFlow != HCI_TL_UserEventFlow_Disable)
 800cdfa:	4b11      	ldr	r3, [pc, #68]	; (800ce40 <hci_user_evt_proc+0x94>)
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d004      	beq.n	800ce0c <hci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	4618      	mov	r0, r3
 800ce06:	f001 fc53 	bl	800e6b0 <TL_MM_EvtDone>
 800ce0a:	e004      	b.n	800ce16 <hci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &HciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4619      	mov	r1, r3
 800ce10:	480a      	ldr	r0, [pc, #40]	; (800ce3c <hci_user_evt_proc+0x90>)
 800ce12:	f000 fd1f 	bl	800d854 <LST_insert_head>
    }
  }

  if((LST_is_empty(&HciAsynchEventQueue) == FALSE) && (UserEventFlow != HCI_TL_UserEventFlow_Disable))
 800ce16:	4809      	ldr	r0, [pc, #36]	; (800ce3c <hci_user_evt_proc+0x90>)
 800ce18:	f000 fcfa 	bl	800d810 <LST_is_empty>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d107      	bne.n	800ce32 <hci_user_evt_proc+0x86>
 800ce22:	4b07      	ldr	r3, [pc, #28]	; (800ce40 <hci_user_evt_proc+0x94>)
 800ce24:	781b      	ldrb	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d003      	beq.n	800ce32 <hci_user_evt_proc+0x86>
  {
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue);
 800ce2a:	4804      	ldr	r0, [pc, #16]	; (800ce3c <hci_user_evt_proc+0x90>)
 800ce2c:	f7f7 fac4 	bl	80043b8 <hci_notify_asynch_evt>
  }


  return;
 800ce30:	bf00      	nop
 800ce32:	bf00      	nop
}
 800ce34:	3710      	adds	r7, #16
 800ce36:	46bd      	mov	sp, r7
 800ce38:	bd80      	pop	{r7, pc}
 800ce3a:	bf00      	nop
 800ce3c:	20000218 	.word	0x20000218
 800ce40:	20000224 	.word	0x20000224
 800ce44:	200017e4 	.word	0x200017e4

0800ce48 <hci_send_req>:

  return;
}

int hci_send_req(struct hci_request *p_cmd, uint8_t async)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b088      	sub	sp, #32
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	6078      	str	r0, [r7, #4]
 800ce50:	460b      	mov	r3, r1
 800ce52:	70fb      	strb	r3, [r7, #3]
  TL_CsEvt_t    *pcommand_status_event;
  TL_EvtPacket_t *pevtpacket;
  uint8_t hci_cmd_complete_return_parameters_length;
  HCI_TL_CmdStatus_t local_cmd_status;

  NotifyCmdStatus(HCI_TL_CmdBusy);
 800ce54:	2000      	movs	r0, #0
 800ce56:	f000 f8d1 	bl	800cffc <NotifyCmdStatus>
  local_cmd_status = HCI_TL_CmdBusy;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	77fb      	strb	r3, [r7, #31]
  opcode = ((p_cmd->ocf) & 0x03ff) | ((p_cmd->ogf) << 10);
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	885b      	ldrh	r3, [r3, #2]
 800ce62:	b21b      	sxth	r3, r3
 800ce64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ce68:	b21a      	sxth	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	881b      	ldrh	r3, [r3, #0]
 800ce6e:	029b      	lsls	r3, r3, #10
 800ce70:	b21b      	sxth	r3, r3
 800ce72:	4313      	orrs	r3, r2
 800ce74:	b21b      	sxth	r3, r3
 800ce76:	83bb      	strh	r3, [r7, #28]
  
  CmdRspStatusFlag = HCI_TL_CMD_RESP_WAIT;
 800ce78:	4b33      	ldr	r3, [pc, #204]	; (800cf48 <hci_send_req+0x100>)
 800ce7a:	2201      	movs	r2, #1
 800ce7c:	701a      	strb	r2, [r3, #0]
  SendCmd(opcode, p_cmd->clen, p_cmd->cparam);
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68db      	ldr	r3, [r3, #12]
 800ce82:	b2d9      	uxtb	r1, r3
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	689a      	ldr	r2, [r3, #8]
 800ce88:	8bbb      	ldrh	r3, [r7, #28]
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f000 f890 	bl	800cfb0 <SendCmd>

  while(local_cmd_status == HCI_TL_CmdBusy)
 800ce90:	e04e      	b.n	800cf30 <hci_send_req+0xe8>
  {
    hci_cmd_resp_wait(HCI_TL_DEFAULT_TIMEOUT);
 800ce92:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800ce96:	f7f7 faa6 	bl	80043e6 <hci_cmd_resp_wait>

    /**
     * Process Cmd Event
     */
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800ce9a:	e043      	b.n	800cf24 <hci_send_req+0xdc>
    {
      LST_remove_head (&HciCmdEventQueue, (tListNode **)&pevtpacket);
 800ce9c:	f107 030c 	add.w	r3, r7, #12
 800cea0:	4619      	mov	r1, r3
 800cea2:	482a      	ldr	r0, [pc, #168]	; (800cf4c <hci_send_req+0x104>)
 800cea4:	f000 fd43 	bl	800d92e <LST_remove_head>

      if(pevtpacket->evtserial.evt.evtcode == TL_BLEEVT_CS_OPCODE)
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	7a5b      	ldrb	r3, [r3, #9]
 800ceac:	2b0f      	cmp	r3, #15
 800ceae:	d114      	bne.n	800ceda <hci_send_req+0x92>
      {
        pcommand_status_event = (TL_CsEvt_t*)pevtpacket->evtserial.evt.payload;
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	330b      	adds	r3, #11
 800ceb4:	613b      	str	r3, [r7, #16]
        if(pcommand_status_event->cmdcode == opcode)
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	885b      	ldrh	r3, [r3, #2]
 800ceba:	b29b      	uxth	r3, r3
 800cebc:	8bba      	ldrh	r2, [r7, #28]
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d104      	bne.n	800cecc <hci_send_req+0x84>
        {
          *(uint8_t *)(p_cmd->rparam) = pcommand_status_event->status;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	691b      	ldr	r3, [r3, #16]
 800cec6:	693a      	ldr	r2, [r7, #16]
 800cec8:	7812      	ldrb	r2, [r2, #0]
 800ceca:	701a      	strb	r2, [r3, #0]
        }

        if(pcommand_status_event->numcmd != 0)
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	785b      	ldrb	r3, [r3, #1]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d027      	beq.n	800cf24 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800ced4:	2301      	movs	r3, #1
 800ced6:	77fb      	strb	r3, [r7, #31]
 800ced8:	e024      	b.n	800cf24 <hci_send_req+0xdc>
        }
      }
      else
      {
        pcommand_complete_event = (TL_CcEvt_t*)pevtpacket->evtserial.evt.payload;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	330b      	adds	r3, #11
 800cede:	61bb      	str	r3, [r7, #24]

        if(pcommand_complete_event->cmdcode == opcode)
 800cee0:	69bb      	ldr	r3, [r7, #24]
 800cee2:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 800cee6:	b29b      	uxth	r3, r3
 800cee8:	8bba      	ldrh	r2, [r7, #28]
 800ceea:	429a      	cmp	r2, r3
 800ceec:	d114      	bne.n	800cf18 <hci_send_req+0xd0>
        {
          hci_cmd_complete_return_parameters_length = pevtpacket->evtserial.evt.plen - TL_EVT_HDR_SIZE;
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	7a9b      	ldrb	r3, [r3, #10]
 800cef2:	3b03      	subs	r3, #3
 800cef4:	75fb      	strb	r3, [r7, #23]
          p_cmd->rlen = MIN(hci_cmd_complete_return_parameters_length, p_cmd->rlen);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	695a      	ldr	r2, [r3, #20]
 800cefa:	7dfb      	ldrb	r3, [r7, #23]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	bfa8      	it	ge
 800cf00:	461a      	movge	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	615a      	str	r2, [r3, #20]
          memcpy(p_cmd->rparam, pcommand_complete_event->payload, p_cmd->rlen);
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	6918      	ldr	r0, [r3, #16]
 800cf0a:	69bb      	ldr	r3, [r7, #24]
 800cf0c:	1cd9      	adds	r1, r3, #3
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	695b      	ldr	r3, [r3, #20]
 800cf12:	461a      	mov	r2, r3
 800cf14:	f002 fe05 	bl	800fb22 <memcpy>
        }

        if(pcommand_complete_event->numcmd != 0)
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	781b      	ldrb	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d001      	beq.n	800cf24 <hci_send_req+0xdc>
        {
          local_cmd_status = HCI_TL_CmdAvailable;
 800cf20:	2301      	movs	r3, #1
 800cf22:	77fb      	strb	r3, [r7, #31]
    while(LST_is_empty(&HciCmdEventQueue) == FALSE)
 800cf24:	4809      	ldr	r0, [pc, #36]	; (800cf4c <hci_send_req+0x104>)
 800cf26:	f000 fc73 	bl	800d810 <LST_is_empty>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d0b5      	beq.n	800ce9c <hci_send_req+0x54>
  while(local_cmd_status == HCI_TL_CmdBusy)
 800cf30:	7ffb      	ldrb	r3, [r7, #31]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0ad      	beq.n	800ce92 <hci_send_req+0x4a>
        }
      }
    }
  }

  NotifyCmdStatus(HCI_TL_CmdAvailable);
 800cf36:	2001      	movs	r0, #1
 800cf38:	f000 f860 	bl	800cffc <NotifyCmdStatus>

  return 0;
 800cf3c:	2300      	movs	r3, #0
}
 800cf3e:	4618      	mov	r0, r3
 800cf40:	3720      	adds	r7, #32
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}
 800cf46:	bf00      	nop
 800cf48:	20001810 	.word	0x20001810
 800cf4c:	20001804 	.word	0x20001804

0800cf50 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b086      	sub	sp, #24
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  TL_BLE_InitConf_t Conf;

  /**
   * Always initialize the command event queue
   */
  LST_init_head (&HciCmdEventQueue);
 800cf58:	480f      	ldr	r0, [pc, #60]	; (800cf98 <TlInit+0x48>)
 800cf5a:	f000 fc49 	bl	800d7f0 <LST_init_head>

  pCmdBuffer = p_cmdbuffer;
 800cf5e:	4a0f      	ldr	r2, [pc, #60]	; (800cf9c <TlInit+0x4c>)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6013      	str	r3, [r2, #0]

  LST_init_head (&HciAsynchEventQueue);
 800cf64:	480e      	ldr	r0, [pc, #56]	; (800cfa0 <TlInit+0x50>)
 800cf66:	f000 fc43 	bl	800d7f0 <LST_init_head>

  UserEventFlow = HCI_TL_UserEventFlow_Enable;
 800cf6a:	4b0e      	ldr	r3, [pc, #56]	; (800cfa4 <TlInit+0x54>)
 800cf6c:	2201      	movs	r2, #1
 800cf6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (hciContext.io.Init)
 800cf70:	4b0d      	ldr	r3, [pc, #52]	; (800cfa8 <TlInit+0x58>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00a      	beq.n	800cf8e <TlInit+0x3e>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	613b      	str	r3, [r7, #16]
    Conf.IoBusEvtCallBack = TlEvtReceived;
 800cf7c:	4b0b      	ldr	r3, [pc, #44]	; (800cfac <TlInit+0x5c>)
 800cf7e:	60bb      	str	r3, [r7, #8]
    hciContext.io.Init(&Conf);
 800cf80:	4b09      	ldr	r3, [pc, #36]	; (800cfa8 <TlInit+0x58>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	f107 0208 	add.w	r2, r7, #8
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4798      	blx	r3
  }

  return;
 800cf8c:	bf00      	nop
 800cf8e:	bf00      	nop
}
 800cf90:	3718      	adds	r7, #24
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}
 800cf96:	bf00      	nop
 800cf98:	20001804 	.word	0x20001804
 800cf9c:	20000220 	.word	0x20000220
 800cfa0:	20000218 	.word	0x20000218
 800cfa4:	20000224 	.word	0x20000224
 800cfa8:	200017e4 	.word	0x200017e4
 800cfac:	0800d03d 	.word	0x0800d03d

0800cfb0 <SendCmd>:

static void SendCmd(uint16_t opcode, uint8_t plen, void *param)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b082      	sub	sp, #8
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	603a      	str	r2, [r7, #0]
 800cfba:	80fb      	strh	r3, [r7, #6]
 800cfbc:	460b      	mov	r3, r1
 800cfbe:	717b      	strb	r3, [r7, #5]
  pCmdBuffer->cmdserial.cmd.cmdcode = opcode;
 800cfc0:	4b0c      	ldr	r3, [pc, #48]	; (800cff4 <SendCmd+0x44>)
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	88fa      	ldrh	r2, [r7, #6]
 800cfc6:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = plen;
 800cfca:	4b0a      	ldr	r3, [pc, #40]	; (800cff4 <SendCmd+0x44>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	797a      	ldrb	r2, [r7, #5]
 800cfd0:	72da      	strb	r2, [r3, #11]
  memcpy( pCmdBuffer->cmdserial.cmd.payload, param, plen );
 800cfd2:	4b08      	ldr	r3, [pc, #32]	; (800cff4 <SendCmd+0x44>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	330c      	adds	r3, #12
 800cfd8:	797a      	ldrb	r2, [r7, #5]
 800cfda:	6839      	ldr	r1, [r7, #0]
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f002 fda0 	bl	800fb22 <memcpy>

  hciContext.io.Send(0,0);
 800cfe2:	4b05      	ldr	r3, [pc, #20]	; (800cff8 <SendCmd+0x48>)
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	2100      	movs	r1, #0
 800cfe8:	2000      	movs	r0, #0
 800cfea:	4798      	blx	r3

  return;
 800cfec:	bf00      	nop
}
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}
 800cff4:	20000220 	.word	0x20000220
 800cff8:	200017e4 	.word	0x200017e4

0800cffc <NotifyCmdStatus>:

static void NotifyCmdStatus(HCI_TL_CmdStatus_t hcicmdstatus)
{
 800cffc:	b580      	push	{r7, lr}
 800cffe:	b082      	sub	sp, #8
 800d000:	af00      	add	r7, sp, #0
 800d002:	4603      	mov	r3, r0
 800d004:	71fb      	strb	r3, [r7, #7]
  if(hcicmdstatus == HCI_TL_CmdBusy)
 800d006:	79fb      	ldrb	r3, [r7, #7]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d108      	bne.n	800d01e <NotifyCmdStatus+0x22>
  {
    if(StatusNotCallBackFunction != 0)
 800d00c:	4b0a      	ldr	r3, [pc, #40]	; (800d038 <NotifyCmdStatus+0x3c>)
 800d00e:	681b      	ldr	r3, [r3, #0]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00d      	beq.n	800d030 <NotifyCmdStatus+0x34>
    {
      StatusNotCallBackFunction(HCI_TL_CmdBusy);
 800d014:	4b08      	ldr	r3, [pc, #32]	; (800d038 <NotifyCmdStatus+0x3c>)
 800d016:	681b      	ldr	r3, [r3, #0]
 800d018:	2000      	movs	r0, #0
 800d01a:	4798      	blx	r3
    {
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
    }
  }

  return;
 800d01c:	e008      	b.n	800d030 <NotifyCmdStatus+0x34>
    if(StatusNotCallBackFunction != 0)
 800d01e:	4b06      	ldr	r3, [pc, #24]	; (800d038 <NotifyCmdStatus+0x3c>)
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d004      	beq.n	800d030 <NotifyCmdStatus+0x34>
      StatusNotCallBackFunction(HCI_TL_CmdAvailable);
 800d026:	4b04      	ldr	r3, [pc, #16]	; (800d038 <NotifyCmdStatus+0x3c>)
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	2001      	movs	r0, #1
 800d02c:	4798      	blx	r3
  return;
 800d02e:	bf00      	nop
 800d030:	bf00      	nop
}
 800d032:	3708      	adds	r7, #8
 800d034:	46bd      	mov	sp, r7
 800d036:	bd80      	pop	{r7, pc}
 800d038:	2000180c 	.word	0x2000180c

0800d03c <TlEvtReceived>:

static void TlEvtReceived(TL_EvtPacket_t *hcievt)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  if ( ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((hcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	7a5b      	ldrb	r3, [r3, #9]
 800d048:	2b0f      	cmp	r3, #15
 800d04a:	d003      	beq.n	800d054 <TlEvtReceived+0x18>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	7a5b      	ldrb	r3, [r3, #9]
 800d050:	2b0e      	cmp	r3, #14
 800d052:	d107      	bne.n	800d064 <TlEvtReceived+0x28>
  {
    LST_insert_tail(&HciCmdEventQueue, (tListNode *)hcievt);
 800d054:	6879      	ldr	r1, [r7, #4]
 800d056:	4809      	ldr	r0, [pc, #36]	; (800d07c <TlEvtReceived+0x40>)
 800d058:	f000 fc22 	bl	800d8a0 <LST_insert_tail>
    hci_cmd_resp_release(0); /**< Notify the application a full Cmd Event has been received */
 800d05c:	2000      	movs	r0, #0
 800d05e:	f7f7 f9b7 	bl	80043d0 <hci_cmd_resp_release>
 800d062:	e006      	b.n	800d072 <TlEvtReceived+0x36>
  }
  else
  {
    LST_insert_tail(&HciAsynchEventQueue, (tListNode *)hcievt);
 800d064:	6879      	ldr	r1, [r7, #4]
 800d066:	4806      	ldr	r0, [pc, #24]	; (800d080 <TlEvtReceived+0x44>)
 800d068:	f000 fc1a 	bl	800d8a0 <LST_insert_tail>
    hci_notify_asynch_evt((void*) &HciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d06c:	4804      	ldr	r0, [pc, #16]	; (800d080 <TlEvtReceived+0x44>)
 800d06e:	f7f7 f9a3 	bl	80043b8 <hci_notify_asynch_evt>
  }

  return;
 800d072:	bf00      	nop
}
 800d074:	3708      	adds	r7, #8
 800d076:	46bd      	mov	sp, r7
 800d078:	bd80      	pop	{r7, pc}
 800d07a:	bf00      	nop
 800d07c:	20001804 	.word	0x20001804
 800d080:	20000218 	.word	0x20000218

0800d084 <hci_register_io_bus>:
#include "hci_tl.h"
#include "tl.h"


void hci_register_io_bus(tHciIO* fops)
{
 800d084:	b480      	push	{r7}
 800d086:	b083      	sub	sp, #12
 800d088:	af00      	add	r7, sp, #0
 800d08a:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_BLE_Init;
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	4a05      	ldr	r2, [pc, #20]	; (800d0a4 <hci_register_io_bus+0x20>)
 800d090:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_BLE_SendCmd;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	4a04      	ldr	r2, [pc, #16]	; (800d0a8 <hci_register_io_bus+0x24>)
 800d096:	611a      	str	r2, [r3, #16]

  return;
 800d098:	bf00      	nop
}
 800d09a:	370c      	adds	r7, #12
 800d09c:	46bd      	mov	sp, r7
 800d09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a2:	4770      	bx	lr
 800d0a4:	0800e429 	.word	0x0800e429
 800d0a8:	0800e491 	.word	0x0800e491

0800d0ac <Osal_MemCpy>:
 * Osal_MemCpy
 * 
 */
 
void* Osal_MemCpy( void *dest, const void *src, unsigned int size )
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	60f8      	str	r0, [r7, #12]
 800d0b4:	60b9      	str	r1, [r7, #8]
 800d0b6:	607a      	str	r2, [r7, #4]
  return memcpy( dest, src, size ); 
 800d0b8:	687a      	ldr	r2, [r7, #4]
 800d0ba:	68b9      	ldr	r1, [r7, #8]
 800d0bc:	68f8      	ldr	r0, [r7, #12]
 800d0be:	f002 fd30 	bl	800fb22 <memcpy>
 800d0c2:	4603      	mov	r3, r0
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3710      	adds	r7, #16
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <Osal_MemSet>:
 * Osal_MemSet
 * 
 */
 
void* Osal_MemSet( void *ptr, int value, unsigned int size )
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	60f8      	str	r0, [r7, #12]
 800d0d4:	60b9      	str	r1, [r7, #8]
 800d0d6:	607a      	str	r2, [r7, #4]
  return memset( ptr, value, size );
 800d0d8:	687a      	ldr	r2, [r7, #4]
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f002 fca1 	bl	800fa24 <memset>
 800d0e2:	4603      	mov	r3, r0
}
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <OTP_Read>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

uint8_t * OTP_Read( uint8_t id )
{
 800d0ec:	b480      	push	{r7}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	71fb      	strb	r3, [r7, #7]
  uint8_t *p_id;

  p_id = (uint8_t*)(CFG_OTP_END_ADRESS - 7) ;
 800d0f6:	4b0f      	ldr	r3, [pc, #60]	; (800d134 <OTP_Read+0x48>)
 800d0f8:	60fb      	str	r3, [r7, #12]

  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d0fa:	e002      	b.n	800d102 <OTP_Read+0x16>
  {
    p_id -= 8 ;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	3b08      	subs	r3, #8
 800d100:	60fb      	str	r3, [r7, #12]
  while( ((*( p_id + 7 )) != id) && ( p_id != (uint8_t*)CFG_OTP_BASE_ADDRESS) )
 800d102:	68fb      	ldr	r3, [r7, #12]
 800d104:	3307      	adds	r3, #7
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	79fa      	ldrb	r2, [r7, #7]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	d003      	beq.n	800d116 <OTP_Read+0x2a>
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	4a09      	ldr	r2, [pc, #36]	; (800d138 <OTP_Read+0x4c>)
 800d112:	4293      	cmp	r3, r2
 800d114:	d1f2      	bne.n	800d0fc <OTP_Read+0x10>
  }

  if((*( p_id + 7 )) != id)
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	3307      	adds	r3, #7
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	79fa      	ldrb	r2, [r7, #7]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d001      	beq.n	800d126 <OTP_Read+0x3a>
  {
    p_id = 0 ;
 800d122:	2300      	movs	r3, #0
 800d124:	60fb      	str	r3, [r7, #12]
  }

  return p_id ;
 800d126:	68fb      	ldr	r3, [r7, #12]
}
 800d128:	4618      	mov	r0, r3
 800d12a:	3714      	adds	r7, #20
 800d12c:	46bd      	mov	sp, r7
 800d12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d132:	4770      	bx	lr
 800d134:	1fff73f8 	.word	0x1fff73f8
 800d138:	1fff7000 	.word	0x1fff7000

0800d13c <PeerToPeer_Event_Handler>:
 * @brief  Event handler
 * @param  Event: Address of the buffer holding the Event
 * @retval Ack: Return whether the Event has been managed or not
 */
static SVCCTL_EvtAckStatus_t PeerToPeer_Event_Handler(void *Event)
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b08a      	sub	sp, #40	; 0x28
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
  hci_event_pckt *event_pckt;
  evt_blecore_aci *blecore_evt;
  aci_gatt_attribute_modified_event_rp0    * attribute_modified;
  P2PS_STM_App_Notification_evt_t Notification;

  return_value = SVCCTL_EvtNotAck;
 800d144:	2300      	movs	r3, #0
 800d146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  event_pckt = (hci_event_pckt *)(((hci_uart_pckt*)Event)->data);
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	3301      	adds	r3, #1
 800d14e:	623b      	str	r3, [r7, #32]

  switch(event_pckt->evt)
 800d150:	6a3b      	ldr	r3, [r7, #32]
 800d152:	781b      	ldrb	r3, [r3, #0]
 800d154:	2bff      	cmp	r3, #255	; 0xff
 800d156:	d14f      	bne.n	800d1f8 <PeerToPeer_Event_Handler+0xbc>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*)event_pckt->data;
 800d158:	6a3b      	ldr	r3, [r7, #32]
 800d15a:	3302      	adds	r3, #2
 800d15c:	61fb      	str	r3, [r7, #28]
      switch(blecore_evt->ecode)
 800d15e:	69fb      	ldr	r3, [r7, #28]
 800d160:	881b      	ldrh	r3, [r3, #0]
 800d162:	b29b      	uxth	r3, r3
 800d164:	461a      	mov	r2, r3
 800d166:	f640 4301 	movw	r3, #3073	; 0xc01
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d140      	bne.n	800d1f0 <PeerToPeer_Event_Handler+0xb4>
      {
        case ACI_GATT_ATTRIBUTE_MODIFIED_VSEVT_CODE:
       {
          attribute_modified = (aci_gatt_attribute_modified_event_rp0*)blecore_evt->data;
 800d16e:	69fb      	ldr	r3, [r7, #28]
 800d170:	3302      	adds	r3, #2
 800d172:	61bb      	str	r3, [r7, #24]
            if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PNotifyServerToClientCharHdle + 2))
 800d174:	69bb      	ldr	r3, [r7, #24]
 800d176:	885b      	ldrh	r3, [r3, #2]
 800d178:	b29b      	uxth	r3, r3
 800d17a:	461a      	mov	r2, r3
 800d17c:	4b22      	ldr	r3, [pc, #136]	; (800d208 <PeerToPeer_Event_Handler+0xcc>)
 800d17e:	889b      	ldrh	r3, [r3, #4]
 800d180:	3302      	adds	r3, #2
 800d182:	429a      	cmp	r2, r3
 800d184:	d118      	bne.n	800d1b8 <PeerToPeer_Event_Handler+0x7c>
            {
              /**
               * Descriptor handle
               */
              return_value = SVCCTL_EvtAckFlowEnable;
 800d186:	2301      	movs	r3, #1
 800d188:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
              /**
               * Notify to application
               */
              if(attribute_modified->Attr_Data[0] & COMSVC_Notification)
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	7a1b      	ldrb	r3, [r3, #8]
 800d190:	f003 0301 	and.w	r3, r3, #1
 800d194:	2b00      	cmp	r3, #0
 800d196:	d007      	beq.n	800d1a8 <PeerToPeer_Event_Handler+0x6c>
              {
                Notification.P2P_Evt_Opcode = P2PS_STM__NOTIFY_ENABLED_EVT;
 800d198:	2300      	movs	r3, #0
 800d19a:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d19c:	f107 0308 	add.w	r3, r7, #8
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7f7 f963 	bl	800446c <P2PS_STM_App_Notification>
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
              P2PS_STM_App_Notification(&Notification);
            }
#endif
        }
        break;
 800d1a6:	e025      	b.n	800d1f4 <PeerToPeer_Event_Handler+0xb8>
                Notification.P2P_Evt_Opcode = P2PS_STM_NOTIFY_DISABLED_EVT;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	723b      	strb	r3, [r7, #8]
                P2PS_STM_App_Notification(&Notification);
 800d1ac:	f107 0308 	add.w	r3, r7, #8
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	f7f7 f95b 	bl	800446c <P2PS_STM_App_Notification>
        break;
 800d1b6:	e01d      	b.n	800d1f4 <PeerToPeer_Event_Handler+0xb8>
            else if(attribute_modified->Attr_Handle == (aPeerToPeerContext.P2PWriteClientToServerCharHdle + 1))
 800d1b8:	69bb      	ldr	r3, [r7, #24]
 800d1ba:	885b      	ldrh	r3, [r3, #2]
 800d1bc:	b29b      	uxth	r3, r3
 800d1be:	461a      	mov	r2, r3
 800d1c0:	4b11      	ldr	r3, [pc, #68]	; (800d208 <PeerToPeer_Event_Handler+0xcc>)
 800d1c2:	885b      	ldrh	r3, [r3, #2]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	429a      	cmp	r2, r3
 800d1c8:	d114      	bne.n	800d1f4 <PeerToPeer_Event_Handler+0xb8>
              BLE_DBG_P2P_STM_MSG("-- GATT : LED CONFIGURATION RECEIVED\n");
 800d1ca:	4810      	ldr	r0, [pc, #64]	; (800d20c <PeerToPeer_Event_Handler+0xd0>)
 800d1cc:	f002 fb4a 	bl	800f864 <puts>
              Notification.P2P_Evt_Opcode = P2PS_STM_WRITE_EVT;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	723b      	strb	r3, [r7, #8]
              Notification.DataTransfered.Length=attribute_modified->Attr_Data_Length;
 800d1d4:	69bb      	ldr	r3, [r7, #24]
 800d1d6:	88db      	ldrh	r3, [r3, #6]
 800d1d8:	b29b      	uxth	r3, r3
 800d1da:	b2db      	uxtb	r3, r3
 800d1dc:	743b      	strb	r3, [r7, #16]
              Notification.DataTransfered.pPayload=attribute_modified->Attr_Data;
 800d1de:	69bb      	ldr	r3, [r7, #24]
 800d1e0:	3308      	adds	r3, #8
 800d1e2:	60fb      	str	r3, [r7, #12]
              P2PS_STM_App_Notification(&Notification);  
 800d1e4:	f107 0308 	add.w	r3, r7, #8
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	f7f7 f93f 	bl	800446c <P2PS_STM_App_Notification>
        break;
 800d1ee:	e001      	b.n	800d1f4 <PeerToPeer_Event_Handler+0xb8>

        default:
          break;
 800d1f0:	bf00      	nop
 800d1f2:	e002      	b.n	800d1fa <PeerToPeer_Event_Handler+0xbe>
        break;
 800d1f4:	bf00      	nop
      }
    }
    break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800d1f6:	e000      	b.n	800d1fa <PeerToPeer_Event_Handler+0xbe>

    default:
      break;
 800d1f8:	bf00      	nop
  }

  return(return_value);
 800d1fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}/* end SVCCTL_EvtAckStatus_t */
 800d1fe:	4618      	mov	r0, r3
 800d200:	3728      	adds	r7, #40	; 0x28
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}
 800d206:	bf00      	nop
 800d208:	20000228 	.word	0x20000228
 800d20c:	08012dfc 	.word	0x08012dfc

0800d210 <P2PS_STM_Init>:
 * @brief  Service initialization
 * @param  None
 * @retval None
 */
void P2PS_STM_Init(void)
{
 800d210:	b580      	push	{r7, lr}
 800d212:	b08a      	sub	sp, #40	; 0x28
 800d214:	af06      	add	r7, sp, #24
  Char_UUID_t  uuid16;

  /**
   *	Register the event handler to the BLE controller
   */
  SVCCTL_RegisterSvcHandler(PeerToPeer_Event_Handler);
 800d216:	484a      	ldr	r0, [pc, #296]	; (800d340 <P2PS_STM_Init+0x130>)
 800d218:	f001 f858 	bl	800e2cc <SVCCTL_RegisterSvcHandler>
     *                                2 for P2P Write characteristic +
     *                                2 for P2P Notify characteristic +
     *                                1 for client char configuration descriptor +
     *                                
     */
    COPY_P2P_SERVICE_UUID(uuid16.Char_UUID_128);
 800d21c:	238f      	movs	r3, #143	; 0x8f
 800d21e:	703b      	strb	r3, [r7, #0]
 800d220:	23e5      	movs	r3, #229	; 0xe5
 800d222:	707b      	strb	r3, [r7, #1]
 800d224:	23b3      	movs	r3, #179	; 0xb3
 800d226:	70bb      	strb	r3, [r7, #2]
 800d228:	23d5      	movs	r3, #213	; 0xd5
 800d22a:	70fb      	strb	r3, [r7, #3]
 800d22c:	232e      	movs	r3, #46	; 0x2e
 800d22e:	713b      	strb	r3, [r7, #4]
 800d230:	237f      	movs	r3, #127	; 0x7f
 800d232:	717b      	strb	r3, [r7, #5]
 800d234:	234a      	movs	r3, #74	; 0x4a
 800d236:	71bb      	strb	r3, [r7, #6]
 800d238:	2398      	movs	r3, #152	; 0x98
 800d23a:	71fb      	strb	r3, [r7, #7]
 800d23c:	232a      	movs	r3, #42	; 0x2a
 800d23e:	723b      	strb	r3, [r7, #8]
 800d240:	2348      	movs	r3, #72	; 0x48
 800d242:	727b      	strb	r3, [r7, #9]
 800d244:	237a      	movs	r3, #122	; 0x7a
 800d246:	72bb      	strb	r3, [r7, #10]
 800d248:	23cc      	movs	r3, #204	; 0xcc
 800d24a:	72fb      	strb	r3, [r7, #11]
 800d24c:	2340      	movs	r3, #64	; 0x40
 800d24e:	733b      	strb	r3, [r7, #12]
 800d250:	23fe      	movs	r3, #254	; 0xfe
 800d252:	737b      	strb	r3, [r7, #13]
 800d254:	2300      	movs	r3, #0
 800d256:	73bb      	strb	r3, [r7, #14]
 800d258:	2300      	movs	r3, #0
 800d25a:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_service(UUID_TYPE_128,
 800d25c:	4639      	mov	r1, r7
 800d25e:	4b39      	ldr	r3, [pc, #228]	; (800d344 <P2PS_STM_Init+0x134>)
 800d260:	9300      	str	r3, [sp, #0]
 800d262:	2306      	movs	r3, #6
 800d264:	2201      	movs	r2, #1
 800d266:	2002      	movs	r0, #2
 800d268:	f7fe ff48 	bl	800c0fc <aci_gatt_add_service>
                      &(aPeerToPeerContext.PeerToPeerSvcHdle));

    /**
     *  Add LED Characteristic
     */
    COPY_P2P_WRITE_CHAR_UUID(uuid16.Char_UUID_128);
 800d26c:	2319      	movs	r3, #25
 800d26e:	703b      	strb	r3, [r7, #0]
 800d270:	23ed      	movs	r3, #237	; 0xed
 800d272:	707b      	strb	r3, [r7, #1]
 800d274:	2382      	movs	r3, #130	; 0x82
 800d276:	70bb      	strb	r3, [r7, #2]
 800d278:	23ae      	movs	r3, #174	; 0xae
 800d27a:	70fb      	strb	r3, [r7, #3]
 800d27c:	23ed      	movs	r3, #237	; 0xed
 800d27e:	713b      	strb	r3, [r7, #4]
 800d280:	2321      	movs	r3, #33	; 0x21
 800d282:	717b      	strb	r3, [r7, #5]
 800d284:	234c      	movs	r3, #76	; 0x4c
 800d286:	71bb      	strb	r3, [r7, #6]
 800d288:	239d      	movs	r3, #157	; 0x9d
 800d28a:	71fb      	strb	r3, [r7, #7]
 800d28c:	2341      	movs	r3, #65	; 0x41
 800d28e:	723b      	strb	r3, [r7, #8]
 800d290:	2345      	movs	r3, #69	; 0x45
 800d292:	727b      	strb	r3, [r7, #9]
 800d294:	2322      	movs	r3, #34	; 0x22
 800d296:	72bb      	strb	r3, [r7, #10]
 800d298:	238e      	movs	r3, #142	; 0x8e
 800d29a:	72fb      	strb	r3, [r7, #11]
 800d29c:	2341      	movs	r3, #65	; 0x41
 800d29e:	733b      	strb	r3, [r7, #12]
 800d2a0:	23fe      	movs	r3, #254	; 0xfe
 800d2a2:	737b      	strb	r3, [r7, #13]
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	73bb      	strb	r3, [r7, #14]
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d2ac:	4b25      	ldr	r3, [pc, #148]	; (800d344 <P2PS_STM_Init+0x134>)
 800d2ae:	8818      	ldrh	r0, [r3, #0]
 800d2b0:	463a      	mov	r2, r7
 800d2b2:	4b25      	ldr	r3, [pc, #148]	; (800d348 <P2PS_STM_Init+0x138>)
 800d2b4:	9305      	str	r3, [sp, #20]
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	9304      	str	r3, [sp, #16]
 800d2ba:	230a      	movs	r3, #10
 800d2bc:	9303      	str	r3, [sp, #12]
 800d2be:	2301      	movs	r3, #1
 800d2c0:	9302      	str	r3, [sp, #8]
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9301      	str	r3, [sp, #4]
 800d2c6:	2306      	movs	r3, #6
 800d2c8:	9300      	str	r3, [sp, #0]
 800d2ca:	2302      	movs	r3, #2
 800d2cc:	2102      	movs	r1, #2
 800d2ce:	f7fe ffeb 	bl	800c2a8 <aci_gatt_add_char>
                      &(aPeerToPeerContext.P2PWriteClientToServerCharHdle));

    /**
     *   Add Button Characteristic
     */
    COPY_P2P_NOTIFY_UUID(uuid16.Char_UUID_128);
 800d2d2:	2319      	movs	r3, #25
 800d2d4:	703b      	strb	r3, [r7, #0]
 800d2d6:	23ed      	movs	r3, #237	; 0xed
 800d2d8:	707b      	strb	r3, [r7, #1]
 800d2da:	2382      	movs	r3, #130	; 0x82
 800d2dc:	70bb      	strb	r3, [r7, #2]
 800d2de:	23ae      	movs	r3, #174	; 0xae
 800d2e0:	70fb      	strb	r3, [r7, #3]
 800d2e2:	23ed      	movs	r3, #237	; 0xed
 800d2e4:	713b      	strb	r3, [r7, #4]
 800d2e6:	2321      	movs	r3, #33	; 0x21
 800d2e8:	717b      	strb	r3, [r7, #5]
 800d2ea:	234c      	movs	r3, #76	; 0x4c
 800d2ec:	71bb      	strb	r3, [r7, #6]
 800d2ee:	239d      	movs	r3, #157	; 0x9d
 800d2f0:	71fb      	strb	r3, [r7, #7]
 800d2f2:	2341      	movs	r3, #65	; 0x41
 800d2f4:	723b      	strb	r3, [r7, #8]
 800d2f6:	2345      	movs	r3, #69	; 0x45
 800d2f8:	727b      	strb	r3, [r7, #9]
 800d2fa:	2322      	movs	r3, #34	; 0x22
 800d2fc:	72bb      	strb	r3, [r7, #10]
 800d2fe:	238e      	movs	r3, #142	; 0x8e
 800d300:	72fb      	strb	r3, [r7, #11]
 800d302:	2342      	movs	r3, #66	; 0x42
 800d304:	733b      	strb	r3, [r7, #12]
 800d306:	23fe      	movs	r3, #254	; 0xfe
 800d308:	737b      	strb	r3, [r7, #13]
 800d30a:	2300      	movs	r3, #0
 800d30c:	73bb      	strb	r3, [r7, #14]
 800d30e:	2300      	movs	r3, #0
 800d310:	73fb      	strb	r3, [r7, #15]
    aci_gatt_add_char(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d312:	4b0c      	ldr	r3, [pc, #48]	; (800d344 <P2PS_STM_Init+0x134>)
 800d314:	8818      	ldrh	r0, [r3, #0]
 800d316:	463a      	mov	r2, r7
 800d318:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <P2PS_STM_Init+0x13c>)
 800d31a:	9305      	str	r3, [sp, #20]
 800d31c:	2301      	movs	r3, #1
 800d31e:	9304      	str	r3, [sp, #16]
 800d320:	230a      	movs	r3, #10
 800d322:	9303      	str	r3, [sp, #12]
 800d324:	2301      	movs	r3, #1
 800d326:	9302      	str	r3, [sp, #8]
 800d328:	2300      	movs	r3, #0
 800d32a:	9301      	str	r3, [sp, #4]
 800d32c:	2310      	movs	r3, #16
 800d32e:	9300      	str	r3, [sp, #0]
 800d330:	23c8      	movs	r3, #200	; 0xc8
 800d332:	2102      	movs	r1, #2
 800d334:	f7fe ffb8 	bl	800c2a8 <aci_gatt_add_char>
                      0,
                      &(aPeerToPeerContext.RebootReqCharHdle));
#endif    

    
  return;
 800d338:	bf00      	nop
}
 800d33a:	3710      	adds	r7, #16
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	0800d13d 	.word	0x0800d13d
 800d344:	20000228 	.word	0x20000228
 800d348:	2000022a 	.word	0x2000022a
 800d34c:	2000022c 	.word	0x2000022c

0800d350 <P2PS_STM_App_Update_Char>:
 * @param  UUID: UUID of the characteristic
 * @param  Service_Instance: Instance of the service to which the characteristic belongs
 * 
 */
tBleStatus P2PS_STM_App_Update_Char(uint16_t UUID, uint8_t *pPayload, uint16_t datalen)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b086      	sub	sp, #24
 800d354:	af02      	add	r7, sp, #8
 800d356:	4603      	mov	r3, r0
 800d358:	6039      	str	r1, [r7, #0]
 800d35a:	80fb      	strh	r3, [r7, #6]
 800d35c:	4613      	mov	r3, r2
 800d35e:	80bb      	strh	r3, [r7, #4]
  tBleStatus result = BLE_STATUS_INVALID_PARAMS;
 800d360:	2392      	movs	r3, #146	; 0x92
 800d362:	73fb      	strb	r3, [r7, #15]
  switch(UUID)
 800d364:	88fb      	ldrh	r3, [r7, #6]
 800d366:	f64f 6242 	movw	r2, #65090	; 0xfe42
 800d36a:	4293      	cmp	r3, r2
 800d36c:	d10e      	bne.n	800d38c <P2PS_STM_App_Update_Char+0x3c>
  {
    case P2P_NOTIFY_CHAR_UUID:
      
     result = aci_gatt_update_char_value(aPeerToPeerContext.PeerToPeerSvcHdle,
 800d36e:	4b0a      	ldr	r3, [pc, #40]	; (800d398 <P2PS_STM_App_Update_Char+0x48>)
 800d370:	8818      	ldrh	r0, [r3, #0]
 800d372:	4b09      	ldr	r3, [pc, #36]	; (800d398 <P2PS_STM_App_Update_Char+0x48>)
 800d374:	8899      	ldrh	r1, [r3, #4]
 800d376:	88bb      	ldrh	r3, [r7, #4]
 800d378:	b2da      	uxtb	r2, r3
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	9300      	str	r3, [sp, #0]
 800d37e:	4613      	mov	r3, r2
 800d380:	2200      	movs	r2, #0
 800d382:	f7ff f899 	bl	800c4b8 <aci_gatt_update_char_value>
 800d386:	4603      	mov	r3, r0
 800d388:	73fb      	strb	r3, [r7, #15]
                             aPeerToPeerContext.P2PNotifyServerToClientCharHdle,
                              0, /* charValOffset */
							  datalen, /* charValueLen */
                             (uint8_t *)  pPayload);
    
      break;
 800d38a:	e000      	b.n	800d38e <P2PS_STM_App_Update_Char+0x3e>

    default:
      break;
 800d38c:	bf00      	nop
  }

  return result;
 800d38e:	7bfb      	ldrb	r3, [r7, #15]
}/* end P2PS_STM_Init() */
 800d390:	4618      	mov	r0, r3
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	20000228 	.word	0x20000228

0800d39c <SHCI_C2_BLE_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_BLE_Init( SHCI_C2_Ble_Init_Cmd_Packet_t *pCmdPacket )
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b088      	sub	sp, #32
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d3a4:	f107 030c 	add.w	r3, r7, #12
 800d3a8:	61fb      	str	r3, [r7, #28]

 shci_send( SHCI_OPCODE_C2_BLE_INIT,
            sizeof( SHCI_C2_Ble_Init_Cmd_Param_t ),
            (uint8_t*)&pCmdPacket->Param,
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f103 020c 	add.w	r2, r3, #12
 shci_send( SHCI_OPCODE_C2_BLE_INIT,
 800d3b0:	69fb      	ldr	r3, [r7, #28]
 800d3b2:	212e      	movs	r1, #46	; 0x2e
 800d3b4:	f64f 4066 	movw	r0, #64614	; 0xfc66
 800d3b8:	f000 f94c 	bl	800d654 <shci_send>
            p_rsp );
 
  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	330b      	adds	r3, #11
 800d3c0:	78db      	ldrb	r3, [r3, #3]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3720      	adds	r7, #32
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}

0800d3ca <SHCI_C2_DEBUG_Init>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_DEBUG_Init( SHCI_C2_DEBUG_Init_Cmd_Packet_t *pCmdPacket  )
{
 800d3ca:	b580      	push	{r7, lr}
 800d3cc:	b088      	sub	sp, #32
 800d3ce:	af00      	add	r7, sp, #0
 800d3d0:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d3d2:	f107 030c 	add.w	r3, r7, #12
 800d3d6:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
             sizeof( SHCI_C2_DEBUG_init_Cmd_Param_t ),
             (uint8_t*)&pCmdPacket->Param,
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f103 020c 	add.w	r2, r3, #12
  shci_send( SHCI_OPCODE_C2_DEBUG_INIT,
 800d3de:	69fb      	ldr	r3, [r7, #28]
 800d3e0:	210f      	movs	r1, #15
 800d3e2:	f64f 4068 	movw	r0, #64616	; 0xfc68
 800d3e6:	f000 f935 	bl	800d654 <shci_send>
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d3ea:	69fb      	ldr	r3, [r7, #28]
 800d3ec:	330b      	adds	r3, #11
 800d3ee:	78db      	ldrb	r3, [r3, #3]
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3720      	adds	r7, #32
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	bd80      	pop	{r7, pc}

0800d3f8 <SHCI_C2_Config>:

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
}

SHCI_CmdStatus_t SHCI_C2_Config(SHCI_C2_CONFIG_Cmd_Param_t *pCmdPacket)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b088      	sub	sp, #32
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	6078      	str	r0, [r7, #4]
   * Buffer is large enough to hold command complete without payload
   */
  uint8_t local_buffer[TL_BLEEVT_CC_BUFFER_SIZE];
  TL_EvtPacket_t * p_rsp;

  p_rsp = (TL_EvtPacket_t *)local_buffer;
 800d400:	f107 030c 	add.w	r3, r7, #12
 800d404:	61fb      	str	r3, [r7, #28]

  shci_send( SHCI_OPCODE_C2_CONFIG,
 800d406:	69fb      	ldr	r3, [r7, #28]
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	2110      	movs	r1, #16
 800d40c:	f64f 4075 	movw	r0, #64629	; 0xfc75
 800d410:	f000 f920 	bl	800d654 <shci_send>
             sizeof(SHCI_C2_CONFIG_Cmd_Param_t),
             (uint8_t*)pCmdPacket,
             p_rsp );

  return (SHCI_CmdStatus_t)(((TL_CcEvt_t*)(p_rsp->evtserial.evt.payload))->payload[0]);
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	330b      	adds	r3, #11
 800d418:	78db      	ldrb	r3, [r3, #3]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3720      	adds	r7, #32
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
	...

0800d424 <SHCI_GetWirelessFwInfo>:
 *  Local System COMMAND
 *  These commands are NOT sent to the CPU2
 */

SHCI_CmdStatus_t SHCI_GetWirelessFwInfo( WirelessFwInfo_t* pWirelessInfo )
{
 800d424:	b480      	push	{r7}
 800d426:	b08b      	sub	sp, #44	; 0x2c
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  uint32_t ipccdba = 0;
 800d42c:	2300      	movs	r3, #0
 800d42e:	613b      	str	r3, [r7, #16]
  MB_RefTable_t * p_RefTable = NULL;
 800d430:	2300      	movs	r3, #0
 800d432:	60fb      	str	r3, [r7, #12]
  uint32_t wireless_firmware_version = 0;
 800d434:	2300      	movs	r3, #0
 800d436:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t wireless_firmware_memorySize = 0;
 800d438:	2300      	movs	r3, #0
 800d43a:	623b      	str	r3, [r7, #32]
  uint32_t wireless_firmware_infoStack = 0;
 800d43c:	2300      	movs	r3, #0
 800d43e:	61fb      	str	r3, [r7, #28]
  MB_FUS_DeviceInfoTable_t * p_fus_device_info_table = NULL;
 800d440:	2300      	movs	r3, #0
 800d442:	60bb      	str	r3, [r7, #8]
  uint32_t fus_version = 0;
 800d444:	2300      	movs	r3, #0
 800d446:	61bb      	str	r3, [r7, #24]
  uint32_t fus_memorySize = 0;
 800d448:	2300      	movs	r3, #0
 800d44a:	617b      	str	r3, [r7, #20]

  ipccdba = READ_BIT( FLASH->IPCCBR, FLASH_IPCCBR_IPCCDBA );
 800d44c:	4b4a      	ldr	r3, [pc, #296]	; (800d578 <SHCI_GetWirelessFwInfo+0x154>)
 800d44e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d450:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d454:	613b      	str	r3, [r7, #16]
  /**
   * The Device Info Table mapping depends on which firmware is running on CPU2.
   * If the FUS is running on CPU2, FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD shall be written in the table.
   * Otherwise, it means the Wireless Firmware is running on the CPU2
   */
  p_fus_device_info_table = (MB_FUS_DeviceInfoTable_t*)(*(uint32_t*)((ipccdba<<2) + SRAM2A_BASE));
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d45e:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	60bb      	str	r3, [r7, #8]

  if(p_fus_device_info_table->DeviceInfoTableState == FUS_DEVICE_INFO_TABLE_VALIDITY_KEYWORD)
 800d466:	68bb      	ldr	r3, [r7, #8]
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	4a44      	ldr	r2, [pc, #272]	; (800d57c <SHCI_GetWirelessFwInfo+0x158>)
 800d46c:	4293      	cmp	r3, r2
 800d46e:	d10f      	bne.n	800d490 <SHCI_GetWirelessFwInfo+0x6c>
    /* The FUS is running on CPU2 */
    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_fus_device_info_table->WirelessStackVersion;
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	695b      	ldr	r3, [r3, #20]
 800d474:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_fus_device_info_table->WirelessStackMemorySize;
 800d476:	68bb      	ldr	r3, [r7, #8]
 800d478:	699b      	ldr	r3, [r3, #24]
 800d47a:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_fus_device_info_table->WirelessFirmwareBleInfo;
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	69db      	ldr	r3, [r3, #28]
 800d480:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_fus_device_info_table->FusVersion;
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	68db      	ldr	r3, [r3, #12]
 800d486:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_fus_device_info_table->FusMemorySize;
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	691b      	ldr	r3, [r3, #16]
 800d48c:	617b      	str	r3, [r7, #20]
 800d48e:	e01a      	b.n	800d4c6 <SHCI_GetWirelessFwInfo+0xa2>
  }
  else
  {
    /* The Wireless Firmware is running on CPU2 */
    p_RefTable = (MB_RefTable_t*)((ipccdba<<2) + SRAM2A_BASE);
 800d490:	693b      	ldr	r3, [r7, #16]
 800d492:	009b      	lsls	r3, r3, #2
 800d494:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800d498:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 800d49c:	60fb      	str	r3, [r7, #12]

    /**
     *  Retrieve the WirelessFwInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    wireless_firmware_version =  p_RefTable->p_device_info_table->WirelessFwInfoTable.Version;
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	691b      	ldr	r3, [r3, #16]
 800d4a4:	627b      	str	r3, [r7, #36]	; 0x24
    wireless_firmware_memorySize =  p_RefTable->p_device_info_table->WirelessFwInfoTable.MemorySize;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	695b      	ldr	r3, [r3, #20]
 800d4ac:	623b      	str	r3, [r7, #32]
    wireless_firmware_infoStack =  p_RefTable->p_device_info_table->WirelessFwInfoTable.InfoStack;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	699b      	ldr	r3, [r3, #24]
 800d4b4:	61fb      	str	r3, [r7, #28]

    /**
     *  Retrieve the FusInfoTable
     *  This table is stored in RAM at startup during the TL (transport layer) initialization
     */
    fus_version =  p_RefTable->p_device_info_table->FusInfoTable.Version;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	685b      	ldr	r3, [r3, #4]
 800d4bc:	61bb      	str	r3, [r7, #24]
    fus_memorySize =  p_RefTable->p_device_info_table->FusInfoTable.MemorySize;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	617b      	str	r3, [r7, #20]

  /**
   *  Retrieve the WirelessFwInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->VersionMajor       = ((wireless_firmware_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4c8:	0e1b      	lsrs	r3, r3, #24
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	701a      	strb	r2, [r3, #0]
  pWirelessInfo->VersionMinor       = ((wireless_firmware_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4d2:	0c1b      	lsrs	r3, r3, #16
 800d4d4:	b2da      	uxtb	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	705a      	strb	r2, [r3, #1]
  pWirelessInfo->VersionSub         = ((wireless_firmware_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4dc:	0a1b      	lsrs	r3, r3, #8
 800d4de:	b2da      	uxtb	r2, r3
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	709a      	strb	r2, [r3, #2]
  pWirelessInfo->VersionBranch      = ((wireless_firmware_version & INFO_VERSION_BRANCH_MASK) >> INFO_VERSION_BRANCH_OFFSET);
 800d4e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4e6:	091b      	lsrs	r3, r3, #4
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	f003 030f 	and.w	r3, r3, #15
 800d4ee:	b2da      	uxtb	r2, r3
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	70da      	strb	r2, [r3, #3]
  pWirelessInfo->VersionReleaseType = ((wireless_firmware_version & INFO_VERSION_TYPE_MASK) >> INFO_VERSION_TYPE_OFFSET);
 800d4f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4f6:	b2db      	uxtb	r3, r3
 800d4f8:	f003 030f 	and.w	r3, r3, #15
 800d4fc:	b2da      	uxtb	r2, r3
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	711a      	strb	r2, [r3, #4]

  pWirelessInfo->MemorySizeSram2B   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d502:	6a3b      	ldr	r3, [r7, #32]
 800d504:	0e1b      	lsrs	r3, r3, #24
 800d506:	b2da      	uxtb	r2, r3
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	715a      	strb	r2, [r3, #5]
  pWirelessInfo->MemorySizeSram2A   = ((wireless_firmware_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d50c:	6a3b      	ldr	r3, [r7, #32]
 800d50e:	0c1b      	lsrs	r3, r3, #16
 800d510:	b2da      	uxtb	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	719a      	strb	r2, [r3, #6]
  pWirelessInfo->MemorySizeSram1    = ((wireless_firmware_memorySize & INFO_SIZE_SRAM1_MASK) >> INFO_SIZE_SRAM1_OFFSET);
 800d516:	6a3b      	ldr	r3, [r7, #32]
 800d518:	0a1b      	lsrs	r3, r3, #8
 800d51a:	b2da      	uxtb	r2, r3
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	71da      	strb	r2, [r3, #7]
  pWirelessInfo->MemorySizeFlash    = ((wireless_firmware_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d520:	6a3b      	ldr	r3, [r7, #32]
 800d522:	b2da      	uxtb	r2, r3
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	721a      	strb	r2, [r3, #8]

  pWirelessInfo->StackType          = ((wireless_firmware_infoStack & INFO_STACK_TYPE_MASK) >> INFO_STACK_TYPE_OFFSET);
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	b2da      	uxtb	r2, r3
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	725a      	strb	r2, [r3, #9]

  /**
   *  Retrieve the FusInfoTable
   *  This table is stored in RAM at startup during the TL (transport layer) initialization
   */
  pWirelessInfo->FusVersionMajor       = ((fus_version & INFO_VERSION_MAJOR_MASK) >> INFO_VERSION_MAJOR_OFFSET);
 800d530:	69bb      	ldr	r3, [r7, #24]
 800d532:	0e1b      	lsrs	r3, r3, #24
 800d534:	b2da      	uxtb	r2, r3
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	729a      	strb	r2, [r3, #10]
  pWirelessInfo->FusVersionMinor       = ((fus_version & INFO_VERSION_MINOR_MASK) >> INFO_VERSION_MINOR_OFFSET);
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	0c1b      	lsrs	r3, r3, #16
 800d53e:	b2da      	uxtb	r2, r3
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	72da      	strb	r2, [r3, #11]
  pWirelessInfo->FusVersionSub         = ((fus_version & INFO_VERSION_SUB_MASK) >> INFO_VERSION_SUB_OFFSET);
 800d544:	69bb      	ldr	r3, [r7, #24]
 800d546:	0a1b      	lsrs	r3, r3, #8
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	731a      	strb	r2, [r3, #12]

  pWirelessInfo->FusMemorySizeSram2B   = ((fus_memorySize & INFO_SIZE_SRAM2B_MASK) >> INFO_SIZE_SRAM2B_OFFSET);
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	0e1b      	lsrs	r3, r3, #24
 800d552:	b2da      	uxtb	r2, r3
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	735a      	strb	r2, [r3, #13]
  pWirelessInfo->FusMemorySizeSram2A   = ((fus_memorySize & INFO_SIZE_SRAM2A_MASK) >> INFO_SIZE_SRAM2A_OFFSET);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	0c1b      	lsrs	r3, r3, #16
 800d55c:	b2da      	uxtb	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	739a      	strb	r2, [r3, #14]
  pWirelessInfo->FusMemorySizeFlash    = ((fus_memorySize & INFO_SIZE_FLASH_MASK) >> INFO_SIZE_FLASH_OFFSET);
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	b2da      	uxtb	r2, r3
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	73da      	strb	r2, [r3, #15]

  return (SHCI_Success);
 800d56a:	2300      	movs	r3, #0
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	372c      	adds	r7, #44	; 0x2c
 800d570:	46bd      	mov	sp, r7
 800d572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d576:	4770      	bx	lr
 800d578:	58004000 	.word	0x58004000
 800d57c:	a94656b9 	.word	0xa94656b9

0800d580 <shci_init>:
static void TlUserEvtReceived(TL_EvtPacket_t *shcievt);
static void TlInit( TL_CmdPacket_t * p_cmdbuffer );

/* Interface ------- ---------------------------------------------------------*/
void shci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 800d580:	b580      	push	{r7, lr}
 800d582:	b082      	sub	sp, #8
 800d584:	af00      	add	r7, sp, #0
 800d586:	6078      	str	r0, [r7, #4]
 800d588:	6039      	str	r1, [r7, #0]
  StatusNotCallBackFunction = ((SHCI_TL_HciInitConf_t *)pConf)->StatusNotCallBack;
 800d58a:	683b      	ldr	r3, [r7, #0]
 800d58c:	685b      	ldr	r3, [r3, #4]
 800d58e:	4a08      	ldr	r2, [pc, #32]	; (800d5b0 <shci_init+0x30>)
 800d590:	6013      	str	r3, [r2, #0]
  shciContext.UserEvtRx = UserEvtRx;
 800d592:	4a08      	ldr	r2, [pc, #32]	; (800d5b4 <shci_init+0x34>)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	61d3      	str	r3, [r2, #28]

  shci_register_io_bus (&shciContext.io);
 800d598:	4806      	ldr	r0, [pc, #24]	; (800d5b4 <shci_init+0x34>)
 800d59a:	f000 f915 	bl	800d7c8 <shci_register_io_bus>

  TlInit((TL_CmdPacket_t *)(((SHCI_TL_HciInitConf_t *)pConf)->p_cmdbuffer));
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f000 f898 	bl	800d6d8 <TlInit>

  return;
 800d5a8:	bf00      	nop
}
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	20001834 	.word	0x20001834
 800d5b4:	20001814 	.word	0x20001814

0800d5b8 <shci_user_evt_proc>:

void shci_user_evt_proc(void)
{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0

  /**
   * It is more secure to use LST_remove_head()/LST_insert_head() compare to LST_get_next_node()/LST_remove_node()
   * in case the user overwrite the header where the next/prev pointers are located
   */
  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d5be:	4822      	ldr	r0, [pc, #136]	; (800d648 <shci_user_evt_proc+0x90>)
 800d5c0:	f000 f926 	bl	800d810 <LST_is_empty>
 800d5c4:	4603      	mov	r3, r0
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d12b      	bne.n	800d622 <shci_user_evt_proc+0x6a>
 800d5ca:	4b20      	ldr	r3, [pc, #128]	; (800d64c <shci_user_evt_proc+0x94>)
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d027      	beq.n	800d622 <shci_user_evt_proc+0x6a>
  {
    LST_remove_head ( &SHciAsynchEventQueue, (tListNode **)&phcievtbuffer );
 800d5d2:	f107 030c 	add.w	r3, r7, #12
 800d5d6:	4619      	mov	r1, r3
 800d5d8:	481b      	ldr	r0, [pc, #108]	; (800d648 <shci_user_evt_proc+0x90>)
 800d5da:	f000 f9a8 	bl	800d92e <LST_remove_head>

    if (shciContext.UserEvtRx != NULL)
 800d5de:	4b1c      	ldr	r3, [pc, #112]	; (800d650 <shci_user_evt_proc+0x98>)
 800d5e0:	69db      	ldr	r3, [r3, #28]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00c      	beq.n	800d600 <shci_user_evt_proc+0x48>
    {
      UserEvtRxParam.pckt = phcievtbuffer;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	60bb      	str	r3, [r7, #8]
      UserEvtRxParam.status = SHCI_TL_UserEventFlow_Enable;
 800d5ea:	2301      	movs	r3, #1
 800d5ec:	713b      	strb	r3, [r7, #4]
      shciContext.UserEvtRx((void *)&UserEvtRxParam);
 800d5ee:	4b18      	ldr	r3, [pc, #96]	; (800d650 <shci_user_evt_proc+0x98>)
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	1d3a      	adds	r2, r7, #4
 800d5f4:	4610      	mov	r0, r2
 800d5f6:	4798      	blx	r3
      SHCI_TL_UserEventFlow = UserEvtRxParam.status;
 800d5f8:	793a      	ldrb	r2, [r7, #4]
 800d5fa:	4b14      	ldr	r3, [pc, #80]	; (800d64c <shci_user_evt_proc+0x94>)
 800d5fc:	701a      	strb	r2, [r3, #0]
 800d5fe:	e002      	b.n	800d606 <shci_user_evt_proc+0x4e>
    }
    else
    {
      SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d600:	4b12      	ldr	r3, [pc, #72]	; (800d64c <shci_user_evt_proc+0x94>)
 800d602:	2201      	movs	r2, #1
 800d604:	701a      	strb	r2, [r3, #0]
    }

    if(SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable)
 800d606:	4b11      	ldr	r3, [pc, #68]	; (800d64c <shci_user_evt_proc+0x94>)
 800d608:	781b      	ldrb	r3, [r3, #0]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d004      	beq.n	800d618 <shci_user_evt_proc+0x60>
    {
      TL_MM_EvtDone( phcievtbuffer );
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	4618      	mov	r0, r3
 800d612:	f001 f84d 	bl	800e6b0 <TL_MM_EvtDone>
 800d616:	e004      	b.n	800d622 <shci_user_evt_proc+0x6a>
    else
    {
      /**
       * put back the event in the queue
       */
      LST_insert_head ( &SHciAsynchEventQueue, (tListNode *)phcievtbuffer );
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	4619      	mov	r1, r3
 800d61c:	480a      	ldr	r0, [pc, #40]	; (800d648 <shci_user_evt_proc+0x90>)
 800d61e:	f000 f919 	bl	800d854 <LST_insert_head>
    }
  }

  if((LST_is_empty(&SHciAsynchEventQueue) == FALSE) && (SHCI_TL_UserEventFlow != SHCI_TL_UserEventFlow_Disable))
 800d622:	4809      	ldr	r0, [pc, #36]	; (800d648 <shci_user_evt_proc+0x90>)
 800d624:	f000 f8f4 	bl	800d810 <LST_is_empty>
 800d628:	4603      	mov	r3, r0
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d107      	bne.n	800d63e <shci_user_evt_proc+0x86>
 800d62e:	4b07      	ldr	r3, [pc, #28]	; (800d64c <shci_user_evt_proc+0x94>)
 800d630:	781b      	ldrb	r3, [r3, #0]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d003      	beq.n	800d63e <shci_user_evt_proc+0x86>
  {
    shci_notify_asynch_evt((void*) &SHciAsynchEventQueue);
 800d636:	4804      	ldr	r0, [pc, #16]	; (800d648 <shci_user_evt_proc+0x90>)
 800d638:	f7f4 f93b 	bl	80018b2 <shci_notify_asynch_evt>
  }


  return;
 800d63c:	bf00      	nop
 800d63e:	bf00      	nop
}
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	2000023c 	.word	0x2000023c
 800d64c:	2000024c 	.word	0x2000024c
 800d650:	20001814 	.word	0x20001814

0800d654 <shci_send>:

  return;
}

void shci_send( uint16_t cmd_code, uint8_t len_cmd_payload, uint8_t * p_cmd_payload, TL_EvtPacket_t * p_rsp )
{
 800d654:	b580      	push	{r7, lr}
 800d656:	b084      	sub	sp, #16
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60ba      	str	r2, [r7, #8]
 800d65c:	607b      	str	r3, [r7, #4]
 800d65e:	4603      	mov	r3, r0
 800d660:	81fb      	strh	r3, [r7, #14]
 800d662:	460b      	mov	r3, r1
 800d664:	737b      	strb	r3, [r7, #13]
  Cmd_SetStatus(SHCI_TL_CmdBusy);
 800d666:	2000      	movs	r0, #0
 800d668:	f000 f868 	bl	800d73c <Cmd_SetStatus>

  pCmdBuffer->cmdserial.cmd.cmdcode = cmd_code;
 800d66c:	4b17      	ldr	r3, [pc, #92]	; (800d6cc <shci_send+0x78>)
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	89fa      	ldrh	r2, [r7, #14]
 800d672:	f8a3 2009 	strh.w	r2, [r3, #9]
  pCmdBuffer->cmdserial.cmd.plen = len_cmd_payload;
 800d676:	4b15      	ldr	r3, [pc, #84]	; (800d6cc <shci_send+0x78>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	7b7a      	ldrb	r2, [r7, #13]
 800d67c:	72da      	strb	r2, [r3, #11]

  memcpy(pCmdBuffer->cmdserial.cmd.payload, p_cmd_payload, len_cmd_payload );
 800d67e:	4b13      	ldr	r3, [pc, #76]	; (800d6cc <shci_send+0x78>)
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	330c      	adds	r3, #12
 800d684:	7b7a      	ldrb	r2, [r7, #13]
 800d686:	68b9      	ldr	r1, [r7, #8]
 800d688:	4618      	mov	r0, r3
 800d68a:	f002 fa4a 	bl	800fb22 <memcpy>
  CmdRspStatusFlag = SHCI_TL_CMD_RESP_WAIT;
 800d68e:	4b10      	ldr	r3, [pc, #64]	; (800d6d0 <shci_send+0x7c>)
 800d690:	2201      	movs	r2, #1
 800d692:	701a      	strb	r2, [r3, #0]
  shciContext.io.Send(0,0);
 800d694:	4b0f      	ldr	r3, [pc, #60]	; (800d6d4 <shci_send+0x80>)
 800d696:	691b      	ldr	r3, [r3, #16]
 800d698:	2100      	movs	r1, #0
 800d69a:	2000      	movs	r0, #0
 800d69c:	4798      	blx	r3

  shci_cmd_resp_wait(SHCI_TL_DEFAULT_TIMEOUT);
 800d69e:	f248 00e8 	movw	r0, #33000	; 0x80e8
 800d6a2:	f7f4 f91d 	bl	80018e0 <shci_cmd_resp_wait>

  /**
   * The command complete of a system command does not have the header
   * It starts immediately with the evtserial field
   */
  memcpy( &(p_rsp->evtserial), pCmdBuffer, ((TL_EvtSerial_t*)pCmdBuffer)->evt.plen + TL_EVT_HDR_SIZE );
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f103 0008 	add.w	r0, r3, #8
 800d6ac:	4b07      	ldr	r3, [pc, #28]	; (800d6cc <shci_send+0x78>)
 800d6ae:	6819      	ldr	r1, [r3, #0]
 800d6b0:	4b06      	ldr	r3, [pc, #24]	; (800d6cc <shci_send+0x78>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	789b      	ldrb	r3, [r3, #2]
 800d6b6:	3303      	adds	r3, #3
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	f002 fa32 	bl	800fb22 <memcpy>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d6be:	2001      	movs	r0, #1
 800d6c0:	f000 f83c 	bl	800d73c <Cmd_SetStatus>

  return;
 800d6c4:	bf00      	nop
}
 800d6c6:	3710      	adds	r7, #16
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	bd80      	pop	{r7, pc}
 800d6cc:	20000248 	.word	0x20000248
 800d6d0:	20001838 	.word	0x20001838
 800d6d4:	20001814 	.word	0x20001814

0800d6d8 <TlInit>:

/* Private functions ---------------------------------------------------------*/
static void TlInit( TL_CmdPacket_t * p_cmdbuffer )
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b086      	sub	sp, #24
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  TL_SYS_InitConf_t Conf;

  pCmdBuffer = p_cmdbuffer;
 800d6e0:	4a10      	ldr	r2, [pc, #64]	; (800d724 <TlInit+0x4c>)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6013      	str	r3, [r2, #0]

  LST_init_head (&SHciAsynchEventQueue);
 800d6e6:	4810      	ldr	r0, [pc, #64]	; (800d728 <TlInit+0x50>)
 800d6e8:	f000 f882 	bl	800d7f0 <LST_init_head>

  Cmd_SetStatus(SHCI_TL_CmdAvailable);
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	f000 f825 	bl	800d73c <Cmd_SetStatus>

  SHCI_TL_UserEventFlow = SHCI_TL_UserEventFlow_Enable;
 800d6f2:	4b0e      	ldr	r3, [pc, #56]	; (800d72c <TlInit+0x54>)
 800d6f4:	2201      	movs	r2, #1
 800d6f6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  if (shciContext.io.Init)
 800d6f8:	4b0d      	ldr	r3, [pc, #52]	; (800d730 <TlInit+0x58>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00c      	beq.n	800d71a <TlInit+0x42>
  {

    Conf.p_cmdbuffer = (uint8_t *)p_cmdbuffer;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	617b      	str	r3, [r7, #20]
    Conf.IoBusCallBackCmdEvt = TlCmdEvtReceived;
 800d704:	4b0b      	ldr	r3, [pc, #44]	; (800d734 <TlInit+0x5c>)
 800d706:	60fb      	str	r3, [r7, #12]
    Conf.IoBusCallBackUserEvt = TlUserEvtReceived;
 800d708:	4b0b      	ldr	r3, [pc, #44]	; (800d738 <TlInit+0x60>)
 800d70a:	613b      	str	r3, [r7, #16]
    shciContext.io.Init(&Conf);
 800d70c:	4b08      	ldr	r3, [pc, #32]	; (800d730 <TlInit+0x58>)
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f107 020c 	add.w	r2, r7, #12
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
  }

  return;
 800d718:	bf00      	nop
 800d71a:	bf00      	nop
}
 800d71c:	3718      	adds	r7, #24
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop
 800d724:	20000248 	.word	0x20000248
 800d728:	2000023c 	.word	0x2000023c
 800d72c:	2000024c 	.word	0x2000024c
 800d730:	20001814 	.word	0x20001814
 800d734:	0800d78d 	.word	0x0800d78d
 800d738:	0800d7a5 	.word	0x0800d7a5

0800d73c <Cmd_SetStatus>:

static void Cmd_SetStatus(SHCI_TL_CmdStatus_t shcicmdstatus)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b082      	sub	sp, #8
 800d740:	af00      	add	r7, sp, #0
 800d742:	4603      	mov	r3, r0
 800d744:	71fb      	strb	r3, [r7, #7]
  if(shcicmdstatus == SHCI_TL_CmdBusy)
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10b      	bne.n	800d764 <Cmd_SetStatus+0x28>
  {
    if(StatusNotCallBackFunction != 0)
 800d74c:	4b0d      	ldr	r3, [pc, #52]	; (800d784 <Cmd_SetStatus+0x48>)
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <Cmd_SetStatus+0x20>
    {
      StatusNotCallBackFunction( SHCI_TL_CmdBusy );
 800d754:	4b0b      	ldr	r3, [pc, #44]	; (800d784 <Cmd_SetStatus+0x48>)
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	2000      	movs	r0, #0
 800d75a:	4798      	blx	r3
    }
    SHCICmdStatus = SHCI_TL_CmdBusy;
 800d75c:	4b0a      	ldr	r3, [pc, #40]	; (800d788 <Cmd_SetStatus+0x4c>)
 800d75e:	2200      	movs	r2, #0
 800d760:	701a      	strb	r2, [r3, #0]
    {
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
    }
  }

  return;
 800d762:	e00b      	b.n	800d77c <Cmd_SetStatus+0x40>
    SHCICmdStatus = SHCI_TL_CmdAvailable;
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <Cmd_SetStatus+0x4c>)
 800d766:	2201      	movs	r2, #1
 800d768:	701a      	strb	r2, [r3, #0]
    if(StatusNotCallBackFunction != 0)
 800d76a:	4b06      	ldr	r3, [pc, #24]	; (800d784 <Cmd_SetStatus+0x48>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d004      	beq.n	800d77c <Cmd_SetStatus+0x40>
      StatusNotCallBackFunction( SHCI_TL_CmdAvailable );
 800d772:	4b04      	ldr	r3, [pc, #16]	; (800d784 <Cmd_SetStatus+0x48>)
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	2001      	movs	r0, #1
 800d778:	4798      	blx	r3
  return;
 800d77a:	bf00      	nop
 800d77c:	bf00      	nop
}
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	20001834 	.word	0x20001834
 800d788:	20000244 	.word	0x20000244

0800d78c <TlCmdEvtReceived>:

static void TlCmdEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b082      	sub	sp, #8
 800d790:	af00      	add	r7, sp, #0
 800d792:	6078      	str	r0, [r7, #4]
  (void)(shcievt);
  shci_cmd_resp_release(0); /**< Notify the application the Cmd response has been received */
 800d794:	2000      	movs	r0, #0
 800d796:	f7f4 f898 	bl	80018ca <shci_cmd_resp_release>

  return;
 800d79a:	bf00      	nop
}
 800d79c:	3708      	adds	r7, #8
 800d79e:	46bd      	mov	sp, r7
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <TlUserEvtReceived>:

static void TlUserEvtReceived(TL_EvtPacket_t *shcievt)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&SHciAsynchEventQueue, (tListNode *)shcievt);
 800d7ac:	6879      	ldr	r1, [r7, #4]
 800d7ae:	4805      	ldr	r0, [pc, #20]	; (800d7c4 <TlUserEvtReceived+0x20>)
 800d7b0:	f000 f876 	bl	800d8a0 <LST_insert_tail>
  shci_notify_asynch_evt((void*) &SHciAsynchEventQueue); /**< Notify the application a full HCI event has been received */
 800d7b4:	4803      	ldr	r0, [pc, #12]	; (800d7c4 <TlUserEvtReceived+0x20>)
 800d7b6:	f7f4 f87c 	bl	80018b2 <shci_notify_asynch_evt>

  return;
 800d7ba:	bf00      	nop
}
 800d7bc:	3708      	adds	r7, #8
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	2000023c 	.word	0x2000023c

0800d7c8 <shci_register_io_bus>:
#include "shci_tl.h"
#include "tl.h"


void shci_register_io_bus(tSHciIO* fops)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b083      	sub	sp, #12
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  /* Register IO bus services */
  fops->Init    = TL_SYS_Init;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a05      	ldr	r2, [pc, #20]	; (800d7e8 <shci_register_io_bus+0x20>)
 800d7d4:	601a      	str	r2, [r3, #0]
  fops->Send    = TL_SYS_SendCmd;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a04      	ldr	r2, [pc, #16]	; (800d7ec <shci_register_io_bus+0x24>)
 800d7da:	611a      	str	r2, [r3, #16]

  return;
 800d7dc:	bf00      	nop
}
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr
 800d7e8:	0800e53d 	.word	0x0800e53d
 800d7ec:	0800e591 	.word	0x0800e591

0800d7f0 <LST_init_head>:

/******************************************************************************
 * Function Definitions 
 ******************************************************************************/
void LST_init_head (tListNode * listHead)
{
 800d7f0:	b480      	push	{r7}
 800d7f2:	b083      	sub	sp, #12
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
  listHead->next = listHead;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	687a      	ldr	r2, [r7, #4]
 800d7fc:	601a      	str	r2, [r3, #0]
  listHead->prev = listHead;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	687a      	ldr	r2, [r7, #4]
 800d802:	605a      	str	r2, [r3, #4]
}
 800d804:	bf00      	nop
 800d806:	370c      	adds	r7, #12
 800d808:	46bd      	mov	sp, r7
 800d80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80e:	4770      	bx	lr

0800d810 <LST_is_empty>:

uint8_t LST_is_empty (tListNode * listHead)
{
 800d810:	b480      	push	{r7}
 800d812:	b087      	sub	sp, #28
 800d814:	af00      	add	r7, sp, #0
 800d816:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d818:	f3ef 8310 	mrs	r3, PRIMASK
 800d81c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d81e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;
  uint8_t return_value;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d820:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d822:	b672      	cpsid	i
}
 800d824:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  if(listHead->next == listHead)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	687a      	ldr	r2, [r7, #4]
 800d82c:	429a      	cmp	r2, r3
 800d82e:	d102      	bne.n	800d836 <LST_is_empty+0x26>
  {
    return_value = TRUE;
 800d830:	2301      	movs	r3, #1
 800d832:	75fb      	strb	r3, [r7, #23]
 800d834:	e001      	b.n	800d83a <LST_is_empty+0x2a>
  }
  else
  {
    return_value = FALSE;
 800d836:	2300      	movs	r3, #0
 800d838:	75fb      	strb	r3, [r7, #23]
 800d83a:	693b      	ldr	r3, [r7, #16]
 800d83c:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d83e:	68bb      	ldr	r3, [r7, #8]
 800d840:	f383 8810 	msr	PRIMASK, r3
}
 800d844:	bf00      	nop
  }
  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/

  return return_value;
 800d846:	7dfb      	ldrb	r3, [r7, #23]
}
 800d848:	4618      	mov	r0, r3
 800d84a:	371c      	adds	r7, #28
 800d84c:	46bd      	mov	sp, r7
 800d84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d852:	4770      	bx	lr

0800d854 <LST_insert_head>:

void LST_insert_head (tListNode * listHead, tListNode * node)
{
 800d854:	b480      	push	{r7}
 800d856:	b087      	sub	sp, #28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d85e:	f3ef 8310 	mrs	r3, PRIMASK
 800d862:	60fb      	str	r3, [r7, #12]
  return(result);
 800d864:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d866:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d868:	b672      	cpsid	i
}
 800d86a:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead->next;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	681a      	ldr	r2, [r3, #0]
 800d870:	683b      	ldr	r3, [r7, #0]
 800d872:	601a      	str	r2, [r3, #0]
  node->prev = listHead;
 800d874:	683b      	ldr	r3, [r7, #0]
 800d876:	687a      	ldr	r2, [r7, #4]
 800d878:	605a      	str	r2, [r3, #4]
  listHead->next = node;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	605a      	str	r2, [r3, #4]
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	f383 8810 	msr	PRIMASK, r3
}
 800d892:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d894:	bf00      	nop
 800d896:	371c      	adds	r7, #28
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <LST_insert_tail>:


void LST_insert_tail (tListNode * listHead, tListNode * node)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b087      	sub	sp, #28
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
 800d8a8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8aa:	f3ef 8310 	mrs	r3, PRIMASK
 800d8ae:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d8b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8b4:	b672      	cpsid	i
}
 800d8b6:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  node->next = listHead;
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	601a      	str	r2, [r3, #0]
  node->prev = listHead->prev;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	685a      	ldr	r2, [r3, #4]
 800d8c2:	683b      	ldr	r3, [r7, #0]
 800d8c4:	605a      	str	r2, [r3, #4]
  listHead->prev = node;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	683a      	ldr	r2, [r7, #0]
 800d8ca:	605a      	str	r2, [r3, #4]
  (node->prev)->next = node;
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	685b      	ldr	r3, [r3, #4]
 800d8d0:	683a      	ldr	r2, [r7, #0]
 800d8d2:	601a      	str	r2, [r3, #0]
 800d8d4:	697b      	ldr	r3, [r7, #20]
 800d8d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d8d8:	693b      	ldr	r3, [r7, #16]
 800d8da:	f383 8810 	msr	PRIMASK, r3
}
 800d8de:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d8e0:	bf00      	nop
 800d8e2:	371c      	adds	r7, #28
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ea:	4770      	bx	lr

0800d8ec <LST_remove_node>:


void LST_remove_node (tListNode * node)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b087      	sub	sp, #28
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d8f4:	f3ef 8310 	mrs	r3, PRIMASK
 800d8f8:	60fb      	str	r3, [r7, #12]
  return(result);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d8fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d8fe:	b672      	cpsid	i
}
 800d900:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  (node->prev)->next = node->next;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	685b      	ldr	r3, [r3, #4]
 800d906:	687a      	ldr	r2, [r7, #4]
 800d908:	6812      	ldr	r2, [r2, #0]
 800d90a:	601a      	str	r2, [r3, #0]
  (node->next)->prev = node->prev;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	687a      	ldr	r2, [r7, #4]
 800d912:	6852      	ldr	r2, [r2, #4]
 800d914:	605a      	str	r2, [r3, #4]
 800d916:	697b      	ldr	r3, [r7, #20]
 800d918:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d91a:	693b      	ldr	r3, [r7, #16]
 800d91c:	f383 8810 	msr	PRIMASK, r3
}
 800d920:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d922:	bf00      	nop
 800d924:	371c      	adds	r7, #28
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <LST_remove_head>:


void LST_remove_head (tListNode * listHead, tListNode ** node )
{
 800d92e:	b580      	push	{r7, lr}
 800d930:	b086      	sub	sp, #24
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
 800d936:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d938:	f3ef 8310 	mrs	r3, PRIMASK
 800d93c:	60fb      	str	r3, [r7, #12]
  return(result);
 800d93e:	68fb      	ldr	r3, [r7, #12]
  uint32_t primask_bit;

  primask_bit = __get_PRIMASK();  /**< backup PRIMASK bit */
 800d940:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800d942:	b672      	cpsid	i
}
 800d944:	bf00      	nop
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  *node = listHead->next;
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	601a      	str	r2, [r3, #0]
  LST_remove_node (listHead->next);
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	4618      	mov	r0, r3
 800d954:	f7ff ffca 	bl	800d8ec <LST_remove_node>
 800d958:	697b      	ldr	r3, [r7, #20]
 800d95a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d95c:	693b      	ldr	r3, [r7, #16]
 800d95e:	f383 8810 	msr	PRIMASK, r3
}
 800d962:	bf00      	nop

  __set_PRIMASK(primask_bit);     /**< Restore PRIMASK bit*/
}
 800d964:	bf00      	nop
 800d966:	3718      	adds	r7, #24
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <CircularQueue_Init>:
  * @param  queueSize:  Size of Queue Buffer
  * @param  elementSize: Size of an element in the queue. if =0, the queue will manage variable sizze elements
  * @retval   always 0
  */
int CircularQueue_Init(queue_t *q, uint8_t* queueBuffer, uint32_t queueSize, uint16_t elementSize, uint8_t optionFlags)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b085      	sub	sp, #20
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	607a      	str	r2, [r7, #4]
 800d978:	807b      	strh	r3, [r7, #2]
  q->qBuff = queueBuffer;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	68ba      	ldr	r2, [r7, #8]
 800d97e:	601a      	str	r2, [r3, #0]
  q->first = 0;
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2200      	movs	r2, #0
 800d984:	60da      	str	r2, [r3, #12]
  q->last = 0; /* queueSize-1; */
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	2200      	movs	r2, #0
 800d98a:	611a      	str	r2, [r3, #16]
  q->byteCount = 0;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2200      	movs	r2, #0
 800d990:	615a      	str	r2, [r3, #20]
  q->elementCount = 0;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	2200      	movs	r2, #0
 800d996:	619a      	str	r2, [r3, #24]
  q->queueMaxSize = queueSize;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	687a      	ldr	r2, [r7, #4]
 800d99c:	605a      	str	r2, [r3, #4]
  q->elementSize = elementSize;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	887a      	ldrh	r2, [r7, #2]
 800d9a2:	811a      	strh	r2, [r3, #8]
  q->optionFlags = optionFlags;
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	7e3a      	ldrb	r2, [r7, #24]
 800d9a8:	771a      	strb	r2, [r3, #28]

   if ((optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG) && q-> elementSize)
 800d9aa:	7e3b      	ldrb	r3, [r7, #24]
 800d9ac:	f003 0302 	and.w	r3, r3, #2
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d006      	beq.n	800d9c2 <CircularQueue_Init+0x56>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	891b      	ldrh	r3, [r3, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <CircularQueue_Init+0x56>
   {
    /* can not deal with splitting at the end of buffer with fixed size element */
    return -1;
 800d9bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c0:	e000      	b.n	800d9c4 <CircularQueue_Init+0x58>
  }
  return 0;
 800d9c2:	2300      	movs	r3, #0
}
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	3714      	adds	r7, #20
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ce:	4770      	bx	lr

0800d9d0 <CircularQueue_Add>:
  * @param  elementSize:  Size of element to be added to the queue. Only used if the queue manage variable size elements
  * @param  nbElements:  number of elements in the in buffer pointed by x
  * @retval  pointer on last element just added to the queue, NULL if the element to be added do not fit in the queue (too big)
  */
uint8_t* CircularQueue_Add(queue_t *q, uint8_t* x, uint16_t elementSize, uint32_t nbElements)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b08e      	sub	sp, #56	; 0x38
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	60f8      	str	r0, [r7, #12]
 800d9d8:	60b9      	str	r1, [r7, #8]
 800d9da:	603b      	str	r3, [r7, #0]
 800d9dc:	4613      	mov	r3, r2
 800d9de:	80fb      	strh	r3, [r7, #6]

  uint8_t* ptr = NULL;                      /* fct return ptr to the element freshly added, if no room fct return NULL */
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	623b      	str	r3, [r7, #32]
  uint16_t curElementSize = 0;              /* the size of the element currently  stored at q->last position */
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	86fb      	strh	r3, [r7, #54]	; 0x36
  uint8_t  elemSizeStorageRoom  = 0 ;       /* Indicate the header (which contain only size) of element in case of varaibale size element (q->elementsize == 0) */
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	77fb      	strb	r3, [r7, #31]
  uint32_t curBuffPosition;                  /* the current position in the queue buffer */
  uint32_t i;                               /* loop counter */
  uint32_t NbBytesToCopy = 0, NbCopiedBytes = 0 ; /* Indicators for copying bytes in queue */
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	62bb      	str	r3, [r7, #40]	; 0x28
 800d9f0:	2300      	movs	r3, #0
 800d9f2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t eob_free_size;                         /* Eof End of Quque Buffer Free Size */
  uint8_t  wrap_will_occur = 0;                   /* indicate if a wrap around will occurs */
 800d9f4:	2300      	movs	r3, #0
 800d9f6:	77bb      	strb	r3, [r7, #30]
  uint8_t  wrapped_element_eob_size;              /* In case of Wrap around, indicate size of parta of element that fit at thened of the queuue  buffer */
  uint16_t overhead = 0;                          /* In case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG or CIRCULAR_QUEUE_NO_WRAP_FLAG options, 
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	83bb      	strh	r3, [r7, #28]
                                                     indcate the size overhead that will be generated by adding the element with wrap management (split or no wrap ) */ 
  
  
  elemSizeStorageRoom  = (q->elementSize == 0) ? 2 : 0;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	891b      	ldrh	r3, [r3, #8]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <CircularQueue_Add+0x38>
 800da04:	2302      	movs	r3, #2
 800da06:	e000      	b.n	800da0a <CircularQueue_Add+0x3a>
 800da08:	2300      	movs	r3, #0
 800da0a:	77fb      	strb	r3, [r7, #31]
  /* retrieve the size of last element sored: the value stored at the beginning of the queue element if element size is variable otherwise take it from fixed element Size member */
  if (q->byteCount)
 800da0c:	68fb      	ldr	r3, [r7, #12]
 800da0e:	695b      	ldr	r3, [r3, #20]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d02a      	beq.n	800da6a <CircularQueue_Add+0x9a>
  {
    curElementSize = (q->elementSize == 0) ? q->qBuff[q->last] + ((q->qBuff[MOD((q->last+1), q->queueMaxSize)])<<8) + 2 : q->elementSize;
 800da14:	68fb      	ldr	r3, [r7, #12]
 800da16:	891b      	ldrh	r3, [r3, #8]
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d123      	bne.n	800da64 <CircularQueue_Add+0x94>
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	681a      	ldr	r2, [r3, #0]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	691b      	ldr	r3, [r3, #16]
 800da24:	4413      	add	r3, r2
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	b29a      	uxth	r2, r3
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	6819      	ldr	r1, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	691b      	ldr	r3, [r3, #16]
 800da32:	1c58      	adds	r0, r3, #1
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	4298      	cmp	r0, r3
 800da3a:	d306      	bcc.n	800da4a <CircularQueue_Add+0x7a>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	6918      	ldr	r0, [r3, #16]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	685b      	ldr	r3, [r3, #4]
 800da44:	1ac3      	subs	r3, r0, r3
 800da46:	3301      	adds	r3, #1
 800da48:	e002      	b.n	800da50 <CircularQueue_Add+0x80>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	3301      	adds	r3, #1
 800da50:	440b      	add	r3, r1
 800da52:	781b      	ldrb	r3, [r3, #0]
 800da54:	b29b      	uxth	r3, r3
 800da56:	021b      	lsls	r3, r3, #8
 800da58:	b29b      	uxth	r3, r3
 800da5a:	4413      	add	r3, r2
 800da5c:	b29b      	uxth	r3, r3
 800da5e:	3302      	adds	r3, #2
 800da60:	b29b      	uxth	r3, r3
 800da62:	e001      	b.n	800da68 <CircularQueue_Add+0x98>
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	891b      	ldrh	r3, [r3, #8]
 800da68:	86fb      	strh	r3, [r7, #54]	; 0x36
  }
  /* if queue element have fixed size , reset the elementSize arg with fixed element size value */
  if (q->elementSize > 0)               
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	891b      	ldrh	r3, [r3, #8]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d002      	beq.n	800da78 <CircularQueue_Add+0xa8>
  {
    elementSize = q->elementSize;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	891b      	ldrh	r3, [r3, #8]
 800da76:	80fb      	strh	r3, [r7, #6]
  }

   eob_free_size = (q->last >= q->first) ? q->queueMaxSize - (q->last + curElementSize) : 0;
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	691a      	ldr	r2, [r3, #16]
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	429a      	cmp	r2, r3
 800da82:	d307      	bcc.n	800da94 <CircularQueue_Add+0xc4>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	685a      	ldr	r2, [r3, #4]
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	6919      	ldr	r1, [r3, #16]
 800da8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800da8e:	440b      	add	r3, r1
 800da90:	1ad3      	subs	r3, r2, r3
 800da92:	e000      	b.n	800da96 <CircularQueue_Add+0xc6>
 800da94:	2300      	movs	r3, #0
 800da96:	61bb      	str	r3, [r7, #24]

   /* check how many bytes of wrapped element (if anay) are at end of buffer */
   wrapped_element_eob_size = (((elementSize + elemSizeStorageRoom )*nbElements) < eob_free_size) ? 0 : (eob_free_size % (elementSize + elemSizeStorageRoom));
 800da98:	88fa      	ldrh	r2, [r7, #6]
 800da9a:	7ffb      	ldrb	r3, [r7, #31]
 800da9c:	4413      	add	r3, r2
 800da9e:	461a      	mov	r2, r3
 800daa0:	683b      	ldr	r3, [r7, #0]
 800daa2:	fb02 f303 	mul.w	r3, r2, r3
 800daa6:	69ba      	ldr	r2, [r7, #24]
 800daa8:	429a      	cmp	r2, r3
 800daaa:	d80b      	bhi.n	800dac4 <CircularQueue_Add+0xf4>
 800daac:	88fa      	ldrh	r2, [r7, #6]
 800daae:	7ffb      	ldrb	r3, [r7, #31]
 800dab0:	4413      	add	r3, r2
 800dab2:	461a      	mov	r2, r3
 800dab4:	69bb      	ldr	r3, [r7, #24]
 800dab6:	fbb3 f1f2 	udiv	r1, r3, r2
 800daba:	fb01 f202 	mul.w	r2, r1, r2
 800dabe:	1a9b      	subs	r3, r3, r2
 800dac0:	b2db      	uxtb	r3, r3
 800dac2:	e000      	b.n	800dac6 <CircularQueue_Add+0xf6>
 800dac4:	2300      	movs	r3, #0
 800dac6:	75fb      	strb	r3, [r7, #23]
   wrap_will_occur  = wrapped_element_eob_size > elemSizeStorageRoom;
 800dac8:	7dfa      	ldrb	r2, [r7, #23]
 800daca:	7ffb      	ldrb	r3, [r7, #31]
 800dacc:	429a      	cmp	r2, r3
 800dace:	bf8c      	ite	hi
 800dad0:	2301      	movhi	r3, #1
 800dad2:	2300      	movls	r3, #0
 800dad4:	b2db      	uxtb	r3, r3
 800dad6:	77bb      	strb	r3, [r7, #30]

   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)) ? wrapped_element_eob_size : overhead;
 800dad8:	7fbb      	ldrb	r3, [r7, #30]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d008      	beq.n	800daf0 <CircularQueue_Add+0x120>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	7f1b      	ldrb	r3, [r3, #28]
 800dae2:	f003 0301 	and.w	r3, r3, #1
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d002      	beq.n	800daf0 <CircularQueue_Add+0x120>
 800daea:	7dfb      	ldrb	r3, [r7, #23]
 800daec:	b29b      	uxth	r3, r3
 800daee:	e000      	b.n	800daf2 <CircularQueue_Add+0x122>
 800daf0:	8bbb      	ldrh	r3, [r7, #28]
 800daf2:	83bb      	strh	r3, [r7, #28]
   overhead = (wrap_will_occur && (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)) ? elemSizeStorageRoom  : overhead;
 800daf4:	7fbb      	ldrb	r3, [r7, #30]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d008      	beq.n	800db0c <CircularQueue_Add+0x13c>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	7f1b      	ldrb	r3, [r3, #28]
 800dafe:	f003 0302 	and.w	r3, r3, #2
 800db02:	2b00      	cmp	r3, #0
 800db04:	d002      	beq.n	800db0c <CircularQueue_Add+0x13c>
 800db06:	7ffb      	ldrb	r3, [r7, #31]
 800db08:	b29b      	uxth	r3, r3
 800db0a:	e000      	b.n	800db0e <CircularQueue_Add+0x13e>
 800db0c:	8bbb      	ldrh	r3, [r7, #28]
 800db0e:	83bb      	strh	r3, [r7, #28]
   
   
  /* Store now the elements if ennough room for all elements */
  if (elementSize && ((q->byteCount + ((elementSize + elemSizeStorageRoom )*nbElements) + overhead) <= q->queueMaxSize)) 
 800db10:	88fb      	ldrh	r3, [r7, #6]
 800db12:	2b00      	cmp	r3, #0
 800db14:	f000 817e 	beq.w	800de14 <CircularQueue_Add+0x444>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	695a      	ldr	r2, [r3, #20]
 800db1c:	88f9      	ldrh	r1, [r7, #6]
 800db1e:	7ffb      	ldrb	r3, [r7, #31]
 800db20:	440b      	add	r3, r1
 800db22:	4619      	mov	r1, r3
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	fb01 f303 	mul.w	r3, r1, r3
 800db2a:	441a      	add	r2, r3
 800db2c:	8bbb      	ldrh	r3, [r7, #28]
 800db2e:	441a      	add	r2, r3
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	429a      	cmp	r2, r3
 800db36:	f200 816d 	bhi.w	800de14 <CircularQueue_Add+0x444>
  { 
    /* loop to add all elements  */
    for (i=0; i < nbElements; i++) 
 800db3a:	2300      	movs	r3, #0
 800db3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db3e:	e14a      	b.n	800ddd6 <CircularQueue_Add+0x406>
    {
      q->last = MOD ((q->last + curElementSize),q->queueMaxSize);
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	691a      	ldr	r2, [r3, #16]
 800db44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db46:	441a      	add	r2, r3
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	429a      	cmp	r2, r3
 800db4e:	d307      	bcc.n	800db60 <CircularQueue_Add+0x190>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	691a      	ldr	r2, [r3, #16]
 800db54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db56:	441a      	add	r2, r3
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	685b      	ldr	r3, [r3, #4]
 800db5c:	1ad3      	subs	r3, r2, r3
 800db5e:	e003      	b.n	800db68 <CircularQueue_Add+0x198>
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	691a      	ldr	r2, [r3, #16]
 800db64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800db66:	4413      	add	r3, r2
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	6113      	str	r3, [r2, #16]
      curBuffPosition = q->last;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	691b      	ldr	r3, [r3, #16]
 800db70:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* store the element  */
      /* store first the element size if element size is variable */
      if (q->elementSize == 0) 
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	891b      	ldrh	r3, [r3, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d130      	bne.n	800dbdc <CircularQueue_Add+0x20c>
      {
        q->qBuff[curBuffPosition++]= elementSize & 0xFF;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db80:	1c59      	adds	r1, r3, #1
 800db82:	6339      	str	r1, [r7, #48]	; 0x30
 800db84:	4413      	add	r3, r2
 800db86:	88fa      	ldrh	r2, [r7, #6]
 800db88:	b2d2      	uxtb	r2, r2
 800db8a:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	685b      	ldr	r3, [r3, #4]
 800db90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db92:	429a      	cmp	r2, r3
 800db94:	d304      	bcc.n	800dba0 <CircularQueue_Add+0x1d0>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	685b      	ldr	r3, [r3, #4]
 800db9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db9c:	1ad3      	subs	r3, r2, r3
 800db9e:	e000      	b.n	800dba2 <CircularQueue_Add+0x1d2>
 800dba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dba2:	633b      	str	r3, [r7, #48]	; 0x30
        q->qBuff[curBuffPosition++]= (elementSize & 0xFF00) >> 8 ;
 800dba4:	88fb      	ldrh	r3, [r7, #6]
 800dba6:	0a1b      	lsrs	r3, r3, #8
 800dba8:	b298      	uxth	r0, r3
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	681a      	ldr	r2, [r3, #0]
 800dbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbb0:	1c59      	adds	r1, r3, #1
 800dbb2:	6339      	str	r1, [r7, #48]	; 0x30
 800dbb4:	4413      	add	r3, r2
 800dbb6:	b2c2      	uxtb	r2, r0
 800dbb8:	701a      	strb	r2, [r3, #0]
        curBuffPosition = MOD(curBuffPosition, q->queueMaxSize);
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	685b      	ldr	r3, [r3, #4]
 800dbbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbc0:	429a      	cmp	r2, r3
 800dbc2:	d304      	bcc.n	800dbce <CircularQueue_Add+0x1fe>
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	685b      	ldr	r3, [r3, #4]
 800dbc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbca:	1ad3      	subs	r3, r2, r3
 800dbcc:	e000      	b.n	800dbd0 <CircularQueue_Add+0x200>
 800dbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd0:	633b      	str	r3, [r7, #48]	; 0x30
        q->byteCount += 2;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	695b      	ldr	r3, [r3, #20]
 800dbd6:	1c9a      	adds	r2, r3, #2
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	615a      	str	r2, [r3, #20]
      }
      
      /* Identify number of bytes of copy takeing account possible wrap, in this case NbBytesToCopy will contains size that fit at end of the queue buffer */
      NbBytesToCopy = MIN((q->queueMaxSize-curBuffPosition),elementSize);
 800dbdc:	88fa      	ldrh	r2, [r7, #6]
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6859      	ldr	r1, [r3, #4]
 800dbe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe4:	1acb      	subs	r3, r1, r3
 800dbe6:	4293      	cmp	r3, r2
 800dbe8:	bf28      	it	cs
 800dbea:	4613      	movcs	r3, r2
 800dbec:	62bb      	str	r3, [r7, #40]	; 0x28
      /* check if no wrap (NbBytesToCopy == elementSize) or if Wrap and no spsicf option; 
         In this case part of data will copied at the end of the buffer and the rest a the beginning */
      if ((NbBytesToCopy == elementSize) || ((NbBytesToCopy < elementSize) && (q->optionFlags == CIRCULAR_QUEUE_NO_FLAG)))
 800dbee:	88fb      	ldrh	r3, [r7, #6]
 800dbf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbf2:	429a      	cmp	r2, r3
 800dbf4:	d007      	beq.n	800dc06 <CircularQueue_Add+0x236>
 800dbf6:	88fb      	ldrh	r3, [r7, #6]
 800dbf8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d225      	bcs.n	800dc4a <CircularQueue_Add+0x27a>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	7f1b      	ldrb	r3, [r3, #28]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d121      	bne.n	800dc4a <CircularQueue_Add+0x27a>
      {
        /* Copy First part (or emtire buffer ) from current position up to the end of the buffer queue (or before if enough room)  */
        memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	681a      	ldr	r2, [r3, #0]
 800dc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0c:	18d0      	adds	r0, r2, r3
 800dc0e:	88fb      	ldrh	r3, [r7, #6]
 800dc10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dc12:	fb02 f303 	mul.w	r3, r2, r3
 800dc16:	68ba      	ldr	r2, [r7, #8]
 800dc18:	4413      	add	r3, r2
 800dc1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dc1c:	4619      	mov	r1, r3
 800dc1e:	f001 ff80 	bl	800fb22 <memcpy>
        /* Adjust bytes count */
        q->byteCount += NbBytesToCopy;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	695a      	ldr	r2, [r3, #20]
 800dc26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc28:	441a      	add	r2, r3
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	615a      	str	r2, [r3, #20]
        /* Wrap */
        curBuffPosition = 0; 
 800dc2e:	2300      	movs	r3, #0
 800dc30:	633b      	str	r3, [r7, #48]	; 0x30
        /* set NbCopiedBytes bytes with  ampount copied */
        NbCopiedBytes = NbBytesToCopy;
 800dc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc34:	627b      	str	r3, [r7, #36]	; 0x24
        /* set the rest to copy if wrao , if no wrap will be 0 */
        NbBytesToCopy = elementSize - NbBytesToCopy;
 800dc36:	88fa      	ldrh	r2, [r7, #6]
 800dc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc3a:	1ad3      	subs	r3, r2, r3
 800dc3c:	62bb      	str	r3, [r7, #40]	; 0x28
        /* set the current element Size, will be used to calaculate next last position at beginning of loop */
        curElementSize = (elementSize) + elemSizeStorageRoom ;
 800dc3e:	7ffb      	ldrb	r3, [r7, #31]
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	88fb      	ldrh	r3, [r7, #6]
 800dc44:	4413      	add	r3, r2
 800dc46:	86fb      	strh	r3, [r7, #54]	; 0x36
 800dc48:	e0a4      	b.n	800dd94 <CircularQueue_Add+0x3c4>
      }
      else if (NbBytesToCopy)  /* We have a wrap  to manage */
 800dc4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	f000 80a1 	beq.w	800dd94 <CircularQueue_Add+0x3c4>
      {
       /* case of CIRCULAR_QUEUE_NO_WRAP_FLAG option */
         if (q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	7f1b      	ldrb	r3, [r3, #28]
 800dc56:	f003 0301 	and.w	r3, r3, #1
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d03a      	beq.n	800dcd4 <CircularQueue_Add+0x304>
        {
          /* if element size are variable and NO_WRAP option, Invalidate end of buffer setting 0xFFFF size*/
          if (q->elementSize == 0)
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	891b      	ldrh	r3, [r3, #8]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d10d      	bne.n	800dc82 <CircularQueue_Add+0x2b2>
          {
             q->qBuff[curBuffPosition-2] = 0xFF;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681a      	ldr	r2, [r3, #0]
 800dc6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc6c:	3b02      	subs	r3, #2
 800dc6e:	4413      	add	r3, r2
 800dc70:	22ff      	movs	r2, #255	; 0xff
 800dc72:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = 0xFF;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	681a      	ldr	r2, [r3, #0]
 800dc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7a:	3b01      	subs	r3, #1
 800dc7c:	4413      	add	r3, r2
 800dc7e:	22ff      	movs	r2, #255	; 0xff
 800dc80:	701a      	strb	r2, [r3, #0]
          }
          q->byteCount += NbBytesToCopy;  /* invalid data at the end of buffer are take into account in byteCount */
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	695a      	ldr	r2, [r3, #20]
 800dc86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc88:	441a      	add	r2, r3
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	615a      	str	r2, [r3, #20]
          /* No bytes coped a the end of buffer */
          NbCopiedBytes = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	627b      	str	r3, [r7, #36]	; 0x24
          /* all element to be copied at the begnning of buffer */
          NbBytesToCopy = elementSize; 
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	62bb      	str	r3, [r7, #40]	; 0x28
          /* Wrap */
          curBuffPosition = 0; 
 800dc96:	2300      	movs	r3, #0
 800dc98:	633b      	str	r3, [r7, #48]	; 0x30
          /* if variable size element, invalidate end of buffer setting OxFFFF in element header (size) */
          if (q->elementSize == 0)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	891b      	ldrh	r3, [r3, #8]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d16f      	bne.n	800dd82 <CircularQueue_Add+0x3b2>
          {
            q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	681a      	ldr	r2, [r3, #0]
 800dca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dca8:	1c59      	adds	r1, r3, #1
 800dcaa:	6339      	str	r1, [r7, #48]	; 0x30
 800dcac:	4413      	add	r3, r2
 800dcae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcb0:	b2d2      	uxtb	r2, r2
 800dcb2:	701a      	strb	r2, [r3, #0]
            q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800dcb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb6:	0a18      	lsrs	r0, r3, #8
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	681a      	ldr	r2, [r3, #0]
 800dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcbe:	1c59      	adds	r1, r3, #1
 800dcc0:	6339      	str	r1, [r7, #48]	; 0x30
 800dcc2:	4413      	add	r3, r2
 800dcc4:	b2c2      	uxtb	r2, r0
 800dcc6:	701a      	strb	r2, [r3, #0]
            q->byteCount += 2;   
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	695b      	ldr	r3, [r3, #20]
 800dccc:	1c9a      	adds	r2, r3, #2
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	615a      	str	r2, [r3, #20]
 800dcd2:	e056      	b.n	800dd82 <CircularQueue_Add+0x3b2>
          } 
           
        }
        /* case of CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG option */
        else if (q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	7f1b      	ldrb	r3, [r3, #28]
 800dcd8:	f003 0302 	and.w	r3, r3, #2
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d050      	beq.n	800dd82 <CircularQueue_Add+0x3b2>
        {
          if (q->elementSize == 0)
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	891b      	ldrh	r3, [r3, #8]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d14a      	bne.n	800dd7e <CircularQueue_Add+0x3ae>
          {
            /* reset the size of current element to the nb bytes fitting at the end of buffer */
             q->qBuff[curBuffPosition-2] = NbBytesToCopy & 0xFF;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681a      	ldr	r2, [r3, #0]
 800dcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcee:	3b02      	subs	r3, #2
 800dcf0:	4413      	add	r3, r2
 800dcf2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcf4:	b2d2      	uxtb	r2, r2
 800dcf6:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition-1] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800dcf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcfa:	0a19      	lsrs	r1, r3, #8
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd02:	3b01      	subs	r3, #1
 800dd04:	4413      	add	r3, r2
 800dd06:	b2ca      	uxtb	r2, r1
 800dd08:	701a      	strb	r2, [r3, #0]
             /* copy the bytes */ 
             memcpy(&q->qBuff[curBuffPosition],&x[i*elementSize],NbBytesToCopy);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd10:	18d0      	adds	r0, r2, r3
 800dd12:	88fb      	ldrh	r3, [r7, #6]
 800dd14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd16:	fb02 f303 	mul.w	r3, r2, r3
 800dd1a:	68ba      	ldr	r2, [r7, #8]
 800dd1c:	4413      	add	r3, r2
 800dd1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd20:	4619      	mov	r1, r3
 800dd22:	f001 fefe 	bl	800fb22 <memcpy>
             q->byteCount += NbBytesToCopy; 
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	695a      	ldr	r2, [r3, #20]
 800dd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd2c:	441a      	add	r2, r3
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	615a      	str	r2, [r3, #20]
             /* set the number of copied bytes */
             NbCopiedBytes = NbBytesToCopy;             
 800dd32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd34:	627b      	str	r3, [r7, #36]	; 0x24
             /* set rest of data to be copied to begnning of buffer */
             NbBytesToCopy = elementSize - NbBytesToCopy;
 800dd36:	88fa      	ldrh	r2, [r7, #6]
 800dd38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3a:	1ad3      	subs	r3, r2, r3
 800dd3c:	62bb      	str	r3, [r7, #40]	; 0x28
             /* one element more dur to split in 2 elements */
             q->elementCount++;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	699b      	ldr	r3, [r3, #24]
 800dd42:	1c5a      	adds	r2, r3, #1
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	619a      	str	r2, [r3, #24]
             /* Wrap */
             curBuffPosition = 0; 
 800dd48:	2300      	movs	r3, #0
 800dd4a:	633b      	str	r3, [r7, #48]	; 0x30
             /* Set new size for rest of data */
             q->qBuff[curBuffPosition++] = NbBytesToCopy & 0xFF;
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681a      	ldr	r2, [r3, #0]
 800dd50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd52:	1c59      	adds	r1, r3, #1
 800dd54:	6339      	str	r1, [r7, #48]	; 0x30
 800dd56:	4413      	add	r3, r2
 800dd58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd5a:	b2d2      	uxtb	r2, r2
 800dd5c:	701a      	strb	r2, [r3, #0]
             q->qBuff[curBuffPosition++] = (NbBytesToCopy & 0xFF00) >> 8 ;
 800dd5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd60:	0a18      	lsrs	r0, r3, #8
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd68:	1c59      	adds	r1, r3, #1
 800dd6a:	6339      	str	r1, [r7, #48]	; 0x30
 800dd6c:	4413      	add	r3, r2
 800dd6e:	b2c2      	uxtb	r2, r0
 800dd70:	701a      	strb	r2, [r3, #0]
             q->byteCount += 2;              
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	1c9a      	adds	r2, r3, #2
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	615a      	str	r2, [r3, #20]
 800dd7c:	e001      	b.n	800dd82 <CircularQueue_Add+0x3b2>
          else
          {
            /* Should not occur */
            /* can not manage split Flag on Fixed size element */
            /* Buffer is corrupted */
            return NULL;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	e049      	b.n	800de16 <CircularQueue_Add+0x446>
          }
        }
        curElementSize = (NbBytesToCopy) + elemSizeStorageRoom ;
 800dd82:	7ffb      	ldrb	r3, [r7, #31]
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd88:	b29b      	uxth	r3, r3
 800dd8a:	4413      	add	r3, r2
 800dd8c:	86fb      	strh	r3, [r7, #54]	; 0x36
        q->last = 0;        
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	2200      	movs	r2, #0
 800dd92:	611a      	str	r2, [r3, #16]
      }  
      
      /* some remaining byte to copy */
      if (NbBytesToCopy)      
 800dd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d015      	beq.n	800ddc6 <CircularQueue_Add+0x3f6>
      {
        memcpy(&q->qBuff[curBuffPosition],&x[(i*elementSize)+NbCopiedBytes],NbBytesToCopy);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dda0:	18d0      	adds	r0, r2, r3
 800dda2:	88fb      	ldrh	r3, [r7, #6]
 800dda4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dda6:	fb03 f202 	mul.w	r2, r3, r2
 800ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddac:	4413      	add	r3, r2
 800ddae:	68ba      	ldr	r2, [r7, #8]
 800ddb0:	4413      	add	r3, r2
 800ddb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ddb4:	4619      	mov	r1, r3
 800ddb6:	f001 feb4 	bl	800fb22 <memcpy>
        q->byteCount += NbBytesToCopy;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	695a      	ldr	r2, [r3, #20]
 800ddbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ddc0:	441a      	add	r2, r3
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	615a      	str	r2, [r3, #20]
      }      
      
      /* One more element */
      q->elementCount++;
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	699b      	ldr	r3, [r3, #24]
 800ddca:	1c5a      	adds	r2, r3, #1
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	619a      	str	r2, [r3, #24]
    for (i=0; i < nbElements; i++) 
 800ddd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddd2:	3301      	adds	r3, #1
 800ddd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ddd8:	683b      	ldr	r3, [r7, #0]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	f4ff aeb0 	bcc.w	800db40 <CircularQueue_Add+0x170>
    }
    
    ptr = q->qBuff + (MOD((q->last+elemSizeStorageRoom ),q->queueMaxSize));
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	681a      	ldr	r2, [r3, #0]
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6919      	ldr	r1, [r3, #16]
 800dde8:	7ffb      	ldrb	r3, [r7, #31]
 800ddea:	4419      	add	r1, r3
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	4299      	cmp	r1, r3
 800ddf2:	d307      	bcc.n	800de04 <CircularQueue_Add+0x434>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	6919      	ldr	r1, [r3, #16]
 800ddf8:	7ffb      	ldrb	r3, [r7, #31]
 800ddfa:	4419      	add	r1, r3
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	685b      	ldr	r3, [r3, #4]
 800de00:	1acb      	subs	r3, r1, r3
 800de02:	e003      	b.n	800de0c <CircularQueue_Add+0x43c>
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	6919      	ldr	r1, [r3, #16]
 800de08:	7ffb      	ldrb	r3, [r7, #31]
 800de0a:	440b      	add	r3, r1
 800de0c:	4413      	add	r3, r2
 800de0e:	623b      	str	r3, [r7, #32]
  /* for Breakpoint only...to remove */
  else
  {
    return NULL;
  }
  return ptr;
 800de10:	6a3b      	ldr	r3, [r7, #32]
 800de12:	e000      	b.n	800de16 <CircularQueue_Add+0x446>
    return NULL;
 800de14:	2300      	movs	r3, #0
}
 800de16:	4618      	mov	r0, r3
 800de18:	3738      	adds	r7, #56	; 0x38
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}

0800de1e <CircularQueue_Remove>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize: Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on removed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Remove(queue_t *q, uint16_t* elementSize)
{
 800de1e:	b480      	push	{r7}
 800de20:	b085      	sub	sp, #20
 800de22:	af00      	add	r7, sp, #0
 800de24:	6078      	str	r0, [r7, #4]
 800de26:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800de28:	2300      	movs	r3, #0
 800de2a:	727b      	strb	r3, [r7, #9]
  uint8_t* ptr= NULL;
 800de2c:	2300      	movs	r3, #0
 800de2e:	60fb      	str	r3, [r7, #12]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	891b      	ldrh	r3, [r3, #8]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d101      	bne.n	800de3c <CircularQueue_Remove+0x1e>
 800de38:	2302      	movs	r3, #2
 800de3a:	e000      	b.n	800de3e <CircularQueue_Remove+0x20>
 800de3c:	2300      	movs	r3, #0
 800de3e:	727b      	strb	r3, [r7, #9]
  uint16_t eltSize = 0;
 800de40:	2300      	movs	r3, #0
 800de42:	817b      	strh	r3, [r7, #10]
  if (q->byteCount > 0) 
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	695b      	ldr	r3, [r3, #20]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	f000 80cc 	beq.w	800dfe6 <CircularQueue_Remove+0x1c8>
  {
    /* retrieve element Size */
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	891b      	ldrh	r3, [r3, #8]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d121      	bne.n	800de9a <CircularQueue_Remove+0x7c>
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	681a      	ldr	r2, [r3, #0]
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	68db      	ldr	r3, [r3, #12]
 800de5e:	4413      	add	r3, r2
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	b29a      	uxth	r2, r3
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	6819      	ldr	r1, [r3, #0]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	68db      	ldr	r3, [r3, #12]
 800de6c:	1c58      	adds	r0, r3, #1
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	685b      	ldr	r3, [r3, #4]
 800de72:	4298      	cmp	r0, r3
 800de74:	d306      	bcc.n	800de84 <CircularQueue_Remove+0x66>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	68d8      	ldr	r0, [r3, #12]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	685b      	ldr	r3, [r3, #4]
 800de7e:	1ac3      	subs	r3, r0, r3
 800de80:	3301      	adds	r3, #1
 800de82:	e002      	b.n	800de8a <CircularQueue_Remove+0x6c>
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	3301      	adds	r3, #1
 800de8a:	440b      	add	r3, r1
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	b29b      	uxth	r3, r3
 800de90:	021b      	lsls	r3, r3, #8
 800de92:	b29b      	uxth	r3, r3
 800de94:	4413      	add	r3, r2
 800de96:	b29b      	uxth	r3, r3
 800de98:	e001      	b.n	800de9e <CircularQueue_Remove+0x80>
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	891b      	ldrh	r3, [r3, #8]
 800de9e:	817b      	strh	r3, [r7, #10]

     if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	7f1b      	ldrb	r3, [r3, #28]
 800dea4:	f003 0301 	and.w	r3, r3, #1
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d057      	beq.n	800df5c <CircularQueue_Remove+0x13e>
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	7f1b      	ldrb	r3, [r3, #28]
 800deb0:	f003 0302 	and.w	r3, r3, #2
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d151      	bne.n	800df5c <CircularQueue_Remove+0x13e>
     {
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800deb8:	897b      	ldrh	r3, [r7, #10]
 800deba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800debe:	4293      	cmp	r3, r2
 800dec0:	d103      	bne.n	800deca <CircularQueue_Remove+0xac>
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	891b      	ldrh	r3, [r3, #8]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d012      	beq.n	800def0 <CircularQueue_Remove+0xd2>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	68da      	ldr	r2, [r3, #12]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	691b      	ldr	r3, [r3, #16]
       if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800ded2:	429a      	cmp	r2, r3
 800ded4:	d942      	bls.n	800df5c <CircularQueue_Remove+0x13e>
           ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	891b      	ldrh	r3, [r3, #8]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d03e      	beq.n	800df5c <CircularQueue_Remove+0x13e>
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	685a      	ldr	r2, [r3, #4]
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	68db      	ldr	r3, [r3, #12]
 800dee6:	1ad3      	subs	r3, r2, r3
 800dee8:	687a      	ldr	r2, [r7, #4]
 800deea:	8912      	ldrh	r2, [r2, #8]
 800deec:	4293      	cmp	r3, r2
 800deee:	d235      	bcs.n	800df5c <CircularQueue_Remove+0x13e>
       {
          /* all data from current position up to the end of buffer are invalid */
          q->byteCount -= (q->queueMaxSize - q->first);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	695a      	ldr	r2, [r3, #20]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68d9      	ldr	r1, [r3, #12]
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	1acb      	subs	r3, r1, r3
 800defe:	441a      	add	r2, r3
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	615a      	str	r2, [r3, #20]
          /* Adjust first element pos */
          q->first = 0;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	2200      	movs	r2, #0
 800df08:	60da      	str	r2, [r3, #12]
          /* retrieve the right size after the wrap [if variable size element] */
          eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	891b      	ldrh	r3, [r3, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d121      	bne.n	800df56 <CircularQueue_Remove+0x138>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	68db      	ldr	r3, [r3, #12]
 800df1a:	4413      	add	r3, r2
 800df1c:	781b      	ldrb	r3, [r3, #0]
 800df1e:	b29a      	uxth	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6819      	ldr	r1, [r3, #0]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	1c58      	adds	r0, r3, #1
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	685b      	ldr	r3, [r3, #4]
 800df2e:	4298      	cmp	r0, r3
 800df30:	d306      	bcc.n	800df40 <CircularQueue_Remove+0x122>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	68d8      	ldr	r0, [r3, #12]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	1ac3      	subs	r3, r0, r3
 800df3c:	3301      	adds	r3, #1
 800df3e:	e002      	b.n	800df46 <CircularQueue_Remove+0x128>
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	68db      	ldr	r3, [r3, #12]
 800df44:	3301      	adds	r3, #1
 800df46:	440b      	add	r3, r1
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	b29b      	uxth	r3, r3
 800df4c:	021b      	lsls	r3, r3, #8
 800df4e:	b29b      	uxth	r3, r3
 800df50:	4413      	add	r3, r2
 800df52:	b29b      	uxth	r3, r3
 800df54:	e001      	b.n	800df5a <CircularQueue_Remove+0x13c>
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	891b      	ldrh	r3, [r3, #8]
 800df5a:	817b      	strh	r3, [r7, #10]
       }
     }

    /* retrieve element */
    ptr = q->qBuff + (MOD((q->first + elemSizeStorageRoom), q->queueMaxSize));
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68d9      	ldr	r1, [r3, #12]
 800df64:	7a7b      	ldrb	r3, [r7, #9]
 800df66:	4419      	add	r1, r3
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	4299      	cmp	r1, r3
 800df6e:	d307      	bcc.n	800df80 <CircularQueue_Remove+0x162>
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	68d9      	ldr	r1, [r3, #12]
 800df74:	7a7b      	ldrb	r3, [r7, #9]
 800df76:	4419      	add	r1, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	685b      	ldr	r3, [r3, #4]
 800df7c:	1acb      	subs	r3, r1, r3
 800df7e:	e003      	b.n	800df88 <CircularQueue_Remove+0x16a>
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	68d9      	ldr	r1, [r3, #12]
 800df84:	7a7b      	ldrb	r3, [r7, #9]
 800df86:	440b      	add	r3, r1
 800df88:	4413      	add	r3, r2
 800df8a:	60fb      	str	r3, [r7, #12]

    /* adjust byte count */
    q->byteCount -= (eltSize + elemSizeStorageRoom) ;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	695b      	ldr	r3, [r3, #20]
 800df90:	8979      	ldrh	r1, [r7, #10]
 800df92:	7a7a      	ldrb	r2, [r7, #9]
 800df94:	440a      	add	r2, r1
 800df96:	1a9a      	subs	r2, r3, r2
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	615a      	str	r2, [r3, #20]
    
    /* Adjust q->first */
    if (q->byteCount > 0)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	695b      	ldr	r3, [r3, #20]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d01b      	beq.n	800dfdc <CircularQueue_Remove+0x1be>
    {
      q->first = MOD((q->first+ eltSize + elemSizeStorageRoom ), q->queueMaxSize);
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68da      	ldr	r2, [r3, #12]
 800dfa8:	897b      	ldrh	r3, [r7, #10]
 800dfaa:	441a      	add	r2, r3
 800dfac:	7a7b      	ldrb	r3, [r7, #9]
 800dfae:	441a      	add	r2, r3
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	685b      	ldr	r3, [r3, #4]
 800dfb4:	429a      	cmp	r2, r3
 800dfb6:	d309      	bcc.n	800dfcc <CircularQueue_Remove+0x1ae>
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	68da      	ldr	r2, [r3, #12]
 800dfbc:	897b      	ldrh	r3, [r7, #10]
 800dfbe:	441a      	add	r2, r3
 800dfc0:	7a7b      	ldrb	r3, [r7, #9]
 800dfc2:	441a      	add	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	685b      	ldr	r3, [r3, #4]
 800dfc8:	1ad3      	subs	r3, r2, r3
 800dfca:	e005      	b.n	800dfd8 <CircularQueue_Remove+0x1ba>
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	68da      	ldr	r2, [r3, #12]
 800dfd0:	897b      	ldrh	r3, [r7, #10]
 800dfd2:	441a      	add	r2, r3
 800dfd4:	7a7b      	ldrb	r3, [r7, #9]
 800dfd6:	4413      	add	r3, r2
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	60d3      	str	r3, [r2, #12]
    }    
    /* adjust element count */    
    --q->elementCount;    
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	699b      	ldr	r3, [r3, #24]
 800dfe0:	1e5a      	subs	r2, r3, #1
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	619a      	str	r2, [r3, #24]
  }
  if (elementSize != NULL)
 800dfe6:	683b      	ldr	r3, [r7, #0]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d002      	beq.n	800dff2 <CircularQueue_Remove+0x1d4>
  {
    *elementSize = eltSize;
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	897a      	ldrh	r2, [r7, #10]
 800dff0:	801a      	strh	r2, [r3, #0]
  }
  return ptr;
 800dff2:	68fb      	ldr	r3, [r7, #12]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3714      	adds	r7, #20
 800dff8:	46bd      	mov	sp, r7
 800dffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffe:	4770      	bx	lr

0800e000 <CircularQueue_Sense>:
  * @param  q: pointer on queue structure  to be handled
  * @param  elementSize:  Pointer to return Size of element to be removed (ignored if NULL)
  * @retval Pointer on sensed element. NULL if queue was empty
  */
uint8_t* CircularQueue_Sense(queue_t *q, uint16_t* elementSize)
{
 800e000:	b480      	push	{r7}
 800e002:	b087      	sub	sp, #28
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
 800e008:	6039      	str	r1, [r7, #0]
  uint8_t  elemSizeStorageRoom = 0;
 800e00a:	2300      	movs	r3, #0
 800e00c:	72fb      	strb	r3, [r7, #11]
  uint8_t* x= NULL;
 800e00e:	2300      	movs	r3, #0
 800e010:	617b      	str	r3, [r7, #20]
  elemSizeStorageRoom = (q->elementSize == 0) ? 2 : 0;
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	891b      	ldrh	r3, [r3, #8]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d101      	bne.n	800e01e <CircularQueue_Sense+0x1e>
 800e01a:	2302      	movs	r3, #2
 800e01c:	e000      	b.n	800e020 <CircularQueue_Sense+0x20>
 800e01e:	2300      	movs	r3, #0
 800e020:	72fb      	strb	r3, [r7, #11]
  uint16_t eltSize = 0;
 800e022:	2300      	movs	r3, #0
 800e024:	827b      	strh	r3, [r7, #18]
  uint32_t FirstElemetPos = 0;
 800e026:	2300      	movs	r3, #0
 800e028:	60fb      	str	r3, [r7, #12]
    
  if (q->byteCount > 0) 
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	695b      	ldr	r3, [r3, #20]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	f000 8090 	beq.w	800e154 <CircularQueue_Sense+0x154>
  {
    FirstElemetPos = q->first;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	68db      	ldr	r3, [r3, #12]
 800e038:	60fb      	str	r3, [r7, #12]
    eltSize = (q->elementSize == 0) ? q->qBuff[q->first] + ((q->qBuff[MOD((q->first+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	891b      	ldrh	r3, [r3, #8]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d121      	bne.n	800e086 <CircularQueue_Sense+0x86>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681a      	ldr	r2, [r3, #0]
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	68db      	ldr	r3, [r3, #12]
 800e04a:	4413      	add	r3, r2
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	b29a      	uxth	r2, r3
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	6819      	ldr	r1, [r3, #0]
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	68db      	ldr	r3, [r3, #12]
 800e058:	1c58      	adds	r0, r3, #1
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	4298      	cmp	r0, r3
 800e060:	d306      	bcc.n	800e070 <CircularQueue_Sense+0x70>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	68d8      	ldr	r0, [r3, #12]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	685b      	ldr	r3, [r3, #4]
 800e06a:	1ac3      	subs	r3, r0, r3
 800e06c:	3301      	adds	r3, #1
 800e06e:	e002      	b.n	800e076 <CircularQueue_Sense+0x76>
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	68db      	ldr	r3, [r3, #12]
 800e074:	3301      	adds	r3, #1
 800e076:	440b      	add	r3, r1
 800e078:	781b      	ldrb	r3, [r3, #0]
 800e07a:	b29b      	uxth	r3, r3
 800e07c:	021b      	lsls	r3, r3, #8
 800e07e:	b29b      	uxth	r3, r3
 800e080:	4413      	add	r3, r2
 800e082:	b29b      	uxth	r3, r3
 800e084:	e001      	b.n	800e08a <CircularQueue_Sense+0x8a>
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	891b      	ldrh	r3, [r3, #8]
 800e08a:	827b      	strh	r3, [r7, #18]
    
    if ((q->optionFlags & CIRCULAR_QUEUE_NO_WRAP_FLAG) && !(q->optionFlags & CIRCULAR_QUEUE_SPLIT_IF_WRAPPING_FLAG))
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	7f1b      	ldrb	r3, [r3, #28]
 800e090:	f003 0301 	and.w	r3, r3, #1
 800e094:	2b00      	cmp	r3, #0
 800e096:	d048      	beq.n	800e12a <CircularQueue_Sense+0x12a>
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	7f1b      	ldrb	r3, [r3, #28]
 800e09c:	f003 0302 	and.w	r3, r3, #2
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d142      	bne.n	800e12a <CircularQueue_Sense+0x12a>
    { 
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800e0a4:	8a7b      	ldrh	r3, [r7, #18]
 800e0a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e0aa:	4293      	cmp	r3, r2
 800e0ac:	d103      	bne.n	800e0b6 <CircularQueue_Sense+0xb6>
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	891b      	ldrh	r3, [r3, #8]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d012      	beq.n	800e0dc <CircularQueue_Sense+0xdc>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	68da      	ldr	r2, [r3, #12]
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	691b      	ldr	r3, [r3, #16]
      if (((eltSize == 0xFFFF) && q->elementSize == 0 ) ||
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d933      	bls.n	800e12a <CircularQueue_Sense+0x12a>
          ((q->first > q->last) && q->elementSize && ((q->queueMaxSize - q->first) < q->elementSize))) 
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	891b      	ldrh	r3, [r3, #8]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d02f      	beq.n	800e12a <CircularQueue_Sense+0x12a>
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	685a      	ldr	r2, [r3, #4]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	68db      	ldr	r3, [r3, #12]
 800e0d2:	1ad3      	subs	r3, r2, r3
 800e0d4:	687a      	ldr	r2, [r7, #4]
 800e0d6:	8912      	ldrh	r2, [r2, #8]
 800e0d8:	4293      	cmp	r3, r2
 800e0da:	d226      	bcs.n	800e12a <CircularQueue_Sense+0x12a>

      {
        /* all data from current position up to the end of buffer are invalid */
        FirstElemetPos = 0; /* wrap to the begiining of buffer */
 800e0dc:	2300      	movs	r3, #0
 800e0de:	60fb      	str	r3, [r7, #12]

        /* retrieve the right size after the wrap [if variable size element] */
        eltSize = (q->elementSize == 0) ? q->qBuff[FirstElemetPos]+ ((q->qBuff[MOD((FirstElemetPos+1), q->queueMaxSize)])<<8) : q->elementSize;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	891b      	ldrh	r3, [r3, #8]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d11d      	bne.n	800e124 <CircularQueue_Sense+0x124>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681a      	ldr	r2, [r3, #0]
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	781b      	ldrb	r3, [r3, #0]
 800e0f2:	b29a      	uxth	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6819      	ldr	r1, [r3, #0]
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	1c58      	adds	r0, r3, #1
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	685b      	ldr	r3, [r3, #4]
 800e100:	4298      	cmp	r0, r3
 800e102:	d305      	bcc.n	800e110 <CircularQueue_Sense+0x110>
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	685b      	ldr	r3, [r3, #4]
 800e108:	68f8      	ldr	r0, [r7, #12]
 800e10a:	1ac3      	subs	r3, r0, r3
 800e10c:	3301      	adds	r3, #1
 800e10e:	e001      	b.n	800e114 <CircularQueue_Sense+0x114>
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	3301      	adds	r3, #1
 800e114:	440b      	add	r3, r1
 800e116:	781b      	ldrb	r3, [r3, #0]
 800e118:	b29b      	uxth	r3, r3
 800e11a:	021b      	lsls	r3, r3, #8
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	4413      	add	r3, r2
 800e120:	b29b      	uxth	r3, r3
 800e122:	e001      	b.n	800e128 <CircularQueue_Sense+0x128>
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	891b      	ldrh	r3, [r3, #8]
 800e128:	827b      	strh	r3, [r7, #18]
      }
   }
   /* retrieve element */
    x = q->qBuff + (MOD((FirstElemetPos + elemSizeStorageRoom), q->queueMaxSize));
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681a      	ldr	r2, [r3, #0]
 800e12e:	7af9      	ldrb	r1, [r7, #11]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	4419      	add	r1, r3
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	4299      	cmp	r1, r3
 800e13a:	d306      	bcc.n	800e14a <CircularQueue_Sense+0x14a>
 800e13c:	7af9      	ldrb	r1, [r7, #11]
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	4419      	add	r1, r3
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	685b      	ldr	r3, [r3, #4]
 800e146:	1acb      	subs	r3, r1, r3
 800e148:	e002      	b.n	800e150 <CircularQueue_Sense+0x150>
 800e14a:	7af9      	ldrb	r1, [r7, #11]
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	440b      	add	r3, r1
 800e150:	4413      	add	r3, r2
 800e152:	617b      	str	r3, [r7, #20]
  }
  if (elementSize != NULL)
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d002      	beq.n	800e160 <CircularQueue_Sense+0x160>
  {
    *elementSize = eltSize;
 800e15a:	683b      	ldr	r3, [r7, #0]
 800e15c:	8a7a      	ldrh	r2, [r7, #18]
 800e15e:	801a      	strh	r2, [r3, #0]
  }
  return x;
 800e160:	697b      	ldr	r3, [r7, #20]
}
 800e162:	4618      	mov	r0, r3
 800e164:	371c      	adds	r7, #28
 800e166:	46bd      	mov	sp, r7
 800e168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16c:	4770      	bx	lr

0800e16e <BAS_Init>:
/* Private functions ----------------------------------------------------------*/
/* Weak functions ----------------------------------------------------------*/
void BVOPUS_STM_Init(void);

__WEAK void BAS_Init( void )
{
 800e16e:	b480      	push	{r7}
 800e170:	af00      	add	r7, sp, #0
  return;
 800e172:	bf00      	nop
}
 800e174:	46bd      	mov	sp, r7
 800e176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17a:	4770      	bx	lr

0800e17c <BLS_Init>:

__WEAK void BLS_Init( void )
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
  return;
 800e180:	bf00      	nop
}
 800e182:	46bd      	mov	sp, r7
 800e184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e188:	4770      	bx	lr

0800e18a <CRS_STM_Init>:
__WEAK void CRS_STM_Init( void )
{
 800e18a:	b480      	push	{r7}
 800e18c:	af00      	add	r7, sp, #0
  return;
 800e18e:	bf00      	nop
}
 800e190:	46bd      	mov	sp, r7
 800e192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e196:	4770      	bx	lr

0800e198 <DIS_Init>:
__WEAK void DIS_Init( void )
{
 800e198:	b480      	push	{r7}
 800e19a:	af00      	add	r7, sp, #0
  return;
 800e19c:	bf00      	nop
}
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr

0800e1a6 <EDS_STM_Init>:
__WEAK void EDS_STM_Init( void )
{
 800e1a6:	b480      	push	{r7}
 800e1a8:	af00      	add	r7, sp, #0
  return;
 800e1aa:	bf00      	nop
}
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b2:	4770      	bx	lr

0800e1b4 <HIDS_Init>:
__WEAK void HIDS_Init( void )
{
 800e1b4:	b480      	push	{r7}
 800e1b6:	af00      	add	r7, sp, #0
  return;
 800e1b8:	bf00      	nop
}
 800e1ba:	46bd      	mov	sp, r7
 800e1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c0:	4770      	bx	lr

0800e1c2 <HRS_Init>:
__WEAK void HRS_Init( void )
{
 800e1c2:	b480      	push	{r7}
 800e1c4:	af00      	add	r7, sp, #0
  return;
 800e1c6:	bf00      	nop
}
 800e1c8:	46bd      	mov	sp, r7
 800e1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ce:	4770      	bx	lr

0800e1d0 <HTS_Init>:
__WEAK void HTS_Init( void )
{
 800e1d0:	b480      	push	{r7}
 800e1d2:	af00      	add	r7, sp, #0
  return;
 800e1d4:	bf00      	nop
}
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1dc:	4770      	bx	lr

0800e1de <IAS_Init>:
__WEAK void IAS_Init( void )
{
 800e1de:	b480      	push	{r7}
 800e1e0:	af00      	add	r7, sp, #0
  return;
 800e1e2:	bf00      	nop
}
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <LLS_Init>:
__WEAK void LLS_Init( void )
{
 800e1ec:	b480      	push	{r7}
 800e1ee:	af00      	add	r7, sp, #0
  return;
 800e1f0:	bf00      	nop
}
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr

0800e1fa <TPS_Init>:
__WEAK void TPS_Init( void )
{
 800e1fa:	b480      	push	{r7}
 800e1fc:	af00      	add	r7, sp, #0
  return;
 800e1fe:	bf00      	nop
}
 800e200:	46bd      	mov	sp, r7
 800e202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e206:	4770      	bx	lr

0800e208 <MOTENV_STM_Init>:
__WEAK void MOTENV_STM_Init( void )
{
 800e208:	b480      	push	{r7}
 800e20a:	af00      	add	r7, sp, #0
  return;
 800e20c:	bf00      	nop
}
 800e20e:	46bd      	mov	sp, r7
 800e210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e214:	4770      	bx	lr

0800e216 <ZDD_STM_Init>:
__WEAK void P2PS_STM_Init( void )
{
  return;
}
__WEAK void ZDD_STM_Init( void )
{
 800e216:	b480      	push	{r7}
 800e218:	af00      	add	r7, sp, #0
  return;
 800e21a:	bf00      	nop
}
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <OTAS_STM_Init>:
__WEAK void OTAS_STM_Init( void )
{
 800e224:	b480      	push	{r7}
 800e226:	af00      	add	r7, sp, #0
  return;
 800e228:	bf00      	nop
}
 800e22a:	46bd      	mov	sp, r7
 800e22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e230:	4770      	bx	lr

0800e232 <MESH_Init>:
__WEAK void MESH_Init( void )
{
 800e232:	b480      	push	{r7}
 800e234:	af00      	add	r7, sp, #0
  return;
 800e236:	bf00      	nop
}
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <BVOPUS_STM_Init>:
__WEAK void BVOPUS_STM_Init( void )
{
 800e240:	b480      	push	{r7}
 800e242:	af00      	add	r7, sp, #0
  return;
 800e244:	bf00      	nop
}
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr

0800e24e <SVCCTL_InitCustomSvc>:
__WEAK void SVCCTL_InitCustomSvc( void )
{
 800e24e:	b480      	push	{r7}
 800e250:	af00      	add	r7, sp, #0
  return;
 800e252:	bf00      	nop
}
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr

0800e25c <SVCCTL_Init>:

/* Functions Definition ------------------------------------------------------*/

void SVCCTL_Init( void )
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	af00      	add	r7, sp, #0
 
  /**
   * Initialize the number of registered Handler
   */
  SVCCTL_EvtHandler.NbreOfRegisteredHandler = 0;
 800e260:	4b04      	ldr	r3, [pc, #16]	; (800e274 <SVCCTL_Init+0x18>)
 800e262:	2200      	movs	r2, #0
 800e264:	711a      	strb	r2, [r3, #4]
  SVCCTL_CltHandler.NbreOfRegisteredHandler = 0;
 800e266:	4b04      	ldr	r3, [pc, #16]	; (800e278 <SVCCTL_Init+0x1c>)
 800e268:	2200      	movs	r2, #0
 800e26a:	701a      	strb	r2, [r3, #0]

  /**
   * Add and Initialize requested services
   */
  SVCCTL_SvcInit();
 800e26c:	f000 f806 	bl	800e27c <SVCCTL_SvcInit>

  return;
 800e270:	bf00      	nop
}
 800e272:	bd80      	pop	{r7, pc}
 800e274:	20000230 	.word	0x20000230
 800e278:	20000238 	.word	0x20000238

0800e27c <SVCCTL_SvcInit>:

__WEAK void SVCCTL_SvcInit(void)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	af00      	add	r7, sp, #0
  BAS_Init();
 800e280:	f7ff ff75 	bl	800e16e <BAS_Init>

  BLS_Init();
 800e284:	f7ff ff7a 	bl	800e17c <BLS_Init>

  CRS_STM_Init();
 800e288:	f7ff ff7f 	bl	800e18a <CRS_STM_Init>

  DIS_Init();
 800e28c:	f7ff ff84 	bl	800e198 <DIS_Init>

  EDS_STM_Init();
 800e290:	f7ff ff89 	bl	800e1a6 <EDS_STM_Init>

  HIDS_Init();
 800e294:	f7ff ff8e 	bl	800e1b4 <HIDS_Init>

  HRS_Init();
 800e298:	f7ff ff93 	bl	800e1c2 <HRS_Init>

  HTS_Init();
 800e29c:	f7ff ff98 	bl	800e1d0 <HTS_Init>

  IAS_Init();
 800e2a0:	f7ff ff9d 	bl	800e1de <IAS_Init>

  LLS_Init();
 800e2a4:	f7ff ffa2 	bl	800e1ec <LLS_Init>

  TPS_Init();
 800e2a8:	f7ff ffa7 	bl	800e1fa <TPS_Init>

  MOTENV_STM_Init();
 800e2ac:	f7ff ffac 	bl	800e208 <MOTENV_STM_Init>

  P2PS_STM_Init();
 800e2b0:	f7fe ffae 	bl	800d210 <P2PS_STM_Init>

  ZDD_STM_Init();
 800e2b4:	f7ff ffaf 	bl	800e216 <ZDD_STM_Init>

  OTAS_STM_Init();
 800e2b8:	f7ff ffb4 	bl	800e224 <OTAS_STM_Init>
  
  BVOPUS_STM_Init();
 800e2bc:	f7ff ffc0 	bl	800e240 <BVOPUS_STM_Init>

  MESH_Init();
 800e2c0:	f7ff ffb7 	bl	800e232 <MESH_Init>

  SVCCTL_InitCustomSvc();
 800e2c4:	f7ff ffc3 	bl	800e24e <SVCCTL_InitCustomSvc>
  
  return;
 800e2c8:	bf00      	nop
}
 800e2ca:	bd80      	pop	{r7, pc}

0800e2cc <SVCCTL_RegisterSvcHandler>:
 * @brief  BLE Controller initialization
 * @param  None
 * @retval None
 */
void SVCCTL_RegisterSvcHandler( SVC_CTL_p_EvtHandler_t pfBLE_SVC_Service_Event_Handler )
{
 800e2cc:	b480      	push	{r7}
 800e2ce:	b083      	sub	sp, #12
 800e2d0:	af00      	add	r7, sp, #0
 800e2d2:	6078      	str	r0, [r7, #4]
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
  SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[SVCCTL_EvtHandler.NbreOfRegisteredHandler] = pfBLE_SVC_Service_Event_Handler;
 800e2d4:	4b09      	ldr	r3, [pc, #36]	; (800e2fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e2d6:	791b      	ldrb	r3, [r3, #4]
 800e2d8:	4619      	mov	r1, r3
 800e2da:	4a08      	ldr	r2, [pc, #32]	; (800e2fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  SVCCTL_EvtHandler.NbreOfRegisteredHandler++;
 800e2e2:	4b06      	ldr	r3, [pc, #24]	; (800e2fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e2e4:	791b      	ldrb	r3, [r3, #4]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	b2da      	uxtb	r2, r3
 800e2ea:	4b04      	ldr	r3, [pc, #16]	; (800e2fc <SVCCTL_RegisterSvcHandler+0x30>)
 800e2ec:	711a      	strb	r2, [r3, #4]
#else
  (void)(pfBLE_SVC_Service_Event_Handler);
#endif

  return;
 800e2ee:	bf00      	nop
}
 800e2f0:	370c      	adds	r7, #12
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	20000230 	.word	0x20000230

0800e300 <SVCCTL_UserEvtRx>:

  return;
}

__WEAK SVCCTL_UserEvtFlowStatus_t SVCCTL_UserEvtRx( void *pckt )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  evt_blecore_aci *blecore_evt;
  SVCCTL_EvtAckStatus_t event_notification_status;
  SVCCTL_UserEvtFlowStatus_t return_status;
  uint8_t index;

  event_pckt = (hci_event_pckt*) ((hci_uart_pckt *) pckt)->data;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	3301      	adds	r3, #1
 800e30c:	613b      	str	r3, [r7, #16]
  event_notification_status = SVCCTL_EvtNotAck;
 800e30e:	2300      	movs	r3, #0
 800e310:	75fb      	strb	r3, [r7, #23]

  switch (event_pckt->evt)
 800e312:	693b      	ldr	r3, [r7, #16]
 800e314:	781b      	ldrb	r3, [r3, #0]
 800e316:	2bff      	cmp	r3, #255	; 0xff
 800e318:	d125      	bne.n	800e366 <SVCCTL_UserEvtRx+0x66>
  {
    case HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE:
    {
      blecore_evt = (evt_blecore_aci*) event_pckt->data;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	3302      	adds	r3, #2
 800e31e:	60fb      	str	r3, [r7, #12]

      switch ((blecore_evt->ecode) & SVCCTL_EGID_EVT_MASK)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	881b      	ldrh	r3, [r3, #0]
 800e324:	b29b      	uxth	r3, r3
 800e326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e32a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e32e:	d118      	bne.n	800e362 <SVCCTL_UserEvtRx+0x62>
      {
        case SVCCTL_GATT_EVT_TYPE:
#if (BLE_CFG_SVC_MAX_NBR_CB > 0)
          /* For Service event handler */
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e330:	2300      	movs	r3, #0
 800e332:	757b      	strb	r3, [r7, #21]
 800e334:	e00d      	b.n	800e352 <SVCCTL_UserEvtRx+0x52>
          {
            event_notification_status = SVCCTL_EvtHandler.SVCCTL__SvcHandlerTab[index](pckt);
 800e336:	7d7b      	ldrb	r3, [r7, #21]
 800e338:	4a1a      	ldr	r2, [pc, #104]	; (800e3a4 <SVCCTL_UserEvtRx+0xa4>)
 800e33a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	4798      	blx	r3
 800e342:	4603      	mov	r3, r0
 800e344:	75fb      	strb	r3, [r7, #23]
            /**
             * When a GATT event has been acknowledged by a Service, there is no need to call the other registered handlers
             * a GATT event is relevant for only one Service
             */
            if (event_notification_status != SVCCTL_EvtNotAck)
 800e346:	7dfb      	ldrb	r3, [r7, #23]
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d108      	bne.n	800e35e <SVCCTL_UserEvtRx+0x5e>
          for (index = 0; index < SVCCTL_EvtHandler.NbreOfRegisteredHandler; index++)
 800e34c:	7d7b      	ldrb	r3, [r7, #21]
 800e34e:	3301      	adds	r3, #1
 800e350:	757b      	strb	r3, [r7, #21]
 800e352:	4b14      	ldr	r3, [pc, #80]	; (800e3a4 <SVCCTL_UserEvtRx+0xa4>)
 800e354:	791b      	ldrb	r3, [r3, #4]
 800e356:	7d7a      	ldrb	r2, [r7, #21]
 800e358:	429a      	cmp	r2, r3
 800e35a:	d3ec      	bcc.n	800e336 <SVCCTL_UserEvtRx+0x36>
               */
              break;
            }
          }
#endif
          break;
 800e35c:	e002      	b.n	800e364 <SVCCTL_UserEvtRx+0x64>
              break;
 800e35e:	bf00      	nop
          break;
 800e360:	e000      	b.n	800e364 <SVCCTL_UserEvtRx+0x64>

        default:
          break;
 800e362:	bf00      	nop
      }
    }
      break; /* HCI_HCI_VENDOR_SPECIFIC_DEBUG_EVT_CODE_SPECIFIC */
 800e364:	e000      	b.n	800e368 <SVCCTL_UserEvtRx+0x68>

    default:
      break;
 800e366:	bf00      	nop

  /**
   * When no registered handlers (either Service or Client) has acknowledged the GATT event, it is reported to the application
   * a GAP event is always reported to the application.
   */
  switch (event_notification_status)
 800e368:	7dfb      	ldrb	r3, [r7, #23]
 800e36a:	2b02      	cmp	r3, #2
 800e36c:	d00f      	beq.n	800e38e <SVCCTL_UserEvtRx+0x8e>
 800e36e:	2b02      	cmp	r3, #2
 800e370:	dc10      	bgt.n	800e394 <SVCCTL_UserEvtRx+0x94>
 800e372:	2b00      	cmp	r3, #0
 800e374:	d002      	beq.n	800e37c <SVCCTL_UserEvtRx+0x7c>
 800e376:	2b01      	cmp	r3, #1
 800e378:	d006      	beq.n	800e388 <SVCCTL_UserEvtRx+0x88>
 800e37a:	e00b      	b.n	800e394 <SVCCTL_UserEvtRx+0x94>
    case SVCCTL_EvtNotAck:
      /**
       *  The event has NOT been managed.
       *  It shall be passed to the application for processing
       */
      return_status = SVCCTL_App_Notification(pckt);
 800e37c:	6878      	ldr	r0, [r7, #4]
 800e37e:	f7f5 fa33 	bl	80037e8 <SVCCTL_App_Notification>
 800e382:	4603      	mov	r3, r0
 800e384:	75bb      	strb	r3, [r7, #22]
      break;
 800e386:	e008      	b.n	800e39a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowEnable:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e388:	2301      	movs	r3, #1
 800e38a:	75bb      	strb	r3, [r7, #22]
      break;
 800e38c:	e005      	b.n	800e39a <SVCCTL_UserEvtRx+0x9a>

    case SVCCTL_EvtAckFlowDisable:
      return_status = SVCCTL_UserEvtFlowDisable;
 800e38e:	2300      	movs	r3, #0
 800e390:	75bb      	strb	r3, [r7, #22]
      break;
 800e392:	e002      	b.n	800e39a <SVCCTL_UserEvtRx+0x9a>

    default:
      return_status = SVCCTL_UserEvtFlowEnable;
 800e394:	2301      	movs	r3, #1
 800e396:	75bb      	strb	r3, [r7, #22]
      break;
 800e398:	bf00      	nop
  }

  return (return_status);
 800e39a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3718      	adds	r7, #24
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	20000230 	.word	0x20000230

0800e3a8 <TL_Enable>:

/******************************************************************************
 * GENERAL - refer to AN5289 for functions description.
 ******************************************************************************/
void TL_Enable( void )
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	af00      	add	r7, sp, #0
  HW_IPCC_Enable();
 800e3ac:	f7f6 fb02 	bl	80049b4 <HW_IPCC_Enable>

  return;
 800e3b0:	bf00      	nop
}
 800e3b2:	bd80      	pop	{r7, pc}

0800e3b4 <TL_Init>:


void TL_Init( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	af00      	add	r7, sp, #0
  TL_RefTable.p_device_info_table = &TL_DeviceInfoTable;
 800e3b8:	4b10      	ldr	r3, [pc, #64]	; (800e3fc <TL_Init+0x48>)
 800e3ba:	4a11      	ldr	r2, [pc, #68]	; (800e400 <TL_Init+0x4c>)
 800e3bc:	601a      	str	r2, [r3, #0]
  TL_RefTable.p_ble_table = &TL_BleTable;
 800e3be:	4b0f      	ldr	r3, [pc, #60]	; (800e3fc <TL_Init+0x48>)
 800e3c0:	4a10      	ldr	r2, [pc, #64]	; (800e404 <TL_Init+0x50>)
 800e3c2:	605a      	str	r2, [r3, #4]
  TL_RefTable.p_thread_table = &TL_ThreadTable;
 800e3c4:	4b0d      	ldr	r3, [pc, #52]	; (800e3fc <TL_Init+0x48>)
 800e3c6:	4a10      	ldr	r2, [pc, #64]	; (800e408 <TL_Init+0x54>)
 800e3c8:	609a      	str	r2, [r3, #8]
  TL_RefTable.p_lld_tests_table = &TL_LldTestsTable;
 800e3ca:	4b0c      	ldr	r3, [pc, #48]	; (800e3fc <TL_Init+0x48>)
 800e3cc:	4a0f      	ldr	r2, [pc, #60]	; (800e40c <TL_Init+0x58>)
 800e3ce:	621a      	str	r2, [r3, #32]
  TL_RefTable.p_ble_lld_table = &TL_BleLldTable;
 800e3d0:	4b0a      	ldr	r3, [pc, #40]	; (800e3fc <TL_Init+0x48>)
 800e3d2:	4a0f      	ldr	r2, [pc, #60]	; (800e410 <TL_Init+0x5c>)
 800e3d4:	625a      	str	r2, [r3, #36]	; 0x24
  TL_RefTable.p_sys_table = &TL_SysTable;
 800e3d6:	4b09      	ldr	r3, [pc, #36]	; (800e3fc <TL_Init+0x48>)
 800e3d8:	4a0e      	ldr	r2, [pc, #56]	; (800e414 <TL_Init+0x60>)
 800e3da:	60da      	str	r2, [r3, #12]
  TL_RefTable.p_mem_manager_table = &TL_MemManagerTable;
 800e3dc:	4b07      	ldr	r3, [pc, #28]	; (800e3fc <TL_Init+0x48>)
 800e3de:	4a0e      	ldr	r2, [pc, #56]	; (800e418 <TL_Init+0x64>)
 800e3e0:	611a      	str	r2, [r3, #16]
  TL_RefTable.p_traces_table = &TL_TracesTable;
 800e3e2:	4b06      	ldr	r3, [pc, #24]	; (800e3fc <TL_Init+0x48>)
 800e3e4:	4a0d      	ldr	r2, [pc, #52]	; (800e41c <TL_Init+0x68>)
 800e3e6:	615a      	str	r2, [r3, #20]
  TL_RefTable.p_mac_802_15_4_table = &TL_Mac_802_15_4_Table;
 800e3e8:	4b04      	ldr	r3, [pc, #16]	; (800e3fc <TL_Init+0x48>)
 800e3ea:	4a0d      	ldr	r2, [pc, #52]	; (800e420 <TL_Init+0x6c>)
 800e3ec:	619a      	str	r2, [r3, #24]
  TL_RefTable.p_zigbee_table = &TL_Zigbee_Table;
 800e3ee:	4b03      	ldr	r3, [pc, #12]	; (800e3fc <TL_Init+0x48>)
 800e3f0:	4a0c      	ldr	r2, [pc, #48]	; (800e424 <TL_Init+0x70>)
 800e3f2:	61da      	str	r2, [r3, #28]
  HW_IPCC_Init();
 800e3f4:	f7f6 faf2 	bl	80049dc <HW_IPCC_Init>

  return;
 800e3f8:	bf00      	nop
}
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	20030000 	.word	0x20030000
 800e400:	20030134 	.word	0x20030134
 800e404:	20030154 	.word	0x20030154
 800e408:	20030164 	.word	0x20030164
 800e40c:	20030174 	.word	0x20030174
 800e410:	2003017c 	.word	0x2003017c
 800e414:	20030184 	.word	0x20030184
 800e418:	2003018c 	.word	0x2003018c
 800e41c:	200301a8 	.word	0x200301a8
 800e420:	200301ac 	.word	0x200301ac
 800e424:	200301b8 	.word	0x200301b8

0800e428 <TL_BLE_Init>:

/******************************************************************************
 * BLE
 ******************************************************************************/
int32_t TL_BLE_Init( void* pConf )
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	6078      	str	r0, [r7, #4]
  MB_BleTable_t  * p_bletable;

  TL_BLE_InitConf_t *pInitHciConf = (TL_BLE_InitConf_t *) pConf;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	60fb      	str	r3, [r7, #12]

  LST_init_head (&EvtQueue);
 800e434:	4811      	ldr	r0, [pc, #68]	; (800e47c <TL_BLE_Init+0x54>)
 800e436:	f7ff f9db 	bl	800d7f0 <LST_init_head>

  p_bletable = TL_RefTable.p_ble_table;
 800e43a:	4b11      	ldr	r3, [pc, #68]	; (800e480 <TL_BLE_Init+0x58>)
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	60bb      	str	r3, [r7, #8]

  p_bletable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	689a      	ldr	r2, [r3, #8]
 800e444:	68bb      	ldr	r3, [r7, #8]
 800e446:	601a      	str	r2, [r3, #0]
  p_bletable->phci_acl_data_buffer = pInitHciConf->p_AclDataBuffer;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	68da      	ldr	r2, [r3, #12]
 800e44c:	68bb      	ldr	r3, [r7, #8]
 800e44e:	60da      	str	r2, [r3, #12]
  p_bletable->pcs_buffer  = (uint8_t*)CsBuffer;
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	4a0c      	ldr	r2, [pc, #48]	; (800e484 <TL_BLE_Init+0x5c>)
 800e454:	605a      	str	r2, [r3, #4]
  p_bletable->pevt_queue  = (uint8_t*)&EvtQueue;
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	4a08      	ldr	r2, [pc, #32]	; (800e47c <TL_BLE_Init+0x54>)
 800e45a:	609a      	str	r2, [r3, #8]

  HW_IPCC_BLE_Init();
 800e45c:	f7f6 fad4 	bl	8004a08 <HW_IPCC_BLE_Init>

  BLE_IoBusEvtCallBackFunction = pInitHciConf->IoBusEvtCallBack;
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a08      	ldr	r2, [pc, #32]	; (800e488 <TL_BLE_Init+0x60>)
 800e466:	6013      	str	r3, [r2, #0]
  BLE_IoBusAclDataTxAck = pInitHciConf->IoBusAclDataTxAck;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	685b      	ldr	r3, [r3, #4]
 800e46c:	4a07      	ldr	r2, [pc, #28]	; (800e48c <TL_BLE_Init+0x64>)
 800e46e:	6013      	str	r3, [r2, #0]

  return 0;
 800e470:	2300      	movs	r3, #0
}
 800e472:	4618      	mov	r0, r3
 800e474:	3710      	adds	r7, #16
 800e476:	46bd      	mov	sp, r7
 800e478:	bd80      	pop	{r7, pc}
 800e47a:	bf00      	nop
 800e47c:	200301d4 	.word	0x200301d4
 800e480:	20030000 	.word	0x20030000
 800e484:	20030a58 	.word	0x20030a58
 800e488:	20001844 	.word	0x20001844
 800e48c:	20001848 	.word	0x20001848

0800e490 <TL_BLE_SendCmd>:

int32_t TL_BLE_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b082      	sub	sp, #8
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	460b      	mov	r3, r1
 800e49a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t*)(TL_RefTable.p_ble_table->pcmd_buffer))->cmdserial.type = TL_BLECMD_PKT_TYPE;
 800e49c:	4b09      	ldr	r3, [pc, #36]	; (800e4c4 <TL_BLE_SendCmd+0x34>)
 800e49e:	685b      	ldr	r3, [r3, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	2201      	movs	r2, #1
 800e4a4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_BLE_CMD, TL_RefTable.p_ble_table->pcmd_buffer);
 800e4a6:	4b07      	ldr	r3, [pc, #28]	; (800e4c4 <TL_BLE_SendCmd+0x34>)
 800e4a8:	685b      	ldr	r3, [r3, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4619      	mov	r1, r3
 800e4ae:	2001      	movs	r0, #1
 800e4b0:	f000 f96c 	bl	800e78c <OutputDbgTrace>

  HW_IPCC_BLE_SendCmd();
 800e4b4:	f7f6 fab2 	bl	8004a1c <HW_IPCC_BLE_SendCmd>

  return 0;
 800e4b8:	2300      	movs	r3, #0
}
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	3708      	adds	r7, #8
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	bd80      	pop	{r7, pc}
 800e4c2:	bf00      	nop
 800e4c4:	20030000 	.word	0x20030000

0800e4c8 <HW_IPCC_BLE_RxEvtNot>:

void HW_IPCC_BLE_RxEvtNot(void)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b082      	sub	sp, #8
 800e4cc:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&EvtQueue) == FALSE)
 800e4ce:	e01c      	b.n	800e50a <HW_IPCC_BLE_RxEvtNot+0x42>
  {
    LST_remove_head (&EvtQueue, (tListNode **)&phcievt);
 800e4d0:	1d3b      	adds	r3, r7, #4
 800e4d2:	4619      	mov	r1, r3
 800e4d4:	4812      	ldr	r0, [pc, #72]	; (800e520 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e4d6:	f7ff fa2a 	bl	800d92e <LST_remove_head>

    if ( ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CS_OPCODE) || ((phcievt->evtserial.evt.evtcode) == TL_BLEEVT_CC_OPCODE ) )
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	7a5b      	ldrb	r3, [r3, #9]
 800e4de:	2b0f      	cmp	r3, #15
 800e4e0:	d003      	beq.n	800e4ea <HW_IPCC_BLE_RxEvtNot+0x22>
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	7a5b      	ldrb	r3, [r3, #9]
 800e4e6:	2b0e      	cmp	r3, #14
 800e4e8:	d105      	bne.n	800e4f6 <HW_IPCC_BLE_RxEvtNot+0x2e>
    {
      OutputDbgTrace(TL_MB_BLE_CMD_RSP, (uint8_t*)phcievt);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	4619      	mov	r1, r3
 800e4ee:	2002      	movs	r0, #2
 800e4f0:	f000 f94c 	bl	800e78c <OutputDbgTrace>
 800e4f4:	e004      	b.n	800e500 <HW_IPCC_BLE_RxEvtNot+0x38>
    }
    else
    {
      OutputDbgTrace(TL_MB_BLE_ASYNCH_EVT, (uint8_t*)phcievt);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	2003      	movs	r0, #3
 800e4fc:	f000 f946 	bl	800e78c <OutputDbgTrace>
    }

    BLE_IoBusEvtCallBackFunction(phcievt);
 800e500:	4b08      	ldr	r3, [pc, #32]	; (800e524 <HW_IPCC_BLE_RxEvtNot+0x5c>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	687a      	ldr	r2, [r7, #4]
 800e506:	4610      	mov	r0, r2
 800e508:	4798      	blx	r3
  while(LST_is_empty(&EvtQueue) == FALSE)
 800e50a:	4805      	ldr	r0, [pc, #20]	; (800e520 <HW_IPCC_BLE_RxEvtNot+0x58>)
 800e50c:	f7ff f980 	bl	800d810 <LST_is_empty>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d0dc      	beq.n	800e4d0 <HW_IPCC_BLE_RxEvtNot+0x8>
  }

  return;
 800e516:	bf00      	nop
}
 800e518:	3708      	adds	r7, #8
 800e51a:	46bd      	mov	sp, r7
 800e51c:	bd80      	pop	{r7, pc}
 800e51e:	bf00      	nop
 800e520:	200301d4 	.word	0x200301d4
 800e524:	20001844 	.word	0x20001844

0800e528 <HW_IPCC_BLE_AclDataAckNot>:

  return 0;
}

void HW_IPCC_BLE_AclDataAckNot(void)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	af00      	add	r7, sp, #0
  BLE_IoBusAclDataTxAck( );
 800e52c:	4b02      	ldr	r3, [pc, #8]	; (800e538 <HW_IPCC_BLE_AclDataAckNot+0x10>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	4798      	blx	r3

  return;
 800e532:	bf00      	nop
}
 800e534:	bd80      	pop	{r7, pc}
 800e536:	bf00      	nop
 800e538:	20001848 	.word	0x20001848

0800e53c <TL_SYS_Init>:

/******************************************************************************
 * SYSTEM
 ******************************************************************************/
int32_t TL_SYS_Init( void* pConf  )
{
 800e53c:	b580      	push	{r7, lr}
 800e53e:	b084      	sub	sp, #16
 800e540:	af00      	add	r7, sp, #0
 800e542:	6078      	str	r0, [r7, #4]
  MB_SysTable_t  * p_systable;

  TL_SYS_InitConf_t *pInitHciConf = (TL_SYS_InitConf_t *) pConf;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	60fb      	str	r3, [r7, #12]

  LST_init_head (&SystemEvtQueue);
 800e548:	480d      	ldr	r0, [pc, #52]	; (800e580 <TL_SYS_Init+0x44>)
 800e54a:	f7ff f951 	bl	800d7f0 <LST_init_head>
  p_systable = TL_RefTable.p_sys_table;
 800e54e:	4b0d      	ldr	r3, [pc, #52]	; (800e584 <TL_SYS_Init+0x48>)
 800e550:	68db      	ldr	r3, [r3, #12]
 800e552:	60bb      	str	r3, [r7, #8]
  p_systable->pcmd_buffer = pInitHciConf->p_cmdbuffer;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	689a      	ldr	r2, [r3, #8]
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	601a      	str	r2, [r3, #0]
  p_systable->sys_queue = (uint8_t*)&SystemEvtQueue;
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	4a08      	ldr	r2, [pc, #32]	; (800e580 <TL_SYS_Init+0x44>)
 800e560:	605a      	str	r2, [r3, #4]

  HW_IPCC_SYS_Init();
 800e562:	f7f6 fa7d 	bl	8004a60 <HW_IPCC_SYS_Init>

  SYS_CMD_IoBusCallBackFunction = pInitHciConf->IoBusCallBackCmdEvt;
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	4a07      	ldr	r2, [pc, #28]	; (800e588 <TL_SYS_Init+0x4c>)
 800e56c:	6013      	str	r3, [r2, #0]
  SYS_EVT_IoBusCallBackFunction = pInitHciConf->IoBusCallBackUserEvt;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	4a06      	ldr	r2, [pc, #24]	; (800e58c <TL_SYS_Init+0x50>)
 800e574:	6013      	str	r3, [r2, #0]

  return 0;
 800e576:	2300      	movs	r3, #0
}
 800e578:	4618      	mov	r0, r3
 800e57a:	3710      	adds	r7, #16
 800e57c:	46bd      	mov	sp, r7
 800e57e:	bd80      	pop	{r7, pc}
 800e580:	200301dc 	.word	0x200301dc
 800e584:	20030000 	.word	0x20030000
 800e588:	2000184c 	.word	0x2000184c
 800e58c:	20001850 	.word	0x20001850

0800e590 <TL_SYS_SendCmd>:

int32_t TL_SYS_SendCmd( uint8_t* buffer, uint16_t size )
{
 800e590:	b580      	push	{r7, lr}
 800e592:	b082      	sub	sp, #8
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	460b      	mov	r3, r1
 800e59a:	807b      	strh	r3, [r7, #2]
  (void)(buffer);
  (void)(size);

  ((TL_CmdPacket_t *)(TL_RefTable.p_sys_table->pcmd_buffer))->cmdserial.type = TL_SYSCMD_PKT_TYPE;
 800e59c:	4b09      	ldr	r3, [pc, #36]	; (800e5c4 <TL_SYS_SendCmd+0x34>)
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2210      	movs	r2, #16
 800e5a4:	721a      	strb	r2, [r3, #8]

  OutputDbgTrace(TL_MB_SYS_CMD, TL_RefTable.p_sys_table->pcmd_buffer);
 800e5a6:	4b07      	ldr	r3, [pc, #28]	; (800e5c4 <TL_SYS_SendCmd+0x34>)
 800e5a8:	68db      	ldr	r3, [r3, #12]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	4619      	mov	r1, r3
 800e5ae:	2004      	movs	r0, #4
 800e5b0:	f000 f8ec 	bl	800e78c <OutputDbgTrace>

  HW_IPCC_SYS_SendCmd();
 800e5b4:	f7f6 fa5e 	bl	8004a74 <HW_IPCC_SYS_SendCmd>

  return 0;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3708      	adds	r7, #8
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	20030000 	.word	0x20030000

0800e5c8 <HW_IPCC_SYS_CmdEvtNot>:

void HW_IPCC_SYS_CmdEvtNot(void)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	af00      	add	r7, sp, #0
  OutputDbgTrace(TL_MB_SYS_CMD_RSP, (uint8_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e5cc:	4b07      	ldr	r3, [pc, #28]	; (800e5ec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e5ce:	68db      	ldr	r3, [r3, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4619      	mov	r1, r3
 800e5d4:	2005      	movs	r0, #5
 800e5d6:	f000 f8d9 	bl	800e78c <OutputDbgTrace>

  SYS_CMD_IoBusCallBackFunction( (TL_EvtPacket_t*)(TL_RefTable.p_sys_table->pcmd_buffer) );
 800e5da:	4b05      	ldr	r3, [pc, #20]	; (800e5f0 <HW_IPCC_SYS_CmdEvtNot+0x28>)
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	4a03      	ldr	r2, [pc, #12]	; (800e5ec <HW_IPCC_SYS_CmdEvtNot+0x24>)
 800e5e0:	68d2      	ldr	r2, [r2, #12]
 800e5e2:	6812      	ldr	r2, [r2, #0]
 800e5e4:	4610      	mov	r0, r2
 800e5e6:	4798      	blx	r3

  return;
 800e5e8:	bf00      	nop
}
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	20030000 	.word	0x20030000
 800e5f0:	2000184c 	.word	0x2000184c

0800e5f4 <HW_IPCC_SYS_EvtNot>:

void HW_IPCC_SYS_EvtNot( void )
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *p_evt;

  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e5fa:	e00e      	b.n	800e61a <HW_IPCC_SYS_EvtNot+0x26>
  {
    LST_remove_head (&SystemEvtQueue, (tListNode **)&p_evt);
 800e5fc:	1d3b      	adds	r3, r7, #4
 800e5fe:	4619      	mov	r1, r3
 800e600:	480b      	ldr	r0, [pc, #44]	; (800e630 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e602:	f7ff f994 	bl	800d92e <LST_remove_head>

    OutputDbgTrace(TL_MB_SYS_ASYNCH_EVT, (uint8_t*)p_evt );
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	4619      	mov	r1, r3
 800e60a:	2006      	movs	r0, #6
 800e60c:	f000 f8be 	bl	800e78c <OutputDbgTrace>

    SYS_EVT_IoBusCallBackFunction( p_evt );
 800e610:	4b08      	ldr	r3, [pc, #32]	; (800e634 <HW_IPCC_SYS_EvtNot+0x40>)
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	687a      	ldr	r2, [r7, #4]
 800e616:	4610      	mov	r0, r2
 800e618:	4798      	blx	r3
  while(LST_is_empty(&SystemEvtQueue) == FALSE)
 800e61a:	4805      	ldr	r0, [pc, #20]	; (800e630 <HW_IPCC_SYS_EvtNot+0x3c>)
 800e61c:	f7ff f8f8 	bl	800d810 <LST_is_empty>
 800e620:	4603      	mov	r3, r0
 800e622:	2b00      	cmp	r3, #0
 800e624:	d0ea      	beq.n	800e5fc <HW_IPCC_SYS_EvtNot+0x8>
  }

  return;
 800e626:	bf00      	nop
}
 800e628:	3708      	adds	r7, #8
 800e62a:	46bd      	mov	sp, r7
 800e62c:	bd80      	pop	{r7, pc}
 800e62e:	bf00      	nop
 800e630:	200301dc 	.word	0x200301dc
 800e634:	20001850 	.word	0x20001850

0800e638 <TL_MM_Init>:

/******************************************************************************
 * MEMORY MANAGER
 ******************************************************************************/
void TL_MM_Init( TL_MM_Config_t *p_Config )
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  static MB_MemManagerTable_t  * p_mem_manager_table;

  LST_init_head (&FreeBufQueue);
 800e640:	4817      	ldr	r0, [pc, #92]	; (800e6a0 <TL_MM_Init+0x68>)
 800e642:	f7ff f8d5 	bl	800d7f0 <LST_init_head>
  LST_init_head (&LocalFreeBufQueue);
 800e646:	4817      	ldr	r0, [pc, #92]	; (800e6a4 <TL_MM_Init+0x6c>)
 800e648:	f7ff f8d2 	bl	800d7f0 <LST_init_head>

  p_mem_manager_table = TL_RefTable.p_mem_manager_table;
 800e64c:	4b16      	ldr	r3, [pc, #88]	; (800e6a8 <TL_MM_Init+0x70>)
 800e64e:	691b      	ldr	r3, [r3, #16]
 800e650:	4a16      	ldr	r2, [pc, #88]	; (800e6ac <TL_MM_Init+0x74>)
 800e652:	6013      	str	r3, [r2, #0]

  p_mem_manager_table->blepool = p_Config->p_AsynchEvtPool;
 800e654:	4b15      	ldr	r3, [pc, #84]	; (800e6ac <TL_MM_Init+0x74>)
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	6892      	ldr	r2, [r2, #8]
 800e65c:	609a      	str	r2, [r3, #8]
  p_mem_manager_table->blepoolsize = p_Config->AsynchEvtPoolSize;
 800e65e:	4b13      	ldr	r3, [pc, #76]	; (800e6ac <TL_MM_Init+0x74>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	687a      	ldr	r2, [r7, #4]
 800e664:	68d2      	ldr	r2, [r2, #12]
 800e666:	60da      	str	r2, [r3, #12]
  p_mem_manager_table->pevt_free_buffer_queue = (uint8_t*)&FreeBufQueue;
 800e668:	4b10      	ldr	r3, [pc, #64]	; (800e6ac <TL_MM_Init+0x74>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a0c      	ldr	r2, [pc, #48]	; (800e6a0 <TL_MM_Init+0x68>)
 800e66e:	611a      	str	r2, [r3, #16]
  p_mem_manager_table->spare_ble_buffer = p_Config->p_BleSpareEvtBuffer;
 800e670:	4b0e      	ldr	r3, [pc, #56]	; (800e6ac <TL_MM_Init+0x74>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	687a      	ldr	r2, [r7, #4]
 800e676:	6812      	ldr	r2, [r2, #0]
 800e678:	601a      	str	r2, [r3, #0]
  p_mem_manager_table->spare_sys_buffer = p_Config->p_SystemSpareEvtBuffer;
 800e67a:	4b0c      	ldr	r3, [pc, #48]	; (800e6ac <TL_MM_Init+0x74>)
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	6852      	ldr	r2, [r2, #4]
 800e682:	605a      	str	r2, [r3, #4]
  p_mem_manager_table->traces_evt_pool = p_Config->p_TracesEvtPool;
 800e684:	4b09      	ldr	r3, [pc, #36]	; (800e6ac <TL_MM_Init+0x74>)
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	687a      	ldr	r2, [r7, #4]
 800e68a:	6912      	ldr	r2, [r2, #16]
 800e68c:	615a      	str	r2, [r3, #20]
  p_mem_manager_table->tracespoolsize = p_Config->TracesEvtPoolSize;
 800e68e:	4b07      	ldr	r3, [pc, #28]	; (800e6ac <TL_MM_Init+0x74>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	687a      	ldr	r2, [r7, #4]
 800e694:	6952      	ldr	r2, [r2, #20]
 800e696:	619a      	str	r2, [r3, #24]

  return;
 800e698:	bf00      	nop
}
 800e69a:	3708      	adds	r7, #8
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	200301c4 	.word	0x200301c4
 800e6a4:	2000183c 	.word	0x2000183c
 800e6a8:	20030000 	.word	0x20030000
 800e6ac:	20001854 	.word	0x20001854

0800e6b0 <TL_MM_EvtDone>:

void TL_MM_EvtDone(TL_EvtPacket_t * phcievt)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  LST_insert_tail(&LocalFreeBufQueue, (tListNode *)phcievt);
 800e6b8:	6879      	ldr	r1, [r7, #4]
 800e6ba:	4807      	ldr	r0, [pc, #28]	; (800e6d8 <TL_MM_EvtDone+0x28>)
 800e6bc:	f7ff f8f0 	bl	800d8a0 <LST_insert_tail>

  OutputDbgTrace(TL_MB_MM_RELEASE_BUFFER, (uint8_t*)phcievt);
 800e6c0:	6879      	ldr	r1, [r7, #4]
 800e6c2:	2000      	movs	r0, #0
 800e6c4:	f000 f862 	bl	800e78c <OutputDbgTrace>

  HW_IPCC_MM_SendFreeBuf( SendFreeBuf );
 800e6c8:	4804      	ldr	r0, [pc, #16]	; (800e6dc <TL_MM_EvtDone+0x2c>)
 800e6ca:	f7f6 f9f9 	bl	8004ac0 <HW_IPCC_MM_SendFreeBuf>

  return;
 800e6ce:	bf00      	nop
}
 800e6d0:	3708      	adds	r7, #8
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bd80      	pop	{r7, pc}
 800e6d6:	bf00      	nop
 800e6d8:	2000183c 	.word	0x2000183c
 800e6dc:	0800e6e1 	.word	0x0800e6e1

0800e6e0 <SendFreeBuf>:

static void SendFreeBuf( void )
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b082      	sub	sp, #8
 800e6e4:	af00      	add	r7, sp, #0
  tListNode *p_node;

  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e6e6:	e00c      	b.n	800e702 <SendFreeBuf+0x22>
  {
    LST_remove_head( &LocalFreeBufQueue, (tListNode **)&p_node );
 800e6e8:	1d3b      	adds	r3, r7, #4
 800e6ea:	4619      	mov	r1, r3
 800e6ec:	480a      	ldr	r0, [pc, #40]	; (800e718 <SendFreeBuf+0x38>)
 800e6ee:	f7ff f91e 	bl	800d92e <LST_remove_head>
    LST_insert_tail( (tListNode*)(TL_RefTable.p_mem_manager_table->pevt_free_buffer_queue), p_node );
 800e6f2:	4b0a      	ldr	r3, [pc, #40]	; (800e71c <SendFreeBuf+0x3c>)
 800e6f4:	691b      	ldr	r3, [r3, #16]
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	687a      	ldr	r2, [r7, #4]
 800e6fa:	4611      	mov	r1, r2
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	f7ff f8cf 	bl	800d8a0 <LST_insert_tail>
  while ( FALSE == LST_is_empty (&LocalFreeBufQueue) )
 800e702:	4805      	ldr	r0, [pc, #20]	; (800e718 <SendFreeBuf+0x38>)
 800e704:	f7ff f884 	bl	800d810 <LST_is_empty>
 800e708:	4603      	mov	r3, r0
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d0ec      	beq.n	800e6e8 <SendFreeBuf+0x8>
  }

  return;
 800e70e:	bf00      	nop
}
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	2000183c 	.word	0x2000183c
 800e71c:	20030000 	.word	0x20030000

0800e720 <TL_TRACES_Init>:

/******************************************************************************
 * TRACES
 ******************************************************************************/
void TL_TRACES_Init( void )
{
 800e720:	b580      	push	{r7, lr}
 800e722:	af00      	add	r7, sp, #0
  LST_init_head (&TracesEvtQueue);
 800e724:	4805      	ldr	r0, [pc, #20]	; (800e73c <TL_TRACES_Init+0x1c>)
 800e726:	f7ff f863 	bl	800d7f0 <LST_init_head>

  TL_RefTable.p_traces_table->traces_queue = (uint8_t*)&TracesEvtQueue;
 800e72a:	4b05      	ldr	r3, [pc, #20]	; (800e740 <TL_TRACES_Init+0x20>)
 800e72c:	695b      	ldr	r3, [r3, #20]
 800e72e:	4a03      	ldr	r2, [pc, #12]	; (800e73c <TL_TRACES_Init+0x1c>)
 800e730:	601a      	str	r2, [r3, #0]

  HW_IPCC_TRACES_Init();
 800e732:	f7f6 f9fb 	bl	8004b2c <HW_IPCC_TRACES_Init>

  return;
 800e736:	bf00      	nop
}
 800e738:	bd80      	pop	{r7, pc}
 800e73a:	bf00      	nop
 800e73c:	200301cc 	.word	0x200301cc
 800e740:	20030000 	.word	0x20030000

0800e744 <HW_IPCC_TRACES_EvtNot>:

void HW_IPCC_TRACES_EvtNot(void)
{
 800e744:	b580      	push	{r7, lr}
 800e746:	b082      	sub	sp, #8
 800e748:	af00      	add	r7, sp, #0
  TL_EvtPacket_t *phcievt;

  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e74a:	e008      	b.n	800e75e <HW_IPCC_TRACES_EvtNot+0x1a>
  {
    LST_remove_head (&TracesEvtQueue, (tListNode **)&phcievt);
 800e74c:	1d3b      	adds	r3, r7, #4
 800e74e:	4619      	mov	r1, r3
 800e750:	4808      	ldr	r0, [pc, #32]	; (800e774 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e752:	f7ff f8ec 	bl	800d92e <LST_remove_head>
    TL_TRACES_EvtReceived( phcievt );
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	4618      	mov	r0, r3
 800e75a:	f000 f80d 	bl	800e778 <TL_TRACES_EvtReceived>
  while(LST_is_empty(&TracesEvtQueue) == FALSE)
 800e75e:	4805      	ldr	r0, [pc, #20]	; (800e774 <HW_IPCC_TRACES_EvtNot+0x30>)
 800e760:	f7ff f856 	bl	800d810 <LST_is_empty>
 800e764:	4603      	mov	r3, r0
 800e766:	2b00      	cmp	r3, #0
 800e768:	d0f0      	beq.n	800e74c <HW_IPCC_TRACES_EvtNot+0x8>
  }

  return;
 800e76a:	bf00      	nop
}
 800e76c:	3708      	adds	r7, #8
 800e76e:	46bd      	mov	sp, r7
 800e770:	bd80      	pop	{r7, pc}
 800e772:	bf00      	nop
 800e774:	200301cc 	.word	0x200301cc

0800e778 <TL_TRACES_EvtReceived>:

__WEAK void TL_TRACES_EvtReceived( TL_EvtPacket_t * hcievt )
{
 800e778:	b480      	push	{r7}
 800e77a:	b083      	sub	sp, #12
 800e77c:	af00      	add	r7, sp, #0
 800e77e:	6078      	str	r0, [r7, #4]
  (void)(hcievt);
}
 800e780:	bf00      	nop
 800e782:	370c      	adds	r7, #12
 800e784:	46bd      	mov	sp, r7
 800e786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e78a:	4770      	bx	lr

0800e78c <OutputDbgTrace>:

/******************************************************************************
 * DEBUG INFORMATION
 ******************************************************************************/
static void OutputDbgTrace(TL_MB_PacketType_t packet_type, uint8_t* buffer)
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	4603      	mov	r3, r0
 800e794:	6039      	str	r1, [r7, #0]
 800e796:	71fb      	strb	r3, [r7, #7]
  TL_EvtPacket_t *p_evt_packet;
  TL_CmdPacket_t *p_cmd_packet;

  switch(packet_type)
 800e798:	79fb      	ldrb	r3, [r7, #7]
 800e79a:	2b06      	cmp	r3, #6
 800e79c:	d845      	bhi.n	800e82a <OutputDbgTrace+0x9e>
 800e79e:	a201      	add	r2, pc, #4	; (adr r2, 800e7a4 <OutputDbgTrace+0x18>)
 800e7a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7a4:	0800e7c1 	.word	0x0800e7c1
 800e7a8:	0800e7e5 	.word	0x0800e7e5
 800e7ac:	0800e7eb 	.word	0x0800e7eb
 800e7b0:	0800e7ff 	.word	0x0800e7ff
 800e7b4:	0800e80b 	.word	0x0800e80b
 800e7b8:	0800e811 	.word	0x0800e811
 800e7bc:	0800e81f 	.word	0x0800e81f
  {
    case TL_MB_MM_RELEASE_BUFFER:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e7c0:	683b      	ldr	r3, [r7, #0]
 800e7c2:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	7a5b      	ldrb	r3, [r3, #9]
 800e7c8:	2bff      	cmp	r3, #255	; 0xff
 800e7ca:	d005      	beq.n	800e7d8 <OutputDbgTrace+0x4c>
 800e7cc:	2bff      	cmp	r3, #255	; 0xff
 800e7ce:	dc05      	bgt.n	800e7dc <OutputDbgTrace+0x50>
 800e7d0:	2b0e      	cmp	r3, #14
 800e7d2:	d005      	beq.n	800e7e0 <OutputDbgTrace+0x54>
 800e7d4:	2b0f      	cmp	r3, #15
          break;

        default:
          TL_MM_DBG_MSG("mm evt released: 0x%02X", p_evt_packet->evtserial.evt.evtcode);
          TL_MM_DBG_MSG(" buffer addr: 0x%08X", p_evt_packet);
          break;
 800e7d6:	e001      	b.n	800e7dc <OutputDbgTrace+0x50>
          break;
 800e7d8:	bf00      	nop
 800e7da:	e027      	b.n	800e82c <OutputDbgTrace+0xa0>
          break;
 800e7dc:	bf00      	nop
 800e7de:	e025      	b.n	800e82c <OutputDbgTrace+0xa0>
          break;
 800e7e0:	bf00      	nop
      }

      TL_MM_DBG_MSG("\r\n");
      break;
 800e7e2:	e023      	b.n	800e82c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	60bb      	str	r3, [r7, #8]
        TL_HCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e7e8:	e020      	b.n	800e82c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	7a5b      	ldrb	r3, [r3, #9]
 800e7f2:	2b0e      	cmp	r3, #14
 800e7f4:	d001      	beq.n	800e7fa <OutputDbgTrace+0x6e>
 800e7f6:	2b0f      	cmp	r3, #15
          }
          break;

        default:
          TL_HCI_CMD_DBG_MSG("unknown ble rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e7f8:	e000      	b.n	800e7fc <OutputDbgTrace+0x70>
          break;
 800e7fa:	bf00      	nop
      }

      TL_HCI_CMD_DBG_MSG("\r\n");

      TL_HCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e7fc:	e016      	b.n	800e82c <OutputDbgTrace+0xa0>

    case TL_MB_BLE_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	7a5b      	ldrb	r3, [r3, #9]
 800e806:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_HCI_EVT_DBG_MSG("\r\n");

      TL_HCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e808:	e010      	b.n	800e82c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD:
      p_cmd_packet = (TL_CmdPacket_t*)buffer;
 800e80a:	683b      	ldr	r3, [r7, #0]
 800e80c:	60bb      	str	r3, [r7, #8]
        TL_SHCI_CMD_DBG_BUF(p_cmd_packet->cmdserial.cmd.payload, p_cmd_packet->cmdserial.cmd.plen, "");
      }
      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_cmd_packet->cmdserial, p_cmd_packet->cmdserial.cmd.plen+TL_CMD_HDR_SIZE);
      break;
 800e80e:	e00d      	b.n	800e82c <OutputDbgTrace+0xa0>

    case TL_MB_SYS_CMD_RSP:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e810:	683b      	ldr	r3, [r7, #0]
 800e812:	60fb      	str	r3, [r7, #12]
      switch(p_evt_packet->evtserial.evt.evtcode)
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	7a5b      	ldrb	r3, [r3, #9]
 800e818:	2b0e      	cmp	r3, #14
          }
          break;

        default:
          TL_SHCI_CMD_DBG_MSG("unknown sys rsp received: %02X", p_evt_packet->evtserial.evt.evtcode);
          break;
 800e81a:	bf00      	nop
      }

      TL_SHCI_CMD_DBG_MSG("\r\n");

      TL_SHCI_CMD_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e81c:	e006      	b.n	800e82c <OutputDbgTrace+0xa0>

    case  TL_MB_SYS_ASYNCH_EVT:
      p_evt_packet = (TL_EvtPacket_t*)buffer;
 800e81e:	683b      	ldr	r3, [r7, #0]
 800e820:	60fb      	str	r3, [r7, #12]
      if(p_evt_packet->evtserial.evt.evtcode != TL_BLEEVT_VS_OPCODE)
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	7a5b      	ldrb	r3, [r3, #9]
 800e826:	2bff      	cmp	r3, #255	; 0xff
      }

      TL_SHCI_EVT_DBG_MSG("\r\n");

      TL_SHCI_EVT_DBG_RAW(&p_evt_packet->evtserial, p_evt_packet->evtserial.evt.plen+TL_EVT_HDR_SIZE);
      break;
 800e828:	e000      	b.n	800e82c <OutputDbgTrace+0xa0>

    default:
      break;
 800e82a:	bf00      	nop
  }

  return;
 800e82c:	bf00      	nop
}
 800e82e:	3714      	adds	r7, #20
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800e838:	b480      	push	{r7}
 800e83a:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800e83c:	4b05      	ldr	r3, [pc, #20]	; (800e854 <UTIL_LPM_Init+0x1c>)
 800e83e:	2200      	movs	r2, #0
 800e840:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800e842:	4b05      	ldr	r3, [pc, #20]	; (800e858 <UTIL_LPM_Init+0x20>)
 800e844:	2200      	movs	r2, #0
 800e846:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800e848:	bf00      	nop
 800e84a:	46bd      	mov	sp, r7
 800e84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e850:	4770      	bx	lr
 800e852:	bf00      	nop
 800e854:	20001858 	.word	0x20001858
 800e858:	2000185c 	.word	0x2000185c

0800e85c <UTIL_LPM_SetOffMode>:
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	6078      	str	r0, [r7, #4]
 800e864:	460b      	mov	r3, r1
 800e866:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e868:	f3ef 8310 	mrs	r3, PRIMASK
 800e86c:	613b      	str	r3, [r7, #16]
  return(result);
 800e86e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800e870:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800e872:	b672      	cpsid	i
}
 800e874:	bf00      	nop
  
  switch(state)
 800e876:	78fb      	ldrb	r3, [r7, #3]
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d008      	beq.n	800e88e <UTIL_LPM_SetOffMode+0x32>
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d10e      	bne.n	800e89e <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800e880:	4b0d      	ldr	r3, [pc, #52]	; (800e8b8 <UTIL_LPM_SetOffMode+0x5c>)
 800e882:	681a      	ldr	r2, [r3, #0]
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	4313      	orrs	r3, r2
 800e888:	4a0b      	ldr	r2, [pc, #44]	; (800e8b8 <UTIL_LPM_SetOffMode+0x5c>)
 800e88a:	6013      	str	r3, [r2, #0]
      break;
 800e88c:	e008      	b.n	800e8a0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	43da      	mvns	r2, r3
 800e892:	4b09      	ldr	r3, [pc, #36]	; (800e8b8 <UTIL_LPM_SetOffMode+0x5c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	4013      	ands	r3, r2
 800e898:	4a07      	ldr	r2, [pc, #28]	; (800e8b8 <UTIL_LPM_SetOffMode+0x5c>)
 800e89a:	6013      	str	r3, [r2, #0]
      break;
 800e89c:	e000      	b.n	800e8a0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800e89e:	bf00      	nop
 800e8a0:	697b      	ldr	r3, [r7, #20]
 800e8a2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e8a4:	68fb      	ldr	r3, [r7, #12]
 800e8a6:	f383 8810 	msr	PRIMASK, r3
}
 800e8aa:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800e8ac:	bf00      	nop
 800e8ae:	371c      	adds	r7, #28
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b6:	4770      	bx	lr
 800e8b8:	2000185c 	.word	0x2000185c

0800e8bc <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800e8bc:	b580      	push	{r7, lr}
 800e8be:	b090      	sub	sp, #64	; 0x40
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800e8c4:	4b73      	ldr	r3, [pc, #460]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800e8ca:	4b72      	ldr	r3, [pc, #456]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800e8cc:	681a      	ldr	r2, [r3, #0]
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	4013      	ands	r3, r2
 800e8d2:	4a70      	ldr	r2, [pc, #448]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800e8d4:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 800e8d6:	4b70      	ldr	r3, [pc, #448]	; (800ea98 <UTIL_SEQ_Run+0x1dc>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800e8dc:	4b6f      	ldr	r3, [pc, #444]	; (800ea9c <UTIL_SEQ_Run+0x1e0>)
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800e8e2:	4b6f      	ldr	r3, [pc, #444]	; (800eaa0 <UTIL_SEQ_Run+0x1e4>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	633b      	str	r3, [r7, #48]	; 0x30
  local_evtwaited =  EvtWaited;
 800e8e8:	4b6e      	ldr	r3, [pc, #440]	; (800eaa4 <UTIL_SEQ_Run+0x1e8>)
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800e8ee:	e08d      	b.n	800ea0c <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e8f4:	e002      	b.n	800e8fc <UTIL_SEQ_Run+0x40>
    {
      counter++;
 800e8f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f8:	3301      	adds	r3, #1
 800e8fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 800e8fc:	4a6a      	ldr	r2, [pc, #424]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e8fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e900:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e906:	401a      	ands	r2, r3
 800e908:	4b62      	ldr	r3, [pc, #392]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	4013      	ands	r3, r2
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d0f1      	beq.n	800e8f6 <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 800e912:	4a65      	ldr	r2, [pc, #404]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e916:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800e91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e91c:	401a      	ands	r2, r3
 800e91e:	4b5d      	ldr	r3, [pc, #372]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4013      	ands	r3, r2
 800e924:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800e926:	4a60      	ldr	r2, [pc, #384]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e92a:	00db      	lsls	r3, r3, #3
 800e92c:	4413      	add	r3, r2
 800e92e:	685a      	ldr	r2, [r3, #4]
 800e930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e932:	4013      	ands	r3, r2
 800e934:	2b00      	cmp	r3, #0
 800e936:	d106      	bne.n	800e946 <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800e938:	4a5b      	ldr	r2, [pc, #364]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e93c:	00db      	lsls	r3, r3, #3
 800e93e:	4413      	add	r3, r2
 800e940:	f04f 32ff 	mov.w	r2, #4294967295
 800e944:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800e946:	4a58      	ldr	r2, [pc, #352]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e94a:	00db      	lsls	r3, r3, #3
 800e94c:	4413      	add	r3, r2
 800e94e:	685a      	ldr	r2, [r3, #4]
 800e950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e952:	4013      	ands	r3, r2
 800e954:	4618      	mov	r0, r3
 800e956:	f000 f9b3 	bl	800ecc0 <SEQ_BitPosition>
 800e95a:	4603      	mov	r3, r0
 800e95c:	461a      	mov	r2, r3
 800e95e:	4b53      	ldr	r3, [pc, #332]	; (800eaac <UTIL_SEQ_Run+0x1f0>)
 800e960:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800e962:	4a51      	ldr	r2, [pc, #324]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e966:	00db      	lsls	r3, r3, #3
 800e968:	4413      	add	r3, r2
 800e96a:	685a      	ldr	r2, [r3, #4]
 800e96c:	4b4f      	ldr	r3, [pc, #316]	; (800eaac <UTIL_SEQ_Run+0x1f0>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	2101      	movs	r1, #1
 800e972:	fa01 f303 	lsl.w	r3, r1, r3
 800e976:	43db      	mvns	r3, r3
 800e978:	401a      	ands	r2, r3
 800e97a:	494b      	ldr	r1, [pc, #300]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e97c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e97e:	00db      	lsls	r3, r3, #3
 800e980:	440b      	add	r3, r1
 800e982:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e984:	f3ef 8310 	mrs	r3, PRIMASK
 800e988:	61bb      	str	r3, [r7, #24]
  return(result);
 800e98a:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800e98c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800e98e:	b672      	cpsid	i
}
 800e990:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800e992:	4b46      	ldr	r3, [pc, #280]	; (800eaac <UTIL_SEQ_Run+0x1f0>)
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	2201      	movs	r2, #1
 800e998:	fa02 f303 	lsl.w	r3, r2, r3
 800e99c:	43da      	mvns	r2, r3
 800e99e:	4b3e      	ldr	r3, [pc, #248]	; (800ea98 <UTIL_SEQ_Run+0x1dc>)
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	4a3c      	ldr	r2, [pc, #240]	; (800ea98 <UTIL_SEQ_Run+0x1dc>)
 800e9a6:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e9a8:	2302      	movs	r3, #2
 800e9aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9ac:	e013      	b.n	800e9d6 <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800e9ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9b0:	3b01      	subs	r3, #1
 800e9b2:	4a3d      	ldr	r2, [pc, #244]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e9b4:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800e9b8:	4b3c      	ldr	r3, [pc, #240]	; (800eaac <UTIL_SEQ_Run+0x1f0>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	2201      	movs	r2, #1
 800e9be:	fa02 f303 	lsl.w	r3, r2, r3
 800e9c2:	43da      	mvns	r2, r3
 800e9c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9c6:	3b01      	subs	r3, #1
 800e9c8:	400a      	ands	r2, r1
 800e9ca:	4937      	ldr	r1, [pc, #220]	; (800eaa8 <UTIL_SEQ_Run+0x1ec>)
 800e9cc:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800e9d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d2:	3b01      	subs	r3, #1
 800e9d4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e9d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d1e8      	bne.n	800e9ae <UTIL_SEQ_Run+0xf2>
 800e9dc:	6a3b      	ldr	r3, [r7, #32]
 800e9de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e9e0:	697b      	ldr	r3, [r7, #20]
 800e9e2:	f383 8810 	msr	PRIMASK, r3
}
 800e9e6:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800e9e8:	4b30      	ldr	r3, [pc, #192]	; (800eaac <UTIL_SEQ_Run+0x1f0>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	4a30      	ldr	r2, [pc, #192]	; (800eab0 <UTIL_SEQ_Run+0x1f4>)
 800e9ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e9f2:	4798      	blx	r3

    local_taskset = TaskSet;
 800e9f4:	4b28      	ldr	r3, [pc, #160]	; (800ea98 <UTIL_SEQ_Run+0x1dc>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	63bb      	str	r3, [r7, #56]	; 0x38
    local_evtset = EvtSet;
 800e9fa:	4b28      	ldr	r3, [pc, #160]	; (800ea9c <UTIL_SEQ_Run+0x1e0>)
 800e9fc:	681b      	ldr	r3, [r3, #0]
 800e9fe:	637b      	str	r3, [r7, #52]	; 0x34
    local_taskmask = TaskMask;
 800ea00:	4b27      	ldr	r3, [pc, #156]	; (800eaa0 <UTIL_SEQ_Run+0x1e4>)
 800ea02:	681b      	ldr	r3, [r3, #0]
 800ea04:	633b      	str	r3, [r7, #48]	; 0x30
    local_evtwaited = EvtWaited;
 800ea06:	4b27      	ldr	r3, [pc, #156]	; (800eaa4 <UTIL_SEQ_Run+0x1e8>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 800ea0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea10:	401a      	ands	r2, r3
 800ea12:	4b20      	ldr	r3, [pc, #128]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	4013      	ands	r3, r2
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d005      	beq.n	800ea28 <UTIL_SEQ_Run+0x16c>
 800ea1c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ea1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea20:	4013      	ands	r3, r2
 800ea22:	2b00      	cmp	r3, #0
 800ea24:	f43f af64 	beq.w	800e8f0 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800ea28:	4b20      	ldr	r3, [pc, #128]	; (800eaac <UTIL_SEQ_Run+0x1f0>)
 800ea2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ea2e:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800ea30:	f000 f938 	bl	800eca4 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea34:	f3ef 8310 	mrs	r3, PRIMASK
 800ea38:	613b      	str	r3, [r7, #16]
  return(result);
 800ea3a:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800ea3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ea3e:	b672      	cpsid	i
}
 800ea40:	bf00      	nop
  local_taskset = TaskSet;
 800ea42:	4b15      	ldr	r3, [pc, #84]	; (800ea98 <UTIL_SEQ_Run+0x1dc>)
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	63bb      	str	r3, [r7, #56]	; 0x38
  local_evtset = EvtSet;
 800ea48:	4b14      	ldr	r3, [pc, #80]	; (800ea9c <UTIL_SEQ_Run+0x1e0>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	637b      	str	r3, [r7, #52]	; 0x34
  local_taskmask = TaskMask;
 800ea4e:	4b14      	ldr	r3, [pc, #80]	; (800eaa0 <UTIL_SEQ_Run+0x1e4>)
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	633b      	str	r3, [r7, #48]	; 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 800ea54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ea56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea58:	401a      	ands	r2, r3
 800ea5a:	4b0e      	ldr	r3, [pc, #56]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	4013      	ands	r3, r2
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d107      	bne.n	800ea74 <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 800ea64:	4b0f      	ldr	r3, [pc, #60]	; (800eaa4 <UTIL_SEQ_Run+0x1e8>)
 800ea66:	681a      	ldr	r2, [r3, #0]
 800ea68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea6a:	4013      	ands	r3, r2
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d101      	bne.n	800ea74 <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 800ea70:	f7f2 ff0b 	bl	800188a <UTIL_SEQ_Idle>
 800ea74:	69fb      	ldr	r3, [r7, #28]
 800ea76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	f383 8810 	msr	PRIMASK, r3
}
 800ea7e:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 800ea80:	f000 f917 	bl	800ecb2 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800ea84:	4a03      	ldr	r2, [pc, #12]	; (800ea94 <UTIL_SEQ_Run+0x1d8>)
 800ea86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea88:	6013      	str	r3, [r2, #0]

  return;
 800ea8a:	bf00      	nop
}
 800ea8c:	3740      	adds	r7, #64	; 0x40
 800ea8e:	46bd      	mov	sp, r7
 800ea90:	bd80      	pop	{r7, pc}
 800ea92:	bf00      	nop
 800ea94:	20000048 	.word	0x20000048
 800ea98:	20001860 	.word	0x20001860
 800ea9c:	20001864 	.word	0x20001864
 800eaa0:	20000044 	.word	0x20000044
 800eaa4:	20001868 	.word	0x20001868
 800eaa8:	200018f0 	.word	0x200018f0
 800eaac:	2000186c 	.word	0x2000186c
 800eab0:	20001870 	.word	0x20001870

0800eab4 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800eab4:	b580      	push	{r7, lr}
 800eab6:	b088      	sub	sp, #32
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	60f8      	str	r0, [r7, #12]
 800eabc:	60b9      	str	r1, [r7, #8]
 800eabe:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eac0:	f3ef 8310 	mrs	r3, PRIMASK
 800eac4:	617b      	str	r3, [r7, #20]
  return(result);
 800eac6:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800eac8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800eaca:	b672      	cpsid	i
}
 800eacc:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f000 f8f6 	bl	800ecc0 <SEQ_BitPosition>
 800ead4:	4603      	mov	r3, r0
 800ead6:	4619      	mov	r1, r3
 800ead8:	4a06      	ldr	r2, [pc, #24]	; (800eaf4 <UTIL_SEQ_RegTask+0x40>)
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800eae0:	69fb      	ldr	r3, [r7, #28]
 800eae2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	f383 8810 	msr	PRIMASK, r3
}
 800eaea:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800eaec:	bf00      	nop
}
 800eaee:	3720      	adds	r7, #32
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bd80      	pop	{r7, pc}
 800eaf4:	20001870 	.word	0x20001870

0800eaf8 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b087      	sub	sp, #28
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb02:	f3ef 8310 	mrs	r3, PRIMASK
 800eb06:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb08:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eb0a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb0c:	b672      	cpsid	i
}
 800eb0e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800eb10:	4b0d      	ldr	r3, [pc, #52]	; (800eb48 <UTIL_SEQ_SetTask+0x50>)
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	4313      	orrs	r3, r2
 800eb18:	4a0b      	ldr	r2, [pc, #44]	; (800eb48 <UTIL_SEQ_SetTask+0x50>)
 800eb1a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800eb1c:	4a0b      	ldr	r2, [pc, #44]	; (800eb4c <UTIL_SEQ_SetTask+0x54>)
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	431a      	orrs	r2, r3
 800eb28:	4908      	ldr	r1, [pc, #32]	; (800eb4c <UTIL_SEQ_SetTask+0x54>)
 800eb2a:	683b      	ldr	r3, [r7, #0]
 800eb2c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	f383 8810 	msr	PRIMASK, r3
}
 800eb3a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800eb3c:	bf00      	nop
}
 800eb3e:	371c      	adds	r7, #28
 800eb40:	46bd      	mov	sp, r7
 800eb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb46:	4770      	bx	lr
 800eb48:	20001860 	.word	0x20001860
 800eb4c:	200018f0 	.word	0x200018f0

0800eb50 <UTIL_SEQ_PauseTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION();
  return _status;
}

void UTIL_SEQ_PauseTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800eb50:	b480      	push	{r7}
 800eb52:	b087      	sub	sp, #28
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb58:	f3ef 8310 	mrs	r3, PRIMASK
 800eb5c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb5e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eb60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eb62:	b672      	cpsid	i
}
 800eb64:	bf00      	nop

  TaskMask &= (~TaskId_bm);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	43da      	mvns	r2, r3
 800eb6a:	4b08      	ldr	r3, [pc, #32]	; (800eb8c <UTIL_SEQ_PauseTask+0x3c>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	4013      	ands	r3, r2
 800eb70:	4a06      	ldr	r2, [pc, #24]	; (800eb8c <UTIL_SEQ_PauseTask+0x3c>)
 800eb72:	6013      	str	r3, [r2, #0]
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb78:	693b      	ldr	r3, [r7, #16]
 800eb7a:	f383 8810 	msr	PRIMASK, r3
}
 800eb7e:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800eb80:	bf00      	nop
}
 800eb82:	371c      	adds	r7, #28
 800eb84:	46bd      	mov	sp, r7
 800eb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8a:	4770      	bx	lr
 800eb8c:	20000044 	.word	0x20000044

0800eb90 <UTIL_SEQ_ResumeTask>:
  UTIL_SEQ_EXIT_CRITICAL_SECTION( );
  return _status;
}

void UTIL_SEQ_ResumeTask( UTIL_SEQ_bm_t TaskId_bm )
{
 800eb90:	b480      	push	{r7}
 800eb92:	b087      	sub	sp, #28
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eb98:	f3ef 8310 	mrs	r3, PRIMASK
 800eb9c:	60fb      	str	r3, [r7, #12]
  return(result);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800eba0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800eba2:	b672      	cpsid	i
}
 800eba4:	bf00      	nop

  TaskMask |= TaskId_bm;
 800eba6:	4b09      	ldr	r3, [pc, #36]	; (800ebcc <UTIL_SEQ_ResumeTask+0x3c>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	4313      	orrs	r3, r2
 800ebae:	4a07      	ldr	r2, [pc, #28]	; (800ebcc <UTIL_SEQ_ResumeTask+0x3c>)
 800ebb0:	6013      	str	r3, [r2, #0]
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	f383 8810 	msr	PRIMASK, r3
}
 800ebbc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ebbe:	bf00      	nop
}
 800ebc0:	371c      	adds	r7, #28
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc8:	4770      	bx	lr
 800ebca:	bf00      	nop
 800ebcc:	20000044 	.word	0x20000044

0800ebd0 <UTIL_SEQ_SetEvt>:

void UTIL_SEQ_SetEvt( UTIL_SEQ_bm_t EvtId_bm )
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b087      	sub	sp, #28
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ebd8:	f3ef 8310 	mrs	r3, PRIMASK
 800ebdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ebde:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ebe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800ebe2:	b672      	cpsid	i
}
 800ebe4:	bf00      	nop

  EvtSet |= EvtId_bm;
 800ebe6:	4b09      	ldr	r3, [pc, #36]	; (800ec0c <UTIL_SEQ_SetEvt+0x3c>)
 800ebe8:	681a      	ldr	r2, [r3, #0]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	4313      	orrs	r3, r2
 800ebee:	4a07      	ldr	r2, [pc, #28]	; (800ec0c <UTIL_SEQ_SetEvt+0x3c>)
 800ebf0:	6013      	str	r3, [r2, #0]
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	f383 8810 	msr	PRIMASK, r3
}
 800ebfc:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800ebfe:	bf00      	nop
}
 800ec00:	371c      	adds	r7, #28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
 800ec0a:	bf00      	nop
 800ec0c:	20001864 	.word	0x20001864

0800ec10 <UTIL_SEQ_WaitEvt>:

  return;
}

void UTIL_SEQ_WaitEvt(UTIL_SEQ_bm_t EvtId_bm)
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b088      	sub	sp, #32
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
  UTIL_SEQ_bm_t wait_task_idx;
  /*
   * store in local the current_task_id_bm as the global variable CurrentTaskIdx
   * may be overwritten in case there are nested call of UTIL_SEQ_Run()
   */
  current_task_idx = CurrentTaskIdx;
 800ec18:	4b1f      	ldr	r3, [pc, #124]	; (800ec98 <UTIL_SEQ_WaitEvt+0x88>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	61bb      	str	r3, [r7, #24]
  if(UTIL_SEQ_NOTASKRUNNING == CurrentTaskIdx)
 800ec1e:	4b1e      	ldr	r3, [pc, #120]	; (800ec98 <UTIL_SEQ_WaitEvt+0x88>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec26:	d102      	bne.n	800ec2e <UTIL_SEQ_WaitEvt+0x1e>
  {
    wait_task_idx = 0u;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	61fb      	str	r3, [r7, #28]
 800ec2c:	e005      	b.n	800ec3a <UTIL_SEQ_WaitEvt+0x2a>
  }
  else
  {
    wait_task_idx = (uint32_t)1u << CurrentTaskIdx;
 800ec2e:	4b1a      	ldr	r3, [pc, #104]	; (800ec98 <UTIL_SEQ_WaitEvt+0x88>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	2201      	movs	r2, #1
 800ec34:	fa02 f303 	lsl.w	r3, r2, r3
 800ec38:	61fb      	str	r3, [r7, #28]
  }

  /* backup the event id that was currently waited */
  event_waited_id_backup = EvtWaited;
 800ec3a:	4b18      	ldr	r3, [pc, #96]	; (800ec9c <UTIL_SEQ_WaitEvt+0x8c>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	617b      	str	r3, [r7, #20]
  EvtWaited = EvtId_bm;
 800ec40:	4a16      	ldr	r2, [pc, #88]	; (800ec9c <UTIL_SEQ_WaitEvt+0x8c>)
 800ec42:	687b      	ldr	r3, [r7, #4]
 800ec44:	6013      	str	r3, [r2, #0]
   * The system is waiting only for the last waited event.
   * When it will go out, it will wait again from the previous one.
   * It case it occurs while waiting for the second one, the while loop will exit immediately
   */

  while ((EvtSet & EvtId_bm) == 0U)
 800ec46:	e003      	b.n	800ec50 <UTIL_SEQ_WaitEvt+0x40>
  {
    UTIL_SEQ_EvtIdle(wait_task_idx, EvtId_bm);
 800ec48:	6879      	ldr	r1, [r7, #4]
 800ec4a:	69f8      	ldr	r0, [r7, #28]
 800ec4c:	f7f2 fe24 	bl	8001898 <UTIL_SEQ_EvtIdle>
  while ((EvtSet & EvtId_bm) == 0U)
 800ec50:	4b13      	ldr	r3, [pc, #76]	; (800eca0 <UTIL_SEQ_WaitEvt+0x90>)
 800ec52:	681a      	ldr	r2, [r3, #0]
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	4013      	ands	r3, r2
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d0f5      	beq.n	800ec48 <UTIL_SEQ_WaitEvt+0x38>
  /*
   * Restore the CurrentTaskIdx that may have been modified by call of UTIL_SEQ_Run() from UTIL_SEQ_EvtIdle()
   * This is required so that a second call of UTIL_SEQ_WaitEvt() in the same process pass the correct current_task_id_bm
   * in the call of UTIL_SEQ_EvtIdle()
   */
  CurrentTaskIdx = current_task_idx;
 800ec5c:	4a0e      	ldr	r2, [pc, #56]	; (800ec98 <UTIL_SEQ_WaitEvt+0x88>)
 800ec5e:	69bb      	ldr	r3, [r7, #24]
 800ec60:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ec62:	f3ef 8310 	mrs	r3, PRIMASK
 800ec66:	60bb      	str	r3, [r7, #8]
  return(result);
 800ec68:	68bb      	ldr	r3, [r7, #8]

  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800ec6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800ec6c:	b672      	cpsid	i
}
 800ec6e:	bf00      	nop

  EvtSet &= (~EvtId_bm);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	43da      	mvns	r2, r3
 800ec74:	4b0a      	ldr	r3, [pc, #40]	; (800eca0 <UTIL_SEQ_WaitEvt+0x90>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	4013      	ands	r3, r2
 800ec7a:	4a09      	ldr	r2, [pc, #36]	; (800eca0 <UTIL_SEQ_WaitEvt+0x90>)
 800ec7c:	6013      	str	r3, [r2, #0]
 800ec7e:	693b      	ldr	r3, [r7, #16]
 800ec80:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	f383 8810 	msr	PRIMASK, r3
}
 800ec88:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  EvtWaited = event_waited_id_backup;
 800ec8a:	4a04      	ldr	r2, [pc, #16]	; (800ec9c <UTIL_SEQ_WaitEvt+0x8c>)
 800ec8c:	697b      	ldr	r3, [r7, #20]
 800ec8e:	6013      	str	r3, [r2, #0]
  return;
 800ec90:	bf00      	nop
}
 800ec92:	3720      	adds	r7, #32
 800ec94:	46bd      	mov	sp, r7
 800ec96:	bd80      	pop	{r7, pc}
 800ec98:	2000186c 	.word	0x2000186c
 800ec9c:	20001868 	.word	0x20001868
 800eca0:	20001864 	.word	0x20001864

0800eca4 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800eca4:	b480      	push	{r7}
 800eca6:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800eca8:	bf00      	nop
}
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800ecb2:	b480      	push	{r7}
 800ecb4:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800ecb6:	bf00      	nop
}
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	0c1b      	lsrs	r3, r3, #16
 800ecd4:	041b      	lsls	r3, r3, #16
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d104      	bne.n	800ece4 <SEQ_BitPosition+0x24>
 800ecda:	2310      	movs	r3, #16
 800ecdc:	73fb      	strb	r3, [r7, #15]
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	041b      	lsls	r3, r3, #16
 800ece2:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d105      	bne.n	800ecfa <SEQ_BitPosition+0x3a>
 800ecee:	7bfb      	ldrb	r3, [r7, #15]
 800ecf0:	3308      	adds	r3, #8
 800ecf2:	73fb      	strb	r3, [r7, #15]
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	021b      	lsls	r3, r3, #8
 800ecf8:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d105      	bne.n	800ed10 <SEQ_BitPosition+0x50>
 800ed04:	7bfb      	ldrb	r3, [r7, #15]
 800ed06:	3304      	adds	r3, #4
 800ed08:	73fb      	strb	r3, [r7, #15]
 800ed0a:	68bb      	ldr	r3, [r7, #8]
 800ed0c:	011b      	lsls	r3, r3, #4
 800ed0e:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	0f1b      	lsrs	r3, r3, #28
 800ed14:	4a07      	ldr	r2, [pc, #28]	; (800ed34 <SEQ_BitPosition+0x74>)
 800ed16:	5cd2      	ldrb	r2, [r2, r3]
 800ed18:	7bfb      	ldrb	r3, [r7, #15]
 800ed1a:	4413      	add	r3, r2
 800ed1c:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800ed1e:	7bfb      	ldrb	r3, [r7, #15]
 800ed20:	f1c3 031f 	rsb	r3, r3, #31
 800ed24:	b2db      	uxtb	r3, r3
}
 800ed26:	4618      	mov	r0, r3
 800ed28:	3714      	adds	r7, #20
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed30:	4770      	bx	lr
 800ed32:	bf00      	nop
 800ed34:	08013060 	.word	0x08013060

0800ed38 <__cvt>:
 800ed38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed3c:	ec55 4b10 	vmov	r4, r5, d0
 800ed40:	2d00      	cmp	r5, #0
 800ed42:	460e      	mov	r6, r1
 800ed44:	4619      	mov	r1, r3
 800ed46:	462b      	mov	r3, r5
 800ed48:	bfbb      	ittet	lt
 800ed4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ed4e:	461d      	movlt	r5, r3
 800ed50:	2300      	movge	r3, #0
 800ed52:	232d      	movlt	r3, #45	; 0x2d
 800ed54:	700b      	strb	r3, [r1, #0]
 800ed56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ed5c:	4691      	mov	r9, r2
 800ed5e:	f023 0820 	bic.w	r8, r3, #32
 800ed62:	bfbc      	itt	lt
 800ed64:	4622      	movlt	r2, r4
 800ed66:	4614      	movlt	r4, r2
 800ed68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ed6c:	d005      	beq.n	800ed7a <__cvt+0x42>
 800ed6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ed72:	d100      	bne.n	800ed76 <__cvt+0x3e>
 800ed74:	3601      	adds	r6, #1
 800ed76:	2102      	movs	r1, #2
 800ed78:	e000      	b.n	800ed7c <__cvt+0x44>
 800ed7a:	2103      	movs	r1, #3
 800ed7c:	ab03      	add	r3, sp, #12
 800ed7e:	9301      	str	r3, [sp, #4]
 800ed80:	ab02      	add	r3, sp, #8
 800ed82:	9300      	str	r3, [sp, #0]
 800ed84:	ec45 4b10 	vmov	d0, r4, r5
 800ed88:	4653      	mov	r3, sl
 800ed8a:	4632      	mov	r2, r6
 800ed8c:	f000 ff60 	bl	800fc50 <_dtoa_r>
 800ed90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ed94:	4607      	mov	r7, r0
 800ed96:	d102      	bne.n	800ed9e <__cvt+0x66>
 800ed98:	f019 0f01 	tst.w	r9, #1
 800ed9c:	d022      	beq.n	800ede4 <__cvt+0xac>
 800ed9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800eda2:	eb07 0906 	add.w	r9, r7, r6
 800eda6:	d110      	bne.n	800edca <__cvt+0x92>
 800eda8:	783b      	ldrb	r3, [r7, #0]
 800edaa:	2b30      	cmp	r3, #48	; 0x30
 800edac:	d10a      	bne.n	800edc4 <__cvt+0x8c>
 800edae:	2200      	movs	r2, #0
 800edb0:	2300      	movs	r3, #0
 800edb2:	4620      	mov	r0, r4
 800edb4:	4629      	mov	r1, r5
 800edb6:	f7f1 fe6f 	bl	8000a98 <__aeabi_dcmpeq>
 800edba:	b918      	cbnz	r0, 800edc4 <__cvt+0x8c>
 800edbc:	f1c6 0601 	rsb	r6, r6, #1
 800edc0:	f8ca 6000 	str.w	r6, [sl]
 800edc4:	f8da 3000 	ldr.w	r3, [sl]
 800edc8:	4499      	add	r9, r3
 800edca:	2200      	movs	r2, #0
 800edcc:	2300      	movs	r3, #0
 800edce:	4620      	mov	r0, r4
 800edd0:	4629      	mov	r1, r5
 800edd2:	f7f1 fe61 	bl	8000a98 <__aeabi_dcmpeq>
 800edd6:	b108      	cbz	r0, 800eddc <__cvt+0xa4>
 800edd8:	f8cd 900c 	str.w	r9, [sp, #12]
 800eddc:	2230      	movs	r2, #48	; 0x30
 800edde:	9b03      	ldr	r3, [sp, #12]
 800ede0:	454b      	cmp	r3, r9
 800ede2:	d307      	bcc.n	800edf4 <__cvt+0xbc>
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ede8:	1bdb      	subs	r3, r3, r7
 800edea:	4638      	mov	r0, r7
 800edec:	6013      	str	r3, [r2, #0]
 800edee:	b004      	add	sp, #16
 800edf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edf4:	1c59      	adds	r1, r3, #1
 800edf6:	9103      	str	r1, [sp, #12]
 800edf8:	701a      	strb	r2, [r3, #0]
 800edfa:	e7f0      	b.n	800edde <__cvt+0xa6>

0800edfc <__exponent>:
 800edfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edfe:	4603      	mov	r3, r0
 800ee00:	2900      	cmp	r1, #0
 800ee02:	bfb8      	it	lt
 800ee04:	4249      	neglt	r1, r1
 800ee06:	f803 2b02 	strb.w	r2, [r3], #2
 800ee0a:	bfb4      	ite	lt
 800ee0c:	222d      	movlt	r2, #45	; 0x2d
 800ee0e:	222b      	movge	r2, #43	; 0x2b
 800ee10:	2909      	cmp	r1, #9
 800ee12:	7042      	strb	r2, [r0, #1]
 800ee14:	dd2a      	ble.n	800ee6c <__exponent+0x70>
 800ee16:	f10d 0207 	add.w	r2, sp, #7
 800ee1a:	4617      	mov	r7, r2
 800ee1c:	260a      	movs	r6, #10
 800ee1e:	4694      	mov	ip, r2
 800ee20:	fb91 f5f6 	sdiv	r5, r1, r6
 800ee24:	fb06 1415 	mls	r4, r6, r5, r1
 800ee28:	3430      	adds	r4, #48	; 0x30
 800ee2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800ee2e:	460c      	mov	r4, r1
 800ee30:	2c63      	cmp	r4, #99	; 0x63
 800ee32:	f102 32ff 	add.w	r2, r2, #4294967295
 800ee36:	4629      	mov	r1, r5
 800ee38:	dcf1      	bgt.n	800ee1e <__exponent+0x22>
 800ee3a:	3130      	adds	r1, #48	; 0x30
 800ee3c:	f1ac 0402 	sub.w	r4, ip, #2
 800ee40:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ee44:	1c41      	adds	r1, r0, #1
 800ee46:	4622      	mov	r2, r4
 800ee48:	42ba      	cmp	r2, r7
 800ee4a:	d30a      	bcc.n	800ee62 <__exponent+0x66>
 800ee4c:	f10d 0209 	add.w	r2, sp, #9
 800ee50:	eba2 020c 	sub.w	r2, r2, ip
 800ee54:	42bc      	cmp	r4, r7
 800ee56:	bf88      	it	hi
 800ee58:	2200      	movhi	r2, #0
 800ee5a:	4413      	add	r3, r2
 800ee5c:	1a18      	subs	r0, r3, r0
 800ee5e:	b003      	add	sp, #12
 800ee60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee62:	f812 5b01 	ldrb.w	r5, [r2], #1
 800ee66:	f801 5f01 	strb.w	r5, [r1, #1]!
 800ee6a:	e7ed      	b.n	800ee48 <__exponent+0x4c>
 800ee6c:	2330      	movs	r3, #48	; 0x30
 800ee6e:	3130      	adds	r1, #48	; 0x30
 800ee70:	7083      	strb	r3, [r0, #2]
 800ee72:	70c1      	strb	r1, [r0, #3]
 800ee74:	1d03      	adds	r3, r0, #4
 800ee76:	e7f1      	b.n	800ee5c <__exponent+0x60>

0800ee78 <_printf_float>:
 800ee78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee7c:	ed2d 8b02 	vpush	{d8}
 800ee80:	b08d      	sub	sp, #52	; 0x34
 800ee82:	460c      	mov	r4, r1
 800ee84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ee88:	4616      	mov	r6, r2
 800ee8a:	461f      	mov	r7, r3
 800ee8c:	4605      	mov	r5, r0
 800ee8e:	f000 fdd1 	bl	800fa34 <_localeconv_r>
 800ee92:	f8d0 a000 	ldr.w	sl, [r0]
 800ee96:	4650      	mov	r0, sl
 800ee98:	f7f1 f9d2 	bl	8000240 <strlen>
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	930a      	str	r3, [sp, #40]	; 0x28
 800eea0:	6823      	ldr	r3, [r4, #0]
 800eea2:	9305      	str	r3, [sp, #20]
 800eea4:	f8d8 3000 	ldr.w	r3, [r8]
 800eea8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800eeac:	3307      	adds	r3, #7
 800eeae:	f023 0307 	bic.w	r3, r3, #7
 800eeb2:	f103 0208 	add.w	r2, r3, #8
 800eeb6:	f8c8 2000 	str.w	r2, [r8]
 800eeba:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eebe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800eec2:	9307      	str	r3, [sp, #28]
 800eec4:	f8cd 8018 	str.w	r8, [sp, #24]
 800eec8:	ee08 0a10 	vmov	s16, r0
 800eecc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800eed0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eed4:	4b9e      	ldr	r3, [pc, #632]	; (800f150 <_printf_float+0x2d8>)
 800eed6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeda:	f7f1 fe0f 	bl	8000afc <__aeabi_dcmpun>
 800eede:	bb88      	cbnz	r0, 800ef44 <_printf_float+0xcc>
 800eee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eee4:	4b9a      	ldr	r3, [pc, #616]	; (800f150 <_printf_float+0x2d8>)
 800eee6:	f04f 32ff 	mov.w	r2, #4294967295
 800eeea:	f7f1 fde9 	bl	8000ac0 <__aeabi_dcmple>
 800eeee:	bb48      	cbnz	r0, 800ef44 <_printf_float+0xcc>
 800eef0:	2200      	movs	r2, #0
 800eef2:	2300      	movs	r3, #0
 800eef4:	4640      	mov	r0, r8
 800eef6:	4649      	mov	r1, r9
 800eef8:	f7f1 fdd8 	bl	8000aac <__aeabi_dcmplt>
 800eefc:	b110      	cbz	r0, 800ef04 <_printf_float+0x8c>
 800eefe:	232d      	movs	r3, #45	; 0x2d
 800ef00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef04:	4a93      	ldr	r2, [pc, #588]	; (800f154 <_printf_float+0x2dc>)
 800ef06:	4b94      	ldr	r3, [pc, #592]	; (800f158 <_printf_float+0x2e0>)
 800ef08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ef0c:	bf94      	ite	ls
 800ef0e:	4690      	movls	r8, r2
 800ef10:	4698      	movhi	r8, r3
 800ef12:	2303      	movs	r3, #3
 800ef14:	6123      	str	r3, [r4, #16]
 800ef16:	9b05      	ldr	r3, [sp, #20]
 800ef18:	f023 0304 	bic.w	r3, r3, #4
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	f04f 0900 	mov.w	r9, #0
 800ef22:	9700      	str	r7, [sp, #0]
 800ef24:	4633      	mov	r3, r6
 800ef26:	aa0b      	add	r2, sp, #44	; 0x2c
 800ef28:	4621      	mov	r1, r4
 800ef2a:	4628      	mov	r0, r5
 800ef2c:	f000 f9da 	bl	800f2e4 <_printf_common>
 800ef30:	3001      	adds	r0, #1
 800ef32:	f040 8090 	bne.w	800f056 <_printf_float+0x1de>
 800ef36:	f04f 30ff 	mov.w	r0, #4294967295
 800ef3a:	b00d      	add	sp, #52	; 0x34
 800ef3c:	ecbd 8b02 	vpop	{d8}
 800ef40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef44:	4642      	mov	r2, r8
 800ef46:	464b      	mov	r3, r9
 800ef48:	4640      	mov	r0, r8
 800ef4a:	4649      	mov	r1, r9
 800ef4c:	f7f1 fdd6 	bl	8000afc <__aeabi_dcmpun>
 800ef50:	b140      	cbz	r0, 800ef64 <_printf_float+0xec>
 800ef52:	464b      	mov	r3, r9
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	bfbc      	itt	lt
 800ef58:	232d      	movlt	r3, #45	; 0x2d
 800ef5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ef5e:	4a7f      	ldr	r2, [pc, #508]	; (800f15c <_printf_float+0x2e4>)
 800ef60:	4b7f      	ldr	r3, [pc, #508]	; (800f160 <_printf_float+0x2e8>)
 800ef62:	e7d1      	b.n	800ef08 <_printf_float+0x90>
 800ef64:	6863      	ldr	r3, [r4, #4]
 800ef66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ef6a:	9206      	str	r2, [sp, #24]
 800ef6c:	1c5a      	adds	r2, r3, #1
 800ef6e:	d13f      	bne.n	800eff0 <_printf_float+0x178>
 800ef70:	2306      	movs	r3, #6
 800ef72:	6063      	str	r3, [r4, #4]
 800ef74:	9b05      	ldr	r3, [sp, #20]
 800ef76:	6861      	ldr	r1, [r4, #4]
 800ef78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ef7c:	2300      	movs	r3, #0
 800ef7e:	9303      	str	r3, [sp, #12]
 800ef80:	ab0a      	add	r3, sp, #40	; 0x28
 800ef82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ef86:	ab09      	add	r3, sp, #36	; 0x24
 800ef88:	ec49 8b10 	vmov	d0, r8, r9
 800ef8c:	9300      	str	r3, [sp, #0]
 800ef8e:	6022      	str	r2, [r4, #0]
 800ef90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ef94:	4628      	mov	r0, r5
 800ef96:	f7ff fecf 	bl	800ed38 <__cvt>
 800ef9a:	9b06      	ldr	r3, [sp, #24]
 800ef9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ef9e:	2b47      	cmp	r3, #71	; 0x47
 800efa0:	4680      	mov	r8, r0
 800efa2:	d108      	bne.n	800efb6 <_printf_float+0x13e>
 800efa4:	1cc8      	adds	r0, r1, #3
 800efa6:	db02      	blt.n	800efae <_printf_float+0x136>
 800efa8:	6863      	ldr	r3, [r4, #4]
 800efaa:	4299      	cmp	r1, r3
 800efac:	dd41      	ble.n	800f032 <_printf_float+0x1ba>
 800efae:	f1ab 0302 	sub.w	r3, fp, #2
 800efb2:	fa5f fb83 	uxtb.w	fp, r3
 800efb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800efba:	d820      	bhi.n	800effe <_printf_float+0x186>
 800efbc:	3901      	subs	r1, #1
 800efbe:	465a      	mov	r2, fp
 800efc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800efc4:	9109      	str	r1, [sp, #36]	; 0x24
 800efc6:	f7ff ff19 	bl	800edfc <__exponent>
 800efca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800efcc:	1813      	adds	r3, r2, r0
 800efce:	2a01      	cmp	r2, #1
 800efd0:	4681      	mov	r9, r0
 800efd2:	6123      	str	r3, [r4, #16]
 800efd4:	dc02      	bgt.n	800efdc <_printf_float+0x164>
 800efd6:	6822      	ldr	r2, [r4, #0]
 800efd8:	07d2      	lsls	r2, r2, #31
 800efda:	d501      	bpl.n	800efe0 <_printf_float+0x168>
 800efdc:	3301      	adds	r3, #1
 800efde:	6123      	str	r3, [r4, #16]
 800efe0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d09c      	beq.n	800ef22 <_printf_float+0xaa>
 800efe8:	232d      	movs	r3, #45	; 0x2d
 800efea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efee:	e798      	b.n	800ef22 <_printf_float+0xaa>
 800eff0:	9a06      	ldr	r2, [sp, #24]
 800eff2:	2a47      	cmp	r2, #71	; 0x47
 800eff4:	d1be      	bne.n	800ef74 <_printf_float+0xfc>
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d1bc      	bne.n	800ef74 <_printf_float+0xfc>
 800effa:	2301      	movs	r3, #1
 800effc:	e7b9      	b.n	800ef72 <_printf_float+0xfa>
 800effe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800f002:	d118      	bne.n	800f036 <_printf_float+0x1be>
 800f004:	2900      	cmp	r1, #0
 800f006:	6863      	ldr	r3, [r4, #4]
 800f008:	dd0b      	ble.n	800f022 <_printf_float+0x1aa>
 800f00a:	6121      	str	r1, [r4, #16]
 800f00c:	b913      	cbnz	r3, 800f014 <_printf_float+0x19c>
 800f00e:	6822      	ldr	r2, [r4, #0]
 800f010:	07d0      	lsls	r0, r2, #31
 800f012:	d502      	bpl.n	800f01a <_printf_float+0x1a2>
 800f014:	3301      	adds	r3, #1
 800f016:	440b      	add	r3, r1
 800f018:	6123      	str	r3, [r4, #16]
 800f01a:	65a1      	str	r1, [r4, #88]	; 0x58
 800f01c:	f04f 0900 	mov.w	r9, #0
 800f020:	e7de      	b.n	800efe0 <_printf_float+0x168>
 800f022:	b913      	cbnz	r3, 800f02a <_printf_float+0x1b2>
 800f024:	6822      	ldr	r2, [r4, #0]
 800f026:	07d2      	lsls	r2, r2, #31
 800f028:	d501      	bpl.n	800f02e <_printf_float+0x1b6>
 800f02a:	3302      	adds	r3, #2
 800f02c:	e7f4      	b.n	800f018 <_printf_float+0x1a0>
 800f02e:	2301      	movs	r3, #1
 800f030:	e7f2      	b.n	800f018 <_printf_float+0x1a0>
 800f032:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800f036:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f038:	4299      	cmp	r1, r3
 800f03a:	db05      	blt.n	800f048 <_printf_float+0x1d0>
 800f03c:	6823      	ldr	r3, [r4, #0]
 800f03e:	6121      	str	r1, [r4, #16]
 800f040:	07d8      	lsls	r0, r3, #31
 800f042:	d5ea      	bpl.n	800f01a <_printf_float+0x1a2>
 800f044:	1c4b      	adds	r3, r1, #1
 800f046:	e7e7      	b.n	800f018 <_printf_float+0x1a0>
 800f048:	2900      	cmp	r1, #0
 800f04a:	bfd4      	ite	le
 800f04c:	f1c1 0202 	rsble	r2, r1, #2
 800f050:	2201      	movgt	r2, #1
 800f052:	4413      	add	r3, r2
 800f054:	e7e0      	b.n	800f018 <_printf_float+0x1a0>
 800f056:	6823      	ldr	r3, [r4, #0]
 800f058:	055a      	lsls	r2, r3, #21
 800f05a:	d407      	bmi.n	800f06c <_printf_float+0x1f4>
 800f05c:	6923      	ldr	r3, [r4, #16]
 800f05e:	4642      	mov	r2, r8
 800f060:	4631      	mov	r1, r6
 800f062:	4628      	mov	r0, r5
 800f064:	47b8      	blx	r7
 800f066:	3001      	adds	r0, #1
 800f068:	d12c      	bne.n	800f0c4 <_printf_float+0x24c>
 800f06a:	e764      	b.n	800ef36 <_printf_float+0xbe>
 800f06c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800f070:	f240 80e0 	bls.w	800f234 <_printf_float+0x3bc>
 800f074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f078:	2200      	movs	r2, #0
 800f07a:	2300      	movs	r3, #0
 800f07c:	f7f1 fd0c 	bl	8000a98 <__aeabi_dcmpeq>
 800f080:	2800      	cmp	r0, #0
 800f082:	d034      	beq.n	800f0ee <_printf_float+0x276>
 800f084:	4a37      	ldr	r2, [pc, #220]	; (800f164 <_printf_float+0x2ec>)
 800f086:	2301      	movs	r3, #1
 800f088:	4631      	mov	r1, r6
 800f08a:	4628      	mov	r0, r5
 800f08c:	47b8      	blx	r7
 800f08e:	3001      	adds	r0, #1
 800f090:	f43f af51 	beq.w	800ef36 <_printf_float+0xbe>
 800f094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f098:	429a      	cmp	r2, r3
 800f09a:	db02      	blt.n	800f0a2 <_printf_float+0x22a>
 800f09c:	6823      	ldr	r3, [r4, #0]
 800f09e:	07d8      	lsls	r0, r3, #31
 800f0a0:	d510      	bpl.n	800f0c4 <_printf_float+0x24c>
 800f0a2:	ee18 3a10 	vmov	r3, s16
 800f0a6:	4652      	mov	r2, sl
 800f0a8:	4631      	mov	r1, r6
 800f0aa:	4628      	mov	r0, r5
 800f0ac:	47b8      	blx	r7
 800f0ae:	3001      	adds	r0, #1
 800f0b0:	f43f af41 	beq.w	800ef36 <_printf_float+0xbe>
 800f0b4:	f04f 0800 	mov.w	r8, #0
 800f0b8:	f104 091a 	add.w	r9, r4, #26
 800f0bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0be:	3b01      	subs	r3, #1
 800f0c0:	4543      	cmp	r3, r8
 800f0c2:	dc09      	bgt.n	800f0d8 <_printf_float+0x260>
 800f0c4:	6823      	ldr	r3, [r4, #0]
 800f0c6:	079b      	lsls	r3, r3, #30
 800f0c8:	f100 8107 	bmi.w	800f2da <_printf_float+0x462>
 800f0cc:	68e0      	ldr	r0, [r4, #12]
 800f0ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f0d0:	4298      	cmp	r0, r3
 800f0d2:	bfb8      	it	lt
 800f0d4:	4618      	movlt	r0, r3
 800f0d6:	e730      	b.n	800ef3a <_printf_float+0xc2>
 800f0d8:	2301      	movs	r3, #1
 800f0da:	464a      	mov	r2, r9
 800f0dc:	4631      	mov	r1, r6
 800f0de:	4628      	mov	r0, r5
 800f0e0:	47b8      	blx	r7
 800f0e2:	3001      	adds	r0, #1
 800f0e4:	f43f af27 	beq.w	800ef36 <_printf_float+0xbe>
 800f0e8:	f108 0801 	add.w	r8, r8, #1
 800f0ec:	e7e6      	b.n	800f0bc <_printf_float+0x244>
 800f0ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	dc39      	bgt.n	800f168 <_printf_float+0x2f0>
 800f0f4:	4a1b      	ldr	r2, [pc, #108]	; (800f164 <_printf_float+0x2ec>)
 800f0f6:	2301      	movs	r3, #1
 800f0f8:	4631      	mov	r1, r6
 800f0fa:	4628      	mov	r0, r5
 800f0fc:	47b8      	blx	r7
 800f0fe:	3001      	adds	r0, #1
 800f100:	f43f af19 	beq.w	800ef36 <_printf_float+0xbe>
 800f104:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f108:	4313      	orrs	r3, r2
 800f10a:	d102      	bne.n	800f112 <_printf_float+0x29a>
 800f10c:	6823      	ldr	r3, [r4, #0]
 800f10e:	07d9      	lsls	r1, r3, #31
 800f110:	d5d8      	bpl.n	800f0c4 <_printf_float+0x24c>
 800f112:	ee18 3a10 	vmov	r3, s16
 800f116:	4652      	mov	r2, sl
 800f118:	4631      	mov	r1, r6
 800f11a:	4628      	mov	r0, r5
 800f11c:	47b8      	blx	r7
 800f11e:	3001      	adds	r0, #1
 800f120:	f43f af09 	beq.w	800ef36 <_printf_float+0xbe>
 800f124:	f04f 0900 	mov.w	r9, #0
 800f128:	f104 0a1a 	add.w	sl, r4, #26
 800f12c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f12e:	425b      	negs	r3, r3
 800f130:	454b      	cmp	r3, r9
 800f132:	dc01      	bgt.n	800f138 <_printf_float+0x2c0>
 800f134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f136:	e792      	b.n	800f05e <_printf_float+0x1e6>
 800f138:	2301      	movs	r3, #1
 800f13a:	4652      	mov	r2, sl
 800f13c:	4631      	mov	r1, r6
 800f13e:	4628      	mov	r0, r5
 800f140:	47b8      	blx	r7
 800f142:	3001      	adds	r0, #1
 800f144:	f43f aef7 	beq.w	800ef36 <_printf_float+0xbe>
 800f148:	f109 0901 	add.w	r9, r9, #1
 800f14c:	e7ee      	b.n	800f12c <_printf_float+0x2b4>
 800f14e:	bf00      	nop
 800f150:	7fefffff 	.word	0x7fefffff
 800f154:	08013070 	.word	0x08013070
 800f158:	08013074 	.word	0x08013074
 800f15c:	08013078 	.word	0x08013078
 800f160:	0801307c 	.word	0x0801307c
 800f164:	08013080 	.word	0x08013080
 800f168:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f16a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f16c:	429a      	cmp	r2, r3
 800f16e:	bfa8      	it	ge
 800f170:	461a      	movge	r2, r3
 800f172:	2a00      	cmp	r2, #0
 800f174:	4691      	mov	r9, r2
 800f176:	dc37      	bgt.n	800f1e8 <_printf_float+0x370>
 800f178:	f04f 0b00 	mov.w	fp, #0
 800f17c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f180:	f104 021a 	add.w	r2, r4, #26
 800f184:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800f186:	9305      	str	r3, [sp, #20]
 800f188:	eba3 0309 	sub.w	r3, r3, r9
 800f18c:	455b      	cmp	r3, fp
 800f18e:	dc33      	bgt.n	800f1f8 <_printf_float+0x380>
 800f190:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f194:	429a      	cmp	r2, r3
 800f196:	db3b      	blt.n	800f210 <_printf_float+0x398>
 800f198:	6823      	ldr	r3, [r4, #0]
 800f19a:	07da      	lsls	r2, r3, #31
 800f19c:	d438      	bmi.n	800f210 <_printf_float+0x398>
 800f19e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800f1a2:	eba2 0903 	sub.w	r9, r2, r3
 800f1a6:	9b05      	ldr	r3, [sp, #20]
 800f1a8:	1ad2      	subs	r2, r2, r3
 800f1aa:	4591      	cmp	r9, r2
 800f1ac:	bfa8      	it	ge
 800f1ae:	4691      	movge	r9, r2
 800f1b0:	f1b9 0f00 	cmp.w	r9, #0
 800f1b4:	dc35      	bgt.n	800f222 <_printf_float+0x3aa>
 800f1b6:	f04f 0800 	mov.w	r8, #0
 800f1ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f1be:	f104 0a1a 	add.w	sl, r4, #26
 800f1c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800f1c6:	1a9b      	subs	r3, r3, r2
 800f1c8:	eba3 0309 	sub.w	r3, r3, r9
 800f1cc:	4543      	cmp	r3, r8
 800f1ce:	f77f af79 	ble.w	800f0c4 <_printf_float+0x24c>
 800f1d2:	2301      	movs	r3, #1
 800f1d4:	4652      	mov	r2, sl
 800f1d6:	4631      	mov	r1, r6
 800f1d8:	4628      	mov	r0, r5
 800f1da:	47b8      	blx	r7
 800f1dc:	3001      	adds	r0, #1
 800f1de:	f43f aeaa 	beq.w	800ef36 <_printf_float+0xbe>
 800f1e2:	f108 0801 	add.w	r8, r8, #1
 800f1e6:	e7ec      	b.n	800f1c2 <_printf_float+0x34a>
 800f1e8:	4613      	mov	r3, r2
 800f1ea:	4631      	mov	r1, r6
 800f1ec:	4642      	mov	r2, r8
 800f1ee:	4628      	mov	r0, r5
 800f1f0:	47b8      	blx	r7
 800f1f2:	3001      	adds	r0, #1
 800f1f4:	d1c0      	bne.n	800f178 <_printf_float+0x300>
 800f1f6:	e69e      	b.n	800ef36 <_printf_float+0xbe>
 800f1f8:	2301      	movs	r3, #1
 800f1fa:	4631      	mov	r1, r6
 800f1fc:	4628      	mov	r0, r5
 800f1fe:	9205      	str	r2, [sp, #20]
 800f200:	47b8      	blx	r7
 800f202:	3001      	adds	r0, #1
 800f204:	f43f ae97 	beq.w	800ef36 <_printf_float+0xbe>
 800f208:	9a05      	ldr	r2, [sp, #20]
 800f20a:	f10b 0b01 	add.w	fp, fp, #1
 800f20e:	e7b9      	b.n	800f184 <_printf_float+0x30c>
 800f210:	ee18 3a10 	vmov	r3, s16
 800f214:	4652      	mov	r2, sl
 800f216:	4631      	mov	r1, r6
 800f218:	4628      	mov	r0, r5
 800f21a:	47b8      	blx	r7
 800f21c:	3001      	adds	r0, #1
 800f21e:	d1be      	bne.n	800f19e <_printf_float+0x326>
 800f220:	e689      	b.n	800ef36 <_printf_float+0xbe>
 800f222:	9a05      	ldr	r2, [sp, #20]
 800f224:	464b      	mov	r3, r9
 800f226:	4442      	add	r2, r8
 800f228:	4631      	mov	r1, r6
 800f22a:	4628      	mov	r0, r5
 800f22c:	47b8      	blx	r7
 800f22e:	3001      	adds	r0, #1
 800f230:	d1c1      	bne.n	800f1b6 <_printf_float+0x33e>
 800f232:	e680      	b.n	800ef36 <_printf_float+0xbe>
 800f234:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f236:	2a01      	cmp	r2, #1
 800f238:	dc01      	bgt.n	800f23e <_printf_float+0x3c6>
 800f23a:	07db      	lsls	r3, r3, #31
 800f23c:	d53a      	bpl.n	800f2b4 <_printf_float+0x43c>
 800f23e:	2301      	movs	r3, #1
 800f240:	4642      	mov	r2, r8
 800f242:	4631      	mov	r1, r6
 800f244:	4628      	mov	r0, r5
 800f246:	47b8      	blx	r7
 800f248:	3001      	adds	r0, #1
 800f24a:	f43f ae74 	beq.w	800ef36 <_printf_float+0xbe>
 800f24e:	ee18 3a10 	vmov	r3, s16
 800f252:	4652      	mov	r2, sl
 800f254:	4631      	mov	r1, r6
 800f256:	4628      	mov	r0, r5
 800f258:	47b8      	blx	r7
 800f25a:	3001      	adds	r0, #1
 800f25c:	f43f ae6b 	beq.w	800ef36 <_printf_float+0xbe>
 800f260:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800f264:	2200      	movs	r2, #0
 800f266:	2300      	movs	r3, #0
 800f268:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800f26c:	f7f1 fc14 	bl	8000a98 <__aeabi_dcmpeq>
 800f270:	b9d8      	cbnz	r0, 800f2aa <_printf_float+0x432>
 800f272:	f10a 33ff 	add.w	r3, sl, #4294967295
 800f276:	f108 0201 	add.w	r2, r8, #1
 800f27a:	4631      	mov	r1, r6
 800f27c:	4628      	mov	r0, r5
 800f27e:	47b8      	blx	r7
 800f280:	3001      	adds	r0, #1
 800f282:	d10e      	bne.n	800f2a2 <_printf_float+0x42a>
 800f284:	e657      	b.n	800ef36 <_printf_float+0xbe>
 800f286:	2301      	movs	r3, #1
 800f288:	4652      	mov	r2, sl
 800f28a:	4631      	mov	r1, r6
 800f28c:	4628      	mov	r0, r5
 800f28e:	47b8      	blx	r7
 800f290:	3001      	adds	r0, #1
 800f292:	f43f ae50 	beq.w	800ef36 <_printf_float+0xbe>
 800f296:	f108 0801 	add.w	r8, r8, #1
 800f29a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f29c:	3b01      	subs	r3, #1
 800f29e:	4543      	cmp	r3, r8
 800f2a0:	dcf1      	bgt.n	800f286 <_printf_float+0x40e>
 800f2a2:	464b      	mov	r3, r9
 800f2a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800f2a8:	e6da      	b.n	800f060 <_printf_float+0x1e8>
 800f2aa:	f04f 0800 	mov.w	r8, #0
 800f2ae:	f104 0a1a 	add.w	sl, r4, #26
 800f2b2:	e7f2      	b.n	800f29a <_printf_float+0x422>
 800f2b4:	2301      	movs	r3, #1
 800f2b6:	4642      	mov	r2, r8
 800f2b8:	e7df      	b.n	800f27a <_printf_float+0x402>
 800f2ba:	2301      	movs	r3, #1
 800f2bc:	464a      	mov	r2, r9
 800f2be:	4631      	mov	r1, r6
 800f2c0:	4628      	mov	r0, r5
 800f2c2:	47b8      	blx	r7
 800f2c4:	3001      	adds	r0, #1
 800f2c6:	f43f ae36 	beq.w	800ef36 <_printf_float+0xbe>
 800f2ca:	f108 0801 	add.w	r8, r8, #1
 800f2ce:	68e3      	ldr	r3, [r4, #12]
 800f2d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f2d2:	1a5b      	subs	r3, r3, r1
 800f2d4:	4543      	cmp	r3, r8
 800f2d6:	dcf0      	bgt.n	800f2ba <_printf_float+0x442>
 800f2d8:	e6f8      	b.n	800f0cc <_printf_float+0x254>
 800f2da:	f04f 0800 	mov.w	r8, #0
 800f2de:	f104 0919 	add.w	r9, r4, #25
 800f2e2:	e7f4      	b.n	800f2ce <_printf_float+0x456>

0800f2e4 <_printf_common>:
 800f2e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2e8:	4616      	mov	r6, r2
 800f2ea:	4699      	mov	r9, r3
 800f2ec:	688a      	ldr	r2, [r1, #8]
 800f2ee:	690b      	ldr	r3, [r1, #16]
 800f2f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	bfb8      	it	lt
 800f2f8:	4613      	movlt	r3, r2
 800f2fa:	6033      	str	r3, [r6, #0]
 800f2fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f300:	4607      	mov	r7, r0
 800f302:	460c      	mov	r4, r1
 800f304:	b10a      	cbz	r2, 800f30a <_printf_common+0x26>
 800f306:	3301      	adds	r3, #1
 800f308:	6033      	str	r3, [r6, #0]
 800f30a:	6823      	ldr	r3, [r4, #0]
 800f30c:	0699      	lsls	r1, r3, #26
 800f30e:	bf42      	ittt	mi
 800f310:	6833      	ldrmi	r3, [r6, #0]
 800f312:	3302      	addmi	r3, #2
 800f314:	6033      	strmi	r3, [r6, #0]
 800f316:	6825      	ldr	r5, [r4, #0]
 800f318:	f015 0506 	ands.w	r5, r5, #6
 800f31c:	d106      	bne.n	800f32c <_printf_common+0x48>
 800f31e:	f104 0a19 	add.w	sl, r4, #25
 800f322:	68e3      	ldr	r3, [r4, #12]
 800f324:	6832      	ldr	r2, [r6, #0]
 800f326:	1a9b      	subs	r3, r3, r2
 800f328:	42ab      	cmp	r3, r5
 800f32a:	dc26      	bgt.n	800f37a <_printf_common+0x96>
 800f32c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f330:	1e13      	subs	r3, r2, #0
 800f332:	6822      	ldr	r2, [r4, #0]
 800f334:	bf18      	it	ne
 800f336:	2301      	movne	r3, #1
 800f338:	0692      	lsls	r2, r2, #26
 800f33a:	d42b      	bmi.n	800f394 <_printf_common+0xb0>
 800f33c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f340:	4649      	mov	r1, r9
 800f342:	4638      	mov	r0, r7
 800f344:	47c0      	blx	r8
 800f346:	3001      	adds	r0, #1
 800f348:	d01e      	beq.n	800f388 <_printf_common+0xa4>
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	6922      	ldr	r2, [r4, #16]
 800f34e:	f003 0306 	and.w	r3, r3, #6
 800f352:	2b04      	cmp	r3, #4
 800f354:	bf02      	ittt	eq
 800f356:	68e5      	ldreq	r5, [r4, #12]
 800f358:	6833      	ldreq	r3, [r6, #0]
 800f35a:	1aed      	subeq	r5, r5, r3
 800f35c:	68a3      	ldr	r3, [r4, #8]
 800f35e:	bf0c      	ite	eq
 800f360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f364:	2500      	movne	r5, #0
 800f366:	4293      	cmp	r3, r2
 800f368:	bfc4      	itt	gt
 800f36a:	1a9b      	subgt	r3, r3, r2
 800f36c:	18ed      	addgt	r5, r5, r3
 800f36e:	2600      	movs	r6, #0
 800f370:	341a      	adds	r4, #26
 800f372:	42b5      	cmp	r5, r6
 800f374:	d11a      	bne.n	800f3ac <_printf_common+0xc8>
 800f376:	2000      	movs	r0, #0
 800f378:	e008      	b.n	800f38c <_printf_common+0xa8>
 800f37a:	2301      	movs	r3, #1
 800f37c:	4652      	mov	r2, sl
 800f37e:	4649      	mov	r1, r9
 800f380:	4638      	mov	r0, r7
 800f382:	47c0      	blx	r8
 800f384:	3001      	adds	r0, #1
 800f386:	d103      	bne.n	800f390 <_printf_common+0xac>
 800f388:	f04f 30ff 	mov.w	r0, #4294967295
 800f38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f390:	3501      	adds	r5, #1
 800f392:	e7c6      	b.n	800f322 <_printf_common+0x3e>
 800f394:	18e1      	adds	r1, r4, r3
 800f396:	1c5a      	adds	r2, r3, #1
 800f398:	2030      	movs	r0, #48	; 0x30
 800f39a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f39e:	4422      	add	r2, r4
 800f3a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f3a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f3a8:	3302      	adds	r3, #2
 800f3aa:	e7c7      	b.n	800f33c <_printf_common+0x58>
 800f3ac:	2301      	movs	r3, #1
 800f3ae:	4622      	mov	r2, r4
 800f3b0:	4649      	mov	r1, r9
 800f3b2:	4638      	mov	r0, r7
 800f3b4:	47c0      	blx	r8
 800f3b6:	3001      	adds	r0, #1
 800f3b8:	d0e6      	beq.n	800f388 <_printf_common+0xa4>
 800f3ba:	3601      	adds	r6, #1
 800f3bc:	e7d9      	b.n	800f372 <_printf_common+0x8e>
	...

0800f3c0 <_printf_i>:
 800f3c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f3c4:	7e0f      	ldrb	r7, [r1, #24]
 800f3c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f3c8:	2f78      	cmp	r7, #120	; 0x78
 800f3ca:	4691      	mov	r9, r2
 800f3cc:	4680      	mov	r8, r0
 800f3ce:	460c      	mov	r4, r1
 800f3d0:	469a      	mov	sl, r3
 800f3d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f3d6:	d807      	bhi.n	800f3e8 <_printf_i+0x28>
 800f3d8:	2f62      	cmp	r7, #98	; 0x62
 800f3da:	d80a      	bhi.n	800f3f2 <_printf_i+0x32>
 800f3dc:	2f00      	cmp	r7, #0
 800f3de:	f000 80d4 	beq.w	800f58a <_printf_i+0x1ca>
 800f3e2:	2f58      	cmp	r7, #88	; 0x58
 800f3e4:	f000 80c0 	beq.w	800f568 <_printf_i+0x1a8>
 800f3e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f3f0:	e03a      	b.n	800f468 <_printf_i+0xa8>
 800f3f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f3f6:	2b15      	cmp	r3, #21
 800f3f8:	d8f6      	bhi.n	800f3e8 <_printf_i+0x28>
 800f3fa:	a101      	add	r1, pc, #4	; (adr r1, 800f400 <_printf_i+0x40>)
 800f3fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f400:	0800f459 	.word	0x0800f459
 800f404:	0800f46d 	.word	0x0800f46d
 800f408:	0800f3e9 	.word	0x0800f3e9
 800f40c:	0800f3e9 	.word	0x0800f3e9
 800f410:	0800f3e9 	.word	0x0800f3e9
 800f414:	0800f3e9 	.word	0x0800f3e9
 800f418:	0800f46d 	.word	0x0800f46d
 800f41c:	0800f3e9 	.word	0x0800f3e9
 800f420:	0800f3e9 	.word	0x0800f3e9
 800f424:	0800f3e9 	.word	0x0800f3e9
 800f428:	0800f3e9 	.word	0x0800f3e9
 800f42c:	0800f571 	.word	0x0800f571
 800f430:	0800f499 	.word	0x0800f499
 800f434:	0800f52b 	.word	0x0800f52b
 800f438:	0800f3e9 	.word	0x0800f3e9
 800f43c:	0800f3e9 	.word	0x0800f3e9
 800f440:	0800f593 	.word	0x0800f593
 800f444:	0800f3e9 	.word	0x0800f3e9
 800f448:	0800f499 	.word	0x0800f499
 800f44c:	0800f3e9 	.word	0x0800f3e9
 800f450:	0800f3e9 	.word	0x0800f3e9
 800f454:	0800f533 	.word	0x0800f533
 800f458:	682b      	ldr	r3, [r5, #0]
 800f45a:	1d1a      	adds	r2, r3, #4
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	602a      	str	r2, [r5, #0]
 800f460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f468:	2301      	movs	r3, #1
 800f46a:	e09f      	b.n	800f5ac <_printf_i+0x1ec>
 800f46c:	6820      	ldr	r0, [r4, #0]
 800f46e:	682b      	ldr	r3, [r5, #0]
 800f470:	0607      	lsls	r7, r0, #24
 800f472:	f103 0104 	add.w	r1, r3, #4
 800f476:	6029      	str	r1, [r5, #0]
 800f478:	d501      	bpl.n	800f47e <_printf_i+0xbe>
 800f47a:	681e      	ldr	r6, [r3, #0]
 800f47c:	e003      	b.n	800f486 <_printf_i+0xc6>
 800f47e:	0646      	lsls	r6, r0, #25
 800f480:	d5fb      	bpl.n	800f47a <_printf_i+0xba>
 800f482:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f486:	2e00      	cmp	r6, #0
 800f488:	da03      	bge.n	800f492 <_printf_i+0xd2>
 800f48a:	232d      	movs	r3, #45	; 0x2d
 800f48c:	4276      	negs	r6, r6
 800f48e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f492:	485a      	ldr	r0, [pc, #360]	; (800f5fc <_printf_i+0x23c>)
 800f494:	230a      	movs	r3, #10
 800f496:	e012      	b.n	800f4be <_printf_i+0xfe>
 800f498:	682b      	ldr	r3, [r5, #0]
 800f49a:	6820      	ldr	r0, [r4, #0]
 800f49c:	1d19      	adds	r1, r3, #4
 800f49e:	6029      	str	r1, [r5, #0]
 800f4a0:	0605      	lsls	r5, r0, #24
 800f4a2:	d501      	bpl.n	800f4a8 <_printf_i+0xe8>
 800f4a4:	681e      	ldr	r6, [r3, #0]
 800f4a6:	e002      	b.n	800f4ae <_printf_i+0xee>
 800f4a8:	0641      	lsls	r1, r0, #25
 800f4aa:	d5fb      	bpl.n	800f4a4 <_printf_i+0xe4>
 800f4ac:	881e      	ldrh	r6, [r3, #0]
 800f4ae:	4853      	ldr	r0, [pc, #332]	; (800f5fc <_printf_i+0x23c>)
 800f4b0:	2f6f      	cmp	r7, #111	; 0x6f
 800f4b2:	bf0c      	ite	eq
 800f4b4:	2308      	moveq	r3, #8
 800f4b6:	230a      	movne	r3, #10
 800f4b8:	2100      	movs	r1, #0
 800f4ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f4be:	6865      	ldr	r5, [r4, #4]
 800f4c0:	60a5      	str	r5, [r4, #8]
 800f4c2:	2d00      	cmp	r5, #0
 800f4c4:	bfa2      	ittt	ge
 800f4c6:	6821      	ldrge	r1, [r4, #0]
 800f4c8:	f021 0104 	bicge.w	r1, r1, #4
 800f4cc:	6021      	strge	r1, [r4, #0]
 800f4ce:	b90e      	cbnz	r6, 800f4d4 <_printf_i+0x114>
 800f4d0:	2d00      	cmp	r5, #0
 800f4d2:	d04b      	beq.n	800f56c <_printf_i+0x1ac>
 800f4d4:	4615      	mov	r5, r2
 800f4d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800f4da:	fb03 6711 	mls	r7, r3, r1, r6
 800f4de:	5dc7      	ldrb	r7, [r0, r7]
 800f4e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f4e4:	4637      	mov	r7, r6
 800f4e6:	42bb      	cmp	r3, r7
 800f4e8:	460e      	mov	r6, r1
 800f4ea:	d9f4      	bls.n	800f4d6 <_printf_i+0x116>
 800f4ec:	2b08      	cmp	r3, #8
 800f4ee:	d10b      	bne.n	800f508 <_printf_i+0x148>
 800f4f0:	6823      	ldr	r3, [r4, #0]
 800f4f2:	07de      	lsls	r6, r3, #31
 800f4f4:	d508      	bpl.n	800f508 <_printf_i+0x148>
 800f4f6:	6923      	ldr	r3, [r4, #16]
 800f4f8:	6861      	ldr	r1, [r4, #4]
 800f4fa:	4299      	cmp	r1, r3
 800f4fc:	bfde      	ittt	le
 800f4fe:	2330      	movle	r3, #48	; 0x30
 800f500:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f504:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f508:	1b52      	subs	r2, r2, r5
 800f50a:	6122      	str	r2, [r4, #16]
 800f50c:	f8cd a000 	str.w	sl, [sp]
 800f510:	464b      	mov	r3, r9
 800f512:	aa03      	add	r2, sp, #12
 800f514:	4621      	mov	r1, r4
 800f516:	4640      	mov	r0, r8
 800f518:	f7ff fee4 	bl	800f2e4 <_printf_common>
 800f51c:	3001      	adds	r0, #1
 800f51e:	d14a      	bne.n	800f5b6 <_printf_i+0x1f6>
 800f520:	f04f 30ff 	mov.w	r0, #4294967295
 800f524:	b004      	add	sp, #16
 800f526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f52a:	6823      	ldr	r3, [r4, #0]
 800f52c:	f043 0320 	orr.w	r3, r3, #32
 800f530:	6023      	str	r3, [r4, #0]
 800f532:	4833      	ldr	r0, [pc, #204]	; (800f600 <_printf_i+0x240>)
 800f534:	2778      	movs	r7, #120	; 0x78
 800f536:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f53a:	6823      	ldr	r3, [r4, #0]
 800f53c:	6829      	ldr	r1, [r5, #0]
 800f53e:	061f      	lsls	r7, r3, #24
 800f540:	f851 6b04 	ldr.w	r6, [r1], #4
 800f544:	d402      	bmi.n	800f54c <_printf_i+0x18c>
 800f546:	065f      	lsls	r7, r3, #25
 800f548:	bf48      	it	mi
 800f54a:	b2b6      	uxthmi	r6, r6
 800f54c:	07df      	lsls	r7, r3, #31
 800f54e:	bf48      	it	mi
 800f550:	f043 0320 	orrmi.w	r3, r3, #32
 800f554:	6029      	str	r1, [r5, #0]
 800f556:	bf48      	it	mi
 800f558:	6023      	strmi	r3, [r4, #0]
 800f55a:	b91e      	cbnz	r6, 800f564 <_printf_i+0x1a4>
 800f55c:	6823      	ldr	r3, [r4, #0]
 800f55e:	f023 0320 	bic.w	r3, r3, #32
 800f562:	6023      	str	r3, [r4, #0]
 800f564:	2310      	movs	r3, #16
 800f566:	e7a7      	b.n	800f4b8 <_printf_i+0xf8>
 800f568:	4824      	ldr	r0, [pc, #144]	; (800f5fc <_printf_i+0x23c>)
 800f56a:	e7e4      	b.n	800f536 <_printf_i+0x176>
 800f56c:	4615      	mov	r5, r2
 800f56e:	e7bd      	b.n	800f4ec <_printf_i+0x12c>
 800f570:	682b      	ldr	r3, [r5, #0]
 800f572:	6826      	ldr	r6, [r4, #0]
 800f574:	6961      	ldr	r1, [r4, #20]
 800f576:	1d18      	adds	r0, r3, #4
 800f578:	6028      	str	r0, [r5, #0]
 800f57a:	0635      	lsls	r5, r6, #24
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	d501      	bpl.n	800f584 <_printf_i+0x1c4>
 800f580:	6019      	str	r1, [r3, #0]
 800f582:	e002      	b.n	800f58a <_printf_i+0x1ca>
 800f584:	0670      	lsls	r0, r6, #25
 800f586:	d5fb      	bpl.n	800f580 <_printf_i+0x1c0>
 800f588:	8019      	strh	r1, [r3, #0]
 800f58a:	2300      	movs	r3, #0
 800f58c:	6123      	str	r3, [r4, #16]
 800f58e:	4615      	mov	r5, r2
 800f590:	e7bc      	b.n	800f50c <_printf_i+0x14c>
 800f592:	682b      	ldr	r3, [r5, #0]
 800f594:	1d1a      	adds	r2, r3, #4
 800f596:	602a      	str	r2, [r5, #0]
 800f598:	681d      	ldr	r5, [r3, #0]
 800f59a:	6862      	ldr	r2, [r4, #4]
 800f59c:	2100      	movs	r1, #0
 800f59e:	4628      	mov	r0, r5
 800f5a0:	f7f0 fdfe 	bl	80001a0 <memchr>
 800f5a4:	b108      	cbz	r0, 800f5aa <_printf_i+0x1ea>
 800f5a6:	1b40      	subs	r0, r0, r5
 800f5a8:	6060      	str	r0, [r4, #4]
 800f5aa:	6863      	ldr	r3, [r4, #4]
 800f5ac:	6123      	str	r3, [r4, #16]
 800f5ae:	2300      	movs	r3, #0
 800f5b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5b4:	e7aa      	b.n	800f50c <_printf_i+0x14c>
 800f5b6:	6923      	ldr	r3, [r4, #16]
 800f5b8:	462a      	mov	r2, r5
 800f5ba:	4649      	mov	r1, r9
 800f5bc:	4640      	mov	r0, r8
 800f5be:	47d0      	blx	sl
 800f5c0:	3001      	adds	r0, #1
 800f5c2:	d0ad      	beq.n	800f520 <_printf_i+0x160>
 800f5c4:	6823      	ldr	r3, [r4, #0]
 800f5c6:	079b      	lsls	r3, r3, #30
 800f5c8:	d413      	bmi.n	800f5f2 <_printf_i+0x232>
 800f5ca:	68e0      	ldr	r0, [r4, #12]
 800f5cc:	9b03      	ldr	r3, [sp, #12]
 800f5ce:	4298      	cmp	r0, r3
 800f5d0:	bfb8      	it	lt
 800f5d2:	4618      	movlt	r0, r3
 800f5d4:	e7a6      	b.n	800f524 <_printf_i+0x164>
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	4632      	mov	r2, r6
 800f5da:	4649      	mov	r1, r9
 800f5dc:	4640      	mov	r0, r8
 800f5de:	47d0      	blx	sl
 800f5e0:	3001      	adds	r0, #1
 800f5e2:	d09d      	beq.n	800f520 <_printf_i+0x160>
 800f5e4:	3501      	adds	r5, #1
 800f5e6:	68e3      	ldr	r3, [r4, #12]
 800f5e8:	9903      	ldr	r1, [sp, #12]
 800f5ea:	1a5b      	subs	r3, r3, r1
 800f5ec:	42ab      	cmp	r3, r5
 800f5ee:	dcf2      	bgt.n	800f5d6 <_printf_i+0x216>
 800f5f0:	e7eb      	b.n	800f5ca <_printf_i+0x20a>
 800f5f2:	2500      	movs	r5, #0
 800f5f4:	f104 0619 	add.w	r6, r4, #25
 800f5f8:	e7f5      	b.n	800f5e6 <_printf_i+0x226>
 800f5fa:	bf00      	nop
 800f5fc:	08013082 	.word	0x08013082
 800f600:	08013093 	.word	0x08013093

0800f604 <std>:
 800f604:	2300      	movs	r3, #0
 800f606:	b510      	push	{r4, lr}
 800f608:	4604      	mov	r4, r0
 800f60a:	e9c0 3300 	strd	r3, r3, [r0]
 800f60e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f612:	6083      	str	r3, [r0, #8]
 800f614:	8181      	strh	r1, [r0, #12]
 800f616:	6643      	str	r3, [r0, #100]	; 0x64
 800f618:	81c2      	strh	r2, [r0, #14]
 800f61a:	6183      	str	r3, [r0, #24]
 800f61c:	4619      	mov	r1, r3
 800f61e:	2208      	movs	r2, #8
 800f620:	305c      	adds	r0, #92	; 0x5c
 800f622:	f000 f9ff 	bl	800fa24 <memset>
 800f626:	4b0d      	ldr	r3, [pc, #52]	; (800f65c <std+0x58>)
 800f628:	6263      	str	r3, [r4, #36]	; 0x24
 800f62a:	4b0d      	ldr	r3, [pc, #52]	; (800f660 <std+0x5c>)
 800f62c:	62a3      	str	r3, [r4, #40]	; 0x28
 800f62e:	4b0d      	ldr	r3, [pc, #52]	; (800f664 <std+0x60>)
 800f630:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f632:	4b0d      	ldr	r3, [pc, #52]	; (800f668 <std+0x64>)
 800f634:	6323      	str	r3, [r4, #48]	; 0x30
 800f636:	4b0d      	ldr	r3, [pc, #52]	; (800f66c <std+0x68>)
 800f638:	6224      	str	r4, [r4, #32]
 800f63a:	429c      	cmp	r4, r3
 800f63c:	d006      	beq.n	800f64c <std+0x48>
 800f63e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800f642:	4294      	cmp	r4, r2
 800f644:	d002      	beq.n	800f64c <std+0x48>
 800f646:	33d0      	adds	r3, #208	; 0xd0
 800f648:	429c      	cmp	r4, r3
 800f64a:	d105      	bne.n	800f658 <std+0x54>
 800f64c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f654:	f000 ba62 	b.w	800fb1c <__retarget_lock_init_recursive>
 800f658:	bd10      	pop	{r4, pc}
 800f65a:	bf00      	nop
 800f65c:	0800f875 	.word	0x0800f875
 800f660:	0800f897 	.word	0x0800f897
 800f664:	0800f8cf 	.word	0x0800f8cf
 800f668:	0800f8f3 	.word	0x0800f8f3
 800f66c:	20001900 	.word	0x20001900

0800f670 <stdio_exit_handler>:
 800f670:	4a02      	ldr	r2, [pc, #8]	; (800f67c <stdio_exit_handler+0xc>)
 800f672:	4903      	ldr	r1, [pc, #12]	; (800f680 <stdio_exit_handler+0x10>)
 800f674:	4803      	ldr	r0, [pc, #12]	; (800f684 <stdio_exit_handler+0x14>)
 800f676:	f000 b869 	b.w	800f74c <_fwalk_sglue>
 800f67a:	bf00      	nop
 800f67c:	2000004c 	.word	0x2000004c
 800f680:	080114c1 	.word	0x080114c1
 800f684:	20000058 	.word	0x20000058

0800f688 <cleanup_stdio>:
 800f688:	6841      	ldr	r1, [r0, #4]
 800f68a:	4b0c      	ldr	r3, [pc, #48]	; (800f6bc <cleanup_stdio+0x34>)
 800f68c:	4299      	cmp	r1, r3
 800f68e:	b510      	push	{r4, lr}
 800f690:	4604      	mov	r4, r0
 800f692:	d001      	beq.n	800f698 <cleanup_stdio+0x10>
 800f694:	f001 ff14 	bl	80114c0 <_fflush_r>
 800f698:	68a1      	ldr	r1, [r4, #8]
 800f69a:	4b09      	ldr	r3, [pc, #36]	; (800f6c0 <cleanup_stdio+0x38>)
 800f69c:	4299      	cmp	r1, r3
 800f69e:	d002      	beq.n	800f6a6 <cleanup_stdio+0x1e>
 800f6a0:	4620      	mov	r0, r4
 800f6a2:	f001 ff0d 	bl	80114c0 <_fflush_r>
 800f6a6:	68e1      	ldr	r1, [r4, #12]
 800f6a8:	4b06      	ldr	r3, [pc, #24]	; (800f6c4 <cleanup_stdio+0x3c>)
 800f6aa:	4299      	cmp	r1, r3
 800f6ac:	d004      	beq.n	800f6b8 <cleanup_stdio+0x30>
 800f6ae:	4620      	mov	r0, r4
 800f6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6b4:	f001 bf04 	b.w	80114c0 <_fflush_r>
 800f6b8:	bd10      	pop	{r4, pc}
 800f6ba:	bf00      	nop
 800f6bc:	20001900 	.word	0x20001900
 800f6c0:	20001968 	.word	0x20001968
 800f6c4:	200019d0 	.word	0x200019d0

0800f6c8 <global_stdio_init.part.0>:
 800f6c8:	b510      	push	{r4, lr}
 800f6ca:	4b0b      	ldr	r3, [pc, #44]	; (800f6f8 <global_stdio_init.part.0+0x30>)
 800f6cc:	4c0b      	ldr	r4, [pc, #44]	; (800f6fc <global_stdio_init.part.0+0x34>)
 800f6ce:	4a0c      	ldr	r2, [pc, #48]	; (800f700 <global_stdio_init.part.0+0x38>)
 800f6d0:	601a      	str	r2, [r3, #0]
 800f6d2:	4620      	mov	r0, r4
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	2104      	movs	r1, #4
 800f6d8:	f7ff ff94 	bl	800f604 <std>
 800f6dc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f6e0:	2201      	movs	r2, #1
 800f6e2:	2109      	movs	r1, #9
 800f6e4:	f7ff ff8e 	bl	800f604 <std>
 800f6e8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f6ec:	2202      	movs	r2, #2
 800f6ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6f2:	2112      	movs	r1, #18
 800f6f4:	f7ff bf86 	b.w	800f604 <std>
 800f6f8:	20001a38 	.word	0x20001a38
 800f6fc:	20001900 	.word	0x20001900
 800f700:	0800f671 	.word	0x0800f671

0800f704 <__sfp_lock_acquire>:
 800f704:	4801      	ldr	r0, [pc, #4]	; (800f70c <__sfp_lock_acquire+0x8>)
 800f706:	f000 ba0a 	b.w	800fb1e <__retarget_lock_acquire_recursive>
 800f70a:	bf00      	nop
 800f70c:	20001a41 	.word	0x20001a41

0800f710 <__sfp_lock_release>:
 800f710:	4801      	ldr	r0, [pc, #4]	; (800f718 <__sfp_lock_release+0x8>)
 800f712:	f000 ba05 	b.w	800fb20 <__retarget_lock_release_recursive>
 800f716:	bf00      	nop
 800f718:	20001a41 	.word	0x20001a41

0800f71c <__sinit>:
 800f71c:	b510      	push	{r4, lr}
 800f71e:	4604      	mov	r4, r0
 800f720:	f7ff fff0 	bl	800f704 <__sfp_lock_acquire>
 800f724:	6a23      	ldr	r3, [r4, #32]
 800f726:	b11b      	cbz	r3, 800f730 <__sinit+0x14>
 800f728:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f72c:	f7ff bff0 	b.w	800f710 <__sfp_lock_release>
 800f730:	4b04      	ldr	r3, [pc, #16]	; (800f744 <__sinit+0x28>)
 800f732:	6223      	str	r3, [r4, #32]
 800f734:	4b04      	ldr	r3, [pc, #16]	; (800f748 <__sinit+0x2c>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d1f5      	bne.n	800f728 <__sinit+0xc>
 800f73c:	f7ff ffc4 	bl	800f6c8 <global_stdio_init.part.0>
 800f740:	e7f2      	b.n	800f728 <__sinit+0xc>
 800f742:	bf00      	nop
 800f744:	0800f689 	.word	0x0800f689
 800f748:	20001a38 	.word	0x20001a38

0800f74c <_fwalk_sglue>:
 800f74c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f750:	4607      	mov	r7, r0
 800f752:	4688      	mov	r8, r1
 800f754:	4614      	mov	r4, r2
 800f756:	2600      	movs	r6, #0
 800f758:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f75c:	f1b9 0901 	subs.w	r9, r9, #1
 800f760:	d505      	bpl.n	800f76e <_fwalk_sglue+0x22>
 800f762:	6824      	ldr	r4, [r4, #0]
 800f764:	2c00      	cmp	r4, #0
 800f766:	d1f7      	bne.n	800f758 <_fwalk_sglue+0xc>
 800f768:	4630      	mov	r0, r6
 800f76a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f76e:	89ab      	ldrh	r3, [r5, #12]
 800f770:	2b01      	cmp	r3, #1
 800f772:	d907      	bls.n	800f784 <_fwalk_sglue+0x38>
 800f774:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f778:	3301      	adds	r3, #1
 800f77a:	d003      	beq.n	800f784 <_fwalk_sglue+0x38>
 800f77c:	4629      	mov	r1, r5
 800f77e:	4638      	mov	r0, r7
 800f780:	47c0      	blx	r8
 800f782:	4306      	orrs	r6, r0
 800f784:	3568      	adds	r5, #104	; 0x68
 800f786:	e7e9      	b.n	800f75c <_fwalk_sglue+0x10>

0800f788 <iprintf>:
 800f788:	b40f      	push	{r0, r1, r2, r3}
 800f78a:	b507      	push	{r0, r1, r2, lr}
 800f78c:	4906      	ldr	r1, [pc, #24]	; (800f7a8 <iprintf+0x20>)
 800f78e:	ab04      	add	r3, sp, #16
 800f790:	6808      	ldr	r0, [r1, #0]
 800f792:	f853 2b04 	ldr.w	r2, [r3], #4
 800f796:	6881      	ldr	r1, [r0, #8]
 800f798:	9301      	str	r3, [sp, #4]
 800f79a:	f001 fcf1 	bl	8011180 <_vfiprintf_r>
 800f79e:	b003      	add	sp, #12
 800f7a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7a4:	b004      	add	sp, #16
 800f7a6:	4770      	bx	lr
 800f7a8:	200000a4 	.word	0x200000a4

0800f7ac <putchar>:
 800f7ac:	4b02      	ldr	r3, [pc, #8]	; (800f7b8 <putchar+0xc>)
 800f7ae:	4601      	mov	r1, r0
 800f7b0:	6818      	ldr	r0, [r3, #0]
 800f7b2:	6882      	ldr	r2, [r0, #8]
 800f7b4:	f001 bf0e 	b.w	80115d4 <_putc_r>
 800f7b8:	200000a4 	.word	0x200000a4

0800f7bc <_puts_r>:
 800f7bc:	6a03      	ldr	r3, [r0, #32]
 800f7be:	b570      	push	{r4, r5, r6, lr}
 800f7c0:	6884      	ldr	r4, [r0, #8]
 800f7c2:	4605      	mov	r5, r0
 800f7c4:	460e      	mov	r6, r1
 800f7c6:	b90b      	cbnz	r3, 800f7cc <_puts_r+0x10>
 800f7c8:	f7ff ffa8 	bl	800f71c <__sinit>
 800f7cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f7ce:	07db      	lsls	r3, r3, #31
 800f7d0:	d405      	bmi.n	800f7de <_puts_r+0x22>
 800f7d2:	89a3      	ldrh	r3, [r4, #12]
 800f7d4:	0598      	lsls	r0, r3, #22
 800f7d6:	d402      	bmi.n	800f7de <_puts_r+0x22>
 800f7d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f7da:	f000 f9a0 	bl	800fb1e <__retarget_lock_acquire_recursive>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	0719      	lsls	r1, r3, #28
 800f7e2:	d513      	bpl.n	800f80c <_puts_r+0x50>
 800f7e4:	6923      	ldr	r3, [r4, #16]
 800f7e6:	b18b      	cbz	r3, 800f80c <_puts_r+0x50>
 800f7e8:	3e01      	subs	r6, #1
 800f7ea:	68a3      	ldr	r3, [r4, #8]
 800f7ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f7f0:	3b01      	subs	r3, #1
 800f7f2:	60a3      	str	r3, [r4, #8]
 800f7f4:	b9e9      	cbnz	r1, 800f832 <_puts_r+0x76>
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	da2e      	bge.n	800f858 <_puts_r+0x9c>
 800f7fa:	4622      	mov	r2, r4
 800f7fc:	210a      	movs	r1, #10
 800f7fe:	4628      	mov	r0, r5
 800f800:	f000 f87b 	bl	800f8fa <__swbuf_r>
 800f804:	3001      	adds	r0, #1
 800f806:	d007      	beq.n	800f818 <_puts_r+0x5c>
 800f808:	250a      	movs	r5, #10
 800f80a:	e007      	b.n	800f81c <_puts_r+0x60>
 800f80c:	4621      	mov	r1, r4
 800f80e:	4628      	mov	r0, r5
 800f810:	f000 f8b0 	bl	800f974 <__swsetup_r>
 800f814:	2800      	cmp	r0, #0
 800f816:	d0e7      	beq.n	800f7e8 <_puts_r+0x2c>
 800f818:	f04f 35ff 	mov.w	r5, #4294967295
 800f81c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f81e:	07da      	lsls	r2, r3, #31
 800f820:	d405      	bmi.n	800f82e <_puts_r+0x72>
 800f822:	89a3      	ldrh	r3, [r4, #12]
 800f824:	059b      	lsls	r3, r3, #22
 800f826:	d402      	bmi.n	800f82e <_puts_r+0x72>
 800f828:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f82a:	f000 f979 	bl	800fb20 <__retarget_lock_release_recursive>
 800f82e:	4628      	mov	r0, r5
 800f830:	bd70      	pop	{r4, r5, r6, pc}
 800f832:	2b00      	cmp	r3, #0
 800f834:	da04      	bge.n	800f840 <_puts_r+0x84>
 800f836:	69a2      	ldr	r2, [r4, #24]
 800f838:	429a      	cmp	r2, r3
 800f83a:	dc06      	bgt.n	800f84a <_puts_r+0x8e>
 800f83c:	290a      	cmp	r1, #10
 800f83e:	d004      	beq.n	800f84a <_puts_r+0x8e>
 800f840:	6823      	ldr	r3, [r4, #0]
 800f842:	1c5a      	adds	r2, r3, #1
 800f844:	6022      	str	r2, [r4, #0]
 800f846:	7019      	strb	r1, [r3, #0]
 800f848:	e7cf      	b.n	800f7ea <_puts_r+0x2e>
 800f84a:	4622      	mov	r2, r4
 800f84c:	4628      	mov	r0, r5
 800f84e:	f000 f854 	bl	800f8fa <__swbuf_r>
 800f852:	3001      	adds	r0, #1
 800f854:	d1c9      	bne.n	800f7ea <_puts_r+0x2e>
 800f856:	e7df      	b.n	800f818 <_puts_r+0x5c>
 800f858:	6823      	ldr	r3, [r4, #0]
 800f85a:	250a      	movs	r5, #10
 800f85c:	1c5a      	adds	r2, r3, #1
 800f85e:	6022      	str	r2, [r4, #0]
 800f860:	701d      	strb	r5, [r3, #0]
 800f862:	e7db      	b.n	800f81c <_puts_r+0x60>

0800f864 <puts>:
 800f864:	4b02      	ldr	r3, [pc, #8]	; (800f870 <puts+0xc>)
 800f866:	4601      	mov	r1, r0
 800f868:	6818      	ldr	r0, [r3, #0]
 800f86a:	f7ff bfa7 	b.w	800f7bc <_puts_r>
 800f86e:	bf00      	nop
 800f870:	200000a4 	.word	0x200000a4

0800f874 <__sread>:
 800f874:	b510      	push	{r4, lr}
 800f876:	460c      	mov	r4, r1
 800f878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f87c:	f000 f900 	bl	800fa80 <_read_r>
 800f880:	2800      	cmp	r0, #0
 800f882:	bfab      	itete	ge
 800f884:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f886:	89a3      	ldrhlt	r3, [r4, #12]
 800f888:	181b      	addge	r3, r3, r0
 800f88a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f88e:	bfac      	ite	ge
 800f890:	6563      	strge	r3, [r4, #84]	; 0x54
 800f892:	81a3      	strhlt	r3, [r4, #12]
 800f894:	bd10      	pop	{r4, pc}

0800f896 <__swrite>:
 800f896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f89a:	461f      	mov	r7, r3
 800f89c:	898b      	ldrh	r3, [r1, #12]
 800f89e:	05db      	lsls	r3, r3, #23
 800f8a0:	4605      	mov	r5, r0
 800f8a2:	460c      	mov	r4, r1
 800f8a4:	4616      	mov	r6, r2
 800f8a6:	d505      	bpl.n	800f8b4 <__swrite+0x1e>
 800f8a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8ac:	2302      	movs	r3, #2
 800f8ae:	2200      	movs	r2, #0
 800f8b0:	f000 f8d4 	bl	800fa5c <_lseek_r>
 800f8b4:	89a3      	ldrh	r3, [r4, #12]
 800f8b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f8ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f8be:	81a3      	strh	r3, [r4, #12]
 800f8c0:	4632      	mov	r2, r6
 800f8c2:	463b      	mov	r3, r7
 800f8c4:	4628      	mov	r0, r5
 800f8c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f8ca:	f000 b8eb 	b.w	800faa4 <_write_r>

0800f8ce <__sseek>:
 800f8ce:	b510      	push	{r4, lr}
 800f8d0:	460c      	mov	r4, r1
 800f8d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8d6:	f000 f8c1 	bl	800fa5c <_lseek_r>
 800f8da:	1c43      	adds	r3, r0, #1
 800f8dc:	89a3      	ldrh	r3, [r4, #12]
 800f8de:	bf15      	itete	ne
 800f8e0:	6560      	strne	r0, [r4, #84]	; 0x54
 800f8e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f8e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f8ea:	81a3      	strheq	r3, [r4, #12]
 800f8ec:	bf18      	it	ne
 800f8ee:	81a3      	strhne	r3, [r4, #12]
 800f8f0:	bd10      	pop	{r4, pc}

0800f8f2 <__sclose>:
 800f8f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f8f6:	f000 b8a1 	b.w	800fa3c <_close_r>

0800f8fa <__swbuf_r>:
 800f8fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8fc:	460e      	mov	r6, r1
 800f8fe:	4614      	mov	r4, r2
 800f900:	4605      	mov	r5, r0
 800f902:	b118      	cbz	r0, 800f90c <__swbuf_r+0x12>
 800f904:	6a03      	ldr	r3, [r0, #32]
 800f906:	b90b      	cbnz	r3, 800f90c <__swbuf_r+0x12>
 800f908:	f7ff ff08 	bl	800f71c <__sinit>
 800f90c:	69a3      	ldr	r3, [r4, #24]
 800f90e:	60a3      	str	r3, [r4, #8]
 800f910:	89a3      	ldrh	r3, [r4, #12]
 800f912:	071a      	lsls	r2, r3, #28
 800f914:	d525      	bpl.n	800f962 <__swbuf_r+0x68>
 800f916:	6923      	ldr	r3, [r4, #16]
 800f918:	b31b      	cbz	r3, 800f962 <__swbuf_r+0x68>
 800f91a:	6823      	ldr	r3, [r4, #0]
 800f91c:	6922      	ldr	r2, [r4, #16]
 800f91e:	1a98      	subs	r0, r3, r2
 800f920:	6963      	ldr	r3, [r4, #20]
 800f922:	b2f6      	uxtb	r6, r6
 800f924:	4283      	cmp	r3, r0
 800f926:	4637      	mov	r7, r6
 800f928:	dc04      	bgt.n	800f934 <__swbuf_r+0x3a>
 800f92a:	4621      	mov	r1, r4
 800f92c:	4628      	mov	r0, r5
 800f92e:	f001 fdc7 	bl	80114c0 <_fflush_r>
 800f932:	b9e0      	cbnz	r0, 800f96e <__swbuf_r+0x74>
 800f934:	68a3      	ldr	r3, [r4, #8]
 800f936:	3b01      	subs	r3, #1
 800f938:	60a3      	str	r3, [r4, #8]
 800f93a:	6823      	ldr	r3, [r4, #0]
 800f93c:	1c5a      	adds	r2, r3, #1
 800f93e:	6022      	str	r2, [r4, #0]
 800f940:	701e      	strb	r6, [r3, #0]
 800f942:	6962      	ldr	r2, [r4, #20]
 800f944:	1c43      	adds	r3, r0, #1
 800f946:	429a      	cmp	r2, r3
 800f948:	d004      	beq.n	800f954 <__swbuf_r+0x5a>
 800f94a:	89a3      	ldrh	r3, [r4, #12]
 800f94c:	07db      	lsls	r3, r3, #31
 800f94e:	d506      	bpl.n	800f95e <__swbuf_r+0x64>
 800f950:	2e0a      	cmp	r6, #10
 800f952:	d104      	bne.n	800f95e <__swbuf_r+0x64>
 800f954:	4621      	mov	r1, r4
 800f956:	4628      	mov	r0, r5
 800f958:	f001 fdb2 	bl	80114c0 <_fflush_r>
 800f95c:	b938      	cbnz	r0, 800f96e <__swbuf_r+0x74>
 800f95e:	4638      	mov	r0, r7
 800f960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f962:	4621      	mov	r1, r4
 800f964:	4628      	mov	r0, r5
 800f966:	f000 f805 	bl	800f974 <__swsetup_r>
 800f96a:	2800      	cmp	r0, #0
 800f96c:	d0d5      	beq.n	800f91a <__swbuf_r+0x20>
 800f96e:	f04f 37ff 	mov.w	r7, #4294967295
 800f972:	e7f4      	b.n	800f95e <__swbuf_r+0x64>

0800f974 <__swsetup_r>:
 800f974:	b538      	push	{r3, r4, r5, lr}
 800f976:	4b2a      	ldr	r3, [pc, #168]	; (800fa20 <__swsetup_r+0xac>)
 800f978:	4605      	mov	r5, r0
 800f97a:	6818      	ldr	r0, [r3, #0]
 800f97c:	460c      	mov	r4, r1
 800f97e:	b118      	cbz	r0, 800f988 <__swsetup_r+0x14>
 800f980:	6a03      	ldr	r3, [r0, #32]
 800f982:	b90b      	cbnz	r3, 800f988 <__swsetup_r+0x14>
 800f984:	f7ff feca 	bl	800f71c <__sinit>
 800f988:	89a3      	ldrh	r3, [r4, #12]
 800f98a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f98e:	0718      	lsls	r0, r3, #28
 800f990:	d422      	bmi.n	800f9d8 <__swsetup_r+0x64>
 800f992:	06d9      	lsls	r1, r3, #27
 800f994:	d407      	bmi.n	800f9a6 <__swsetup_r+0x32>
 800f996:	2309      	movs	r3, #9
 800f998:	602b      	str	r3, [r5, #0]
 800f99a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f99e:	81a3      	strh	r3, [r4, #12]
 800f9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800f9a4:	e034      	b.n	800fa10 <__swsetup_r+0x9c>
 800f9a6:	0758      	lsls	r0, r3, #29
 800f9a8:	d512      	bpl.n	800f9d0 <__swsetup_r+0x5c>
 800f9aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f9ac:	b141      	cbz	r1, 800f9c0 <__swsetup_r+0x4c>
 800f9ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f9b2:	4299      	cmp	r1, r3
 800f9b4:	d002      	beq.n	800f9bc <__swsetup_r+0x48>
 800f9b6:	4628      	mov	r0, r5
 800f9b8:	f000 ff3c 	bl	8010834 <_free_r>
 800f9bc:	2300      	movs	r3, #0
 800f9be:	6363      	str	r3, [r4, #52]	; 0x34
 800f9c0:	89a3      	ldrh	r3, [r4, #12]
 800f9c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f9c6:	81a3      	strh	r3, [r4, #12]
 800f9c8:	2300      	movs	r3, #0
 800f9ca:	6063      	str	r3, [r4, #4]
 800f9cc:	6923      	ldr	r3, [r4, #16]
 800f9ce:	6023      	str	r3, [r4, #0]
 800f9d0:	89a3      	ldrh	r3, [r4, #12]
 800f9d2:	f043 0308 	orr.w	r3, r3, #8
 800f9d6:	81a3      	strh	r3, [r4, #12]
 800f9d8:	6923      	ldr	r3, [r4, #16]
 800f9da:	b94b      	cbnz	r3, 800f9f0 <__swsetup_r+0x7c>
 800f9dc:	89a3      	ldrh	r3, [r4, #12]
 800f9de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f9e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f9e6:	d003      	beq.n	800f9f0 <__swsetup_r+0x7c>
 800f9e8:	4621      	mov	r1, r4
 800f9ea:	4628      	mov	r0, r5
 800f9ec:	f001 fdb6 	bl	801155c <__smakebuf_r>
 800f9f0:	89a0      	ldrh	r0, [r4, #12]
 800f9f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f9f6:	f010 0301 	ands.w	r3, r0, #1
 800f9fa:	d00a      	beq.n	800fa12 <__swsetup_r+0x9e>
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	60a3      	str	r3, [r4, #8]
 800fa00:	6963      	ldr	r3, [r4, #20]
 800fa02:	425b      	negs	r3, r3
 800fa04:	61a3      	str	r3, [r4, #24]
 800fa06:	6923      	ldr	r3, [r4, #16]
 800fa08:	b943      	cbnz	r3, 800fa1c <__swsetup_r+0xa8>
 800fa0a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fa0e:	d1c4      	bne.n	800f99a <__swsetup_r+0x26>
 800fa10:	bd38      	pop	{r3, r4, r5, pc}
 800fa12:	0781      	lsls	r1, r0, #30
 800fa14:	bf58      	it	pl
 800fa16:	6963      	ldrpl	r3, [r4, #20]
 800fa18:	60a3      	str	r3, [r4, #8]
 800fa1a:	e7f4      	b.n	800fa06 <__swsetup_r+0x92>
 800fa1c:	2000      	movs	r0, #0
 800fa1e:	e7f7      	b.n	800fa10 <__swsetup_r+0x9c>
 800fa20:	200000a4 	.word	0x200000a4

0800fa24 <memset>:
 800fa24:	4402      	add	r2, r0
 800fa26:	4603      	mov	r3, r0
 800fa28:	4293      	cmp	r3, r2
 800fa2a:	d100      	bne.n	800fa2e <memset+0xa>
 800fa2c:	4770      	bx	lr
 800fa2e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa32:	e7f9      	b.n	800fa28 <memset+0x4>

0800fa34 <_localeconv_r>:
 800fa34:	4800      	ldr	r0, [pc, #0]	; (800fa38 <_localeconv_r+0x4>)
 800fa36:	4770      	bx	lr
 800fa38:	20000198 	.word	0x20000198

0800fa3c <_close_r>:
 800fa3c:	b538      	push	{r3, r4, r5, lr}
 800fa3e:	4d06      	ldr	r5, [pc, #24]	; (800fa58 <_close_r+0x1c>)
 800fa40:	2300      	movs	r3, #0
 800fa42:	4604      	mov	r4, r0
 800fa44:	4608      	mov	r0, r1
 800fa46:	602b      	str	r3, [r5, #0]
 800fa48:	f7f3 fd97 	bl	800357a <_close>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d102      	bne.n	800fa56 <_close_r+0x1a>
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	b103      	cbz	r3, 800fa56 <_close_r+0x1a>
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	20001a3c 	.word	0x20001a3c

0800fa5c <_lseek_r>:
 800fa5c:	b538      	push	{r3, r4, r5, lr}
 800fa5e:	4d07      	ldr	r5, [pc, #28]	; (800fa7c <_lseek_r+0x20>)
 800fa60:	4604      	mov	r4, r0
 800fa62:	4608      	mov	r0, r1
 800fa64:	4611      	mov	r1, r2
 800fa66:	2200      	movs	r2, #0
 800fa68:	602a      	str	r2, [r5, #0]
 800fa6a:	461a      	mov	r2, r3
 800fa6c:	f7f3 fdac 	bl	80035c8 <_lseek>
 800fa70:	1c43      	adds	r3, r0, #1
 800fa72:	d102      	bne.n	800fa7a <_lseek_r+0x1e>
 800fa74:	682b      	ldr	r3, [r5, #0]
 800fa76:	b103      	cbz	r3, 800fa7a <_lseek_r+0x1e>
 800fa78:	6023      	str	r3, [r4, #0]
 800fa7a:	bd38      	pop	{r3, r4, r5, pc}
 800fa7c:	20001a3c 	.word	0x20001a3c

0800fa80 <_read_r>:
 800fa80:	b538      	push	{r3, r4, r5, lr}
 800fa82:	4d07      	ldr	r5, [pc, #28]	; (800faa0 <_read_r+0x20>)
 800fa84:	4604      	mov	r4, r0
 800fa86:	4608      	mov	r0, r1
 800fa88:	4611      	mov	r1, r2
 800fa8a:	2200      	movs	r2, #0
 800fa8c:	602a      	str	r2, [r5, #0]
 800fa8e:	461a      	mov	r2, r3
 800fa90:	f7f3 fd56 	bl	8003540 <_read>
 800fa94:	1c43      	adds	r3, r0, #1
 800fa96:	d102      	bne.n	800fa9e <_read_r+0x1e>
 800fa98:	682b      	ldr	r3, [r5, #0]
 800fa9a:	b103      	cbz	r3, 800fa9e <_read_r+0x1e>
 800fa9c:	6023      	str	r3, [r4, #0]
 800fa9e:	bd38      	pop	{r3, r4, r5, pc}
 800faa0:	20001a3c 	.word	0x20001a3c

0800faa4 <_write_r>:
 800faa4:	b538      	push	{r3, r4, r5, lr}
 800faa6:	4d07      	ldr	r5, [pc, #28]	; (800fac4 <_write_r+0x20>)
 800faa8:	4604      	mov	r4, r0
 800faaa:	4608      	mov	r0, r1
 800faac:	4611      	mov	r1, r2
 800faae:	2200      	movs	r2, #0
 800fab0:	602a      	str	r2, [r5, #0]
 800fab2:	461a      	mov	r2, r3
 800fab4:	f7fd f8f6 	bl	800cca4 <_write>
 800fab8:	1c43      	adds	r3, r0, #1
 800faba:	d102      	bne.n	800fac2 <_write_r+0x1e>
 800fabc:	682b      	ldr	r3, [r5, #0]
 800fabe:	b103      	cbz	r3, 800fac2 <_write_r+0x1e>
 800fac0:	6023      	str	r3, [r4, #0]
 800fac2:	bd38      	pop	{r3, r4, r5, pc}
 800fac4:	20001a3c 	.word	0x20001a3c

0800fac8 <__errno>:
 800fac8:	4b01      	ldr	r3, [pc, #4]	; (800fad0 <__errno+0x8>)
 800faca:	6818      	ldr	r0, [r3, #0]
 800facc:	4770      	bx	lr
 800face:	bf00      	nop
 800fad0:	200000a4 	.word	0x200000a4

0800fad4 <__libc_init_array>:
 800fad4:	b570      	push	{r4, r5, r6, lr}
 800fad6:	4d0d      	ldr	r5, [pc, #52]	; (800fb0c <__libc_init_array+0x38>)
 800fad8:	4c0d      	ldr	r4, [pc, #52]	; (800fb10 <__libc_init_array+0x3c>)
 800fada:	1b64      	subs	r4, r4, r5
 800fadc:	10a4      	asrs	r4, r4, #2
 800fade:	2600      	movs	r6, #0
 800fae0:	42a6      	cmp	r6, r4
 800fae2:	d109      	bne.n	800faf8 <__libc_init_array+0x24>
 800fae4:	4d0b      	ldr	r5, [pc, #44]	; (800fb14 <__libc_init_array+0x40>)
 800fae6:	4c0c      	ldr	r4, [pc, #48]	; (800fb18 <__libc_init_array+0x44>)
 800fae8:	f001 fe8c 	bl	8011804 <_init>
 800faec:	1b64      	subs	r4, r4, r5
 800faee:	10a4      	asrs	r4, r4, #2
 800faf0:	2600      	movs	r6, #0
 800faf2:	42a6      	cmp	r6, r4
 800faf4:	d105      	bne.n	800fb02 <__libc_init_array+0x2e>
 800faf6:	bd70      	pop	{r4, r5, r6, pc}
 800faf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800fafc:	4798      	blx	r3
 800fafe:	3601      	adds	r6, #1
 800fb00:	e7ee      	b.n	800fae0 <__libc_init_array+0xc>
 800fb02:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb06:	4798      	blx	r3
 800fb08:	3601      	adds	r6, #1
 800fb0a:	e7f2      	b.n	800faf2 <__libc_init_array+0x1e>
 800fb0c:	080133ec 	.word	0x080133ec
 800fb10:	080133ec 	.word	0x080133ec
 800fb14:	080133ec 	.word	0x080133ec
 800fb18:	080133f0 	.word	0x080133f0

0800fb1c <__retarget_lock_init_recursive>:
 800fb1c:	4770      	bx	lr

0800fb1e <__retarget_lock_acquire_recursive>:
 800fb1e:	4770      	bx	lr

0800fb20 <__retarget_lock_release_recursive>:
 800fb20:	4770      	bx	lr

0800fb22 <memcpy>:
 800fb22:	440a      	add	r2, r1
 800fb24:	4291      	cmp	r1, r2
 800fb26:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb2a:	d100      	bne.n	800fb2e <memcpy+0xc>
 800fb2c:	4770      	bx	lr
 800fb2e:	b510      	push	{r4, lr}
 800fb30:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb34:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb38:	4291      	cmp	r1, r2
 800fb3a:	d1f9      	bne.n	800fb30 <memcpy+0xe>
 800fb3c:	bd10      	pop	{r4, pc}

0800fb3e <quorem>:
 800fb3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb42:	6903      	ldr	r3, [r0, #16]
 800fb44:	690c      	ldr	r4, [r1, #16]
 800fb46:	42a3      	cmp	r3, r4
 800fb48:	4607      	mov	r7, r0
 800fb4a:	db7e      	blt.n	800fc4a <quorem+0x10c>
 800fb4c:	3c01      	subs	r4, #1
 800fb4e:	f101 0814 	add.w	r8, r1, #20
 800fb52:	f100 0514 	add.w	r5, r0, #20
 800fb56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb5a:	9301      	str	r3, [sp, #4]
 800fb5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb64:	3301      	adds	r3, #1
 800fb66:	429a      	cmp	r2, r3
 800fb68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb70:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb74:	d331      	bcc.n	800fbda <quorem+0x9c>
 800fb76:	f04f 0e00 	mov.w	lr, #0
 800fb7a:	4640      	mov	r0, r8
 800fb7c:	46ac      	mov	ip, r5
 800fb7e:	46f2      	mov	sl, lr
 800fb80:	f850 2b04 	ldr.w	r2, [r0], #4
 800fb84:	b293      	uxth	r3, r2
 800fb86:	fb06 e303 	mla	r3, r6, r3, lr
 800fb8a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fb8e:	0c1a      	lsrs	r2, r3, #16
 800fb90:	b29b      	uxth	r3, r3
 800fb92:	ebaa 0303 	sub.w	r3, sl, r3
 800fb96:	f8dc a000 	ldr.w	sl, [ip]
 800fb9a:	fa13 f38a 	uxtah	r3, r3, sl
 800fb9e:	fb06 220e 	mla	r2, r6, lr, r2
 800fba2:	9300      	str	r3, [sp, #0]
 800fba4:	9b00      	ldr	r3, [sp, #0]
 800fba6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fbaa:	b292      	uxth	r2, r2
 800fbac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fbb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fbb4:	f8bd 3000 	ldrh.w	r3, [sp]
 800fbb8:	4581      	cmp	r9, r0
 800fbba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbbe:	f84c 3b04 	str.w	r3, [ip], #4
 800fbc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fbc6:	d2db      	bcs.n	800fb80 <quorem+0x42>
 800fbc8:	f855 300b 	ldr.w	r3, [r5, fp]
 800fbcc:	b92b      	cbnz	r3, 800fbda <quorem+0x9c>
 800fbce:	9b01      	ldr	r3, [sp, #4]
 800fbd0:	3b04      	subs	r3, #4
 800fbd2:	429d      	cmp	r5, r3
 800fbd4:	461a      	mov	r2, r3
 800fbd6:	d32c      	bcc.n	800fc32 <quorem+0xf4>
 800fbd8:	613c      	str	r4, [r7, #16]
 800fbda:	4638      	mov	r0, r7
 800fbdc:	f001 f9a6 	bl	8010f2c <__mcmp>
 800fbe0:	2800      	cmp	r0, #0
 800fbe2:	db22      	blt.n	800fc2a <quorem+0xec>
 800fbe4:	3601      	adds	r6, #1
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	2000      	movs	r0, #0
 800fbea:	f858 2b04 	ldr.w	r2, [r8], #4
 800fbee:	f8d1 c000 	ldr.w	ip, [r1]
 800fbf2:	b293      	uxth	r3, r2
 800fbf4:	1ac3      	subs	r3, r0, r3
 800fbf6:	0c12      	lsrs	r2, r2, #16
 800fbf8:	fa13 f38c 	uxtah	r3, r3, ip
 800fbfc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800fc00:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc0a:	45c1      	cmp	r9, r8
 800fc0c:	f841 3b04 	str.w	r3, [r1], #4
 800fc10:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fc14:	d2e9      	bcs.n	800fbea <quorem+0xac>
 800fc16:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc1e:	b922      	cbnz	r2, 800fc2a <quorem+0xec>
 800fc20:	3b04      	subs	r3, #4
 800fc22:	429d      	cmp	r5, r3
 800fc24:	461a      	mov	r2, r3
 800fc26:	d30a      	bcc.n	800fc3e <quorem+0x100>
 800fc28:	613c      	str	r4, [r7, #16]
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	b003      	add	sp, #12
 800fc2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc32:	6812      	ldr	r2, [r2, #0]
 800fc34:	3b04      	subs	r3, #4
 800fc36:	2a00      	cmp	r2, #0
 800fc38:	d1ce      	bne.n	800fbd8 <quorem+0x9a>
 800fc3a:	3c01      	subs	r4, #1
 800fc3c:	e7c9      	b.n	800fbd2 <quorem+0x94>
 800fc3e:	6812      	ldr	r2, [r2, #0]
 800fc40:	3b04      	subs	r3, #4
 800fc42:	2a00      	cmp	r2, #0
 800fc44:	d1f0      	bne.n	800fc28 <quorem+0xea>
 800fc46:	3c01      	subs	r4, #1
 800fc48:	e7eb      	b.n	800fc22 <quorem+0xe4>
 800fc4a:	2000      	movs	r0, #0
 800fc4c:	e7ee      	b.n	800fc2c <quorem+0xee>
	...

0800fc50 <_dtoa_r>:
 800fc50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc54:	ed2d 8b04 	vpush	{d8-d9}
 800fc58:	69c5      	ldr	r5, [r0, #28]
 800fc5a:	b093      	sub	sp, #76	; 0x4c
 800fc5c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc60:	ec57 6b10 	vmov	r6, r7, d0
 800fc64:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fc68:	9107      	str	r1, [sp, #28]
 800fc6a:	4604      	mov	r4, r0
 800fc6c:	920a      	str	r2, [sp, #40]	; 0x28
 800fc6e:	930d      	str	r3, [sp, #52]	; 0x34
 800fc70:	b975      	cbnz	r5, 800fc90 <_dtoa_r+0x40>
 800fc72:	2010      	movs	r0, #16
 800fc74:	f000 fe2a 	bl	80108cc <malloc>
 800fc78:	4602      	mov	r2, r0
 800fc7a:	61e0      	str	r0, [r4, #28]
 800fc7c:	b920      	cbnz	r0, 800fc88 <_dtoa_r+0x38>
 800fc7e:	4bae      	ldr	r3, [pc, #696]	; (800ff38 <_dtoa_r+0x2e8>)
 800fc80:	21ef      	movs	r1, #239	; 0xef
 800fc82:	48ae      	ldr	r0, [pc, #696]	; (800ff3c <_dtoa_r+0x2ec>)
 800fc84:	f001 fd0c 	bl	80116a0 <__assert_func>
 800fc88:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fc8c:	6005      	str	r5, [r0, #0]
 800fc8e:	60c5      	str	r5, [r0, #12]
 800fc90:	69e3      	ldr	r3, [r4, #28]
 800fc92:	6819      	ldr	r1, [r3, #0]
 800fc94:	b151      	cbz	r1, 800fcac <_dtoa_r+0x5c>
 800fc96:	685a      	ldr	r2, [r3, #4]
 800fc98:	604a      	str	r2, [r1, #4]
 800fc9a:	2301      	movs	r3, #1
 800fc9c:	4093      	lsls	r3, r2
 800fc9e:	608b      	str	r3, [r1, #8]
 800fca0:	4620      	mov	r0, r4
 800fca2:	f000 ff07 	bl	8010ab4 <_Bfree>
 800fca6:	69e3      	ldr	r3, [r4, #28]
 800fca8:	2200      	movs	r2, #0
 800fcaa:	601a      	str	r2, [r3, #0]
 800fcac:	1e3b      	subs	r3, r7, #0
 800fcae:	bfbb      	ittet	lt
 800fcb0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800fcb4:	9303      	strlt	r3, [sp, #12]
 800fcb6:	2300      	movge	r3, #0
 800fcb8:	2201      	movlt	r2, #1
 800fcba:	bfac      	ite	ge
 800fcbc:	f8c8 3000 	strge.w	r3, [r8]
 800fcc0:	f8c8 2000 	strlt.w	r2, [r8]
 800fcc4:	4b9e      	ldr	r3, [pc, #632]	; (800ff40 <_dtoa_r+0x2f0>)
 800fcc6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800fcca:	ea33 0308 	bics.w	r3, r3, r8
 800fcce:	d11b      	bne.n	800fd08 <_dtoa_r+0xb8>
 800fcd0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fcd2:	f242 730f 	movw	r3, #9999	; 0x270f
 800fcd6:	6013      	str	r3, [r2, #0]
 800fcd8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800fcdc:	4333      	orrs	r3, r6
 800fcde:	f000 8593 	beq.w	8010808 <_dtoa_r+0xbb8>
 800fce2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fce4:	b963      	cbnz	r3, 800fd00 <_dtoa_r+0xb0>
 800fce6:	4b97      	ldr	r3, [pc, #604]	; (800ff44 <_dtoa_r+0x2f4>)
 800fce8:	e027      	b.n	800fd3a <_dtoa_r+0xea>
 800fcea:	4b97      	ldr	r3, [pc, #604]	; (800ff48 <_dtoa_r+0x2f8>)
 800fcec:	9300      	str	r3, [sp, #0]
 800fcee:	3308      	adds	r3, #8
 800fcf0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fcf2:	6013      	str	r3, [r2, #0]
 800fcf4:	9800      	ldr	r0, [sp, #0]
 800fcf6:	b013      	add	sp, #76	; 0x4c
 800fcf8:	ecbd 8b04 	vpop	{d8-d9}
 800fcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd00:	4b90      	ldr	r3, [pc, #576]	; (800ff44 <_dtoa_r+0x2f4>)
 800fd02:	9300      	str	r3, [sp, #0]
 800fd04:	3303      	adds	r3, #3
 800fd06:	e7f3      	b.n	800fcf0 <_dtoa_r+0xa0>
 800fd08:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	ec51 0b17 	vmov	r0, r1, d7
 800fd12:	eeb0 8a47 	vmov.f32	s16, s14
 800fd16:	eef0 8a67 	vmov.f32	s17, s15
 800fd1a:	2300      	movs	r3, #0
 800fd1c:	f7f0 febc 	bl	8000a98 <__aeabi_dcmpeq>
 800fd20:	4681      	mov	r9, r0
 800fd22:	b160      	cbz	r0, 800fd3e <_dtoa_r+0xee>
 800fd24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fd26:	2301      	movs	r3, #1
 800fd28:	6013      	str	r3, [r2, #0]
 800fd2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	f000 8568 	beq.w	8010802 <_dtoa_r+0xbb2>
 800fd32:	4b86      	ldr	r3, [pc, #536]	; (800ff4c <_dtoa_r+0x2fc>)
 800fd34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd36:	6013      	str	r3, [r2, #0]
 800fd38:	3b01      	subs	r3, #1
 800fd3a:	9300      	str	r3, [sp, #0]
 800fd3c:	e7da      	b.n	800fcf4 <_dtoa_r+0xa4>
 800fd3e:	aa10      	add	r2, sp, #64	; 0x40
 800fd40:	a911      	add	r1, sp, #68	; 0x44
 800fd42:	4620      	mov	r0, r4
 800fd44:	eeb0 0a48 	vmov.f32	s0, s16
 800fd48:	eef0 0a68 	vmov.f32	s1, s17
 800fd4c:	f001 f994 	bl	8011078 <__d2b>
 800fd50:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800fd54:	4682      	mov	sl, r0
 800fd56:	2d00      	cmp	r5, #0
 800fd58:	d07f      	beq.n	800fe5a <_dtoa_r+0x20a>
 800fd5a:	ee18 3a90 	vmov	r3, s17
 800fd5e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fd62:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800fd66:	ec51 0b18 	vmov	r0, r1, d8
 800fd6a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fd6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fd72:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800fd76:	4619      	mov	r1, r3
 800fd78:	2200      	movs	r2, #0
 800fd7a:	4b75      	ldr	r3, [pc, #468]	; (800ff50 <_dtoa_r+0x300>)
 800fd7c:	f7f0 fa6c 	bl	8000258 <__aeabi_dsub>
 800fd80:	a367      	add	r3, pc, #412	; (adr r3, 800ff20 <_dtoa_r+0x2d0>)
 800fd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd86:	f7f0 fc1f 	bl	80005c8 <__aeabi_dmul>
 800fd8a:	a367      	add	r3, pc, #412	; (adr r3, 800ff28 <_dtoa_r+0x2d8>)
 800fd8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd90:	f7f0 fa64 	bl	800025c <__adddf3>
 800fd94:	4606      	mov	r6, r0
 800fd96:	4628      	mov	r0, r5
 800fd98:	460f      	mov	r7, r1
 800fd9a:	f7f0 fbab 	bl	80004f4 <__aeabi_i2d>
 800fd9e:	a364      	add	r3, pc, #400	; (adr r3, 800ff30 <_dtoa_r+0x2e0>)
 800fda0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fda4:	f7f0 fc10 	bl	80005c8 <__aeabi_dmul>
 800fda8:	4602      	mov	r2, r0
 800fdaa:	460b      	mov	r3, r1
 800fdac:	4630      	mov	r0, r6
 800fdae:	4639      	mov	r1, r7
 800fdb0:	f7f0 fa54 	bl	800025c <__adddf3>
 800fdb4:	4606      	mov	r6, r0
 800fdb6:	460f      	mov	r7, r1
 800fdb8:	f7f0 feb6 	bl	8000b28 <__aeabi_d2iz>
 800fdbc:	2200      	movs	r2, #0
 800fdbe:	4683      	mov	fp, r0
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	4630      	mov	r0, r6
 800fdc4:	4639      	mov	r1, r7
 800fdc6:	f7f0 fe71 	bl	8000aac <__aeabi_dcmplt>
 800fdca:	b148      	cbz	r0, 800fde0 <_dtoa_r+0x190>
 800fdcc:	4658      	mov	r0, fp
 800fdce:	f7f0 fb91 	bl	80004f4 <__aeabi_i2d>
 800fdd2:	4632      	mov	r2, r6
 800fdd4:	463b      	mov	r3, r7
 800fdd6:	f7f0 fe5f 	bl	8000a98 <__aeabi_dcmpeq>
 800fdda:	b908      	cbnz	r0, 800fde0 <_dtoa_r+0x190>
 800fddc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fde0:	f1bb 0f16 	cmp.w	fp, #22
 800fde4:	d857      	bhi.n	800fe96 <_dtoa_r+0x246>
 800fde6:	4b5b      	ldr	r3, [pc, #364]	; (800ff54 <_dtoa_r+0x304>)
 800fde8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800fdec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fdf0:	ec51 0b18 	vmov	r0, r1, d8
 800fdf4:	f7f0 fe5a 	bl	8000aac <__aeabi_dcmplt>
 800fdf8:	2800      	cmp	r0, #0
 800fdfa:	d04e      	beq.n	800fe9a <_dtoa_r+0x24a>
 800fdfc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800fe00:	2300      	movs	r3, #0
 800fe02:	930c      	str	r3, [sp, #48]	; 0x30
 800fe04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fe06:	1b5b      	subs	r3, r3, r5
 800fe08:	1e5a      	subs	r2, r3, #1
 800fe0a:	bf45      	ittet	mi
 800fe0c:	f1c3 0301 	rsbmi	r3, r3, #1
 800fe10:	9305      	strmi	r3, [sp, #20]
 800fe12:	2300      	movpl	r3, #0
 800fe14:	2300      	movmi	r3, #0
 800fe16:	9206      	str	r2, [sp, #24]
 800fe18:	bf54      	ite	pl
 800fe1a:	9305      	strpl	r3, [sp, #20]
 800fe1c:	9306      	strmi	r3, [sp, #24]
 800fe1e:	f1bb 0f00 	cmp.w	fp, #0
 800fe22:	db3c      	blt.n	800fe9e <_dtoa_r+0x24e>
 800fe24:	9b06      	ldr	r3, [sp, #24]
 800fe26:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800fe2a:	445b      	add	r3, fp
 800fe2c:	9306      	str	r3, [sp, #24]
 800fe2e:	2300      	movs	r3, #0
 800fe30:	9308      	str	r3, [sp, #32]
 800fe32:	9b07      	ldr	r3, [sp, #28]
 800fe34:	2b09      	cmp	r3, #9
 800fe36:	d868      	bhi.n	800ff0a <_dtoa_r+0x2ba>
 800fe38:	2b05      	cmp	r3, #5
 800fe3a:	bfc4      	itt	gt
 800fe3c:	3b04      	subgt	r3, #4
 800fe3e:	9307      	strgt	r3, [sp, #28]
 800fe40:	9b07      	ldr	r3, [sp, #28]
 800fe42:	f1a3 0302 	sub.w	r3, r3, #2
 800fe46:	bfcc      	ite	gt
 800fe48:	2500      	movgt	r5, #0
 800fe4a:	2501      	movle	r5, #1
 800fe4c:	2b03      	cmp	r3, #3
 800fe4e:	f200 8085 	bhi.w	800ff5c <_dtoa_r+0x30c>
 800fe52:	e8df f003 	tbb	[pc, r3]
 800fe56:	3b2e      	.short	0x3b2e
 800fe58:	5839      	.short	0x5839
 800fe5a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800fe5e:	441d      	add	r5, r3
 800fe60:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800fe64:	2b20      	cmp	r3, #32
 800fe66:	bfc1      	itttt	gt
 800fe68:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800fe6c:	fa08 f803 	lslgt.w	r8, r8, r3
 800fe70:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800fe74:	fa26 f303 	lsrgt.w	r3, r6, r3
 800fe78:	bfd6      	itet	le
 800fe7a:	f1c3 0320 	rsble	r3, r3, #32
 800fe7e:	ea48 0003 	orrgt.w	r0, r8, r3
 800fe82:	fa06 f003 	lslle.w	r0, r6, r3
 800fe86:	f7f0 fb25 	bl	80004d4 <__aeabi_ui2d>
 800fe8a:	2201      	movs	r2, #1
 800fe8c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800fe90:	3d01      	subs	r5, #1
 800fe92:	920e      	str	r2, [sp, #56]	; 0x38
 800fe94:	e76f      	b.n	800fd76 <_dtoa_r+0x126>
 800fe96:	2301      	movs	r3, #1
 800fe98:	e7b3      	b.n	800fe02 <_dtoa_r+0x1b2>
 800fe9a:	900c      	str	r0, [sp, #48]	; 0x30
 800fe9c:	e7b2      	b.n	800fe04 <_dtoa_r+0x1b4>
 800fe9e:	9b05      	ldr	r3, [sp, #20]
 800fea0:	eba3 030b 	sub.w	r3, r3, fp
 800fea4:	9305      	str	r3, [sp, #20]
 800fea6:	f1cb 0300 	rsb	r3, fp, #0
 800feaa:	9308      	str	r3, [sp, #32]
 800feac:	2300      	movs	r3, #0
 800feae:	930b      	str	r3, [sp, #44]	; 0x2c
 800feb0:	e7bf      	b.n	800fe32 <_dtoa_r+0x1e2>
 800feb2:	2300      	movs	r3, #0
 800feb4:	9309      	str	r3, [sp, #36]	; 0x24
 800feb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800feb8:	2b00      	cmp	r3, #0
 800feba:	dc52      	bgt.n	800ff62 <_dtoa_r+0x312>
 800febc:	2301      	movs	r3, #1
 800febe:	9301      	str	r3, [sp, #4]
 800fec0:	9304      	str	r3, [sp, #16]
 800fec2:	461a      	mov	r2, r3
 800fec4:	920a      	str	r2, [sp, #40]	; 0x28
 800fec6:	e00b      	b.n	800fee0 <_dtoa_r+0x290>
 800fec8:	2301      	movs	r3, #1
 800feca:	e7f3      	b.n	800feb4 <_dtoa_r+0x264>
 800fecc:	2300      	movs	r3, #0
 800fece:	9309      	str	r3, [sp, #36]	; 0x24
 800fed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fed2:	445b      	add	r3, fp
 800fed4:	9301      	str	r3, [sp, #4]
 800fed6:	3301      	adds	r3, #1
 800fed8:	2b01      	cmp	r3, #1
 800feda:	9304      	str	r3, [sp, #16]
 800fedc:	bfb8      	it	lt
 800fede:	2301      	movlt	r3, #1
 800fee0:	69e0      	ldr	r0, [r4, #28]
 800fee2:	2100      	movs	r1, #0
 800fee4:	2204      	movs	r2, #4
 800fee6:	f102 0614 	add.w	r6, r2, #20
 800feea:	429e      	cmp	r6, r3
 800feec:	d93d      	bls.n	800ff6a <_dtoa_r+0x31a>
 800feee:	6041      	str	r1, [r0, #4]
 800fef0:	4620      	mov	r0, r4
 800fef2:	f000 fd9f 	bl	8010a34 <_Balloc>
 800fef6:	9000      	str	r0, [sp, #0]
 800fef8:	2800      	cmp	r0, #0
 800fefa:	d139      	bne.n	800ff70 <_dtoa_r+0x320>
 800fefc:	4b16      	ldr	r3, [pc, #88]	; (800ff58 <_dtoa_r+0x308>)
 800fefe:	4602      	mov	r2, r0
 800ff00:	f240 11af 	movw	r1, #431	; 0x1af
 800ff04:	e6bd      	b.n	800fc82 <_dtoa_r+0x32>
 800ff06:	2301      	movs	r3, #1
 800ff08:	e7e1      	b.n	800fece <_dtoa_r+0x27e>
 800ff0a:	2501      	movs	r5, #1
 800ff0c:	2300      	movs	r3, #0
 800ff0e:	9307      	str	r3, [sp, #28]
 800ff10:	9509      	str	r5, [sp, #36]	; 0x24
 800ff12:	f04f 33ff 	mov.w	r3, #4294967295
 800ff16:	9301      	str	r3, [sp, #4]
 800ff18:	9304      	str	r3, [sp, #16]
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	2312      	movs	r3, #18
 800ff1e:	e7d1      	b.n	800fec4 <_dtoa_r+0x274>
 800ff20:	636f4361 	.word	0x636f4361
 800ff24:	3fd287a7 	.word	0x3fd287a7
 800ff28:	8b60c8b3 	.word	0x8b60c8b3
 800ff2c:	3fc68a28 	.word	0x3fc68a28
 800ff30:	509f79fb 	.word	0x509f79fb
 800ff34:	3fd34413 	.word	0x3fd34413
 800ff38:	080130b1 	.word	0x080130b1
 800ff3c:	080130c8 	.word	0x080130c8
 800ff40:	7ff00000 	.word	0x7ff00000
 800ff44:	080130ad 	.word	0x080130ad
 800ff48:	080130a4 	.word	0x080130a4
 800ff4c:	08013081 	.word	0x08013081
 800ff50:	3ff80000 	.word	0x3ff80000
 800ff54:	080131b8 	.word	0x080131b8
 800ff58:	08013120 	.word	0x08013120
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ff60:	e7d7      	b.n	800ff12 <_dtoa_r+0x2c2>
 800ff62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ff64:	9301      	str	r3, [sp, #4]
 800ff66:	9304      	str	r3, [sp, #16]
 800ff68:	e7ba      	b.n	800fee0 <_dtoa_r+0x290>
 800ff6a:	3101      	adds	r1, #1
 800ff6c:	0052      	lsls	r2, r2, #1
 800ff6e:	e7ba      	b.n	800fee6 <_dtoa_r+0x296>
 800ff70:	69e3      	ldr	r3, [r4, #28]
 800ff72:	9a00      	ldr	r2, [sp, #0]
 800ff74:	601a      	str	r2, [r3, #0]
 800ff76:	9b04      	ldr	r3, [sp, #16]
 800ff78:	2b0e      	cmp	r3, #14
 800ff7a:	f200 80a8 	bhi.w	80100ce <_dtoa_r+0x47e>
 800ff7e:	2d00      	cmp	r5, #0
 800ff80:	f000 80a5 	beq.w	80100ce <_dtoa_r+0x47e>
 800ff84:	f1bb 0f00 	cmp.w	fp, #0
 800ff88:	dd38      	ble.n	800fffc <_dtoa_r+0x3ac>
 800ff8a:	4bc0      	ldr	r3, [pc, #768]	; (801028c <_dtoa_r+0x63c>)
 800ff8c:	f00b 020f 	and.w	r2, fp, #15
 800ff90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ff94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ff98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ff9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800ffa0:	d019      	beq.n	800ffd6 <_dtoa_r+0x386>
 800ffa2:	4bbb      	ldr	r3, [pc, #748]	; (8010290 <_dtoa_r+0x640>)
 800ffa4:	ec51 0b18 	vmov	r0, r1, d8
 800ffa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ffac:	f7f0 fc36 	bl	800081c <__aeabi_ddiv>
 800ffb0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffb4:	f008 080f 	and.w	r8, r8, #15
 800ffb8:	2503      	movs	r5, #3
 800ffba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8010290 <_dtoa_r+0x640>
 800ffbe:	f1b8 0f00 	cmp.w	r8, #0
 800ffc2:	d10a      	bne.n	800ffda <_dtoa_r+0x38a>
 800ffc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ffc8:	4632      	mov	r2, r6
 800ffca:	463b      	mov	r3, r7
 800ffcc:	f7f0 fc26 	bl	800081c <__aeabi_ddiv>
 800ffd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ffd4:	e02b      	b.n	801002e <_dtoa_r+0x3de>
 800ffd6:	2502      	movs	r5, #2
 800ffd8:	e7ef      	b.n	800ffba <_dtoa_r+0x36a>
 800ffda:	f018 0f01 	tst.w	r8, #1
 800ffde:	d008      	beq.n	800fff2 <_dtoa_r+0x3a2>
 800ffe0:	4630      	mov	r0, r6
 800ffe2:	4639      	mov	r1, r7
 800ffe4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ffe8:	f7f0 faee 	bl	80005c8 <__aeabi_dmul>
 800ffec:	3501      	adds	r5, #1
 800ffee:	4606      	mov	r6, r0
 800fff0:	460f      	mov	r7, r1
 800fff2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fff6:	f109 0908 	add.w	r9, r9, #8
 800fffa:	e7e0      	b.n	800ffbe <_dtoa_r+0x36e>
 800fffc:	f000 809f 	beq.w	801013e <_dtoa_r+0x4ee>
 8010000:	f1cb 0600 	rsb	r6, fp, #0
 8010004:	4ba1      	ldr	r3, [pc, #644]	; (801028c <_dtoa_r+0x63c>)
 8010006:	4fa2      	ldr	r7, [pc, #648]	; (8010290 <_dtoa_r+0x640>)
 8010008:	f006 020f 	and.w	r2, r6, #15
 801000c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8010010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010014:	ec51 0b18 	vmov	r0, r1, d8
 8010018:	f7f0 fad6 	bl	80005c8 <__aeabi_dmul>
 801001c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010020:	1136      	asrs	r6, r6, #4
 8010022:	2300      	movs	r3, #0
 8010024:	2502      	movs	r5, #2
 8010026:	2e00      	cmp	r6, #0
 8010028:	d17e      	bne.n	8010128 <_dtoa_r+0x4d8>
 801002a:	2b00      	cmp	r3, #0
 801002c:	d1d0      	bne.n	800ffd0 <_dtoa_r+0x380>
 801002e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010030:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010034:	2b00      	cmp	r3, #0
 8010036:	f000 8084 	beq.w	8010142 <_dtoa_r+0x4f2>
 801003a:	4b96      	ldr	r3, [pc, #600]	; (8010294 <_dtoa_r+0x644>)
 801003c:	2200      	movs	r2, #0
 801003e:	4640      	mov	r0, r8
 8010040:	4649      	mov	r1, r9
 8010042:	f7f0 fd33 	bl	8000aac <__aeabi_dcmplt>
 8010046:	2800      	cmp	r0, #0
 8010048:	d07b      	beq.n	8010142 <_dtoa_r+0x4f2>
 801004a:	9b04      	ldr	r3, [sp, #16]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d078      	beq.n	8010142 <_dtoa_r+0x4f2>
 8010050:	9b01      	ldr	r3, [sp, #4]
 8010052:	2b00      	cmp	r3, #0
 8010054:	dd39      	ble.n	80100ca <_dtoa_r+0x47a>
 8010056:	4b90      	ldr	r3, [pc, #576]	; (8010298 <_dtoa_r+0x648>)
 8010058:	2200      	movs	r2, #0
 801005a:	4640      	mov	r0, r8
 801005c:	4649      	mov	r1, r9
 801005e:	f7f0 fab3 	bl	80005c8 <__aeabi_dmul>
 8010062:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010066:	9e01      	ldr	r6, [sp, #4]
 8010068:	f10b 37ff 	add.w	r7, fp, #4294967295
 801006c:	3501      	adds	r5, #1
 801006e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010072:	4628      	mov	r0, r5
 8010074:	f7f0 fa3e 	bl	80004f4 <__aeabi_i2d>
 8010078:	4642      	mov	r2, r8
 801007a:	464b      	mov	r3, r9
 801007c:	f7f0 faa4 	bl	80005c8 <__aeabi_dmul>
 8010080:	4b86      	ldr	r3, [pc, #536]	; (801029c <_dtoa_r+0x64c>)
 8010082:	2200      	movs	r2, #0
 8010084:	f7f0 f8ea 	bl	800025c <__adddf3>
 8010088:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801008c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010090:	9303      	str	r3, [sp, #12]
 8010092:	2e00      	cmp	r6, #0
 8010094:	d158      	bne.n	8010148 <_dtoa_r+0x4f8>
 8010096:	4b82      	ldr	r3, [pc, #520]	; (80102a0 <_dtoa_r+0x650>)
 8010098:	2200      	movs	r2, #0
 801009a:	4640      	mov	r0, r8
 801009c:	4649      	mov	r1, r9
 801009e:	f7f0 f8db 	bl	8000258 <__aeabi_dsub>
 80100a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80100a6:	4680      	mov	r8, r0
 80100a8:	4689      	mov	r9, r1
 80100aa:	f7f0 fd1d 	bl	8000ae8 <__aeabi_dcmpgt>
 80100ae:	2800      	cmp	r0, #0
 80100b0:	f040 8296 	bne.w	80105e0 <_dtoa_r+0x990>
 80100b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80100b8:	4640      	mov	r0, r8
 80100ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100be:	4649      	mov	r1, r9
 80100c0:	f7f0 fcf4 	bl	8000aac <__aeabi_dcmplt>
 80100c4:	2800      	cmp	r0, #0
 80100c6:	f040 8289 	bne.w	80105dc <_dtoa_r+0x98c>
 80100ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 80100ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	f2c0 814e 	blt.w	8010372 <_dtoa_r+0x722>
 80100d6:	f1bb 0f0e 	cmp.w	fp, #14
 80100da:	f300 814a 	bgt.w	8010372 <_dtoa_r+0x722>
 80100de:	4b6b      	ldr	r3, [pc, #428]	; (801028c <_dtoa_r+0x63c>)
 80100e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80100e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80100e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	f280 80dc 	bge.w	80102a8 <_dtoa_r+0x658>
 80100f0:	9b04      	ldr	r3, [sp, #16]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	f300 80d8 	bgt.w	80102a8 <_dtoa_r+0x658>
 80100f8:	f040 826f 	bne.w	80105da <_dtoa_r+0x98a>
 80100fc:	4b68      	ldr	r3, [pc, #416]	; (80102a0 <_dtoa_r+0x650>)
 80100fe:	2200      	movs	r2, #0
 8010100:	4640      	mov	r0, r8
 8010102:	4649      	mov	r1, r9
 8010104:	f7f0 fa60 	bl	80005c8 <__aeabi_dmul>
 8010108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801010c:	f7f0 fce2 	bl	8000ad4 <__aeabi_dcmpge>
 8010110:	9e04      	ldr	r6, [sp, #16]
 8010112:	4637      	mov	r7, r6
 8010114:	2800      	cmp	r0, #0
 8010116:	f040 8245 	bne.w	80105a4 <_dtoa_r+0x954>
 801011a:	9d00      	ldr	r5, [sp, #0]
 801011c:	2331      	movs	r3, #49	; 0x31
 801011e:	f805 3b01 	strb.w	r3, [r5], #1
 8010122:	f10b 0b01 	add.w	fp, fp, #1
 8010126:	e241      	b.n	80105ac <_dtoa_r+0x95c>
 8010128:	07f2      	lsls	r2, r6, #31
 801012a:	d505      	bpl.n	8010138 <_dtoa_r+0x4e8>
 801012c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010130:	f7f0 fa4a 	bl	80005c8 <__aeabi_dmul>
 8010134:	3501      	adds	r5, #1
 8010136:	2301      	movs	r3, #1
 8010138:	1076      	asrs	r6, r6, #1
 801013a:	3708      	adds	r7, #8
 801013c:	e773      	b.n	8010026 <_dtoa_r+0x3d6>
 801013e:	2502      	movs	r5, #2
 8010140:	e775      	b.n	801002e <_dtoa_r+0x3de>
 8010142:	9e04      	ldr	r6, [sp, #16]
 8010144:	465f      	mov	r7, fp
 8010146:	e792      	b.n	801006e <_dtoa_r+0x41e>
 8010148:	9900      	ldr	r1, [sp, #0]
 801014a:	4b50      	ldr	r3, [pc, #320]	; (801028c <_dtoa_r+0x63c>)
 801014c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010150:	4431      	add	r1, r6
 8010152:	9102      	str	r1, [sp, #8]
 8010154:	9909      	ldr	r1, [sp, #36]	; 0x24
 8010156:	eeb0 9a47 	vmov.f32	s18, s14
 801015a:	eef0 9a67 	vmov.f32	s19, s15
 801015e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8010162:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8010166:	2900      	cmp	r1, #0
 8010168:	d044      	beq.n	80101f4 <_dtoa_r+0x5a4>
 801016a:	494e      	ldr	r1, [pc, #312]	; (80102a4 <_dtoa_r+0x654>)
 801016c:	2000      	movs	r0, #0
 801016e:	f7f0 fb55 	bl	800081c <__aeabi_ddiv>
 8010172:	ec53 2b19 	vmov	r2, r3, d9
 8010176:	f7f0 f86f 	bl	8000258 <__aeabi_dsub>
 801017a:	9d00      	ldr	r5, [sp, #0]
 801017c:	ec41 0b19 	vmov	d9, r0, r1
 8010180:	4649      	mov	r1, r9
 8010182:	4640      	mov	r0, r8
 8010184:	f7f0 fcd0 	bl	8000b28 <__aeabi_d2iz>
 8010188:	4606      	mov	r6, r0
 801018a:	f7f0 f9b3 	bl	80004f4 <__aeabi_i2d>
 801018e:	4602      	mov	r2, r0
 8010190:	460b      	mov	r3, r1
 8010192:	4640      	mov	r0, r8
 8010194:	4649      	mov	r1, r9
 8010196:	f7f0 f85f 	bl	8000258 <__aeabi_dsub>
 801019a:	3630      	adds	r6, #48	; 0x30
 801019c:	f805 6b01 	strb.w	r6, [r5], #1
 80101a0:	ec53 2b19 	vmov	r2, r3, d9
 80101a4:	4680      	mov	r8, r0
 80101a6:	4689      	mov	r9, r1
 80101a8:	f7f0 fc80 	bl	8000aac <__aeabi_dcmplt>
 80101ac:	2800      	cmp	r0, #0
 80101ae:	d164      	bne.n	801027a <_dtoa_r+0x62a>
 80101b0:	4642      	mov	r2, r8
 80101b2:	464b      	mov	r3, r9
 80101b4:	4937      	ldr	r1, [pc, #220]	; (8010294 <_dtoa_r+0x644>)
 80101b6:	2000      	movs	r0, #0
 80101b8:	f7f0 f84e 	bl	8000258 <__aeabi_dsub>
 80101bc:	ec53 2b19 	vmov	r2, r3, d9
 80101c0:	f7f0 fc74 	bl	8000aac <__aeabi_dcmplt>
 80101c4:	2800      	cmp	r0, #0
 80101c6:	f040 80b6 	bne.w	8010336 <_dtoa_r+0x6e6>
 80101ca:	9b02      	ldr	r3, [sp, #8]
 80101cc:	429d      	cmp	r5, r3
 80101ce:	f43f af7c 	beq.w	80100ca <_dtoa_r+0x47a>
 80101d2:	4b31      	ldr	r3, [pc, #196]	; (8010298 <_dtoa_r+0x648>)
 80101d4:	ec51 0b19 	vmov	r0, r1, d9
 80101d8:	2200      	movs	r2, #0
 80101da:	f7f0 f9f5 	bl	80005c8 <__aeabi_dmul>
 80101de:	4b2e      	ldr	r3, [pc, #184]	; (8010298 <_dtoa_r+0x648>)
 80101e0:	ec41 0b19 	vmov	d9, r0, r1
 80101e4:	2200      	movs	r2, #0
 80101e6:	4640      	mov	r0, r8
 80101e8:	4649      	mov	r1, r9
 80101ea:	f7f0 f9ed 	bl	80005c8 <__aeabi_dmul>
 80101ee:	4680      	mov	r8, r0
 80101f0:	4689      	mov	r9, r1
 80101f2:	e7c5      	b.n	8010180 <_dtoa_r+0x530>
 80101f4:	ec51 0b17 	vmov	r0, r1, d7
 80101f8:	f7f0 f9e6 	bl	80005c8 <__aeabi_dmul>
 80101fc:	9b02      	ldr	r3, [sp, #8]
 80101fe:	9d00      	ldr	r5, [sp, #0]
 8010200:	930f      	str	r3, [sp, #60]	; 0x3c
 8010202:	ec41 0b19 	vmov	d9, r0, r1
 8010206:	4649      	mov	r1, r9
 8010208:	4640      	mov	r0, r8
 801020a:	f7f0 fc8d 	bl	8000b28 <__aeabi_d2iz>
 801020e:	4606      	mov	r6, r0
 8010210:	f7f0 f970 	bl	80004f4 <__aeabi_i2d>
 8010214:	3630      	adds	r6, #48	; 0x30
 8010216:	4602      	mov	r2, r0
 8010218:	460b      	mov	r3, r1
 801021a:	4640      	mov	r0, r8
 801021c:	4649      	mov	r1, r9
 801021e:	f7f0 f81b 	bl	8000258 <__aeabi_dsub>
 8010222:	f805 6b01 	strb.w	r6, [r5], #1
 8010226:	9b02      	ldr	r3, [sp, #8]
 8010228:	429d      	cmp	r5, r3
 801022a:	4680      	mov	r8, r0
 801022c:	4689      	mov	r9, r1
 801022e:	f04f 0200 	mov.w	r2, #0
 8010232:	d124      	bne.n	801027e <_dtoa_r+0x62e>
 8010234:	4b1b      	ldr	r3, [pc, #108]	; (80102a4 <_dtoa_r+0x654>)
 8010236:	ec51 0b19 	vmov	r0, r1, d9
 801023a:	f7f0 f80f 	bl	800025c <__adddf3>
 801023e:	4602      	mov	r2, r0
 8010240:	460b      	mov	r3, r1
 8010242:	4640      	mov	r0, r8
 8010244:	4649      	mov	r1, r9
 8010246:	f7f0 fc4f 	bl	8000ae8 <__aeabi_dcmpgt>
 801024a:	2800      	cmp	r0, #0
 801024c:	d173      	bne.n	8010336 <_dtoa_r+0x6e6>
 801024e:	ec53 2b19 	vmov	r2, r3, d9
 8010252:	4914      	ldr	r1, [pc, #80]	; (80102a4 <_dtoa_r+0x654>)
 8010254:	2000      	movs	r0, #0
 8010256:	f7ef ffff 	bl	8000258 <__aeabi_dsub>
 801025a:	4602      	mov	r2, r0
 801025c:	460b      	mov	r3, r1
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 fc23 	bl	8000aac <__aeabi_dcmplt>
 8010266:	2800      	cmp	r0, #0
 8010268:	f43f af2f 	beq.w	80100ca <_dtoa_r+0x47a>
 801026c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801026e:	1e6b      	subs	r3, r5, #1
 8010270:	930f      	str	r3, [sp, #60]	; 0x3c
 8010272:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8010276:	2b30      	cmp	r3, #48	; 0x30
 8010278:	d0f8      	beq.n	801026c <_dtoa_r+0x61c>
 801027a:	46bb      	mov	fp, r7
 801027c:	e04a      	b.n	8010314 <_dtoa_r+0x6c4>
 801027e:	4b06      	ldr	r3, [pc, #24]	; (8010298 <_dtoa_r+0x648>)
 8010280:	f7f0 f9a2 	bl	80005c8 <__aeabi_dmul>
 8010284:	4680      	mov	r8, r0
 8010286:	4689      	mov	r9, r1
 8010288:	e7bd      	b.n	8010206 <_dtoa_r+0x5b6>
 801028a:	bf00      	nop
 801028c:	080131b8 	.word	0x080131b8
 8010290:	08013190 	.word	0x08013190
 8010294:	3ff00000 	.word	0x3ff00000
 8010298:	40240000 	.word	0x40240000
 801029c:	401c0000 	.word	0x401c0000
 80102a0:	40140000 	.word	0x40140000
 80102a4:	3fe00000 	.word	0x3fe00000
 80102a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80102ac:	9d00      	ldr	r5, [sp, #0]
 80102ae:	4642      	mov	r2, r8
 80102b0:	464b      	mov	r3, r9
 80102b2:	4630      	mov	r0, r6
 80102b4:	4639      	mov	r1, r7
 80102b6:	f7f0 fab1 	bl	800081c <__aeabi_ddiv>
 80102ba:	f7f0 fc35 	bl	8000b28 <__aeabi_d2iz>
 80102be:	9001      	str	r0, [sp, #4]
 80102c0:	f7f0 f918 	bl	80004f4 <__aeabi_i2d>
 80102c4:	4642      	mov	r2, r8
 80102c6:	464b      	mov	r3, r9
 80102c8:	f7f0 f97e 	bl	80005c8 <__aeabi_dmul>
 80102cc:	4602      	mov	r2, r0
 80102ce:	460b      	mov	r3, r1
 80102d0:	4630      	mov	r0, r6
 80102d2:	4639      	mov	r1, r7
 80102d4:	f7ef ffc0 	bl	8000258 <__aeabi_dsub>
 80102d8:	9e01      	ldr	r6, [sp, #4]
 80102da:	9f04      	ldr	r7, [sp, #16]
 80102dc:	3630      	adds	r6, #48	; 0x30
 80102de:	f805 6b01 	strb.w	r6, [r5], #1
 80102e2:	9e00      	ldr	r6, [sp, #0]
 80102e4:	1bae      	subs	r6, r5, r6
 80102e6:	42b7      	cmp	r7, r6
 80102e8:	4602      	mov	r2, r0
 80102ea:	460b      	mov	r3, r1
 80102ec:	d134      	bne.n	8010358 <_dtoa_r+0x708>
 80102ee:	f7ef ffb5 	bl	800025c <__adddf3>
 80102f2:	4642      	mov	r2, r8
 80102f4:	464b      	mov	r3, r9
 80102f6:	4606      	mov	r6, r0
 80102f8:	460f      	mov	r7, r1
 80102fa:	f7f0 fbf5 	bl	8000ae8 <__aeabi_dcmpgt>
 80102fe:	b9c8      	cbnz	r0, 8010334 <_dtoa_r+0x6e4>
 8010300:	4642      	mov	r2, r8
 8010302:	464b      	mov	r3, r9
 8010304:	4630      	mov	r0, r6
 8010306:	4639      	mov	r1, r7
 8010308:	f7f0 fbc6 	bl	8000a98 <__aeabi_dcmpeq>
 801030c:	b110      	cbz	r0, 8010314 <_dtoa_r+0x6c4>
 801030e:	9b01      	ldr	r3, [sp, #4]
 8010310:	07db      	lsls	r3, r3, #31
 8010312:	d40f      	bmi.n	8010334 <_dtoa_r+0x6e4>
 8010314:	4651      	mov	r1, sl
 8010316:	4620      	mov	r0, r4
 8010318:	f000 fbcc 	bl	8010ab4 <_Bfree>
 801031c:	2300      	movs	r3, #0
 801031e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010320:	702b      	strb	r3, [r5, #0]
 8010322:	f10b 0301 	add.w	r3, fp, #1
 8010326:	6013      	str	r3, [r2, #0]
 8010328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801032a:	2b00      	cmp	r3, #0
 801032c:	f43f ace2 	beq.w	800fcf4 <_dtoa_r+0xa4>
 8010330:	601d      	str	r5, [r3, #0]
 8010332:	e4df      	b.n	800fcf4 <_dtoa_r+0xa4>
 8010334:	465f      	mov	r7, fp
 8010336:	462b      	mov	r3, r5
 8010338:	461d      	mov	r5, r3
 801033a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801033e:	2a39      	cmp	r2, #57	; 0x39
 8010340:	d106      	bne.n	8010350 <_dtoa_r+0x700>
 8010342:	9a00      	ldr	r2, [sp, #0]
 8010344:	429a      	cmp	r2, r3
 8010346:	d1f7      	bne.n	8010338 <_dtoa_r+0x6e8>
 8010348:	9900      	ldr	r1, [sp, #0]
 801034a:	2230      	movs	r2, #48	; 0x30
 801034c:	3701      	adds	r7, #1
 801034e:	700a      	strb	r2, [r1, #0]
 8010350:	781a      	ldrb	r2, [r3, #0]
 8010352:	3201      	adds	r2, #1
 8010354:	701a      	strb	r2, [r3, #0]
 8010356:	e790      	b.n	801027a <_dtoa_r+0x62a>
 8010358:	4ba3      	ldr	r3, [pc, #652]	; (80105e8 <_dtoa_r+0x998>)
 801035a:	2200      	movs	r2, #0
 801035c:	f7f0 f934 	bl	80005c8 <__aeabi_dmul>
 8010360:	2200      	movs	r2, #0
 8010362:	2300      	movs	r3, #0
 8010364:	4606      	mov	r6, r0
 8010366:	460f      	mov	r7, r1
 8010368:	f7f0 fb96 	bl	8000a98 <__aeabi_dcmpeq>
 801036c:	2800      	cmp	r0, #0
 801036e:	d09e      	beq.n	80102ae <_dtoa_r+0x65e>
 8010370:	e7d0      	b.n	8010314 <_dtoa_r+0x6c4>
 8010372:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010374:	2a00      	cmp	r2, #0
 8010376:	f000 80ca 	beq.w	801050e <_dtoa_r+0x8be>
 801037a:	9a07      	ldr	r2, [sp, #28]
 801037c:	2a01      	cmp	r2, #1
 801037e:	f300 80ad 	bgt.w	80104dc <_dtoa_r+0x88c>
 8010382:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8010384:	2a00      	cmp	r2, #0
 8010386:	f000 80a5 	beq.w	80104d4 <_dtoa_r+0x884>
 801038a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801038e:	9e08      	ldr	r6, [sp, #32]
 8010390:	9d05      	ldr	r5, [sp, #20]
 8010392:	9a05      	ldr	r2, [sp, #20]
 8010394:	441a      	add	r2, r3
 8010396:	9205      	str	r2, [sp, #20]
 8010398:	9a06      	ldr	r2, [sp, #24]
 801039a:	2101      	movs	r1, #1
 801039c:	441a      	add	r2, r3
 801039e:	4620      	mov	r0, r4
 80103a0:	9206      	str	r2, [sp, #24]
 80103a2:	f000 fc3d 	bl	8010c20 <__i2b>
 80103a6:	4607      	mov	r7, r0
 80103a8:	b165      	cbz	r5, 80103c4 <_dtoa_r+0x774>
 80103aa:	9b06      	ldr	r3, [sp, #24]
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	dd09      	ble.n	80103c4 <_dtoa_r+0x774>
 80103b0:	42ab      	cmp	r3, r5
 80103b2:	9a05      	ldr	r2, [sp, #20]
 80103b4:	bfa8      	it	ge
 80103b6:	462b      	movge	r3, r5
 80103b8:	1ad2      	subs	r2, r2, r3
 80103ba:	9205      	str	r2, [sp, #20]
 80103bc:	9a06      	ldr	r2, [sp, #24]
 80103be:	1aed      	subs	r5, r5, r3
 80103c0:	1ad3      	subs	r3, r2, r3
 80103c2:	9306      	str	r3, [sp, #24]
 80103c4:	9b08      	ldr	r3, [sp, #32]
 80103c6:	b1f3      	cbz	r3, 8010406 <_dtoa_r+0x7b6>
 80103c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80103ca:	2b00      	cmp	r3, #0
 80103cc:	f000 80a3 	beq.w	8010516 <_dtoa_r+0x8c6>
 80103d0:	2e00      	cmp	r6, #0
 80103d2:	dd10      	ble.n	80103f6 <_dtoa_r+0x7a6>
 80103d4:	4639      	mov	r1, r7
 80103d6:	4632      	mov	r2, r6
 80103d8:	4620      	mov	r0, r4
 80103da:	f000 fce1 	bl	8010da0 <__pow5mult>
 80103de:	4652      	mov	r2, sl
 80103e0:	4601      	mov	r1, r0
 80103e2:	4607      	mov	r7, r0
 80103e4:	4620      	mov	r0, r4
 80103e6:	f000 fc31 	bl	8010c4c <__multiply>
 80103ea:	4651      	mov	r1, sl
 80103ec:	4680      	mov	r8, r0
 80103ee:	4620      	mov	r0, r4
 80103f0:	f000 fb60 	bl	8010ab4 <_Bfree>
 80103f4:	46c2      	mov	sl, r8
 80103f6:	9b08      	ldr	r3, [sp, #32]
 80103f8:	1b9a      	subs	r2, r3, r6
 80103fa:	d004      	beq.n	8010406 <_dtoa_r+0x7b6>
 80103fc:	4651      	mov	r1, sl
 80103fe:	4620      	mov	r0, r4
 8010400:	f000 fcce 	bl	8010da0 <__pow5mult>
 8010404:	4682      	mov	sl, r0
 8010406:	2101      	movs	r1, #1
 8010408:	4620      	mov	r0, r4
 801040a:	f000 fc09 	bl	8010c20 <__i2b>
 801040e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010410:	2b00      	cmp	r3, #0
 8010412:	4606      	mov	r6, r0
 8010414:	f340 8081 	ble.w	801051a <_dtoa_r+0x8ca>
 8010418:	461a      	mov	r2, r3
 801041a:	4601      	mov	r1, r0
 801041c:	4620      	mov	r0, r4
 801041e:	f000 fcbf 	bl	8010da0 <__pow5mult>
 8010422:	9b07      	ldr	r3, [sp, #28]
 8010424:	2b01      	cmp	r3, #1
 8010426:	4606      	mov	r6, r0
 8010428:	dd7a      	ble.n	8010520 <_dtoa_r+0x8d0>
 801042a:	f04f 0800 	mov.w	r8, #0
 801042e:	6933      	ldr	r3, [r6, #16]
 8010430:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010434:	6918      	ldr	r0, [r3, #16]
 8010436:	f000 fba5 	bl	8010b84 <__hi0bits>
 801043a:	f1c0 0020 	rsb	r0, r0, #32
 801043e:	9b06      	ldr	r3, [sp, #24]
 8010440:	4418      	add	r0, r3
 8010442:	f010 001f 	ands.w	r0, r0, #31
 8010446:	f000 8094 	beq.w	8010572 <_dtoa_r+0x922>
 801044a:	f1c0 0320 	rsb	r3, r0, #32
 801044e:	2b04      	cmp	r3, #4
 8010450:	f340 8085 	ble.w	801055e <_dtoa_r+0x90e>
 8010454:	9b05      	ldr	r3, [sp, #20]
 8010456:	f1c0 001c 	rsb	r0, r0, #28
 801045a:	4403      	add	r3, r0
 801045c:	9305      	str	r3, [sp, #20]
 801045e:	9b06      	ldr	r3, [sp, #24]
 8010460:	4403      	add	r3, r0
 8010462:	4405      	add	r5, r0
 8010464:	9306      	str	r3, [sp, #24]
 8010466:	9b05      	ldr	r3, [sp, #20]
 8010468:	2b00      	cmp	r3, #0
 801046a:	dd05      	ble.n	8010478 <_dtoa_r+0x828>
 801046c:	4651      	mov	r1, sl
 801046e:	461a      	mov	r2, r3
 8010470:	4620      	mov	r0, r4
 8010472:	f000 fcef 	bl	8010e54 <__lshift>
 8010476:	4682      	mov	sl, r0
 8010478:	9b06      	ldr	r3, [sp, #24]
 801047a:	2b00      	cmp	r3, #0
 801047c:	dd05      	ble.n	801048a <_dtoa_r+0x83a>
 801047e:	4631      	mov	r1, r6
 8010480:	461a      	mov	r2, r3
 8010482:	4620      	mov	r0, r4
 8010484:	f000 fce6 	bl	8010e54 <__lshift>
 8010488:	4606      	mov	r6, r0
 801048a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801048c:	2b00      	cmp	r3, #0
 801048e:	d072      	beq.n	8010576 <_dtoa_r+0x926>
 8010490:	4631      	mov	r1, r6
 8010492:	4650      	mov	r0, sl
 8010494:	f000 fd4a 	bl	8010f2c <__mcmp>
 8010498:	2800      	cmp	r0, #0
 801049a:	da6c      	bge.n	8010576 <_dtoa_r+0x926>
 801049c:	2300      	movs	r3, #0
 801049e:	4651      	mov	r1, sl
 80104a0:	220a      	movs	r2, #10
 80104a2:	4620      	mov	r0, r4
 80104a4:	f000 fb28 	bl	8010af8 <__multadd>
 80104a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80104aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80104ae:	4682      	mov	sl, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	f000 81b0 	beq.w	8010816 <_dtoa_r+0xbc6>
 80104b6:	2300      	movs	r3, #0
 80104b8:	4639      	mov	r1, r7
 80104ba:	220a      	movs	r2, #10
 80104bc:	4620      	mov	r0, r4
 80104be:	f000 fb1b 	bl	8010af8 <__multadd>
 80104c2:	9b01      	ldr	r3, [sp, #4]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	4607      	mov	r7, r0
 80104c8:	f300 8096 	bgt.w	80105f8 <_dtoa_r+0x9a8>
 80104cc:	9b07      	ldr	r3, [sp, #28]
 80104ce:	2b02      	cmp	r3, #2
 80104d0:	dc59      	bgt.n	8010586 <_dtoa_r+0x936>
 80104d2:	e091      	b.n	80105f8 <_dtoa_r+0x9a8>
 80104d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80104d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80104da:	e758      	b.n	801038e <_dtoa_r+0x73e>
 80104dc:	9b04      	ldr	r3, [sp, #16]
 80104de:	1e5e      	subs	r6, r3, #1
 80104e0:	9b08      	ldr	r3, [sp, #32]
 80104e2:	42b3      	cmp	r3, r6
 80104e4:	bfbf      	itttt	lt
 80104e6:	9b08      	ldrlt	r3, [sp, #32]
 80104e8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80104ea:	9608      	strlt	r6, [sp, #32]
 80104ec:	1af3      	sublt	r3, r6, r3
 80104ee:	bfb4      	ite	lt
 80104f0:	18d2      	addlt	r2, r2, r3
 80104f2:	1b9e      	subge	r6, r3, r6
 80104f4:	9b04      	ldr	r3, [sp, #16]
 80104f6:	bfbc      	itt	lt
 80104f8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80104fa:	2600      	movlt	r6, #0
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	bfb7      	itett	lt
 8010500:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8010504:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8010508:	1a9d      	sublt	r5, r3, r2
 801050a:	2300      	movlt	r3, #0
 801050c:	e741      	b.n	8010392 <_dtoa_r+0x742>
 801050e:	9e08      	ldr	r6, [sp, #32]
 8010510:	9d05      	ldr	r5, [sp, #20]
 8010512:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8010514:	e748      	b.n	80103a8 <_dtoa_r+0x758>
 8010516:	9a08      	ldr	r2, [sp, #32]
 8010518:	e770      	b.n	80103fc <_dtoa_r+0x7ac>
 801051a:	9b07      	ldr	r3, [sp, #28]
 801051c:	2b01      	cmp	r3, #1
 801051e:	dc19      	bgt.n	8010554 <_dtoa_r+0x904>
 8010520:	9b02      	ldr	r3, [sp, #8]
 8010522:	b9bb      	cbnz	r3, 8010554 <_dtoa_r+0x904>
 8010524:	9b03      	ldr	r3, [sp, #12]
 8010526:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801052a:	b99b      	cbnz	r3, 8010554 <_dtoa_r+0x904>
 801052c:	9b03      	ldr	r3, [sp, #12]
 801052e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8010532:	0d1b      	lsrs	r3, r3, #20
 8010534:	051b      	lsls	r3, r3, #20
 8010536:	b183      	cbz	r3, 801055a <_dtoa_r+0x90a>
 8010538:	9b05      	ldr	r3, [sp, #20]
 801053a:	3301      	adds	r3, #1
 801053c:	9305      	str	r3, [sp, #20]
 801053e:	9b06      	ldr	r3, [sp, #24]
 8010540:	3301      	adds	r3, #1
 8010542:	9306      	str	r3, [sp, #24]
 8010544:	f04f 0801 	mov.w	r8, #1
 8010548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801054a:	2b00      	cmp	r3, #0
 801054c:	f47f af6f 	bne.w	801042e <_dtoa_r+0x7de>
 8010550:	2001      	movs	r0, #1
 8010552:	e774      	b.n	801043e <_dtoa_r+0x7ee>
 8010554:	f04f 0800 	mov.w	r8, #0
 8010558:	e7f6      	b.n	8010548 <_dtoa_r+0x8f8>
 801055a:	4698      	mov	r8, r3
 801055c:	e7f4      	b.n	8010548 <_dtoa_r+0x8f8>
 801055e:	d082      	beq.n	8010466 <_dtoa_r+0x816>
 8010560:	9a05      	ldr	r2, [sp, #20]
 8010562:	331c      	adds	r3, #28
 8010564:	441a      	add	r2, r3
 8010566:	9205      	str	r2, [sp, #20]
 8010568:	9a06      	ldr	r2, [sp, #24]
 801056a:	441a      	add	r2, r3
 801056c:	441d      	add	r5, r3
 801056e:	9206      	str	r2, [sp, #24]
 8010570:	e779      	b.n	8010466 <_dtoa_r+0x816>
 8010572:	4603      	mov	r3, r0
 8010574:	e7f4      	b.n	8010560 <_dtoa_r+0x910>
 8010576:	9b04      	ldr	r3, [sp, #16]
 8010578:	2b00      	cmp	r3, #0
 801057a:	dc37      	bgt.n	80105ec <_dtoa_r+0x99c>
 801057c:	9b07      	ldr	r3, [sp, #28]
 801057e:	2b02      	cmp	r3, #2
 8010580:	dd34      	ble.n	80105ec <_dtoa_r+0x99c>
 8010582:	9b04      	ldr	r3, [sp, #16]
 8010584:	9301      	str	r3, [sp, #4]
 8010586:	9b01      	ldr	r3, [sp, #4]
 8010588:	b963      	cbnz	r3, 80105a4 <_dtoa_r+0x954>
 801058a:	4631      	mov	r1, r6
 801058c:	2205      	movs	r2, #5
 801058e:	4620      	mov	r0, r4
 8010590:	f000 fab2 	bl	8010af8 <__multadd>
 8010594:	4601      	mov	r1, r0
 8010596:	4606      	mov	r6, r0
 8010598:	4650      	mov	r0, sl
 801059a:	f000 fcc7 	bl	8010f2c <__mcmp>
 801059e:	2800      	cmp	r0, #0
 80105a0:	f73f adbb 	bgt.w	801011a <_dtoa_r+0x4ca>
 80105a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80105a6:	9d00      	ldr	r5, [sp, #0]
 80105a8:	ea6f 0b03 	mvn.w	fp, r3
 80105ac:	f04f 0800 	mov.w	r8, #0
 80105b0:	4631      	mov	r1, r6
 80105b2:	4620      	mov	r0, r4
 80105b4:	f000 fa7e 	bl	8010ab4 <_Bfree>
 80105b8:	2f00      	cmp	r7, #0
 80105ba:	f43f aeab 	beq.w	8010314 <_dtoa_r+0x6c4>
 80105be:	f1b8 0f00 	cmp.w	r8, #0
 80105c2:	d005      	beq.n	80105d0 <_dtoa_r+0x980>
 80105c4:	45b8      	cmp	r8, r7
 80105c6:	d003      	beq.n	80105d0 <_dtoa_r+0x980>
 80105c8:	4641      	mov	r1, r8
 80105ca:	4620      	mov	r0, r4
 80105cc:	f000 fa72 	bl	8010ab4 <_Bfree>
 80105d0:	4639      	mov	r1, r7
 80105d2:	4620      	mov	r0, r4
 80105d4:	f000 fa6e 	bl	8010ab4 <_Bfree>
 80105d8:	e69c      	b.n	8010314 <_dtoa_r+0x6c4>
 80105da:	2600      	movs	r6, #0
 80105dc:	4637      	mov	r7, r6
 80105de:	e7e1      	b.n	80105a4 <_dtoa_r+0x954>
 80105e0:	46bb      	mov	fp, r7
 80105e2:	4637      	mov	r7, r6
 80105e4:	e599      	b.n	801011a <_dtoa_r+0x4ca>
 80105e6:	bf00      	nop
 80105e8:	40240000 	.word	0x40240000
 80105ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f000 80c8 	beq.w	8010784 <_dtoa_r+0xb34>
 80105f4:	9b04      	ldr	r3, [sp, #16]
 80105f6:	9301      	str	r3, [sp, #4]
 80105f8:	2d00      	cmp	r5, #0
 80105fa:	dd05      	ble.n	8010608 <_dtoa_r+0x9b8>
 80105fc:	4639      	mov	r1, r7
 80105fe:	462a      	mov	r2, r5
 8010600:	4620      	mov	r0, r4
 8010602:	f000 fc27 	bl	8010e54 <__lshift>
 8010606:	4607      	mov	r7, r0
 8010608:	f1b8 0f00 	cmp.w	r8, #0
 801060c:	d05b      	beq.n	80106c6 <_dtoa_r+0xa76>
 801060e:	6879      	ldr	r1, [r7, #4]
 8010610:	4620      	mov	r0, r4
 8010612:	f000 fa0f 	bl	8010a34 <_Balloc>
 8010616:	4605      	mov	r5, r0
 8010618:	b928      	cbnz	r0, 8010626 <_dtoa_r+0x9d6>
 801061a:	4b83      	ldr	r3, [pc, #524]	; (8010828 <_dtoa_r+0xbd8>)
 801061c:	4602      	mov	r2, r0
 801061e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8010622:	f7ff bb2e 	b.w	800fc82 <_dtoa_r+0x32>
 8010626:	693a      	ldr	r2, [r7, #16]
 8010628:	3202      	adds	r2, #2
 801062a:	0092      	lsls	r2, r2, #2
 801062c:	f107 010c 	add.w	r1, r7, #12
 8010630:	300c      	adds	r0, #12
 8010632:	f7ff fa76 	bl	800fb22 <memcpy>
 8010636:	2201      	movs	r2, #1
 8010638:	4629      	mov	r1, r5
 801063a:	4620      	mov	r0, r4
 801063c:	f000 fc0a 	bl	8010e54 <__lshift>
 8010640:	9b00      	ldr	r3, [sp, #0]
 8010642:	3301      	adds	r3, #1
 8010644:	9304      	str	r3, [sp, #16]
 8010646:	e9dd 2300 	ldrd	r2, r3, [sp]
 801064a:	4413      	add	r3, r2
 801064c:	9308      	str	r3, [sp, #32]
 801064e:	9b02      	ldr	r3, [sp, #8]
 8010650:	f003 0301 	and.w	r3, r3, #1
 8010654:	46b8      	mov	r8, r7
 8010656:	9306      	str	r3, [sp, #24]
 8010658:	4607      	mov	r7, r0
 801065a:	9b04      	ldr	r3, [sp, #16]
 801065c:	4631      	mov	r1, r6
 801065e:	3b01      	subs	r3, #1
 8010660:	4650      	mov	r0, sl
 8010662:	9301      	str	r3, [sp, #4]
 8010664:	f7ff fa6b 	bl	800fb3e <quorem>
 8010668:	4641      	mov	r1, r8
 801066a:	9002      	str	r0, [sp, #8]
 801066c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010670:	4650      	mov	r0, sl
 8010672:	f000 fc5b 	bl	8010f2c <__mcmp>
 8010676:	463a      	mov	r2, r7
 8010678:	9005      	str	r0, [sp, #20]
 801067a:	4631      	mov	r1, r6
 801067c:	4620      	mov	r0, r4
 801067e:	f000 fc71 	bl	8010f64 <__mdiff>
 8010682:	68c2      	ldr	r2, [r0, #12]
 8010684:	4605      	mov	r5, r0
 8010686:	bb02      	cbnz	r2, 80106ca <_dtoa_r+0xa7a>
 8010688:	4601      	mov	r1, r0
 801068a:	4650      	mov	r0, sl
 801068c:	f000 fc4e 	bl	8010f2c <__mcmp>
 8010690:	4602      	mov	r2, r0
 8010692:	4629      	mov	r1, r5
 8010694:	4620      	mov	r0, r4
 8010696:	9209      	str	r2, [sp, #36]	; 0x24
 8010698:	f000 fa0c 	bl	8010ab4 <_Bfree>
 801069c:	9b07      	ldr	r3, [sp, #28]
 801069e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106a0:	9d04      	ldr	r5, [sp, #16]
 80106a2:	ea43 0102 	orr.w	r1, r3, r2
 80106a6:	9b06      	ldr	r3, [sp, #24]
 80106a8:	4319      	orrs	r1, r3
 80106aa:	d110      	bne.n	80106ce <_dtoa_r+0xa7e>
 80106ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80106b0:	d029      	beq.n	8010706 <_dtoa_r+0xab6>
 80106b2:	9b05      	ldr	r3, [sp, #20]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	dd02      	ble.n	80106be <_dtoa_r+0xa6e>
 80106b8:	9b02      	ldr	r3, [sp, #8]
 80106ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80106be:	9b01      	ldr	r3, [sp, #4]
 80106c0:	f883 9000 	strb.w	r9, [r3]
 80106c4:	e774      	b.n	80105b0 <_dtoa_r+0x960>
 80106c6:	4638      	mov	r0, r7
 80106c8:	e7ba      	b.n	8010640 <_dtoa_r+0x9f0>
 80106ca:	2201      	movs	r2, #1
 80106cc:	e7e1      	b.n	8010692 <_dtoa_r+0xa42>
 80106ce:	9b05      	ldr	r3, [sp, #20]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	db04      	blt.n	80106de <_dtoa_r+0xa8e>
 80106d4:	9907      	ldr	r1, [sp, #28]
 80106d6:	430b      	orrs	r3, r1
 80106d8:	9906      	ldr	r1, [sp, #24]
 80106da:	430b      	orrs	r3, r1
 80106dc:	d120      	bne.n	8010720 <_dtoa_r+0xad0>
 80106de:	2a00      	cmp	r2, #0
 80106e0:	dded      	ble.n	80106be <_dtoa_r+0xa6e>
 80106e2:	4651      	mov	r1, sl
 80106e4:	2201      	movs	r2, #1
 80106e6:	4620      	mov	r0, r4
 80106e8:	f000 fbb4 	bl	8010e54 <__lshift>
 80106ec:	4631      	mov	r1, r6
 80106ee:	4682      	mov	sl, r0
 80106f0:	f000 fc1c 	bl	8010f2c <__mcmp>
 80106f4:	2800      	cmp	r0, #0
 80106f6:	dc03      	bgt.n	8010700 <_dtoa_r+0xab0>
 80106f8:	d1e1      	bne.n	80106be <_dtoa_r+0xa6e>
 80106fa:	f019 0f01 	tst.w	r9, #1
 80106fe:	d0de      	beq.n	80106be <_dtoa_r+0xa6e>
 8010700:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010704:	d1d8      	bne.n	80106b8 <_dtoa_r+0xa68>
 8010706:	9a01      	ldr	r2, [sp, #4]
 8010708:	2339      	movs	r3, #57	; 0x39
 801070a:	7013      	strb	r3, [r2, #0]
 801070c:	462b      	mov	r3, r5
 801070e:	461d      	mov	r5, r3
 8010710:	3b01      	subs	r3, #1
 8010712:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8010716:	2a39      	cmp	r2, #57	; 0x39
 8010718:	d06c      	beq.n	80107f4 <_dtoa_r+0xba4>
 801071a:	3201      	adds	r2, #1
 801071c:	701a      	strb	r2, [r3, #0]
 801071e:	e747      	b.n	80105b0 <_dtoa_r+0x960>
 8010720:	2a00      	cmp	r2, #0
 8010722:	dd07      	ble.n	8010734 <_dtoa_r+0xae4>
 8010724:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8010728:	d0ed      	beq.n	8010706 <_dtoa_r+0xab6>
 801072a:	9a01      	ldr	r2, [sp, #4]
 801072c:	f109 0301 	add.w	r3, r9, #1
 8010730:	7013      	strb	r3, [r2, #0]
 8010732:	e73d      	b.n	80105b0 <_dtoa_r+0x960>
 8010734:	9b04      	ldr	r3, [sp, #16]
 8010736:	9a08      	ldr	r2, [sp, #32]
 8010738:	f803 9c01 	strb.w	r9, [r3, #-1]
 801073c:	4293      	cmp	r3, r2
 801073e:	d043      	beq.n	80107c8 <_dtoa_r+0xb78>
 8010740:	4651      	mov	r1, sl
 8010742:	2300      	movs	r3, #0
 8010744:	220a      	movs	r2, #10
 8010746:	4620      	mov	r0, r4
 8010748:	f000 f9d6 	bl	8010af8 <__multadd>
 801074c:	45b8      	cmp	r8, r7
 801074e:	4682      	mov	sl, r0
 8010750:	f04f 0300 	mov.w	r3, #0
 8010754:	f04f 020a 	mov.w	r2, #10
 8010758:	4641      	mov	r1, r8
 801075a:	4620      	mov	r0, r4
 801075c:	d107      	bne.n	801076e <_dtoa_r+0xb1e>
 801075e:	f000 f9cb 	bl	8010af8 <__multadd>
 8010762:	4680      	mov	r8, r0
 8010764:	4607      	mov	r7, r0
 8010766:	9b04      	ldr	r3, [sp, #16]
 8010768:	3301      	adds	r3, #1
 801076a:	9304      	str	r3, [sp, #16]
 801076c:	e775      	b.n	801065a <_dtoa_r+0xa0a>
 801076e:	f000 f9c3 	bl	8010af8 <__multadd>
 8010772:	4639      	mov	r1, r7
 8010774:	4680      	mov	r8, r0
 8010776:	2300      	movs	r3, #0
 8010778:	220a      	movs	r2, #10
 801077a:	4620      	mov	r0, r4
 801077c:	f000 f9bc 	bl	8010af8 <__multadd>
 8010780:	4607      	mov	r7, r0
 8010782:	e7f0      	b.n	8010766 <_dtoa_r+0xb16>
 8010784:	9b04      	ldr	r3, [sp, #16]
 8010786:	9301      	str	r3, [sp, #4]
 8010788:	9d00      	ldr	r5, [sp, #0]
 801078a:	4631      	mov	r1, r6
 801078c:	4650      	mov	r0, sl
 801078e:	f7ff f9d6 	bl	800fb3e <quorem>
 8010792:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8010796:	9b00      	ldr	r3, [sp, #0]
 8010798:	f805 9b01 	strb.w	r9, [r5], #1
 801079c:	1aea      	subs	r2, r5, r3
 801079e:	9b01      	ldr	r3, [sp, #4]
 80107a0:	4293      	cmp	r3, r2
 80107a2:	dd07      	ble.n	80107b4 <_dtoa_r+0xb64>
 80107a4:	4651      	mov	r1, sl
 80107a6:	2300      	movs	r3, #0
 80107a8:	220a      	movs	r2, #10
 80107aa:	4620      	mov	r0, r4
 80107ac:	f000 f9a4 	bl	8010af8 <__multadd>
 80107b0:	4682      	mov	sl, r0
 80107b2:	e7ea      	b.n	801078a <_dtoa_r+0xb3a>
 80107b4:	9b01      	ldr	r3, [sp, #4]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	bfc8      	it	gt
 80107ba:	461d      	movgt	r5, r3
 80107bc:	9b00      	ldr	r3, [sp, #0]
 80107be:	bfd8      	it	le
 80107c0:	2501      	movle	r5, #1
 80107c2:	441d      	add	r5, r3
 80107c4:	f04f 0800 	mov.w	r8, #0
 80107c8:	4651      	mov	r1, sl
 80107ca:	2201      	movs	r2, #1
 80107cc:	4620      	mov	r0, r4
 80107ce:	f000 fb41 	bl	8010e54 <__lshift>
 80107d2:	4631      	mov	r1, r6
 80107d4:	4682      	mov	sl, r0
 80107d6:	f000 fba9 	bl	8010f2c <__mcmp>
 80107da:	2800      	cmp	r0, #0
 80107dc:	dc96      	bgt.n	801070c <_dtoa_r+0xabc>
 80107de:	d102      	bne.n	80107e6 <_dtoa_r+0xb96>
 80107e0:	f019 0f01 	tst.w	r9, #1
 80107e4:	d192      	bne.n	801070c <_dtoa_r+0xabc>
 80107e6:	462b      	mov	r3, r5
 80107e8:	461d      	mov	r5, r3
 80107ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80107ee:	2a30      	cmp	r2, #48	; 0x30
 80107f0:	d0fa      	beq.n	80107e8 <_dtoa_r+0xb98>
 80107f2:	e6dd      	b.n	80105b0 <_dtoa_r+0x960>
 80107f4:	9a00      	ldr	r2, [sp, #0]
 80107f6:	429a      	cmp	r2, r3
 80107f8:	d189      	bne.n	801070e <_dtoa_r+0xabe>
 80107fa:	f10b 0b01 	add.w	fp, fp, #1
 80107fe:	2331      	movs	r3, #49	; 0x31
 8010800:	e796      	b.n	8010730 <_dtoa_r+0xae0>
 8010802:	4b0a      	ldr	r3, [pc, #40]	; (801082c <_dtoa_r+0xbdc>)
 8010804:	f7ff ba99 	b.w	800fd3a <_dtoa_r+0xea>
 8010808:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801080a:	2b00      	cmp	r3, #0
 801080c:	f47f aa6d 	bne.w	800fcea <_dtoa_r+0x9a>
 8010810:	4b07      	ldr	r3, [pc, #28]	; (8010830 <_dtoa_r+0xbe0>)
 8010812:	f7ff ba92 	b.w	800fd3a <_dtoa_r+0xea>
 8010816:	9b01      	ldr	r3, [sp, #4]
 8010818:	2b00      	cmp	r3, #0
 801081a:	dcb5      	bgt.n	8010788 <_dtoa_r+0xb38>
 801081c:	9b07      	ldr	r3, [sp, #28]
 801081e:	2b02      	cmp	r3, #2
 8010820:	f73f aeb1 	bgt.w	8010586 <_dtoa_r+0x936>
 8010824:	e7b0      	b.n	8010788 <_dtoa_r+0xb38>
 8010826:	bf00      	nop
 8010828:	08013120 	.word	0x08013120
 801082c:	08013080 	.word	0x08013080
 8010830:	080130a4 	.word	0x080130a4

08010834 <_free_r>:
 8010834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010836:	2900      	cmp	r1, #0
 8010838:	d044      	beq.n	80108c4 <_free_r+0x90>
 801083a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801083e:	9001      	str	r0, [sp, #4]
 8010840:	2b00      	cmp	r3, #0
 8010842:	f1a1 0404 	sub.w	r4, r1, #4
 8010846:	bfb8      	it	lt
 8010848:	18e4      	addlt	r4, r4, r3
 801084a:	f000 f8e7 	bl	8010a1c <__malloc_lock>
 801084e:	4a1e      	ldr	r2, [pc, #120]	; (80108c8 <_free_r+0x94>)
 8010850:	9801      	ldr	r0, [sp, #4]
 8010852:	6813      	ldr	r3, [r2, #0]
 8010854:	b933      	cbnz	r3, 8010864 <_free_r+0x30>
 8010856:	6063      	str	r3, [r4, #4]
 8010858:	6014      	str	r4, [r2, #0]
 801085a:	b003      	add	sp, #12
 801085c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010860:	f000 b8e2 	b.w	8010a28 <__malloc_unlock>
 8010864:	42a3      	cmp	r3, r4
 8010866:	d908      	bls.n	801087a <_free_r+0x46>
 8010868:	6825      	ldr	r5, [r4, #0]
 801086a:	1961      	adds	r1, r4, r5
 801086c:	428b      	cmp	r3, r1
 801086e:	bf01      	itttt	eq
 8010870:	6819      	ldreq	r1, [r3, #0]
 8010872:	685b      	ldreq	r3, [r3, #4]
 8010874:	1949      	addeq	r1, r1, r5
 8010876:	6021      	streq	r1, [r4, #0]
 8010878:	e7ed      	b.n	8010856 <_free_r+0x22>
 801087a:	461a      	mov	r2, r3
 801087c:	685b      	ldr	r3, [r3, #4]
 801087e:	b10b      	cbz	r3, 8010884 <_free_r+0x50>
 8010880:	42a3      	cmp	r3, r4
 8010882:	d9fa      	bls.n	801087a <_free_r+0x46>
 8010884:	6811      	ldr	r1, [r2, #0]
 8010886:	1855      	adds	r5, r2, r1
 8010888:	42a5      	cmp	r5, r4
 801088a:	d10b      	bne.n	80108a4 <_free_r+0x70>
 801088c:	6824      	ldr	r4, [r4, #0]
 801088e:	4421      	add	r1, r4
 8010890:	1854      	adds	r4, r2, r1
 8010892:	42a3      	cmp	r3, r4
 8010894:	6011      	str	r1, [r2, #0]
 8010896:	d1e0      	bne.n	801085a <_free_r+0x26>
 8010898:	681c      	ldr	r4, [r3, #0]
 801089a:	685b      	ldr	r3, [r3, #4]
 801089c:	6053      	str	r3, [r2, #4]
 801089e:	440c      	add	r4, r1
 80108a0:	6014      	str	r4, [r2, #0]
 80108a2:	e7da      	b.n	801085a <_free_r+0x26>
 80108a4:	d902      	bls.n	80108ac <_free_r+0x78>
 80108a6:	230c      	movs	r3, #12
 80108a8:	6003      	str	r3, [r0, #0]
 80108aa:	e7d6      	b.n	801085a <_free_r+0x26>
 80108ac:	6825      	ldr	r5, [r4, #0]
 80108ae:	1961      	adds	r1, r4, r5
 80108b0:	428b      	cmp	r3, r1
 80108b2:	bf04      	itt	eq
 80108b4:	6819      	ldreq	r1, [r3, #0]
 80108b6:	685b      	ldreq	r3, [r3, #4]
 80108b8:	6063      	str	r3, [r4, #4]
 80108ba:	bf04      	itt	eq
 80108bc:	1949      	addeq	r1, r1, r5
 80108be:	6021      	streq	r1, [r4, #0]
 80108c0:	6054      	str	r4, [r2, #4]
 80108c2:	e7ca      	b.n	801085a <_free_r+0x26>
 80108c4:	b003      	add	sp, #12
 80108c6:	bd30      	pop	{r4, r5, pc}
 80108c8:	20001a44 	.word	0x20001a44

080108cc <malloc>:
 80108cc:	4b02      	ldr	r3, [pc, #8]	; (80108d8 <malloc+0xc>)
 80108ce:	4601      	mov	r1, r0
 80108d0:	6818      	ldr	r0, [r3, #0]
 80108d2:	f000 b823 	b.w	801091c <_malloc_r>
 80108d6:	bf00      	nop
 80108d8:	200000a4 	.word	0x200000a4

080108dc <sbrk_aligned>:
 80108dc:	b570      	push	{r4, r5, r6, lr}
 80108de:	4e0e      	ldr	r6, [pc, #56]	; (8010918 <sbrk_aligned+0x3c>)
 80108e0:	460c      	mov	r4, r1
 80108e2:	6831      	ldr	r1, [r6, #0]
 80108e4:	4605      	mov	r5, r0
 80108e6:	b911      	cbnz	r1, 80108ee <sbrk_aligned+0x12>
 80108e8:	f000 feca 	bl	8011680 <_sbrk_r>
 80108ec:	6030      	str	r0, [r6, #0]
 80108ee:	4621      	mov	r1, r4
 80108f0:	4628      	mov	r0, r5
 80108f2:	f000 fec5 	bl	8011680 <_sbrk_r>
 80108f6:	1c43      	adds	r3, r0, #1
 80108f8:	d00a      	beq.n	8010910 <sbrk_aligned+0x34>
 80108fa:	1cc4      	adds	r4, r0, #3
 80108fc:	f024 0403 	bic.w	r4, r4, #3
 8010900:	42a0      	cmp	r0, r4
 8010902:	d007      	beq.n	8010914 <sbrk_aligned+0x38>
 8010904:	1a21      	subs	r1, r4, r0
 8010906:	4628      	mov	r0, r5
 8010908:	f000 feba 	bl	8011680 <_sbrk_r>
 801090c:	3001      	adds	r0, #1
 801090e:	d101      	bne.n	8010914 <sbrk_aligned+0x38>
 8010910:	f04f 34ff 	mov.w	r4, #4294967295
 8010914:	4620      	mov	r0, r4
 8010916:	bd70      	pop	{r4, r5, r6, pc}
 8010918:	20001a48 	.word	0x20001a48

0801091c <_malloc_r>:
 801091c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010920:	1ccd      	adds	r5, r1, #3
 8010922:	f025 0503 	bic.w	r5, r5, #3
 8010926:	3508      	adds	r5, #8
 8010928:	2d0c      	cmp	r5, #12
 801092a:	bf38      	it	cc
 801092c:	250c      	movcc	r5, #12
 801092e:	2d00      	cmp	r5, #0
 8010930:	4607      	mov	r7, r0
 8010932:	db01      	blt.n	8010938 <_malloc_r+0x1c>
 8010934:	42a9      	cmp	r1, r5
 8010936:	d905      	bls.n	8010944 <_malloc_r+0x28>
 8010938:	230c      	movs	r3, #12
 801093a:	603b      	str	r3, [r7, #0]
 801093c:	2600      	movs	r6, #0
 801093e:	4630      	mov	r0, r6
 8010940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010944:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010a18 <_malloc_r+0xfc>
 8010948:	f000 f868 	bl	8010a1c <__malloc_lock>
 801094c:	f8d8 3000 	ldr.w	r3, [r8]
 8010950:	461c      	mov	r4, r3
 8010952:	bb5c      	cbnz	r4, 80109ac <_malloc_r+0x90>
 8010954:	4629      	mov	r1, r5
 8010956:	4638      	mov	r0, r7
 8010958:	f7ff ffc0 	bl	80108dc <sbrk_aligned>
 801095c:	1c43      	adds	r3, r0, #1
 801095e:	4604      	mov	r4, r0
 8010960:	d155      	bne.n	8010a0e <_malloc_r+0xf2>
 8010962:	f8d8 4000 	ldr.w	r4, [r8]
 8010966:	4626      	mov	r6, r4
 8010968:	2e00      	cmp	r6, #0
 801096a:	d145      	bne.n	80109f8 <_malloc_r+0xdc>
 801096c:	2c00      	cmp	r4, #0
 801096e:	d048      	beq.n	8010a02 <_malloc_r+0xe6>
 8010970:	6823      	ldr	r3, [r4, #0]
 8010972:	4631      	mov	r1, r6
 8010974:	4638      	mov	r0, r7
 8010976:	eb04 0903 	add.w	r9, r4, r3
 801097a:	f000 fe81 	bl	8011680 <_sbrk_r>
 801097e:	4581      	cmp	r9, r0
 8010980:	d13f      	bne.n	8010a02 <_malloc_r+0xe6>
 8010982:	6821      	ldr	r1, [r4, #0]
 8010984:	1a6d      	subs	r5, r5, r1
 8010986:	4629      	mov	r1, r5
 8010988:	4638      	mov	r0, r7
 801098a:	f7ff ffa7 	bl	80108dc <sbrk_aligned>
 801098e:	3001      	adds	r0, #1
 8010990:	d037      	beq.n	8010a02 <_malloc_r+0xe6>
 8010992:	6823      	ldr	r3, [r4, #0]
 8010994:	442b      	add	r3, r5
 8010996:	6023      	str	r3, [r4, #0]
 8010998:	f8d8 3000 	ldr.w	r3, [r8]
 801099c:	2b00      	cmp	r3, #0
 801099e:	d038      	beq.n	8010a12 <_malloc_r+0xf6>
 80109a0:	685a      	ldr	r2, [r3, #4]
 80109a2:	42a2      	cmp	r2, r4
 80109a4:	d12b      	bne.n	80109fe <_malloc_r+0xe2>
 80109a6:	2200      	movs	r2, #0
 80109a8:	605a      	str	r2, [r3, #4]
 80109aa:	e00f      	b.n	80109cc <_malloc_r+0xb0>
 80109ac:	6822      	ldr	r2, [r4, #0]
 80109ae:	1b52      	subs	r2, r2, r5
 80109b0:	d41f      	bmi.n	80109f2 <_malloc_r+0xd6>
 80109b2:	2a0b      	cmp	r2, #11
 80109b4:	d917      	bls.n	80109e6 <_malloc_r+0xca>
 80109b6:	1961      	adds	r1, r4, r5
 80109b8:	42a3      	cmp	r3, r4
 80109ba:	6025      	str	r5, [r4, #0]
 80109bc:	bf18      	it	ne
 80109be:	6059      	strne	r1, [r3, #4]
 80109c0:	6863      	ldr	r3, [r4, #4]
 80109c2:	bf08      	it	eq
 80109c4:	f8c8 1000 	streq.w	r1, [r8]
 80109c8:	5162      	str	r2, [r4, r5]
 80109ca:	604b      	str	r3, [r1, #4]
 80109cc:	4638      	mov	r0, r7
 80109ce:	f104 060b 	add.w	r6, r4, #11
 80109d2:	f000 f829 	bl	8010a28 <__malloc_unlock>
 80109d6:	f026 0607 	bic.w	r6, r6, #7
 80109da:	1d23      	adds	r3, r4, #4
 80109dc:	1af2      	subs	r2, r6, r3
 80109de:	d0ae      	beq.n	801093e <_malloc_r+0x22>
 80109e0:	1b9b      	subs	r3, r3, r6
 80109e2:	50a3      	str	r3, [r4, r2]
 80109e4:	e7ab      	b.n	801093e <_malloc_r+0x22>
 80109e6:	42a3      	cmp	r3, r4
 80109e8:	6862      	ldr	r2, [r4, #4]
 80109ea:	d1dd      	bne.n	80109a8 <_malloc_r+0x8c>
 80109ec:	f8c8 2000 	str.w	r2, [r8]
 80109f0:	e7ec      	b.n	80109cc <_malloc_r+0xb0>
 80109f2:	4623      	mov	r3, r4
 80109f4:	6864      	ldr	r4, [r4, #4]
 80109f6:	e7ac      	b.n	8010952 <_malloc_r+0x36>
 80109f8:	4634      	mov	r4, r6
 80109fa:	6876      	ldr	r6, [r6, #4]
 80109fc:	e7b4      	b.n	8010968 <_malloc_r+0x4c>
 80109fe:	4613      	mov	r3, r2
 8010a00:	e7cc      	b.n	801099c <_malloc_r+0x80>
 8010a02:	230c      	movs	r3, #12
 8010a04:	603b      	str	r3, [r7, #0]
 8010a06:	4638      	mov	r0, r7
 8010a08:	f000 f80e 	bl	8010a28 <__malloc_unlock>
 8010a0c:	e797      	b.n	801093e <_malloc_r+0x22>
 8010a0e:	6025      	str	r5, [r4, #0]
 8010a10:	e7dc      	b.n	80109cc <_malloc_r+0xb0>
 8010a12:	605b      	str	r3, [r3, #4]
 8010a14:	deff      	udf	#255	; 0xff
 8010a16:	bf00      	nop
 8010a18:	20001a44 	.word	0x20001a44

08010a1c <__malloc_lock>:
 8010a1c:	4801      	ldr	r0, [pc, #4]	; (8010a24 <__malloc_lock+0x8>)
 8010a1e:	f7ff b87e 	b.w	800fb1e <__retarget_lock_acquire_recursive>
 8010a22:	bf00      	nop
 8010a24:	20001a40 	.word	0x20001a40

08010a28 <__malloc_unlock>:
 8010a28:	4801      	ldr	r0, [pc, #4]	; (8010a30 <__malloc_unlock+0x8>)
 8010a2a:	f7ff b879 	b.w	800fb20 <__retarget_lock_release_recursive>
 8010a2e:	bf00      	nop
 8010a30:	20001a40 	.word	0x20001a40

08010a34 <_Balloc>:
 8010a34:	b570      	push	{r4, r5, r6, lr}
 8010a36:	69c6      	ldr	r6, [r0, #28]
 8010a38:	4604      	mov	r4, r0
 8010a3a:	460d      	mov	r5, r1
 8010a3c:	b976      	cbnz	r6, 8010a5c <_Balloc+0x28>
 8010a3e:	2010      	movs	r0, #16
 8010a40:	f7ff ff44 	bl	80108cc <malloc>
 8010a44:	4602      	mov	r2, r0
 8010a46:	61e0      	str	r0, [r4, #28]
 8010a48:	b920      	cbnz	r0, 8010a54 <_Balloc+0x20>
 8010a4a:	4b18      	ldr	r3, [pc, #96]	; (8010aac <_Balloc+0x78>)
 8010a4c:	4818      	ldr	r0, [pc, #96]	; (8010ab0 <_Balloc+0x7c>)
 8010a4e:	216b      	movs	r1, #107	; 0x6b
 8010a50:	f000 fe26 	bl	80116a0 <__assert_func>
 8010a54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010a58:	6006      	str	r6, [r0, #0]
 8010a5a:	60c6      	str	r6, [r0, #12]
 8010a5c:	69e6      	ldr	r6, [r4, #28]
 8010a5e:	68f3      	ldr	r3, [r6, #12]
 8010a60:	b183      	cbz	r3, 8010a84 <_Balloc+0x50>
 8010a62:	69e3      	ldr	r3, [r4, #28]
 8010a64:	68db      	ldr	r3, [r3, #12]
 8010a66:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010a6a:	b9b8      	cbnz	r0, 8010a9c <_Balloc+0x68>
 8010a6c:	2101      	movs	r1, #1
 8010a6e:	fa01 f605 	lsl.w	r6, r1, r5
 8010a72:	1d72      	adds	r2, r6, #5
 8010a74:	0092      	lsls	r2, r2, #2
 8010a76:	4620      	mov	r0, r4
 8010a78:	f000 fe30 	bl	80116dc <_calloc_r>
 8010a7c:	b160      	cbz	r0, 8010a98 <_Balloc+0x64>
 8010a7e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010a82:	e00e      	b.n	8010aa2 <_Balloc+0x6e>
 8010a84:	2221      	movs	r2, #33	; 0x21
 8010a86:	2104      	movs	r1, #4
 8010a88:	4620      	mov	r0, r4
 8010a8a:	f000 fe27 	bl	80116dc <_calloc_r>
 8010a8e:	69e3      	ldr	r3, [r4, #28]
 8010a90:	60f0      	str	r0, [r6, #12]
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d1e4      	bne.n	8010a62 <_Balloc+0x2e>
 8010a98:	2000      	movs	r0, #0
 8010a9a:	bd70      	pop	{r4, r5, r6, pc}
 8010a9c:	6802      	ldr	r2, [r0, #0]
 8010a9e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010aa2:	2300      	movs	r3, #0
 8010aa4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010aa8:	e7f7      	b.n	8010a9a <_Balloc+0x66>
 8010aaa:	bf00      	nop
 8010aac:	080130b1 	.word	0x080130b1
 8010ab0:	08013131 	.word	0x08013131

08010ab4 <_Bfree>:
 8010ab4:	b570      	push	{r4, r5, r6, lr}
 8010ab6:	69c6      	ldr	r6, [r0, #28]
 8010ab8:	4605      	mov	r5, r0
 8010aba:	460c      	mov	r4, r1
 8010abc:	b976      	cbnz	r6, 8010adc <_Bfree+0x28>
 8010abe:	2010      	movs	r0, #16
 8010ac0:	f7ff ff04 	bl	80108cc <malloc>
 8010ac4:	4602      	mov	r2, r0
 8010ac6:	61e8      	str	r0, [r5, #28]
 8010ac8:	b920      	cbnz	r0, 8010ad4 <_Bfree+0x20>
 8010aca:	4b09      	ldr	r3, [pc, #36]	; (8010af0 <_Bfree+0x3c>)
 8010acc:	4809      	ldr	r0, [pc, #36]	; (8010af4 <_Bfree+0x40>)
 8010ace:	218f      	movs	r1, #143	; 0x8f
 8010ad0:	f000 fde6 	bl	80116a0 <__assert_func>
 8010ad4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010ad8:	6006      	str	r6, [r0, #0]
 8010ada:	60c6      	str	r6, [r0, #12]
 8010adc:	b13c      	cbz	r4, 8010aee <_Bfree+0x3a>
 8010ade:	69eb      	ldr	r3, [r5, #28]
 8010ae0:	6862      	ldr	r2, [r4, #4]
 8010ae2:	68db      	ldr	r3, [r3, #12]
 8010ae4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010ae8:	6021      	str	r1, [r4, #0]
 8010aea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010aee:	bd70      	pop	{r4, r5, r6, pc}
 8010af0:	080130b1 	.word	0x080130b1
 8010af4:	08013131 	.word	0x08013131

08010af8 <__multadd>:
 8010af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010afc:	690d      	ldr	r5, [r1, #16]
 8010afe:	4607      	mov	r7, r0
 8010b00:	460c      	mov	r4, r1
 8010b02:	461e      	mov	r6, r3
 8010b04:	f101 0c14 	add.w	ip, r1, #20
 8010b08:	2000      	movs	r0, #0
 8010b0a:	f8dc 3000 	ldr.w	r3, [ip]
 8010b0e:	b299      	uxth	r1, r3
 8010b10:	fb02 6101 	mla	r1, r2, r1, r6
 8010b14:	0c1e      	lsrs	r6, r3, #16
 8010b16:	0c0b      	lsrs	r3, r1, #16
 8010b18:	fb02 3306 	mla	r3, r2, r6, r3
 8010b1c:	b289      	uxth	r1, r1
 8010b1e:	3001      	adds	r0, #1
 8010b20:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010b24:	4285      	cmp	r5, r0
 8010b26:	f84c 1b04 	str.w	r1, [ip], #4
 8010b2a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010b2e:	dcec      	bgt.n	8010b0a <__multadd+0x12>
 8010b30:	b30e      	cbz	r6, 8010b76 <__multadd+0x7e>
 8010b32:	68a3      	ldr	r3, [r4, #8]
 8010b34:	42ab      	cmp	r3, r5
 8010b36:	dc19      	bgt.n	8010b6c <__multadd+0x74>
 8010b38:	6861      	ldr	r1, [r4, #4]
 8010b3a:	4638      	mov	r0, r7
 8010b3c:	3101      	adds	r1, #1
 8010b3e:	f7ff ff79 	bl	8010a34 <_Balloc>
 8010b42:	4680      	mov	r8, r0
 8010b44:	b928      	cbnz	r0, 8010b52 <__multadd+0x5a>
 8010b46:	4602      	mov	r2, r0
 8010b48:	4b0c      	ldr	r3, [pc, #48]	; (8010b7c <__multadd+0x84>)
 8010b4a:	480d      	ldr	r0, [pc, #52]	; (8010b80 <__multadd+0x88>)
 8010b4c:	21ba      	movs	r1, #186	; 0xba
 8010b4e:	f000 fda7 	bl	80116a0 <__assert_func>
 8010b52:	6922      	ldr	r2, [r4, #16]
 8010b54:	3202      	adds	r2, #2
 8010b56:	f104 010c 	add.w	r1, r4, #12
 8010b5a:	0092      	lsls	r2, r2, #2
 8010b5c:	300c      	adds	r0, #12
 8010b5e:	f7fe ffe0 	bl	800fb22 <memcpy>
 8010b62:	4621      	mov	r1, r4
 8010b64:	4638      	mov	r0, r7
 8010b66:	f7ff ffa5 	bl	8010ab4 <_Bfree>
 8010b6a:	4644      	mov	r4, r8
 8010b6c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010b70:	3501      	adds	r5, #1
 8010b72:	615e      	str	r6, [r3, #20]
 8010b74:	6125      	str	r5, [r4, #16]
 8010b76:	4620      	mov	r0, r4
 8010b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b7c:	08013120 	.word	0x08013120
 8010b80:	08013131 	.word	0x08013131

08010b84 <__hi0bits>:
 8010b84:	0c03      	lsrs	r3, r0, #16
 8010b86:	041b      	lsls	r3, r3, #16
 8010b88:	b9d3      	cbnz	r3, 8010bc0 <__hi0bits+0x3c>
 8010b8a:	0400      	lsls	r0, r0, #16
 8010b8c:	2310      	movs	r3, #16
 8010b8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8010b92:	bf04      	itt	eq
 8010b94:	0200      	lsleq	r0, r0, #8
 8010b96:	3308      	addeq	r3, #8
 8010b98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010b9c:	bf04      	itt	eq
 8010b9e:	0100      	lsleq	r0, r0, #4
 8010ba0:	3304      	addeq	r3, #4
 8010ba2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010ba6:	bf04      	itt	eq
 8010ba8:	0080      	lsleq	r0, r0, #2
 8010baa:	3302      	addeq	r3, #2
 8010bac:	2800      	cmp	r0, #0
 8010bae:	db05      	blt.n	8010bbc <__hi0bits+0x38>
 8010bb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010bb4:	f103 0301 	add.w	r3, r3, #1
 8010bb8:	bf08      	it	eq
 8010bba:	2320      	moveq	r3, #32
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	4770      	bx	lr
 8010bc0:	2300      	movs	r3, #0
 8010bc2:	e7e4      	b.n	8010b8e <__hi0bits+0xa>

08010bc4 <__lo0bits>:
 8010bc4:	6803      	ldr	r3, [r0, #0]
 8010bc6:	f013 0207 	ands.w	r2, r3, #7
 8010bca:	d00c      	beq.n	8010be6 <__lo0bits+0x22>
 8010bcc:	07d9      	lsls	r1, r3, #31
 8010bce:	d422      	bmi.n	8010c16 <__lo0bits+0x52>
 8010bd0:	079a      	lsls	r2, r3, #30
 8010bd2:	bf49      	itett	mi
 8010bd4:	085b      	lsrmi	r3, r3, #1
 8010bd6:	089b      	lsrpl	r3, r3, #2
 8010bd8:	6003      	strmi	r3, [r0, #0]
 8010bda:	2201      	movmi	r2, #1
 8010bdc:	bf5c      	itt	pl
 8010bde:	6003      	strpl	r3, [r0, #0]
 8010be0:	2202      	movpl	r2, #2
 8010be2:	4610      	mov	r0, r2
 8010be4:	4770      	bx	lr
 8010be6:	b299      	uxth	r1, r3
 8010be8:	b909      	cbnz	r1, 8010bee <__lo0bits+0x2a>
 8010bea:	0c1b      	lsrs	r3, r3, #16
 8010bec:	2210      	movs	r2, #16
 8010bee:	b2d9      	uxtb	r1, r3
 8010bf0:	b909      	cbnz	r1, 8010bf6 <__lo0bits+0x32>
 8010bf2:	3208      	adds	r2, #8
 8010bf4:	0a1b      	lsrs	r3, r3, #8
 8010bf6:	0719      	lsls	r1, r3, #28
 8010bf8:	bf04      	itt	eq
 8010bfa:	091b      	lsreq	r3, r3, #4
 8010bfc:	3204      	addeq	r2, #4
 8010bfe:	0799      	lsls	r1, r3, #30
 8010c00:	bf04      	itt	eq
 8010c02:	089b      	lsreq	r3, r3, #2
 8010c04:	3202      	addeq	r2, #2
 8010c06:	07d9      	lsls	r1, r3, #31
 8010c08:	d403      	bmi.n	8010c12 <__lo0bits+0x4e>
 8010c0a:	085b      	lsrs	r3, r3, #1
 8010c0c:	f102 0201 	add.w	r2, r2, #1
 8010c10:	d003      	beq.n	8010c1a <__lo0bits+0x56>
 8010c12:	6003      	str	r3, [r0, #0]
 8010c14:	e7e5      	b.n	8010be2 <__lo0bits+0x1e>
 8010c16:	2200      	movs	r2, #0
 8010c18:	e7e3      	b.n	8010be2 <__lo0bits+0x1e>
 8010c1a:	2220      	movs	r2, #32
 8010c1c:	e7e1      	b.n	8010be2 <__lo0bits+0x1e>
	...

08010c20 <__i2b>:
 8010c20:	b510      	push	{r4, lr}
 8010c22:	460c      	mov	r4, r1
 8010c24:	2101      	movs	r1, #1
 8010c26:	f7ff ff05 	bl	8010a34 <_Balloc>
 8010c2a:	4602      	mov	r2, r0
 8010c2c:	b928      	cbnz	r0, 8010c3a <__i2b+0x1a>
 8010c2e:	4b05      	ldr	r3, [pc, #20]	; (8010c44 <__i2b+0x24>)
 8010c30:	4805      	ldr	r0, [pc, #20]	; (8010c48 <__i2b+0x28>)
 8010c32:	f240 1145 	movw	r1, #325	; 0x145
 8010c36:	f000 fd33 	bl	80116a0 <__assert_func>
 8010c3a:	2301      	movs	r3, #1
 8010c3c:	6144      	str	r4, [r0, #20]
 8010c3e:	6103      	str	r3, [r0, #16]
 8010c40:	bd10      	pop	{r4, pc}
 8010c42:	bf00      	nop
 8010c44:	08013120 	.word	0x08013120
 8010c48:	08013131 	.word	0x08013131

08010c4c <__multiply>:
 8010c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c50:	4691      	mov	r9, r2
 8010c52:	690a      	ldr	r2, [r1, #16]
 8010c54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010c58:	429a      	cmp	r2, r3
 8010c5a:	bfb8      	it	lt
 8010c5c:	460b      	movlt	r3, r1
 8010c5e:	460c      	mov	r4, r1
 8010c60:	bfbc      	itt	lt
 8010c62:	464c      	movlt	r4, r9
 8010c64:	4699      	movlt	r9, r3
 8010c66:	6927      	ldr	r7, [r4, #16]
 8010c68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010c6c:	68a3      	ldr	r3, [r4, #8]
 8010c6e:	6861      	ldr	r1, [r4, #4]
 8010c70:	eb07 060a 	add.w	r6, r7, sl
 8010c74:	42b3      	cmp	r3, r6
 8010c76:	b085      	sub	sp, #20
 8010c78:	bfb8      	it	lt
 8010c7a:	3101      	addlt	r1, #1
 8010c7c:	f7ff feda 	bl	8010a34 <_Balloc>
 8010c80:	b930      	cbnz	r0, 8010c90 <__multiply+0x44>
 8010c82:	4602      	mov	r2, r0
 8010c84:	4b44      	ldr	r3, [pc, #272]	; (8010d98 <__multiply+0x14c>)
 8010c86:	4845      	ldr	r0, [pc, #276]	; (8010d9c <__multiply+0x150>)
 8010c88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010c8c:	f000 fd08 	bl	80116a0 <__assert_func>
 8010c90:	f100 0514 	add.w	r5, r0, #20
 8010c94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010c98:	462b      	mov	r3, r5
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	4543      	cmp	r3, r8
 8010c9e:	d321      	bcc.n	8010ce4 <__multiply+0x98>
 8010ca0:	f104 0314 	add.w	r3, r4, #20
 8010ca4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010ca8:	f109 0314 	add.w	r3, r9, #20
 8010cac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010cb0:	9202      	str	r2, [sp, #8]
 8010cb2:	1b3a      	subs	r2, r7, r4
 8010cb4:	3a15      	subs	r2, #21
 8010cb6:	f022 0203 	bic.w	r2, r2, #3
 8010cba:	3204      	adds	r2, #4
 8010cbc:	f104 0115 	add.w	r1, r4, #21
 8010cc0:	428f      	cmp	r7, r1
 8010cc2:	bf38      	it	cc
 8010cc4:	2204      	movcc	r2, #4
 8010cc6:	9201      	str	r2, [sp, #4]
 8010cc8:	9a02      	ldr	r2, [sp, #8]
 8010cca:	9303      	str	r3, [sp, #12]
 8010ccc:	429a      	cmp	r2, r3
 8010cce:	d80c      	bhi.n	8010cea <__multiply+0x9e>
 8010cd0:	2e00      	cmp	r6, #0
 8010cd2:	dd03      	ble.n	8010cdc <__multiply+0x90>
 8010cd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d05b      	beq.n	8010d94 <__multiply+0x148>
 8010cdc:	6106      	str	r6, [r0, #16]
 8010cde:	b005      	add	sp, #20
 8010ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce4:	f843 2b04 	str.w	r2, [r3], #4
 8010ce8:	e7d8      	b.n	8010c9c <__multiply+0x50>
 8010cea:	f8b3 a000 	ldrh.w	sl, [r3]
 8010cee:	f1ba 0f00 	cmp.w	sl, #0
 8010cf2:	d024      	beq.n	8010d3e <__multiply+0xf2>
 8010cf4:	f104 0e14 	add.w	lr, r4, #20
 8010cf8:	46a9      	mov	r9, r5
 8010cfa:	f04f 0c00 	mov.w	ip, #0
 8010cfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010d02:	f8d9 1000 	ldr.w	r1, [r9]
 8010d06:	fa1f fb82 	uxth.w	fp, r2
 8010d0a:	b289      	uxth	r1, r1
 8010d0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010d10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010d14:	f8d9 2000 	ldr.w	r2, [r9]
 8010d18:	4461      	add	r1, ip
 8010d1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010d22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010d26:	b289      	uxth	r1, r1
 8010d28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d2c:	4577      	cmp	r7, lr
 8010d2e:	f849 1b04 	str.w	r1, [r9], #4
 8010d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010d36:	d8e2      	bhi.n	8010cfe <__multiply+0xb2>
 8010d38:	9a01      	ldr	r2, [sp, #4]
 8010d3a:	f845 c002 	str.w	ip, [r5, r2]
 8010d3e:	9a03      	ldr	r2, [sp, #12]
 8010d40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010d44:	3304      	adds	r3, #4
 8010d46:	f1b9 0f00 	cmp.w	r9, #0
 8010d4a:	d021      	beq.n	8010d90 <__multiply+0x144>
 8010d4c:	6829      	ldr	r1, [r5, #0]
 8010d4e:	f104 0c14 	add.w	ip, r4, #20
 8010d52:	46ae      	mov	lr, r5
 8010d54:	f04f 0a00 	mov.w	sl, #0
 8010d58:	f8bc b000 	ldrh.w	fp, [ip]
 8010d5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010d60:	fb09 220b 	mla	r2, r9, fp, r2
 8010d64:	4452      	add	r2, sl
 8010d66:	b289      	uxth	r1, r1
 8010d68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010d6c:	f84e 1b04 	str.w	r1, [lr], #4
 8010d70:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010d74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d78:	f8be 1000 	ldrh.w	r1, [lr]
 8010d7c:	fb09 110a 	mla	r1, r9, sl, r1
 8010d80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010d84:	4567      	cmp	r7, ip
 8010d86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010d8a:	d8e5      	bhi.n	8010d58 <__multiply+0x10c>
 8010d8c:	9a01      	ldr	r2, [sp, #4]
 8010d8e:	50a9      	str	r1, [r5, r2]
 8010d90:	3504      	adds	r5, #4
 8010d92:	e799      	b.n	8010cc8 <__multiply+0x7c>
 8010d94:	3e01      	subs	r6, #1
 8010d96:	e79b      	b.n	8010cd0 <__multiply+0x84>
 8010d98:	08013120 	.word	0x08013120
 8010d9c:	08013131 	.word	0x08013131

08010da0 <__pow5mult>:
 8010da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010da4:	4615      	mov	r5, r2
 8010da6:	f012 0203 	ands.w	r2, r2, #3
 8010daa:	4606      	mov	r6, r0
 8010dac:	460f      	mov	r7, r1
 8010dae:	d007      	beq.n	8010dc0 <__pow5mult+0x20>
 8010db0:	4c25      	ldr	r4, [pc, #148]	; (8010e48 <__pow5mult+0xa8>)
 8010db2:	3a01      	subs	r2, #1
 8010db4:	2300      	movs	r3, #0
 8010db6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010dba:	f7ff fe9d 	bl	8010af8 <__multadd>
 8010dbe:	4607      	mov	r7, r0
 8010dc0:	10ad      	asrs	r5, r5, #2
 8010dc2:	d03d      	beq.n	8010e40 <__pow5mult+0xa0>
 8010dc4:	69f4      	ldr	r4, [r6, #28]
 8010dc6:	b97c      	cbnz	r4, 8010de8 <__pow5mult+0x48>
 8010dc8:	2010      	movs	r0, #16
 8010dca:	f7ff fd7f 	bl	80108cc <malloc>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	61f0      	str	r0, [r6, #28]
 8010dd2:	b928      	cbnz	r0, 8010de0 <__pow5mult+0x40>
 8010dd4:	4b1d      	ldr	r3, [pc, #116]	; (8010e4c <__pow5mult+0xac>)
 8010dd6:	481e      	ldr	r0, [pc, #120]	; (8010e50 <__pow5mult+0xb0>)
 8010dd8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8010ddc:	f000 fc60 	bl	80116a0 <__assert_func>
 8010de0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010de4:	6004      	str	r4, [r0, #0]
 8010de6:	60c4      	str	r4, [r0, #12]
 8010de8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8010dec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010df0:	b94c      	cbnz	r4, 8010e06 <__pow5mult+0x66>
 8010df2:	f240 2171 	movw	r1, #625	; 0x271
 8010df6:	4630      	mov	r0, r6
 8010df8:	f7ff ff12 	bl	8010c20 <__i2b>
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	f8c8 0008 	str.w	r0, [r8, #8]
 8010e02:	4604      	mov	r4, r0
 8010e04:	6003      	str	r3, [r0, #0]
 8010e06:	f04f 0900 	mov.w	r9, #0
 8010e0a:	07eb      	lsls	r3, r5, #31
 8010e0c:	d50a      	bpl.n	8010e24 <__pow5mult+0x84>
 8010e0e:	4639      	mov	r1, r7
 8010e10:	4622      	mov	r2, r4
 8010e12:	4630      	mov	r0, r6
 8010e14:	f7ff ff1a 	bl	8010c4c <__multiply>
 8010e18:	4639      	mov	r1, r7
 8010e1a:	4680      	mov	r8, r0
 8010e1c:	4630      	mov	r0, r6
 8010e1e:	f7ff fe49 	bl	8010ab4 <_Bfree>
 8010e22:	4647      	mov	r7, r8
 8010e24:	106d      	asrs	r5, r5, #1
 8010e26:	d00b      	beq.n	8010e40 <__pow5mult+0xa0>
 8010e28:	6820      	ldr	r0, [r4, #0]
 8010e2a:	b938      	cbnz	r0, 8010e3c <__pow5mult+0x9c>
 8010e2c:	4622      	mov	r2, r4
 8010e2e:	4621      	mov	r1, r4
 8010e30:	4630      	mov	r0, r6
 8010e32:	f7ff ff0b 	bl	8010c4c <__multiply>
 8010e36:	6020      	str	r0, [r4, #0]
 8010e38:	f8c0 9000 	str.w	r9, [r0]
 8010e3c:	4604      	mov	r4, r0
 8010e3e:	e7e4      	b.n	8010e0a <__pow5mult+0x6a>
 8010e40:	4638      	mov	r0, r7
 8010e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e46:	bf00      	nop
 8010e48:	08013280 	.word	0x08013280
 8010e4c:	080130b1 	.word	0x080130b1
 8010e50:	08013131 	.word	0x08013131

08010e54 <__lshift>:
 8010e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010e58:	460c      	mov	r4, r1
 8010e5a:	6849      	ldr	r1, [r1, #4]
 8010e5c:	6923      	ldr	r3, [r4, #16]
 8010e5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010e62:	68a3      	ldr	r3, [r4, #8]
 8010e64:	4607      	mov	r7, r0
 8010e66:	4691      	mov	r9, r2
 8010e68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010e6c:	f108 0601 	add.w	r6, r8, #1
 8010e70:	42b3      	cmp	r3, r6
 8010e72:	db0b      	blt.n	8010e8c <__lshift+0x38>
 8010e74:	4638      	mov	r0, r7
 8010e76:	f7ff fddd 	bl	8010a34 <_Balloc>
 8010e7a:	4605      	mov	r5, r0
 8010e7c:	b948      	cbnz	r0, 8010e92 <__lshift+0x3e>
 8010e7e:	4602      	mov	r2, r0
 8010e80:	4b28      	ldr	r3, [pc, #160]	; (8010f24 <__lshift+0xd0>)
 8010e82:	4829      	ldr	r0, [pc, #164]	; (8010f28 <__lshift+0xd4>)
 8010e84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010e88:	f000 fc0a 	bl	80116a0 <__assert_func>
 8010e8c:	3101      	adds	r1, #1
 8010e8e:	005b      	lsls	r3, r3, #1
 8010e90:	e7ee      	b.n	8010e70 <__lshift+0x1c>
 8010e92:	2300      	movs	r3, #0
 8010e94:	f100 0114 	add.w	r1, r0, #20
 8010e98:	f100 0210 	add.w	r2, r0, #16
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	4553      	cmp	r3, sl
 8010ea0:	db33      	blt.n	8010f0a <__lshift+0xb6>
 8010ea2:	6920      	ldr	r0, [r4, #16]
 8010ea4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ea8:	f104 0314 	add.w	r3, r4, #20
 8010eac:	f019 091f 	ands.w	r9, r9, #31
 8010eb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010eb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010eb8:	d02b      	beq.n	8010f12 <__lshift+0xbe>
 8010eba:	f1c9 0e20 	rsb	lr, r9, #32
 8010ebe:	468a      	mov	sl, r1
 8010ec0:	2200      	movs	r2, #0
 8010ec2:	6818      	ldr	r0, [r3, #0]
 8010ec4:	fa00 f009 	lsl.w	r0, r0, r9
 8010ec8:	4310      	orrs	r0, r2
 8010eca:	f84a 0b04 	str.w	r0, [sl], #4
 8010ece:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ed2:	459c      	cmp	ip, r3
 8010ed4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010ed8:	d8f3      	bhi.n	8010ec2 <__lshift+0x6e>
 8010eda:	ebac 0304 	sub.w	r3, ip, r4
 8010ede:	3b15      	subs	r3, #21
 8010ee0:	f023 0303 	bic.w	r3, r3, #3
 8010ee4:	3304      	adds	r3, #4
 8010ee6:	f104 0015 	add.w	r0, r4, #21
 8010eea:	4584      	cmp	ip, r0
 8010eec:	bf38      	it	cc
 8010eee:	2304      	movcc	r3, #4
 8010ef0:	50ca      	str	r2, [r1, r3]
 8010ef2:	b10a      	cbz	r2, 8010ef8 <__lshift+0xa4>
 8010ef4:	f108 0602 	add.w	r6, r8, #2
 8010ef8:	3e01      	subs	r6, #1
 8010efa:	4638      	mov	r0, r7
 8010efc:	612e      	str	r6, [r5, #16]
 8010efe:	4621      	mov	r1, r4
 8010f00:	f7ff fdd8 	bl	8010ab4 <_Bfree>
 8010f04:	4628      	mov	r0, r5
 8010f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010f0e:	3301      	adds	r3, #1
 8010f10:	e7c5      	b.n	8010e9e <__lshift+0x4a>
 8010f12:	3904      	subs	r1, #4
 8010f14:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f18:	f841 2f04 	str.w	r2, [r1, #4]!
 8010f1c:	459c      	cmp	ip, r3
 8010f1e:	d8f9      	bhi.n	8010f14 <__lshift+0xc0>
 8010f20:	e7ea      	b.n	8010ef8 <__lshift+0xa4>
 8010f22:	bf00      	nop
 8010f24:	08013120 	.word	0x08013120
 8010f28:	08013131 	.word	0x08013131

08010f2c <__mcmp>:
 8010f2c:	b530      	push	{r4, r5, lr}
 8010f2e:	6902      	ldr	r2, [r0, #16]
 8010f30:	690c      	ldr	r4, [r1, #16]
 8010f32:	1b12      	subs	r2, r2, r4
 8010f34:	d10e      	bne.n	8010f54 <__mcmp+0x28>
 8010f36:	f100 0314 	add.w	r3, r0, #20
 8010f3a:	3114      	adds	r1, #20
 8010f3c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010f40:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010f44:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010f48:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010f4c:	42a5      	cmp	r5, r4
 8010f4e:	d003      	beq.n	8010f58 <__mcmp+0x2c>
 8010f50:	d305      	bcc.n	8010f5e <__mcmp+0x32>
 8010f52:	2201      	movs	r2, #1
 8010f54:	4610      	mov	r0, r2
 8010f56:	bd30      	pop	{r4, r5, pc}
 8010f58:	4283      	cmp	r3, r0
 8010f5a:	d3f3      	bcc.n	8010f44 <__mcmp+0x18>
 8010f5c:	e7fa      	b.n	8010f54 <__mcmp+0x28>
 8010f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8010f62:	e7f7      	b.n	8010f54 <__mcmp+0x28>

08010f64 <__mdiff>:
 8010f64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010f68:	460c      	mov	r4, r1
 8010f6a:	4606      	mov	r6, r0
 8010f6c:	4611      	mov	r1, r2
 8010f6e:	4620      	mov	r0, r4
 8010f70:	4690      	mov	r8, r2
 8010f72:	f7ff ffdb 	bl	8010f2c <__mcmp>
 8010f76:	1e05      	subs	r5, r0, #0
 8010f78:	d110      	bne.n	8010f9c <__mdiff+0x38>
 8010f7a:	4629      	mov	r1, r5
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	f7ff fd59 	bl	8010a34 <_Balloc>
 8010f82:	b930      	cbnz	r0, 8010f92 <__mdiff+0x2e>
 8010f84:	4b3a      	ldr	r3, [pc, #232]	; (8011070 <__mdiff+0x10c>)
 8010f86:	4602      	mov	r2, r0
 8010f88:	f240 2137 	movw	r1, #567	; 0x237
 8010f8c:	4839      	ldr	r0, [pc, #228]	; (8011074 <__mdiff+0x110>)
 8010f8e:	f000 fb87 	bl	80116a0 <__assert_func>
 8010f92:	2301      	movs	r3, #1
 8010f94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010f98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010f9c:	bfa4      	itt	ge
 8010f9e:	4643      	movge	r3, r8
 8010fa0:	46a0      	movge	r8, r4
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010fa8:	bfa6      	itte	ge
 8010faa:	461c      	movge	r4, r3
 8010fac:	2500      	movge	r5, #0
 8010fae:	2501      	movlt	r5, #1
 8010fb0:	f7ff fd40 	bl	8010a34 <_Balloc>
 8010fb4:	b920      	cbnz	r0, 8010fc0 <__mdiff+0x5c>
 8010fb6:	4b2e      	ldr	r3, [pc, #184]	; (8011070 <__mdiff+0x10c>)
 8010fb8:	4602      	mov	r2, r0
 8010fba:	f240 2145 	movw	r1, #581	; 0x245
 8010fbe:	e7e5      	b.n	8010f8c <__mdiff+0x28>
 8010fc0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010fc4:	6926      	ldr	r6, [r4, #16]
 8010fc6:	60c5      	str	r5, [r0, #12]
 8010fc8:	f104 0914 	add.w	r9, r4, #20
 8010fcc:	f108 0514 	add.w	r5, r8, #20
 8010fd0:	f100 0e14 	add.w	lr, r0, #20
 8010fd4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010fd8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010fdc:	f108 0210 	add.w	r2, r8, #16
 8010fe0:	46f2      	mov	sl, lr
 8010fe2:	2100      	movs	r1, #0
 8010fe4:	f859 3b04 	ldr.w	r3, [r9], #4
 8010fe8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010fec:	fa11 f88b 	uxtah	r8, r1, fp
 8010ff0:	b299      	uxth	r1, r3
 8010ff2:	0c1b      	lsrs	r3, r3, #16
 8010ff4:	eba8 0801 	sub.w	r8, r8, r1
 8010ff8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010ffc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011000:	fa1f f888 	uxth.w	r8, r8
 8011004:	1419      	asrs	r1, r3, #16
 8011006:	454e      	cmp	r6, r9
 8011008:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801100c:	f84a 3b04 	str.w	r3, [sl], #4
 8011010:	d8e8      	bhi.n	8010fe4 <__mdiff+0x80>
 8011012:	1b33      	subs	r3, r6, r4
 8011014:	3b15      	subs	r3, #21
 8011016:	f023 0303 	bic.w	r3, r3, #3
 801101a:	3304      	adds	r3, #4
 801101c:	3415      	adds	r4, #21
 801101e:	42a6      	cmp	r6, r4
 8011020:	bf38      	it	cc
 8011022:	2304      	movcc	r3, #4
 8011024:	441d      	add	r5, r3
 8011026:	4473      	add	r3, lr
 8011028:	469e      	mov	lr, r3
 801102a:	462e      	mov	r6, r5
 801102c:	4566      	cmp	r6, ip
 801102e:	d30e      	bcc.n	801104e <__mdiff+0xea>
 8011030:	f10c 0203 	add.w	r2, ip, #3
 8011034:	1b52      	subs	r2, r2, r5
 8011036:	f022 0203 	bic.w	r2, r2, #3
 801103a:	3d03      	subs	r5, #3
 801103c:	45ac      	cmp	ip, r5
 801103e:	bf38      	it	cc
 8011040:	2200      	movcc	r2, #0
 8011042:	4413      	add	r3, r2
 8011044:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8011048:	b17a      	cbz	r2, 801106a <__mdiff+0x106>
 801104a:	6107      	str	r7, [r0, #16]
 801104c:	e7a4      	b.n	8010f98 <__mdiff+0x34>
 801104e:	f856 8b04 	ldr.w	r8, [r6], #4
 8011052:	fa11 f288 	uxtah	r2, r1, r8
 8011056:	1414      	asrs	r4, r2, #16
 8011058:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801105c:	b292      	uxth	r2, r2
 801105e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011062:	f84e 2b04 	str.w	r2, [lr], #4
 8011066:	1421      	asrs	r1, r4, #16
 8011068:	e7e0      	b.n	801102c <__mdiff+0xc8>
 801106a:	3f01      	subs	r7, #1
 801106c:	e7ea      	b.n	8011044 <__mdiff+0xe0>
 801106e:	bf00      	nop
 8011070:	08013120 	.word	0x08013120
 8011074:	08013131 	.word	0x08013131

08011078 <__d2b>:
 8011078:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801107c:	460f      	mov	r7, r1
 801107e:	2101      	movs	r1, #1
 8011080:	ec59 8b10 	vmov	r8, r9, d0
 8011084:	4616      	mov	r6, r2
 8011086:	f7ff fcd5 	bl	8010a34 <_Balloc>
 801108a:	4604      	mov	r4, r0
 801108c:	b930      	cbnz	r0, 801109c <__d2b+0x24>
 801108e:	4602      	mov	r2, r0
 8011090:	4b24      	ldr	r3, [pc, #144]	; (8011124 <__d2b+0xac>)
 8011092:	4825      	ldr	r0, [pc, #148]	; (8011128 <__d2b+0xb0>)
 8011094:	f240 310f 	movw	r1, #783	; 0x30f
 8011098:	f000 fb02 	bl	80116a0 <__assert_func>
 801109c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80110a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80110a4:	bb2d      	cbnz	r5, 80110f2 <__d2b+0x7a>
 80110a6:	9301      	str	r3, [sp, #4]
 80110a8:	f1b8 0300 	subs.w	r3, r8, #0
 80110ac:	d026      	beq.n	80110fc <__d2b+0x84>
 80110ae:	4668      	mov	r0, sp
 80110b0:	9300      	str	r3, [sp, #0]
 80110b2:	f7ff fd87 	bl	8010bc4 <__lo0bits>
 80110b6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80110ba:	b1e8      	cbz	r0, 80110f8 <__d2b+0x80>
 80110bc:	f1c0 0320 	rsb	r3, r0, #32
 80110c0:	fa02 f303 	lsl.w	r3, r2, r3
 80110c4:	430b      	orrs	r3, r1
 80110c6:	40c2      	lsrs	r2, r0
 80110c8:	6163      	str	r3, [r4, #20]
 80110ca:	9201      	str	r2, [sp, #4]
 80110cc:	9b01      	ldr	r3, [sp, #4]
 80110ce:	61a3      	str	r3, [r4, #24]
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	bf14      	ite	ne
 80110d4:	2202      	movne	r2, #2
 80110d6:	2201      	moveq	r2, #1
 80110d8:	6122      	str	r2, [r4, #16]
 80110da:	b1bd      	cbz	r5, 801110c <__d2b+0x94>
 80110dc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80110e0:	4405      	add	r5, r0
 80110e2:	603d      	str	r5, [r7, #0]
 80110e4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80110e8:	6030      	str	r0, [r6, #0]
 80110ea:	4620      	mov	r0, r4
 80110ec:	b003      	add	sp, #12
 80110ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80110f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80110f6:	e7d6      	b.n	80110a6 <__d2b+0x2e>
 80110f8:	6161      	str	r1, [r4, #20]
 80110fa:	e7e7      	b.n	80110cc <__d2b+0x54>
 80110fc:	a801      	add	r0, sp, #4
 80110fe:	f7ff fd61 	bl	8010bc4 <__lo0bits>
 8011102:	9b01      	ldr	r3, [sp, #4]
 8011104:	6163      	str	r3, [r4, #20]
 8011106:	3020      	adds	r0, #32
 8011108:	2201      	movs	r2, #1
 801110a:	e7e5      	b.n	80110d8 <__d2b+0x60>
 801110c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011110:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011114:	6038      	str	r0, [r7, #0]
 8011116:	6918      	ldr	r0, [r3, #16]
 8011118:	f7ff fd34 	bl	8010b84 <__hi0bits>
 801111c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011120:	e7e2      	b.n	80110e8 <__d2b+0x70>
 8011122:	bf00      	nop
 8011124:	08013120 	.word	0x08013120
 8011128:	08013131 	.word	0x08013131

0801112c <__sfputc_r>:
 801112c:	6893      	ldr	r3, [r2, #8]
 801112e:	3b01      	subs	r3, #1
 8011130:	2b00      	cmp	r3, #0
 8011132:	b410      	push	{r4}
 8011134:	6093      	str	r3, [r2, #8]
 8011136:	da08      	bge.n	801114a <__sfputc_r+0x1e>
 8011138:	6994      	ldr	r4, [r2, #24]
 801113a:	42a3      	cmp	r3, r4
 801113c:	db01      	blt.n	8011142 <__sfputc_r+0x16>
 801113e:	290a      	cmp	r1, #10
 8011140:	d103      	bne.n	801114a <__sfputc_r+0x1e>
 8011142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011146:	f7fe bbd8 	b.w	800f8fa <__swbuf_r>
 801114a:	6813      	ldr	r3, [r2, #0]
 801114c:	1c58      	adds	r0, r3, #1
 801114e:	6010      	str	r0, [r2, #0]
 8011150:	7019      	strb	r1, [r3, #0]
 8011152:	4608      	mov	r0, r1
 8011154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011158:	4770      	bx	lr

0801115a <__sfputs_r>:
 801115a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115c:	4606      	mov	r6, r0
 801115e:	460f      	mov	r7, r1
 8011160:	4614      	mov	r4, r2
 8011162:	18d5      	adds	r5, r2, r3
 8011164:	42ac      	cmp	r4, r5
 8011166:	d101      	bne.n	801116c <__sfputs_r+0x12>
 8011168:	2000      	movs	r0, #0
 801116a:	e007      	b.n	801117c <__sfputs_r+0x22>
 801116c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011170:	463a      	mov	r2, r7
 8011172:	4630      	mov	r0, r6
 8011174:	f7ff ffda 	bl	801112c <__sfputc_r>
 8011178:	1c43      	adds	r3, r0, #1
 801117a:	d1f3      	bne.n	8011164 <__sfputs_r+0xa>
 801117c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011180 <_vfiprintf_r>:
 8011180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011184:	460d      	mov	r5, r1
 8011186:	b09d      	sub	sp, #116	; 0x74
 8011188:	4614      	mov	r4, r2
 801118a:	4698      	mov	r8, r3
 801118c:	4606      	mov	r6, r0
 801118e:	b118      	cbz	r0, 8011198 <_vfiprintf_r+0x18>
 8011190:	6a03      	ldr	r3, [r0, #32]
 8011192:	b90b      	cbnz	r3, 8011198 <_vfiprintf_r+0x18>
 8011194:	f7fe fac2 	bl	800f71c <__sinit>
 8011198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801119a:	07d9      	lsls	r1, r3, #31
 801119c:	d405      	bmi.n	80111aa <_vfiprintf_r+0x2a>
 801119e:	89ab      	ldrh	r3, [r5, #12]
 80111a0:	059a      	lsls	r2, r3, #22
 80111a2:	d402      	bmi.n	80111aa <_vfiprintf_r+0x2a>
 80111a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111a6:	f7fe fcba 	bl	800fb1e <__retarget_lock_acquire_recursive>
 80111aa:	89ab      	ldrh	r3, [r5, #12]
 80111ac:	071b      	lsls	r3, r3, #28
 80111ae:	d501      	bpl.n	80111b4 <_vfiprintf_r+0x34>
 80111b0:	692b      	ldr	r3, [r5, #16]
 80111b2:	b99b      	cbnz	r3, 80111dc <_vfiprintf_r+0x5c>
 80111b4:	4629      	mov	r1, r5
 80111b6:	4630      	mov	r0, r6
 80111b8:	f7fe fbdc 	bl	800f974 <__swsetup_r>
 80111bc:	b170      	cbz	r0, 80111dc <_vfiprintf_r+0x5c>
 80111be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80111c0:	07dc      	lsls	r4, r3, #31
 80111c2:	d504      	bpl.n	80111ce <_vfiprintf_r+0x4e>
 80111c4:	f04f 30ff 	mov.w	r0, #4294967295
 80111c8:	b01d      	add	sp, #116	; 0x74
 80111ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111ce:	89ab      	ldrh	r3, [r5, #12]
 80111d0:	0598      	lsls	r0, r3, #22
 80111d2:	d4f7      	bmi.n	80111c4 <_vfiprintf_r+0x44>
 80111d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111d6:	f7fe fca3 	bl	800fb20 <__retarget_lock_release_recursive>
 80111da:	e7f3      	b.n	80111c4 <_vfiprintf_r+0x44>
 80111dc:	2300      	movs	r3, #0
 80111de:	9309      	str	r3, [sp, #36]	; 0x24
 80111e0:	2320      	movs	r3, #32
 80111e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80111e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80111ea:	2330      	movs	r3, #48	; 0x30
 80111ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80113a0 <_vfiprintf_r+0x220>
 80111f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80111f4:	f04f 0901 	mov.w	r9, #1
 80111f8:	4623      	mov	r3, r4
 80111fa:	469a      	mov	sl, r3
 80111fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011200:	b10a      	cbz	r2, 8011206 <_vfiprintf_r+0x86>
 8011202:	2a25      	cmp	r2, #37	; 0x25
 8011204:	d1f9      	bne.n	80111fa <_vfiprintf_r+0x7a>
 8011206:	ebba 0b04 	subs.w	fp, sl, r4
 801120a:	d00b      	beq.n	8011224 <_vfiprintf_r+0xa4>
 801120c:	465b      	mov	r3, fp
 801120e:	4622      	mov	r2, r4
 8011210:	4629      	mov	r1, r5
 8011212:	4630      	mov	r0, r6
 8011214:	f7ff ffa1 	bl	801115a <__sfputs_r>
 8011218:	3001      	adds	r0, #1
 801121a:	f000 80a9 	beq.w	8011370 <_vfiprintf_r+0x1f0>
 801121e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011220:	445a      	add	r2, fp
 8011222:	9209      	str	r2, [sp, #36]	; 0x24
 8011224:	f89a 3000 	ldrb.w	r3, [sl]
 8011228:	2b00      	cmp	r3, #0
 801122a:	f000 80a1 	beq.w	8011370 <_vfiprintf_r+0x1f0>
 801122e:	2300      	movs	r3, #0
 8011230:	f04f 32ff 	mov.w	r2, #4294967295
 8011234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011238:	f10a 0a01 	add.w	sl, sl, #1
 801123c:	9304      	str	r3, [sp, #16]
 801123e:	9307      	str	r3, [sp, #28]
 8011240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011244:	931a      	str	r3, [sp, #104]	; 0x68
 8011246:	4654      	mov	r4, sl
 8011248:	2205      	movs	r2, #5
 801124a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801124e:	4854      	ldr	r0, [pc, #336]	; (80113a0 <_vfiprintf_r+0x220>)
 8011250:	f7ee ffa6 	bl	80001a0 <memchr>
 8011254:	9a04      	ldr	r2, [sp, #16]
 8011256:	b9d8      	cbnz	r0, 8011290 <_vfiprintf_r+0x110>
 8011258:	06d1      	lsls	r1, r2, #27
 801125a:	bf44      	itt	mi
 801125c:	2320      	movmi	r3, #32
 801125e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011262:	0713      	lsls	r3, r2, #28
 8011264:	bf44      	itt	mi
 8011266:	232b      	movmi	r3, #43	; 0x2b
 8011268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801126c:	f89a 3000 	ldrb.w	r3, [sl]
 8011270:	2b2a      	cmp	r3, #42	; 0x2a
 8011272:	d015      	beq.n	80112a0 <_vfiprintf_r+0x120>
 8011274:	9a07      	ldr	r2, [sp, #28]
 8011276:	4654      	mov	r4, sl
 8011278:	2000      	movs	r0, #0
 801127a:	f04f 0c0a 	mov.w	ip, #10
 801127e:	4621      	mov	r1, r4
 8011280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011284:	3b30      	subs	r3, #48	; 0x30
 8011286:	2b09      	cmp	r3, #9
 8011288:	d94d      	bls.n	8011326 <_vfiprintf_r+0x1a6>
 801128a:	b1b0      	cbz	r0, 80112ba <_vfiprintf_r+0x13a>
 801128c:	9207      	str	r2, [sp, #28]
 801128e:	e014      	b.n	80112ba <_vfiprintf_r+0x13a>
 8011290:	eba0 0308 	sub.w	r3, r0, r8
 8011294:	fa09 f303 	lsl.w	r3, r9, r3
 8011298:	4313      	orrs	r3, r2
 801129a:	9304      	str	r3, [sp, #16]
 801129c:	46a2      	mov	sl, r4
 801129e:	e7d2      	b.n	8011246 <_vfiprintf_r+0xc6>
 80112a0:	9b03      	ldr	r3, [sp, #12]
 80112a2:	1d19      	adds	r1, r3, #4
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	9103      	str	r1, [sp, #12]
 80112a8:	2b00      	cmp	r3, #0
 80112aa:	bfbb      	ittet	lt
 80112ac:	425b      	neglt	r3, r3
 80112ae:	f042 0202 	orrlt.w	r2, r2, #2
 80112b2:	9307      	strge	r3, [sp, #28]
 80112b4:	9307      	strlt	r3, [sp, #28]
 80112b6:	bfb8      	it	lt
 80112b8:	9204      	strlt	r2, [sp, #16]
 80112ba:	7823      	ldrb	r3, [r4, #0]
 80112bc:	2b2e      	cmp	r3, #46	; 0x2e
 80112be:	d10c      	bne.n	80112da <_vfiprintf_r+0x15a>
 80112c0:	7863      	ldrb	r3, [r4, #1]
 80112c2:	2b2a      	cmp	r3, #42	; 0x2a
 80112c4:	d134      	bne.n	8011330 <_vfiprintf_r+0x1b0>
 80112c6:	9b03      	ldr	r3, [sp, #12]
 80112c8:	1d1a      	adds	r2, r3, #4
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	9203      	str	r2, [sp, #12]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	bfb8      	it	lt
 80112d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80112d6:	3402      	adds	r4, #2
 80112d8:	9305      	str	r3, [sp, #20]
 80112da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80113b0 <_vfiprintf_r+0x230>
 80112de:	7821      	ldrb	r1, [r4, #0]
 80112e0:	2203      	movs	r2, #3
 80112e2:	4650      	mov	r0, sl
 80112e4:	f7ee ff5c 	bl	80001a0 <memchr>
 80112e8:	b138      	cbz	r0, 80112fa <_vfiprintf_r+0x17a>
 80112ea:	9b04      	ldr	r3, [sp, #16]
 80112ec:	eba0 000a 	sub.w	r0, r0, sl
 80112f0:	2240      	movs	r2, #64	; 0x40
 80112f2:	4082      	lsls	r2, r0
 80112f4:	4313      	orrs	r3, r2
 80112f6:	3401      	adds	r4, #1
 80112f8:	9304      	str	r3, [sp, #16]
 80112fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80112fe:	4829      	ldr	r0, [pc, #164]	; (80113a4 <_vfiprintf_r+0x224>)
 8011300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011304:	2206      	movs	r2, #6
 8011306:	f7ee ff4b 	bl	80001a0 <memchr>
 801130a:	2800      	cmp	r0, #0
 801130c:	d03f      	beq.n	801138e <_vfiprintf_r+0x20e>
 801130e:	4b26      	ldr	r3, [pc, #152]	; (80113a8 <_vfiprintf_r+0x228>)
 8011310:	bb1b      	cbnz	r3, 801135a <_vfiprintf_r+0x1da>
 8011312:	9b03      	ldr	r3, [sp, #12]
 8011314:	3307      	adds	r3, #7
 8011316:	f023 0307 	bic.w	r3, r3, #7
 801131a:	3308      	adds	r3, #8
 801131c:	9303      	str	r3, [sp, #12]
 801131e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011320:	443b      	add	r3, r7
 8011322:	9309      	str	r3, [sp, #36]	; 0x24
 8011324:	e768      	b.n	80111f8 <_vfiprintf_r+0x78>
 8011326:	fb0c 3202 	mla	r2, ip, r2, r3
 801132a:	460c      	mov	r4, r1
 801132c:	2001      	movs	r0, #1
 801132e:	e7a6      	b.n	801127e <_vfiprintf_r+0xfe>
 8011330:	2300      	movs	r3, #0
 8011332:	3401      	adds	r4, #1
 8011334:	9305      	str	r3, [sp, #20]
 8011336:	4619      	mov	r1, r3
 8011338:	f04f 0c0a 	mov.w	ip, #10
 801133c:	4620      	mov	r0, r4
 801133e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011342:	3a30      	subs	r2, #48	; 0x30
 8011344:	2a09      	cmp	r2, #9
 8011346:	d903      	bls.n	8011350 <_vfiprintf_r+0x1d0>
 8011348:	2b00      	cmp	r3, #0
 801134a:	d0c6      	beq.n	80112da <_vfiprintf_r+0x15a>
 801134c:	9105      	str	r1, [sp, #20]
 801134e:	e7c4      	b.n	80112da <_vfiprintf_r+0x15a>
 8011350:	fb0c 2101 	mla	r1, ip, r1, r2
 8011354:	4604      	mov	r4, r0
 8011356:	2301      	movs	r3, #1
 8011358:	e7f0      	b.n	801133c <_vfiprintf_r+0x1bc>
 801135a:	ab03      	add	r3, sp, #12
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	462a      	mov	r2, r5
 8011360:	4b12      	ldr	r3, [pc, #72]	; (80113ac <_vfiprintf_r+0x22c>)
 8011362:	a904      	add	r1, sp, #16
 8011364:	4630      	mov	r0, r6
 8011366:	f7fd fd87 	bl	800ee78 <_printf_float>
 801136a:	4607      	mov	r7, r0
 801136c:	1c78      	adds	r0, r7, #1
 801136e:	d1d6      	bne.n	801131e <_vfiprintf_r+0x19e>
 8011370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011372:	07d9      	lsls	r1, r3, #31
 8011374:	d405      	bmi.n	8011382 <_vfiprintf_r+0x202>
 8011376:	89ab      	ldrh	r3, [r5, #12]
 8011378:	059a      	lsls	r2, r3, #22
 801137a:	d402      	bmi.n	8011382 <_vfiprintf_r+0x202>
 801137c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801137e:	f7fe fbcf 	bl	800fb20 <__retarget_lock_release_recursive>
 8011382:	89ab      	ldrh	r3, [r5, #12]
 8011384:	065b      	lsls	r3, r3, #25
 8011386:	f53f af1d 	bmi.w	80111c4 <_vfiprintf_r+0x44>
 801138a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801138c:	e71c      	b.n	80111c8 <_vfiprintf_r+0x48>
 801138e:	ab03      	add	r3, sp, #12
 8011390:	9300      	str	r3, [sp, #0]
 8011392:	462a      	mov	r2, r5
 8011394:	4b05      	ldr	r3, [pc, #20]	; (80113ac <_vfiprintf_r+0x22c>)
 8011396:	a904      	add	r1, sp, #16
 8011398:	4630      	mov	r0, r6
 801139a:	f7fe f811 	bl	800f3c0 <_printf_i>
 801139e:	e7e4      	b.n	801136a <_vfiprintf_r+0x1ea>
 80113a0:	0801328c 	.word	0x0801328c
 80113a4:	08013296 	.word	0x08013296
 80113a8:	0800ee79 	.word	0x0800ee79
 80113ac:	0801115b 	.word	0x0801115b
 80113b0:	08013292 	.word	0x08013292

080113b4 <__sflush_r>:
 80113b4:	898a      	ldrh	r2, [r1, #12]
 80113b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113ba:	4605      	mov	r5, r0
 80113bc:	0710      	lsls	r0, r2, #28
 80113be:	460c      	mov	r4, r1
 80113c0:	d458      	bmi.n	8011474 <__sflush_r+0xc0>
 80113c2:	684b      	ldr	r3, [r1, #4]
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	dc05      	bgt.n	80113d4 <__sflush_r+0x20>
 80113c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	dc02      	bgt.n	80113d4 <__sflush_r+0x20>
 80113ce:	2000      	movs	r0, #0
 80113d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80113d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80113d6:	2e00      	cmp	r6, #0
 80113d8:	d0f9      	beq.n	80113ce <__sflush_r+0x1a>
 80113da:	2300      	movs	r3, #0
 80113dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80113e0:	682f      	ldr	r7, [r5, #0]
 80113e2:	6a21      	ldr	r1, [r4, #32]
 80113e4:	602b      	str	r3, [r5, #0]
 80113e6:	d032      	beq.n	801144e <__sflush_r+0x9a>
 80113e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80113ea:	89a3      	ldrh	r3, [r4, #12]
 80113ec:	075a      	lsls	r2, r3, #29
 80113ee:	d505      	bpl.n	80113fc <__sflush_r+0x48>
 80113f0:	6863      	ldr	r3, [r4, #4]
 80113f2:	1ac0      	subs	r0, r0, r3
 80113f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80113f6:	b10b      	cbz	r3, 80113fc <__sflush_r+0x48>
 80113f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80113fa:	1ac0      	subs	r0, r0, r3
 80113fc:	2300      	movs	r3, #0
 80113fe:	4602      	mov	r2, r0
 8011400:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011402:	6a21      	ldr	r1, [r4, #32]
 8011404:	4628      	mov	r0, r5
 8011406:	47b0      	blx	r6
 8011408:	1c43      	adds	r3, r0, #1
 801140a:	89a3      	ldrh	r3, [r4, #12]
 801140c:	d106      	bne.n	801141c <__sflush_r+0x68>
 801140e:	6829      	ldr	r1, [r5, #0]
 8011410:	291d      	cmp	r1, #29
 8011412:	d82b      	bhi.n	801146c <__sflush_r+0xb8>
 8011414:	4a29      	ldr	r2, [pc, #164]	; (80114bc <__sflush_r+0x108>)
 8011416:	410a      	asrs	r2, r1
 8011418:	07d6      	lsls	r6, r2, #31
 801141a:	d427      	bmi.n	801146c <__sflush_r+0xb8>
 801141c:	2200      	movs	r2, #0
 801141e:	6062      	str	r2, [r4, #4]
 8011420:	04d9      	lsls	r1, r3, #19
 8011422:	6922      	ldr	r2, [r4, #16]
 8011424:	6022      	str	r2, [r4, #0]
 8011426:	d504      	bpl.n	8011432 <__sflush_r+0x7e>
 8011428:	1c42      	adds	r2, r0, #1
 801142a:	d101      	bne.n	8011430 <__sflush_r+0x7c>
 801142c:	682b      	ldr	r3, [r5, #0]
 801142e:	b903      	cbnz	r3, 8011432 <__sflush_r+0x7e>
 8011430:	6560      	str	r0, [r4, #84]	; 0x54
 8011432:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011434:	602f      	str	r7, [r5, #0]
 8011436:	2900      	cmp	r1, #0
 8011438:	d0c9      	beq.n	80113ce <__sflush_r+0x1a>
 801143a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801143e:	4299      	cmp	r1, r3
 8011440:	d002      	beq.n	8011448 <__sflush_r+0x94>
 8011442:	4628      	mov	r0, r5
 8011444:	f7ff f9f6 	bl	8010834 <_free_r>
 8011448:	2000      	movs	r0, #0
 801144a:	6360      	str	r0, [r4, #52]	; 0x34
 801144c:	e7c0      	b.n	80113d0 <__sflush_r+0x1c>
 801144e:	2301      	movs	r3, #1
 8011450:	4628      	mov	r0, r5
 8011452:	47b0      	blx	r6
 8011454:	1c41      	adds	r1, r0, #1
 8011456:	d1c8      	bne.n	80113ea <__sflush_r+0x36>
 8011458:	682b      	ldr	r3, [r5, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d0c5      	beq.n	80113ea <__sflush_r+0x36>
 801145e:	2b1d      	cmp	r3, #29
 8011460:	d001      	beq.n	8011466 <__sflush_r+0xb2>
 8011462:	2b16      	cmp	r3, #22
 8011464:	d101      	bne.n	801146a <__sflush_r+0xb6>
 8011466:	602f      	str	r7, [r5, #0]
 8011468:	e7b1      	b.n	80113ce <__sflush_r+0x1a>
 801146a:	89a3      	ldrh	r3, [r4, #12]
 801146c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011470:	81a3      	strh	r3, [r4, #12]
 8011472:	e7ad      	b.n	80113d0 <__sflush_r+0x1c>
 8011474:	690f      	ldr	r7, [r1, #16]
 8011476:	2f00      	cmp	r7, #0
 8011478:	d0a9      	beq.n	80113ce <__sflush_r+0x1a>
 801147a:	0793      	lsls	r3, r2, #30
 801147c:	680e      	ldr	r6, [r1, #0]
 801147e:	bf08      	it	eq
 8011480:	694b      	ldreq	r3, [r1, #20]
 8011482:	600f      	str	r7, [r1, #0]
 8011484:	bf18      	it	ne
 8011486:	2300      	movne	r3, #0
 8011488:	eba6 0807 	sub.w	r8, r6, r7
 801148c:	608b      	str	r3, [r1, #8]
 801148e:	f1b8 0f00 	cmp.w	r8, #0
 8011492:	dd9c      	ble.n	80113ce <__sflush_r+0x1a>
 8011494:	6a21      	ldr	r1, [r4, #32]
 8011496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011498:	4643      	mov	r3, r8
 801149a:	463a      	mov	r2, r7
 801149c:	4628      	mov	r0, r5
 801149e:	47b0      	blx	r6
 80114a0:	2800      	cmp	r0, #0
 80114a2:	dc06      	bgt.n	80114b2 <__sflush_r+0xfe>
 80114a4:	89a3      	ldrh	r3, [r4, #12]
 80114a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114aa:	81a3      	strh	r3, [r4, #12]
 80114ac:	f04f 30ff 	mov.w	r0, #4294967295
 80114b0:	e78e      	b.n	80113d0 <__sflush_r+0x1c>
 80114b2:	4407      	add	r7, r0
 80114b4:	eba8 0800 	sub.w	r8, r8, r0
 80114b8:	e7e9      	b.n	801148e <__sflush_r+0xda>
 80114ba:	bf00      	nop
 80114bc:	dfbffffe 	.word	0xdfbffffe

080114c0 <_fflush_r>:
 80114c0:	b538      	push	{r3, r4, r5, lr}
 80114c2:	690b      	ldr	r3, [r1, #16]
 80114c4:	4605      	mov	r5, r0
 80114c6:	460c      	mov	r4, r1
 80114c8:	b913      	cbnz	r3, 80114d0 <_fflush_r+0x10>
 80114ca:	2500      	movs	r5, #0
 80114cc:	4628      	mov	r0, r5
 80114ce:	bd38      	pop	{r3, r4, r5, pc}
 80114d0:	b118      	cbz	r0, 80114da <_fflush_r+0x1a>
 80114d2:	6a03      	ldr	r3, [r0, #32]
 80114d4:	b90b      	cbnz	r3, 80114da <_fflush_r+0x1a>
 80114d6:	f7fe f921 	bl	800f71c <__sinit>
 80114da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d0f3      	beq.n	80114ca <_fflush_r+0xa>
 80114e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80114e4:	07d0      	lsls	r0, r2, #31
 80114e6:	d404      	bmi.n	80114f2 <_fflush_r+0x32>
 80114e8:	0599      	lsls	r1, r3, #22
 80114ea:	d402      	bmi.n	80114f2 <_fflush_r+0x32>
 80114ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80114ee:	f7fe fb16 	bl	800fb1e <__retarget_lock_acquire_recursive>
 80114f2:	4628      	mov	r0, r5
 80114f4:	4621      	mov	r1, r4
 80114f6:	f7ff ff5d 	bl	80113b4 <__sflush_r>
 80114fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80114fc:	07da      	lsls	r2, r3, #31
 80114fe:	4605      	mov	r5, r0
 8011500:	d4e4      	bmi.n	80114cc <_fflush_r+0xc>
 8011502:	89a3      	ldrh	r3, [r4, #12]
 8011504:	059b      	lsls	r3, r3, #22
 8011506:	d4e1      	bmi.n	80114cc <_fflush_r+0xc>
 8011508:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801150a:	f7fe fb09 	bl	800fb20 <__retarget_lock_release_recursive>
 801150e:	e7dd      	b.n	80114cc <_fflush_r+0xc>

08011510 <__swhatbuf_r>:
 8011510:	b570      	push	{r4, r5, r6, lr}
 8011512:	460c      	mov	r4, r1
 8011514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011518:	2900      	cmp	r1, #0
 801151a:	b096      	sub	sp, #88	; 0x58
 801151c:	4615      	mov	r5, r2
 801151e:	461e      	mov	r6, r3
 8011520:	da0d      	bge.n	801153e <__swhatbuf_r+0x2e>
 8011522:	89a3      	ldrh	r3, [r4, #12]
 8011524:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011528:	f04f 0100 	mov.w	r1, #0
 801152c:	bf0c      	ite	eq
 801152e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011532:	2340      	movne	r3, #64	; 0x40
 8011534:	2000      	movs	r0, #0
 8011536:	6031      	str	r1, [r6, #0]
 8011538:	602b      	str	r3, [r5, #0]
 801153a:	b016      	add	sp, #88	; 0x58
 801153c:	bd70      	pop	{r4, r5, r6, pc}
 801153e:	466a      	mov	r2, sp
 8011540:	f000 f87c 	bl	801163c <_fstat_r>
 8011544:	2800      	cmp	r0, #0
 8011546:	dbec      	blt.n	8011522 <__swhatbuf_r+0x12>
 8011548:	9901      	ldr	r1, [sp, #4]
 801154a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801154e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011552:	4259      	negs	r1, r3
 8011554:	4159      	adcs	r1, r3
 8011556:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801155a:	e7eb      	b.n	8011534 <__swhatbuf_r+0x24>

0801155c <__smakebuf_r>:
 801155c:	898b      	ldrh	r3, [r1, #12]
 801155e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011560:	079d      	lsls	r5, r3, #30
 8011562:	4606      	mov	r6, r0
 8011564:	460c      	mov	r4, r1
 8011566:	d507      	bpl.n	8011578 <__smakebuf_r+0x1c>
 8011568:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801156c:	6023      	str	r3, [r4, #0]
 801156e:	6123      	str	r3, [r4, #16]
 8011570:	2301      	movs	r3, #1
 8011572:	6163      	str	r3, [r4, #20]
 8011574:	b002      	add	sp, #8
 8011576:	bd70      	pop	{r4, r5, r6, pc}
 8011578:	ab01      	add	r3, sp, #4
 801157a:	466a      	mov	r2, sp
 801157c:	f7ff ffc8 	bl	8011510 <__swhatbuf_r>
 8011580:	9900      	ldr	r1, [sp, #0]
 8011582:	4605      	mov	r5, r0
 8011584:	4630      	mov	r0, r6
 8011586:	f7ff f9c9 	bl	801091c <_malloc_r>
 801158a:	b948      	cbnz	r0, 80115a0 <__smakebuf_r+0x44>
 801158c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011590:	059a      	lsls	r2, r3, #22
 8011592:	d4ef      	bmi.n	8011574 <__smakebuf_r+0x18>
 8011594:	f023 0303 	bic.w	r3, r3, #3
 8011598:	f043 0302 	orr.w	r3, r3, #2
 801159c:	81a3      	strh	r3, [r4, #12]
 801159e:	e7e3      	b.n	8011568 <__smakebuf_r+0xc>
 80115a0:	89a3      	ldrh	r3, [r4, #12]
 80115a2:	6020      	str	r0, [r4, #0]
 80115a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80115a8:	81a3      	strh	r3, [r4, #12]
 80115aa:	9b00      	ldr	r3, [sp, #0]
 80115ac:	6163      	str	r3, [r4, #20]
 80115ae:	9b01      	ldr	r3, [sp, #4]
 80115b0:	6120      	str	r0, [r4, #16]
 80115b2:	b15b      	cbz	r3, 80115cc <__smakebuf_r+0x70>
 80115b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115b8:	4630      	mov	r0, r6
 80115ba:	f000 f851 	bl	8011660 <_isatty_r>
 80115be:	b128      	cbz	r0, 80115cc <__smakebuf_r+0x70>
 80115c0:	89a3      	ldrh	r3, [r4, #12]
 80115c2:	f023 0303 	bic.w	r3, r3, #3
 80115c6:	f043 0301 	orr.w	r3, r3, #1
 80115ca:	81a3      	strh	r3, [r4, #12]
 80115cc:	89a3      	ldrh	r3, [r4, #12]
 80115ce:	431d      	orrs	r5, r3
 80115d0:	81a5      	strh	r5, [r4, #12]
 80115d2:	e7cf      	b.n	8011574 <__smakebuf_r+0x18>

080115d4 <_putc_r>:
 80115d4:	b570      	push	{r4, r5, r6, lr}
 80115d6:	460d      	mov	r5, r1
 80115d8:	4614      	mov	r4, r2
 80115da:	4606      	mov	r6, r0
 80115dc:	b118      	cbz	r0, 80115e6 <_putc_r+0x12>
 80115de:	6a03      	ldr	r3, [r0, #32]
 80115e0:	b90b      	cbnz	r3, 80115e6 <_putc_r+0x12>
 80115e2:	f7fe f89b 	bl	800f71c <__sinit>
 80115e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80115e8:	07d8      	lsls	r0, r3, #31
 80115ea:	d405      	bmi.n	80115f8 <_putc_r+0x24>
 80115ec:	89a3      	ldrh	r3, [r4, #12]
 80115ee:	0599      	lsls	r1, r3, #22
 80115f0:	d402      	bmi.n	80115f8 <_putc_r+0x24>
 80115f2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80115f4:	f7fe fa93 	bl	800fb1e <__retarget_lock_acquire_recursive>
 80115f8:	68a3      	ldr	r3, [r4, #8]
 80115fa:	3b01      	subs	r3, #1
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	60a3      	str	r3, [r4, #8]
 8011600:	da05      	bge.n	801160e <_putc_r+0x3a>
 8011602:	69a2      	ldr	r2, [r4, #24]
 8011604:	4293      	cmp	r3, r2
 8011606:	db12      	blt.n	801162e <_putc_r+0x5a>
 8011608:	b2eb      	uxtb	r3, r5
 801160a:	2b0a      	cmp	r3, #10
 801160c:	d00f      	beq.n	801162e <_putc_r+0x5a>
 801160e:	6823      	ldr	r3, [r4, #0]
 8011610:	1c5a      	adds	r2, r3, #1
 8011612:	6022      	str	r2, [r4, #0]
 8011614:	701d      	strb	r5, [r3, #0]
 8011616:	b2ed      	uxtb	r5, r5
 8011618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801161a:	07da      	lsls	r2, r3, #31
 801161c:	d405      	bmi.n	801162a <_putc_r+0x56>
 801161e:	89a3      	ldrh	r3, [r4, #12]
 8011620:	059b      	lsls	r3, r3, #22
 8011622:	d402      	bmi.n	801162a <_putc_r+0x56>
 8011624:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011626:	f7fe fa7b 	bl	800fb20 <__retarget_lock_release_recursive>
 801162a:	4628      	mov	r0, r5
 801162c:	bd70      	pop	{r4, r5, r6, pc}
 801162e:	4629      	mov	r1, r5
 8011630:	4622      	mov	r2, r4
 8011632:	4630      	mov	r0, r6
 8011634:	f7fe f961 	bl	800f8fa <__swbuf_r>
 8011638:	4605      	mov	r5, r0
 801163a:	e7ed      	b.n	8011618 <_putc_r+0x44>

0801163c <_fstat_r>:
 801163c:	b538      	push	{r3, r4, r5, lr}
 801163e:	4d07      	ldr	r5, [pc, #28]	; (801165c <_fstat_r+0x20>)
 8011640:	2300      	movs	r3, #0
 8011642:	4604      	mov	r4, r0
 8011644:	4608      	mov	r0, r1
 8011646:	4611      	mov	r1, r2
 8011648:	602b      	str	r3, [r5, #0]
 801164a:	f7f1 ffa2 	bl	8003592 <_fstat>
 801164e:	1c43      	adds	r3, r0, #1
 8011650:	d102      	bne.n	8011658 <_fstat_r+0x1c>
 8011652:	682b      	ldr	r3, [r5, #0]
 8011654:	b103      	cbz	r3, 8011658 <_fstat_r+0x1c>
 8011656:	6023      	str	r3, [r4, #0]
 8011658:	bd38      	pop	{r3, r4, r5, pc}
 801165a:	bf00      	nop
 801165c:	20001a3c 	.word	0x20001a3c

08011660 <_isatty_r>:
 8011660:	b538      	push	{r3, r4, r5, lr}
 8011662:	4d06      	ldr	r5, [pc, #24]	; (801167c <_isatty_r+0x1c>)
 8011664:	2300      	movs	r3, #0
 8011666:	4604      	mov	r4, r0
 8011668:	4608      	mov	r0, r1
 801166a:	602b      	str	r3, [r5, #0]
 801166c:	f7f1 ffa1 	bl	80035b2 <_isatty>
 8011670:	1c43      	adds	r3, r0, #1
 8011672:	d102      	bne.n	801167a <_isatty_r+0x1a>
 8011674:	682b      	ldr	r3, [r5, #0]
 8011676:	b103      	cbz	r3, 801167a <_isatty_r+0x1a>
 8011678:	6023      	str	r3, [r4, #0]
 801167a:	bd38      	pop	{r3, r4, r5, pc}
 801167c:	20001a3c 	.word	0x20001a3c

08011680 <_sbrk_r>:
 8011680:	b538      	push	{r3, r4, r5, lr}
 8011682:	4d06      	ldr	r5, [pc, #24]	; (801169c <_sbrk_r+0x1c>)
 8011684:	2300      	movs	r3, #0
 8011686:	4604      	mov	r4, r0
 8011688:	4608      	mov	r0, r1
 801168a:	602b      	str	r3, [r5, #0]
 801168c:	f7f1 ffaa 	bl	80035e4 <_sbrk>
 8011690:	1c43      	adds	r3, r0, #1
 8011692:	d102      	bne.n	801169a <_sbrk_r+0x1a>
 8011694:	682b      	ldr	r3, [r5, #0]
 8011696:	b103      	cbz	r3, 801169a <_sbrk_r+0x1a>
 8011698:	6023      	str	r3, [r4, #0]
 801169a:	bd38      	pop	{r3, r4, r5, pc}
 801169c:	20001a3c 	.word	0x20001a3c

080116a0 <__assert_func>:
 80116a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80116a2:	4614      	mov	r4, r2
 80116a4:	461a      	mov	r2, r3
 80116a6:	4b09      	ldr	r3, [pc, #36]	; (80116cc <__assert_func+0x2c>)
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	4605      	mov	r5, r0
 80116ac:	68d8      	ldr	r0, [r3, #12]
 80116ae:	b14c      	cbz	r4, 80116c4 <__assert_func+0x24>
 80116b0:	4b07      	ldr	r3, [pc, #28]	; (80116d0 <__assert_func+0x30>)
 80116b2:	9100      	str	r1, [sp, #0]
 80116b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80116b8:	4906      	ldr	r1, [pc, #24]	; (80116d4 <__assert_func+0x34>)
 80116ba:	462b      	mov	r3, r5
 80116bc:	f000 f844 	bl	8011748 <fiprintf>
 80116c0:	f000 f854 	bl	801176c <abort>
 80116c4:	4b04      	ldr	r3, [pc, #16]	; (80116d8 <__assert_func+0x38>)
 80116c6:	461c      	mov	r4, r3
 80116c8:	e7f3      	b.n	80116b2 <__assert_func+0x12>
 80116ca:	bf00      	nop
 80116cc:	200000a4 	.word	0x200000a4
 80116d0:	080132a7 	.word	0x080132a7
 80116d4:	080132b4 	.word	0x080132b4
 80116d8:	080132e2 	.word	0x080132e2

080116dc <_calloc_r>:
 80116dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80116de:	fba1 2402 	umull	r2, r4, r1, r2
 80116e2:	b94c      	cbnz	r4, 80116f8 <_calloc_r+0x1c>
 80116e4:	4611      	mov	r1, r2
 80116e6:	9201      	str	r2, [sp, #4]
 80116e8:	f7ff f918 	bl	801091c <_malloc_r>
 80116ec:	9a01      	ldr	r2, [sp, #4]
 80116ee:	4605      	mov	r5, r0
 80116f0:	b930      	cbnz	r0, 8011700 <_calloc_r+0x24>
 80116f2:	4628      	mov	r0, r5
 80116f4:	b003      	add	sp, #12
 80116f6:	bd30      	pop	{r4, r5, pc}
 80116f8:	220c      	movs	r2, #12
 80116fa:	6002      	str	r2, [r0, #0]
 80116fc:	2500      	movs	r5, #0
 80116fe:	e7f8      	b.n	80116f2 <_calloc_r+0x16>
 8011700:	4621      	mov	r1, r4
 8011702:	f7fe f98f 	bl	800fa24 <memset>
 8011706:	e7f4      	b.n	80116f2 <_calloc_r+0x16>

08011708 <__ascii_mbtowc>:
 8011708:	b082      	sub	sp, #8
 801170a:	b901      	cbnz	r1, 801170e <__ascii_mbtowc+0x6>
 801170c:	a901      	add	r1, sp, #4
 801170e:	b142      	cbz	r2, 8011722 <__ascii_mbtowc+0x1a>
 8011710:	b14b      	cbz	r3, 8011726 <__ascii_mbtowc+0x1e>
 8011712:	7813      	ldrb	r3, [r2, #0]
 8011714:	600b      	str	r3, [r1, #0]
 8011716:	7812      	ldrb	r2, [r2, #0]
 8011718:	1e10      	subs	r0, r2, #0
 801171a:	bf18      	it	ne
 801171c:	2001      	movne	r0, #1
 801171e:	b002      	add	sp, #8
 8011720:	4770      	bx	lr
 8011722:	4610      	mov	r0, r2
 8011724:	e7fb      	b.n	801171e <__ascii_mbtowc+0x16>
 8011726:	f06f 0001 	mvn.w	r0, #1
 801172a:	e7f8      	b.n	801171e <__ascii_mbtowc+0x16>

0801172c <__ascii_wctomb>:
 801172c:	b149      	cbz	r1, 8011742 <__ascii_wctomb+0x16>
 801172e:	2aff      	cmp	r2, #255	; 0xff
 8011730:	bf85      	ittet	hi
 8011732:	238a      	movhi	r3, #138	; 0x8a
 8011734:	6003      	strhi	r3, [r0, #0]
 8011736:	700a      	strbls	r2, [r1, #0]
 8011738:	f04f 30ff 	movhi.w	r0, #4294967295
 801173c:	bf98      	it	ls
 801173e:	2001      	movls	r0, #1
 8011740:	4770      	bx	lr
 8011742:	4608      	mov	r0, r1
 8011744:	4770      	bx	lr
	...

08011748 <fiprintf>:
 8011748:	b40e      	push	{r1, r2, r3}
 801174a:	b503      	push	{r0, r1, lr}
 801174c:	4601      	mov	r1, r0
 801174e:	ab03      	add	r3, sp, #12
 8011750:	4805      	ldr	r0, [pc, #20]	; (8011768 <fiprintf+0x20>)
 8011752:	f853 2b04 	ldr.w	r2, [r3], #4
 8011756:	6800      	ldr	r0, [r0, #0]
 8011758:	9301      	str	r3, [sp, #4]
 801175a:	f7ff fd11 	bl	8011180 <_vfiprintf_r>
 801175e:	b002      	add	sp, #8
 8011760:	f85d eb04 	ldr.w	lr, [sp], #4
 8011764:	b003      	add	sp, #12
 8011766:	4770      	bx	lr
 8011768:	200000a4 	.word	0x200000a4

0801176c <abort>:
 801176c:	b508      	push	{r3, lr}
 801176e:	2006      	movs	r0, #6
 8011770:	f000 f82c 	bl	80117cc <raise>
 8011774:	2001      	movs	r0, #1
 8011776:	f7f1 fed9 	bl	800352c <_exit>

0801177a <_raise_r>:
 801177a:	291f      	cmp	r1, #31
 801177c:	b538      	push	{r3, r4, r5, lr}
 801177e:	4604      	mov	r4, r0
 8011780:	460d      	mov	r5, r1
 8011782:	d904      	bls.n	801178e <_raise_r+0x14>
 8011784:	2316      	movs	r3, #22
 8011786:	6003      	str	r3, [r0, #0]
 8011788:	f04f 30ff 	mov.w	r0, #4294967295
 801178c:	bd38      	pop	{r3, r4, r5, pc}
 801178e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8011790:	b112      	cbz	r2, 8011798 <_raise_r+0x1e>
 8011792:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011796:	b94b      	cbnz	r3, 80117ac <_raise_r+0x32>
 8011798:	4620      	mov	r0, r4
 801179a:	f000 f831 	bl	8011800 <_getpid_r>
 801179e:	462a      	mov	r2, r5
 80117a0:	4601      	mov	r1, r0
 80117a2:	4620      	mov	r0, r4
 80117a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80117a8:	f000 b818 	b.w	80117dc <_kill_r>
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d00a      	beq.n	80117c6 <_raise_r+0x4c>
 80117b0:	1c59      	adds	r1, r3, #1
 80117b2:	d103      	bne.n	80117bc <_raise_r+0x42>
 80117b4:	2316      	movs	r3, #22
 80117b6:	6003      	str	r3, [r0, #0]
 80117b8:	2001      	movs	r0, #1
 80117ba:	e7e7      	b.n	801178c <_raise_r+0x12>
 80117bc:	2400      	movs	r4, #0
 80117be:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80117c2:	4628      	mov	r0, r5
 80117c4:	4798      	blx	r3
 80117c6:	2000      	movs	r0, #0
 80117c8:	e7e0      	b.n	801178c <_raise_r+0x12>
	...

080117cc <raise>:
 80117cc:	4b02      	ldr	r3, [pc, #8]	; (80117d8 <raise+0xc>)
 80117ce:	4601      	mov	r1, r0
 80117d0:	6818      	ldr	r0, [r3, #0]
 80117d2:	f7ff bfd2 	b.w	801177a <_raise_r>
 80117d6:	bf00      	nop
 80117d8:	200000a4 	.word	0x200000a4

080117dc <_kill_r>:
 80117dc:	b538      	push	{r3, r4, r5, lr}
 80117de:	4d07      	ldr	r5, [pc, #28]	; (80117fc <_kill_r+0x20>)
 80117e0:	2300      	movs	r3, #0
 80117e2:	4604      	mov	r4, r0
 80117e4:	4608      	mov	r0, r1
 80117e6:	4611      	mov	r1, r2
 80117e8:	602b      	str	r3, [r5, #0]
 80117ea:	f7f1 fe8f 	bl	800350c <_kill>
 80117ee:	1c43      	adds	r3, r0, #1
 80117f0:	d102      	bne.n	80117f8 <_kill_r+0x1c>
 80117f2:	682b      	ldr	r3, [r5, #0]
 80117f4:	b103      	cbz	r3, 80117f8 <_kill_r+0x1c>
 80117f6:	6023      	str	r3, [r4, #0]
 80117f8:	bd38      	pop	{r3, r4, r5, pc}
 80117fa:	bf00      	nop
 80117fc:	20001a3c 	.word	0x20001a3c

08011800 <_getpid_r>:
 8011800:	f7f1 be7c 	b.w	80034fc <_getpid>

08011804 <_init>:
 8011804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011806:	bf00      	nop
 8011808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801180a:	bc08      	pop	{r3}
 801180c:	469e      	mov	lr, r3
 801180e:	4770      	bx	lr

08011810 <_fini>:
 8011810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011812:	bf00      	nop
 8011814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011816:	bc08      	pop	{r3}
 8011818:	469e      	mov	lr, r3
 801181a:	4770      	bx	lr
